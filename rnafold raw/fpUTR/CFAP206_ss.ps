%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCAUCUCCAUGGUUACGCGGCGGUGGCUGCGAGCGCCCAACUGCUCCGACCGUCGCGGUGAGGGCCCCAGGACAGAAGCAGACAGACACGGCUCCUGCUGUCGAUUCCGAUCCAGCCAGA\
) } def
/len { sequence length } bind def

/coor [
[115.28822327 144.94911194]
[105.25855255 147.18580627]
[94.98254395 147.21205139]
[84.94158936 145.02662659]
[77.99663544 158.32202148]
[71.05168915 171.61743164]
[64.10673523 184.91282654]
[65.33922577 201.26559448]
[51.64287949 210.28459167]
[37.10733032 202.69183350]
[36.68550110 186.29811096]
[50.81133652 177.96788025]
[57.75628662 164.67247009]
[64.70123291 151.37707520]
[71.64618683 138.08168030]
[61.63864899 127.97426605]
[55.07404709 115.35616302]
[52.54155731 101.35984039]
[54.26847076 87.24147797]
[40.63837814 80.97883606]
[27.00828552 74.71620178]
[13.37819386 68.45356750]
[-0.25189784 62.19093323]
[-13.88198948 55.92829895]
[-27.51208115 49.66566467]
[-41.14217377 43.40303040]
[-54.77226639 37.14039612]
[-70.54249573 38.40937424]
[-78.87702942 26.06494904]
[-83.44225311 26.67740631]
[-87.52240753 25.82145309]
[-90.69903564 23.84953308]
[-92.72003937 21.21720695]
[-93.51923370 18.41648674]
[-106.44581604 10.80705070]
[-119.37239838 3.19761348]
[-132.29898071 -4.41182327]
[-145.22555542 -12.02126026]
[-160.46058655 -7.81774139]
[-174.16427612 -15.69074726]
[-178.20648193 -30.96936226]
[-170.18904114 -44.58905411]
[-154.86854553 -48.46950531]
[-141.33436584 -40.30850983]
[-137.61611938 -24.94783974]
[-124.68953705 -17.33840370]
[-111.76295471 -9.72896671]
[-98.83638000 -2.11952972]
[-85.90979767 5.48990726]
[-72.61439514 12.43485641]
[-57.81908035 10.71793270]
[-48.50963211 23.51030350]
[-34.87953949 29.77293777]
[-21.24944687 36.03557205]
[-7.61935472 42.29820633]
[6.01073694 48.56084442]
[19.64082909 54.82347870]
[33.27091980 61.08611298]
[46.90101242 67.34874725]
[60.53110504 73.61138153]
[73.88081360 60.35229111]
[91.33258057 53.31993484]
[110.14557648 53.61875153]
[127.36519623 61.20182037]
[140.28706360 74.87820435]
[146.88179016 92.50000000]
[161.88179016 92.50000000]
[176.88179016 92.50000000]
[182.72846985 84.84509277]
[191.34573364 80.86132050]
[200.68769836 81.35197449]
[208.60191345 86.07445526]
[213.32534790 93.82610321]
[228.28204346 94.96509552]
[243.23873901 96.10409546]
[258.20864868 97.05353546]
[272.38299561 90.02513885]
[284.70205688 98.39713287]
[299.68280029 99.15686798]
[314.66354370 99.91660309]
[323.60690308 89.75424957]
[336.58963013 86.67922974]
[348.77893066 91.60424805]
[355.77050781 102.50633240]
[370.72720337 103.64533234]
[385.68389893 104.78433228]
[400.64059448 105.92332458]
[415.59729004 107.06232452]
[424.50769043 104.57363129]
[430.91687012 108.42434692]
[445.83990479 109.94187164]
[456.92501831 98.91215515]
[472.51074219 97.63979340]
[485.23800659 106.72554779]
[489.09738159 121.87940216]
[482.26657104 135.94616699]
[467.97088623 142.28396606]
[452.96032715 137.90025330]
[444.32238770 124.86490631]
[429.39935303 123.34738159]
[414.45828247 122.01902008]
[399.50158691 120.88002014]
[384.54489136 119.74102020]
[369.58819580 118.60202789]
[354.63150024 117.46302795]
[342.41152954 128.94238281]
[325.33139038 128.06990051]
[313.90380859 114.89735413]
[298.92306519 114.13761902]
[283.94232178 113.37787628]
[270.83950806 120.46062469]
[257.44891357 112.03428650]
[250.53056335 114.87006378]
[242.09974670 111.06079102]
[227.14305115 109.92179108]
[212.18635559 108.78279877]
[194.58512878 119.43923187]
[176.88179016 107.50000000]
[161.88179016 107.50000000]
[146.88179016 107.50000000]
[144.16993713 117.41175079]
[139.38891602 126.50784302]
[132.76271057 134.36215210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[29 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[66 120]
[67 119]
[68 118]
[73 116]
[74 115]
[75 114]
[76 112]
[78 110]
[79 109]
[80 108]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
