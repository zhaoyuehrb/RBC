%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUAGUGAUGAGGCUAGUGAUGAGGCUGUGUGCUUCUGAGCUGGGCAUCCGAAGGCAUCCUUGGGGAAGCUGAGGGCACGAGGAGGGGCUGCCAGACUCCGGGAGCUGCUGCCUGGCUGGGAUUCCUACACA\
) } def
/len { sequence length } bind def

/coor [
[-16.57147408 348.65292358]
[-6.43920135 359.71353149]
[-1.19821799 373.76815796]
[-1.61460900 388.76235962]
[-7.62750959 402.50445557]
[-18.35800171 412.98568726]
[-32.23758316 418.67404175]
[-47.23744583 418.73800659]
[-61.16502762 413.16821289]
[-71.98450470 402.77883911]
[-78.11436462 389.08853149]
[-78.65859222 374.09838867]
[-73.53874969 360.00146484]
[-85.83722687 368.58908081]
[-98.13570404 377.17672729]
[-110.43418121 385.76434326]
[-110.59054565 401.28063965]
[-119.86430359 413.72158813]
[-134.68951416 418.30337524]
[-149.36557007 413.26425171]
[-158.24923706 400.54180908]
[-157.92456055 385.02813721]
[-148.51638794 372.68853760]
[-133.64234924 368.26782227]
[-119.02181244 373.46588135]
[-106.72333527 364.87823486]
[-94.42485809 356.29061890]
[-82.12638092 347.70297241]
[-71.39617920 337.22143555]
[-62.52259445 325.12765503]
[-53.64901352 313.03387451]
[-44.77542877 300.94009399]
[-35.90184784 288.84631348]
[-39.81215286 271.03250122]
[-29.35953140 255.70207214]
[-10.72266674 252.73495483]
[-2.42569947 240.23854065]
[5.87126780 227.74212646]
[6.46521854 212.85937500]
[20.54442406 205.64227295]
[28.84139061 193.14585876]
[37.13835907 180.64944458]
[45.43532562 168.15303040]
[53.73229218 155.65661621]
[62.02925873 143.16020203]
[70.32622528 130.66378784]
[78.62319183 118.16738129]
[86.92016602 105.67096710]
[84.23294830 81.25133514]
[84.23294830 66.25133514]
[84.23294830 51.25133896]
[71.03843689 43.51491928]
[63.53739548 30.30011177]
[63.65723038 15.20534515]
[71.26562500 2.28372407]
[84.23294830 -5.04526949]
[84.23294830 -20.04526901]
[81.19475555 -26.08767128]
[81.66481018 -31.86989594]
[84.60107422 -35.74423218]
[85.30415344 -50.72774506]
[86.00724030 -65.71125793]
[86.71032715 -80.69477081]
[87.41340637 -95.67828369]
[88.11649323 -110.66179657]
[78.42326355 -123.44541931]
[82.51376343 -138.95823669]
[97.25010681 -145.30014038]
[111.32783508 -137.60617065]
[113.94771576 -121.77847290]
[103.10000610 -109.95871735]
[102.39691925 -94.97520447]
[101.69384003 -79.99168396]
[100.99075317 -65.00817108]
[100.28766632 -50.02466202]
[99.58458710 -35.04114914]
[99.23294830 -20.04526901]
[99.23294830 -5.04526949]
[112.20027161 2.28372407]
[119.80866241 15.20534515]
[119.92849731 30.30011177]
[112.42745972 43.51491928]
[99.23294830 51.25133896]
[99.23294830 66.25133514]
[99.23294830 81.25133514]
[110.44264984 91.21840668]
[123.24319458 81.92020416]
[136.78804016 88.11588287]
[151.68510437 86.36155701]
[166.58215332 84.60722351]
[181.47921753 82.85289764]
[194.27975464 73.55468750]
[207.82460022 79.75036621]
[222.72166443 77.99604034]
[231.15148926 64.82515717]
[246.09054565 60.20361710]
[260.48507690 66.31357574]
[267.53842163 80.27008820]
[263.92019653 95.48332214]
[251.33883667 104.77005768]
[235.73486328 103.74536896]
[224.47599792 92.89309692]
[209.57893372 94.64742279]
[197.84393311 103.82015228]
[183.23355103 97.74995422]
[168.33648682 99.50428009]
[153.43942261 101.25861359]
[138.54237366 103.01293945]
[126.80736542 112.18566132]
[112.19698334 106.11547089]
[99.41657257 113.96793365]
[91.11960602 126.46434784]
[82.82263947 138.96075439]
[74.52567291 151.45716858]
[66.22870636 163.95358276]
[57.93173981 176.44999695]
[49.63476944 188.94641113]
[41.33780289 201.44282532]
[33.04083633 213.93923950]
[31.85343170 229.71582031]
[18.36768150 236.03909302]
[10.07071304 248.53550720]
[1.77374613 261.03192139]
[6.38289213 272.11120605]
[5.04087496 283.91445923]
[-1.79778695 293.48019409]
[-12.31432533 298.46557617]
[-23.80806732 297.71990967]
[-32.68164825 309.81369019]
[-41.55523300 321.90744019]
[-50.42881775 334.00122070]
[-59.30239868 346.09500122]
[-45.08717346 341.30676270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 28]
[14 27]
[15 26]
[16 25]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[36 123]
[37 122]
[38 121]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[49 85]
[50 84]
[51 83]
[56 78]
[57 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[86 110]
[88 108]
[89 107]
[90 106]
[91 105]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
