%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGAAGUCCUGUAGGGAGAUGGGCAGUUACCUUCUCUCCGUCUCUCUCUCGGGGACUCUAUUUGUGGCUGGUGGAGCUGUCUUAAACGAAGAGAACC\
) } def
/len { sequence length } bind def

/coor [
[148.70320129 191.79429626]
[141.95578003 178.39756775]
[135.20835876 165.00083923]
[128.46092224 151.60411072]
[121.71350098 138.20739746]
[114.96607208 124.81066895]
[99.21661377 127.32578278]
[85.48716736 121.20886230]
[77.83145142 109.35337067]
[77.90859985 96.15830231]
[64.84115601 88.79338837]
[51.77371216 81.42847443]
[38.70626831 74.06356812]
[25.63882446 66.69865417]
[7.32026196 67.38949585]
[-1.15472531 52.10956955]
[-14.44489574 45.15461731]
[-27.73506546 38.19966125]
[-41.02523804 31.24471092]
[-54.31540680 24.28975677]
[-67.60557556 17.33480453]
[-80.89574432 10.37985134]
[-94.18592072 3.42489815]
[-107.47608948 -3.53005481]
[-120.76625824 -10.48500824]
[-134.05642700 -17.43996048]
[-149.87104797 -16.98326111]
[-157.56004333 -29.73976898]
[-170.85021973 -36.69472122]
[-185.24050903 -30.57478905]
[-200.18276978 -35.18597031]
[-208.62170410 -48.35100937]
[-206.57273865 -63.85377502]
[-195.00329590 -74.37433624]
[-179.37614441 -74.94520569]
[-167.06991577 -65.29683685]
[-163.89526367 -49.98489380]
[-150.60508728 -43.02994156]
[-135.74108887 -43.98410416]
[-127.10147858 -30.73013115]
[-113.81130219 -23.77517891]
[-100.52113342 -16.82022476]
[-87.23096466 -9.86527252]
[-73.94079590 -2.91031933]
[-60.65062332 4.04463387]
[-47.36045456 10.99958706]
[-34.07028198 17.95454025]
[-20.78011322 24.90949249]
[-7.48994255 31.86444473]
[5.80022764 38.81939697]
[17.54958344 35.50720596]
[28.73054504 41.33906937]
[33.00373459 53.63121033]
[46.07117844 60.99612427]
[59.13862228 68.36103058]
[72.20606995 75.72594452]
[85.27351379 83.09085846]
[106.48955536 75.13388062]
[127.28029633 90.23587799]
[140.97714233 84.12062836]
[154.67399597 78.00537109]
[168.37084961 71.89011383]
[182.06768799 65.77486420]
[195.76454163 59.65960693]
[209.46139526 53.54435349]
[213.58184814 38.45940018]
[226.46409607 29.59476662]
[242.02552795 31.13606644]
[252.91851807 42.35554504]
[253.99974060 57.95570374]
[244.75865173 70.57062531]
[229.55862427 74.24393463]
[215.57664490 67.24120331]
[201.87979126 73.35646057]
[188.18295288 79.47171021]
[174.48609924 85.58696747]
[160.78924561 91.70221710]
[147.09240723 97.81747437]
[133.39555359 103.93273163]
[128.36280823 118.06324005]
[135.11022949 131.45996094]
[141.85765076 144.85668945]
[148.60507202 158.25341797]
[155.35250854 171.65014648]
[162.09992981 185.04687500]
[177.15081787 183.24508667]
[191.90957642 186.70269775]
[204.59399414 195.00218201]
[213.67236328 207.14132690]
[218.04844666 221.65428162]
[217.19380188 236.78852844]
[211.21162415 250.71653748]
[200.82429504 261.75640869]
[187.28613281 268.57507324]
[172.23194885 270.34912109]
[157.47959900 266.86431885]
[144.81050110 258.54147339]
[135.75450134 246.38562012]
[131.40518188 231.86462402]
[132.28771973 216.73197937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[5 81]
[6 80]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[28 38]
[29 37]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
