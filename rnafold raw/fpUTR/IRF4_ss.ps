%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGCACUCUCAGUUUCACCGCUCGAUCUUGGGACCCACCGCUGCCCUCAGCUCCGAGUCCAGGGCGAGUGCAGAGCAGAGCGGGCGGAGGACCCCGGGCGCGGGCGCGGACGGCACGCGGGGC\
) } def
/len { sequence length } bind def

/coor [
[48.72582626 658.07904053]
[54.77216721 642.23992920]
[54.77216721 627.23992920]
[54.77216721 612.23992920]
[54.77216721 597.23992920]
[54.77216721 582.23992920]
[54.77216721 567.23992920]
[42.54605484 562.52386475]
[32.64782333 553.88751221]
[26.28719330 542.35717773]
[24.25150108 529.31457520]
[26.80828476 516.33135986]
[33.67036438 504.97946167]
[44.02791977 496.64114380]
[56.64399338 492.34039307]
[57.38579559 477.35876465]
[58.12760162 462.37710571]
[58.86940765 447.39547729]
[51.27270508 440.36666870]
[48.80398941 430.08850098]
[52.53200150 419.96145630]
[61.43263245 413.47674561]
[62.91442871 398.55010986]
[64.39622498 383.62347412]
[65.87802124 368.69686890]
[67.35981750 353.77023315]
[68.84161377 338.84359741]
[59.23223114 327.52124023]
[60.52234650 312.36242676]
[72.46341705 302.35998535]
[73.94521332 287.43334961]
[75.42700958 272.50671387]
[76.90880585 257.58010864]
[78.39060211 242.65347290]
[79.87239838 227.72683716]
[70.26301575 216.40449524]
[71.55313110 201.24566650]
[83.49419403 191.24322510]
[84.97599030 176.31660461]
[78.53382111 162.88723755]
[87.59654236 149.91891479]
[89.07833862 134.99227905]
[90.56013489 120.06565094]
[92.04193115 105.13902283]
[89.66119385 100.33435822]
[90.20498657 94.53736115]
[93.98402405 89.51724243]
[96.20217896 74.68215942]
[98.23668671 59.82077026]
[100.08723450 44.93535995]
[101.93778229 30.04994774]
[95.96210480 15.40065098]
[105.21045685 3.72515297]
[107.06100464 -11.16025925]
[108.91155243 -26.04567146]
[110.76209259 -40.93108368]
[104.78642273 -55.58037949]
[114.03477478 -67.25587463]
[115.70107269 -82.16304016]
[109.36489105 -96.66004944]
[118.32162476 -108.56072998]
[119.80342102 -123.48735809]
[109.59412384 -135.55160522]
[110.98901367 -151.29420471]
[123.16052246 -161.37538147]
[138.88749695 -159.81413269]
[148.83943176 -147.53672791]
[147.11198425 -131.82711792]
[134.73005676 -122.00556183]
[133.24826050 -107.07893372]
[139.69042969 -93.64957428]
[130.62770081 -80.68124390]
[133.12451172 -73.63871765]
[128.92018127 -65.40533447]
[135.02822876 -51.82073975]
[125.64750671 -39.08053970]
[123.79695892 -24.19512558]
[121.94641876 -9.30971432]
[120.09587097 5.57569742]
[126.20390320 19.16029167]
[116.82318878 31.90049362]
[114.97264862 46.78590393]
[113.12210083 61.67131805]
[115.44395447 68.77344513]
[111.03726959 76.90031433]
[108.81910706 91.73540497]
[106.96855927 106.62081909]
[105.48676300 121.54744720]
[104.00496674 136.47407532]
[102.52317047 151.40071106]
[108.85935974 165.89772034]
[99.90261841 177.79840088]
[98.42082214 192.72502136]
[108.16228485 204.87992859]
[106.44689941 219.99653625]
[94.79902649 229.20863342]
[93.31723022 244.13526917]
[91.83543396 259.06188965]
[90.35363770 273.98852539]
[88.87184143 288.91516113]
[87.39004517 303.84179688]
[97.13150787 315.99667358]
[95.41612244 331.11331177]
[83.76824188 340.32537842]
[82.28644562 355.25201416]
[80.80464935 370.17864990]
[79.32285309 385.10528564]
[77.84105682 400.03192139]
[76.35926056 414.95852661]
[85.54870605 432.82037354]
[73.85105896 448.13726807]
[73.10925293 463.11892700]
[72.36744690 478.10055542]
[71.62564087 493.08221436]
[86.79280853 500.93325806]
[97.01300812 514.54791260]
[100.29650879 531.19610596]
[96.03859711 547.56542969]
[85.13023376 560.41992188]
[69.77216339 567.23992920]
[69.77216339 582.23992920]
[69.77216339 597.23992920]
[69.77216339 612.23992920]
[69.77216339 627.23992920]
[69.77216339 642.23992920]
[75.81850433 658.07904053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[15 114]
[16 113]
[17 112]
[18 111]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[38 93]
[39 92]
[41 90]
[42 89]
[43 88]
[44 87]
[47 86]
[48 85]
[49 83]
[50 82]
[51 81]
[53 79]
[54 78]
[55 77]
[56 76]
[58 74]
[59 72]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
