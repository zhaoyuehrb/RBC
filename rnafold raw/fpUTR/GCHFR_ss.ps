%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGCUGCGCGUCGCAGUCCCGACGCGAGAAGGGCUGGAGUCGGCGUCCAGCCUAGAGCCCCCGGUGGGAGCCAGGCCGGGACGCGUGCACC\
) } def
/len { sequence length } bind def

/coor [
[-60.27941513 169.99551392]
[-66.95232391 166.17526245]
[-71.75025177 160.25569153]
[-86.58446503 162.47964478]
[-101.41868591 164.70359802]
[-116.25290680 166.92755127]
[-131.08712769 169.15150452]
[-145.92134094 171.37545776]
[-161.97811890 186.84568787]
[-182.13229370 179.18135071]
[-196.54360962 183.34240723]
[-210.95491028 187.50344849]
[-225.36621094 191.66448975]
[-239.77752686 195.82553101]
[-254.18882751 199.98657227]
[-268.60012817 204.14761353]
[-276.01638794 218.10377502]
[-291.15322876 222.64822388]
[-305.03021240 215.08480835]
[-309.41436768 199.90078735]
[-301.70465088 186.10455322]
[-286.47512817 181.88117981]
[-272.76116943 189.73631287]
[-258.34988403 185.57527161]
[-243.93856812 181.41423035]
[-229.52725220 177.25318909]
[-215.11595154 173.09213257]
[-200.70465088 168.93109131]
[-186.29335022 164.77005005]
[-183.90931702 156.80461121]
[-178.41687012 150.43577576]
[-170.71540833 146.82582092]
[-162.11569214 146.67527771]
[-154.11689758 150.08834839]
[-148.14529419 156.54124451]
[-133.31108093 154.31729126]
[-118.47686005 152.09333801]
[-103.64263916 149.86938477]
[-88.80841827 147.64543152]
[-73.97420502 145.42147827]
[-58.49061203 129.20066833]
[-36.53483582 136.47689819]
[-22.26898766 131.84162903]
[-15.75686073 118.49518585]
[-1.35529375 113.59115601]
[12.59953880 120.51216125]
[26.86538696 115.87690735]
[41.13123322 111.24165344]
[55.39708328 106.60639954]
[69.66293335 101.97114563]
[83.92877960 97.33589172]
[94.71047211 84.59212494]
[111.04611969 88.02649689]
[125.15090942 82.92209625]
[139.25570679 77.81769562]
[153.36048889 72.71330261]
[160.53506470 66.73581696]
[168.01689148 67.68175507]
[175.38519287 61.94475174]
[182.83164978 63.13754272]
[197.24295044 58.97650146]
[211.58348083 54.57775116]
[225.84933472 49.94249344]
[240.11518860 45.30723953]
[250.68026733 32.76487732]
[266.77514648 35.90932083]
[271.84274292 51.50583649]
[260.66998291 63.51006699]
[244.75044250 59.57308960]
[230.48458862 64.20834351]
[216.21873474 68.84359741]
[210.72183228 74.00658417]
[201.40399170 73.38780212]
[186.99269104 77.54885101]
[172.65214539 81.94760132]
[158.46488953 86.81809235]
[144.36010742 91.92249298]
[130.25531006 97.02688599]
[116.15052032 102.13128662]
[110.49871826 112.45626831]
[99.36583710 116.27819061]
[88.56403351 111.60173798]
[74.29818726 116.23699188]
[60.03233719 120.87224579]
[45.76649094 125.50749969]
[31.50064278 130.14276123]
[17.23479462 134.77801514]
[10.01316547 148.57966614]
[-4.52046394 153.07725525]
[-17.63373375 146.10748291]
[-31.89958191 150.74273682]
[-33.82693863 158.54368591]
[-38.40303802 165.06443787]
[-44.96854401 169.45257568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[42 91]
[43 90]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[53 79]
[54 78]
[55 77]
[56 76]
[58 75]
[60 74]
[61 73]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
