%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAAACAUGUGACAUGCUGGGACAAGGUUAAAGAUCGUUUUAUCCUUGCUGUAAAAGCUGAUCUGCCUGUAGCUGCCACAGCCUCCAGCGGUGGCUACAGUUGAAACCCUCACACCACGCAGGAAGAGGUCAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[151.79867554 254.16256714]
[143.94474792 267.29931641]
[130.87944031 275.27154541]
[115.60506439 276.24728394]
[101.63156128 270.00228882]
[92.16993713 257.97164917]
[89.39440918 242.91992188]
[93.94276428 228.30584717]
[104.76983643 217.48765564]
[119.38762665 212.95129395]
[122.04718781 198.18894958]
[124.70674896 183.42660522]
[127.20169067 168.63555908]
[129.53170776 153.81762695]
[131.86170959 138.99969482]
[134.19172668 124.18176270]
[91.58797455 136.06201172]
[68.21549225 105.03918457]
[53.26108170 103.87062836]
[38.30666733 102.70206451]
[32.06512451 105.25238037]
[26.35172081 104.34423828]
[22.71698761 101.13372803]
[7.82947493 99.30016327]
[-1.15289390 101.36740112]
[-7.36791039 97.25631714]
[-22.21087837 95.09152222]
[-37.05384445 92.92672729]
[-51.89681244 90.76194000]
[-66.73977661 88.59714508]
[-81.51212311 94.26181030]
[-92.98950958 84.76872253]
[-107.83248138 82.60392761]
[-122.67544556 80.43913269]
[-137.51841736 78.27434540]
[-152.36137390 76.10955048]
[-167.38975525 82.67308044]
[-180.42573547 72.72344208]
[-178.05902100 56.49597931]
[-162.72428894 50.68410492]
[-150.19659424 61.26658630]
[-135.35362244 63.43137741]
[-120.51065063 65.59616852]
[-105.66768646 67.76096344]
[-90.82472229 69.92575073]
[-77.11404419 64.10624695]
[-64.57498932 73.75418091]
[-49.73202133 75.91896820]
[-34.88905334 78.08376312]
[-20.04608536 80.24855804]
[-5.20311832 82.41334534]
[9.66304398 84.41265106]
[24.55055618 86.24621582]
[39.47522354 87.74765778]
[54.42963791 88.91621399]
[69.38404846 90.08477020]
[76.56873322 74.53359985]
[91.55772400 63.94506073]
[111.04705048 62.12366867]
[129.97142029 70.75028992]
[126.00849152 56.28325272]
[112.15538788 48.67620087]
[107.81904602 33.47845078]
[115.57213593 19.70655060]
[130.81488037 15.53113079]
[144.50404358 23.42938995]
[148.51808167 38.71543503]
[140.47552490 52.32032013]
[144.43846130 66.78736115]
[159.06767273 70.10189056]
[168.87908936 58.75570679]
[178.69052124 47.40952301]
[188.50193787 36.06333542]
[198.31336975 24.71714973]
[208.12480164 13.37096405]
[217.93621826 2.02477765]
[227.74765015 -9.32140827]
[237.55906677 -20.66759491]
[247.37049866 -32.01377869]
[257.18191528 -43.35996628]
[260.35595703 -58.85951614]
[274.53338623 -63.42565536]
[270.87252808 -78.50469971]
[276.80517578 -92.84287262]
[290.05010986 -100.92685699]
[305.51443481 -99.64819336]
[317.25173950 -89.49855042]
[320.74880981 -74.38067627]
[314.66098022 -60.10770416]
[301.32910156 -52.16788101]
[285.87957764 -53.61423111]
[283.40731812 -38.92623520]
[268.52810669 -33.54854202]
[258.71667480 -22.20235634]
[248.90525818 -10.85616970]
[239.09382629 0.49001670]
[229.28240967 11.83620262]
[219.47097778 23.18238831]
[209.65956116 34.52857590]
[199.84812927 45.87475967]
[190.03671265 57.22094727]
[180.22528076 68.56713104]
[170.41384888 79.91332245]
[170.99813843 87.39052582]
[185.04812622 82.13716125]
[198.89855957 76.37821198]
[211.69129944 84.21054840]
[212.86003113 99.16494751]
[201.43939209 108.88961792]
[186.86216736 105.35209656]
[172.16668701 102.34494019]
[172.75096130 109.82214355]
[184.20574951 119.50656128]
[195.66053772 129.19097900]
[208.91314697 126.52896881]
[221.09098816 131.93099976]
[227.81225586 143.20692444]
[226.80152893 156.09942627]
[238.03770447 166.03663635]
[254.07424927 166.49337769]
[263.60021973 179.40211487]
[259.30810547 194.86036682]
[244.49044800 201.00987244]
[230.51408386 193.13327026]
[228.10049438 177.27281189]
[216.86430359 167.33560181]
[200.17619324 169.10185242]
[187.09147644 158.06480408]
[185.97612000 140.64576721]
[174.52133179 130.96134949]
[163.06654358 121.27693176]
[149.00965881 126.51177216]
[146.67964172 141.32969666]
[144.34962463 156.14762878]
[142.01962280 170.96556091]
[143.78555298 180.01199341]
[139.46908569 186.08616638]
[136.80952454 200.84851074]
[134.14997864 215.61085510]
[146.26554871 224.96345520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 135]
[14 134]
[15 133]
[16 132]
[18 56]
[19 55]
[20 54]
[23 53]
[24 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[60 69]
[61 68]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[82 91]
[112 131]
[113 130]
[114 129]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
