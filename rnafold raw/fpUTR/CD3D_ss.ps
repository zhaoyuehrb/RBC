%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAAGCAGACAUCUUCUAGUUCCUCCCCCACUCUCCUCUUUCCGGUACCUGUGAGUCAGCUAGGGGAGGGCAGCUCUCACCCAGGCUGAUAGUUCGGUGACCUGGCUUUAUCUACUGGAUGAGUUCCGCUGGGAG\
) } def
/len { sequence length } bind def

/coor [
[-143.60881042 483.55548096]
[-152.63099670 483.21893311]
[-161.83000183 495.06707764]
[-171.02900696 506.91519165]
[-173.38069153 522.56066895]
[-187.29740906 527.86859131]
[-196.49639893 539.71673584]
[-205.69540405 551.56488037]
[-214.75895691 563.51696777]
[-223.68586731 575.57141113]
[-232.61277771 587.62585449]
[-231.67916870 603.64172363]
[-243.71453857 614.24975586]
[-259.48638916 611.31231689]
[-266.89590454 597.08282471]
[-260.25912476 582.47686768]
[-244.66725159 578.69897461]
[-235.74034119 566.64447021]
[-226.81341553 554.59002686]
[-225.34803772 547.27978516]
[-217.54354858 542.36584473]
[-208.34454346 530.51770020]
[-199.14553833 518.66961670]
[-197.45184326 503.87158203]
[-182.87713623 497.71618652]
[-173.67814636 485.86807251]
[-164.47914124 474.01992798]
[-163.61181641 453.44628906]
[-143.82598877 445.36538696]
[-135.45698547 432.91711426]
[-127.08797455 420.46881104]
[-118.71896362 408.02053833]
[-110.49218750 395.47781372]
[-117.46588898 382.31600952]
[-116.91153717 367.33105469]
[-108.87792969 354.55108643]
[-95.43783569 347.46163940]
[-80.15402222 348.05520630]
[-72.07054138 335.41964722]
[-63.98706055 322.78408813]
[-66.27097321 310.85025024]
[-59.56699753 300.23803711]
[-47.03135681 296.97103882]
[-38.66234589 284.52276611]
[-30.29333496 272.07449341]
[-21.92432594 259.62619019]
[-13.55531406 247.17793274]
[-5.18630362 234.72964478]
[3.18270707 222.28137207]
[-3.63382220 210.39413452]
[-4.65013170 196.66236877]
[0.39045349 183.77758789]
[10.55178356 174.29010010]
[23.87818718 170.10429382]
[37.77071762 172.09658813]
[46.42092133 159.84204102]
[55.07112503 147.58749390]
[63.72132874 135.33293152]
[72.37153625 123.07839203]
[81.02174377 110.82384491]
[89.67194366 98.56929016]
[95.80417633 84.88003540]
[99.18952942 70.26705170]
[98.07597351 61.11191177]
[102.82184601 55.36178207]
[106.53896332 40.82964325]
[110.25608063 26.29750633]
[113.80754089 11.72399902]
[117.19290161 -2.88898706]
[120.57825470 -17.50197411]
[123.96360779 -32.11495972]
[127.34896851 -46.72794724]
[125.03337097 -63.52301407]
[140.53105164 -70.39745331]
[151.42703247 -57.40845871]
[141.96195984 -43.34259033]
[138.57659912 -28.72960472]
[135.19123840 -14.11661720]
[131.80589294 0.49636859]
[128.42053223 15.10935497]
[129.98887634 22.39821815]
[124.78821564 30.01462173]
[121.07109833 44.54676056]
[117.35398102 59.07889938]
[113.80251312 73.65240479]
[110.41716003 88.26538849]
[122.15982819 97.59865570]
[135.63174438 91.00263214]
[149.10365295 84.40661621]
[162.57557678 77.81059265]
[176.04748535 71.21457672]
[184.74310303 57.31068039]
[201.12026978 58.15969849]
[208.33154297 72.88822937]
[198.95858765 86.34481812]
[182.64350891 84.68648529]
[169.17158508 91.28250885]
[155.69967651 97.87853241]
[142.22776794 104.47454834]
[128.75584412 111.07057190]
[120.57097626 114.16804504]
[112.79467773 114.23862457]
[106.33785248 111.70121765]
[101.92649078 107.21949768]
[93.27629089 119.47404480]
[84.62608337 131.72859192]
[75.97587585 143.98313904]
[67.32567596 156.23768616]
[58.67546844 168.49223328]
[50.02526474 180.74679565]
[57.10544968 195.64353943]
[55.74013138 211.98672485]
[46.39366150 225.34883118]
[31.67969894 232.15750122]
[15.63098621 230.65037537]
[7.26197577 243.09866333]
[-1.10703504 255.54693604]
[-9.47604561 267.99520874]
[-17.84505653 280.44348145]
[-26.21406746 292.89178467]
[-34.58307648 305.34005737]
[-35.37448883 323.69726562]
[-51.35150146 330.86755371]
[-59.43498230 343.50311279]
[-67.51846313 356.13867188]
[-60.57293701 369.76611328]
[-61.37572098 384.94018555]
[-69.61121368 397.59100342]
[-82.98374939 404.37564087]
[-97.85662842 403.56127930]
[-99.87323761 412.56072998]
[-106.27068329 416.38955688]
[-114.63969421 428.83782959]
[-123.00870514 441.28610229]
[-131.37771606 453.73440552]
[-128.30227661 462.80969238]
[-129.77839661 472.13742065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[6 23]
[7 22]
[8 21]
[9 19]
[10 18]
[11 17]
[29 135]
[30 134]
[31 133]
[32 132]
[33 130]
[38 125]
[39 124]
[40 123]
[43 121]
[44 120]
[45 119]
[46 118]
[47 117]
[48 116]
[49 115]
[55 110]
[56 109]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[62 86]
[63 85]
[65 84]
[66 83]
[67 82]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
