%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGGUGAUGCUGAAGAUGAUGACCUUCUUCCAAGGCCUCUAGAGCCAUCAGCCUGUGCCAGGCACCCUCGACUUGCCUAGAGGCCCCCAAAAGUUGCAGUCCACAUCAGAGGCAGAGUCAGAGGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[94.82093811 128.11050415]
[87.34693909 128.73452759]
[81.77200317 142.66004944]
[76.19706726 156.58557129]
[83.74123383 170.28300476]
[80.66516113 185.61505127]
[68.42127228 195.34239197]
[52.79076385 194.87208557]
[41.15388107 184.42617798]
[39.00520325 168.93692017]
[47.35926819 155.71786499]
[62.27154922 151.01063538]
[67.84648132 137.08511353]
[73.42142487 123.15959167]
[69.77724457 103.77887726]
[77.09638214 88.42362213]
[89.80496979 81.79206085]
[87.67024994 66.94474030]
[85.53552246 52.09741974]
[83.40080261 37.25009918]
[71.03273010 27.78075027]
[69.07932281 12.69304466]
[78.18312073 0.96033537]
[76.04840088 -13.88698673]
[73.91367340 -28.73430824]
[71.42622375 -43.52662277]
[58.62159348 -52.39675140]
[55.95249939 -67.37442017]
[64.48771667 -79.52701569]
[61.64895248 -94.25594330]
[58.81018066 -108.98487854]
[43.16902161 -114.20203400]
[32.33364868 -126.50580597]
[29.17184830 -142.49743652]
[34.44877243 -157.82199097]
[46.64444733 -168.35429382]
[43.45597076 -183.01148987]
[40.26749039 -197.66870117]
[37.07901001 -212.32589722]
[33.89052963 -226.98310852]
[30.70205307 -241.64030457]
[27.51357269 -256.29751587]
[24.32509422 -270.95471191]
[21.13661385 -285.61190796]
[16.20996284 -293.42208862]
[18.05105019 -300.65573120]
[15.21228027 -315.38467407]
[0.57230121 -324.87460327]
[-2.65932465 -341.67691040]
[7.02757883 -355.37081909]
[3.83909965 -370.02801514]
[0.47642985 -384.64624023]
[-3.05995417 -399.22341919]
[-12.76263523 -404.40484619]
[-17.85831642 -413.90298462]
[-16.85152245 -424.41275024]
[-10.32390881 -432.42810059]
[-13.16267776 -447.15704346]
[-16.00144577 -461.88595581]
[-18.84021568 -476.61489868]
[-27.77486420 -491.02349854]
[-16.40269470 -503.59768677]
[-1.17178559 -496.15084839]
[-4.11128473 -479.45367432]
[-1.27251589 -464.72473145]
[1.56625283 -449.99578857]
[4.40502167 -435.26687622]
[18.13485909 -421.73281860]
[11.51721954 -402.75979614]
[15.05360317 -388.18264771]
[19.73327827 -382.36749268]
[18.49630356 -373.21652222]
[21.68478203 -358.55929565]
[33.43821716 -353.14236450]
[39.99715805 -341.76004028]
[38.75391006 -328.48608398]
[29.94121170 -318.22341919]
[32.77997971 -303.49450684]
[35.79381561 -288.80038452]
[38.98229599 -274.14318848]
[42.17077637 -259.48599243]
[45.35925674 -244.82878113]
[48.54773331 -230.17158508]
[51.73621368 -215.51437378]
[54.92469406 -200.85717773]
[58.11317062 -186.19998169]
[61.30165100 -171.54277039]
[74.60414124 -168.22917175]
[85.21881866 -159.44914246]
[91.02371216 -146.88348389]
[90.82628632 -132.97682190]
[84.60798645 -120.46213531]
[73.53911591 -111.82364655]
[76.37788391 -97.09471130]
[79.21665192 -82.36578369]
[91.65714264 -74.25592804]
[94.74587250 -59.35913467]
[86.15515900 -46.36539078]
[89.61857605 -42.94902802]
[90.91038513 -37.28831482]
[88.76100159 -30.86903000]
[90.89572144 -16.02170944]
[93.03044128 -1.17438722]
[105.07096100 7.51822853]
[107.44738007 22.54511452]
[98.24812317 35.11537552]
[100.38284302 49.96269989]
[102.51757050 64.81002045]
[104.65229034 79.65734100]
[125.86834717 89.12702179]
[130.05113220 118.43141174]
[137.85815430 131.23962402]
[145.66517639 144.04785156]
[153.47218323 156.85606384]
[161.27920532 169.66429138]
[176.63162231 169.21856689]
[190.14245605 176.52290344]
[198.17732239 189.61245728]
[198.57492065 204.96620178]
[191.22827148 218.45405579]
[178.11360168 226.44786072]
[162.75868225 226.79733276]
[149.29393005 219.40844727]
[141.34126282 206.26878357]
[141.03993225 190.91284180]
[148.47099304 177.47129822]
[140.66397095 164.66308594]
[132.85694885 151.85485840]
[125.04993439 139.04664612]
[117.24291992 126.23842621]
[109.76892090 126.86244965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[17 109]
[18 108]
[19 107]
[20 106]
[23 103]
[24 102]
[25 101]
[26 98]
[29 95]
[30 94]
[31 93]
[36 87]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[44 79]
[46 78]
[47 77]
[50 73]
[51 72]
[52 70]
[53 69]
[57 67]
[58 66]
[59 65]
[60 64]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
