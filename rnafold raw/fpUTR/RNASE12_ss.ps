%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUUGGAGCAGGAGGAAUCUGACUGUCCUUUGCUACUUUCUAUCUUCCCUUACUCAACAGCAGUCAAAGCCAAAGAUGCGAAGUCACUCUUACCUCUG\
) } def
/len { sequence length } bind def

/coor [
[103.86460876 220.69837952]
[102.93206024 205.72738647]
[101.99951935 190.75640869]
[101.06697083 175.78541565]
[100.13442993 160.81443787]
[91.62084198 148.59281921]
[98.48522949 134.33830261]
[97.55268097 119.36732483]
[85.78376770 110.06718445]
[71.00273895 112.62083435]
[56.22170639 115.17449188]
[41.44067764 117.72814178]
[26.65964699 120.28179932]
[18.56891251 124.90052795]
[11.37976742 122.67753601]
[-3.47353148 124.77026367]
[-18.32682991 126.86299896]
[-33.18013000 128.95573425]
[-39.53498459 143.01344299]
[-52.49361801 151.38465881]
[-67.92097473 151.39816284]
[-80.89424133 143.04963684]
[-87.27369690 129.00306702]
[-85.02368164 113.74066925]
[-74.86215973 102.13260651]
[-60.03164673 97.88298035]
[-45.26449966 102.34782410]
[-35.27285767 114.10243225]
[-20.41955948 112.00969696]
[-5.56626177 109.91696930]
[9.28703690 107.82424164]
[24.10599327 105.50076294]
[38.88702393 102.94711304]
[53.66805267 100.39345551]
[68.44908142 97.83980560]
[83.23011780 95.28615570]
[96.18144226 87.71891022]
[105.66349030 76.09605408]
[115.14553070 64.47319794]
[124.62757874 52.85033798]
[134.10961914 41.22748184]
[136.83792114 25.64329147]
[150.87858582 20.67250443]
[160.36064148 9.04964733]
[169.84268188 -2.57320905]
[179.32472229 -14.19606590]
[188.80677795 -25.81892204]
[198.28881836 -37.44178009]
[196.16609192 -54.72000122]
[206.91604614 -67.98338318]
[223.59109497 -69.42627716]
[232.70709229 -81.33840179]
[241.82307434 -93.25052643]
[250.56419373 -105.44039154]
[258.92196655 -117.89621735]
[267.27975464 -130.35203552]
[275.44281006 -142.93632507]
[275.49673462 -159.33538818]
[289.85830688 -167.25233459]
[303.75354004 -158.54289246]
[302.88824463 -142.16658020]
[288.15255737 -134.96995544]
[287.25149536 -127.49910736]
[279.73556519 -121.99424744]
[271.37780762 -109.53842926]
[263.02001953 -97.08261108]
[263.09457397 -92.14447784]
[259.94403076 -87.14609528]
[253.73519897 -84.13453674]
[244.61921692 -72.22241211]
[235.50321960 -60.31028748]
[238.97586060 -47.79538727]
[234.48735046 -35.39957047]
[223.48536682 -27.78661919]
[209.91168213 -27.95973206]
[200.42962646 -16.33687592]
[190.94758606 -4.71401930]
[181.46554565 6.90883732]
[171.98348999 18.53169441]
[162.50144958 30.15455055]
[160.45137024 44.90739822]
[145.73248291 50.70952988]
[136.25044250 62.33238602]
[126.76838684 73.95524597]
[117.28634644 85.57810211]
[107.80429840 97.20095825]
[111.05405426 99.10623932]
[113.65725708 102.52766418]
[115.05081940 107.20908356]
[114.77363586 112.70809174]
[112.52366638 118.43478394]
[113.45620728 133.40576172]
[122.03649902 146.69821167]
[115.10541534 159.88189697]
[116.03795624 174.85287476]
[116.97050476 189.82386780]
[117.90304565 204.79484558]
[118.83558655 219.76582336]
[125.85494995 235.19842529]
[112.96861267 246.21563721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[7 92]
[8 91]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[15 31]
[16 30]
[17 29]
[18 28]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[51 71]
[52 70]
[53 69]
[54 66]
[55 65]
[56 64]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
