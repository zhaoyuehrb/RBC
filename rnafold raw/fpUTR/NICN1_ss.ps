%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAGGCUCGGCUGAGGAUGCCGGGAAGGGCUGGUGGUCGGGGGCCUAGAGCGGCGGUUGCACUUAGUUGCGGCUGCUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[189.32279968 170.08267212]
[181.61604309 163.74786377]
[176.04449463 155.44366455]
[173.09080505 145.86470032]
[173.01792908 135.81701660]
[159.00769043 130.45855713]
[144.99745178 125.10009003]
[130.98721313 119.74163055]
[116.97696686 114.38316345]
[102.96672058 109.02470398]
[97.56787872 110.09683990]
[91.99044800 107.93048096]
[88.15314484 102.72961426]
[74.57141876 96.36276245]
[60.98969650 89.99591064]
[47.40797043 83.62905884]
[36.97357178 89.89112091]
[24.93025589 90.22116852]
[14.38326836 84.65329742]
[7.99359894 74.72699738]
[7.30689669 63.06352997]
[-5.77384424 55.72225952]
[-18.85458565 48.38099289]
[-31.93532562 41.03972626]
[-45.01606750 33.69845963]
[-60.16117477 38.21523666]
[-74.02429962 30.62648010]
[-78.38070679 15.43446445]
[-70.64580536 1.65234375]
[-55.40858078 -2.54319525]
[-41.70900726 5.33698654]
[-37.67480087 20.61771584]
[-24.59405899 27.95898438]
[-11.51331806 35.30025101]
[1.56742346 42.64152145]
[14.64816475 49.98278809]
[31.72264290 43.88629150]
[48.21924591 52.13307190]
[53.77482224 70.04734039]
[67.35654449 76.41418457]
[80.93827057 82.78103638]
[94.51999664 89.14788818]
[108.32518768 95.01445770]
[122.33542633 100.37292480]
[136.34567261 105.73138428]
[150.35591125 111.08985138]
[164.36614990 116.44831085]
[178.37638855 121.80677795]
[194.90139771 108.77767944]
[215.79580688 107.78191376]
[233.27397156 119.04452515]
[240.90805054 138.25003052]
[255.74819946 140.43405151]
[270.58834839 142.61805725]
[285.42849731 144.80207825]
[300.26864624 146.98609924]
[315.10879517 149.17012024]
[329.94894409 151.35414124]
[344.78909302 153.53814697]
[359.62924194 155.72216797]
[374.46939087 157.90618896]
[389.30953979 160.09020996]
[404.14968872 162.27421570]
[416.68194580 152.64517212]
[432.34127808 154.78086853]
[441.83728027 167.41419983]
[439.53616333 183.05007935]
[426.80310059 192.41198730]
[411.19244385 189.94567871]
[401.96566772 177.11437988]
[387.12551880 174.93035889]
[372.28536987 172.74633789]
[357.44522095 170.56231689]
[342.60507202 168.37829590]
[327.76492310 166.19429016]
[312.92477417 164.01026917]
[298.08462524 161.82624817]
[283.24447632 159.64222717]
[268.40432739 157.45822144]
[253.56417847 155.27420044]
[238.72402954 153.09017944]
[233.94364929 161.68251038]
[226.87603760 168.55276489]
[218.10934448 173.11001587]
[208.37861633 174.95664978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[13 42]
[14 41]
[15 40]
[16 39]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
