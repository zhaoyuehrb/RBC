%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGACAGAGGGGCCGGAAGUUCUCUUCACGGAGCCGCGCGGCUGCGGGGGCGCAAAUAGGGUCAGUGGGCCGCUUGGCGGUGUCGUUGCGGUACCAGGUCCGCGUGAGGGGUUCGGGGGUUCUGGGCAGGCACA\
) } def
/len { sequence length } bind def

/coor [
[84.54429626 502.59652710]
[77.22491455 489.34115601]
[74.60860443 474.42694092]
[76.97914124 459.47167969]
[84.07939911 446.09765625]
[95.13919830 435.75552368]
[108.95884705 429.56713867]
[107.58489990 414.63021851]
[106.21094513 399.69326782]
[104.83699799 384.75631714]
[103.46304321 369.81936646]
[90.58879089 362.37683105]
[84.49356842 348.61773682]
[87.70651245 333.73385620]
[99.20033264 323.47723389]
[97.82637787 308.54028320]
[96.45243073 293.60333252]
[95.07847595 278.66638184]
[93.70452881 263.72946167]
[91.54122925 261.81741333]
[90.04006958 258.89584351]
[89.60394287 255.22579956]
[90.52866364 251.21437073]
[92.95377350 247.37127686]
[92.95377350 232.37127686]
[92.95377350 217.37127686]
[92.95377350 202.37127686]
[92.95377350 187.37127686]
[92.95377350 172.37127686]
[92.95377350 157.37127686]
[92.95377350 142.37127686]
[92.95377350 127.37127686]
[92.78179169 112.37226105]
[85.67982483 100.32843781]
[92.22215271 87.97167969]
[91.87821198 72.97562408]
[91.53427124 57.97956467]
[78.89167023 51.88335037]
[70.16570282 40.97469711]
[67.02481079 27.43117142]
[70.02983093 13.92480564]
[78.53481293 3.09494543]
[90.82483673 -2.96751213]
[90.82483673 -17.96751213]
[90.82483673 -32.96751404]
[90.82483673 -47.96751404]
[90.82483673 -62.96751404]
[90.82483673 -77.96751404]
[90.82483673 -92.96751404]
[83.08753204 -106.76768494]
[90.82483673 -119.49495697]
[90.82483673 -134.49494934]
[90.82483673 -149.49494934]
[90.82483673 -164.49494934]
[90.82483673 -179.49494934]
[76.45048523 -187.58148193]
[68.14084625 -201.71955872]
[68.06962585 -218.02505493]
[76.16202545 -232.07299805]
[90.14055634 -240.09834290]
[89.79661560 -255.09439087]
[89.28076172 -270.08551025]
[88.59306335 -285.06976318]
[87.90536499 -300.05398560]
[87.21766663 -315.03820801]
[77.92471313 -328.55017090]
[85.22323608 -343.23565674]
[101.60514069 -343.98748779]
[110.21812439 -330.03225708]
[102.20189667 -315.72589111]
[102.88959503 -300.74166870]
[103.57729340 -285.75744629]
[104.26499176 -270.77322388]
[107.74456787 -264.17773438]
[104.79267120 -255.43833923]
[105.13661194 -240.44227600]
[117.56240845 -234.66322327]
[126.31347656 -224.03121948]
[129.62739563 -210.59730530]
[126.79788208 -196.98532104]
[118.32432556 -185.87945557]
[105.82483673 -179.49494934]
[105.82483673 -164.49494934]
[105.82483673 -149.49494934]
[105.82483673 -134.49494934]
[105.82483673 -119.49495697]
[113.56213379 -106.76768494]
[105.82483673 -92.96751404]
[105.82483673 -77.96751404]
[105.82483673 -62.96751404]
[105.82483673 -47.96751404]
[105.82483673 -32.96751404]
[105.82483673 -17.96751213]
[105.82483673 -2.96751213]
[119.98370361 4.73520565]
[128.39608765 18.59388924]
[128.69876099 34.89673996]
[120.71548462 49.22163773]
[106.53032684 57.63562775]
[106.87426758 72.63168335]
[107.21820831 87.62773895]
[114.32017517 99.67156219]
[107.77784729 112.02832031]
[111.12730408 120.62320709]
[107.95377350 127.37127686]
[107.95377350 142.37127686]
[107.95377350 157.37127686]
[107.95377350 172.37127686]
[107.95377350 187.37127686]
[107.95377350 202.37127686]
[107.95377350 217.37127686]
[107.95377350 232.37127686]
[107.95377350 247.37127686]
[108.64147186 262.35549927]
[110.01541901 277.29244995]
[111.38937378 292.22940063]
[112.76332092 307.16632080]
[114.13727570 322.10327148]
[127.30928040 330.09103394]
[133.18347168 344.13906860]
[129.70051575 358.77920532]
[118.39998627 368.44543457]
[119.77394104 383.38235474]
[121.14788818 398.31930542]
[122.52184296 413.25625610]
[123.89579010 428.19320679]
[138.61245728 431.75671387]
[151.37332153 439.90771484]
[160.79417419 451.76208496]
[165.85311890 466.03393555]
[166.00140381 481.17517090]
[161.22294617 495.54336548]
[152.03605652 507.57998657]
[139.43728638 515.97937012]
[124.79323578 519.83038330]
[109.69239044 518.71539307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 126]
[8 125]
[9 124]
[10 123]
[11 122]
[15 118]
[16 117]
[17 116]
[18 115]
[19 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 105]
[33 103]
[35 101]
[36 100]
[37 99]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[60 76]
[61 75]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
