%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGGGCCGCGGACGCCCGGGCAGCCACGGCGGCGGGGCCGCGGCGGGCGCCGGCUCAGCCCGCCCCUUUCUCCCGCCGCCUCCCCGCCCCGCCCCGCGCCGCGCCGGCCGCUGUCAGCUCCCUCAGCGUCCGGCCGAGGCGCGGUGU\
) } def
/len { sequence length } bind def

/coor [
[114.77215576 180.79664612]
[100.55445862 176.01571655]
[91.47972870 164.07212830]
[90.68393707 149.09326172]
[98.44234467 136.25514221]
[89.12512970 148.01054382]
[80.05614471 159.95849609]
[71.23936462 172.09375000]
[62.42258453 184.22900391]
[59.88479996 193.07434082]
[53.29190445 196.52346802]
[44.22291946 208.47142029]
[35.15393448 220.41937256]
[33.63651276 236.74816895]
[18.62565422 243.35165405]
[5.56324244 233.43675232]
[7.88676691 217.20304871]
[23.20598412 211.35038757]
[32.27497101 199.40243530]
[41.34395599 187.45448303]
[50.28733063 175.41223145]
[59.10411072 163.27696228]
[67.92089081 151.14170837]
[68.05692291 146.30741882]
[71.27597046 141.52294922]
[77.36972809 138.69332886]
[86.68694305 126.93792725]
[74.51165771 106.09427643]
[82.09288025 86.60041809]
[73.79200745 74.10659790]
[65.49113464 61.61277771]
[58.08515930 56.15091705]
[57.15045166 48.76924896]
[49.11304855 36.10432816]
[41.07564926 23.43940926]
[33.03824615 10.77449036]
[25.00084305 -1.89042819]
[16.96344185 -14.55534744]
[8.92603970 -27.22026634]
[-6.23796177 -30.78268051]
[-14.20861435 -43.74120331]
[-10.71894550 -58.17580795]
[-18.75634766 -70.84072876]
[-26.79374886 -83.50564575]
[-34.83115005 -96.17056274]
[-42.86855316 -108.83548737]
[-50.90595627 -121.50040436]
[-58.94335556 -134.16532898]
[-66.98075867 -146.83024597]
[-89.78636169 -155.61798096]
[-90.99787140 -179.33531189]
[-100.79918671 -190.69023132]
[-115.67359924 -196.08119202]
[-118.13275909 -210.77137756]
[-127.93407440 -222.12631226]
[-137.73538208 -233.48123169]
[-152.66204834 -241.52056885]
[-149.06900024 -258.08941650]
[-132.15301514 -259.22348022]
[-126.38045502 -243.28254700]
[-116.57914734 -231.92761230]
[-106.77783966 -220.57269287]
[-92.60447693 -215.99391174]
[-89.44425964 -200.49154663]
[-79.64295197 -189.13661194]
[-73.61341858 -190.57324219]
[-67.38382721 -190.23231506]
[-61.47063446 -188.11897278]
[-56.37061310 -184.38623047]
[-52.51916122 -179.32417297]
[-50.25315475 -173.33740234]
[-49.78158188 -166.91282654]
[-51.16646576 -160.58003235]
[-54.31584167 -154.86764526]
[-46.27843857 -142.20272827]
[-38.24103546 -129.53781128]
[-30.20363426 -116.87288666]
[-22.16623306 -104.20796967]
[-14.12882996 -91.54305267]
[-6.09142828 -78.87812805]
[1.94597352 -66.21321106]
[16.49262238 -63.22480392]
[24.82410812 -50.49526978]
[21.59095955 -35.25766754]
[29.62836075 -22.59274864]
[37.66576385 -9.92782974]
[45.70316315 2.73708892]
[53.74056625 15.40200806]
[61.77796936 28.06692696]
[69.81536865 40.73184586]
[77.98495483 53.31190491]
[86.28582764 65.80572510]
[94.58670044 78.29953766]
[113.02238464 78.74581909]
[126.78254700 93.81591034]
[125.34208679 116.14521790]
[139.40132141 121.37379456]
[153.46054077 126.60237885]
[167.51977539 131.83096313]
[181.57901001 137.05953979]
[195.63822937 142.28811646]
[209.69746399 147.51670837]
[225.32911682 145.07502747]
[234.56115723 156.76342773]
[248.62039185 161.99200439]
[262.73361206 167.07307434]
[276.89926147 172.00607300]
[291.06488037 176.93907166]
[305.23052979 181.87207031]
[320.80764771 179.10356140]
[330.28244019 190.59606934]
[344.44808960 195.52906799]
[358.61370850 200.46206665]
[372.77935791 205.39506531]
[386.94500732 210.32806396]
[398.51904297 200.23164368]
[413.59371948 197.29064941]
[428.11404419 202.29618835]
[438.17413330 213.90179443]
[441.06787109 228.98562622]
[436.01684570 243.49020386]
[424.37976074 253.51387024]
[409.28692627 256.36029053]
[394.79824829 251.26382446]
[384.81112671 239.59538269]
[382.01202393 224.49371338]
[367.84637451 219.56071472]
[353.68072510 214.62771606]
[339.51507568 209.69471741]
[325.34942627 204.76171875]
[310.78555298 207.88305664]
[300.29754639 196.03771973]
[286.13189697 191.10472107]
[271.96624756 186.17172241]
[257.80059814 181.23872375]
[250.40052795 182.01432800]
[243.39181519 176.05123901]
[229.33258057 170.82266235]
[214.70652771 173.63832092]
[204.46888733 161.57592773]
[190.40965271 156.34735107]
[176.35041809 151.11877441]
[162.29119873 145.89018250]
[148.23196411 140.66160583]
[134.17272949 135.43302917]
[120.11350250 130.20445251]
[133.40000916 137.16639709]
[140.47895813 150.39093018]
[138.90406799 165.30802917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 23]
[8 22]
[9 21]
[11 20]
[12 19]
[13 18]
[29 93]
[30 92]
[31 91]
[33 90]
[34 89]
[35 88]
[36 87]
[37 86]
[38 85]
[39 84]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[51 65]
[52 64]
[54 62]
[55 61]
[56 60]
[96 146]
[97 145]
[98 144]
[99 143]
[100 142]
[101 141]
[102 140]
[104 138]
[105 137]
[106 135]
[107 134]
[108 133]
[109 132]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
