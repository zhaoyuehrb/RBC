%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAAUUUGCUUGGUUGAUAACUACCUAGAGUAUUUUACCUUUGGCUAAGAGGUAAUAUACUAGAGUUUCUCUUCACUACUUUGUCUCACCGUGAUUACAGAGAAGUUACAAAUAUCAUUACUAGUAGAAGACUUUAAUACACCUCUGUCAGC\
) } def
/len { sequence length } bind def

/coor [
[130.98490906 354.34152222]
[124.37927246 340.87432861]
[125.06602478 325.89004517]
[132.87582397 313.08352661]
[145.88293457 305.61257935]
[160.88006592 305.31939697]
[174.16831970 312.27542114]
[168.81646729 298.26266479]
[163.46461487 284.24990845]
[158.11274719 270.23715210]
[152.76089478 256.22436523]
[147.40902710 242.21160889]
[142.05303955 237.05476379]
[142.09387207 227.86022949]
[137.02709961 213.74188232]
[131.96034241 199.62351990]
[126.60848236 185.61076355]
[120.97372437 171.70933533]
[115.33896637 157.80790710]
[109.70421600 143.90649414]
[104.06945801 130.00506592]
[92.19757843 130.08544922]
[80.90145874 125.52819824]
[71.96669769 116.80152130]
[66.89928436 105.04943085]
[66.67516327 91.94458771]
[71.56186676 79.45078278]
[57.39289093 74.52735901]
[43.30065536 81.16412354]
[29.00143623 75.96922302]
[22.76113892 62.49353409]
[8.59216404 57.57010651]
[-5.57681084 52.64667892]
[-19.74578667 47.72325134]
[-33.91476059 42.79982376]
[-49.48998260 45.57885361]
[-58.97254181 34.09275818]
[-73.14151764 29.16933060]
[-87.31049347 24.24590111]
[-101.47946930 19.32247353]
[-115.64844513 14.39904499]
[-129.81741333 9.47561741]
[-143.98638916 4.55218935]
[-158.15536499 -0.37123892]
[-173.16308594 5.29869461]
[-186.87898254 -3.02318335]
[-188.78140259 -18.95304108]
[-177.41096497 -30.27085304]
[-161.49011230 -28.29456520]
[-153.23193359 -14.54021358]
[-139.06295776 -9.61678600]
[-124.89398956 -4.69335794]
[-110.72501373 0.23007029]
[-96.55603790 5.15349817]
[-82.38706207 10.07692623]
[-68.21808624 15.00035477]
[-54.04911423 19.92378235]
[-39.48735046 16.79259491]
[-28.99133301 28.63084793]
[-14.82235813 33.55427551]
[-0.65338296 38.47770309]
[13.51559258 43.40113068]
[27.68456650 48.32455826]
[40.93639755 41.62198257]
[55.37589264 46.41319656]
[62.31631851 60.35838318]
[76.48529053 65.28180695]
[90.20900726 59.22708511]
[96.12434387 45.44271851]
[102.03968048 31.65835190]
[107.95502472 17.87398338]
[113.87036133 4.08961725]
[119.78569794 -9.69474983]
[125.70103455 -23.47911644]
[131.05288696 -37.49188232]
[135.83247375 -51.71002579]
[140.61206055 -65.92816925]
[145.39164734 -80.14630890]
[133.91044617 -90.10874939]
[127.12012482 -103.70875549]
[126.05617523 -118.87240601]
[130.88082886 -133.28736877]
[140.85836792 -144.75546265]
[154.46728516 -151.52789307]
[169.63232422 -152.57189941]
[184.04093933 -147.72828674]
[195.49589539 -137.73565674]
[202.25041199 -124.11784363]
[203.27445984 -108.95143890]
[198.41189575 -94.54922485]
[188.40422058 -83.10742188]
[174.77752686 -76.37082672]
[159.60980225 -75.36672211]
[154.83021545 -61.14857864]
[150.05062866 -46.93043900]
[145.27104187 -32.71229553]
[146.44972229 -30.10732841]
[146.63635254 -26.86536217]
[145.57792664 -23.37361336]
[143.17056274 -20.10528374]
[139.48539734 -17.56377983]
[133.57006836 -3.77941227]
[127.65472412 10.00495529]
[121.73938751 23.78932190]
[115.82405090 37.57368851]
[109.90871429 51.35805511]
[103.99337769 65.14242554]
[113.84339142 68.41574097]
[122.14070129 74.34998322]
[128.20516968 82.32931519]
[131.57862854 91.57694244]
[132.05836487 101.23011780]
[129.70658875 110.42046356]
[124.83560944 118.35205078]
[117.97087860 124.37031555]
[123.60563660 138.27172852]
[129.24038696 152.17315674]
[134.87515259 166.07458496]
[140.50990295 179.97599792]
[145.55274963 184.39744568]
[147.29800415 189.88375854]
[146.07868958 194.55676270]
[151.14546204 208.67510986]
[156.21221924 222.79347229]
[161.42179871 236.85974121]
[166.77365112 250.87251282]
[172.12551880 264.88528442]
[177.47737122 278.89804077]
[182.82923889 292.91079712]
[188.18109131 306.92358398]
[196.87640381 314.45428467]
[196.88661194 324.67098999]
[204.69166565 337.48040771]
[212.49671936 350.28982544]
[227.51104736 347.91534424]
[242.28999329 351.47222900]
[254.57986450 360.41802979]
[262.50653076 373.38864136]
[264.86126709 388.40606689]
[261.28494263 403.18032837]
[252.32296753 415.45840454]
[239.34196472 423.36801147]
[224.32142639 425.70297241]
[209.55189514 422.10723877]
[197.28561401 413.12911987]
[189.39308167 400.13772583]
[187.07788086 385.11413574]
[190.69305420 370.34933472]
[199.68730164 358.09487915]
[191.88224792 345.28546143]
[184.07719421 332.47604370]
[181.44354248 347.24301147]
[172.03137207 358.92254639]
[158.16157532 364.63467407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[12 125]
[14 124]
[15 123]
[16 122]
[17 119]
[18 118]
[19 117]
[20 116]
[21 115]
[27 67]
[28 66]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[68 107]
[69 106]
[70 105]
[71 104]
[72 103]
[73 102]
[74 101]
[75 96]
[76 95]
[77 94]
[78 93]
[132 151]
[133 150]
[134 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
