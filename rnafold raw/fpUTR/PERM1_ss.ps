%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGACCCAGGACGGGCAGCUCAGACGCCCAGCUCGGCCGCCGGGACCCAGUGCCUCUGCUGACUCCAC\
) } def
/len { sequence length } bind def

/coor [
[143.23680115 211.84266663]
[137.60612488 205.11080933]
[133.47418213 197.35841370]
[131.02029419 188.91441345]
[130.35243225 180.13789368]
[131.50262451 171.40284729]
[134.42527771 163.08221436]
[138.99906921 155.53198242]
[128.86521912 144.47282410]
[118.73136902 133.41366577]
[111.67077637 130.52145386]
[108.40967560 121.64403534]
[98.76786041 110.15336609]
[91.35300446 106.34327698]
[88.96937561 97.94470215]
[79.83795166 86.04440308]
[70.70652771 74.14410400]
[56.16710663 67.90586090]
[54.55764771 53.09846878]
[45.16879272 41.40019989]
[35.52698135 29.90953445]
[25.88516617 18.41886902]
[16.24335098 6.92820168]
[0.95346141 8.98314667]
[-13.01050091 2.42484760]
[-21.19268608 -10.65396690]
[-20.98218918 -26.07989502]
[-12.44617844 -38.93057632]
[1.69153714 -45.10541153]
[16.91966248 -42.63402557]
[28.37895966 -32.30503464]
[32.41280746 -17.41437721]
[27.73401833 -2.71361256]
[37.37583160 8.77705383]
[47.01764679 20.26772118]
[56.65946198 31.75838661]
[63.58717346 34.95583344]
[66.45794678 43.96704865]
[80.34423065 49.35409927]
[82.60683441 65.01268005]
[91.73825073 76.91298676]
[100.86967468 88.81328583]
[110.25852966 100.51155090]
[119.90033722 112.00222015]
[129.79052734 123.27981567]
[139.92437744 134.33897400]
[150.05822754 145.39813232]
[172.98263550 138.90565491]
[195.72718811 145.68554688]
[211.23394775 163.53048706]
[214.74641418 186.81568909]
[229.05216980 191.32626343]
[243.35792542 195.83685303]
[257.66366577 200.34744263]
[271.56475830 192.82844543]
[286.68698120 197.42124939]
[294.05859375 211.40106201]
[289.30615234 226.47387695]
[275.24920654 233.69728088]
[260.22747803 228.78573608]
[253.15309143 214.65319824]
[238.84733582 210.14260864]
[224.54158020 205.63201904]
[210.23582458 201.12142944]
[205.44512939 208.38272095]
[199.25906372 214.51121521]
[191.93891907 219.24307251]
[183.79496765 222.37358093]
[175.17320251 223.76594543]
[166.44073486 223.35734558]
[157.97010803 221.16166687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 47]
[9 46]
[10 45]
[12 44]
[13 43]
[15 42]
[16 41]
[17 40]
[19 38]
[20 36]
[21 35]
[22 34]
[23 33]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
