%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGCGCUCCUCCCCGCAAAUGAUCCCGCCCCAGGGGCCUAUCCCAGUCCCCCCAGUGCCUUUGGUUGCUGGAGGGAAGAACACA\
) } def
/len { sequence length } bind def

/coor [
[62.44112778 137.79472351]
[54.70623779 128.06393433]
[49.43643188 116.80580139]
[46.91851044 104.63301849]
[31.94050789 103.82093811]
[22.96697044 106.52668762]
[16.43939781 102.69948578]
[1.50047863 101.34719086]
[-13.43844032 99.99489594]
[-28.37735939 98.64260101]
[-43.31627655 97.29030609]
[-58.25519562 95.93800354]
[-66.62949371 107.05012512]
[-79.32454681 112.47432709]
[-92.92655182 110.87001038]
[-103.83618164 102.77100372]
[-109.22105408 90.41516876]
[-124.10141754 88.52442169]
[-133.33221436 100.79991913]
[-147.47035217 106.80064392]
[-162.71273804 104.91242981]
[-174.95924377 95.64318848]
[-180.91561890 81.48631287]
[-178.97962952 66.24992371]
[-169.67205811 54.03253937]
[-155.49658203 48.12056351]
[-140.26634216 50.10429764]
[-128.07818604 59.45012283]
[-122.21067047 73.64405823]
[-107.33031464 75.53480530]
[-96.58112335 63.26990128]
[-80.49662781 59.71160507]
[-65.27568817 66.43093872]
[-56.90290070 80.99909210]
[-41.96398163 82.35138702]
[-27.02506256 83.70368195]
[-12.08614349 85.05597687]
[2.85277486 86.40827179]
[17.79169464 87.76056671]
[32.75259399 88.84293365]
[47.73059464 89.65502167]
[54.03259277 73.05362701]
[65.43988800 59.44499588]
[80.68555450 50.34054565]
[98.07634735 46.75144196]
[115.68078613 49.07630539]
[131.54365540 57.05693436]
[143.90319824 69.80696869]
[151.38668823 85.91034698]
[166.26704407 84.01959991]
[181.14739990 82.12885284]
[196.02775574 80.23810577]
[208.74256897 70.82301331]
[222.34361267 76.89433289]
[237.22398376 75.00358582]
[252.10433960 73.11283875]
[266.98468018 71.22209167]
[281.86505127 69.33134460]
[296.74542236 67.44060516]
[311.58920288 65.28150940]
[326.39160156 62.85478210]
[341.04388428 54.32560730]
[353.29589844 66.04416656]
[345.42700195 81.06137848]
[328.81832886 77.65718079]
[314.01593018 80.08390808]
[307.78155518 84.37214661]
[298.63616943 82.32096100]
[283.75579834 84.21170807]
[268.87542725 86.10245514]
[253.99508667 87.99319458]
[239.11471558 89.88394165]
[224.23435974 91.77468872]
[212.58389282 101.05454254]
[197.91850281 95.11846161]
[183.03814697 97.00920868]
[168.15779114 98.89995575]
[153.27742004 100.79070282]
[151.64442444 113.11344147]
[147.20071411 124.72248840]
[140.18814087 134.98603821]
[130.98835754 143.34548950]
[120.10205078 149.34588623]
[108.12170410 152.66067505]
[95.69934082 153.10945129]
[83.51103973 150.66777039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[17 30]
[18 29]
[49 78]
[50 77]
[51 76]
[52 75]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
