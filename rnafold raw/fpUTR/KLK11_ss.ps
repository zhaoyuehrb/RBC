%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCUAGGCCCUCCCCUGCCUUGCUCCACACCUGGUCAGGGGAGAGAGGGGAGGAAAGCCAAGGGAAGGGACCUAACUGAAAACAAACAAGCUGGGAGAAGCAGGAAUCUGCGCUCGGGUUCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[162.77560425 142.45559692]
[154.36604309 137.94665527]
[147.53775024 131.24755859]
[142.84585571 122.88440704]
[140.67697144 113.51924133]
[125.83436584 111.35190582]
[110.99177551 109.18457031]
[97.93034363 114.17363739]
[86.84088898 105.65802765]
[71.99829865 103.49069214]
[57.15570068 101.32335663]
[42.24430847 99.69535828]
[27.28371048 98.60883331]
[12.32311249 97.52230835]
[-2.63748455 96.43579102]
[-17.59808159 95.34926605]
[-32.55867767 94.26274872]
[-47.51927567 93.17622375]
[-62.47987366 92.08969879]
[-74.37290192 102.14920807]
[-89.52959442 100.83420563]
[-99.04650879 89.43402863]
[-114.00710297 88.34750366]
[-128.96769714 87.26098633]
[-143.29206848 93.97834778]
[-155.42546082 85.33947754]
[-170.38606262 84.25295258]
[-185.37620544 83.70933533]
[-200.37620544 83.70933533]
[-215.37620544 83.70933533]
[-229.30000305 92.37303925]
[-243.63543701 84.40891266]
[-243.63543701 68.00975800]
[-229.30000305 60.04563141]
[-215.37620544 68.70933533]
[-200.37620544 68.70933533]
[-185.37620544 68.70933533]
[-182.59175110 66.39266205]
[-178.51176453 65.36505127]
[-173.78121948 66.23632050]
[-169.29953003 69.29235840]
[-154.33894348 70.37887573]
[-141.08465576 63.58380127]
[-127.88117981 72.30038452]
[-112.92057800 73.38690948]
[-97.95998383 74.47343445]
[-86.89573669 64.56797791]
[-71.70808411 65.45674133]
[-61.39335251 77.12910461]
[-46.43275452 78.21562958]
[-31.47215652 79.30214691]
[-16.51156044 80.38867188]
[-1.55096269 81.47518921]
[13.40963459 82.56171417]
[28.37023163 83.64823914]
[43.33082962 84.73475647]
[46.27577591 82.62586212]
[50.41948318 81.89648438]
[55.07449341 83.10812378]
[59.32303619 86.48075867]
[74.16563416 88.64809418]
[89.00822449 90.81542969]
[102.06965637 85.82636261]
[113.15911102 94.34197235]
[128.00170898 96.50930786]
[142.84429932 98.67664337]
[156.44630432 82.35646057]
[176.95918274 77.35243225]
[196.30708313 85.47444153]
[206.96781921 103.39597321]
[221.96781921 103.39597321]
[236.96781921 103.39597321]
[251.96781921 103.39597321]
[266.96783447 103.39597321]
[281.96783447 103.39597321]
[296.96783447 103.39597321]
[284.49438477 95.06449890]
[274.66424561 83.73451996]
[268.17547607 70.21061707]
[265.48889160 55.45317078]
[266.79525757 40.51016617]
[272.00177002 26.44275665]
[280.73876953 14.24992275]
[292.38574219 4.79752302]
[306.11563110 -1.24319279]
[320.95339966 -3.44325089]
[335.84539795 -1.64641714]
[349.73406982 4.01970863]
[361.63311768 13.15275383]
[370.69757080 25.10414696]
[376.28369141 39.02517700]
[377.99484253 53.92725754]
[375.70947266 68.75213623]
[369.58987427 82.44704437]
[360.07061768 94.03945923]
[347.82772827 102.70616150]
[333.73062134 107.83168793]
[318.77725220 109.05189514]
[331.88677979 116.34165192]
[344.99630737 123.63140106]
[357.65853882 120.84893036]
[368.45489502 127.27127075]
[371.82870483 138.95384216]
[384.75823975 146.55824280]
[397.68780518 154.16264343]
[410.61734009 161.76702881]
[427.01138306 161.35800171]
[435.33059692 175.49032593]
[427.01690674 189.62588501]
[410.62268066 189.22323608]
[403.01293945 174.69657898]
[390.08340454 167.09217834]
[377.15383911 159.48777771]
[364.22430420 151.88339233]
[346.73931885 152.73344421]
[337.70654297 136.74092102]
[324.59704590 129.45117188]
[311.48751831 122.16141510]
[296.96783447 118.39597321]
[281.96783447 118.39597321]
[266.96783447 118.39597321]
[251.96781921 118.39597321]
[236.96781921 118.39597321]
[221.96781921 118.39597321]
[206.96781921 118.39597321]
[203.64892578 127.19079590]
[197.98684692 134.72406006]
[190.42361450 140.38558960]
[181.55590820 143.71221924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 66]
[6 65]
[7 64]
[9 62]
[10 61]
[11 60]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[22 46]
[23 45]
[24 44]
[26 42]
[27 41]
[28 37]
[29 36]
[30 35]
[70 125]
[71 124]
[72 123]
[73 122]
[74 121]
[75 120]
[76 119]
[98 118]
[99 117]
[100 116]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
