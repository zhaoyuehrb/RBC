%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACAGCUGCCUGGUAGGUGACUGGAGGCCUUGAUUGGUUCUCAUUGAGAUUUUGCUGCUGUGACCCCAACCCUGCCUCCCUCCCCACCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[34.08503342 409.03961182]
[26.57804871 422.32901001]
[14.04353619 431.03811646]
[-1.02976692 433.43777466]
[-15.64904499 429.05148315]
[-26.91163063 418.75018311]
[-32.58132935 404.57919312]
[-31.53241730 389.35214233]
[-23.97315788 376.09243774]
[-11.40444565 367.43273926]
[3.67818975 365.09246826]
[7.98885584 350.72521973]
[0.72360355 337.77331543]
[4.89056492 323.14144897]
[18.52496910 315.60879517]
[22.83563614 301.24154663]
[27.14630127 286.87429810]
[23.39291573 272.46035767]
[34.76969910 261.46585083]
[39.08036423 247.09858704]
[37.96606827 239.64573669]
[43.77023697 232.34002686]
[48.54388428 218.11988831]
[43.42008972 207.03034973]
[47.42790985 195.06427002]
[58.90805435 188.91606140]
[64.13967133 174.85795593]
[69.37128448 160.79986572]
[74.60290527 146.74176025]
[79.83451843 132.68365479]
[85.06613922 118.62555695]
[76.98752594 106.35277557]
[77.62583923 91.67362213]
[86.73928070 80.14842987]
[100.87576294 76.14282990]
[100.95766449 66.81250000]
[106.51111603 61.71879959]
[112.19522095 47.83748245]
[117.87931824 33.95616531]
[123.56342316 20.07484627]
[116.92687988 8.22336006]
[118.36898041 -5.08610678]
[127.13002777 -14.94827747]
[139.79528809 -17.86084366]
[145.92591858 -31.55082130]
[152.05653381 -45.24079895]
[158.18716431 -58.93077469]
[156.76583862 -74.68801117]
[169.02914429 -83.14144897]
[174.93728638 -96.92890167]
[180.62138367 -110.81021881]
[174.28388977 -125.28819275]
[180.11779785 -139.97631836]
[194.66195679 -146.16038513]
[209.28758240 -140.17150879]
[215.31755066 -125.56278229]
[209.17437744 -111.00128937]
[194.50270081 -105.12612152]
[188.81860352 -91.24480438]
[189.20463562 -83.71900177]
[182.71911621 -77.01082611]
[184.57894897 -62.23278809]
[171.87713623 -52.80015182]
[165.74652100 -39.11017609]
[159.61589050 -25.42019844]
[153.48527527 -11.73022175]
[160.16186523 3.61081409]
[153.63444519 19.37931252]
[137.44473267 25.75894737]
[131.76063538 39.64026642]
[126.07653809 53.52158356]
[120.39244080 67.40290070]
[114.93386078 81.37444305]
[123.01247406 93.64722443]
[122.37416077 108.32637787]
[113.26071930 119.85157013]
[99.12423706 123.85717010]
[93.89262390 137.91526794]
[88.66100311 151.97337341]
[83.42938995 166.03147888]
[78.19776917 180.08956909]
[72.96615601 194.14767456]
[76.51669312 212.12539673]
[62.76402283 222.89353943]
[57.99037552 237.11367798]
[53.44762421 251.40924072]
[49.13695908 265.77651978]
[52.58201599 281.21807861]
[41.51356125 291.18496704]
[37.20289612 305.55221558]
[32.89223099 319.91946411]
[40.12780762 333.71383667]
[35.55151367 348.22286987]
[22.35611534 355.03585815]
[18.04545021 369.40313721]
[29.34851456 379.66000366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 95]
[12 94]
[15 91]
[16 90]
[17 89]
[19 87]
[20 86]
[22 85]
[23 84]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[35 73]
[37 72]
[38 71]
[39 70]
[40 69]
[44 66]
[45 65]
[46 64]
[47 63]
[49 61]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
