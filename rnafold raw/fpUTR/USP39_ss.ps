%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGAGAGUUCGGGGCUCGCUACCAGCCCCUCUCCUGAUUGGCCUUGUGCCGCGCGCUCGAGCGUGCUUGGCGCCUGCGCUGGACGACUCGGCCGGUAGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[-55.47315979 268.57141113]
[-46.52288437 280.60855103]
[-43.44746017 295.28988647]
[-46.81420898 309.90716553]
[-56.00207138 321.76394653]
[-69.31616211 328.67300415]
[-84.30043030 329.35983276]
[-98.19072723 323.69772339]
[-108.42471313 312.73114014]
[-113.11453247 298.48315430]
[-111.39504242 283.58203125]
[-103.58556366 270.77880859]
[-117.85140991 275.41406250]
[-132.11726379 280.04931641]
[-146.38310242 284.68457031]
[-160.64895630 289.31982422]
[-174.91479492 293.95507812]
[-180.60459900 308.52081299]
[-194.35061646 315.97607422]
[-209.66241455 312.80072021]
[-219.31022644 300.49404907]
[-218.73864746 284.86691284]
[-208.21757507 273.29797363]
[-192.71470642 271.24969482]
[-179.55004883 279.68923950]
[-165.28421021 275.05398560]
[-151.01835632 270.41873169]
[-136.75251770 265.78347778]
[-122.48666382 261.14822388]
[-108.22081757 256.51296997]
[-102.53979492 249.67048645]
[-92.61221313 248.41235352]
[-80.61020660 239.41502380]
[-68.60820770 230.41769409]
[-56.60620117 221.42036438]
[-54.99351120 204.75491333]
[-41.61291885 194.14138794]
[-24.35264015 196.45320129]
[-12.62516880 187.10084534]
[-0.89769650 177.74850464]
[10.82977581 168.39614868]
[22.55724716 159.04380798]
[34.28472137 149.69146729]
[46.01219177 140.33911133]
[57.30826569 130.47003174]
[68.15018463 120.10409546]
[78.99211121 109.73815155]
[89.83403015 99.37221527]
[93.09077454 91.84215546]
[101.15879059 88.86437225]
[112.30596161 78.82741547]
[123.45314026 68.79045868]
[127.83104706 60.58201599]
[135.08717346 58.62610245]
[146.52961731 48.92710876]
[157.97206116 39.22811508]
[169.41450500 29.52912140]
[171.28779602 16.65944672]
[181.15612793 8.82154846]
[193.31243896 9.84372997]
[198.17341614 1.91180038]
[205.53352356 0.39333475]
[217.53552246 -8.60399342]
[229.53753662 -17.60132217]
[241.53953552 -26.59864998]
[245.22613525 -42.21237946]
[259.79293823 -48.93452835]
[274.06558228 -41.60843658]
[277.09527588 -25.85405731]
[266.55792236 -13.75680065]
[250.53686523 -14.59664726]
[238.53486633 -5.59931898]
[226.53285217 3.39800954]
[214.53085327 12.39533806]
[202.66479492 21.57120323]
[197.23837280 38.18601227]
[179.11349487 40.97156525]
[167.67105103 50.67055893]
[156.22860718 60.36955261]
[144.78616333 70.06855011]
[133.49009705 79.93762970]
[122.34292603 89.97458649]
[111.19574738 100.01154327]
[100.19997406 110.21413422]
[89.35804749 120.58007812]
[78.51612854 130.94601440]
[67.67420197 141.31195068]
[66.13632965 146.64883423]
[62.94929123 150.39196777]
[59.04574203 152.17211914]
[55.36454010 152.06658936]
[43.63706589 161.41893005]
[31.90959549 170.77128601]
[20.18212318 180.12362671]
[8.45465088 189.47596741]
[-3.27282166 198.82832336]
[-15.00029373 208.18066406]
[-14.97646904 221.74772644]
[-22.70213699 232.66151428]
[-35.13672638 237.01869202]
[-47.60887146 233.42236328]
[-59.61087418 242.41969299]
[-71.61287689 251.41702271]
[-83.61488342 260.41433716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[32 104]
[33 103]
[34 102]
[35 101]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[45 87]
[46 86]
[47 85]
[48 84]
[50 83]
[51 82]
[52 81]
[54 80]
[55 79]
[56 78]
[57 77]
[60 75]
[62 74]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
