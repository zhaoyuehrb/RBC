%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGCCGACCAAUCACAGGCAGCAGGGGCGCGCCCUGCAGCGGGGCUCCGGCUGCGGUUCCGUGGACUCGGCGACUAGGCGCCGCCUGACCAGUAGGAGCCGCCCUCGACGAGCGAGCUCGAAGGCUGCGACUGGCGCCGCCUCACCGCCUCCCACCGCCACUGACCGACCGUUCGACCGGCAAAC\
) } def
/len { sequence length } bind def

/coor [
[49.83871460 219.03930664]
[39.76187134 207.35766602]
[37.62288666 192.07929993]
[44.10430908 178.07949829]
[57.13793945 169.82551575]
[57.13793945 154.82551575]
[57.13793945 139.82551575]
[57.13793945 124.82551575]
[51.09991455 120.37667084]
[43.90853119 133.54040527]
[36.71714783 146.70414734]
[34.59414291 161.55314636]
[22.24188995 170.06324768]
[7.61080027 166.75701904]
[0.11803307 153.76246643]
[4.58623600 139.44340515]
[18.13968658 133.01617432]
[28.58177567 122.24757385]
[39.02386475 111.47897339]
[32.98583603 107.03012848]
[18.65929985 111.47425842]
[4.33276272 115.91839600]
[-9.99377441 120.36252594]
[-24.32031250 124.80666351]
[-35.20851898 136.28523254]
[-49.65674210 132.66609192]
[-63.98327637 137.11022949]
[-78.30981445 141.55436707]
[-92.63635254 145.99850464]
[-106.96289062 150.44262695]
[-119.13664246 164.24635315]
[-136.08517456 159.72781372]
[-150.33544922 164.41072083]
[-164.58572388 169.09362793]
[-171.48902893 183.31051636]
[-186.45039368 188.40298462]
[-200.59349060 181.34976196]
[-205.52749634 166.33538818]
[-198.32513428 152.26763916]
[-183.25944519 147.49266052]
[-169.26863098 154.84335327]
[-155.01835632 150.16044617]
[-140.76808167 145.47753906]
[-135.02539062 134.81686401]
[-123.17568970 130.80599976]
[-111.40702057 136.11608887]
[-97.08049011 131.67196655]
[-82.75395203 127.22782898]
[-68.42741394 122.78369141]
[-54.10087585 118.33956146]
[-44.23739624 107.17886353]
[-28.76444626 110.48012543]
[-14.43790817 106.03598785]
[-0.11137104 101.59185791]
[14.21516609 97.14772034]
[28.54170418 92.70359039]
[100.82694244 80.00621796]
[108.03566742 66.85196686]
[115.24439240 53.69771957]
[111.59101105 43.42604828]
[114.15213776 33.05540466]
[121.84422302 25.96361923]
[131.95446777 24.32250214]
[139.59870911 11.41647911]
[147.24296570 -1.48954487]
[154.88722229 -14.39556885]
[149.74493408 -25.14071465]
[150.43048096 -36.91300583]
[156.65722656 -46.78562927]
[166.77542114 -52.36024475]
[178.20767212 -52.34923172]
[186.27890015 -64.99261475]
[194.35014343 -77.63600159]
[202.42137146 -90.27938843]
[196.91139221 -104.66500854]
[200.88221741 -119.36486816]
[212.60876465 -128.79632568]
[227.46253967 -129.50572205]
[235.53376770 -142.14910889]
[243.60501099 -154.79249573]
[251.67623901 -167.43588257]
[259.74746704 -180.07926941]
[260.65139771 -195.87463379]
[274.02142334 -202.43904114]
[282.09265137 -215.08242798]
[290.16390991 -227.72581482]
[298.23513794 -240.36918640]
[299.13906860 -256.16455078]
[312.50909424 -262.72897339]
[313.41299438 -278.52432251]
[326.78305054 -285.08874512]
[334.74835205 -297.79913330]
[342.60717773 -310.57562256]
[350.46603394 -323.35211182]
[358.32485962 -336.12860107]
[353.22470093 -354.35812378]
[362.88537598 -370.26498413]
[380.78890991 -374.01370239]
[388.21643066 -387.04565430]
[395.64395142 -400.07760620]
[403.07150269 -413.10955811]
[410.38986206 -426.20312500]
[417.59860229 -439.35736084]
[424.80731201 -452.51162720]
[424.65420532 -468.33209229]
[437.55593872 -475.77487183]
[434.45779419 -491.51593018]
[444.94250488 -503.65887451]
[460.96704102 -502.88864136]
[470.23880005 -489.79611206]
[465.64523315 -474.42474365]
[450.71017456 -468.56613159]
[451.37890625 -453.68655396]
[437.96157837 -445.30288696]
[430.75283813 -432.14865112]
[423.54412842 -418.99438477]
[423.08581543 -411.60293579]
[416.10345459 -405.68203735]
[408.67590332 -392.65008545]
[401.24838257 -379.61813354]
[393.82086182 -366.58618164]
[399.15643311 -356.47540283]
[398.93737793 -344.92523193]
[393.10229492 -334.81616211]
[383.00488281 -328.72531128]
[371.10134888 -328.26974487]
[363.24252319 -315.49325562]
[355.38366699 -302.71676636]
[347.52484131 -289.94027710]
[346.69671631 -282.58108521]
[339.42642212 -277.01751709]
[339.09982300 -262.12649536]
[325.15246582 -254.65773010]
[324.82586670 -239.76670837]
[310.87850952 -232.29795837]
[302.80728149 -219.65457153]
[294.73605347 -207.01118469]
[286.66482544 -194.36781311]
[286.33819580 -179.47677612]
[272.39086914 -172.00802612]
[264.31964111 -159.36463928]
[256.24838257 -146.72126770]
[248.17715454 -134.07788086]
[240.10592651 -121.43449402]
[245.71490479 -107.66215515]
[242.09582520 -93.05509186]
[230.43318176 -83.26550293]
[215.06475830 -82.20815277]
[206.99353027 -69.56476593]
[198.92228699 -56.92138290]
[190.85105896 -44.27799988]
[195.87451172 -26.68952942]
[186.29975891 -10.73081589]
[167.79324341 -6.75131893]
[160.14898682 6.15470457]
[152.50474548 19.06072807]
[144.86048889 31.96675301]
[146.08044434 51.25284958]
[128.39863586 60.90644836]
[121.18991852 74.06069183]
[113.98119354 87.21494293]
[125.98995209 78.22663879]
[140.92590332 79.61135101]
[151.07757568 90.65415955]
[151.20364380 105.65363312]
[141.23901367 116.86550903]
[126.32844543 118.50106812]
[114.16918182 109.71415710]
[121.59671021 122.74611664]
[129.02423096 135.77807617]
[143.44586182 143.58503723]
[143.62510681 159.98320007]
[129.37756348 168.10354614]
[115.35990143 159.59254456]
[115.99227905 143.20559692]
[108.56475067 130.17364502]
[101.13722992 117.14168549]
[93.88740540 119.06264496]
[79.38776398 122.90456390]
[72.13793945 124.82551575]
[72.13793945 139.82551575]
[72.13793945 154.82551575]
[72.13793945 169.82551575]
[85.17156982 178.07949829]
[91.65299225 192.07929993]
[89.51400757 207.35766602]
[79.43716431 219.03930664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 183]
[6 182]
[7 181]
[8 180]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[32 43]
[33 42]
[34 41]
[57 161]
[58 160]
[59 159]
[63 157]
[64 156]
[65 155]
[66 154]
[71 151]
[72 150]
[73 149]
[74 148]
[78 144]
[79 143]
[80 142]
[81 141]
[82 140]
[84 138]
[85 137]
[86 136]
[87 135]
[89 133]
[91 131]
[92 129]
[93 128]
[94 127]
[95 126]
[98 121]
[99 120]
[100 119]
[101 118]
[102 116]
[103 115]
[104 114]
[106 112]
[168 177]
[169 176]
[170 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
