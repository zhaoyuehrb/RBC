%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAACCUAGAGGCCGAAGUUCAAGGUUAUCCAUCUCAAGUAGCCUAGCAAUAUUUGCAACAUCCCA\
) } def
/len { sequence length } bind def

/coor [
[131.30635071 123.01165771]
[127.36717224 106.87881470]
[112.37106323 107.22026825]
[100.32605743 114.32023621]
[87.97039032 107.77584839]
[72.97427368 108.11729431]
[57.97816086 108.45874023]
[42.98204803 108.80019379]
[27.98593330 109.14163971]
[14.36546326 117.19107056]
[1.46536303 109.74549103]
[-13.53075027 110.08693695]
[-28.52686310 110.42838287]
[-38.16135406 122.74546814]
[-53.46970749 125.93738556]
[-67.22378540 118.49700165]
[-72.92933655 103.93744659]
[-67.89237213 89.13329315]
[-54.49119186 81.07460785]
[-39.05342484 83.56645966]
[-28.86831093 95.43227386]
[-13.87219810 95.09082031]
[1.12391508 94.74937439]
[13.67176342 86.72436523]
[27.64448547 94.14552307]
[42.64059830 93.80407715]
[57.63671112 93.46263123]
[72.63282776 93.12118530]
[87.62893677 92.77973175]
[99.67394257 85.67976379]
[112.02960968 92.22415161]
[127.02572632 91.88270569]
[129.39614868 78.38689423]
[134.22218323 65.56695557]
[141.33555603 53.86539459]
[150.48915100 43.68580627]
[161.36544800 35.37895584]
[173.58764648 29.23069000]
[186.73265076 25.45210648]
[200.34574890 24.17230225]
[213.95634460 25.43396378]
[227.09419250 29.19194794]
[239.30570984 35.31489182]
[250.16954041 43.58980942]
[259.31118774 53.72948837]
[266.41586304 65.38247681]
[271.23937988 78.14524078]
[273.61648560 91.57617188]
[273.46652222 105.21082306]
[288.15280151 108.26266479]
[302.83905029 111.31450653]
[317.52529907 114.36634827]
[334.26330566 111.66903687]
[341.48876953 127.00622559]
[328.75115967 138.19505310]
[314.47348022 129.05261230]
[299.78720093 126.00077057]
[285.10095215 122.94892883]
[270.41470337 119.89708710]
[263.70071411 134.99975586]
[253.77162170 148.22163391]
[241.12889099 158.88952637]
[226.41230774 166.45938110]
[210.36755371 170.54403687]
[193.80842590 170.93298340]
[177.57553101 167.60325623]
[162.49363708 160.72077942]
[149.32977295 150.63201904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[11 23]
[12 22]
[13 21]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
