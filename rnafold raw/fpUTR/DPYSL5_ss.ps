%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACUCUGGACUCCCGCGCUGGGCGCGCUGAGGCGGCCCCCGAGCGAGCGCGCGUGCAGCCGCCGCCGCCCCGAGCACCCGCAGCUCCGGCGCCGCGGCGAGACGGAGACGGACCGAGCCACGGGCCCCCGCGGCCGCAGCAUCUCGGAGGAGAAC\
) } def
/len { sequence length } bind def

/coor [
[93.72120667 232.81288147]
[87.74814606 237.02482605]
[80.74372101 238.85806274]
[76.64716339 253.28782654]
[72.55060577 267.71759033]
[74.04135895 284.60586548]
[58.22576141 290.71350098]
[47.97862244 277.20675659]
[58.12083817 263.62103271]
[62.21739578 249.19126892]
[66.31395721 234.76148987]
[58.35271454 213.77171326]
[74.85801697 197.49269104]
[77.51137543 182.72921753]
[80.16472626 167.96575928]
[82.81807709 153.20230103]
[74.13073730 141.15798950]
[76.61130524 126.14794159]
[89.30339813 117.11752319]
[79.96761322 105.37686157]
[64.98590851 104.63622284]
[50.00420380 103.89558411]
[35.02249908 103.15493774]
[17.57903862 113.18886566]
[1.75145411 102.13547516]
[-13.24781418 101.98728943]
[-28.24708176 101.83910370]
[-43.24634933 101.69091797]
[-58.24561691 101.54273224]
[-73.24488831 101.39454651]
[-88.24415588 101.24636078]
[-96.11054230 114.36380005]
[-109.39881134 121.73392487]
[-124.49165344 121.46497345]
[-137.33747864 113.72929382]
[-144.53800964 100.69020081]
[-159.53727722 100.54201508]
[-174.53654480 100.39382935]
[-190.43464661 106.28340149]
[-200.49507141 92.63700867]
[-190.16699219 79.19203949]
[-174.38836670 85.39456177]
[-159.38909912 85.54274750]
[-144.38983154 85.69093323]
[-136.93309021 72.79664612]
[-123.93693542 65.31627655]
[-108.84172058 65.34557343]
[-95.70166016 72.97679901]
[-88.09597015 86.24709320]
[-73.09670258 86.39527893]
[-58.09743118 86.54346466]
[-43.09816360 86.69165039]
[-28.09889603 86.83983612]
[-13.09962749 86.98802185]
[1.89964008 87.13620758]
[8.57203960 79.31164551]
[18.66914940 76.41837311]
[28.89294624 79.65439606]
[35.76314163 88.17323303]
[50.74484253 88.91387939]
[65.72654724 89.65451813]
[80.70825195 90.39515686]
[92.16710663 80.71555328]
[93.94120026 65.82083893]
[95.71530151 50.92612457]
[97.48939514 36.03140640]
[99.26349640 21.13669014]
[101.03759003 6.24197435]
[94.98679352 -8.37645149]
[104.17507935 -20.09927559]
[105.94917297 -34.99399185]
[107.57604218 -49.90550995]
[109.05551147 -64.83236694]
[102.71707153 -79.32839203]
[111.67195892 -91.23046875]
[113.15143585 -106.15732574]
[114.63090515 -121.08418274]
[116.11038208 -136.01104736]
[105.05244446 -147.06799316]
[103.74034882 -162.65043640]
[112.79362488 -175.40081787]
[127.93759155 -179.29879761]
[142.02172852 -172.50387573]
[148.39595032 -158.22439575]
[144.05052185 -143.20269775]
[131.03724670 -134.53157043]
[129.55776978 -119.60471344]
[128.07829285 -104.67784882]
[126.59881592 -89.75099182]
[133.04307556 -76.32263947]
[123.98237610 -63.35289383]
[122.50289917 -48.42603302]
[124.98588562 -41.42234039]
[120.84389496 -33.21989441]
[119.06979370 -18.32517815]
[125.24748993 -4.77212334]
[115.93231201 8.01607227]
[114.15821075 22.91078758]
[112.38411713 37.80550385]
[110.61001587 52.70022202]
[108.83592224 67.59494019]
[107.06182098 82.48965454]
[111.24335480 68.08428192]
[124.74269104 61.54456711]
[138.63887024 67.19224548]
[143.74867249 81.29508209]
[136.69531250 94.53328705]
[122.14109802 98.15866852]
[136.25329590 103.24252319]
[150.36550903 108.32638550]
[164.47772217 113.41024017]
[180.08346558 110.80809021]
[189.43510437 122.40102386]
[202.25119019 113.85384369]
[217.46484375 114.48470306]
[229.25042725 123.84226990]
[233.21849060 138.17378235]
[247.33070374 143.25764465]
[256.51956177 143.22738647]
[261.66983032 148.58386230]
[275.67883301 153.94554138]
[289.68783569 159.30723572]
[305.34194946 157.01391602]
[314.46273804 168.78935242]
[328.47174072 174.15103149]
[342.48074341 179.51271057]
[358.58145142 176.39837646]
[369.12307739 188.96049500]
[363.26126099 204.27621460]
[347.02618408 206.59004211]
[337.11907959 193.52171326]
[323.11004639 188.16003418]
[309.10104370 182.79835510]
[294.44894409 185.47517395]
[284.32617188 173.31623840]
[270.31713867 167.95455933]
[256.30813599 162.59288025]
[242.24684143 157.36985779]
[228.13464355 152.28599548]
[215.93856812 160.79446411]
[200.89300537 160.48622131]
[188.77220154 151.26997375]
[184.35124207 136.51322937]
[169.75489807 139.47901917]
[159.39385986 127.52244568]
[145.28164673 122.43859100]
[131.16944885 117.35473633]
[117.05723572 112.27087402]
[104.06685638 119.77087402]
[112.82026672 132.65557861]
[109.91907501 147.59002686]
[97.58153534 155.85566711]
[94.92818451 170.61912537]
[92.27483368 185.38258362]
[89.62147522 200.14604187]
[95.28932190 205.28511047]
[98.76455688 212.02420044]
[99.64868927 219.48597717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[13 155]
[14 154]
[15 153]
[16 152]
[19 149]
[20 62]
[21 61]
[22 60]
[23 59]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[36 44]
[37 43]
[38 42]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[70 95]
[71 94]
[72 92]
[73 91]
[75 89]
[76 88]
[77 87]
[78 86]
[108 148]
[109 147]
[110 146]
[111 145]
[113 143]
[117 139]
[118 138]
[120 137]
[121 136]
[122 135]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
