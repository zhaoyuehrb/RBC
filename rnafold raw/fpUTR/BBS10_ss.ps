%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCGUUUCCGGCCGUUCCCACCCCUGUUUUCGGUCGGCCCGGGUGUUCUGCAAGCUGGUCAAAAAGGGGAAGCGGCCCAGAU\
) } def
/len { sequence length } bind def

/coor [
[57.98825073 371.70227051]
[43.41331482 375.80712891]
[28.29538155 374.95465088]
[14.27432442 369.23724365]
[2.87104511 359.27511597]
[-4.67751360 346.14889526]
[-7.55254078 331.28237915]
[-5.44217539 316.28820801]
[1.42466640 302.79284668]
[12.30312061 292.26013184]
[26.01317406 285.83258057]
[41.06766510 284.20745850]
[44.36685944 269.57476807]
[47.66605377 254.94209290]
[50.96524811 240.30941772]
[54.26444626 225.67672729]
[57.56364059 211.04405212]
[60.86283493 196.41137695]
[54.70272064 189.44551086]
[52.54736710 180.25595093]
[55.04062653 171.00718689]
[61.71508026 163.94250488]
[71.07318115 160.84008789]
[75.97126007 146.66233826]
[80.86933899 132.48457336]
[85.76741791 118.30681610]
[90.66550446 104.12905884]
[90.11862946 95.87522888]
[96.01541138 89.52368927]
[101.43403625 75.53660583]
[106.85266113 61.54952240]
[112.27128601 47.56243896]
[112.48408508 38.18268967]
[118.15722656 33.16473389]
[124.08899689 19.38742638]
[130.02076721 5.61012268]
[135.95252991 -8.16718197]
[141.88430786 -21.94448662]
[147.81607056 -35.72179031]
[153.74783325 -49.49909592]
[150.28274536 -69.19151306]
[165.81105042 -80.46768188]
[170.70913696 -94.64543915]
[175.60722351 -108.82319641]
[169.91044617 -123.82074738]
[178.20779419 -137.55151367]
[194.13421631 -139.48242188]
[205.47235107 -128.13224792]
[203.52453613 -112.20787048]
[189.78497314 -103.92511749]
[184.88688660 -89.74736023]
[179.98881531 -75.56960297]
[185.38284302 -66.54673767]
[184.77516174 -55.82907867]
[178.12588501 -47.11967468]
[167.52514648 -43.56732941]
[161.59336853 -29.79002380]
[155.66160583 -16.01271820]
[149.72984314 -2.23541427]
[143.79806519 11.54189014]
[137.86630249 25.31919479]
[131.93453979 39.09650040]
[126.25836945 52.98106384]
[120.83974457 66.96814728]
[115.42111969 80.95523071]
[110.00249481 94.94231415]
[104.84326172 109.02713776]
[99.94517517 123.20489502]
[95.04709625 137.38265991]
[90.14901733 151.56040955]
[85.25093842 165.73817444]
[90.93302917 186.22558594]
[75.49551392 199.71057129]
[72.19631958 214.34324646]
[68.89712524 228.97592163]
[65.59793091 243.60861206]
[62.29873276 258.24127197]
[58.99953842 272.87396240]
[55.70034409 287.50665283]
[68.60088348 295.43475342]
[78.22626495 307.12365723]
[83.53240204 321.30548096]
[83.94371033 336.44183350]
[79.41558838 350.89086914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[17 74]
[18 73]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[29 66]
[30 65]
[31 64]
[32 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
