%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCUUUCUCAGAUUACAGGUUUGAGAAGUUCCAAAUAUCCGAUGCCCUAGAGGUUUUUUUCCCUUAAUUUUAUUGUUACAAUUGGCCUUCAUCUAGCUCUGGAUGGUUGAACUGUAGC\
) } def
/len { sequence length } bind def

/coor [
[108.40866852 230.27192688]
[97.66663361 240.74134827]
[83.78518677 246.42512512]
[68.78535461 246.49578857]
[54.85098267 240.94300842]
[44.01079941 230.57525635]
[37.84304810 216.90196228]
[37.24569702 201.91386414]
[42.30666733 187.79148865]
[29.86151123 196.16514587]
[17.41635513 204.53880310]
[4.97120094 212.91246033]
[-7.47395420 221.28611755]
[-19.91910934 229.65977478]
[-32.36426544 238.03343201]
[-44.80942154 246.40708923]
[-57.25457382 254.78073120]
[-67.02060699 268.63934326]
[-83.04112244 263.09140015]
[-82.14492798 246.16116333]
[-65.62822723 242.33558655]
[-53.18307495 233.96192932]
[-40.73791885 225.58827209]
[-28.29276466 217.21461487]
[-15.84761047 208.84095764]
[-3.40245485 200.46730042]
[9.04269981 192.09364319]
[21.48785591 183.71998596]
[33.93301010 175.34634399]
[44.67529297 164.87716675]
[53.36661148 152.65174866]
[62.05792618 140.42633057]
[70.74924469 128.20089722]
[79.44055939 115.97547150]
[74.23281860 103.73612213]
[75.74987793 90.52170563]
[83.59581757 79.78096771]
[95.72298431 74.31706238]
[108.96636963 75.55596924]
[117.96958160 63.55838394]
[126.97280121 51.56079483]
[135.97601318 39.56320572]
[144.97923279 27.56561661]
[153.98243713 15.56802750]
[151.95080566 0.12425102]
[161.25225830 -11.91475582]
[175.98806763 -13.75643063]
[184.99127197 -25.75401878]
[177.71846008 -41.64013672]
[179.41229248 -58.94097137]
[189.52497864 -72.97173309]
[205.24113464 -79.97798157]
[222.26109314 -78.14006042]
[230.63475037 -90.58521271]
[239.00840759 -103.03036499]
[247.38206482 -115.47552490]
[255.75572205 -127.92067719]
[264.12936401 -140.36582947]
[253.65399170 -151.18064880]
[245.65638733 -163.93728638]
[240.48617554 -178.07809448]
[238.36936951 -192.98490906]
[239.39851379 -208.00604248]
[243.52862549 -222.48484802]
[250.57914734 -235.78837585]
[260.24185181 -247.33505249]
[272.09432983 -256.62011719]
[285.61846924 -263.23764038]
[300.22302246 -266.89834595]
[315.26953125 -267.44219971]
[330.10028076 -264.84545898]
[344.06686401 -259.22158813]
[356.55877686 -250.81646729]
[367.02990723 -239.99754333]
[375.02249146 -227.23776245]
[380.18713379 -213.09490967]
[382.29809570 -198.18727112]
[381.26303101 -183.16654968]
[377.12722778 -168.68936157]
[370.07147217 -155.38861084]
[360.40423584 -143.84573364]
[348.54809570 -134.56533813]
[335.02136230 -127.95314026]
[320.41537476 -124.29817200]
[305.36862183 -123.76023102]
[290.53890991 -126.36282349]
[276.57452393 -131.99217224]
[268.20086670 -119.54701996]
[259.82720947 -107.10186768]
[251.45356750 -94.65671539]
[243.07991028 -82.21155548]
[234.70625305 -69.76640320]
[241.50180054 -58.96308517]
[243.67404175 -46.33872223]
[240.85963440 -33.79364777]
[233.44860840 -23.23013687]
[222.53079224 -16.26397705]
[209.73556519 -13.97733879]
[196.98886108 -16.75080490]
[187.98565674 -4.75321627]
[190.33581543 9.91008282]
[181.37617493 22.20559883]
[165.98002625 24.57124138]
[156.97682190 36.56882858]
[147.97360229 48.56641769]
[138.97038269 60.56400681]
[129.96717834 72.56159973]
[120.96395874 84.55918884]
[126.03658295 99.94873810]
[121.02460480 115.35813904]
[107.86927795 124.81896210]
[91.66598511 124.66679382]
[82.97467041 136.89221191]
[74.28334808 149.11764526]
[65.59203339 161.34306335]
[56.90071869 173.56849670]
[71.14687347 168.87306213]
[86.11466980 169.85540771]
[99.62492371 176.37254333]
[109.71066284 187.47560120]
[114.90348053 201.54808044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[30 116]
[31 115]
[32 114]
[33 113]
[34 112]
[39 108]
[40 107]
[41 106]
[42 105]
[43 104]
[44 103]
[47 100]
[48 99]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
