%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCGGCGUCCAUUUAGUGGCGGGAAAAGCGACCUUUUCUGAGCGCGUUUGCCUGUUGAGUGGUAGCCUUUCCCCUCAACCAGCA\
) } def
/len { sequence length } bind def

/coor [
[95.99614716 114.99671936]
[89.91844940 113.03678131]
[76.75326538 120.22551727]
[63.58808136 127.41425323]
[50.42289734 134.60298157]
[37.25771332 141.79171753]
[24.09252739 148.98045349]
[15.68850040 162.38504028]
[0.80994767 161.69371033]
[-12.35523701 168.88244629]
[-18.55993080 175.90103149]
[-26.12111282 176.08323669]
[-30.87366676 191.15602112]
[-44.93067932 198.37931824]
[-59.95236969 193.46766663]
[-67.02664185 179.33508301]
[-61.95645142 164.36614990]
[-47.74985504 157.44169617]
[-32.83537292 162.66986084]
[-19.54397202 155.71725464]
[-6.37878704 148.52851868]
[1.08357871 135.63812256]
[16.90379333 135.81527710]
[30.06897736 128.62654114]
[43.23416138 121.43780518]
[56.39934921 114.24906921]
[69.56452942 107.06033325]
[82.72972107 99.87159729]
[88.71640778 86.11807251]
[85.00681305 71.58400726]
[81.29721832 57.04994965]
[77.58761597 42.51589203]
[73.87802124 27.98183060]
[60.56858826 19.88882446]
[57.01356888 5.09637737]
[64.81103516 -7.54225826]
[61.10144043 -22.07631683]
[57.39184189 -36.61037827]
[45.55381012 -47.95907974]
[49.72530365 -63.81879807]
[65.61505127 -67.87441254]
[76.87703705 -55.95385742]
[71.92590332 -40.31997299]
[75.63549805 -25.78591537]
[79.34509277 -11.25185585]
[92.24581909 -3.89611816]
[96.21492767 10.79063988]
[88.41207886 24.27223396]
[92.12167358 38.80629349]
[95.83127594 53.34035492]
[99.54087067 67.87441254]
[103.25046539 82.40847015]
[113.85707092 93.01507568]
[128.39112854 96.72467041]
[141.87272644 88.92182922]
[156.55947876 92.89093018]
[163.91522217 105.79165649]
[178.44927979 109.50125122]
[192.98333740 113.21084595]
[207.51739502 116.92044830]
[222.05145264 120.63004303]
[236.58551025 124.33964539]
[251.87049866 120.25555420]
[262.28894043 130.90005493]
[276.82299805 134.60964966]
[288.67855835 124.59836578]
[304.15676880 123.50115204]
[317.30603027 131.73992920]
[323.07009888 146.14668274]
[319.23263550 161.18176270]
[307.26919556 171.06384277]
[291.77996826 171.99308777]
[278.72085571 163.61215210]
[273.11340332 149.14370728]
[258.57934570 145.43411255]
[244.33393860 149.78353882]
[232.87591553 138.87370300]
[218.34185791 135.16410828]
[203.80780029 131.45451355]
[189.27374268 127.74491119]
[174.73968506 124.03530884]
[160.20562744 120.32571411]
[147.56698608 128.12318420]
[132.77453613 124.56816101]
[124.68153381 111.25872803]
[110.14747620 107.54913330]
[106.92296600 111.71271515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[9 21]
[10 20]
[12 19]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[36 45]
[37 44]
[38 43]
[53 86]
[54 85]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
