%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUCCUCCUUUCGCAGAUUGGAAACCGCGGGCUAUCCUGCUGGGAGGUUGUGGCCGAGGCAGUAGCUCGCUACUG\
) } def
/len { sequence length } bind def

/coor [
[91.84607697 124.32209778]
[95.74522400 109.83795166]
[81.85794067 115.50745392]
[67.97064972 121.17694855]
[62.14723587 132.89189148]
[50.24018478 137.24507141]
[38.97712326 132.36909485]
[24.87014008 137.46743774]
[10.76315784 142.56576538]
[3.99578071 156.59574890]
[-10.38333225 161.56523132]
[-23.71706963 155.02711487]
[-37.82405090 160.12545776]
[-50.66512299 171.19537354]
[-64.85719299 161.92059326]
[-59.87363434 145.71565247]
[-42.92238998 146.01846313]
[-28.81540871 140.92013550]
[-22.74230003 127.36827087]
[-8.50844288 121.99687195]
[5.66481829 128.45878601]
[19.77180099 123.36045074]
[33.87878036 118.26210785]
[44.27037048 104.27281952]
[62.30115128 107.28966522]
[76.18843842 101.62016296]
[90.07572937 95.95066071]
[103.01480865 88.36250305]
[114.74227905 79.01015472]
[126.46974945 69.65780640]
[138.19721985 60.30546188]
[149.92469788 50.95311356]
[161.65217590 41.60076523]
[173.37963867 32.24842072]
[185.10711670 22.89607239]
[188.06669617 16.46797943]
[193.15628052 13.20484352]
[198.19331360 13.30657482]
[210.64405823 4.94124460]
[223.09481812 -3.42408562]
[235.54557800 -11.78941536]
[247.99632263 -20.15474510]
[248.00617981 -32.37905884]
[253.97531128 -42.90726471]
[264.25115967 -49.06760406]
[276.10665894 -49.36492920]
[286.46362305 -43.84190369]
[299.55477905 -51.16454697]
[312.64596558 -58.48719025]
[320.56848145 -72.84566498]
[336.96755981 -72.89322662]
[344.97323608 -58.58095169]
[336.34994507 -44.63208008]
[319.96859741 -45.39601517]
[306.87744141 -38.07337189]
[293.78625488 -30.75072861]
[290.10791016 -13.03435707]
[274.53485107 -3.22357035]
[256.36166382 -7.70399237]
[243.91090393 0.66133749]
[231.46014404 9.02666759]
[219.00939941 17.39199829]
[206.55863953 25.75732803]
[194.45945740 34.62354279]
[182.73199463 43.97589111]
[171.00451660 53.32823944]
[159.27703857 62.68058395]
[147.54957581 72.03293610]
[135.82209778 81.38527679]
[124.09462738 90.73762512]
[112.36715698 100.08997345]
[126.91177368 103.75794983]
[135.96907043 115.71475983]
[135.56127930 130.70921326]
[125.86746979 142.15605164]
[111.14498138 145.02806091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[7 23]
[8 22]
[9 21]
[12 18]
[13 17]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
