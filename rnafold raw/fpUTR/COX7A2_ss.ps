%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGGAUAGAGCCGUACUGCCGCUCUAGUUUUUCUUUUGCUCUCUAUGGUUAGGAGCGCAAGCCUCUCUUCGGCCCGGAAAGAUUUAAGUUCGUGA\
) } def
/len { sequence length } bind def

/coor [
[17.70771217 244.43339539]
[5.77128410 253.51753235]
[-6.16514349 262.60168457]
[-18.10157013 271.68582153]
[-30.03799820 280.76998901]
[-41.97442627 289.85412598]
[-53.91085434 298.93826294]
[-58.96317291 306.77398682]
[-66.37319946 308.11410522]
[-78.59183502 316.81494141]
[-90.81047821 325.51580811]
[-91.86930847 341.11749268]
[-102.74620056 352.35260010]
[-118.30541229 353.91619873]
[-131.20036316 345.07006836]
[-135.34245300 329.99102783]
[-128.77590942 315.79898071]
[-114.60125732 309.19494629]
[-99.51132965 313.29714966]
[-87.29269409 304.59631348]
[-75.07405090 295.89544678]
[-62.99499893 287.00183105]
[-51.05857086 277.91769409]
[-39.12214279 268.83355713]
[-27.18571663 259.74938965]
[-15.24928856 250.66525269]
[-3.31286097 241.58111572]
[8.62356663 232.49696350]
[18.62510109 221.31799316]
[26.33026314 208.44824219]
[34.03542328 195.57849121]
[41.74058533 182.70874023]
[49.44574356 169.83898926]
[57.15090561 156.96923828]
[64.85606384 144.09948730]
[72.56122589 131.22973633]
[80.26638794 118.35998535]
[73.09376526 101.59971619]
[78.22990417 84.10762024]
[93.32518768 73.88579559]
[93.80110931 58.89334869]
[94.27703094 43.90090179]
[94.75294495 28.90845490]
[95.22886658 13.91600609]
[92.33295441 5.05383539]
[95.96524048 -1.54244387]
[96.91660309 -16.51224327]
[97.86795807 -31.48204422]
[90.10480499 -45.92729950]
[98.96210480 -59.72875595]
[115.32823944 -58.68865967]
[122.36711884 -43.87696838]
[112.83776093 -30.53068542]
[111.88639832 -15.56088543]
[110.93504333 -0.59108508]
[110.22131348 14.39192486]
[109.74539185 29.38437271]
[109.26947784 44.37681961]
[108.79355621 59.36927032]
[108.31763458 74.36171722]
[112.68641663 76.21850586]
[116.66170502 78.81291962]
[120.12019348 82.06449127]
[122.95462036 85.87236786]
[137.41226196 81.87525940]
[151.86988831 77.87815857]
[158.20095825 63.57949829]
[172.26452637 56.74208450]
[187.42018127 60.59432602]
[196.51191711 73.31731415]
[195.24687195 88.90364075]
[184.22236633 99.99392700]
[168.64384460 101.35166931]
[155.86698914 92.33578491]
[141.40936279 96.33289337]
[126.95172882 100.33000183]
[121.97473907 115.60818481]
[109.18813324 125.33935547]
[93.13613892 126.06514740]
[85.43097687 138.93490601]
[77.72581482 151.80465698]
[70.02066040 164.67440796]
[62.31549454 177.54415894]
[54.61033630 190.41390991]
[46.90517426 203.28366089]
[39.20001221 216.15341187]
[31.49485207 229.02316284]
[45.73628616 224.31343079]
[60.63323975 226.06866455]
[73.39002228 233.95944214]
[81.61259460 246.50492859]
[83.75784302 261.35073853]
[79.42316437 275.71078491]
[69.42204285 286.89010620]
[55.63137817 292.79074097]
[40.63923264 292.30532837]
[27.25916290 285.52493286]
[18.00217819 273.72204590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[9 21]
[10 20]
[11 19]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[46 55]
[47 54]
[48 53]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
