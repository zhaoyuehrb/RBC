%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCUUCCCUGGGCACCAAGAGAUGGGCUCCCCUUGCCUGGCAGAGAAACAGCUGGAAACUGGCUCCCUGAGACAAGAAGACUGGUAAACCCAGCGCUUCCUACCUGGUGGUCUUCAGCA\
) } def
/len { sequence length } bind def

/coor [
[-5.32441473 135.42024231]
[-19.92337990 138.86555481]
[-28.25650978 152.02598572]
[-43.11101532 155.31205750]
[-55.60611343 147.28659058]
[-70.20507812 150.73190308]
[-84.80404663 154.17721558]
[-93.13717651 167.33764648]
[-107.99167633 170.62371826]
[-120.48677826 162.59825134]
[-135.08573914 166.04356384]
[-149.68470764 169.48887634]
[-164.28367615 172.93420410]
[-178.88264465 176.37951660]
[-193.48159790 179.82482910]
[-208.08056641 183.27014160]
[-212.57952881 197.88885498]
[-223.71813965 208.22462463]
[-238.43685913 211.57508850]
[-252.76057434 207.13804626]
[-262.87203979 196.20079041]
[-277.47100830 199.64610291]
[-292.06997681 203.09141541]
[-301.69436646 215.92695618]
[-317.73391724 216.26109314]
[-327.88452148 203.83752441]
[-324.35946655 188.18653870]
[-309.86285400 181.31422424]
[-295.51528931 188.49244690]
[-280.91632080 185.04713440]
[-266.31738281 181.60182190]
[-262.16275024 167.29780579]
[-251.33415222 156.92489624]
[-236.67048645 153.34117126]
[-222.08609009 157.60639954]
[-211.52589417 168.67117310]
[-196.92692566 165.22586060]
[-182.32795715 161.78054810]
[-167.72898865 158.33523560]
[-153.13002014 154.88992310]
[-138.53105164 151.44459534]
[-123.93209076 147.99928284]
[-116.34352875 135.23413086]
[-101.58718109 131.53211975]
[-88.24935913 139.57826233]
[-73.65039825 136.13293457]
[-59.05142975 132.68762207]
[-51.46286392 119.92246246]
[-36.70651627 116.22045898]
[-23.36869621 124.26659393]
[-8.76973152 120.82128143]
[3.26411581 108.11800385]
[20.84569931 113.40402985]
[35.35111237 109.58396149]
[49.85652924 105.76389313]
[64.36194611 101.94383240]
[78.86736298 98.12376404]
[93.37277985 94.30369568]
[95.16259003 91.67407990]
[97.99390411 89.67353821]
[101.62132263 88.70594025]
[105.64764404 89.07305145]
[109.56732178 90.91950989]
[124.38864136 88.61115265]
[139.20996094 86.30279541]
[154.03128052 83.99443817]
[166.47636414 74.22558594]
[180.24272156 79.91210938]
[195.06404114 77.60375214]
[200.60035706 73.64778137]
[206.41929626 73.23698425]
[210.70593262 75.57859802]
[225.62641907 74.03628540]
[231.96516418 60.11624146]
[244.33866882 51.29619217]
[259.36575317 49.86333466]
[273.00119019 56.10279083]
[281.62466431 68.24781036]
[296.54513550 66.70549774]
[311.46563721 65.16317749]
[326.38613892 63.62086487]
[340.97286987 52.47269821]
[356.71426392 60.11440659]
[371.59008789 58.18843079]
[386.46594238 56.26245499]
[401.34176636 54.33647919]
[412.23489380 42.55856323]
[428.22381592 43.87539291]
[437.04321289 57.27681351]
[431.92758179 72.48239899]
[416.80120850 77.82772827]
[403.26776123 69.21231842]
[388.39190674 71.13829803]
[373.51608276 73.06427002]
[358.64022827 74.99024963]
[350.94677734 84.42098236]
[338.48443604 86.08711243]
[327.92846680 78.54136658]
[313.00796509 80.08367920]
[298.08746338 81.62599182]
[283.16696167 83.16831207]
[277.21014404 96.82047272]
[265.13931274 105.71716309]
[250.13685608 107.38842010]
[236.22082520 101.28589630]
[227.16873169 88.95677948]
[212.24824524 90.49909973]
[197.37240601 92.42507172]
[182.55108643 94.73342896]
[171.16612244 104.33717346]
[156.33963013 98.81575775]
[141.51831055 101.12411499]
[126.69699860 103.43247223]
[111.87567902 105.74082947]
[97.19284821 108.80911255]
[82.68743134 112.62918091]
[68.18201447 116.44924164]
[53.67659760 120.26931000]
[39.17118073 124.08937836]
[24.66576576 127.90944672]
[17.45013428 138.69377136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[5 47]
[6 46]
[7 45]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[21 31]
[22 30]
[23 29]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[63 114]
[64 113]
[65 112]
[66 111]
[68 109]
[69 108]
[72 107]
[73 106]
[78 101]
[79 100]
[80 99]
[81 98]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
