%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGGCACAAACCUAGCGCCAAGGUUGGCUGUCAAGGUAGAUUCCAGGGUGUGGAAGUGGCUUUGUGGUGCCACCUCUAACCGCUCGGAGGUCAACCCCCAUUCUACACCGAAAACUAGGCCUUGGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[-12.72099209 306.45132446]
[-19.09252167 321.24743652]
[-31.21993637 331.76327515]
[-46.65736389 335.94470215]
[-62.32023239 333.00845337]
[-70.96414185 345.26745605]
[-79.60805511 357.52642822]
[-81.23712158 373.26354980]
[-94.89477539 379.20642090]
[-90.72239685 394.27709961]
[-97.26040649 408.48229980]
[-111.42176056 415.11480713]
[-126.51989746 411.04293823]
[-135.42594910 398.18927002]
[-133.93472290 382.62295532]
[-122.75036621 371.69390869]
[-107.15377045 370.56250000]
[-106.14297485 355.70223999]
[-91.86704254 348.88253784]
[-83.22312927 336.62353516]
[-74.57922363 324.36453247]
[-81.93313599 312.54232788]
[-84.21545410 298.76385498]
[-81.04662323 285.11724854]
[-72.87577820 273.68362427]
[-60.91745377 266.21963501]
[-46.97109604 263.88754272]
[-33.15034866 267.07449341]
[-24.21930885 255.02310181]
[-15.28826618 242.97167969]
[-13.92677116 228.13943481]
[0.50624925 221.65881348]
[9.43729115 209.60740662]
[18.36833382 197.55598450]
[27.29937553 185.50457764]
[36.23041916 173.45317078]
[45.16146088 161.40176392]
[54.09250259 149.35035706]
[63.02354431 137.29893494]
[54.01551056 125.37510681]
[48.73032761 111.39693451]
[47.59588242 96.49607086]
[50.70401001 81.87889099]
[57.80308914 68.72876740]
[68.31837463 58.11033630]
[81.39857483 50.88323975]
[95.98472595 47.63257980]
[110.89595032 48.62152481]
[124.92504120 53.77001572]
[133.85609436 41.71860504]
[142.78712463 29.66719627]
[151.71817017 17.61578560]
[160.64921570 5.56437635]
[169.58026123 -6.48703384]
[178.51129150 -18.53844452]
[187.44233704 -30.58985329]
[196.37338257 -42.64126205]
[199.00614929 -51.49011612]
[205.66043091 -54.86850357]
[214.87362671 -66.70561218]
[224.08682251 -78.54271698]
[224.53379822 -83.08273315]
[226.27708435 -86.82852936]
[228.88903809 -89.46068573]
[231.88119507 -90.83914185]
[234.77073669 -91.00719452]
[238.42782593 -99.48418427]
[245.43382263 -102.05495453]
[255.97761536 -112.72400665]
[266.52139282 -123.39305878]
[264.89605713 -136.82110596]
[271.23614502 -148.54780579]
[283.01199341 -154.36817932]
[295.79321289 -152.34397888]
[306.58605957 -162.76101685]
[317.37887573 -173.17805481]
[328.17172241 -183.59510803]
[338.96453857 -194.01214600]
[349.75738525 -204.42918396]
[347.46856689 -219.77653503]
[354.66766357 -233.52253723]
[368.58648682 -240.38157654]
[383.87292480 -237.71621704]
[394.64904785 -226.55133057]
[396.77124023 -211.18006897]
[389.42343140 -197.51296997]
[375.43106079 -190.80532837]
[360.17440796 -193.63635254]
[349.38159180 -183.21931458]
[338.58874512 -172.80227661]
[327.79592896 -162.38522339]
[317.00308228 -151.96818542]
[306.21026611 -141.55114746]
[306.65838623 -124.78246307]
[294.63641357 -112.60608673]
[277.19042969 -112.84927368]
[266.64666748 -102.18022156]
[256.10287476 -91.51117706]
[245.68583679 -80.71834564]
[235.92391968 -69.32952881]
[226.71073914 -57.49242020]
[217.49754333 -45.65531158]
[208.42478943 -33.71022034]
[199.49374390 -21.65881157]
[190.56271362 -9.60740185]
[181.63166809 2.44400859]
[172.70062256 14.49541855]
[163.76957703 26.54682922]
[154.83854675 38.59823990]
[145.90750122 50.64965057]
[136.97645569 62.70105743]
[145.98448181 74.62489319]
[151.26966858 88.60306549]
[152.40411377 103.50392914]
[149.29598999 118.12110901]
[142.19691467 131.27122498]
[131.68162537 141.88966370]
[118.60142517 149.11676025]
[104.01527405 152.36741638]
[89.10404968 151.37847900]
[75.07495880 146.22998047]
[66.14391327 158.28138733]
[57.21287155 170.33280945]
[48.28182983 182.38421631]
[39.35078430 194.43562317]
[30.41974449 206.48703003]
[21.48870087 218.53843689]
[12.55765915 230.58985901]
[10.55735683 246.28410339]
[-3.23685575 251.90272522]
[-12.16789818 263.95413208]
[-21.09893990 276.00555420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[9 17]
[28 132]
[29 131]
[30 130]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[37 123]
[38 122]
[39 121]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[59 102]
[60 101]
[61 100]
[66 99]
[68 98]
[69 97]
[70 96]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
