%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAAUCCAGAGCCUCAGCAAGCAGCAGCUGGAAACGGGGAAGAGGGAGCAGACAGGAAGCGGGAGGUCAGCUGUACACCCAGGGUAAUAGAACUUCUACCCUCAGAGGAGUCAAAGAGGAGGCAGAACU\
) } def
/len { sequence length } bind def

/coor [
[95.44122314 321.34030151]
[80.59816742 324.26248169]
[65.57883453 322.45285034]
[51.85465240 316.08871460]
[40.77018356 305.79360962]
[33.41136551 292.57608032]
[30.49914742 277.73107910]
[32.31883240 262.71295166]
[38.69214630 248.99302673]
[48.99470520 237.91546631]
[62.21715927 230.56550598]
[77.06410980 227.66323853]
[78.85842896 212.77093506]
[80.65274048 197.87864685]
[82.44705200 182.98634338]
[84.24137115 168.09405518]
[74.87139893 156.57279968]
[76.47894287 141.44433594]
[88.62702942 131.69436646]
[79.05029297 126.36260986]
[71.69331360 118.23757172]
[57.59110260 123.34909058]
[43.48889160 128.46061707]
[33.35077667 141.35055542]
[17.15943336 138.74815369]
[11.57113075 123.33053589]
[22.33463478 110.95802307]
[38.37737274 114.35839844]
[52.47958374 109.24687958]
[66.58179474 104.13536072]
[65.93221283 95.91790009]
[67.31063843 87.63481140]
[70.70843506 79.78795624]
[75.99260712 72.87045288]
[82.90968323 67.33581543]
[91.09735107 63.56861496]
[100.10312653 61.85838699]
[95.50209808 47.58146286]
[90.90106964 33.30454254]
[79.38697052 31.65135193]
[69.39060211 25.80491829]
[62.36787033 16.66186142]
[59.32450867 5.59552765]
[60.67220306 -5.75023508]
[66.17333221 -15.70525074]
[74.98177338 -22.81887436]
[64.18802643 -34.38631439]
[68.68086243 -48.58714676]
[65.11800385 -63.15787125]
[61.55514145 -77.72859955]
[50.76139450 -89.29603577]
[55.25423431 -103.49687195]
[51.69137192 -118.06759644]
[48.12850952 -132.63832092]
[33.18687439 -135.75445557]
[21.08220291 -145.05175781]
[14.21788025 -158.68420410]
[13.95682526 -173.94509888]
[20.35087204 -187.80435181]
[32.13047409 -197.51020813]
[46.95678711 -201.13555908]
[61.88603210 -197.96060181]
[73.95400238 -188.61572266]
[80.76458740 -174.95634460]
[80.96553802 -159.69454956]
[74.51696777 -145.86058044]
[62.69923401 -136.20118713]
[66.26209259 -121.63045502]
[69.82495880 -107.05973053]
[80.36386108 -96.53448486]
[76.12586212 -81.29145813]
[79.68872833 -66.72073364]
[83.25158691 -52.15000916]
[93.79049683 -41.62476730]
[89.55249786 -26.38173676]
[107.15982819 -20.42286682]
[117.79906464 -5.00004530]
[117.10581970 13.87190819]
[105.17798615 28.70351028]
[109.77902222 42.98043442]
[114.38005066 57.25735855]
[127.60356140 64.33821869]
[142.03672791 60.25363159]
[156.46989441 56.16904449]
[170.90304565 52.08445358]
[185.33621216 47.99986649]
[199.76936340 43.91527939]
[203.45878601 29.00609398]
[214.12005615 17.95020103]
[228.88537598 13.72158241]
[243.78291321 17.45771217]
[254.80534363 28.15359116]
[258.98764038 42.93208313]
[255.20484924 57.81784439]
[244.47447205 68.80668640]
[229.68293762 72.94265747]
[214.80911255 69.11320496]
[203.85395813 58.34843826]
[189.42079163 62.43302917]
[174.98764038 66.51761627]
[160.55447388 70.60220337]
[146.12130737 74.68679047]
[131.68815613 78.77137756]
[135.13731384 89.57151794]
[135.15957642 100.46521759]
[132.01654053 110.43161011]
[144.88536072 118.13832855]
[161.28213501 117.85934448]
[169.48898315 132.05722046]
[161.06341553 146.12640381]
[144.67291260 145.59371948]
[137.17863464 131.00715637]
[124.30982208 123.30043030]
[119.86888885 127.18648529]
[114.81774139 130.23759460]
[109.31151581 132.36006165]
[103.51931763 133.48867798]
[113.00389099 145.84507751]
[110.97205353 160.92242432]
[99.13366699 169.88836670]
[97.33934784 184.78067017]
[95.54503632 199.67295837]
[93.75071716 214.56524658]
[91.95640564 229.45755005]
[105.68910217 235.80326843]
[116.78736115 246.08354187]
[124.16387939 259.29119873]
[127.09599304 274.13226318]
[125.29644012 289.15283203]
[118.94151306 302.88125610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 124]
[13 123]
[14 122]
[15 121]
[16 120]
[19 117]
[21 30]
[22 29]
[23 28]
[37 81]
[38 80]
[39 79]
[46 75]
[48 73]
[49 72]
[50 71]
[52 69]
[53 68]
[54 67]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
