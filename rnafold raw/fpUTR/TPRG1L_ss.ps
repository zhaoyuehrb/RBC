%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCGGCCGGGUGGUGGCGGUGGCUGCGGCGACGGCGGUCGCGUCGGCGUCAGGGUCGGGGUCGGUAAGGGGUGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[70.84752655 117.20418549]
[66.26634216 97.19094849]
[51.96539688 92.66513824]
[37.66444778 88.13932800]
[23.36350250 83.61351776]
[9.06255722 79.08771515]
[-5.23838854 74.56190491]
[-19.53933525 70.03609467]
[-33.84027863 65.51028442]
[-48.14122772 60.98447800]
[-62.44217300 56.45866776]
[-80.18463135 60.91832352]
[-91.66016388 47.78768158]
[-106.12396240 43.81295776]
[-121.48107147 47.61688614]
[-131.70314026 36.78367615]
[-146.16694641 32.80895233]
[-161.52404785 36.61288071]
[-171.74612427 25.77967072]
[-186.20993042 21.80494881]
[-200.67373657 17.83022690]
[-215.13754272 13.85550404]
[-232.01264954 15.48863125]
[-238.25344849 -0.27489567]
[-224.83358765 -10.63558006]
[-211.16281128 -0.60829842]
[-196.69900513 3.36642408]
[-182.23521423 7.34114647]
[-167.77140808 11.31586933]
[-153.44885254 7.22764206]
[-142.19223022 18.34515190]
[-127.72842407 22.31987381]
[-113.40586853 18.23164558]
[-102.14924622 29.34915543]
[-87.68544006 33.32387924]
[-76.85729218 27.58205414]
[-64.65737915 30.96621323]
[-57.91636276 42.15772247]
[-43.61541748 46.68352890]
[-29.31447220 51.20933914]
[-15.01352501 55.73514938]
[-0.71257955 60.26095581]
[13.58836651 64.78676605]
[27.88931274 69.31257629]
[42.19025803 73.83838654]
[56.49120331 78.36419678]
[70.79215240 82.88999939]
[76.96542358 75.19558716]
[85.09494781 69.60772705]
[94.49031067 66.60099030]
[104.35359955 66.43071747]
[113.84714508 69.11137390]
[122.16469574 74.41529846]
[128.59986877 81.89205170]
[132.60615540 90.90665436]
[133.84330750 100.69351959]
[132.20625305 110.42149353]
[145.09980774 118.08677673]
[157.99334717 125.75205231]
[170.88688660 133.41732788]
[186.70300293 133.81872559]
[193.68907166 146.97335815]
[209.50518799 147.37475586]
[216.49125671 160.52937317]
[229.38479614 168.19465637]
[244.63786316 164.05706787]
[258.30737305 171.98928833]
[262.28347778 187.28523254]
[254.20718384 200.87013245]
[238.87004089 204.68426514]
[225.37130737 196.46479797]
[221.71952820 181.08819580]
[208.82597351 173.42291260]
[193.93209839 173.56979370]
[186.02378845 159.86689758]
[171.12991333 160.01377869]
[163.22160339 146.31088257]
[150.32806396 138.64559937]
[137.43452454 130.98031616]
[124.54097748 123.31504059]
[106.55204773 133.21025085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[13 35]
[14 34]
[16 32]
[17 31]
[19 29]
[20 28]
[21 27]
[22 26]
[57 80]
[58 79]
[59 78]
[60 77]
[62 75]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
