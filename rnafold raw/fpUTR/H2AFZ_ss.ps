%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGUGGGAUGAGCAAUCCGAGUUCCCGGAUGAGGGAACAUUCUGCAGUAUAAAGGGAGCAGGGAAGGCGGGAGACAGCGCAGUUUGAAUCGCGGUGCGACGAAGGAGUAGGUGGUGGGAUCUCACCGUGGGUCCGAUUAGCCUUUUCUCUGCCUUGCUUGCUUGAGCUUCAGCGGAAUUCGAA\
) } def
/len { sequence length } bind def

/coor [
[171.42036438 136.07498169]
[161.11201477 146.97166443]
[147.12313843 152.38568115]
[132.16485596 151.26773071]
[119.13459015 143.83308411]
[118.72855377 128.83857727]
[119.33069611 144.64833069]
[106.64544678 152.45433044]
[99.81302643 165.80790710]
[92.98059845 179.16148376]
[86.14817810 192.51506042]
[89.69188690 208.16184998]
[79.55610657 220.59750366]
[63.51614761 220.28245544]
[53.87649155 207.45840454]
[58.03185654 191.96282959]
[72.79460144 185.68264771]
[79.62702179 172.32907104]
[86.45944977 158.97549438]
[93.29187012 145.62191772]
[92.20103455 130.76730347]
[105.37497711 122.00615692]
[94.59075165 111.58020782]
[81.47555542 118.85974121]
[68.36035156 126.13926697]
[55.24515533 133.41879272]
[42.12995529 140.69833374]
[29.01475525 147.97785950]
[24.90856552 163.23941040]
[11.17200279 171.05493164]
[-4.04527664 166.78761292]
[-11.71512890 152.96917725]
[-7.28716707 137.79786682]
[6.61157703 130.27455139]
[21.73522568 134.86265564]
[34.85042572 127.58312988]
[47.96562576 120.30360413]
[61.08082199 113.02407074]
[74.19602203 105.74454498]
[87.31122589 98.46501160]
[98.35610962 88.31560516]
[106.71597290 75.86118317]
[115.07584381 63.40676117]
[123.43570709 50.95233917]
[131.79557800 38.49791718]
[140.15544128 26.04349327]
[148.51530457 13.58907223]
[139.61300659 3.06260037]
[133.75349426 -9.40221786]
[131.33241272 -22.94815063]
[132.50918579 -36.64551544]
[137.19656372 -49.55598450]
[145.06698608 -60.79685974]
[155.57556152 -69.60143280]
[167.99771118 -75.37126160]
[181.47914124 -77.71687317]
[195.09461975 -76.48400116]
[207.91148376 -71.76377869]
[216.68722534 -83.92874146]
[225.46295166 -96.09371185]
[234.23869324 -108.25868225]
[243.01441956 -120.42365265]
[251.79016113 -132.58862305]
[260.56588745 -144.75358582]
[262.36474609 -160.47219849]
[276.08575439 -166.26728821]
[284.86148071 -178.43226624]
[293.63720703 -190.59722900]
[302.41296387 -202.76220703]
[311.18869019 -214.92716980]
[319.96441650 -227.09213257]
[328.74017334 -239.25711060]
[337.41284180 -251.49575806]
[345.98187256 -263.80722046]
[354.55090332 -276.11865234]
[363.11993408 -288.43011475]
[365.46179199 -297.28237915]
[371.93908691 -300.87545776]
[380.71481323 -313.04043579]
[383.20587158 -321.85189819]
[389.74291992 -325.33508301]
[398.72286987 -337.35009766]
[407.60104370 -349.44052124]
[416.37677002 -361.60546875]
[425.15249634 -373.77044678]
[433.92822266 -385.93542480]
[435.72708130 -401.65402222]
[449.44808960 -407.44912720]
[458.22381592 -419.61407471]
[460.02267456 -435.33270264]
[473.74368286 -441.12780762]
[482.51940918 -453.29275513]
[491.29516602 -465.45773315]
[500.07089233 -477.62271118]
[508.84661865 -489.78765869]
[517.62237549 -501.95263672]
[526.39807129 -514.11761475]
[535.17382812 -526.28259277]
[536.97265625 -542.00115967]
[550.69366455 -547.79626465]
[559.46942139 -559.96124268]
[568.14208984 -572.19989014]
[559.17913818 -584.40411377]
[554.66687012 -598.85815430]
[555.09478760 -613.99401855]
[560.41650391 -628.17004395]
[570.05468750 -639.84838867]
[582.96392822 -647.76226807]
[597.74389648 -651.05334473]
[612.79138184 -649.36456299]
[626.47412109 -642.87915039]
[637.30798340 -632.30053711]
[644.11767578 -618.77624512]
[646.16467285 -603.77331543]
[643.22680664 -588.91906738]
[635.62280273 -575.82489014]
[624.17749023 -565.91107178]
[610.13238525 -560.25299072]
[595.01098633 -559.46441650]
[580.45355225 -563.63085938]
[579.21026611 -556.32879639]
[571.63439941 -551.18548584]
[562.85864258 -539.02056885]
[561.68750000 -524.17205811]
[547.33880615 -517.50683594]
[538.56304932 -505.34185791]
[529.78735352 -493.17691040]
[521.01159668 -481.01193237]
[512.23583984 -468.84695435]
[503.46011353 -456.68200684]
[494.68438721 -444.51702881]
[485.90866089 -432.35205078]
[484.73751831 -417.50357056]
[470.38879395 -410.83834839]
[461.61306763 -398.67340088]
[460.44192505 -383.82489014]
[446.09320068 -377.15966797]
[437.31747437 -364.99472046]
[428.54174805 -352.82974243]
[419.76599121 -340.66476440]
[418.39953613 -333.38476562]
[410.73788452 -328.37014771]
[401.75796509 -316.35513306]
[392.87979126 -304.26470947]
[384.10406494 -292.09973145]
[375.43136597 -279.86108398]
[366.86233521 -267.54962158]
[358.29333496 -255.23818970]
[349.72430420 -242.92672729]
[348.48098755 -235.62467957]
[340.90512085 -230.48136902]
[332.12939453 -218.31640625]
[323.35366821 -206.15142822]
[314.57791138 -193.98646545]
[305.80218506 -181.82150269]
[297.02645874 -169.65652466]
[288.25073242 -157.49156189]
[287.07958984 -142.64306641]
[272.73086548 -135.97785950]
[263.95513916 -123.81288910]
[255.17939758 -111.64791870]
[246.40365601 -99.48294830]
[237.62792969 -87.31797791]
[228.85218811 -75.15300751]
[220.07646179 -62.98804092]
[229.91162109 -50.00851822]
[235.27220154 -34.61147308]
[235.62513733 -18.29315376]
[230.92454529 -2.64309287]
[221.61741638 10.81073666]
[208.60099792 20.75109863]
[193.13645935 26.20045280]
[176.72656250 26.61708641]
[160.96972656 21.94893837]
[152.60986328 34.40336227]
[144.25000000 46.85778427]
[135.89013672 59.31220627]
[127.53026581 71.76662445]
[119.17039490 84.22104645]
[110.81053162 96.67546844]
[124.11797333 89.75362396]
[138.28536987 84.82564545]
[153.19615173 86.45918274]
[165.96054077 94.33764648]
[174.10475159 106.93415070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[8 20]
[9 19]
[10 18]
[11 17]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[41 180]
[42 179]
[43 178]
[44 177]
[45 176]
[46 175]
[47 174]
[58 165]
[59 164]
[60 163]
[61 162]
[62 161]
[63 160]
[64 159]
[66 157]
[67 156]
[68 155]
[69 154]
[70 153]
[71 152]
[72 151]
[73 149]
[74 148]
[75 147]
[76 146]
[78 145]
[79 144]
[81 143]
[82 142]
[83 140]
[84 139]
[85 138]
[86 137]
[88 135]
[89 134]
[91 132]
[92 131]
[93 130]
[94 129]
[95 128]
[96 127]
[97 126]
[98 125]
[100 123]
[101 122]
[102 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
