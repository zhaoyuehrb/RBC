%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCACGCGCAAGAUUAGGUGGGGCGCCAGAGCCGGGGCACCUGCGCAGGCUUGGCUGCGCCCUCUCGCGCCGCACGCUCUGCGGGUUCCUCCCUUCUUCCGAGCCUCUCCUCUGGCCGCCGCGCGGGAGAGAGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[109.55954742 113.98743439]
[102.40666962 116.24272156]
[97.58507538 130.44667053]
[92.76348114 144.65063477]
[87.94189453 158.85458374]
[91.67015076 174.82431030]
[79.52070618 185.83897400]
[63.99185944 180.56764221]
[61.05836105 164.43299866]
[73.73793793 154.03298950]
[78.55953217 139.82904053]
[83.38112640 125.62508392]
[88.20271301 111.42113495]
[86.08271790 96.57170105]
[77.47907257 84.28442383]
[68.87542725 71.99713898]
[60.27177811 59.70986176]
[46.78165817 58.90201187]
[36.38686371 50.57433319]
[32.76334000 37.96028900]
[37.02518463 25.75378036]
[28.69163322 13.28173733]
[14.59133816 6.10592699]
[13.95377445 -8.77502632]
[5.62022114 -21.24707031]
[-2.71333241 -33.71911621]
[-11.04688644 -46.19115829]
[-19.38043976 -58.66320419]
[-33.48073578 -65.83901215]
[-34.11829758 -80.71997070]
[-42.58740234 -93.10036469]
[-51.19104767 -105.38764954]
[-59.79469299 -117.67492676]
[-68.39833832 -129.96220398]
[-77.00199127 -142.24949646]
[-85.60563660 -154.53677368]
[-94.60670471 -166.53596497]
[-103.99555206 -178.23423767]
[-113.38440704 -189.93249512]
[-128.05645752 -195.85208130]
[-129.98855591 -210.62084961]
[-139.37741089 -222.31910706]
[-156.61054993 -219.22369385]
[-172.97058105 -225.20870972]
[-184.02507019 -238.55760193]
[-186.82705688 -255.57179260]
[-180.70021057 -271.59521484]
[-190.59039307 -282.87283325]
[-200.48057556 -294.15042114]
[-210.37075806 -305.42800903]
[-220.26095581 -316.70562744]
[-230.15113831 -327.98321533]
[-245.93600464 -328.76663208]
[-256.48153687 -340.53808594]
[-255.53126526 -356.31378174]
[-243.64897156 -366.73428345]
[-227.88421631 -365.61727905]
[-217.58992004 -353.62548828]
[-218.87355042 -337.87341309]
[-208.98335266 -326.59579468]
[-199.09317017 -315.31820679]
[-189.20298767 -304.04061890]
[-179.31278992 -292.76300049]
[-169.42260742 -281.48541260]
[-157.28698730 -285.28424072]
[-144.57154846 -284.18093872]
[-133.18823242 -278.30563354]
[-124.86224365 -268.50863647]
[-120.87066650 -256.23760986]
[-121.84661865 -243.32359314]
[-127.67914581 -231.70796204]
[-118.29029083 -220.00968933]
[-104.28979492 -214.92684937]
[-101.68614197 -199.32135010]
[-92.29728699 -187.62309265]
[-82.90843964 -175.92481995]
[-79.38517761 -175.19697571]
[-76.05521393 -172.68048096]
[-73.77666473 -168.49296570]
[-73.31835175 -163.14041138]
[-64.71470642 -150.85313416]
[-56.11106110 -138.56585693]
[-47.50741577 -126.27857208]
[-38.90376663 -113.99129486]
[-30.30012131 -101.70401001]
[-23.83812141 -98.00093842]
[-21.64625359 -89.05352020]
[-8.14202976 -82.76979828]
[-6.90839529 -66.99675751]
[1.42515814 -54.52471161]
[9.75871181 -42.05266953]
[18.09226608 -29.58062363]
[26.42581940 -17.10857964]
[39.93004227 -10.82485390]
[41.16367722 4.94818354]
[49.49723053 17.42022705]
[66.08666229 19.96593285]
[75.92558289 33.97674942]
[72.55905914 51.10621262]
[81.16270447 63.39349365]
[89.76634979 75.68077850]
[98.37000275 87.96805573]
[115.98449707 79.28741455]
[139.88781738 95.12488556]
[151.98449707 103.99452972]
[160.82778931 106.57459259]
[164.24546814 113.19196320]
[176.14576721 122.32338715]
[188.04606628 131.45480347]
[199.94636536 140.58622742]
[211.84666443 149.71765137]
[223.74696350 158.84907532]
[235.64726257 167.98049927]
[244.43217468 170.75285339]
[247.70468140 177.44320679]
[259.40295410 186.83206177]
[271.10122681 196.22091675]
[286.70672607 198.82456970]
[291.78955078 212.82507324]
[303.48782349 222.21391296]
[319.16891479 220.24443054]
[331.59832764 230.00584412]
[333.40191650 245.70687866]
[323.50964355 258.03240967]
[307.79043579 259.66989136]
[295.57019043 249.64785767]
[294.09896851 233.91218567]
[282.40069580 224.52333069]
[267.63195801 222.59123230]
[261.71237183 207.91918945]
[250.01409912 198.53033447]
[238.31582642 189.14147949]
[226.51583862 179.88079834]
[214.61553955 170.74937439]
[202.71524048 161.61795044]
[190.81494141 152.48652649]
[178.91464233 143.35510254]
[167.01434326 134.22367859]
[155.11404419 125.09226227]
[143.11485291 116.09119415]
[131.01817322 107.22154999]
[123.86530304 109.47684479]
[128.37565613 123.78267670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[14 102]
[15 101]
[16 100]
[17 99]
[21 96]
[22 95]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[30 87]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 76]
[38 75]
[39 74]
[41 72]
[42 71]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[104 141]
[105 140]
[107 139]
[108 138]
[109 137]
[110 136]
[111 135]
[112 134]
[113 133]
[115 132]
[116 131]
[117 130]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
