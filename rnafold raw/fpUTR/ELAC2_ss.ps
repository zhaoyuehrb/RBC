%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCGGUGCACGGCGCGCUGAUUGGCUGGAUCCGCCAUGCGGAGCGGCUAGGUGGUGCACGGGAAACGCGGGCGUAGGUGACCGGCGGCUUUCUCAGUUUUGGUGGAGACGGGCGC\
) } def
/len { sequence length } bind def

/coor [
[79.56709290 184.35780334]
[87.85706329 170.20831299]
[87.45775604 155.21362305]
[87.05844879 140.21893311]
[86.65914154 125.22425079]
[74.58994293 103.24988556]
[84.67906189 83.25125885]
[70.10761261 79.69135284]
[55.53616333 76.13145447]
[40.96471405 72.57155609]
[26.39326477 69.01165009]
[11.82181644 65.45175171]
[-3.42035127 69.69284821]
[-13.94773579 59.15608215]
[-28.51918411 55.59618378]
[-21.48958969 68.84702301]
[-24.40320778 83.56133270]
[-35.95202637 93.13340759]
[-50.95144272 93.26607513]
[-62.66776276 83.89975739]
[-65.84118652 69.23928833]
[-59.04706192 55.86618423]
[-45.33445740 49.78395462]
[-58.99397659 43.58576965]
[-72.65350342 37.38758850]
[-86.31301880 31.18940544]
[-99.97254181 24.99122238]
[-113.63206482 18.79304123]
[-127.29158783 12.59485722]
[-139.70303345 16.40067291]
[-150.99533081 10.85789108]
[-155.29153442 -0.53578758]
[-168.78121948 -7.09539747]
[-182.27088928 -13.65500736]
[-195.76057434 -20.21461678]
[-209.25025940 -26.77422714]
[-226.13868713 -28.26324844]
[-229.38304138 -44.90387726]
[-214.29086304 -52.62802505]
[-202.69064331 -40.26390839]
[-189.20097351 -33.70429993]
[-175.71128845 -27.14468956]
[-162.22160339 -20.58507919]
[-148.73191833 -14.02546978]
[-131.38174438 -16.26467705]
[-121.09340668 -1.06466413]
[-107.43388367 5.13351870]
[-93.77436066 11.33170128]
[-80.11483765 17.52988434]
[-66.45531464 23.72806740]
[-52.79579544 29.92625046]
[-39.13627243 36.12443161]
[-24.95928383 41.02473450]
[-10.38783550 44.58463287]
[3.81208515 40.08890915]
[15.38171673 50.88030624]
[29.95316505 54.44020462]
[44.52461243 58.00010681]
[59.09606171 61.56000519]
[73.66751099 65.11990356]
[88.23896027 68.67980957]
[103.10625458 66.68892670]
[116.22769928 59.42066193]
[129.34915161 52.15239716]
[142.47059631 44.88413620]
[155.59204102 37.61587143]
[168.71348572 30.34760857]
[174.80053711 23.36157608]
[182.28239441 23.06582069]
[195.59266663 16.14943314]
[204.27067566 2.92056775]
[219.13185120 3.91782761]
[227.80986023 -9.31103802]
[242.67103577 -8.31377792]
[255.98132324 -15.23016548]
[258.15298462 -30.59452438]
[268.96499634 -41.72464752]
[284.25994873 -44.34078217]
[298.15661621 -37.43696213]
[305.31143188 -23.66785240]
[302.97320557 -8.32795715]
[292.04107666 2.68422318]
[276.71865845 5.13427973]
[262.89770508 -1.91988444]
[249.58743286 4.99650288]
[241.86146545 17.73066139]
[226.04824829 17.22810936]
[218.32228088 29.96226692]
[202.50906372 29.45971489]
[189.19877625 36.37610245]
[175.98175049 43.46905518]
[162.86030579 50.73731995]
[149.73884583 58.00558090]
[136.61740112 65.27384186]
[123.49596405 72.54210663]
[110.37451172 79.81037140]
[123.80251312 90.53041840]
[126.91242981 109.48486328]
[136.79010010 120.77342987]
[146.66777039 132.06199646]
[156.54544067 143.35055542]
[166.42311096 154.63911438]
[182.11213684 159.41261292]
[185.55862427 175.44551086]
[173.21710205 186.24453735]
[157.78347778 180.70057678]
[155.13455200 164.51678467]
[145.25688171 153.22822571]
[135.37921143 141.93966675]
[125.50154114 130.65109253]
[115.62387085 119.36254120]
[101.65382385 124.82494354]
[102.05313110 139.81962585]
[102.45243835 154.81431580]
[102.85174561 169.80900574]
[111.88304138 183.49723816]
[104.30335236 198.03959656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 112]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[14 54]
[15 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[62 96]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[69 90]
[70 89]
[72 87]
[74 85]
[75 84]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
