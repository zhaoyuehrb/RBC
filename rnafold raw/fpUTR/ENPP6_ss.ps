%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUCUGCAAGUGAACUUGACUCAGGAAGGCCAGCGGCUCAAGGUCCAGCCCCUGGAAGAGAGAAUAGCUACAGAUUCUCCAUCCUCAGUCUUUGCAAGGCGACAGCUGUGCCAGCCGGGCUCUGGCAGGCUCCUGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[2.66570830 665.00323486]
[-12.43480873 669.06628418]
[-26.59227943 662.42553711]
[-33.12197876 648.21649170]
[-28.94078255 633.14825439]
[-16.02292252 624.33557129]
[-14.70646763 609.39343262]
[-13.39001274 594.45135498]
[-12.07355785 579.50921631]
[-18.66401100 566.15197754]
[-9.74541283 553.08410645]
[-8.42895794 538.14202881]
[-10.99504757 531.14886475]
[-6.91592741 522.88732910]
[-5.27155066 507.97772217]
[-11.56698895 494.47897339]
[-2.36347604 481.61016846]
[-0.71909910 466.70059204]
[0.92527783 451.79098511]
[2.56965470 436.88137817]
[0.15780506 429.83355713]
[4.41742563 421.66363525]
[2.16098046 414.56451416]
[6.59904528 406.49011230]
[8.89672756 391.66714478]
[11.19440937 376.84417725]
[9.35260010 373.75189209]
[8.96266651 369.59405518]
[10.51758957 365.08453369]
[14.16273689 361.13369751]
[17.43166924 346.49423218]
[20.70060158 331.85476685]
[23.96953392 317.21527100]
[22.16698265 312.71649170]
[23.22679329 307.03366089]
[27.71698380 302.01129150]
[31.62578773 287.52954102]
[35.53459167 273.04776001]
[39.44339752 258.56600952]
[43.35220337 244.08425903]
[41.86048508 240.80870056]
[41.92870712 236.63319397]
[43.96861267 232.32131958]
[48.02490234 228.79388428]
[52.87898636 214.60099792]
[57.73307037 200.40811157]
[54.53071594 185.86183167]
[66.31750488 175.30805969]
[71.17158508 161.11517334]
[76.02567291 146.92230225]
[80.87975311 132.72941589]
[67.96012115 120.25450134]
[62.23297882 103.23274994]
[64.98397827 85.48529053]
[75.59556580 70.99617004]
[91.68559265 63.01799011]
[91.35608673 48.02160645]
[91.02657318 33.02522659]
[82.98798370 19.39835358]
[90.44383240 6.50418472]
[87.10551453 -2.08346152]
[90.27544403 -8.82442188]
[90.27544403 -23.82442093]
[90.27544403 -38.82442093]
[90.27544403 -53.82442093]
[90.27544403 -68.82442474]
[90.27544403 -83.82442474]
[77.64318848 -92.83583832]
[72.75219727 -107.56193542]
[77.48315430 -122.34021759]
[90.01690674 -131.48814392]
[105.53398895 -131.48814392]
[118.06774139 -122.34021759]
[122.79869843 -107.56193542]
[117.90770721 -92.83583832]
[105.27544403 -83.82442474]
[105.27544403 -68.82442474]
[105.27544403 -53.82442093]
[105.27544403 -38.82442093]
[105.27544403 -23.82442093]
[105.27544403 -8.82442188]
[105.44021606 6.17467356]
[113.45523071 18.72890663]
[106.02294922 32.69571686]
[106.35246277 47.69209671]
[106.68197632 62.68847656]
[113.07709503 64.42208099]
[119.07263184 67.24281311]
[124.48538208 71.06447601]
[129.14994812 75.77029419]
[142.35443115 68.65397644]
[155.55889893 61.53765488]
[168.76336670 54.42133331]
[181.96783447 47.30501556]
[193.04246521 34.46801376]
[208.44357300 41.55621719]
[205.89581299 58.31764221]
[189.08415222 60.50948334]
[175.87968445 67.62580109]
[162.67521667 74.74212646]
[149.47074890 81.85844421]
[136.26628113 88.97476196]
[137.69981384 103.93984222]
[133.20317078 118.28518677]
[123.48366547 129.75425720]
[110.07016754 136.54299927]
[95.07263947 137.58349609]
[90.21855164 151.77638245]
[85.36446381 165.96926880]
[80.51038361 180.16213989]
[83.36553955 195.72358704]
[71.92594910 205.26220703]
[67.07186890 219.45507812]
[62.21778488 233.64796448]
[57.83395767 247.99307251]
[53.92515182 262.47482300]
[50.01634979 276.95657349]
[46.10754395 291.43832397]
[42.19873810 305.92010498]
[38.60900497 320.48422241]
[35.34007263 335.12368774]
[32.07114029 349.76315308]
[28.80220604 364.40261841]
[26.01738739 379.14184570]
[23.71970558 393.96484375]
[21.42202187 408.78781128]
[19.28730011 423.63513184]
[17.47924995 438.52575684]
[15.83487320 453.43536377]
[14.19049549 468.34494019]
[12.54611874 483.25454712]
[18.72394180 497.81976318]
[9.63804436 509.62210083]
[7.99366760 524.53167725]
[6.51316261 539.45843506]
[5.19670773 554.40057373]
[11.69299889 568.82653809]
[2.86856198 580.82568359]
[1.55210710 595.76776123]
[0.23565216 610.70989990]
[-1.08080268 625.65203857]
[10.09716511 636.58758545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 141]
[7 140]
[8 139]
[9 138]
[11 136]
[12 135]
[14 134]
[15 133]
[17 131]
[18 130]
[19 129]
[20 128]
[22 127]
[24 126]
[25 125]
[26 124]
[30 123]
[31 122]
[32 121]
[33 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[44 114]
[45 113]
[46 112]
[48 110]
[49 109]
[50 108]
[51 107]
[56 86]
[57 85]
[58 84]
[60 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
