%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGUUGGCGUCGGAGCAACAGCUGCGCGGGCGGAGCAGAAAGCAAGUGAUUGCUUUCCUUUCCUCAUUUUUGGAAGCCCUGCCUAACACACAGCUGCACUGUACAUCCCAGUUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[117.46085358 624.46350098]
[127.08955383 611.63122559]
[126.31099701 596.65142822]
[125.53244019 581.67169189]
[124.75388336 566.69189453]
[123.97532654 551.71209717]
[123.19676971 536.73229980]
[122.41821289 521.75256348]
[121.63965607 506.77276611]
[118.10762787 500.17669678]
[121.04045868 491.39498901]
[110.09533691 481.35806274]
[109.48680878 466.15661621]
[120.08866882 454.74441528]
[111.49639130 446.12255859]
[111.11916351 433.55352783]
[119.71105957 423.82800293]
[119.71105957 408.82800293]
[119.71105957 393.82800293]
[108.77807617 377.96606445]
[118.80399323 360.57043457]
[118.02543640 345.59066772]
[117.24687958 330.61087036]
[116.46832275 315.63110352]
[115.68976593 300.65130615]
[114.91120911 285.67153931]
[106.52374268 273.36300659]
[113.53433228 259.17984009]
[100.71256256 243.09257507]
[110.26761627 224.00199890]
[108.32581329 209.12821960]
[106.38401031 194.25444031]
[104.44220734 179.38064575]
[102.50040436 164.50686646]
[100.55860138 149.63308716]
[91.23881531 138.01452637]
[97.12452698 123.32885742]
[95.18272400 108.45507812]
[76.10969543 111.98428345]
[56.60607147 94.63534546]
[48.49645996 82.01654053]
[40.38684845 69.39774323]
[32.27723694 56.77893829]
[24.16762352 44.16013336]
[16.05801010 31.54133224]
[7.94839859 18.92252922]
[-0.16121358 6.30372572]
[-14.97736073 -0.72577149]
[-16.02783012 -17.09123993]
[-2.23198915 -25.95728874]
[12.21818352 -18.20328712]
[12.45758915 -1.80588651]
[20.56720161 10.81291676]
[28.67681313 23.43171883]
[36.78642654 36.05052185]
[44.89603806 48.66932678]
[53.00564957 61.28812790]
[61.11526489 73.90692902]
[69.22487640 86.52573395]
[76.71476746 86.13645935]
[91.69454956 85.35789490]
[99.18444061 84.96862030]
[105.94219208 71.57710266]
[112.69995117 58.18558502]
[119.45770264 44.79406738]
[112.23982239 31.05791473]
[114.50765991 15.70745754]
[125.38917542 4.64525700]
[140.70021057 2.12495685]
[154.55334473 9.11566353]
[161.62179565 22.92930603]
[159.18757629 38.25426102]
[148.18669128 49.19776535]
[132.84922791 51.55182266]
[126.09146881 64.94333649]
[119.33370972 78.33485413]
[112.57595825 91.72637177]
[110.05650330 106.51327515]
[111.99830627 121.38705444]
[121.45698547 134.06948853]
[115.43238068 147.69128418]
[117.37418365 162.56506348]
[119.31598663 177.43884277]
[121.25778961 192.31263733]
[123.19959259 207.18641663]
[125.14139557 222.06019592]
[133.49925232 226.87303162]
[138.56777954 234.91471863]
[139.28303528 244.25430298]
[135.60859680 252.71934509]
[128.51411438 258.40130615]
[136.95727539 271.78128052]
[129.89099121 284.89297485]
[130.66955566 299.87277222]
[131.44810486 314.85253906]
[132.22666931 329.83233643]
[133.00521851 344.81210327]
[133.78378296 359.79190063]
[142.38201904 366.69943237]
[145.62637329 377.00912476]
[142.65710449 387.17123413]
[134.71105957 393.82800293]
[134.71105957 408.82800293]
[134.71105957 423.82800293]
[144.30059814 439.48223877]
[135.08360291 454.35501099]
[146.26351929 465.20153809]
[146.44482422 480.41409302]
[136.03540039 491.00558472]
[136.61943054 505.99420166]
[137.39799500 520.97399902]
[138.17654419 535.95379639]
[138.95510864 550.93353271]
[139.73367310 565.91333008]
[140.51222229 580.89312744]
[141.29078674 595.87286377]
[142.06933594 610.85266113]
[152.97645569 622.61761475]
[150.43634033 638.45831299]
[136.39755249 646.22314453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[4 115]
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[11 109]
[14 106]
[17 104]
[18 103]
[19 102]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[28 91]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[37 79]
[38 78]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[62 77]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
