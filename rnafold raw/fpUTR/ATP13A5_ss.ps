%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGCGCCUGGGAAGAGCAAUCACAAGUUGUGACGAUUCCAAGUUCACAGAAGCCCAAGGGAUUUUGACAUUUCUCCAAGGAGUUAGCCAGAAGAGAUCCUCGCCGGUUGAGUUCAG\
) } def
/len { sequence length } bind def

/coor [
[106.14556885 127.91755676]
[97.05020905 127.66989899]
[88.73883820 124.61362457]
[82.02947235 119.21398926]
[77.52928162 112.15771484]
[65.52072906 122.45845032]
[51.52013397 117.37588501]
[36.81320190 120.32650757]
[24.80464745 130.62724304]
[10.80404949 125.54467773]
[-3.90288091 128.49530029]
[-18.60981178 131.44592285]
[-33.31674194 134.39656067]
[-48.02367401 137.34718323]
[-61.48269653 149.82864380]
[-77.87788391 143.72311401]
[-91.00274658 156.55551147]
[-107.55338287 150.88488770]
[-122.08409882 154.60755920]
[-136.61482239 158.33023071]
[-151.14553833 162.05291748]
[-165.67623901 165.77558899]
[-175.05447388 178.79206848]
[-191.08476257 179.43156433]
[-201.47007751 167.20352173]
[-198.24366760 151.48825073]
[-183.88056946 144.34115601]
[-169.39892578 151.24487305]
[-154.86820984 147.52220154]
[-140.33749390 143.79951477]
[-125.80677795 140.07684326]
[-111.27606201 136.35417175]
[-104.78453064 126.05387878]
[-92.61228943 122.88593292]
[-81.21569824 129.09919739]
[-74.45452881 118.97384644]
[-62.20291138 116.12831116]
[-50.97429657 122.64025116]
[-36.26736832 119.68962097]
[-21.56043625 116.73899841]
[-6.85350609 113.78837585]
[7.85342455 110.83774567]
[18.81003952 100.74805450]
[33.86257553 105.61957550]
[48.56950760 102.66895294]
[59.52612305 92.57926178]
[74.57865906 97.45078278]
[85.08477783 75.61365509]
[111.52407837 70.55146027]
[110.73245239 55.57236481]
[109.94081879 40.59326553]
[109.14919281 25.61417007]
[108.35755920 10.63507462]
[99.90273285 -2.73752737]
[106.95756531 -15.85540104]
[106.16593933 -30.83449745]
[96.77947235 -44.28166580]
[103.97594452 -59.01743317]
[120.35224152 -59.88290405]
[129.06182861 -45.98775482]
[121.14503479 -31.62612724]
[121.93666077 -16.64703178]
[130.33486938 -4.34583473]
[123.33665466 9.84344387]
[124.12828827 24.82254028]
[124.91991425 39.80163574]
[125.71154785 54.78073120]
[126.50318146 69.75982666]
[126.15535736 54.76386261]
[132.13011169 41.00514603]
[143.32528687 31.02174568]
[157.67568970 26.65530205]
[172.53411865 28.71129227]
[185.15963745 36.81044769]
[193.22320557 49.45871735]
[195.23736572 64.32287598]
[190.83053589 78.66093445]
[180.81565857 89.82794952]
[167.04017639 95.76394653]
[152.04524231 95.37390900]
[138.59938049 88.73170471]
[151.84565735 95.76988983]
[165.09193420 102.80808258]
[180.90910339 102.45059967]
[188.51792908 115.25508881]
[201.76420593 122.29327393]
[215.01048279 129.33146667]
[228.25675964 136.36965942]
[241.50305176 143.40783691]
[254.74932861 150.44602966]
[266.71975708 143.47026062]
[280.46533203 143.35411072]
[292.36233521 150.02037048]
[299.32797241 161.61804199]
[299.61880493 175.03495789]
[312.67468262 182.42034912]
[325.73056030 189.80574036]
[342.49377441 192.34161377]
[344.69754028 209.15171814]
[329.15441895 215.92285156]
[318.34515381 202.86161804]
[305.28927612 195.47622681]
[292.23339844 188.09083557]
[277.58572388 195.37289429]
[261.31314087 192.50532532]
[249.80891418 180.41537476]
[247.71113586 163.69230652]
[234.46485901 156.65411377]
[221.21858215 149.61593628]
[207.97230530 142.57774353]
[194.72601318 135.53955078]
[181.47973633 128.50137329]
[166.61003113 129.36227417]
[158.05374146 116.05435944]
[144.80746460 109.01616669]
[131.56118774 101.97798157]
[128.59907532 111.60469055]
[122.86239624 119.58556366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[7 45]
[8 44]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[16 35]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[55 62]
[56 61]
[81 116]
[82 115]
[83 114]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
