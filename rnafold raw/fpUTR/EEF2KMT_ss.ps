%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCCUGGGCCCGCCCCCUCUUCAGUCCAGGCCGGGCUUCCGCCCGGUCUGCCGGCAACGCUGCGGCCCCGCCCACGUC\
) } def
/len { sequence length } bind def

/coor [
[83.05381012 346.96844482]
[67.89139557 345.21801758]
[54.99460602 337.05496216]
[46.92410660 324.10003662]
[45.28229904 308.92547607]
[50.39516830 294.54418945]
[61.24754715 283.81161499]
[75.68469238 278.85867310]
[77.40494537 263.95764160]
[79.12519836 249.05659485]
[80.84544373 234.15556335]
[82.56569672 219.25453186]
[71.58168793 206.67358398]
[73.00008392 189.69726562]
[86.43657684 178.68954468]
[87.58481598 163.73355103]
[88.73305511 148.77757263]
[75.34628296 143.57051086]
[63.98909760 134.77656555]
[55.59645844 123.11969757]
[50.85927963 109.55953217]
[50.16754150 95.21238708]
[53.57819366 81.25937653]
[60.81045914 68.84915924]
[71.26894379 59.00339508]
[84.09268188 52.53261948]
[98.22595978 49.96953201]
[99.94621277 35.06850052]
[101.66646576 20.16746712]
[102.81470490 5.21148062]
[103.38924408 -9.77751255]
[103.96378326 -24.76650429]
[104.53832245 -39.75549698]
[105.11286926 -54.74449158]
[105.68740845 -69.73348236]
[106.26194763 -84.72247314]
[106.83648682 -99.71147156]
[107.41103363 -114.70046234]
[107.98557281 -129.68945312]
[99.86154938 -143.93487549]
[108.36891937 -157.95475769]
[124.75602722 -157.32661438]
[132.16522217 -142.69665527]
[122.97456360 -129.11491394]
[122.40002441 -114.12592316]
[121.82548523 -99.13692474]
[121.25093842 -84.14793396]
[120.67639923 -69.15894318]
[120.10186005 -54.16994858]
[119.52732086 -39.18095779]
[118.95277405 -24.19196320]
[118.37823486 -9.20297146]
[117.80369568 5.78602171]
[120.51703644 10.00051975]
[120.42678833 16.01021767]
[116.56749725 21.88771820]
[114.84724426 36.78874969]
[113.12699127 51.68978119]
[127.29712677 58.03498840]
[138.84173584 68.41653442]
[146.65040588 81.83588409]
[149.97207642 97.00231934]
[148.48727417 112.45708466]
[142.33880615 126.71368408]
[132.11804199 138.40086365]
[118.80805206 146.39453125]
[103.68904114 149.92581177]
[102.54080200 164.88179016]
[101.39256287 179.83778381]
[111.36988068 189.11143494]
[114.06312561 202.26394653]
[108.69307709 214.35427856]
[97.46672821 220.97479248]
[95.74647522 235.87582397]
[94.02622986 250.77684021]
[92.30597687 265.67788696]
[90.58572388 280.57891846]
[103.51455688 288.69113159]
[111.63601685 301.61416626]
[113.33756256 316.78213501]
[108.28137207 331.18344116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[15 69]
[16 68]
[17 67]
[27 58]
[28 57]
[29 56]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
