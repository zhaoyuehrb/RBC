%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCCACAGUGGUGAGGUCACAGCCCCUUGGAGCCCUCCCUCUUCCCACCCCUCCCGCUCCCGGGUCUCCUUUGGCCUGGGGUAACCCGAGGUGCAGAGCUGAGAAUGAGGCGAUUUCGGAGGAUGGAGAAAUAGCCCCGAGUCCCGUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[108.22599030 250.44601440]
[92.73686981 249.51509094]
[80.77450562 239.63168335]
[76.93869019 224.59619141]
[82.70435333 210.19004822]
[95.85449219 201.95272827]
[96.75440979 186.97975159]
[97.65432739 172.00677490]
[98.55424500 157.03379822]
[99.45415497 142.06080627]
[79.56729889 133.75444031]
[67.57530975 117.50830078]
[53.20228577 121.79969788]
[38.82925797 126.09109497]
[24.45623016 130.38249207]
[11.35381413 145.65361023]
[-7.25177860 140.50975037]
[-21.44160080 145.37277222]
[-35.63142014 150.23579407]
[-49.82124329 155.09881592]
[-51.80330658 168.97631836]
[-59.54449081 180.58381653]
[-71.48066711 187.67909241]
[-85.24423981 188.92127991]
[-98.13368225 184.12403870]
[-107.64383698 174.28077698]
[-121.92812347 178.85890198]
[-136.16589355 183.57971191]
[-150.35571289 188.44273376]
[-163.37910461 199.29757690]
[-177.41496277 189.78805542]
[-172.16259766 173.66821289]
[-155.21873474 174.25291443]
[-141.02891541 169.38989258]
[-135.69104004 164.21736145]
[-126.50624847 164.57463074]
[-112.22196198 159.99650574]
[-109.20019531 144.14878845]
[-98.54952240 131.90638733]
[-83.09503174 126.66028595]
[-67.00893402 129.92639160]
[-54.68426514 140.90899658]
[-40.49444199 136.04597473]
[-26.30462074 131.18295288]
[-12.11479950 126.31993103]
[-8.43256092 116.71499634]
[0.12529971 110.61934662]
[10.84652996 110.26358032]
[20.16483307 116.00946045]
[34.53786087 111.71806335]
[48.91088867 107.42666626]
[63.28391266 103.13526917]
[62.35959625 95.44608307]
[63.07279587 87.51695251]
[65.48051453 79.70158386]
[69.56252289 72.36623383]
[75.21877289 65.87273407]
[66.25693512 53.84420776]
[57.29510117 41.81568146]
[48.33326340 29.78715134]
[33.06696701 23.79780769]
[30.88862991 7.54398108]
[44.03913498 -2.25378442]
[58.99037552 4.48361254]
[60.36179352 20.82531548]
[69.32363129 32.85384369]
[78.28546906 44.88237000]
[87.24729919 56.91090012]
[102.13932037 55.11430740]
[107.98339844 41.29957962]
[113.82747650 27.48484993]
[119.67155457 13.67012024]
[125.23805237 -0.25877631]
[130.52471924 -14.29626369]
[135.81140137 -28.33375168]
[141.09808350 -42.37123871]
[146.38475037 -56.40872574]
[151.53073120 -70.49840546]
[156.53547668 -84.63886261]
[161.54020691 -98.77931976]
[166.54495239 -112.91977692]
[163.85545349 -128.51071167]
[175.39582825 -137.92712402]
[180.40057373 -152.06758118]
[185.40531921 -166.20803833]
[184.99017334 -183.15689087]
[201.16174316 -188.24772644]
[210.53036499 -174.11743164]
[199.54577637 -161.20329285]
[194.54103088 -147.06283569]
[189.53628540 -132.92237854]
[192.58377075 -118.34286499]
[180.68540955 -107.91503143]
[175.68066406 -93.77457428]
[170.67593384 -79.63411713]
[165.67118835 -65.49365997]
[166.40826416 -58.09740067]
[160.42224121 -51.12204742]
[155.13555908 -37.08456039]
[149.84889221 -23.04707336]
[144.56221008 -9.00958633]
[139.27554321 5.02790070]
[140.42039490 9.71703625]
[138.59182739 15.17238808]
[133.48628235 19.51419830]
[127.64221191 33.32892990]
[121.79813385 47.14365768]
[115.95405579 60.95838547]
[128.42259216 68.87026978]
[137.39361572 80.59004211]
[141.77104187 94.67693329]
[141.02308655 109.40150452]
[135.24685669 122.95798492]
[148.18692017 130.54446411]
[157.22811890 132.20121765]
[161.30783081 138.41441345]
[174.09352112 146.25828552]
[186.87919617 154.10215759]
[199.66487122 161.94604492]
[208.67111206 163.78337097]
[212.62570190 170.07695007]
[225.25187683 178.17507935]
[237.87803650 186.27320862]
[246.84571838 188.29037476]
[250.67358398 194.66181946]
[263.13519287 203.01097107]
[278.90667725 204.26432800]
[285.17349243 217.77639771]
[297.63513184 226.12554932]
[313.08905029 222.81617737]
[326.31109619 231.47367859]
[329.45690918 246.96173096]
[320.66006470 260.09152222]
[305.13964844 263.07339478]
[292.10357666 254.13824463]
[289.28598022 238.58715820]
[276.82437134 230.23800659]
[261.94421387 229.58183289]
[254.78604126 215.47257996]
[242.32443237 207.12342834]
[229.77990723 198.89938354]
[217.15373230 190.80125427]
[204.52755737 182.70312500]
[191.82099915 174.73171997]
[179.03532410 166.88784790]
[166.24963379 159.04396057]
[153.46395874 151.20008850]
[140.60044861 143.48452759]
[127.66037750 135.89805603]
[114.42713928 142.96072388]
[113.52722168 157.93370056]
[112.62730408 172.90669250]
[111.72739410 187.87966919]
[110.82747650 202.85264587]
[122.89634705 212.60569763]
[126.89505005 227.59869385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[12 52]
[13 51]
[14 50]
[15 49]
[17 45]
[18 44]
[19 43]
[20 42]
[26 37]
[27 36]
[28 34]
[29 33]
[57 68]
[58 67]
[59 66]
[60 65]
[69 108]
[70 107]
[71 106]
[72 105]
[73 102]
[74 101]
[75 100]
[76 99]
[77 98]
[78 96]
[79 95]
[80 94]
[81 93]
[83 91]
[84 90]
[85 89]
[113 149]
[114 148]
[116 147]
[117 146]
[118 145]
[119 144]
[121 143]
[122 142]
[123 141]
[125 140]
[126 139]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
