%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCAGCUUGGAGAGCCAGCCCCAUCGGGGUUCCCCGCCGCCGGAAGCGGAAAUAGCACCGGGCGCCGCCACAGUAGCUGUAACUGCCACCGCG\
) } def
/len { sequence length } bind def

/coor [
[39.89672852 123.03244019]
[25.09707832 125.47586823]
[10.29742908 127.91930389]
[5.97015667 131.50205994]
[1.17214155 132.79203796]
[-3.08960128 132.01986694]
[-6.06667280 129.80183411]
[-21.03455734 130.78288269]
[-31.43130684 142.38226318]
[-46.62484360 143.16395569]
[-57.61899948 133.18075562]
[-72.58688354 134.16180420]
[-87.55476379 135.14285278]
[-77.97824860 146.68800354]
[-79.07018280 161.64819336]
[-90.22161102 171.68043518]
[-105.21358490 171.18989563]
[-115.68536377 160.45016479]
[-115.79702759 145.45057678]
[-105.48567200 134.55586243]
[-120.35734558 132.59796143]
[-135.22901917 130.64007568]
[-150.10069275 128.68217468]
[-164.97236633 126.72428131]
[-181.46519470 130.65147400]
[-189.80458069 115.89034271]
[-177.92889404 103.79058075]
[-163.01448059 111.85260773]
[-148.14280701 113.81050110]
[-133.27113342 115.76839447]
[-118.39945221 117.72628784]
[-103.52777863 119.68418121]
[-88.53581238 120.17497253]
[-73.56793213 119.19392395]
[-58.60004425 118.21287537]
[-49.00301743 106.88006592]
[-33.83742905 105.67192078]
[-22.01560402 115.81500244]
[-7.04771948 114.83395386]
[7.85399723 113.11965179]
[22.65364647 110.67622375]
[37.45329666 108.23278809]
[52.11522675 105.06611633]
[66.60411072 101.18383026]
[81.09300232 97.30154419]
[88.42846680 84.80606079]
[102.42427063 81.05589294]
[115.02471161 88.20957184]
[129.51359558 84.32728577]
[144.00248718 80.44499969]
[158.49137878 76.56271362]
[166.42543030 63.15791702]
[181.17453003 59.42712784]
[193.90505981 67.07364655]
[208.39393616 63.19136047]
[222.88282776 59.30907440]
[237.37171936 55.42678833]
[251.86061096 51.54450226]
[266.28402710 47.42567444]
[280.63812256 43.07140350]
[291.59805298 31.66128922]
[306.02331543 35.37089157]
[320.30426025 30.78234673]
[334.50820923 25.96075439]
[348.71215820 21.13916206]
[361.76718140 10.32237911]
[375.77523804 19.87281990]
[370.47583008 35.97725296]
[353.53375244 35.34311676]
[339.32980347 40.16470718]
[325.12585449 44.98629761]
[319.69900513 50.21873856]
[310.37759399 49.72499847]
[300.44436646 60.82366562]
[284.99240112 57.42550659]
[270.63830566 61.77977753]
[265.04315186 66.83185577]
[255.74288940 66.03338623]
[241.25399780 69.91567230]
[226.76512146 73.79795837]
[212.27622986 77.68024445]
[197.78733826 81.56253052]
[190.58563232 94.54987335]
[175.94715881 98.69346619]
[162.37365723 91.05159760]
[147.88478088 94.93388367]
[133.39588928 98.81616974]
[118.90699768 102.69845581]
[111.57153320 115.19393921]
[97.57572937 118.94410706]
[84.97528839 111.79042816]
[70.48639679 115.67271423]
[55.99751282 119.55500031]
[52.04224777 123.54465485]
[47.39377594 125.29870605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[7 39]
[8 38]
[11 35]
[12 34]
[13 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[43 93]
[44 92]
[45 91]
[48 88]
[49 87]
[50 86]
[51 85]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 76]
[60 75]
[62 73]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
