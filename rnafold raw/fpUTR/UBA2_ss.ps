%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCGCUUCCGGCCGCGGCUCGGUUCUCCCGCCUCCGCCUCCGCCGCGGCUCGUGGUUGUCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[93.22535706 242.19264221]
[92.40676880 226.90904236]
[98.79512787 213.00050354]
[110.92243958 203.66311646]
[108.28141022 188.89744568]
[98.42411041 177.73129272]
[103.61076355 162.78440857]
[100.96974182 148.01873779]
[98.32871246 133.25306702]
[95.68768311 118.48740387]
[87.46010590 114.25241852]
[82.21207428 106.63098145]
[81.19053650 97.43399811]
[84.63822174 88.84670258]
[91.73593903 82.90949249]
[91.07244110 67.92417145]
[90.40894318 52.93885422]
[89.74543762 37.95353317]
[89.08193970 22.96821594]
[88.41844177 7.98289728]
[87.75493622 -7.00242090]
[87.09143829 -21.98773956]
[86.42794037 -36.97305679]
[73.36695099 -48.37554932]
[72.45095825 -65.35542297]
[83.75743103 -77.60655212]
[82.43173218 -92.54785156]
[81.10602570 -107.48915100]
[66.80487061 -112.82205200]
[56.24003220 -123.83780670]
[51.50915527 -138.34922791]
[53.55157089 -153.47508240]
[61.96174622 -166.21209717]
[75.06983948 -174.03134155]
[90.27323151 -175.38031006]
[104.55327606 -169.99113464]
[115.07465363 -158.93385315]
[119.74834442 -144.40391541]
[117.64638519 -129.28622437]
[109.18611145 -116.58242035]
[96.04733276 -108.81485748]
[97.37303162 -93.87355042]
[98.69873047 -78.93225098]
[109.77285004 -71.98976135]
[114.80806732 -59.71549988]
[111.70945740 -46.61345673]
[101.41326141 -37.63655853]
[102.07675934 -22.65123940]
[102.74025726 -7.66592121]
[103.40375519 7.31939697]
[104.06726074 22.30471611]
[104.73075867 37.29003525]
[105.39425659 52.27535248]
[106.05776215 67.26067352]
[106.72126007 82.24598694]
[118.86765289 97.90431213]
[110.45335388 115.84637451]
[113.09437561 130.61204529]
[115.73540497 145.37771606]
[118.37643433 160.14338684]
[128.42263794 172.36567688]
[123.04708099 186.25640869]
[125.68811035 201.02207947]
[140.30020142 205.57679749]
[151.11367798 216.40856934]
[155.64369202 231.02833557]
[152.84927368 246.07658386]
[143.37254333 258.09533691]
[129.39122009 264.32275391]
[114.11808014 263.32788086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[7 60]
[8 59]
[9 58]
[10 57]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[26 43]
[27 42]
[28 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
