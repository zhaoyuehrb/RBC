%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCCCAGUGCCCGCGCGCGCCGCCAGGCUCGCAAGCACCGCGUAGGCCAGCUGGCCGGAUCCCGCCGUCUGUC\
) } def
/len { sequence length } bind def

/coor [
[120.08039856 119.82569122]
[106.98921967 112.50304413]
[93.00739288 112.50115204]
[85.68813324 100.58812714]
[72.59695435 93.26548767]
[59.50578308 85.94284058]
[43.68458176 85.95861816]
[36.35408401 72.99277496]
[20.53288651 73.00855255]
[13.20238781 60.04270935]
[0.11121183 52.72006607]
[-12.97996426 45.39742279]
[-26.07114029 38.07477951]
[-36.97883987 43.59347534]
[-49.06834030 43.02999115]
[-59.20938492 36.65018082]
[-64.83531189 26.21032524]
[-64.59227753 14.47529030]
[-77.04302979 6.10996008]
[-89.49378204 -2.25537014]
[-105.26361847 -3.52922201]
[-111.51289368 -17.04942513]
[-123.96364594 -25.41475487]
[-136.41439819 -33.78008652]
[-152.80349731 -34.35392380]
[-160.26112366 -48.95925903]
[-151.11550903 -62.57137680]
[-134.77487183 -61.18729401]
[-128.04907227 -46.23083878]
[-115.59831238 -37.86550903]
[-103.14756012 -29.50017738]
[-88.26828003 -28.82467079]
[-81.12844849 -14.70612335]
[-68.67769623 -6.34079313]
[-56.22694397 2.02453685]
[-38.76192856 -2.70549011]
[-22.96967697 6.74845648]
[-18.74849701 24.98360443]
[-5.65732145 32.30624771]
[7.43385506 39.62889099]
[20.52503204 46.95153427]
[35.40986252 46.41199493]
[43.67672729 59.90159988]
[58.56155777 59.36206055]
[66.82842255 72.85166931]
[79.91960144 80.17430878]
[93.01078033 87.49695587]
[106.99260712 87.49884796]
[114.31186676 99.41187286]
[127.40304565 106.73451233]
[140.91757202 113.24276733]
[154.80485535 118.91226959]
[168.69215393 124.58177185]
[184.39305115 122.63443756]
[193.25177002 134.60826111]
[207.13905334 140.27775574]
[221.02633667 145.94726562]
[234.91363525 151.61676025]
[244.33111572 152.00462341]
[249.24411011 157.81117249]
[262.88858032 164.04240417]
[279.80810547 165.12226868]
[283.45422363 181.67950439]
[268.55340576 189.76663208]
[256.65734863 177.68687439]
[243.01287842 171.45565796]
[229.24412537 165.50404358]
[215.35684204 159.83454895]
[201.46955872 154.16505432]
[187.58226013 148.49554443]
[172.87467957 150.84840393]
[163.02264404 138.46905518]
[149.13536072 132.79956055]
[135.24807739 127.13005829]
[131.65330505 128.35969543]
[127.24945831 127.71823883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[4 47]
[5 46]
[6 45]
[8 43]
[10 41]
[11 40]
[12 39]
[13 38]
[18 35]
[19 34]
[20 33]
[22 31]
[23 30]
[24 29]
[51 74]
[52 73]
[53 72]
[55 70]
[56 69]
[57 68]
[58 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
