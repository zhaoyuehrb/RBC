%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAACUGCAGUUGCUGCUGCAGCUGAGGUACAGCGGCGGUUUCUGAGGUUCUUCACUCGCGACUGACGGAGCUGCGGUGGCGUCUCCACACGCAACC\
) } def
/len { sequence length } bind def

/coor [
[197.66842651 262.28036499]
[209.42150879 252.96020508]
[224.42222595 253.11279297]
[214.86087036 241.55509949]
[200.05438232 240.41343689]
[190.19316101 228.82849121]
[191.49102783 213.30581665]
[181.92967224 201.74812317]
[172.36831665 190.19041443]
[162.62658691 178.78433228]
[152.70690918 167.53266907]
[142.78723145 156.28099060]
[132.86755371 145.02932739]
[122.94787598 133.77766418]
[113.02819824 122.52600098]
[103.10852051 111.27433777]
[88.86203766 121.62146759]
[65.29689026 112.68336487]
[51.03104019 108.04811096]
[36.76519394 103.41285706]
[22.49934578 98.77760315]
[8.23349762 94.14234924]
[-7.28220367 97.23647308]
[-16.99560165 85.94491577]
[-31.26144981 81.30966187]
[-45.52729797 76.67440796]
[-59.79314423 72.03915405]
[-74.68286133 78.01208496]
[-88.56460571 69.96989441]
[-90.78948212 54.08186340]
[-79.65077209 42.53593063]
[-63.69312286 44.18914795]
[-55.15789032 57.77330399]
[-40.89204025 62.40855789]
[-26.62619400 67.04381561]
[-12.36034679 71.67906952]
[2.13496566 68.25340271]
[12.86875248 79.87650299]
[27.13459969 84.51175690]
[41.40044785 89.14701080]
[55.66629410 93.78226471]
[69.93214417 98.41751862]
[76.44687653 94.70157623]
[69.01519775 81.67198944]
[82.04490662 74.24051666]
[89.47634888 87.26969910]
[95.99108887 83.55375671]
[99.26323700 68.91500854]
[102.53538513 54.27625656]
[92.17313385 42.72622299]
[90.61232758 27.28784370]
[98.45313263 13.89749527]
[112.68059540 7.70403814]
[127.82396698 11.08898354]
[138.06031799 22.75074959]
[139.45355225 38.20515060]
[131.46795654 51.50965500]
[117.17414093 57.54840469]
[113.90198517 72.18715668]
[110.62983704 86.82590485]
[114.36019135 101.35465240]
[124.27986908 112.60632324]
[134.19953918 123.85798645]
[144.11921692 135.10964966]
[154.03889465 146.36131287]
[163.95857239 157.61299133]
[173.87825012 168.86465454]
[182.05432129 173.33787537]
[183.92601013 180.62905884]
[193.48736572 192.18675232]
[203.04873657 203.74446106]
[218.53964233 205.37823486]
[228.07157898 217.23558044]
[226.41856384 231.99374390]
[235.97991943 243.55143738]
[246.75181580 253.99012756]
[258.60415649 263.18374634]
[270.45648193 272.37734985]
[282.45175171 281.38363647]
[294.58700562 290.20040894]
[306.72225952 299.01721191]
[318.85751343 307.83398438]
[334.86419678 306.75454712]
[345.58135986 318.69284058]
[342.78765869 334.49078369]
[328.62622070 342.02954102]
[313.96047974 335.52606201]
[310.04074097 319.96923828]
[297.90548706 311.15246582]
[285.77020264 302.33566284]
[273.63494873 293.51889038]
[266.24063110 292.10873413]
[261.26287842 284.22967529]
[249.41053772 275.03607178]
[237.55821228 265.84246826]
[238.18238831 280.82946777]
[229.23684692 292.87011719]
[214.70774841 296.59912109]
[201.06925964 290.35479736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[7 71]
[8 70]
[9 69]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[24 36]
[25 35]
[26 34]
[27 33]
[47 60]
[48 59]
[49 58]
[76 95]
[77 94]
[78 93]
[79 91]
[80 90]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
