%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCCGGAAGUGGUCCCUGUAGAACCACUGUGGCACCGCUACUCCGUGCCGCGCCCGUCGAGCAUUGCGUUGCUGCAUUGCGCCCCACCGACUCCACU\
) } def
/len { sequence length } bind def

/coor [
[132.30851746 184.27929688]
[126.83873749 170.31213379]
[121.36896515 156.34498596]
[115.89919281 142.37782288]
[110.42942047 128.41065979]
[83.00298309 120.72194672]
[76.94192505 96.39825439]
[63.65175629 89.44329834]
[50.36158752 82.48834991]
[28.64786530 90.71161652]
[7.91082907 74.83683014]
[-6.56794643 78.75665283]
[-21.04672241 82.67648315]
[-35.52549744 86.59631348]
[-50.00427246 90.51614380]
[-64.48304749 94.43597412]
[-78.89911652 98.58049774]
[-86.11356354 112.64205170]
[-101.18334961 117.40408325]
[-115.16784668 110.04137421]
[-119.77028656 94.92207336]
[-112.26013184 81.01621246]
[-97.09301758 76.57387543]
[-83.26733398 84.23062897]
[-77.68686676 79.18247986]
[-68.40287781 79.95719910]
[-53.92410278 76.03736877]
[-39.44532776 72.11753845]
[-24.96655083 68.19770813]
[-10.48777580 64.27787781]
[3.99100018 60.35805130]
[10.10625458 46.66120148]
[3.35882854 33.26447678]
[-3.38859701 19.86775208]
[-10.13602257 6.47102737]
[-16.88344765 -6.92569780]
[-23.63087463 -20.32242393]
[-30.37829971 -33.71914673]
[-45.73170090 -35.22800064]
[-57.81786728 -44.81591415]
[-62.78015137 -59.42341995]
[-59.03510284 -74.38932037]
[-47.77775574 -84.93804932]
[-32.60028458 -87.70354462]
[-18.34576988 -81.80334473]
[-9.56277180 -69.12018585]
[-9.05391598 -53.70121765]
[-16.98157501 -40.46657562]
[-10.23414898 -27.06984901]
[-3.48672295 -13.67312336]
[3.26070261 -0.27639833]
[10.00812817 13.12032700]
[16.75555420 26.51705170]
[23.50297928 39.91377640]
[42.72279358 40.62174606]
[55.71832275 52.83706284]
[57.31653976 69.19818115]
[70.60671234 76.15312958]
[83.89688110 83.10808563]
[92.05139923 76.58956909]
[102.78457642 74.04051971]
[114.15991974 76.43300629]
[123.90672302 83.79901886]
[129.87109375 95.13626099]
[144.72439575 93.04353333]
[159.57769775 90.95079803]
[172.16342163 81.36383820]
[185.84570312 87.24981689]
[200.69898987 85.15708160]
[215.55229187 83.06435394]
[224.85777283 70.29002380]
[240.48330688 67.91974640]
[253.15853882 77.35977173]
[255.36347961 93.00949097]
[245.78997803 105.58421326]
[230.11782837 107.62357330]
[217.64501953 97.91765594]
[202.79171753 100.01038361]
[187.93843079 102.10311127]
[176.41510010 111.54039001]
[161.67042542 105.80410004]
[146.81712341 107.89682770]
[131.96382141 109.98956299]
[124.39658356 122.94088745]
[129.86634827 136.90805054]
[135.33613586 150.87521362]
[140.80590820 164.84236145]
[146.27568054 178.80952454]
[161.49061584 179.46188354]
[175.12191772 186.25212097]
[184.80789185 198.00378418]
[188.87037659 212.68084717]
[186.60552979 227.74040222]
[178.40573120 240.57330322]
[165.69166565 248.95616150]
[150.66610718 251.43659973]
[135.93232727 247.58486938]
[124.04305267 238.06831360]
[117.05816650 224.53570557]
[116.18783569 209.33168030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[7 59]
[8 58]
[9 57]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 24]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[64 83]
[65 82]
[66 81]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
