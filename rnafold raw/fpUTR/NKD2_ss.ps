%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCGGCCCAUGCGGCCCCCGCGGGCUCCCGGCCCCGGCUUCAGAACUCAGCCCUGCACCUGAGCGCGGGGCCCGGCGGGGCGUGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[76.01860046 368.47930908]
[63.87564468 377.99517822]
[48.51354599 379.41271973]
[34.83429337 372.27957153]
[27.20289040 358.87191772]
[28.05449104 343.46807861]
[37.11734772 330.98336792]
[51.49954224 325.40161133]
[54.39611053 310.68392944]
[57.29267883 295.96624756]
[59.95054245 281.20361328]
[57.88276291 273.95718384]
[62.69448471 265.96286011]
[65.59105682 251.24519348]
[68.48762512 236.52751160]
[63.35364914 222.54568481]
[73.61019897 210.49935913]
[76.50676727 195.78169250]
[79.16462708 181.01904297]
[81.58309174 166.21530151]
[84.00155640 151.41154480]
[86.42002106 136.60778809]
[88.83848572 121.80404663]
[91.25695038 107.00028992]
[93.43537903 92.15931702]
[95.37319946 77.28501892]
[97.31101990 62.41071701]
[99.24884033 47.53641510]
[97.23141479 38.42644119]
[101.49782562 32.21480179]
[103.91629028 17.41105270]
[106.33474731 2.60730124]
[108.75321198 -12.19644928]
[110.93164062 -27.03742218]
[112.86946106 -41.91172409]
[106.97982025 -56.59581757]
[116.29649353 -68.21687317]
[110.40685272 -82.90096283]
[119.72352600 -94.52201843]
[121.66134644 -109.39631653]
[112.20984650 -119.15185547]
[110.19377899 -132.38655090]
[116.13559723 -144.16419983]
[127.63186646 -150.22453308]
[130.05033875 -165.02828979]
[132.46879578 -179.83203125]
[120.93648529 -190.07943726]
[116.79706573 -204.94110107]
[121.37140656 -219.67469788]
[133.19985962 -229.57879639]
[148.50799561 -231.49305725]
[162.41105652 -224.80661011]
[170.47262573 -211.65310669]
[170.12026978 -196.22976685]
[161.46644592 -183.45812988]
[147.27255249 -177.41357422]
[144.85408020 -162.60981750]
[142.43562317 -147.80607605]
[152.81990051 -134.68772888]
[150.55041504 -117.77316284]
[136.53564453 -107.45849609]
[134.59782410 -92.58419800]
[140.62608337 -78.96401215]
[131.17079163 -66.27904510]
[137.19905090 -52.65886307]
[127.74376678 -39.97389984]
[125.80594635 -25.09959984]
[128.10729980 -17.92391396]
[123.55696106 -9.77798557]
[121.13850403 5.02576494]
[118.72003937 19.82951546]
[116.30157471 34.63326645]
[114.12314606 49.47423935]
[112.18532562 64.34854126]
[110.24749756 79.22283936]
[108.30967712 94.09714508]
[110.50265503 102.02738190]
[106.06069946 109.41875458]
[103.64223480 124.22250366]
[101.22377014 139.02626038]
[98.80530548 153.83000183]
[96.38684082 168.63375854]
[93.96838379 183.43751526]
[95.68975067 192.60803223]
[91.22443390 198.67826843]
[88.32786560 213.39593506]
[93.25466156 228.43046570]
[83.20529938 239.42408752]
[80.30873108 254.14175415]
[77.41215515 268.85943604]
[74.75429535 283.62207031]
[76.47566223 292.79260254]
[72.01035309 298.86282349]
[69.11378479 313.58050537]
[66.21721649 328.29818726]
[77.41164398 338.91363525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 95]
[9 94]
[10 93]
[11 91]
[13 90]
[14 89]
[15 88]
[17 86]
[18 85]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[24 78]
[25 76]
[26 75]
[27 74]
[28 73]
[30 72]
[31 71]
[32 70]
[33 69]
[34 67]
[35 66]
[37 64]
[39 62]
[40 61]
[44 58]
[45 57]
[46 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
