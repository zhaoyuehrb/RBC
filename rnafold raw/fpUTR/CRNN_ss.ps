%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACCUGGUACUCCUCACACCACUUAACAGCCACUUGUUUCAUCCCACCUGGGCAUUAGGUUGACUUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[112.35009003 272.85879517]
[113.88471222 257.73550415]
[121.09434509 244.35307312]
[132.87957764 234.75219727]
[128.54409790 220.39241028]
[124.20861816 206.03262329]
[119.87314606 191.67282104]
[115.53766632 177.31303406]
[111.20218658 162.95323181]
[106.86671448 148.59344482]
[102.53123474 134.23365784]
[91.44557953 124.28591156]
[94.86396027 108.83841705]
[89.55909729 102.42954254]
[90.66120911 93.78585052]
[86.93086243 79.25710297]
[71.86195374 79.37402344]
[57.21185303 75.88304901]
[43.83114243 68.99133301]
[32.49563217 59.10334396]
[23.86138535 46.79711533]
[18.42674446 32.79049683]
[16.50356865 17.89923286]
[18.19934273 2.98949385]
[23.41118050 -11.07253265]
[31.83205414 -23.47094917]
[42.96887970 -33.48749542]
[56.17138290 -40.54314804]
[52.44103622 -55.07189560]
[48.71068573 -69.60064697]
[44.98033905 -84.12939453]
[41.24998856 -98.65814209]
[29.39576530 -109.98992920]
[33.54460907 -125.85558319]
[49.42854691 -129.93388367]
[60.70754623 -118.02942657]
[55.77873611 -102.38848877]
[59.50908661 -87.85974121]
[63.23943329 -73.33099365]
[66.96977997 -58.80224609]
[70.70013428 -44.27349854]
[85.66866302 -44.45093536]
[100.25344086 -41.03857422]
[113.60569000 -34.23054886]
[124.94729614 -24.41872215]
[133.61613464 -12.17016315]
[139.10476685 1.80564642]
[141.09008789 16.69790077]
[139.45240784 31.64150810]
[134.28260803 45.76734543]
[125.87711334 58.25280762]
[114.72091675 68.36971283]
[101.45960999 75.52674866]
[105.18995667 90.05549622]
[109.22375488 104.50293732]
[120.61950684 115.47778320]
[116.89102936 129.89817810]
[121.22650146 144.25796509]
[125.56198120 158.61776733]
[129.89746094 172.97755432]
[134.23294067 187.33734131]
[138.56840515 201.69714355]
[142.90388489 216.05693054]
[147.23936462 230.41671753]
[162.36857605 231.89164734]
[175.77935791 239.04841614]
[185.42666626 250.79566956]
[189.83937073 265.34204102]
[188.34454346 280.46926880]
[181.17013550 293.87063599]
[169.41020203 303.50250244]
[154.85806274 307.89605713]
[139.73277283 306.38131714]
[126.34086609 299.18930054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[13 55]
[15 54]
[16 53]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
