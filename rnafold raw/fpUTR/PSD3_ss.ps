%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAGAGCACGCGGCGCUGGCCGCCGGCACUCGCGCCCUGAGGCUGCGGCCCCGGAGCGCCCGGCGGCGGUUUCGGCGCGCGGCCGGGCUGGCGAUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[63.80376816 372.22344971]
[53.87796021 383.65835571]
[40.77580261 391.24862671]
[25.91851616 394.17092896]
[10.91771221 392.10824585]
[-2.59943604 385.28436279]
[-13.16668987 374.43948364]
[-19.63779068 360.74993896]
[-21.31080437 345.70068359]
[-18.00425339 330.92416382]
[-10.07680893 318.02322388]
[1.61162078 308.39724731]
[15.79316139 303.09039307]
[30.92950630 302.67834473]
[27.32894516 288.22546387]
[38.82150269 277.35202026]
[43.06724548 262.96545410]
[47.09522629 248.51638794]
[51.12320328 234.06732178]
[55.15118027 219.61825562]
[59.17916107 205.16920471]
[63.20713806 190.72013855]
[67.23511505 176.27107239]
[71.26309204 161.82202148]
[69.64846039 157.16436768]
[71.06494904 151.44122314]
[75.99520111 146.63613892]
[80.88824463 132.45663452]
[85.78128815 118.27714539]
[90.67433167 104.09764862]
[90.12229919 95.90931702]
[95.93522644 89.56763458]
[93.59432983 73.92056274]
[105.34198761 64.76404572]
[110.66105652 50.73880005]
[115.98013306 36.71355820]
[121.29920197 22.68831253]
[126.61827850 8.66306877]
[131.93734741 -5.36217451]
[131.22621155 -12.20983601]
[133.80209351 -17.51319885]
[138.02435303 -20.05748558]
[144.18054199 -33.73598480]
[150.33673096 -47.41448212]
[156.49291992 -61.09297943]
[162.64912415 -74.77147675]
[168.80531311 -88.44997406]
[174.96150208 -102.12847137]
[181.11769104 -115.80696869]
[179.72581482 -131.56683350]
[192.00489807 -139.99734497]
[198.16108704 -153.67584229]
[204.31727600 -167.35433960]
[200.47091675 -179.77996826]
[206.00932312 -191.10221863]
[217.42561340 -195.40768433]
[223.99212646 -208.89401245]
[222.29809570 -225.20542908]
[235.73413086 -234.60780334]
[250.47840881 -227.42878723]
[251.36328125 -211.05352783]
[237.47845459 -202.32749939]
[230.91194153 -188.84117126]
[233.15830994 -171.50900269]
[217.99577332 -161.19815063]
[211.83958435 -147.51965332]
[205.68339539 -133.84115601]
[207.51559448 -119.05966949]
[194.79618835 -109.65077972]
[188.63999939 -95.97228241]
[182.48381042 -82.29378510]
[176.32762146 -68.61528778]
[170.17141724 -54.93678665]
[164.01522827 -41.25828934]
[157.85903931 -27.57979202]
[151.70285034 -13.90129471]
[145.96260071 -0.04310127]
[140.64352417 13.98214245]
[135.32444763 28.00738525]
[130.00537109 42.03263092]
[124.68630219 56.05787277]
[119.36722565 70.08311462]
[122.08857727 84.72700500]
[109.96046448 94.88671112]
[104.85382843 108.99068451]
[99.96078491 123.17018127]
[95.06774139 137.34968567]
[90.17469788 151.52917480]
[85.71215820 165.84999084]
[81.68418121 180.29905701]
[77.65619659 194.74812317]
[73.62821960 209.19717407]
[69.60024261 223.64624023]
[65.57226562 238.09530640]
[61.54428864 252.54435730]
[57.51630783 266.99343872]
[58.22186661 276.27279663]
[53.14231491 281.81457520]
[56.42368317 297.29174805]
[45.25031662 307.14086914]
[57.47320175 316.07843018]
[66.12974548 328.50192261]
[70.28096008 343.06372070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 100]
[16 98]
[17 96]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[27 88]
[28 87]
[29 86]
[30 85]
[32 84]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[51 67]
[52 66]
[53 65]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
