%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGACGUACAUCGUUCAAAACGUGCCCAGUGUUUCCCUCCGAGGGCACUGCGUGCCGCGCAGGCGCAAAGGGCCAGGUGCUGGAGGUGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[61.58758163 407.76266479]
[46.37105179 412.84564209]
[32.98858643 403.99752808]
[31.70606995 388.00582886]
[43.50733566 377.13800049]
[45.46522903 362.26632690]
[47.42312241 347.39465332]
[49.38101578 332.52297974]
[42.22475815 322.61968994]
[43.86583328 310.10507202]
[53.95809174 301.87081909]
[56.40152359 287.07116699]
[58.84495544 272.27151489]
[61.28838730 257.47186279]
[59.23199081 250.21925354]
[64.06151581 242.23124695]
[66.98786926 227.51947021]
[69.91422272 212.80767822]
[72.84057617 198.09590149]
[64.37781525 185.89274597]
[67.13597870 170.93121338]
[79.99316406 162.13743591]
[82.91951752 147.42565918]
[77.81385040 133.43345642]
[88.09476471 121.40792847]
[91.02111816 106.69615173]
[93.70637512 91.93846130]
[96.14980316 77.13880920]
[98.59323883 62.33916092]
[89.65773010 49.58006287]
[92.34654999 34.60592270]
[104.56546021 26.16591454]
[107.00889587 11.36626530]
[109.45232391 -3.43338513]
[102.47850800 -12.09743118]
[101.55586243 -22.95831299]
[106.75239563 -32.28649521]
[116.07696533 -37.01713562]
[119.48310852 -51.62528992]
[122.88925171 -66.23344421]
[118.48776245 -81.43006897]
[128.91300964 -92.06790924]
[132.31915283 -106.67606354]
[126.14623260 -118.14566040]
[129.41921997 -130.33567810]
[139.82055664 -136.74655151]
[143.70285034 -151.23544312]
[147.58512878 -165.72433472]
[151.46742249 -180.21322632]
[155.34970093 -194.70210266]
[153.60885620 -211.56643677]
[169.33221436 -217.90777588]
[179.77838135 -204.55433655]
[169.83859253 -190.81982422]
[165.95629883 -176.33093262]
[162.07402039 -161.84204102]
[158.19172668 -147.35316467]
[154.30944824 -132.86427307]
[159.81900024 -116.29087830]
[146.92730713 -103.26992035]
[143.52116394 -88.66176605]
[148.16627502 -74.51000977]
[137.49740601 -62.82730103]
[134.09126282 -48.21914673]
[130.68511963 -33.61099243]
[137.78669739 -15.75155067]
[124.25197601 -0.98995304]
[121.80854797 13.80969715]
[119.36511230 28.60934639]
[128.22262573 40.52908325]
[125.95545959 55.57284164]
[113.39288330 64.78259277]
[110.94945526 79.58224487]
[108.50601959 94.38188934]
[110.42800140 102.38547516]
[105.73289490 109.62250519]
[102.80654144 124.33428192]
[107.70289612 139.37876892]
[97.63129425 150.35200500]
[94.70494080 165.06379700]
[103.21819305 178.10841370]
[100.04087830 192.98657227]
[87.55235291 201.02226257]
[84.62599945 215.73403931]
[81.69964600 230.44581604]
[78.77329254 245.15759277]
[76.08803558 259.91528320]
[73.64460754 274.71493530]
[71.20117188 289.51458740]
[68.75774384 304.31423950]
[75.68521881 321.27746582]
[64.25268555 334.48086548]
[62.29479599 349.35253906]
[60.33690262 364.22421265]
[58.37900925 379.09588623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 95]
[6 94]
[7 93]
[8 92]
[11 90]
[12 89]
[13 88]
[14 87]
[16 86]
[17 85]
[18 84]
[19 83]
[22 80]
[23 79]
[25 77]
[26 76]
[27 74]
[28 73]
[29 72]
[32 69]
[33 68]
[34 67]
[38 65]
[39 64]
[40 63]
[42 61]
[43 60]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
