%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCAGCCCCGGCCCGGCGCGAGUAGGAGGAGGAGCUGCAGCGGCCACGGCCACUCCGGCAGGUCCGCGGUGCUGCCAGAACCCGCCGACGGCGCGGGCUGCUGGUCCCCGCUCGGAGGAGGCGCGGGGGGCCCCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[101.73806000 160.59443665]
[99.45620728 145.76901245]
[97.17435455 130.94358826]
[94.89250946 116.11816406]
[88.25817871 102.66507721]
[77.88548279 91.82961273]
[67.51278687 80.99415588]
[57.14008713 70.15869904]
[46.76739120 59.32323837]
[36.39469528 48.48777771]
[26.02200127 37.65232086]
[10.45346737 37.14387512]
[0.08843415 26.00741768]
[0.66909993 11.16833305]
[-9.70359612 0.33287340]
[-20.07629204 -10.50258636]
[-30.68289375 -21.10918808]
[-41.51835251 -31.48188400]
[-52.35381317 -41.85457993]
[-63.18927002 -52.22727585]
[-74.02473450 -62.59997177]
[-85.30233002 -72.49015808]
[-100.80403900 -70.96215057]
[-112.53399658 -80.65042877]
[-113.89518738 -95.43835449]
[-125.59345245 -104.82720184]
[-137.29171753 -114.21605682]
[-148.98999023 -123.60491180]
[-164.59548950 -126.20855713]
[-169.67832947 -140.20906067]
[-185.89601135 -135.53355408]
[-201.55937195 -141.36157227]
[-210.59541321 -155.22322083]
[-209.62608337 -171.57556152]
[-221.52638245 -180.70698547]
[-233.42668152 -189.83840942]
[-249.08526611 -192.10101318]
[-254.47232056 -205.98728943]
[-266.37261963 -215.11871338]
[-278.27291870 -224.25013733]
[-290.17321777 -233.38156128]
[-302.36593628 -242.11871338]
[-314.83795166 -250.45227051]
[-330.61099243 -251.68591309]
[-336.89474487 -265.19012451]
[-349.36676025 -273.52368164]
[-361.83880615 -281.85723877]
[-378.22933960 -282.38928223]
[-385.72418213 -296.97555542]
[-376.61331177 -310.61096191]
[-360.26919556 -309.26855469]
[-353.50527954 -294.32928467]
[-341.03323364 -285.99572754]
[-328.56118774 -277.66217041]
[-313.68023682 -277.02462769]
[-306.50442505 -262.92431641]
[-294.03237915 -254.59075928]
[-290.45330811 -254.95606995]
[-286.52075195 -253.55738831]
[-283.08843994 -250.24887085]
[-281.04180908 -245.28186035]
[-269.14151001 -236.15043640]
[-257.24121094 -227.01901245]
[-245.34089661 -217.88758850]
[-230.53350830 -216.27813721]
[-224.29525757 -201.73870850]
[-212.39495850 -192.60728455]
[-200.49465942 -183.47586060]
[-188.05879211 -188.44660950]
[-174.68614197 -186.58950806]
[-163.90339661 -178.28584290]
[-158.60791016 -165.63116455]
[-160.28947449 -151.90733337]
[-145.52072144 -149.97523499]
[-139.60113525 -135.30317688]
[-127.90287018 -125.91432190]
[-116.20459747 -116.52547455]
[-104.50633240 -107.13661957]
[-89.77432251 -109.00838470]
[-77.77687073 -99.65340424]
[-75.91347504 -84.18842316]
[-73.04641724 -84.40788269]
[-69.91754913 -83.46096802]
[-66.98741150 -81.24115753]
[-64.74657440 -77.81661987]
[-63.65203476 -73.43543243]
[-52.81657410 -63.06273651]
[-41.98111725 -52.69004059]
[-31.14565659 -42.31734467]
[-20.31019783 -31.94464684]
[-15.52938080 -31.15893555]
[-11.21614361 -27.31326866]
[-9.24083233 -20.87528229]
[1.13186347 -10.03982258]
[11.50455952 0.79563701]
[26.35484886 0.86279565]
[37.02859116 11.70372963]
[36.85746002 27.27962303]
[47.23015594 38.11508179]
[57.60285187 48.95054245]
[67.97554779 59.78600311]
[78.34824371 70.62145996]
[88.72093964 81.45691681]
[99.09363556 92.29238129]
[103.22454834 86.93029022]
[110.83312225 84.19352722]
[120.36467743 85.73580933]
[129.59832764 92.37683105]
[142.58871460 99.87683105]
[155.57908630 107.37683105]
[168.56947327 114.87683105]
[181.55984497 122.37683105]
[194.55023193 129.87683105]
[207.54061890 137.37683105]
[220.61203003 144.73468018]
[233.76293945 151.94950867]
[248.86380005 147.28695679]
[262.79943848 154.74171448]
[267.30209351 169.89103699]
[259.70040894 183.74707031]
[244.50431824 188.08930969]
[230.72943115 180.34155273]
[226.54809570 165.10041809]
[213.39720154 157.88558960]
[205.96377563 157.42247009]
[200.04061890 150.36721802]
[187.05023193 142.86721802]
[174.05984497 135.36721802]
[161.06947327 127.86721039]
[148.07908630 120.36721039]
[135.08871460 112.86721039]
[122.09832764 105.36721039]
[109.71792603 113.83631897]
[111.99977875 128.66174316]
[114.28163147 143.48716736]
[116.56348419 158.31259155]
[130.41957092 165.29745483]
[137.49382019 179.10812378]
[135.06605530 194.43409729]
[124.06977844 205.38223267]
[108.73329926 207.74275208]
[94.95379639 200.60797119]
[88.02977753 186.72137451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[11 98]
[14 95]
[15 94]
[16 93]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 81]
[25 78]
[26 77]
[27 76]
[28 75]
[30 73]
[34 68]
[35 67]
[36 66]
[38 64]
[39 63]
[40 62]
[41 61]
[42 57]
[43 56]
[45 54]
[46 53]
[47 52]
[108 132]
[109 131]
[110 130]
[111 129]
[112 128]
[113 127]
[114 126]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
