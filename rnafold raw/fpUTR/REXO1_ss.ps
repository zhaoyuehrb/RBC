%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCGUGAGGCGCGGGCGGCGGCGACCGCGGCGCCAGUGAGGGGGCCCUGGGGCCCGGGCGGCUCCGGGCCGGGGCCCCGCCGCGGGACGGACC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 213.65135193]
[92.50000000 198.65135193]
[92.50000000 183.65135193]
[92.50000000 168.65135193]
[92.50000000 153.65135193]
[92.50000000 138.65135193]
[92.50000000 123.65135956]
[85.90539551 120.42005920]
[80.54549408 115.39995575]
[76.88980865 109.03081512]
[61.92192078 110.01186371]
[46.95403671 110.99291229]
[31.98615456 111.97395325]
[17.01827049 112.95500183]
[7.83445501 122.19156647]
[-4.78076172 122.59809113]
[-13.93494129 114.50559998]
[-28.92691040 114.99639130]
[-43.91888046 115.48717499]
[-58.91084671 115.97795868]
[-69.53025055 127.68282318]
[-85.31972504 128.36689758]
[-96.91165924 117.62433624]
[-97.42876434 101.82851410]
[-86.56424713 90.35079956]
[-70.76383209 90.00073242]
[-59.40163422 100.98599243]
[-44.40966415 100.49520874]
[-29.41769600 100.00441742]
[-14.42572689 99.51363373]
[-0.16531801 89.43031311]
[16.03722382 97.98712158]
[31.00510788 97.00607300]
[45.97299194 96.02502441]
[60.94087601 95.04397583]
[75.90876007 94.06292725]
[90.88118744 76.92438507]
[113.52479553 79.19815826]
[125.11994934 69.68225861]
[136.71510315 60.16636276]
[138.40969849 44.68198013]
[150.30439758 35.19668198]
[165.05593872 36.90763855]
[176.65110779 27.39173889]
[188.24626160 17.87584114]
[199.84141541 8.35994053]
[211.43656921 -1.15595829]
[223.03172302 -10.67185783]
[234.62689209 -20.18775749]
[246.22204590 -29.70365524]
[249.03240967 -36.03813553]
[253.94642639 -39.35961914]
[258.90106201 -39.43262100]
[271.09378052 -48.16978836]
[283.28646851 -56.90695190]
[295.47918701 -65.64411926]
[307.67187500 -74.38128662]
[319.86456299 -83.11844635]
[332.05728149 -91.85561371]
[334.38412476 -107.48767853]
[347.13253784 -116.82862854]
[362.73913574 -114.33664703]
[371.94476318 -101.49018097]
[369.28793335 -85.91081238]
[356.34484863 -76.84150696]
[340.79443359 -79.66291046]
[328.60174561 -70.92575073]
[316.40905762 -62.18858337]
[304.21633911 -53.45141602]
[292.02365112 -44.71425247]
[279.83093262 -35.97708511]
[267.63824463 -27.23992157]
[255.73794556 -18.10849953]
[244.14279175 -8.59259987]
[232.54762268 0.92329919]
[220.95246887 10.43919849]
[209.35731506 19.95509720]
[197.76216125 29.47099686]
[186.16700745 38.98689651]
[174.57183838 48.50279617]
[173.37203979 63.30469131]
[161.74845886 73.12033844]
[146.23100281 71.76152039]
[134.63584900 81.27742004]
[123.04069519 90.79331970]
[124.80024719 100.76457214]
[122.42980957 110.60850525]
[116.32413483 118.68580627]
[107.50000000 123.65135956]
[107.50000000 138.65135193]
[107.50000000 153.65135193]
[107.50000000 168.65135193]
[107.50000000 183.65135193]
[107.50000000 198.65135193]
[107.50000000 213.65135193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[17 30]
[18 29]
[19 28]
[20 27]
[38 85]
[39 84]
[40 83]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
