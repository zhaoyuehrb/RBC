%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCGGCGCGGAGCCCGGAGCCCGCAGCCGACAGUCUCCUGCUCCCGUACGCUGGGCGCCAGCUCCGGCCGUGCUGCCCGGCUGCCUGAGAGCGCGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[77.34992218 111.69094086]
[62.58646393 114.34429169]
[47.82300568 116.99764252]
[33.05954742 119.65100098]
[18.78002357 124.24395752]
[5.23805618 130.69493103]
[-8.30391121 137.14590454]
[-21.84587860 143.59689331]
[-35.38784790 150.04786682]
[-48.83273315 156.69880676]
[-62.17758942 163.54824829]
[-75.52244568 170.39767456]
[-88.86730194 177.24711609]
[-95.19797516 184.05947876]
[-102.71065521 184.09516907]
[-116.25261688 190.54614258]
[-122.94894409 205.12486267]
[-138.55612183 208.83911133]
[-151.10165405 198.83964539]
[-150.96168518 182.79721069]
[-138.24359131 173.01817322]
[-122.70359802 177.00418091]
[-109.16162872 170.55320740]
[-95.71674347 163.90226746]
[-82.37188721 157.05282593]
[-69.02703094 150.20338440]
[-55.68217087 143.35394287]
[-51.09510422 137.40411377]
[-41.83882523 136.50590515]
[-28.29685593 130.05491638]
[-14.75488949 123.60394287]
[-1.21292174 117.15296173]
[12.32904530 110.70198822]
[-1.89529490 105.94087982]
[-11.45037937 94.37799072]
[-13.44563866 79.51128387]
[-7.27747297 65.83818817]
[5.18814516 57.49502182]
[20.18016243 57.00574493]
[33.16324997 64.51836395]
[40.20981216 77.76019287]
[39.18814468 92.72535706]
[30.40619278 104.88754272]
[45.16965103 102.23418427]
[59.93310928 99.58083344]
[74.69657135 96.92748260]
[77.64619446 87.75209045]
[83.79173279 80.32778168]
[92.25457001 75.71600342]
[101.82476807 74.57611084]
[111.13407898 77.07106018]
[118.85154724 82.84415436]
[123.87382507 91.07001495]
[138.84747314 90.18140411]
[153.82113647 89.29280090]
[168.79478455 88.40419006]
[183.76844788 87.51557922]
[198.74209595 86.62696838]
[213.71575928 85.73835754]
[228.68940735 84.84974670]
[243.66307068 83.96114349]
[249.61067200 80.51426697]
[255.49591064 80.68887329]
[259.54510498 83.49029541]
[274.54510498 83.49029541]
[289.54510498 83.49029541]
[304.54510498 83.49029541]
[319.50393677 82.37989807]
[334.33953857 80.16519928]
[349.17514038 77.95050049]
[364.01074219 75.73580933]
[378.84634399 73.52111053]
[393.68194580 71.30641174]
[401.69995117 57.88085175]
[416.48876953 52.79901886]
[431.06555176 58.46039581]
[438.54760742 72.19184875]
[435.40213013 87.50981140]
[423.11431885 97.18161011]
[407.48611450 96.64051056]
[395.89663696 86.14201355]
[381.06103516 88.35671234]
[366.22543335 90.57141113]
[351.38983154 92.78610992]
[336.55422974 95.00080872]
[321.71862793 97.21550751]
[320.32366943 99.27745056]
[318.07165527 100.94790649]
[315.09564209 101.91996765]
[311.62924194 101.93568420]
[307.98855591 100.81701660]
[304.54510498 98.49029541]
[289.54510498 98.49029541]
[274.54510498 98.49029541]
[259.54510498 98.49029541]
[244.55168152 98.93479919]
[229.57801819 99.82341003]
[214.60437012 100.71201324]
[199.63070679 101.60062408]
[184.65705872 102.48923492]
[169.68339539 103.37784576]
[154.70974731 104.26645660]
[139.73608398 105.15505981]
[124.76243591 106.04367065]
[112.72782898 122.08407593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 27]
[11 26]
[12 25]
[13 24]
[15 23]
[16 22]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[64 95]
[65 94]
[66 93]
[67 92]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
