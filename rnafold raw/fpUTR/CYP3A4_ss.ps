%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACUGCUGUGCAGGGCAGGAAAGCUCCAUGCACAUAGCCCAGCAAAGAGCAACACAGAGCUGAAAGGAAGACUCAGAGGAGAGAGAUAAGUAAGGAAAGUAGUG\
) } def
/len { sequence length } bind def

/coor [
[96.39211273 240.16296387]
[80.05536652 238.73368835]
[73.37095642 223.75868225]
[83.21523285 210.64295959]
[84.52256775 195.70002747]
[85.82990265 180.75711060]
[87.13723755 165.81419373]
[88.44458008 150.87127686]
[89.75191498 135.92834473]
[91.05924988 120.98542786]
[79.85387421 111.01348877]
[65.16376495 114.04675293]
[50.47365570 117.08001709]
[35.78354645 120.11328125]
[21.09343529 123.14654541]
[6.44899511 126.39314270]
[-8.14667797 129.85238647]
[-22.69049644 133.52352905]
[-37.17938232 137.40580750]
[-44.86347961 151.21632385]
[-60.08515167 155.46794128]
[-73.81365204 147.63825989]
[-77.90409851 132.37249756]
[-69.92971039 118.72754669]
[-54.62154770 114.79872131]
[-41.06166840 122.91693115]
[-26.57278252 119.03464508]
[-20.83792305 114.18857574]
[-11.60591602 115.25670624]
[2.98975730 111.79747009]
[8.86313629 107.12024689]
[18.06017113 108.45643616]
[32.75028229 105.42317200]
[47.44039154 102.38990784]
[62.13050079 99.35664368]
[76.82061005 96.32337952]
[62.47460175 91.94251251]
[49.07683563 85.19714355]
[44.12885666 71.03672791]
[50.40992737 57.41511917]
[64.39199066 51.98354721]
[78.22093964 57.79249954]
[85.41232300 70.95623779]
[85.41232300 55.95623779]
[85.41232300 40.95623779]
[85.41232300 25.95623779]
[71.24890900 20.50076294]
[60.01529694 10.29437351]
[53.23073959 -3.28259850]
[51.81278610 -18.39398003]
[55.95320892 -32.99607849]
[65.09204865 -45.11408615]
[77.99335480 -53.10913467]
[92.91232300 -55.89996338]
[107.83129120 -53.10913467]
[120.73259735 -45.11408615]
[129.87144470 -32.99607849]
[134.01185608 -18.39398003]
[132.59390259 -3.28259850]
[125.80934906 10.29437351]
[114.57573700 20.50076294]
[100.41232300 25.95623779]
[100.41232300 40.95623779]
[100.41232300 55.95623779]
[100.41232300 70.95623779]
[105.79219055 76.18184662]
[112.98357391 63.01810837]
[117.08267975 48.58906555]
[130.46936035 41.82171631]
[144.51896667 47.07606506]
[150.17980957 60.96688843]
[143.80474854 74.54476166]
[129.50094604 79.06185913]
[116.55193329 86.63306427]
[121.93180847 91.85867310]
[136.92546082 91.42240143]
[151.91911316 90.98613739]
[162.58100891 79.31996155]
[178.37286377 78.69330597]
[189.92565918 89.47794342]
[190.38533020 105.27554321]
[179.47914124 116.71367645]
[163.67756653 117.00628662]
[152.35537720 105.97978973]
[137.36172485 106.41606140]
[122.36807251 106.85233307]
[135.73541260 113.65780640]
[149.10273743 120.46328735]
[163.93382263 122.70797729]
[176.33732605 131.14321899]
[183.87574768 144.11134338]
[185.06765747 159.06391907]
[179.67884827 173.06251526]
[168.76829529 183.35618591]
[154.48010254 187.92207336]
[139.62211609 185.86291504]
[127.11415863 177.58334351]
[119.41426849 164.71044922]
[118.03561401 149.77360535]
[112.01889038 136.03318787]
[106.00216675 122.29276276]
[104.69483185 137.23568726]
[103.38749695 152.17860413]
[102.08016205 167.12152100]
[100.77282715 182.06445312]
[99.46549225 197.00737000]
[98.15814972 211.95028687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[10 101]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[18 27]
[19 26]
[43 65]
[44 64]
[45 63]
[46 62]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
