%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCUCUGCCAGUCCAGCCCUAGGUUCUCCUGAAUCCUGCGGUCCCAGCGUCGCUCCGGACGCUGCCAACCUGUUCUCCACCGUCGCUCGACUUCCACCUCUAAGACUCCCACGAAACUCAGGUUGAAUAAUUCAUCAAAUUACACAACUGAACUCAAGAC\
) } def
/len { sequence length } bind def

/coor [
[95.46817017 275.59527588]
[94.89010620 260.60641479]
[94.31204224 245.61755371]
[93.73397827 230.62869263]
[81.94218445 225.94982910]
[72.77360535 217.11434937]
[67.62401581 205.41796875]
[67.29605103 192.59550476]
[71.87428284 180.56361389]
[80.70726013 171.13423157]
[92.50000000 165.74179077]
[92.50000000 150.74179077]
[92.50000000 135.74179077]
[92.50000000 120.74179077]
[86.29933167 116.52258301]
[72.79091644 123.04351807]
[73.89800262 108.08415985]
[67.69733429 103.86495209]
[53.74431229 109.37068176]
[39.79129028 114.87641907]
[29.79431725 127.13900757]
[15.11541939 124.61329651]
[1.16239607 130.11903381]
[-12.79062748 135.62477112]
[-26.74365044 141.13050842]
[-40.64297104 146.77044678]
[-54.48729324 152.54406738]
[-68.33161926 158.31768799]
[-77.84793091 171.67327881]
[-94.14434814 169.84057617]
[-100.45651245 154.70489502]
[-90.29100800 141.83654785]
[-74.10523987 144.47337341]
[-60.26091385 138.69975281]
[-46.41659164 132.92611694]
[-41.42959976 127.42272949]
[-32.24938583 127.17748260]
[-18.29636383 121.67174530]
[-4.34334040 116.16600800]
[9.60968304 110.66027069]
[18.60864258 98.79148865]
[34.28555298 100.92340088]
[48.23857880 95.41766357]
[62.19160080 89.91192627]
[63.05698013 82.46202087]
[64.78773499 67.56220245]
[65.65311432 60.11229706]
[53.33367920 51.55475616]
[41.01424026 42.99721909]
[28.69480324 34.43968201]
[16.37536621 25.88214493]
[4.05592823 17.32460594]
[-8.26350975 8.76706791]
[-23.77089882 11.81607151]
[-36.84549713 2.93742108]
[-39.73037720 -12.60133743]
[-30.71398926 -25.58133507]
[-15.14559841 -28.30176735]
[-2.26165414 -19.14865303]
[0.29402864 -3.55236936]
[12.61346626 5.00516844]
[24.93290329 13.56270599]
[37.25234222 22.12024498]
[49.57178116 30.67778206]
[61.89121628 39.23532104]
[74.21065521 47.79285812]
[95.95403290 66.32570648]
[102.09263611 90.62731934]
[110.76849365 78.39092255]
[119.44435120 66.15451813]
[128.12020874 53.91812134]
[136.79606628 41.68172073]
[145.47192383 29.44532013]
[154.14779663 17.20892143]
[162.46630859 4.72684765]
[170.42054749 -7.99046850]
[178.37478638 -20.70778465]
[169.62187195 -33.10383987]
[166.29071045 -47.86684799]
[168.85856628 -62.74030685]
[176.90342712 -75.46303558]
[189.17306519 -84.11293793]
[203.77984619 -87.39733887]
[218.49108887 -84.84614563]
[226.44532776 -97.56346130]
[234.39956665 -110.28077698]
[228.29711914 -122.67021942]
[229.11936951 -136.34791565]
[236.54371643 -147.73544312]
[248.53439331 -153.90672302]
[261.89956665 -153.33964539]
[270.09741211 -165.90130615]
[264.44354248 -180.35168457]
[268.39578247 -195.35700989]
[280.43435669 -205.14741516]
[295.93023682 -205.95828247]
[308.92492676 -197.47784424]
[314.42169189 -182.96697998]
[310.30691528 -168.00541687]
[298.16281128 -158.34619141]
[282.65905762 -157.70346069]
[274.46121216 -145.14179993]
[280.79895020 -130.02259827]
[276.85336304 -113.93979645]
[263.98266602 -103.25845337]
[247.11688232 -102.32653809]
[239.16264343 -89.60922241]
[231.20840454 -76.89190674]
[239.94001770 -64.78041840]
[243.37872314 -50.20919037]
[240.97021484 -35.39149857]
[233.05076599 -22.59033012]
[220.80070496 -13.77276039]
[206.06854248 -10.30772305]
[191.09210205 -12.75354767]
[183.13786316 -0.03623182]
[175.18362427 12.68108368]
[175.64096069 16.22290802]
[174.37500000 20.16232681]
[171.21803284 23.67282486]
[166.38418579 25.88477898]
[157.70832825 38.12117767]
[149.03247070 50.35757828]
[140.35661316 62.59397888]
[131.68075562 74.83037567]
[123.00489807 87.06678009]
[114.32904053 99.30317688]
[123.32626343 87.30110168]
[135.17413330 78.10174561]
[149.03109741 72.35853577]
[163.91291809 70.47940063]
[178.76258850 72.59781647]
[192.52531433 78.56330109]
[204.22358704 87.95215607]
[213.02647400 100.09748840]
[218.30873108 114.13664246]
[219.69515991 129.07243347]
[217.08728027 143.84399414]
[210.67034912 157.40211487]
[200.90011597 168.78379822]
[188.47058105 177.18061829]
[174.26457214 181.99615479]
[159.29112244 182.88835144]
[144.61380005 179.79386902]
[131.27507019 172.93247986]
[120.22240448 162.79154968]
[112.24083710 150.09138489]
[107.89728546 135.73402405]
[107.50000000 120.74179077]
[107.50000000 135.74179077]
[107.50000000 150.74179077]
[107.50000000 165.74179077]
[122.89346313 174.13467407]
[131.89527893 189.07667542]
[132.11758423 206.43060303]
[123.58914185 221.44401550]
[108.72283936 230.05062866]
[109.30090332 245.03948975]
[109.87896729 260.02835083]
[110.45703125 275.01721191]
[117.10927582 290.61154175]
[103.96588135 301.32077026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[11 152]
[12 151]
[13 150]
[14 149]
[18 44]
[19 43]
[20 42]
[22 40]
[23 39]
[24 38]
[25 37]
[26 35]
[27 34]
[28 33]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[68 127]
[69 126]
[70 125]
[71 124]
[72 123]
[73 122]
[74 121]
[75 117]
[76 116]
[77 115]
[84 108]
[85 107]
[86 106]
[91 102]
[92 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
