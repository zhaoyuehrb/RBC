%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCUCUUGGAAGUGGCGACUGCUGCGGGGCUGAGCGGUGCUCGCACGCGUCUCGGGAGCCAGGUUGGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[-1.32495308 257.75811768]
[-14.36161423 257.27938843]
[-23.84829521 268.89846802]
[-33.33497620 280.51754761]
[-42.82165527 292.13662720]
[-52.30833817 303.75570679]
[-54.40343475 320.02044678]
[-69.63887024 326.08789062]
[-82.34172821 315.71630859]
[-79.44440460 299.57513428]
[-63.92741013 294.26901245]
[-54.44073105 282.64993286]
[-44.95405197 271.03085327]
[-35.46736908 259.41180420]
[-25.98068810 247.79272461]
[-28.44765663 231.28479004]
[-18.11539650 217.75320435]
[-0.87727022 215.70582581]
[8.13386345 203.71418762]
[17.14499855 191.72254944]
[18.68711090 184.27885437]
[26.76834869 179.43923950]
[36.25502777 167.82017517]
[45.74171066 156.20109558]
[55.22838974 144.58203125]
[64.71507263 132.96295166]
[74.20175171 121.34387207]
[83.45253754 109.53612518]
[81.52069092 95.17596436]
[90.22515869 83.59242249]
[104.55582428 81.45274353]
[113.56695557 69.46110535]
[122.57809448 57.46945953]
[131.58923340 45.47781754]
[139.85987854 32.96397781]
[147.35987854 19.97359657]
[154.85987854 6.98321486]
[162.09677124 -6.15556002]
[169.06762695 -19.43740082]
[175.76959229 -32.85691833]
[182.19998169 -46.40867615]
[188.63037109 -59.96043396]
[186.77218628 -76.25396729]
[200.11286926 -85.79115295]
[214.92868042 -78.76096344]
[215.97839355 -62.39544678]
[202.18212891 -53.53004456]
[195.75173950 -39.97828674]
[189.32135010 -26.42653084]
[189.29933167 -18.82480431]
[182.34945679 -12.46655273]
[175.37861633 0.81528765]
[175.05052185 8.40996265]
[167.85026550 14.48321533]
[160.35026550 27.47359657]
[152.85026550 40.46397781]
[153.57730103 44.18724442]
[152.34730530 48.45610428]
[148.92362976 52.25107956]
[143.58087158 54.48895264]
[134.56973267 66.48059082]
[125.55860138 78.47223663]
[116.54746246 90.46387482]
[118.47930908 104.82403564]
[109.77484131 116.40757751]
[95.44417572 118.54725647]
[92.67916870 127.55186462]
[85.82082367 130.83055115]
[76.33414459 142.44963074]
[66.84746552 154.06871033]
[57.36078262 165.68777466]
[47.87410355 177.30685425]
[38.38742065 188.92593384]
[29.13663864 200.73367310]
[20.12550545 212.72532654]
[11.11437130 224.71696472]
[14.53960323 237.91403198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[18 76]
[19 75]
[20 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 66]
[31 63]
[32 62]
[33 61]
[34 60]
[35 56]
[36 55]
[37 54]
[38 52]
[39 51]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
