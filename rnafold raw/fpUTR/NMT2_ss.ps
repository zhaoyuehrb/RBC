%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUACGGCGGGAGGCACUAGAGGGAGCUGCGGCCGCUCCGGCCCGGCCCCGAGCACCGCCUCCCCAGCCAGCGCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[99.47135925 249.84921265]
[109.53598022 237.66401672]
[107.87619019 222.75613403]
[98.77809906 210.96316528]
[104.94085693 196.39158630]
[103.28106689 181.48370361]
[94.18297577 169.69073486]
[100.34573364 155.11915588]
[98.41074371 140.24449158]
[96.20121765 125.40811920]
[93.99169159 110.57173920]
[91.23545074 95.82714844]
[87.93625641 81.19446564]
[84.63706207 66.56178284]
[81.33786774 51.92910767]
[78.03867340 37.29642868]
[74.73947144 22.66374779]
[71.44027710 8.03106880]
[55.68690872 5.44267559]
[42.13925552 -2.93055892]
[32.82425690 -15.80165577]
[29.12252426 -31.21330070]
[31.56377411 -46.83546829]
[39.75124359 -60.31768799]
[52.42583466 -69.64269257]
[48.58819199 -84.14347076]
[44.75054932 -98.64424896]
[39.40943146 -106.35771179]
[41.04961777 -113.75190735]
[37.75042343 -128.38458252]
[34.45122910 -143.01727295]
[31.15203285 -157.64994812]
[26.09958649 -165.55549622]
[28.01187897 -172.88404846]
[25.25563622 -187.62864685]
[22.49939346 -202.37324524]
[19.74315071 -217.11784363]
[16.98690796 -231.86242676]
[8.13308620 -246.32086182]
[19.57549286 -258.83117676]
[34.76446152 -251.29913330]
[31.73150444 -234.61868286]
[34.48774719 -219.87408447]
[37.24399185 -205.12948608]
[40.00023270 -190.38488770]
[42.75647736 -175.64028931]
[45.78471375 -160.94914246]
[49.08390808 -146.31646729]
[52.38310242 -131.68377686]
[55.68229675 -117.05110168]
[59.25132751 -102.48188782]
[63.08896637 -87.98110962]
[66.92661285 -73.48033905]
[81.01551819 -72.10644531]
[93.79928589 -65.95724487]
[103.70886993 -55.76450729]
[109.52011871 -42.75768280]
[110.50495148 -28.51562881]
[106.52253723 -14.77495003]
[98.03900909 -3.21825933]
[86.07295990 4.73187304]
[89.37215424 19.36455345]
[92.67134857 33.99723053]
[95.97054291 48.62991333]
[99.26973724 63.26259232]
[102.56893921 77.89527130]
[105.86813354 92.52794647]
[109.75529480 96.43238068]
[111.04008484 102.28223419]
[108.82807159 108.36221313]
[111.03759766 123.19859314]
[113.24711609 138.03495789]
[117.70192719 146.29206848]
[115.25362396 153.45936584]
[124.47043610 166.31864929]
[118.18895721 179.82391357]
[119.84874725 194.73179626]
[129.06555176 207.59107971]
[122.78408051 221.09634399]
[124.44387054 236.00422668]
[136.94210815 245.67735291]
[138.85687256 261.36523438]
[129.05213928 273.76049805]
[113.34490967 275.50927734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[5 77]
[6 76]
[8 74]
[9 72]
[10 71]
[11 70]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[25 53]
[26 52]
[27 51]
[29 50]
[30 49]
[31 48]
[32 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
