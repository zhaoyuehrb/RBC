%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCCUCCUGCAGCGCCUGGAGCCACACAGGGAUCCGGAGCCUGGGGGAAAAGCGGCGCGGGAGCCGGCACCCACCGCUGGAGGGGCGGCGACGGCGGCCGUAGCGACCUCGGGAGGCAAGCGGAGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[109.07690430 243.45751953]
[108.38055420 232.80775452]
[112.24514771 222.77236938]
[120.02137756 215.22721863]
[116.51107788 200.64373779]
[113.00078583 186.06025696]
[109.49049377 171.47677612]
[105.98020172 156.89329529]
[102.46990967 142.30982971]
[98.95961761 127.72634125]
[95.44932556 113.14286804]
[82.70155334 105.23752594]
[68.07763672 108.57534027]
[53.45371628 111.91315460]
[45.69599915 116.91829681]
[38.44506836 115.15277863]
[23.74639511 118.14426422]
[9.08407497 121.30912781]
[-5.53984356 124.64694214]
[-20.16376305 127.98475647]
[-34.78768158 131.32257080]
[-49.41159821 134.66038513]
[-61.14406204 145.27452087]
[-75.27394867 140.56329346]
[-89.89786530 143.90110779]
[-98.09297943 157.41464233]
[-113.46297455 161.09414673]
[-126.88911438 152.75660706]
[-130.40589905 137.34857178]
[-121.92688751 124.01132965]
[-106.48252106 120.65764618]
[-93.23567963 129.27719116]
[-78.61176300 125.93937683]
[-67.92530060 115.56398773]
[-52.74941254 120.03646851]
[-38.12549591 116.69865417]
[-23.50157547 113.36083984]
[-8.87765789 110.02302551]
[5.74626112 106.68521118]
[11.62336159 102.08599854]
[20.75491142 103.44558716]
[35.45358658 100.45410156]
[50.11590576 97.28923035]
[64.73982239 93.95142365]
[79.36373901 90.61360931]
[99.84820557 86.78180695]
[107.90354919 74.12829590]
[115.95889282 61.47478104]
[108.00509644 48.49408340]
[106.48219299 33.40873337]
[111.63894653 19.21620178]
[122.40221405 8.71319675]
[136.59974670 3.94460034]
[151.39848328 5.80546331]
[159.45382690 -6.84805202]
[167.50917053 -19.50156784]
[175.56451416 -32.15508270]
[183.61985779 -44.80859756]
[191.52520752 -57.55636597]
[199.27943420 -70.39660645]
[199.79016113 -86.20957184]
[212.99276733 -93.10453033]
[209.42211914 -108.26659393]
[217.46893311 -121.17796326]
[231.94564819 -124.48860168]
[239.69987488 -137.32884216]
[247.45411682 -150.16908264]
[255.20834351 -163.00932312]
[256.99453735 -172.06709290]
[263.30041504 -176.05819702]
[265.30004883 -185.07125854]
[271.69842529 -188.91230774]
[280.05038452 -201.37203979]
[288.40234375 -213.83177185]
[289.65927124 -229.60296631]
[303.17276001 -235.86674500]
[311.52471924 -248.32647705]
[315.32150269 -264.84982300]
[332.25015259 -265.77551270]
[337.82598877 -249.76469421]
[323.98443604 -239.97451782]
[315.63247681 -227.51480103]
[314.97293091 -212.63479614]
[300.86206055 -205.47981262]
[292.51010132 -193.02008057]
[284.15814209 -180.56036377]
[275.95391846 -168.00285339]
[268.04858398 -155.25509644]
[260.29437256 -142.41485596]
[252.54011536 -129.57460022]
[244.78588867 -116.73436737]
[248.59516907 -102.38079834]
[240.91418457 -89.24849701]
[225.83302307 -85.35029602]
[225.87692261 -70.45575714]
[212.11967468 -62.64237213]
[204.36544800 -49.80212784]
[203.59321594 -42.37941360]
[196.27337646 -36.75325394]
[188.21803284 -24.09973907]
[180.16268921 -11.44622326]
[172.10734558 1.20729148]
[164.05200195 13.86080647]
[172.00102234 26.48137093]
[173.68910217 41.36289597]
[168.72821045 55.55974960]
[158.05175781 66.23838806]
[143.73945618 71.24290466]
[128.61241150 69.53012085]
[120.55706787 82.18363953]
[112.50172424 94.83715057]
[110.03279877 109.63257599]
[113.54309845 124.21604919]
[117.05339050 138.79953003]
[120.56368256 153.38301086]
[124.07397461 167.96649170]
[127.58426666 182.54995728]
[131.09455872 197.13343811]
[134.60485840 211.71691895]
[152.24391174 221.14709473]
[157.33329773 240.17871094]
[147.07412720 256.64309692]
[151.60816956 270.94143677]
[156.14222717 285.23974609]
[168.60940552 295.89346313]
[165.35098267 311.96563721]
[149.71894836 316.92260742]
[137.79418945 305.66506958]
[141.84388733 289.77380371]
[137.30984497 275.47546387]
[132.77578735 261.17712402]
[122.56941986 259.03552246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 119]
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 45]
[13 44]
[14 43]
[16 42]
[17 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[24 33]
[25 32]
[46 111]
[47 110]
[48 109]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[59 97]
[60 96]
[62 94]
[65 91]
[66 90]
[67 89]
[68 88]
[70 87]
[72 86]
[73 85]
[74 84]
[76 82]
[77 81]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
