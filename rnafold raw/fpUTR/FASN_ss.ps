%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGACGGCAGCGGCCCCGGCCUCCCUCUCCGCCGCGCUUCAGCCUCCCGCUCCGCCGCGCUCCAGCCUCGCUCUCCGCCGCCCGCACCGCCGCCCGCGCCCUCACCAGAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[316.52621460 141.51980591]
[301.71719360 139.13385010]
[286.90817261 136.74789429]
[273.11221313 142.36224365]
[260.71844482 132.52835083]
[253.52230835 134.59742737]
[245.54911804 129.87670898]
[230.80885315 127.09738159]
[216.06860352 124.31805420]
[201.32833862 121.53871918]
[186.51930237 119.15277100]
[171.65202332 117.16188812]
[156.78472900 115.17100525]
[141.91743469 113.18012238]
[127.05014038 111.18923950]
[116.10675049 124.44343567]
[99.61033630 129.27041626]
[83.24826050 124.00600433]
[72.66158295 110.46517944]
[57.74656296 112.05958557]
[42.83153915 113.65398407]
[27.91651726 115.24839020]
[21.76785088 129.32281494]
[9.39621925 138.42437744]
[-5.87047005 140.10478210]
[-19.92555428 133.91203308]
[-28.98828506 121.51193237]
[-30.62083626 106.24005127]
[-24.38405609 92.20444489]
[-11.95561028 83.18062592]
[3.32131267 81.59595490]
[17.33729744 87.87670135]
[26.32211494 100.33336639]
[41.23713684 98.73896790]
[56.15216064 97.14456177]
[71.06718445 95.55016327]
[71.75833893 92.29819489]
[72.81378174 89.14557648]
[60.77310562 80.20006561]
[44.42955780 78.85081482]
[37.67188263 63.90873337]
[47.45180130 50.74494553]
[63.70856857 52.90123367]
[69.71862030 68.15938568]
[81.75929260 77.10489655]
[95.81825256 71.02722168]
[111.02204132 72.88130188]
[123.20836639 82.15956879]
[129.04101562 96.32194519]
[143.90830994 98.31282806]
[158.77560425 100.30371094]
[173.64289856 102.29459381]
[188.51019287 104.28547668]
[194.95603943 102.05735016]
[200.66299438 103.32302856]
[204.10766602 106.79846191]
[218.84793091 109.57778931]
[233.58819580 112.35712433]
[248.32844543 115.13645172]
[263.10440063 117.71932220]
[277.95959473 112.27563477]
[289.29409790 121.93887329]
[304.10314941 124.32482147]
[318.91217041 126.71077728]
[331.63647461 117.72579956]
[346.62094116 120.35646057]
[355.10830688 132.54251099]
[369.91735840 134.92846680]
[378.48468018 127.96823120]
[389.25527954 126.96623993]
[398.57040405 132.01611328]
[403.40231323 141.19692993]
[418.06335449 144.36767578]
[432.72439575 147.53840637]
[447.38546753 150.70915222]
[462.04650879 153.87988281]
[474.14440918 139.15692139]
[491.91204834 132.49389648]
[510.55014038 135.60513306]
[525.06689453 147.57624817]
[531.61499023 165.13088989]
[546.53002930 166.72528076]
[561.44500732 168.31968689]
[573.67309570 158.67022705]
[588.77636719 160.49964905]
[597.90026855 172.21672058]
[612.81530762 173.81112671]
[624.95623779 163.69316101]
[640.68786621 165.20681763]
[650.67687988 177.45405579]
[648.99700928 193.16880798]
[636.64483643 203.02780151]
[620.94873047 201.18185425]
[611.22088623 188.72615051]
[596.30584717 187.13174438]
[584.91131592 196.65541077]
[569.76269531 195.25091553]
[559.85064697 183.23471069]
[544.93560791 181.64030457]
[530.02056885 180.04591370]
[524.93267822 190.16590881]
[516.94183350 198.23173523]
[506.82202148 203.43853760]
[495.56066895 205.25950623]
[484.26248169 203.49919128]
[474.04098511 198.31422424]
[465.90878296 190.19960022]
[460.67730713 179.94145203]
[458.87576294 168.54093933]
[444.21472168 165.37019348]
[429.55368042 162.19946289]
[414.89260864 159.02871704]
[400.23156738 155.85798645]
[382.42395020 163.19639587]
[367.53140259 149.73748779]
[352.72238159 147.35153198]
[340.83709717 156.25526428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[5 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[19 36]
[20 35]
[21 34]
[22 33]
[38 45]
[39 44]
[67 116]
[68 115]
[72 113]
[73 112]
[74 111]
[75 110]
[76 109]
[81 100]
[82 99]
[83 98]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
