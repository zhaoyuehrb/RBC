%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGUGCGUUGCCACGGAGACGGAGCAGGGCUACUAGGACGCACGCGCGAGAUAGAACCUCUAGUCUCGUGGAGAGAUUGAAG\
) } def
/len { sequence length } bind def

/coor [
[87.84682465 108.78208160]
[88.03903198 104.39539337]
[89.54050446 100.82355499]
[91.91547394 98.40315247]
[78.19035339 92.35162354]
[64.46522522 86.30009460]
[50.63308716 80.49735260]
[36.69843674 74.94528198]
[22.76378441 69.39320374]
[8.82913303 63.84113312]
[-5.10551739 58.28906250]
[-19.04016876 52.73698807]
[-33.79634094 50.04341125]
[-48.79389572 50.31422424]
[-63.79145050 50.58503342]
[-74.72606659 61.67881012]
[-89.93958282 61.73980713]
[-100.44841766 51.24695206]
[-115.44596863 51.51776505]
[-129.21109009 60.43143845]
[-143.68797302 52.72742081]
[-143.98403931 36.33094788]
[-129.79473877 28.10930252]
[-115.71678162 36.52021027]
[-100.71923065 36.24939728]
[-90.59606171 25.38398933]
[-75.39026642 24.89570236]
[-64.06226349 35.58747864]
[-49.06470871 35.31666946]
[-34.06715393 35.04585648]
[-45.09739304 24.88053131]
[-50.34700775 10.82914162]
[-48.68401718 -4.07838821]
[-40.46701431 -16.62752533]
[-27.46784019 -24.11227989]
[-12.48953438 -24.91869926]
[1.23811257 -18.87289810]
[10.75498390 -7.27853870]
[14.00894260 7.36426687]
[10.29833221 21.89806747]
[0.42327663 33.18891525]
[-13.48809624 38.80233765]
[0.44655502 44.35441208]
[14.38120556 49.90648270]
[28.31585693 55.45855713]
[42.25050735 61.01062775]
[56.18515778 66.56269836]
[63.73796082 66.10245514]
[70.51675415 72.57497406]
[84.24187469 78.62650299]
[97.96700287 84.67803192]
[112.94499969 83.86594391]
[125.93538666 76.36594391]
[138.92576599 68.86594391]
[141.46284485 53.43554306]
[153.35844421 43.28524017]
[168.99583435 43.20769882]
[180.99151611 53.23952866]
[183.68148804 68.64400482]
[175.79563904 82.14761353]
[161.05741882 87.37435913]
[146.42576599 81.85632324]
[133.43537903 89.35632324]
[120.44499969 96.85632324]
[119.63291931 111.83432770]
[131.73625183 120.69487000]
[143.83959961 129.55540466]
[155.94293213 138.41595459]
[168.04627991 147.27648926]
[180.14961243 156.13703918]
[192.25294495 164.99757385]
[208.26344299 163.97596741]
[218.93740845 175.95286560]
[216.08670044 191.74061584]
[201.89813232 199.22821045]
[187.25596619 192.67179871]
[183.39241028 177.10092163]
[171.28906250 168.24037170]
[159.18572998 159.37983704]
[147.08239746 150.51928711]
[134.97904968 141.65875244]
[122.87571716 132.79820251]
[110.77237701 123.93766785]
[103.56935120 123.73181152]
[97.30373383 121.57979584]
[92.44573975 117.97343445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 30]
[14 29]
[15 28]
[18 25]
[19 24]
[52 64]
[53 63]
[54 62]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
