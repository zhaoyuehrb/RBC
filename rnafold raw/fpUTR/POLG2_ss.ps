%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGCGCCGUGGCCUCUCCGGAUUCUGUUAACGGUAGUGGUGGCUUGUUGGGAUCCGUUGAGUGAUGGGAGAGUGUGCUCUUUAACUUCGGAGAGAG\
) } def
/len { sequence length } bind def

/coor [
[46.79385376 250.97900391]
[39.92045593 264.31155396]
[33.04705811 277.64407349]
[40.14579010 291.44216919]
[37.74519348 306.77243042]
[26.76834869 317.74005127]
[11.43607712 320.12774658]
[-2.35604930 313.01739502]
[-9.30467796 299.14309692]
[-6.73791838 283.83978271]
[4.35725737 272.99191284]
[19.71452713 270.77066040]
[26.58792496 257.43814087]
[33.46132278 244.10560608]
[39.69254684 230.46113586]
[45.26748657 216.53561401]
[50.84242249 202.61009216]
[56.41735840 188.68457031]
[61.99229431 174.75904846]
[67.56723022 160.83354187]
[73.14216614 146.90802002]
[78.71710968 132.98249817]
[84.29204559 119.05697632]
[75.35340118 98.43366241]
[86.83088684 79.10782623]
[83.06366730 64.58860016]
[69.72223663 56.54845047]
[66.10857391 41.77022171]
[73.85584259 29.10075378]
[70.08862305 14.58152390]
[66.32140350 0.06229331]
[62.55418396 -14.45693684]
[58.78696442 -28.97616768]
[55.01974487 -43.49539948]
[51.25252533 -58.01462936]
[36.96380997 -63.77125931]
[28.89886475 -76.68675995]
[29.97277451 -91.69711304]
[39.56465149 -103.06082153]
[28.60945702 -114.47547150]
[32.90233994 -128.73802185]
[18.41176033 -134.28805542]
[9.97909927 -147.31378174]
[10.84688663 -162.80657959]
[20.68144035 -174.80912781]
[35.70117188 -178.70620728]
[50.13069153 -172.99931335]
[58.42155075 -159.88287354]
[57.38574982 -144.40040588]
[47.42156982 -132.50524902]
[58.10730743 -122.12910461]
[54.08388138 -106.82804108]
[67.99073792 -101.56140900]
[76.22715759 -88.96675110]
[75.45908356 -73.75940704]
[65.77175140 -61.78184891]
[69.53897095 -47.26261902]
[73.30619049 -32.74338913]
[77.07341766 -18.22415733]
[80.84063721 -3.70492649]
[84.60785675 10.81430435]
[88.37507629 25.33353424]
[101.30487823 32.63804245]
[105.33220673 47.30894089]
[97.58289337 60.82138062]
[101.35012054 75.34060669]
[111.94412994 78.38412476]
[120.15882111 85.73360443]
[124.35780334 95.92500305]
[139.20512390 98.05972290]
[154.05244446 100.19444275]
[168.89976501 102.32917023]
[183.74708557 104.46389008]
[198.59442139 106.59860992]
[213.60946655 100.00465393]
[226.66557312 109.92787170]
[224.33172607 126.16009521]
[209.00880432 132.00302124]
[196.45968628 121.44593048]
[181.61236572 119.31121063]
[166.76504517 117.17649078]
[151.91772461 115.04176331]
[137.07040405 112.90704346]
[122.22308350 110.77232361]
[118.08214569 116.82094574]
[112.34815979 121.38764191]
[105.52629852 124.07007599]
[98.21755981 124.63191223]
[92.64262390 138.55743408]
[87.06768799 152.48295593]
[81.49275208 166.40847778]
[75.91781616 180.33398438]
[70.34288025 194.25950623]
[64.76794434 208.18502808]
[59.19300461 222.11054993]
[53.61806870 236.03607178]
[54.43705368 241.57110596]
[53.06654358 246.32746887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[25 66]
[26 65]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[39 52]
[41 50]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
