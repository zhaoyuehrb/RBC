%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGCAGCUGAAAAUCCGGCGCGCGCAGUCUCCAGCCCCAAUUUCUACGCGCACCGGAAGACGGAGGUCCUCUUUCCUUGCCUAACGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[158.85830688 227.53181458]
[151.85440063 214.26737976]
[144.85047913 201.00296021]
[132.06570435 193.36103821]
[132.46408081 177.54486084]
[125.46016693 164.28042603]
[118.45625305 151.01599121]
[111.45233154 137.75155640]
[98.66755676 130.10964966]
[99.06593323 114.29345703]
[87.33339691 106.68824768]
[87.66963196 92.71045685]
[80.66571808 79.44602966]
[64.50310516 80.19953918]
[49.66476822 73.89440155]
[39.06478119 61.82329941]
[34.76122284 46.40586853]
[37.55669022 30.70375061]
[46.84916306 17.81262207]
[39.41939545 4.78194618]
[31.98962402 -8.24872971]
[24.55985451 -21.27940559]
[17.13008308 -34.31008148]
[3.57312655 -42.46603012]
[3.99056315 -57.35478592]
[-3.43920684 -70.38545990]
[-10.86897659 -83.41613770]
[-18.29874611 -96.44681549]
[-25.72851753 -109.47748566]
[-39.28547287 -117.63343811]
[-38.86803818 -132.52218628]
[-46.29780579 -145.55287170]
[-61.23566818 -142.97679138]
[-76.15318298 -145.66816711]
[-89.24899292 -153.30201721]
[-98.94171143 -164.95649719]
[-104.06089783 -179.22428894]
[-103.98838806 -194.38247681]
[-98.73293304 -208.60063171]
[-88.92915344 -220.16184998]
[-75.76091003 -227.67005920]
[-60.81832886 -230.21859741]
[-45.90579987 -227.49972534]
[-32.82408142 -219.84176636]
[-23.15285683 -208.16943359]
[-18.05997276 -193.89224243]
[-18.16041756 -178.73422241]
[-23.44206619 -164.52577209]
[-33.26713181 -152.98263550]
[-25.83736038 -139.95196533]
[-12.81183052 -132.72805786]
[-12.69784069 -116.90725708]
[-5.26807070 -103.87657928]
[2.16169930 -90.84590912]
[9.59146976 -77.81523132]
[17.02123833 -64.78455353]
[30.04677010 -57.56064606]
[30.16075897 -41.73985291]
[37.59053040 -28.70917511]
[45.02029800 -15.67850018]
[52.45006943 -2.64782381]
[59.87984085 10.38285255]
[73.75592041 8.74588776]
[87.24070740 12.56752586]
[98.26295471 21.29549599]
[105.11637115 33.62128067]
[106.72370148 47.67621994]
[102.80596161 61.31478500]
[93.93014526 72.44210815]
[100.93406677 85.70654297]
[112.66660309 93.31175232]
[112.33036804 107.28954315]
[125.61611176 115.88021088]
[124.71676636 130.74763489]
[131.72068787 144.01206970]
[138.72459412 157.27650452]
[145.72851562 170.54093933]
[159.01425171 179.13160706]
[158.11491394 193.99903870]
[165.11883545 207.26347351]
[172.12274170 220.52790833]
[179.76254272 233.43655396]
[188.02020264 245.95898438]
[196.27786255 258.48141479]
[204.53553772 271.00381470]
[219.89871216 275.62469482]
[225.73074341 290.57015991]
[217.55781555 304.37533569]
[201.64949036 306.45007324]
[190.20925903 295.20278931]
[192.01310730 279.26147461]
[183.75544739 266.73907471]
[175.49778748 254.21664429]
[167.24012756 241.69421387]
[163.67826843 240.66024780]
[160.49241638 237.73339844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[5 77]
[6 76]
[7 75]
[8 74]
[10 72]
[12 70]
[13 69]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
