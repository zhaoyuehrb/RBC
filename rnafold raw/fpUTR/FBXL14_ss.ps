%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCUGGGGAGAAGCGCUCUCGUCGCCUGCCCGAGGCCGGAGCGGCGGGGCCCGCGCCUCCUCCCCCCAGCGCCGCGGAGGGGGGAGGAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[71.43391418 102.70884705]
[57.66759109 108.66606140]
[43.90127182 114.62328339]
[30.23022270 120.79599762]
[16.65781784 127.18268585]
[3.08541155 133.56938171]
[-10.48699474 139.95606995]
[-24.05940056 146.34275818]
[-37.63180542 152.72944641]
[-41.89331436 158.16415405]
[-47.45041656 160.18408203]
[-52.26294708 159.06089783]
[-66.20959473 164.58276367]
[-80.15624237 170.10464478]
[-94.10289001 175.62651062]
[-108.04953766 181.14837646]
[-115.71497345 195.24165344]
[-131.53732300 197.89360046]
[-143.37902832 187.06985474]
[-142.15615845 171.07348633]
[-128.80677795 162.17552185]
[-113.57140350 167.20172119]
[-99.62475586 161.67985535]
[-85.67810822 156.15798950]
[-71.73146057 150.63612366]
[-57.78481293 145.11425781]
[-44.01849365 139.15704346]
[-30.44608879 132.77033997]
[-16.87368393 126.38365936]
[-3.30127788 119.99697113]
[10.27112770 113.61028290]
[23.84353447 107.22358704]
[28.64151955 101.42325592]
[37.94405365 100.85696411]
[51.71037292 94.89974213]
[65.47669220 88.94252777]
[72.90856934 75.91304779]
[71.02857208 61.03133011]
[66.78063202 52.73598099]
[69.33084869 45.65354156]
[67.91922760 30.72011375]
[66.50759888 15.78668404]
[65.09597778 0.85325450]
[51.09790802 -5.46731520]
[42.14854431 -17.94948196]
[40.65522385 -33.23560333]
[47.01963806 -47.21379471]
[59.52979660 -56.12398911]
[74.82052612 -57.56938553]
[88.77869415 -51.16118622]
[97.64963531 -38.62316132]
[99.04709625 -23.32797813]
[92.59517670 -9.38996220]
[80.02940369 -0.55837023]
[81.44103241 14.37505913]
[82.85265350 29.30848885]
[84.26428223 44.24191666]
[85.91029358 59.15133286]
[87.79029083 74.03305054]
[105.51167297 73.61630249]
[118.96495056 83.38707733]
[123.40719604 98.26667786]
[137.93594360 101.99702454]
[152.46469116 105.72737122]
[166.99343872 109.45772552]
[181.52218628 113.18807220]
[196.05093384 116.91841888]
[210.57968140 120.64876556]
[225.10842896 124.37911224]
[239.63717651 128.10946655]
[254.16592407 131.83981323]
[268.69467163 135.57015991]
[283.22341919 139.30050659]
[296.71612549 131.51692200]
[311.39721680 135.50698853]
[318.73452759 148.41821289]
[333.26327515 152.14855957]
[350.10845947 150.23120117]
[356.61407471 165.88729858]
[343.37078857 176.47271729]
[329.53292847 166.67730713]
[315.00418091 162.94696045]
[302.35443115 170.72636414]
[287.56704712 167.15023804]
[279.49307251 153.82925415]
[264.96432495 150.09890747]
[250.43557739 146.36856079]
[235.90682983 142.63821411]
[221.37808228 138.90786743]
[206.84933472 135.17752075]
[192.32058716 131.44715881]
[177.79183960 127.71681976]
[163.26309204 123.98647308]
[148.73434448 120.25611877]
[134.20559692 116.52577209]
[119.67684937 112.79542542]
[111.75633240 121.51317596]
[100.15424347 125.55999756]
[87.52451324 123.49874878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[37 59]
[38 58]
[40 57]
[41 56]
[42 55]
[43 54]
[62 96]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
