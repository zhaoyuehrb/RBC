%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAAUGCGUGUUCUAGCUUUCUGUGUGCUUAGGUGCCCGAGCUACUGAGGGUCUAAGUCCGGGCAGCCGAAGAGUGUGGUAGGUAACGGUCCUCAGCGCAAGGGUCAUUUCGUCGCUGGGAAGGGACGGCCCUCGCCCGCGGUG\
) } def
/len { sequence length } bind def

/coor [
[66.62847900 110.96164703]
[58.71596909 123.70496368]
[50.80346298 136.44828796]
[42.89095306 149.19160461]
[34.97844315 161.93492126]
[27.06593513 174.67823792]
[25.17554092 183.68907166]
[18.84571075 187.60679626]
[10.66268730 200.17813110]
[16.33359146 214.62182617]
[12.39907837 229.63179016]
[0.37204960 239.43640137]
[-15.12285614 240.26556396]
[-28.12753296 231.80046082]
[-33.64141464 217.29608154]
[-29.54430580 202.32968140]
[-17.41162300 192.65612793]
[-1.90863395 191.99510193]
[6.27438974 179.42378235]
[14.32261562 166.76573181]
[22.23512459 154.02241516]
[30.14763260 141.27909851]
[38.06014252 128.53578186]
[45.97265244 115.79245758]
[53.88515854 103.04913330]
[55.00611115 88.09107971]
[49.08127213 74.31079102]
[43.15643311 60.53050613]
[37.23159409 46.75022125]
[31.30675316 32.96993637]
[25.38191414 19.18964958]
[16.89837456 19.25265503]
[8.48586178 15.34520435]
[2.02310634 7.62191105]
[-9.90154552 -1.47768712]
[-21.92274857 -10.44934464]
[-34.03913498 -19.29203796]
[-46.15551758 -28.13473129]
[-58.27190399 -36.97742462]
[-70.38829041 -45.82011795]
[-82.50466919 -54.66281128]
[-98.21312714 -56.54831696]
[-103.93244934 -70.30107880]
[-116.04883575 -79.14377594]
[-128.16522217 -87.98646545]
[-140.55880737 -96.43627167]
[-153.21684265 -104.48449707]
[-165.87489319 -112.53272247]
[-182.48519897 -115.92886353]
[-183.81997681 -132.83018494]
[-167.94866943 -138.79154968]
[-157.82666016 -125.19076538]
[-145.16862488 -117.14253998]
[-132.51057434 -109.09431458]
[-128.94506836 -109.53807831]
[-124.98761749 -108.23148346]
[-121.48449707 -105.00997162]
[-119.32253265 -100.10285187]
[-107.20614624 -91.26016235]
[-95.08975983 -82.41746521]
[-80.24795532 -81.16445160]
[-73.66197968 -66.77919769]
[-61.54559326 -57.93650436]
[-49.42921066 -49.09381104]
[-37.31282425 -40.25111771]
[-25.19643974 -31.40842247]
[-13.08005619 -22.56572914]
[-5.77115345 -21.15318489]
[-0.80194688 -13.40233898]
[11.12270451 -4.30274057]
[25.67195511 -7.95230150]
[31.88992310 -21.60282898]
[30.56930923 -37.36882019]
[42.88637543 -45.74373245]
[49.10434341 -59.39426041]
[47.78372955 -75.16025543]
[60.10079575 -83.53516388]
[66.31876373 -97.18569183]
[72.53672791 -110.83621979]
[64.77644348 -124.27339172]
[66.42989349 -139.70211792]
[76.86128998 -151.18974304]
[92.05954742 -154.31904602]
[106.18063354 -147.88673401]
[113.79469299 -134.36616516]
[111.97397614 -118.95628357]
[101.41857147 -107.58249664]
[86.18725586 -104.61825562]
[79.96929169 -90.96772766]
[73.75131989 -77.31719971]
[75.51668549 -62.52758408]
[62.75487137 -53.17629242]
[56.53690338 -39.52576828]
[58.30226517 -24.73615074]
[45.54045105 -15.38486099]
[39.32248306 -1.73433411]
[39.16220093 13.26480961]
[45.08703995 27.04509544]
[51.01187897 40.82538223]
[56.93671799 54.60566711]
[62.86155701 68.38595581]
[68.78639984 82.16623688]
[127.49423981 87.69969940]
[141.45733643 93.17981720]
[155.42045593 98.65993500]
[169.38356018 104.14004517]
[183.34666443 109.62016296]
[180.23069763 94.94737244]
[189.58941650 83.22498322]
[204.58792114 83.01411438]
[214.27249146 94.46877289]
[211.57025146 109.22335815]
[198.45515442 116.50225067]
[211.75413513 123.44032288]
[225.05313110 130.37840271]
[238.35211182 137.31646729]
[254.16613770 136.83969116]
[261.87133789 149.58642578]
[275.17031860 156.52450562]
[291.52246094 155.28356934]
[300.54852295 168.97525024]
[292.96328735 183.51470947]
[276.56979370 183.94502258]
[268.23223877 169.82350159]
[254.93325806 162.88542175]
[240.07046509 163.85845947]
[231.41404724 150.61546326]
[218.11505127 143.67738342]
[204.81605530 136.73931885]
[191.51707458 129.80123901]
[177.86654663 123.58326721]
[163.90344238 118.10315704]
[149.94033813 112.62303925]
[135.97723389 107.14292145]
[122.01412201 101.66281128]
[110.80282593 111.62808990]
[114.60764313 126.13751984]
[118.41246796 140.64694214]
[122.21728516 155.15635681]
[132.08354187 168.94378662]
[121.56618500 182.24121094]
[105.87693787 175.81597900]
[107.70786285 158.96118164]
[103.90303802 144.45175171]
[100.09822083 129.94233704]
[96.29340363 115.43291473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[8 19]
[9 18]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[34 70]
[35 69]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[45 58]
[46 54]
[47 53]
[48 52]
[71 96]
[72 95]
[74 93]
[75 92]
[77 90]
[78 89]
[79 88]
[103 135]
[104 134]
[105 133]
[106 132]
[107 131]
[113 130]
[114 129]
[115 128]
[116 127]
[118 125]
[119 124]
[136 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
