%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUGUCUCUCGCUGCAGCCGGAGGUCAAGGUCUCGUCCUUACUGCUGUGUGUCCUCUGCUCCUAGAGUCCCAGCCUCUGUGGCCCUAUGACCUGCAGGUAUUGGGAGAUCCACAACUAAGUCGCCAGGACCCCCUGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[237.29682922 334.35052490]
[228.48799133 324.22766113]
[223.23506165 311.85473633]
[222.06674194 298.44085693]
[225.11181641 285.30157471]
[232.08512878 273.72991943]
[222.52375793 262.17221069]
[212.96240234 250.61451721]
[203.40104675 239.05682373]
[193.83967590 227.49913025]
[184.27832031 215.94142151]
[174.71696472 204.38372803]
[165.15560913 192.82603455]
[151.08123779 187.95144653]
[148.24636841 172.38627625]
[138.68501282 160.82858276]
[129.12365723 149.27088928]
[117.72474670 150.68365479]
[106.95952606 146.34558105]
[99.57344818 137.23725891]
[97.51085663 125.57119751]
[101.40425110 114.25494385]
[88.59054565 108.66024780]
[86.64780426 94.81404114]
[77.57881165 82.86608887]
[68.50982666 70.91814423]
[59.44084167 58.97019577]
[50.37185287 47.02224731]
[41.30286789 35.07429886]
[32.10926056 23.22197151]
[22.79204369 11.46656990]
[13.47482777 -0.28883174]
[9.23630238 -1.78147399]
[6.04788971 -4.31709003]
[4.11173820 -7.42372084]
[3.45081449 -10.61273289]
[3.91963243 -13.44042969]
[-4.38124084 -25.93424797]
[-12.68211460 -38.42806625]
[-27.58564377 -35.57141113]
[-42.40750122 -38.63010025]
[-54.89536285 -47.10754013]
[-63.16376495 -59.68613815]
[-65.97875977 -74.43200684]
[-62.94196320 -89.09226990]
[-54.54664230 -101.43924713]
[-62.84751511 -113.93306732]
[-71.14838409 -126.42687988]
[-79.44926453 -138.92070007]
[-86.85523987 -144.38256836]
[-87.78994751 -151.76423645]
[-95.07991791 -157.37998962]
[-95.85982513 -164.77961731]
[-108.21518707 -168.62988281]
[-114.41255188 -179.53108215]
[-111.58731842 -191.33567810]
[-119.08731842 -204.32604980]
[-126.58731842 -217.31643677]
[-134.08732605 -230.30680847]
[-141.58732605 -243.29719543]
[-156.05220032 -251.02371216]
[-156.32278442 -267.42062378]
[-142.12071228 -275.62020874]
[-128.05584717 -267.18740845]
[-128.59693909 -250.79719543]
[-121.09693909 -237.80680847]
[-113.59693909 -224.81643677]
[-106.09693909 -211.82604980]
[-98.59693909 -198.83567810]
[-82.95943451 -190.93341064]
[-83.02936554 -172.55001831]
[-75.12503052 -159.80163574]
[-66.95544434 -147.22157288]
[-58.65456772 -134.72775269]
[-50.35369492 -122.23394012]
[-42.05282211 -109.74011993]
[-27.41728210 -112.69481659]
[-12.72572136 -109.81324005]
[-0.22290078 -101.50395203]
[8.16870975 -89.00720978]
[11.14450741 -74.20996857]
[8.22049999 -59.36095810]
[-0.18829553 -46.72893906]
[8.11257744 -34.23512268]
[16.41345024 -21.74130249]
[25.23023033 -9.60604858]
[34.54744720 2.14935350]
[43.86466217 13.90475559]
[50.52834320 17.21505547]
[53.25081635 26.00531006]
[62.31980133 37.95325851]
[71.38878632 49.90120697]
[80.45777893 61.84915543]
[89.52676392 73.79710388]
[98.59574890 85.74505615]
[111.40945435 91.33975220]
[113.35219574 105.18595886]
[132.15901184 106.99094391]
[143.53482056 121.67581940]
[140.68135071 139.70953369]
[150.24270630 151.26722717]
[159.80407715 162.82492065]
[174.56233215 168.52619934]
[176.71330261 183.26466370]
[186.27465820 194.82237244]
[195.83602905 206.38006592]
[205.39738464 217.93775940]
[214.95874023 229.49546814]
[224.52009583 241.05316162]
[234.08146667 252.61087036]
[243.64282227 264.16854858]
[259.63055420 258.96337891]
[276.35699463 260.26702881]
[291.27996826 267.85330200]
[302.14221191 280.54324341]
[307.31265259 296.38839722]
[306.03143311 312.96978760]
[298.52136230 327.76733398]
[308.55831909 338.91448975]
[318.59527588 350.06167603]
[333.57931519 355.13992310]
[336.34558105 369.77539062]
[346.38253784 380.92257690]
[361.92828369 381.90621948]
[371.94839478 393.35400391]
[370.91485596 408.16845703]
[380.95181274 419.31561279]
[390.98876953 430.46279907]
[401.02572632 441.60995483]
[411.06268311 452.75714111]
[426.81790161 457.30740356]
[430.49169922 473.28973389]
[418.30474854 484.26290894]
[402.79397583 478.93865967]
[399.91549683 462.79409790]
[389.87854004 451.64691162]
[379.84158325 440.49975586]
[369.80462646 429.35256958]
[359.76766968 418.20541382]
[344.92636108 417.68478394]
[334.58865356 406.52294922]
[335.23538208 390.95953369]
[325.19842529 379.81234741]
[310.93228149 375.53143311]
[307.44808960 360.09863281]
[297.41113281 348.95144653]
[287.37417603 337.80429077]
[275.11828613 343.04025269]
[261.82092285 344.22869873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[15 102]
[16 101]
[17 100]
[22 97]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[30 88]
[31 87]
[32 86]
[37 85]
[38 84]
[39 83]
[46 76]
[47 75]
[48 74]
[49 73]
[51 72]
[53 71]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[118 147]
[119 146]
[120 145]
[122 143]
[123 142]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
