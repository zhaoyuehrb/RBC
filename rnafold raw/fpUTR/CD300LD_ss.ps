%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGACUUCCGAGCUUGGAUUCAAGUCCCUGAAGGGCACCAGACACCUGUGAUCACCAAGGAGAGGAGAGGAGACAGGACC\
) } def
/len { sequence length } bind def

/coor [
[183.10879517 405.06887817]
[179.69099426 390.46343994]
[176.27319336 375.85803223]
[163.52235413 368.24542236]
[159.84815979 353.48211670]
[167.91941833 340.15948486]
[164.50161743 325.55404663]
[160.80467224 311.01675415]
[156.82995605 296.55294800]
[152.85522461 282.08917236]
[137.40963745 276.88912964]
[127.93682861 263.42572021]
[128.26557922 246.80242920]
[138.46311951 233.46257019]
[133.93731689 219.16163635]
[129.41149902 204.86068726]
[124.88568878 190.55973816]
[120.35988617 176.25878906]
[105.19046783 169.27185059]
[99.54027557 153.20066833]
[107.29821014 137.65963745]
[102.22795105 123.54253387]
[97.15769958 109.42543030]
[79.08109283 116.75772095]
[56.35406494 103.18683624]
[45.95257950 92.37901306]
[35.55109024 81.57118988]
[25.14960289 70.76335907]
[9.20158958 69.01969147]
[0.74351853 55.38735199]
[6.26369905 40.32391357]
[21.52752113 35.38475418]
[34.82588577 44.35877609]
[35.95742798 60.36187363]
[46.35891342 71.16970062]
[56.76040268 81.97752380]
[67.16188812 92.78534698]
[74.43053436 90.93687439]
[88.96781921 87.23993683]
[96.23645782 85.39146423]
[100.21118164 70.92766571]
[104.18590546 56.46385956]
[99.52144623 40.74206161]
[110.99951172 29.02941704]
[126.81244659 33.37488937]
[130.69326782 49.30822754]
[118.64970398 60.43858337]
[114.67498016 74.90238190]
[110.70026398 89.36618805]
[111.27480316 104.35517883]
[116.34505463 118.47228241]
[121.41530609 132.58938599]
[134.31321716 136.97021484]
[142.15109253 147.87020874]
[142.19667053 161.09939575]
[134.66082764 171.73298645]
[139.18663025 186.03393555]
[143.71244812 200.33486938]
[148.23825073 214.63581848]
[152.76406860 228.93676758]
[166.26156616 232.37199402]
[176.17384338 242.00025940]
[179.93992615 255.18243408]
[176.66255188 268.38217163]
[167.31903076 278.11444092]
[171.29374695 292.57824707]
[175.26847839 307.04205322]
[180.68986511 314.71795654]
[179.10704041 322.13626099]
[182.52484131 336.74166870]
[195.66954041 345.09957886]
[198.92762756 359.96026611]
[190.87863159 372.44021606]
[194.29643250 387.04565430]
[197.71423340 401.65109253]
[211.74923706 408.54690552]
[218.02079773 422.87176514]
[213.56767273 437.86187744]
[200.49249268 446.43939209]
[184.96894836 444.55426025]
[174.32679749 433.09655762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[6 70]
[7 69]
[8 67]
[9 66]
[10 65]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[21 52]
[22 51]
[23 50]
[25 37]
[26 36]
[27 35]
[28 34]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
