%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGGUGGUGCUAGACGUUUCGGGCAGAGCUCGGCCGCUGCGGAGGACAAGGAACUCUCCCUCUCCCACUAGUCUGACUUCUUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[125.58487701 359.26647949]
[124.03411865 344.34686279]
[122.48336029 329.42724609]
[120.93260193 314.50762939]
[119.38184357 299.58801270]
[117.83108521 284.66836548]
[116.02303314 269.77774048]
[113.95822906 254.92053223]
[104.54263306 243.37948608]
[110.30663300 228.64562988]
[100.89103699 217.10456848]
[106.65504456 202.37071228]
[104.59024048 187.51350403]
[102.52543640 172.65629578]
[100.46063232 157.79908752]
[98.39582825 142.94187927]
[83.81452942 139.80714417]
[71.18294525 131.87719727]
[62.02269363 120.10728455]
[57.43723679 105.91522217]
[57.97893906 91.01061249]
[63.58255005 77.18886566]
[73.57304382 66.11498260]
[86.74696350 59.12292099]
[84.68215942 44.26571274]
[82.61735535 29.40850830]
[78.25354004 21.13397980]
[80.74689484 14.00383091]
[79.19612885 -0.91579211]
[77.64537048 -15.83541489]
[76.09461212 -30.75503731]
[72.25402832 -45.25503540]
[66.21611786 -58.98615265]
[60.17821121 -72.71727753]
[47.54047775 -82.23558807]
[49.50019073 -97.00070953]
[43.46228409 -110.73182678]
[29.92675018 -119.99041748]
[31.44677544 -136.31896973]
[46.45868683 -142.92007446]
[59.51951599 -133.00308228]
[57.19340515 -116.76973724]
[63.23131180 -103.03862000]
[75.43717194 -94.50244904]
[73.90933228 -78.75518036]
[79.94724274 -65.02406311]
[85.98514557 -51.29294205]
[91.62441254 -65.19253540]
[103.74107361 -74.03485870]
[118.69836426 -75.16593170]
[132.00694275 -68.24626923]
[139.67230225 -55.35277176]
[139.39373779 -40.35536194]
[131.25483704 -27.75542450]
[117.69847107 -21.33477211]
[102.79349518 -23.02052689]
[91.01423645 -32.30579758]
[92.56499481 -17.38617325]
[94.11575317 -2.46655107]
[95.66651154 12.45307159]
[97.47456360 27.34370422]
[99.53936768 42.20091248]
[101.60417175 57.05811691]
[116.18547058 60.19285202]
[128.81706238 68.12280273]
[137.97731018 79.89271545]
[142.56275940 94.08477783]
[142.02105713 108.98938751]
[136.41744995 122.81113434]
[126.42695618 133.88502502]
[113.25303650 140.87707520]
[115.31784058 155.73428345]
[117.38264465 170.59149170]
[119.44744110 185.44869995]
[121.51224518 200.30590820]
[131.07553101 212.90963745]
[125.16384125 226.58082581]
[134.72712708 239.18455505]
[128.81544495 252.85572815]
[130.88024902 267.71295166]
[135.24406433 275.98745728]
[132.75070190 283.11761475]
[134.30146790 298.03723145]
[135.85223389 312.95687866]
[137.40298462 327.87649536]
[138.95375061 342.79611206]
[140.50450134 357.71572876]
[150.56127930 370.66925049]
[144.12187195 385.75122070]
[127.81060791 387.44662476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 80]
[8 79]
[10 77]
[12 75]
[13 74]
[14 73]
[15 72]
[16 71]
[24 63]
[25 62]
[26 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 47]
[33 46]
[34 45]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
