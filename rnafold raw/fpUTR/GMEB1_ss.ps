%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGAAGCCCGGCCUGGCGGCGGCGGUGGCGGUAGCUGCCGUGGCGGCCUCUGCGCAUGCUCCGUCGCCUGCCCGCCCUGGCCGCUCGCCGCCCGCCCGCCCGACGGAGACGCAGUCCCAGCUAUCUGACUUCAUGUGAAAG\
) } def
/len { sequence length } bind def

/coor [
[294.58422852 308.99044800]
[283.69039917 298.67907715]
[272.79656982 288.36770630]
[261.90270996 278.05636597]
[249.75773621 278.06137085]
[240.59288025 269.49237061]
[239.72798157 256.57257080]
[229.06329346 246.02439880]
[216.92112732 245.76261902]
[207.94671631 236.99435425]
[207.36584473 224.05868530]
[196.93544006 213.27877808]
[186.50503540 202.49885559]
[174.37155151 201.97041321]
[165.59191895 193.00711060]
[165.29536438 180.06181335]
[155.10427856 169.05535889]
[144.91319275 158.04891968]
[134.72210693 147.04248047]
[124.53102875 136.03602600]
[114.33994293 125.02958679]
[104.14886475 114.02313995]
[90.01015472 109.01344299]
[75.16283417 111.14817047]
[60.31551361 113.28289032]
[45.46819305 115.41761780]
[30.62087250 117.55233765]
[15.77355003 119.68705750]
[0.92622840 121.82178497]
[-13.92109299 123.95650482]
[-26.47019768 134.51358032]
[-41.79313278 128.67066956]
[-44.12697601 112.43843842]
[-31.07086754 102.51522827]
[-16.05581665 109.10918427]
[-1.20849419 106.97445679]
[13.63882732 104.83973694]
[28.48614883 102.70501709]
[43.33346939 100.57028961]
[58.18079376 98.43556976]
[73.02811432 96.30084991]
[87.87543488 94.16612244]
[95.84594727 81.45900726]
[91.30481720 67.16291809]
[86.76368713 52.86682892]
[82.22254944 38.57074356]
[77.68141937 24.27465439]
[73.14028931 9.97856712]
[68.59915924 -4.31752062]
[54.02204132 -9.29888248]
[45.27546692 -21.76286125]
[45.54212189 -36.80921936]
[54.51020432 -48.67140579]
[49.96907425 -62.96749496]
[45.11499023 -77.16037750]
[39.95029449 -91.24320221]
[34.78560257 -105.32601929]
[22.76982117 -115.61833191]
[25.65185928 -130.23144531]
[20.48716545 -144.31427002]
[6.04378986 -150.73022461]
[0.44559732 -165.50979614]
[7.01389599 -179.88453674]
[21.85183144 -185.32615662]
[36.15631866 -178.60624695]
[41.44075775 -163.71160889]
[34.56998825 -149.47895813]
[39.73468399 -135.39613342]
[51.38105011 -126.11112976]
[48.86842346 -110.49071503]
[54.03311920 -96.40789032]
[59.19781494 -82.32506561]
[63.14645004 -79.51497650]
[65.32724762 -74.16130066]
[64.26515961 -67.50862885]
[68.80628967 -53.21253967]
[82.97579193 -48.69997406]
[91.87638092 -36.56557846]
[91.92568970 -21.33892441]
[82.89524078 -8.85865307]
[87.43637848 5.43743467]
[91.97750854 19.73352242]
[96.51863861 34.02960968]
[101.05976868 48.32569885]
[105.60090637 62.62178421]
[110.14203644 76.91786957]
[115.15531158 103.83205414]
[125.34638977 114.83850098]
[135.53747559 125.84494781]
[145.72856140 136.85139465]
[155.91963196 147.85783386]
[166.11071777 158.86428833]
[176.30180359 169.87072754]
[193.98837280 174.86549377]
[197.28495789 192.06845093]
[207.71536255 202.84835815]
[218.14576721 213.62828064]
[235.93778992 218.23332214]
[239.61148071 235.35969543]
[250.27616882 245.90788269]
[268.16506958 250.12097168]
[272.21408081 267.16250610]
[283.10791016 277.47387695]
[294.00177002 287.78524780]
[304.89559937 298.09661865]
[318.10006714 305.21292114]
[332.70275879 308.64248657]
[341.85223389 307.55676270]
[347.58682251 312.31106567]
[362.11065674 316.06057739]
[376.63446045 319.81005859]
[393.48214722 317.91491699]
[399.96713257 333.57955933]
[386.70989990 344.14752197]
[372.88497925 334.33389282]
[358.36114502 330.58438110]
[343.83734131 326.83489990]
[329.27319336 323.24514771]
[314.67053223 319.81561279]
[325.19128418 330.50735474]
[332.90936279 343.36938477]
[337.39376831 357.68334961]
[338.39404297 372.64996338]
[335.85437012 387.43341064]
[329.91653442 401.20809937]
[320.91217041 413.20480347]
[309.34405518 422.75360107]
[295.85827637 429.32122803]
[281.20788574 432.54089355]
[266.21105957 432.23284912]
[251.70526123 428.41424561]
[238.50054932 421.29837036]
[227.33435059 411.28259277]
[218.83021545 398.92620850]
[213.46305847 384.91931152]
[211.53260803 370.04403687]
[213.14666748 355.13113403]
[218.21510315 341.01339722]
[226.45484924 328.47918701]
[237.40580750 318.22848511]
[250.45639038 310.83374023]
[264.87780762 306.70788574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[7 100]
[8 99]
[11 97]
[12 96]
[13 95]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[49 80]
[53 76]
[54 75]
[55 72]
[56 71]
[57 70]
[59 68]
[60 67]
[106 119]
[107 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
