%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCAGCGCUGAAGGAAGGUGGGAAGCCAUCAGAGCAGGAAGAUAAAAUAACUGCACAACUUACUCAAAACCCAGGACAAAUUCAGAGAGUCAAGG\
) } def
/len { sequence length } bind def

/coor [
[114.02088928 153.08702087]
[98.52971649 154.88766479]
[83.15715027 152.26026917]
[76.64889526 165.77479553]
[70.14064026 179.28933716]
[68.71586609 196.18330383]
[52.08769608 199.49092102]
[44.30620193 184.42823792]
[56.62610626 172.78108215]
[63.13436508 159.26654053]
[69.64262390 145.75201416]
[64.63487244 142.00149536]
[60.08630753 137.70562744]
[56.05597305 132.92019653]
[52.59619904 127.70734406]
[49.75190735 122.13473511]
[47.56003189 116.27473450]
[46.04903030 110.20342255]
[45.23851776 103.99963379]
[30.26933670 103.03858185]
[15.30015564 102.07752991]
[0.33097443 101.11647797]
[-14.63820648 100.15542603]
[-29.08848763 107.90922546]
[-42.88420486 99.04298401]
[-41.83350754 82.67752838]
[-27.01726341 75.64823914]
[-13.67715359 85.18624115]
[1.29202771 86.14729309]
[16.26120949 87.10835266]
[31.23038864 88.06940460]
[46.19956970 89.03045654]
[50.82966614 75.56446838]
[58.76686096 63.74195862]
[69.47731781 54.35810089]
[82.24066925 48.04402542]
[79.37329102 33.32063675]
[76.50591278 18.59724998]
[73.63853455 3.87386322]
[58.78929138 0.49452278]
[46.60223007 -8.63758469]
[39.18882751 -21.94026756]
[37.83349991 -37.10875320]
[42.77106857 -51.51501083]
[53.14607239 -62.66307068]
[67.16097260 -68.62146759]
[82.38760376 -68.35786438]
[96.18786621 -61.91793442]
[106.17077637 -50.41743851]
[110.60673523 -35.84890366]
[108.72718811 -20.73641968]
[100.85777283 -7.69831371]
[88.36191559 1.00648379]
[91.22930145 15.72987080]
[94.09667969 30.45325851]
[96.96405792 45.17664719]
[116.57274628 47.65345001]
[134.03407288 56.91289139]
[147.08554077 71.75520325]
[154.03605652 90.25724792]
[153.98503113 110.02167511]
[168.22087097 114.74829865]
[182.45669556 119.47492218]
[196.76646423 123.97276306]
[211.14648438 128.24067688]
[225.52650452 132.50859070]
[239.90652466 136.77650452]
[247.93696594 123.99314117]
[259.11932373 113.85125732]
[272.62374878 107.10345459]
[287.44815063 104.25046539]
[302.49246216 105.50399780]
[316.64028931 110.77103424]
[328.84176636 119.66072845]
[338.19146729 131.51339722]
[343.99557495 145.44949341]
[345.82339478 160.43487549]
[343.53927612 175.35752869]
[337.31274414 189.11007690]
[327.60580444 200.67201233]
[315.13882446 209.18534851]
[300.83691406 214.01834106]
[285.76138306 214.81234741]
[271.03088379 211.50845337]
[257.73858643 204.35183716]
[246.87083435 193.87355042]
[239.23410034 180.85115051]
[235.39505005 166.25100708]
[235.63861084 151.15652466]
[221.25859070 146.88861084]
[206.87857056 142.62069702]
[192.49855042 138.35278320]
[185.05175781 139.48875427]
[177.73007202 133.71075439]
[163.49424744 128.98413086]
[149.25840759 124.25750732]
[140.45137024 137.12820435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[36 56]
[37 55]
[38 54]
[39 53]
[61 96]
[62 95]
[63 94]
[64 92]
[65 91]
[66 90]
[67 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
