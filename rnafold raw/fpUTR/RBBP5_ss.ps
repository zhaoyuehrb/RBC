%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCCGCGGGGCCUUCUAAGGCCGAAAGUCUUCGGAGCUUGCGCCAGUCUCUUCGCGGCGUCCACCACUUAGACGCAAGUUGCUGAAGCCGGCCGGGGAGAAGGUGUUGUUGCCGGAGCUGAGACCGGGCGGCCACAGUCCGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[130.74240112 261.34490967]
[126.70859528 246.89746094]
[113.64655304 239.83215332]
[109.34989929 225.23786926]
[116.84920502 211.58509827]
[112.81540680 197.13764954]
[108.78161621 182.69021606]
[103.92140198 177.05628967]
[104.81801605 167.89787292]
[101.08766937 153.36912537]
[97.35732269 138.84037781]
[82.86843109 134.95809937]
[72.37348175 145.67518616]
[61.87853241 156.39227295]
[51.38358307 167.10937500]
[40.88863373 177.82646179]
[37.33663940 193.83630371]
[21.61650848 198.50637817]
[9.89976501 187.03250122]
[14.23959064 171.21801758]
[30.17154312 167.33151245]
[40.66649246 156.61442566]
[51.16144562 145.89732361]
[61.65639496 135.18023682]
[72.15134430 124.46315002]
[65.22687531 107.19602203]
[67.69353485 89.55697632]
[78.12210083 76.10889435]
[93.12805939 69.93808746]
[93.44219971 54.94137573]
[90.47794342 46.22968292]
[93.92322540 39.63478088]
[94.55136108 24.64793777]
[95.17949677 9.66109562]
[95.80763245 -5.32574701]
[96.43576813 -20.31258965]
[97.06390381 -35.29943085]
[97.53506470 -50.29203033]
[97.84919739 -65.28874207]
[98.16333771 -80.28545380]
[89.79444122 -90.15666962]
[90.40298462 -102.68156433]
[99.11361694 -111.13467407]
[99.74175262 -126.12152100]
[100.36988831 -141.10836792]
[100.99802399 -156.09519958]
[101.62615967 -171.08204651]
[93.46582794 -181.12637329]
[94.33654022 -193.63577271]
[103.22229004 -201.90460205]
[104.16415405 -216.87501526]
[105.10601044 -231.84541321]
[106.04786682 -246.81581116]
[106.98972321 -261.78622437]
[107.93157959 -276.75662231]
[108.87344360 -291.72702026]
[109.81529999 -306.69741821]
[110.44343567 -321.68426514]
[110.75756836 -336.68096924]
[111.07170868 -351.67767334]
[111.38584137 -366.67437744]
[103.93924713 -380.63357544]
[111.94139099 -393.19601440]
[112.25552368 -408.19271851]
[101.59651947 -419.55157471]
[102.12873077 -434.75588989]
[113.02333832 -444.84762573]
[105.57674408 -458.80679321]
[113.57888794 -471.36926270]
[113.89302063 -486.36596680]
[114.20716095 -501.36267090]
[114.52129364 -516.35937500]
[103.40294647 -527.59136963]
[103.56684875 -543.39483643]
[114.91577148 -554.39379883]
[130.71659851 -554.06280518]
[141.59497070 -542.59826660]
[141.09695435 -526.80181885]
[129.51800537 -516.04522705]
[129.20387268 -501.04852295]
[128.88973999 -486.05181885]
[128.57559204 -471.05511475]
[136.04466248 -458.16857910]
[128.02005005 -444.53347778]
[138.48249817 -433.99438477]
[138.37754822 -418.78109741]
[127.25223541 -407.87860107]
[126.93810272 -392.88186646]
[134.40716553 -379.99536133]
[126.38255310 -366.36026001]
[126.06841278 -351.36352539]
[125.75428009 -336.36682129]
[125.44013977 -321.37011719]
[128.08744812 -317.32281494]
[128.17468262 -311.55688477]
[124.78569794 -305.75555420]
[123.84384155 -290.78515625]
[122.90198517 -275.81475830]
[121.96012878 -260.84436035]
[121.01826477 -245.87394714]
[120.07640839 -230.90354919]
[119.13455200 -215.93315125]
[118.19269562 -200.96275330]
[126.84445953 -185.72712708]
[116.61299896 -170.45391846]
[115.98487091 -155.46707153]
[115.35673523 -140.48022461]
[114.72859955 -125.49338531]
[114.10046387 -110.50654602]
[123.06940460 -95.45545197]
[113.16004944 -79.97131348]
[112.84590912 -64.97460175]
[112.53177643 -49.97789383]
[115.55615997 -43.17967606]
[112.05074310 -34.67129517]
[111.42260742 -19.68445396]
[110.79447174 -4.69761181]
[110.16633606 10.28923035]
[109.53820801 25.27607346]
[108.91007233 40.26291656]
[108.43891144 55.25551224]
[108.12477112 70.25222778]
[122.47967529 77.10881805]
[131.98718262 90.63692474]
[133.70426941 107.71232605]
[126.58158112 124.01233673]
[111.88607025 135.11003113]
[115.61641693 149.63877869]
[119.34676361 164.16752625]
[123.22904968 178.65641785]
[127.26284790 193.10385132]
[131.29664612 207.55130005]
[144.78378296 215.34454346]
[148.66882324 230.05375671]
[141.15603638 242.86366272]
[145.18983459 257.31109619]
[153.23666382 260.03405762]
[159.45475769 265.68252563]
[162.85848999 273.25924683]
[162.94937134 281.47042847]
[159.78770447 288.94656372]
[153.96997070 294.47094727]
[156.78068542 309.20526123]
[167.89999390 321.25900269]
[162.76312256 336.83285522]
[146.65444946 339.90576172]
[136.14518738 327.31655884]
[142.04637146 312.01596069]
[139.23565674 297.28167725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[5 132]
[6 131]
[7 130]
[9 129]
[10 128]
[11 127]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[29 122]
[30 121]
[32 120]
[33 119]
[34 118]
[35 117]
[36 116]
[37 115]
[38 113]
[39 112]
[40 111]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
[50 103]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[57 96]
[58 93]
[59 92]
[60 91]
[61 90]
[63 88]
[64 87]
[67 84]
[69 82]
[70 81]
[71 80]
[72 79]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
