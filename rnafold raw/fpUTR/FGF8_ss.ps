%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCACCCUCUCCGCUCGCGCCCUGCUCAGCGCGUCCUCCCGCGGCGGCCCGCGGGACGGCGUGACCCGCCGGGCUCUCGGUGCCCCGGGGCCGCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[95.67709351 371.58618164]
[90.49765778 356.95904541]
[94.93728638 342.09063721]
[107.28885651 332.69818115]
[106.83141327 317.70513916]
[106.37397003 302.71212769]
[96.32563019 288.41415405]
[104.95069122 272.23486328]
[104.03623199 257.26275635]
[103.12177277 242.29066467]
[102.20731354 227.31855774]
[88.13668823 219.01666260]
[81.66559601 203.83605957]
[85.49539948 187.61462402]
[98.32449341 176.71748352]
[96.95387268 161.78022766]
[95.58324432 146.84298706]
[91.77293396 140.35983276]
[94.40571594 131.43040466]
[93.49125671 116.45830536]
[82.37546539 101.61721039]
[90.60477448 85.00102997]
[88.77925110 70.11252594]
[86.95373535 55.22402191]
[85.12821960 40.33552170]
[75.76893616 27.57956696]
[81.89979553 14.00526047]
[80.07427979 -0.88324112]
[66.03631592 -6.95636463]
[56.98277283 -19.16005898]
[55.26466751 -34.15720749]
[61.24393463 -47.90872955]
[73.22291565 -56.76138306]
[71.39739990 -71.64988708]
[69.57188416 -86.53839111]
[67.74636841 -101.42688751]
[65.92085266 -116.31539154]
[64.09532928 -131.20388794]
[54.73604965 -143.95985413]
[60.86691284 -157.53414917]
[59.04139328 -172.42265320]
[57.21587753 -187.31115723]
[55.39035797 -202.19966125]
[53.56484222 -217.08816528]
[51.73932648 -231.97666931]
[49.91380692 -246.86515808]
[48.08829117 -261.75366211]
[37.79444504 -274.51959229]
[43.95473480 -289.71771240]
[60.23198318 -291.71350098]
[69.88155365 -278.45385742]
[62.97679138 -263.57919312]
[64.80230713 -248.69067383]
[66.62782288 -233.80218506]
[68.45334625 -218.91368103]
[70.27886200 -204.02517700]
[72.10437775 -189.13667297]
[73.92989349 -174.24816895]
[75.75541687 -159.35966492]
[84.98412323 -147.66864014]
[78.98383331 -133.02940369]
[80.80934906 -118.14090729]
[82.63486481 -103.25240326]
[84.46038818 -88.36390686]
[86.28590393 -73.47540283]
[88.11141968 -58.58690262]
[101.87429810 -52.89052200]
[110.99871826 -40.99090195]
[112.95471191 -26.02292061]
[107.11768341 -11.99345589]
[94.96278381 -2.70875835]
[96.78829956 12.17974377]
[106.01701355 23.87077332]
[100.01672363 38.51000214]
[101.84223938 53.39850616]
[103.66775513 68.28701019]
[105.49327087 83.17550659]
[113.83559418 88.96297455]
[117.62453461 98.38278961]
[115.61313629 108.33483887]
[108.46335602 115.54384613]
[109.37781525 130.51594543]
[110.52049255 145.47235107]
[111.89112091 160.40960693]
[113.26174164 175.34684753]
[125.67670441 181.55335999]
[133.30607605 193.01789856]
[134.22267151 206.64941406]
[128.29202271 218.83647156]
[117.17941284 226.40409851]
[118.09387207 241.37620544]
[119.00833130 256.34829712]
[119.92279053 271.32040405]
[129.10961914 280.53167725]
[129.47299194 293.13272095]
[121.36699677 302.25469971]
[121.82444000 317.24771118]
[122.28188324 332.24072266]
[135.18307495 340.86273193]
[140.52088928 355.43280029]
[136.24281311 370.34848022]
[123.99385834 379.87438965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[8 93]
[9 92]
[10 91]
[11 90]
[15 85]
[16 84]
[17 83]
[19 82]
[20 81]
[22 77]
[23 76]
[24 75]
[25 74]
[27 72]
[28 71]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
