%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCAUUUCCGGGUGAAACUGGCAUUGAGGGUACUGGGGCGUGCGUGAGGCGUUUACUGAUGCUUCCUGGUCCGGUGGCCUCGGUCCCGGUAAGCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[42.52479553 431.99868774]
[33.79448700 444.57009888]
[20.21660042 451.63406372]
[4.91123676 451.56732178]
[-8.60454273 444.38525391]
[-17.22491074 431.73818970]
[-18.96896935 416.53237915]
[-13.43594837 402.26196289]
[-1.89729464 392.20623779]
[12.99549389 388.67587280]
[16.65419960 374.12890625]
[12.25494576 359.89880371]
[23.12460709 348.40267944]
[26.78331375 333.85574341]
[30.44201851 319.30877686]
[22.30178261 309.19104004]
[21.51786232 296.03286743]
[28.60646057 284.68826294]
[41.13763428 279.47378540]
[45.24257660 265.04641724]
[49.34752274 250.61901855]
[53.45246887 236.19163513]
[57.55741119 221.76425171]
[53.59846115 207.40542603]
[64.81699371 196.24948120]
[68.92193604 181.82208252]
[73.02687836 167.39469910]
[77.13182831 152.96731567]
[81.23677063 138.53993225]
[85.34171295 124.11254883]
[89.44666290 109.68516541]
[86.22286224 96.08006287]
[96.12595367 86.20989227]
[100.23089600 71.78250122]
[104.33584595 57.35511780]
[108.44078827 42.92773438]
[112.54573059 28.50035095]
[116.65068054 14.07296562]
[120.75562286 -0.35441893]
[117.09028625 -15.74519157]
[128.01519775 -25.86919594]
[132.12014771 -40.29658127]
[130.73957825 -45.69694519]
[131.60217285 -50.55341721]
[134.08392334 -54.06872177]
[137.32731628 -55.83266830]
[137.53140259 -65.14325714]
[143.13420105 -70.16281128]
[148.98098755 -83.97639465]
[154.82777405 -97.78997803]
[160.67456055 -111.60356140]
[166.52134705 -125.41714478]
[172.36813354 -139.23072815]
[178.21492004 -153.04431152]
[184.06170654 -166.85789490]
[181.51055908 -183.05738831]
[194.43252563 -193.15466309]
[209.53459167 -186.76251221]
[211.28105164 -170.45661926]
[197.87528992 -161.01110840]
[192.02850342 -147.19752502]
[186.18171692 -133.38394165]
[180.33493042 -119.57035828]
[174.48814392 -105.75677490]
[168.64135742 -91.94319153]
[162.79457092 -78.12960815]
[156.94778442 -64.31602478]
[151.31440735 -50.41404343]
[146.54753113 -36.19163513]
[142.44258118 -21.76424980]
[146.40153503 -7.40542078]
[135.18301392 3.75052595]
[131.07806396 18.17790985]
[126.97312164 32.60529709]
[122.86817169 47.03268051]
[118.76322937 61.46006393]
[114.65828705 75.88745117]
[110.55333710 90.31483459]
[113.77713776 103.91993713]
[103.87404633 113.79010773]
[99.76910400 128.21749878]
[95.66415405 142.64488220]
[91.55921173 157.07226562]
[87.45426941 171.49964905]
[83.34931946 185.92703247]
[79.24437714 200.35441589]
[82.90971375 215.74519348]
[71.98479462 225.86920166]
[67.87985229 240.29658508]
[63.77490616 254.72396851]
[59.66996384 269.15133667]
[55.56501770 283.57873535]
[64.35568237 298.60617065]
[59.73314285 315.04284668]
[44.98897171 322.96746826]
[41.33026886 337.51443481]
[37.67156219 352.06140137]
[41.80912018 367.33200073]
[31.20115280 377.78762817]
[27.54244804 392.33456421]
[38.99298477 402.49053955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[13 97]
[14 96]
[15 95]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[31 80]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[41 70]
[42 69]
[46 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
