%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCGCGCGAGAUUUGAAUUUCCUCUGCGUGCGGUCAGUGCCCGCGCAGCGUUGAGUUGCACAGCGGUAUUCUCACCAGGCCCUGCAAUCGGUGGGCCACAGUGCCGGCCACAGAG\
) } def
/len { sequence length } bind def

/coor [
[15.72601795 249.50030518]
[5.45802259 238.56558228]
[1.86243021 224.00289917]
[5.86183834 209.54429626]
[-6.63787031 217.83630371]
[-19.13757896 226.12831116]
[-31.63728714 234.42030334]
[-44.13699722 242.71231079]
[-56.63670731 251.00430298]
[-69.02492523 259.46197510]
[-81.29946899 268.08377075]
[-93.57401276 276.70559692]
[-91.54149628 291.87554932]
[-96.80252075 306.24844360]
[-108.14812469 316.52148438]
[-122.97118378 320.33404541]
[-137.86546326 316.80996704]
[-149.40837097 306.75912476]
[-154.94741821 292.49105835]
[-153.20979309 277.28451538]
[-144.59477234 264.63381958]
[-131.08203125 257.44601440]
[-115.77669525 257.37283325]
[-102.19582367 264.43103027]
[-89.92127991 255.80923462]
[-77.64673615 247.18742371]
[-73.93447876 240.68475342]
[-64.92870331 238.50459290]
[-52.42899704 230.21260071]
[-39.92929077 221.92059326]
[-27.42958069 213.62860107]
[-14.92987156 205.33659363]
[-2.43016267 197.04458618]
[8.85839939 187.16691589]
[18.73606873 175.87835693]
[28.61374092 164.58979797]
[38.49140930 153.30123901]
[41.04959869 138.62796021]
[55.96003342 133.33746338]
[65.83770752 122.04889679]
[75.71537781 110.76033783]
[85.59304810 99.47177124]
[89.53958893 85.00025940]
[86.76025391 70.25999451]
[83.98092651 55.51973343]
[81.20159149 40.77947235]
[77.83597565 26.16192627]
[73.88943481 11.69040775]
[69.94289398 -2.78111005]
[65.99636078 -17.25262833]
[62.04981995 -31.72414589]
[48.89013290 -40.90032196]
[48.00325394 -56.91884232]
[60.06952286 -67.49166870]
[75.83273315 -64.50823975]
[83.20069122 -50.25717926]
[76.52133942 -35.67068481]
[80.46788025 -21.19916725]
[84.41441345 -6.72764826]
[88.36095428 7.74386978]
[92.30749512 22.21538734]
[95.30326843 24.29693985]
[97.38317871 27.99480629]
[97.77005005 32.83456039]
[95.94185638 38.00014114]
[98.72118378 52.74040222]
[101.50051880 67.48066711]
[104.27984619 82.22092438]
[108.90761566 67.95264435]
[109.07951355 52.95363235]
[116.50305176 39.91940308]
[129.31585693 32.11991119]
[144.30352783 31.51184082]
[157.70605469 38.24774170]
[166.16108704 50.63775253]
[167.54748535 65.57354736]
[161.51744080 79.30812073]
[149.58372498 88.39582825]
[134.74050903 90.55684662]
[121.21269226 97.03742981]
[136.19143677 97.83576202]
[151.17016602 98.63409424]
[166.14891052 99.43242645]
[181.12765503 100.23075867]
[189.99339294 97.53716278]
[196.49288940 101.25497437]
[211.44508362 102.45176697]
[224.54138184 93.18535614]
[239.91087341 97.78517914]
[245.76339722 112.72263336]
[237.60937500 126.53898621]
[221.70390320 128.63551331]
[210.24829102 117.40394592]
[195.29611206 116.20715332]
[180.32931519 115.20950317]
[165.35057068 114.41117096]
[150.37184143 113.61283875]
[135.39309692 112.81450653]
[120.41436005 112.01617432]
[113.01110077 115.49097443]
[105.88367462 115.70615387]
[100.24292755 113.31169128]
[96.88160706 109.34944153]
[87.00393677 120.63800812]
[77.12626648 131.92657471]
[67.24859619 143.21513367]
[63.98389053 158.69583130]
[49.77997208 163.17890930]
[39.90230179 174.46746826]
[30.02463150 185.75602722]
[20.14696121 197.04458618]
[35.00687790 194.99940491]
[48.96379089 200.49526978]
[58.43957901 212.12322998]
[61.00494003 226.90223694]
[56.00220108 241.04341125]
[44.71390533 250.92137146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 26]
[11 25]
[12 24]
[34 111]
[35 110]
[36 109]
[37 108]
[39 106]
[40 105]
[41 104]
[42 103]
[43 68]
[44 67]
[45 66]
[46 65]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
