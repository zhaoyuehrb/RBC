%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCAGCUUCGCGCAGACCCGGAAGCGGACGGCGUGGAGUGACUAUCCCACCGCCGCGGGAUUGACUUCUAAAGACUCUUGGUAUGUGAGGAAGAAACCUGGAAGAGGAAGAGGAAAGCAAAGGAGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[97.92759705 124.42419434]
[92.14705658 138.26564026]
[86.36651611 152.10707092]
[80.58598328 165.94850159]
[74.80544281 179.78994751]
[81.04206085 194.31166077]
[75.10610199 208.95883179]
[60.51926041 215.04158020]
[45.93565750 208.95108032]
[40.00748062 194.30075073]
[46.25181580 179.78236389]
[60.96400452 174.00939941]
[66.74454498 160.16796875]
[72.52508545 146.32653809]
[78.30562592 132.48509216]
[84.08615875 118.64366150]
[80.36182404 114.66896057]
[77.60720825 109.96990967]
[75.95833588 104.77855682]
[75.49662781 99.35124207]
[61.34249878 94.38529205]
[47.18836975 89.41934204]
[42.75080872 90.43804169]
[38.65230560 89.98023987]
[35.32967377 88.34794617]
[33.07012558 85.95732117]
[31.98648643 83.27738190]
[18.35522079 77.01730347]
[4.72395277 70.75723267]
[-8.90731430 64.49715424]
[-18.10467339 63.74229813]
[-22.78031158 57.92953873]
[-36.26222229 51.35397339]
[-49.74413300 44.77840424]
[-65.53945160 45.68304825]
[-73.58683777 33.14953995]
[-82.76414490 32.18087769]
[-87.30326080 26.26089478]
[-100.62851715 19.37339783]
[-113.95376587 12.48590088]
[-128.31285095 18.67869759]
[-143.27828979 14.14331627]
[-151.78385925 1.02122474]
[-149.81349182 -14.49172688]
[-138.29753113 -25.07079697]
[-122.67346954 -25.72087097]
[-110.31850433 -16.13500595]
[-107.06626892 -0.83935302]
[-93.74102020 6.04814386]
[-80.41576385 12.93564034]
[-67.01127625 19.66762733]
[-52.18026733 18.29265785]
[-43.16856384 31.29649353]
[-29.68665504 37.87206268]
[-16.20474434 44.44762802]
[-2.64723706 50.86588669]
[10.98402977 57.12596130]
[24.61529732 63.38603973]
[38.24656296 69.64611816]
[52.15431976 75.26521301]
[66.30844879 80.23116302]
[80.46257782 85.19712067]
[102.27838135 75.59415436]
[121.93976593 89.06917572]
[136.76849365 86.80889130]
[151.59721375 84.54860687]
[166.42594910 82.28832245]
[181.25466919 80.02803802]
[196.08338928 77.76775360]
[210.91212463 75.50746155]
[225.74084473 73.24717712]
[240.56958008 70.98689270]
[245.28576660 53.77062988]
[256.97052002 40.34524536]
[273.27511597 33.34007645]
[290.95211792 34.10087967]
[306.50219727 42.43153763]
[316.86672974 56.64190674]
[331.50164795 53.35272980]
[346.13659668 50.06354904]
[360.77151489 46.77436829]
[375.40646362 43.48519135]
[378.06311035 28.54471207]
[386.21548462 15.79395771]
[398.59506226 7.15916729]
[413.29757690 3.93060517]
[428.07592773 6.56983757]
[440.68356323 14.64403152]
[449.21612549 26.89658165]
[460.98379517 16.32150650]
[475.09793091 21.07968140]
[489.73287964 17.79050064]
[504.36782837 14.50132179]
[512.60778809 1.01510477]
[527.98992920 -2.61327004]
[541.38830566 5.76884747]
[544.85382080 21.18849564]
[536.33056641 34.49747086]
[520.87512207 37.79979324]
[507.65698242 29.13625526]
[493.02206421 32.42543411]
[478.38711548 35.71461487]
[467.66622925 46.05442429]
[452.50531006 41.53151703]
[450.03598022 56.25672150]
[442.09555054 68.94905853]
[429.86767578 77.65789795]
[415.19760132 81.03078461]
[400.31384277 78.52339172]
[387.48959351 70.48709869]
[378.69564819 58.12012482]
[364.06069946 61.40930557]
[349.42578125 64.69848633]
[334.79083252 67.98766327]
[320.15591431 71.27684021]
[318.65863037 83.56639099]
[313.42025757 94.81111908]
[304.94158936 103.89999390]
[294.04440308 109.92978668]
[281.79174805 112.29483795]
[269.38439941 110.74787140]
[258.04306030 105.42574310]
[248.88830566 96.83747101]
[242.82986450 85.81562042]
[228.00112915 88.07590485]
[213.17240906 90.33618927]
[198.34368896 92.59647369]
[183.51495361 94.85676575]
[168.68623352 97.11705017]
[153.85749817 99.37733459]
[139.02877808 101.63761902]
[124.20005035 103.89790344]
[121.10391235 112.46840668]
[115.09107208 119.31568909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[20 62]
[21 61]
[22 60]
[27 59]
[28 58]
[29 57]
[30 56]
[32 55]
[33 54]
[34 53]
[36 51]
[38 50]
[39 49]
[40 48]
[64 132]
[65 131]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
[71 125]
[72 124]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[89 104]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
