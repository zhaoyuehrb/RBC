%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUUUAAAUAGCCAGCACCUUCUCCUUCCCCCUUAGAUAAUUCUUCUCCCCUGACUGGACCUCUGGCAGCAGCUUCACUAAGGUGGG\
) } def
/len { sequence length } bind def

/coor [
[88.01098633 359.17877197]
[84.65210724 343.49127197]
[94.93387604 331.17605591]
[94.93387604 316.17605591]
[94.93387604 301.17605591]
[94.93387604 286.17605591]
[94.93387604 271.17605591]
[94.93387604 256.17605591]
[94.93387604 241.17605591]
[81.40722656 232.05101013]
[75.85657501 216.53221130]
[80.62194824 200.58247375]
[94.03919983 190.45356750]
[93.52145386 175.46249390]
[93.00371552 160.47143555]
[84.30813599 151.87065125]
[83.87744141 139.24372864]
[92.50000000 129.46411133]
[92.50000000 114.46411133]
[83.70946503 100.28122711]
[92.00522614 85.80337524]
[91.48748016 70.81231689]
[76.26338959 61.30174255]
[69.69824982 44.76083374]
[74.17803955 27.69739342]
[87.78141785 16.70868492]
[86.23065948 1.78906202]
[84.67990112 -13.13056087]
[69.84066010 -15.90125370]
[56.39696503 -22.73421860]
[45.43446350 -33.06807709]
[37.83571625 -46.05912781]
[34.20917130 -60.65022278]
[34.84043503 -75.65680695]
[39.66980743 -89.86307526]
[48.29780960 -102.12045288]
[60.01822281 -111.44049835]
[73.87586975 -117.07458496]
[72.32511139 -131.99420166]
[70.77435303 -146.91383362]
[57.71979523 -155.52270508]
[53.30266953 -170.52346802]
[59.60860062 -184.83322144]
[73.66012573 -191.69534302]
[88.82254028 -187.86975098]
[97.93661499 -175.16276550]
[96.69896698 -159.57423401]
[85.69396973 -148.46458435]
[87.24473572 -133.54496765]
[88.79549408 -118.62534332]
[103.51561737 -115.96165466]
[116.90224457 -109.25125885]
[127.86666870 -99.03033447]
[135.51446533 -86.12095642]
[139.21847534 -71.56498718]
[138.67025757 -56.53995895]
[133.90568542 -42.26385498]
[125.30278778 -29.89635277]
[113.55174255 -20.44462395]
[99.59952545 -14.68132019]
[101.15028381 0.23830304]
[102.70104218 15.15792561]
[114.20407104 19.73303795]
[122.65730286 28.87671661]
[126.36022949 40.84231949]
[124.52803802 53.30685043]
[117.45697021 63.82189178]
[106.47854614 70.29457092]
[106.99628448 85.28563690]
[115.08702850 93.84840393]
[115.29036713 105.62718964]
[107.50000000 114.46411133]
[107.50000000 129.46411133]
[117.10042572 145.06004333]
[107.99477386 159.95368958]
[108.51251984 174.94476318]
[109.03025818 189.93582153]
[121.09079742 196.85542297]
[128.05357361 208.76506042]
[128.16548157 222.45127869]
[121.50527191 234.28326416]
[109.93387604 241.17605591]
[109.93387604 256.17605591]
[109.93387604 271.17605591]
[109.93387604 286.17605591]
[109.93387604 301.17605591]
[109.93387604 316.17605591]
[109.93387604 331.17605591]
[120.21564484 343.49127197]
[116.85675812 359.17877197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[13 77]
[14 76]
[15 75]
[18 73]
[19 72]
[21 69]
[22 68]
[26 62]
[27 61]
[28 60]
[38 50]
[39 49]
[40 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
