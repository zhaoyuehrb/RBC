%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCACCAGGCGCGGUCCGGAGGCCGAGGGCGACCACAGCAGCCUCCGCCUCCUGCUGCUCAGGACUAUUCUGCGCUGGGCUAGUCGGCGGUGACCCGGACUGCGCCCGGCAGUGGCUUCGCGGGCGACGCGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[219.78558350 371.18664551]
[218.10456848 366.71347046]
[218.39715576 361.33541870]
[211.58729553 347.97033691]
[198.85101318 345.72280884]
[189.61524963 336.39279175]
[187.43310547 323.24945068]
[193.32846069 311.08428955]
[186.82020569 297.56976318]
[174.32699585 289.45999146]
[175.31037903 273.66937256]
[168.80212402 260.15481567]
[162.29386902 246.64028931]
[155.78561401 233.12576294]
[149.27735901 219.61123657]
[142.76910400 206.09669495]
[136.26084900 192.58216858]
[129.75259399 179.06762695]
[123.24433899 165.55310059]
[116.73608398 152.03855896]
[110.22782135 138.52403259]
[103.71956635 125.00949860]
[95.19840240 125.83419037]
[86.56510162 123.72936249]
[78.83214569 118.72399902]
[72.97518158 111.19734955]
[69.81223297 101.85568237]
[69.89502716 91.66771698]
[55.03078079 89.65422058]
[40.16653442 87.64071655]
[25.30228615 85.62722015]
[10.39660358 83.94775391]
[-4.54301071 82.60316467]
[-15.49962711 93.76052094]
[-31.06958008 95.21331024]
[-43.90121460 86.27556610]
[-47.93582153 71.16742706]
[-41.26838684 57.02248383]
[-27.04706955 50.51955414]
[-11.98673725 54.72911835]
[-3.19842124 67.66355133]
[11.74119282 69.00814056]
[15.97198963 66.63442993]
[21.75063896 66.95136261]
[27.31578636 70.76296997]
[42.18003082 72.77647400]
[57.04427719 74.78997040]
[71.90852356 76.80346680]
[83.63599396 67.45112610]
[84.98058319 52.51150894]
[86.32518005 37.57189560]
[87.66976929 22.63228035]
[81.20065308 8.19409752]
[90.04766846 -3.78837228]
[91.39225769 -18.72798729]
[84.92314148 -33.16616821]
[93.77015686 -45.14863968]
[95.11474609 -60.08825302]
[96.45933533 -75.02787018]
[97.63622284 -89.98162842]
[98.64526367 -104.94765472]
[99.65429688 -119.91367340]
[100.66333008 -134.87969971]
[101.67236328 -149.84571838]
[102.68140411 -164.81173706]
[92.56044006 -176.65251160]
[93.79694366 -191.81581116]
[105.14768219 -201.39163208]
[94.56198883 -213.12699890]
[95.45835114 -228.90585327]
[107.30497742 -239.36686707]
[123.07347107 -238.30374146]
[133.40866089 -226.34716797]
[132.17886353 -210.59080505]
[120.11370087 -200.38259888]
[130.07632446 -189.36979675]
[129.26622009 -174.17774963]
[117.64742279 -163.80270386]
[116.63838959 -148.83668518]
[115.62935638 -133.87066650]
[114.62031555 -118.90464020]
[113.61128235 -103.93861389]
[112.60224915 -88.97259521]
[115.31306458 -82.03007507]
[111.39895630 -73.68328094]
[110.05436707 -58.74366379]
[108.70977020 -43.80405045]
[115.27506256 -30.43444824]
[106.33187103 -17.38339615]
[104.98728180 -2.44378257]
[111.55257416 10.92581940]
[102.60938263 23.97686958]
[101.26479340 38.91648483]
[99.92020416 53.85609818]
[98.57561493 68.79571533]
[120.29659271 78.93415833]
[127.26768494 100.22971344]
[117.23410034 118.50124359]
[123.74235535 132.01577759]
[130.25061035 145.53030396]
[136.75886536 159.04484558]
[143.26712036 172.55937195]
[149.77537537 186.07391357]
[156.28363037 199.58843994]
[162.79190063 213.10298157]
[169.30015564 226.61750793]
[175.80841064 240.13203430]
[182.31666565 253.64657593]
[188.82492065 267.16110229]
[201.78366089 276.23754883]
[200.33474731 291.06149292]
[206.84300232 304.57604980]
[223.42742920 310.01608276]
[230.83804321 325.44598389]
[224.95239258 341.16046143]
[231.76225281 354.52557373]
[239.01803589 367.65393066]
[246.71151733 380.53063965]
[254.40501404 393.40737915]
[269.46759033 397.37680054]
[277.08645630 410.54522705]
[273.20941162 424.88064575]
[280.90289307 437.75738525]
[288.59637451 450.63409424]
[296.28988647 463.51083374]
[311.43270874 468.80932617]
[316.59539795 483.99899292]
[307.81753540 497.42764282]
[291.83276367 498.79397583]
[280.90322876 487.04983521]
[283.41314697 471.20431519]
[275.71966553 458.32760620]
[268.02615356 445.45086670]
[260.33267212 432.57412720]
[245.87176514 429.19512939]
[237.88603210 416.24591064]
[241.52827454 401.10086060]
[233.83479309 388.22415161]
[226.14129639 375.34741211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[8 112]
[9 111]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[28 48]
[29 47]
[30 46]
[31 45]
[32 42]
[33 41]
[49 95]
[50 94]
[51 93]
[52 92]
[54 90]
[55 89]
[57 87]
[58 86]
[59 85]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[68 75]
[117 139]
[118 138]
[119 137]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
