%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCGCGGUCUCAGCUCUCGGCUGGGGUUCGUCACUGGGCGCGGGAUUUGGCCGCCGCGGGGCUCCGGAGCCGCUCGCUCCCGACACGGCUCACG\
) } def
/len { sequence length } bind def

/coor [
[100.86593628 271.52102661]
[100.38516235 256.52874756]
[99.90438843 241.53645325]
[99.42361450 226.54415894]
[98.94284058 211.55186462]
[98.46206665 196.55957031]
[95.03742981 189.85011292]
[98.21394348 181.08071899]
[98.21394348 166.08071899]
[97.97352600 151.08265686]
[97.49275208 136.09036255]
[97.01197815 121.09806824]
[84.84851837 112.32023621]
[70.46850586 116.58815002]
[56.08848572 120.85606384]
[41.70846939 125.12397766]
[27.32845116 129.39189148]
[12.94843292 133.65980530]
[-0.51568341 143.96290588]
[-14.14337444 133.87715149]
[-8.22429848 117.99002838]
[8.68051910 119.27978516]
[23.06053734 115.01187134]
[37.44055557 110.74395752]
[51.82057190 106.47604370]
[66.20059204 102.20812988]
[80.58060455 97.94021606]
[89.16236115 85.63763428]
[88.20130157 70.66844940]
[79.45814514 63.80891800]
[76.10529327 53.44692993]
[79.05055237 43.19252777]
[87.05133057 36.47476959]
[87.05133057 21.47476959]
[87.05133057 6.47476959]
[83.87481689 -2.29461122]
[87.29945374 -9.00407696]
[87.78022766 -23.99637032]
[88.26100159 -38.98866272]
[80.96999359 -53.02973938]
[89.11125183 -65.50247955]
[86.21743774 -74.36916351]
[89.85536957 -80.96542358]
[90.81642151 -95.93460083]
[91.77747345 -110.90377808]
[92.73852539 -125.87296295]
[81.30388641 -136.53987122]
[79.45231628 -152.06744385]
[88.05807495 -165.12405396]
[103.05779266 -169.54475403]
[117.36905670 -163.24221802]
[124.23451996 -149.19233704]
[120.41252899 -134.02900696]
[107.70771027 -124.91191101]
[106.74665833 -109.94272614]
[105.78560638 -94.97354889]
[104.82454681 -80.00436401]
[104.10354614 -65.02170563]
[111.42893982 -52.05297852]
[103.25329590 -38.50788879]
[102.77252197 -23.51559639]
[102.29174805 -8.52330399]
[102.05133057 6.47476959]
[102.05133057 21.47476959]
[102.05133057 36.47476959]
[113.01910400 52.26317596]
[103.17048645 69.70739746]
[104.13153839 84.67658234]
[114.21604919 95.78074646]
[129.02377319 98.17475128]
[143.83151245 100.56874847]
[158.63923645 102.96274567]
[173.44696045 105.35674286]
[187.24530029 97.17227936]
[202.19563293 102.99182892]
[206.82933044 118.35113525]
[197.59184265 131.46784973]
[181.56935120 132.27995300]
[171.05296326 120.16447449]
[156.24523926 117.77046967]
[141.43750000 115.37647247]
[126.62978363 112.98247528]
[111.82205200 110.58847809]
[112.54932404 115.39784241]
[112.00427246 120.61729431]
[112.48504639 135.60958862]
[112.96582031 150.60188293]
[116.42177582 159.26493835]
[113.21394348 166.08071899]
[113.21394348 181.08071899]
[113.45436096 196.07879639]
[113.93513489 211.07109070]
[114.41590881 226.06338501]
[114.89668274 241.05567932]
[115.37745667 256.04797363]
[115.85823059 271.04025269]
[118.66518402 290.21762085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[8 90]
[9 89]
[10 87]
[11 86]
[12 85]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[28 68]
[29 67]
[33 65]
[34 64]
[35 63]
[37 62]
[38 61]
[39 60]
[41 58]
[43 57]
[44 56]
[45 55]
[46 54]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
