%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUUGUUGCAAGCUGUGGGAGGAAGGAGAGUUCUUCUUCCAGGUGGUUUCCUGCAGACUGCCUGCUAGGGCUCAGAGGACCAGCUUCUUCCCUGCUGUCUCCUGAGCCCAGUCCCUCUUGGCCAUCACAUUCCCCUUGCCCU\
) } def
/len { sequence length } bind def

/coor [
[92.93653870 306.13494873]
[79.56433105 313.42218018]
[64.38370514 314.63397217]
[50.02479172 309.56036377]
[38.97536850 299.08038330]
[33.14980698 285.00973511]
[33.55742645 269.78628540]
[40.12760162 256.04754639]
[51.72200775 246.17387390]
[66.33184814 241.87591553]
[68.27631378 227.00247192]
[70.22077942 212.12904358]
[72.16525269 197.25561523]
[74.10971832 182.38217163]
[72.43435669 180.04716492]
[71.61858368 176.88375854]
[71.99196625 173.22940063]
[73.75081635 169.53770447]
[76.92078400 166.32684326]
[80.14533997 151.67753601]
[83.36989594 137.02822876]
[86.59445190 122.37892151]
[76.27896118 111.48899078]
[61.47656250 113.91571808]
[46.67416382 116.34244537]
[31.87176704 118.76918030]
[17.06936836 121.19590759]
[2.26697063 123.62263489]
[-12.53542709 126.04936981]
[-27.33782578 128.47608948]
[-39.67657089 139.27828979]
[-55.11161041 133.73829651]
[-57.76469803 117.55517578]
[-44.90656281 107.37674713]
[-29.76455498 113.67369843]
[-14.96215725 111.24697113]
[-0.15975931 108.82023621]
[14.64263821 106.39350891]
[29.44503593 103.96678162]
[44.24743271 101.54004669]
[59.04983139 99.11331940]
[73.85222626 96.68659210]
[78.33267212 82.37136841]
[67.55512238 71.93850708]
[56.77758026 61.50565338]
[46.00003052 51.07279968]
[35.22248459 40.63994217]
[24.44493675 30.20708656]
[13.66739082 19.77423096]
[2.88984346 9.34137535]
[-7.88770342 -1.09148073]
[-23.88744545 -2.26952863]
[-32.82277679 -15.59392071]
[-27.83927536 -30.84332275]
[-12.75985718 -36.31969833]
[0.84783840 -27.82204247]
[2.54515219 -11.86902809]
[13.32269955 -1.43617189]
[24.10024643 8.99668407]
[34.87779236 19.42953873]
[45.65534210 29.86239624]
[56.43288803 40.29524994]
[67.21043396 50.72810745]
[77.98798370 61.16096115]
[88.76552582 71.59381866]
[103.76200867 71.26885223]
[114.07749939 60.37891769]
[124.39299011 49.48898697]
[128.05998230 41.04016113]
[135.05187988 38.47793579]
[145.60087585 27.81403923]
[156.14987183 17.15014267]
[166.69886780 6.48624563]
[177.24786377 -4.17765141]
[187.79685974 -14.84154797]
[198.34585571 -25.50544548]
[208.89485168 -36.16934204]
[213.09939575 -51.42163086]
[227.55070496 -55.02840424]
[238.09970093 -65.69229889]
[248.64869690 -76.35620117]
[259.19769287 -87.02009583]
[263.04687500 -95.38749695]
[270.09262085 -97.79764557]
[280.87017822 -108.23049927]
[291.64773560 -118.66335297]
[288.51303101 -133.76889038]
[294.06396484 -148.16300964]
[306.52923584 -157.25260925]
[321.93121338 -158.13722229]
[335.35519409 -150.53457642]
[342.51763916 -136.87065125]
[341.13302612 -121.50553894]
[331.64318848 -109.34221649]
[317.07629395 -104.26194000]
[302.08059692 -107.88580322]
[291.30303955 -97.45294952]
[280.52548218 -87.02009583]
[269.86160278 -76.47109985]
[259.31259155 -65.80720520]
[248.76359558 -55.14330673]
[238.21459961 -44.47940826]
[234.76460266 -29.98987198]
[219.55874634 -25.62034607]
[209.00975037 -14.95644951]
[198.46075439 -4.29255295]
[187.91175842 6.37134409]
[177.36276245 17.03524017]
[166.81376648 27.69913864]
[156.26477051 38.36303329]
[145.71577454 49.02693176]
[135.28292847 59.80447769]
[124.96743011 70.69441223]
[114.65193939 81.58434296]
[126.26953125 87.01130676]
[135.07032776 99.31080627]
[148.47212219 106.04817200]
[164.80374146 104.56154633]
[174.03462219 118.11598969]
[166.66882324 132.76785278]
[150.28364563 133.44454956]
[141.73475647 119.44995880]
[128.33296204 112.71259308]
[121.56066895 115.93531036]
[130.09178162 128.27307129]
[142.78695679 136.26257324]
[145.09953308 151.08323669]
[135.44189453 162.56060791]
[120.44406891 162.81544495]
[110.40209198 151.67279053]
[112.20950317 136.78266907]
[108.01605988 122.38075256]
[101.24375916 125.60347748]
[98.01920319 140.25277710]
[94.79464722 154.90209961]
[91.57009125 169.55140686]
[88.98314667 184.32664490]
[87.03868103 199.20007324]
[85.09421539 214.07351685]
[83.14974976 228.94694519]
[81.20528412 243.82037354]
[94.21921539 251.72970581]
[102.88568115 264.25216675]
[105.70316315 279.21820068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[66 114]
[67 113]
[68 112]
[70 111]
[71 110]
[72 109]
[73 108]
[74 107]
[75 106]
[76 105]
[77 104]
[79 102]
[80 101]
[81 100]
[82 99]
[84 98]
[85 97]
[86 96]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
