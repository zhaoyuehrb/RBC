%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAGGGCCUCCCUCCCCCGCAUCACGUGAUCUCAGCUCCUUUUCAGCUAGUGGGUGGAACCCCAGGAGGGAAAACUCAGGGAAGCCCAGGGCCCGUGUUGUGCUUUUGGCCCAGGUAGGUGGACAGAC\
) } def
/len { sequence length } bind def

/coor [
[181.27607727 211.41603088]
[171.66491699 199.89971924]
[162.05375671 188.38339233]
[152.44259644 176.86708069]
[138.34732056 172.05328369]
[135.44529724 156.50051880]
[125.83412933 144.98419189]
[116.22296906 133.46788025]
[106.61180878 121.95156097]
[97.00064850 110.43524170]
[85.14611816 101.24448395]
[71.59831238 94.80576324]
[58.05051804 88.36704254]
[44.50271606 81.92832184]
[30.95491600 75.48960114]
[17.40711594 69.05088043]
[3.85931706 62.61215973]
[-27.32404137 65.30226135]
[-42.01347733 62.26573563]
[-56.70291138 59.22920990]
[-71.39234924 56.19268417]
[-86.08178711 53.15615845]
[-101.07746887 53.51584625]
[-115.60442352 57.25316238]
[-130.13137817 60.99047852]
[-141.45748901 72.85013580]
[-157.32513428 68.70890808]
[-161.41105652 52.82692719]
[-149.51199341 41.54221725]
[-133.86869812 46.46352386]
[-119.34174347 42.72620773]
[-104.81478882 38.98889160]
[-103.91763306 31.54274368]
[-115.91759491 22.54269791]
[-102.12331390 16.65044975]
[-101.22615814 9.20430183]
[-114.44967651 2.12343907]
[-127.67318726 -4.95742416]
[-140.89669800 -12.03828716]
[-155.34446716 -6.05530262]
[-170.24226379 -10.80819130]
[-178.55578613 -24.05278397]
[-176.35966492 -39.53538895]
[-164.69082642 -49.94559479]
[-149.05895996 -50.36801910]
[-136.84492493 -40.60320663]
[-133.81584167 -25.26180267]
[-120.59232330 -18.18094063]
[-107.36881256 -11.10007668]
[-94.14529419 -4.01921415]
[-78.31635284 18.56418037]
[-83.04525757 38.46672058]
[-68.35581970 41.50324631]
[-53.66638565 44.53977203]
[-38.97695160 47.57629776]
[-24.28751564 50.61282349]
[-13.61751461 40.07000351]
[-16.47768784 25.34521484]
[-19.33786011 10.62042618]
[-30.49757385 -1.39593244]
[-25.41302109 -16.98693466]
[-9.31475449 -20.11389542]
[1.23670828 -7.56006432]
[-4.61307192 7.76025248]
[-1.75289893 22.48504066]
[1.10727417 37.20983124]
[10.29803753 49.06436157]
[23.84583664 55.50308228]
[37.39363861 61.94179916]
[50.94143677 68.38052368]
[64.48923492 74.81924438]
[78.03703308 81.25796509]
[91.58483887 87.69668579]
[80.50795746 77.58220673]
[77.94018555 62.80361938]
[84.95609283 49.54552841]
[98.61964417 43.35622406]
[113.21285248 46.82583237]
[122.62870789 58.50238037]
[122.92681885 73.49942017]
[113.98139191 85.54164124]
[126.05290222 76.63778687]
[138.12442017 67.73393250]
[147.28218079 53.46607590]
[163.52755737 58.31621933]
[163.36413574 75.26937866]
[147.02827454 79.80544281]
[134.95675659 88.70929718]
[122.88525391 97.61315155]
[118.17929840 99.32472992]
[113.36840057 100.39669037]
[108.51696014 100.82408142]
[118.12812805 112.34040070]
[127.73928833 123.85671997]
[137.35044861 135.37303162]
[146.96160889 146.88935852]
[161.74433899 152.52687073]
[163.95890808 167.25592041]
[173.57006836 178.77223206]
[183.18124390 190.28855896]
[192.79240417 201.80487061]
[208.17068481 200.90245056]
[220.98187256 209.13208008]
[226.42622375 223.16145325]
[222.61120605 237.53446960]
[232.22236633 249.05078125]
[247.00509644 254.68829346]
[249.21968079 269.41735840]
[258.83084106 280.93365479]
[273.61355591 286.57119751]
[275.82815552 301.30023193]
[285.43930054 312.81655884]
[295.05047607 324.33285522]
[310.81143188 325.50244141]
[321.06564331 337.52853394]
[319.72949219 353.27624512]
[307.59567261 363.40274048]
[291.86297607 361.90017700]
[281.86532593 349.65997314]
[283.53414917 333.94403076]
[273.92297363 322.42770386]
[264.31182861 310.91140747]
[250.21655273 306.09759521]
[247.31451416 290.54483032]
[237.70335388 279.02850342]
[223.60809326 274.21472168]
[220.70605469 258.66195679]
[211.09489441 247.14562988]
[196.27125549 248.32785034]
[183.44216919 240.46156311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 32]
[24 31]
[25 30]
[36 50]
[37 49]
[38 48]
[39 47]
[57 66]
[58 65]
[59 64]
[81 89]
[82 88]
[83 87]
[105 128]
[106 127]
[108 125]
[109 124]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
