%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCCCCUCGCCGCAUCCACUCUCCGGCCGGCCGCCUGCCCGCCGCCUCCUCCGUGCGCCCGCCAGCCUCGCCCGCGCCGUCACC\
) } def
/len { sequence length } bind def

/coor [
[140.59213257 177.37322998]
[131.04699707 181.67263794]
[121.05618286 184.79960632]
[110.76309204 186.70924377]
[100.31549835 187.37411499]
[89.86337280 186.78471375]
[79.55675507 184.94946289]
[69.54361725 181.89472961]
[59.96769333 177.66435242]
[50.96645355 172.31907654]
[42.66910934 165.93562317]
[35.19477844 158.60563660]
[28.65075302 150.43432617]
[23.13097954 141.53903198]
[18.71469688 132.04740906]
[15.46530056 122.09573364]
[13.42943859 111.82686615]
[12.63633633 101.38822174]
[13.09737968 90.92964172]
[14.80594826 80.60128021]
[17.73751640 70.55138397]
[21.85000038 60.92424774]
[27.08436394 51.85805511]
[33.36546326 43.48296356]
[40.60313034 35.91920090]
[48.69347000 29.27534485]
[40.96016312 16.42248726]
[33.22685242 3.56962991]
[25.49354553 -9.28322792]
[11.74905300 -17.11900902]
[11.81721973 -32.01345825]
[4.08391237 -44.86631775]
[-3.64939570 -57.71917343]
[-18.80856514 -62.97075653]
[-24.01823044 -78.14438629]
[-15.28198242 -91.60014343]
[0.69847721 -93.01593018]
[11.66430759 -81.30567932]
[9.20346165 -65.45248413]
[16.93676949 -52.59962463]
[24.67007828 -39.74676514]
[37.86143494 -32.83030701]
[38.34640503 -17.01653481]
[46.07971191 -4.16367769]
[53.81301880 8.68917942]
[61.54632568 21.54203796]
[83.25589752 14.24469757]
[106.11595917 12.83961964]
[128.55578613 17.42334557]
[149.03355408 27.68092918]
[166.14219666 42.90756607]
[178.70622253 62.05703735]
[185.86230469 83.81357574]
[187.11878967 106.68228149]
[201.92118835 109.10900879]
[211.13467407 107.38932800]
[217.21018982 111.89984894]
[231.91531372 114.85939789]
[246.62045288 117.81895447]
[261.32559204 120.77850342]
[274.38940430 112.29470825]
[289.26034546 115.50559235]
[297.26782227 128.01222229]
[311.97296143 130.97177124]
[324.07678223 121.07068634]
[339.71243286 121.31788635]
[351.49719238 131.59664917]
[353.86669922 147.05368042]
[345.70211792 160.39060974]
[330.85855103 165.31016541]
[316.34463501 159.48948669]
[309.01342773 145.67691040]
[294.30828857 142.71736145]
[282.08605957 151.15255737]
[267.13079834 148.36064148]
[258.36605835 135.48364258]
[243.66090393 132.52409363]
[228.95576477 129.56454468]
[214.25062561 126.60498810]
[199.49446106 123.91140747]
[184.69206238 121.48468018]
[181.51461792 131.45956421]
[177.16699219 140.98281860]
[171.71160889 149.91775513]
[165.22676086 158.13610840]
[157.80555725 165.51988220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 46]
[27 45]
[28 44]
[29 43]
[31 41]
[32 40]
[33 39]
[54 81]
[55 80]
[57 79]
[58 78]
[59 77]
[60 76]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
