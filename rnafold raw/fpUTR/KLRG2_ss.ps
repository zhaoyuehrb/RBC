%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGCGAAGCUCCUCUGCACUGGGCCCAGGUGCGCUCCUCAGCGUCUCCGGGUGGCGGGGCGCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[111.64871216 114.02291870]
[107.91239166 122.07778168]
[99.85883331 128.67521667]
[89.98975372 139.97129822]
[80.12066650 151.26736450]
[70.25158691 162.56343079]
[64.38373566 178.46955872]
[47.47484970 177.23426819]
[43.98101044 160.64424133]
[58.95551682 152.69435120]
[68.82460022 141.39828491]
[78.69367981 130.10221863]
[88.56275940 118.80614471]
[83.60857391 104.64788818]
[68.84963226 101.96953583]
[54.09068680 99.29118347]
[41.24389267 108.49636841]
[25.66461754 105.83897400]
[16.59576988 92.89557648]
[19.41773605 77.34526825]
[32.45629120 68.41377258]
[47.97589493 71.39998627]
[56.76903915 84.53224182]
[71.52798462 87.21059418]
[86.28692627 89.88894653]
[101.15117645 87.87545013]
[114.66570282 81.36719513]
[128.18023682 74.85893250]
[132.54124451 69.19104767]
[138.29492188 67.15225220]
[143.21078491 68.43457031]
[157.25431824 63.16394806]
[171.29783630 57.89332581]
[185.34135437 52.62270355]
[199.38488770 47.35208130]
[213.42840576 42.08145905]
[227.47192383 36.81083679]
[241.51545715 31.54021454]
[255.55897522 26.26959229]
[269.48071289 20.68518639]
[283.27362061 14.78981113]
[297.06652832 8.89443588]
[306.71520996 -3.64403963]
[321.45925903 -1.53151357]
[325.82046509 -16.54862785]
[338.84286499 -25.20605850]
[354.37768555 -23.41603470]
[365.08981323 -12.02374649]
[365.92132568 3.59171271]
[356.47964478 16.05720139]
[341.22280884 19.48689842]
[327.35461426 12.26140308]
[318.69250488 24.37820244]
[302.96191406 22.68735313]
[289.16897583 28.58272743]
[275.37606812 34.47810364]
[270.30032349 40.18896484]
[260.82958984 40.31311417]
[246.78607178 45.58373642]
[232.74255371 50.85435867]
[218.69902039 56.12498093]
[204.65550232 61.39560318]
[190.61198425 66.66622925]
[176.56845093 71.93685150]
[162.52493286 77.20747375]
[148.48141479 82.47809601]
[134.68849182 88.37346649]
[121.17396545 94.88172913]
[107.65943146 101.38998413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[14 25]
[15 24]
[16 23]
[26 69]
[27 68]
[28 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 56]
[41 55]
[42 54]
[44 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
