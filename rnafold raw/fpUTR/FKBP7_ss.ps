%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAUCUAUGGCCCCGCCCCGGCCCUUUGUGACGCAGGACAACGCCUGCCACGCGUCGGAACUCGGCCGCGGGACAUCCACGGGGCGCGAGUGACACGCGGGAGGGAGAGCAGUGUUCUGCUGGAGCCG\
) } def
/len { sequence length } bind def

/coor [
[-66.88361359 350.12915039]
[-77.36128235 360.86312866]
[-87.83895111 371.59710693]
[-98.31661987 382.33108521]
[-94.58351135 394.38235474]
[-96.35901642 406.79971313]
[-103.23974609 417.20083618]
[-113.84890747 423.61715698]
[-126.11140442 424.86624146]
[-137.65962219 420.76937866]
[-148.64364624 430.98461914]
[-159.62768555 441.19985962]
[-170.61170959 451.41510010]
[-169.63362122 467.02206421]
[-178.95788574 479.57562256]
[-194.18185425 483.14840698]
[-208.11724854 476.05340576]
[-214.18418884 461.64071655]
[-209.51806641 446.71551514]
[-196.32206726 438.32507324]
[-180.82695007 440.43106079]
[-169.84292603 430.21582031]
[-158.85888672 420.00057983]
[-147.87486267 409.78533936]
[-150.85134888 392.45980835]
[-142.82984924 376.64224243]
[-126.81429291 368.66744995]
[-109.05060577 371.85342407]
[-98.57293701 361.11944580]
[-88.09526825 350.38546753]
[-77.61759949 339.65145874]
[-80.63594818 317.35934448]
[-66.32520294 299.66885376]
[-43.37863922 297.92459106]
[-34.85766983 285.57983398]
[-26.33669853 273.23507690]
[-17.81572723 260.89031982]
[-9.29475594 248.54554749]
[-0.77378440 236.20079041]
[7.74718666 223.85603333]
[16.26815796 211.51127625]
[13.33908367 196.95256042]
[21.80470467 184.31184387]
[37.09508133 181.33827209]
[45.61605072 168.99351501]
[53.98724365 156.54669189]
[62.20743179 143.99964905]
[62.71011353 129.11352539]
[76.74480438 121.81022644]
[84.96498871 109.26317596]
[84.99881744 90.68213654]
[101.64037323 82.41684723]
[109.24477386 69.48730469]
[116.84916687 56.55775833]
[124.45356750 43.62821579]
[132.05796814 30.69866943]
[133.74043274 21.61484337]
[140.00555420 17.55174446]
[136.62527466 2.34610748]
[144.83331299 -10.46336555]
[159.35040283 -13.59224701]
[167.26499939 -26.33426666]
[175.17961121 -39.07628632]
[183.09420776 -51.81830215]
[191.00881958 -64.56032562]
[198.76887512 -77.39704132]
[206.37327576 -90.32658386]
[213.97767639 -103.25613403]
[214.30448914 -119.07395935]
[227.42602539 -126.12198639]
[235.03042603 -139.05152893]
[242.47804260 -152.07200623]
[249.76779175 -165.18153381]
[248.96273804 -181.56091309]
[262.88992310 -190.21917725]
[277.22222900 -182.24946594]
[277.21585083 -165.85032654]
[262.87731934 -157.89178467]
[255.58755493 -144.78225708]
[255.08128357 -137.33215332]
[247.95997620 -131.44712830]
[240.35557556 -118.51758575]
[240.57267761 -103.62456512]
[226.90722656 -95.65173340]
[219.30282593 -82.72219086]
[211.69842529 -69.79264069]
[211.01228333 -62.35694122]
[203.75083923 -56.64571762]
[195.83622742 -43.90370178]
[187.92163086 -31.16168213]
[180.00701904 -18.41966248]
[172.09242249 -5.67764330]
[175.72145081 8.72255421]
[167.87643433 21.75752068]
[152.74757385 25.46634865]
[144.98750305 38.30306625]
[137.38311768 51.23261261]
[129.77871704 64.16215515]
[122.17431641 77.09170532]
[114.56991577 90.02124786]
[117.65509033 99.60542297]
[115.00118256 109.31786346]
[107.47087860 116.00137329]
[97.51203918 117.48336792]
[89.29185486 130.03041077]
[88.20121002 145.81398010]
[74.75448608 152.21983337]
[66.53429413 164.76689148]
[64.41491699 173.75881958]
[57.96081161 177.51448059]
[49.43983841 189.85923767]
[52.08154678 205.21043396]
[43.26421356 217.60838318]
[28.61291504 220.03224182]
[20.09194565 232.37699890]
[11.57097340 244.72175598]
[3.05000234 257.06652832]
[-5.47096872 269.41128540]
[-13.99194050 281.75604248]
[-22.51291084 294.10079956]
[-31.03388214 306.44555664]
[-26.76678467 313.31484985]
[-24.55810356 321.06588745]
[-24.56339645 329.09832764]
[-26.76734352 336.79425049]
[-30.98605728 343.56570435]
[-36.88233948 348.89971924]
[-43.99259949 352.39697266]
[-51.76326752 353.80184937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[10 24]
[11 23]
[12 22]
[13 21]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[44 111]
[45 110]
[46 108]
[47 107]
[49 105]
[50 104]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[58 95]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 86]
[67 85]
[68 84]
[70 82]
[71 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
