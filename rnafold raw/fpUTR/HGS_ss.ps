%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCGGCUCUAGGGCCGGCGCGGUGACGUGCGCGUGCGCGCACUGGAGGGAAAAGGCGGAAGCGGAAGUCGGGGGGCGCGCCAGCUCGUAGCAGGGGAGCGCCCGCGGCGUCGGGUUUGGGCUGGAGGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[82.12350464 419.63333130]
[80.39485931 404.73327637]
[78.66621399 389.83322144]
[76.93756104 374.93313599]
[73.00673676 368.59460449]
[75.34516907 359.66949463]
[73.96114349 344.73348999]
[72.57711792 329.79745483]
[71.19309235 314.86145020]
[67.40972137 308.43380737]
[69.95368958 299.56509399]
[68.91502380 284.60110474]
[67.87635803 269.63711548]
[66.83769226 254.67311096]
[65.79902649 239.70910645]
[57.19900131 227.54815674]
[63.96214676 213.24534607]
[62.92348099 198.28134155]
[61.88481522 183.31735229]
[60.84614944 168.35334778]
[59.80748367 153.38935852]
[58.76881790 138.42535400]
[57.73015213 123.46136475]
[47.00175476 112.97797394]
[32.01776123 112.28522491]
[17.03376579 111.59246826]
[2.04977107 110.89971924]
[-6.75781441 113.64785767]
[-13.27113724 110.01395416]
[-28.23513222 108.97528839]
[-43.19912720 107.93662262]
[-58.16312408 106.89795685]
[-73.12712097 105.85929108]
[-87.61741638 113.53805542]
[-101.36696625 104.60039520]
[-100.23142242 88.24060822]
[-85.37892151 81.28823853]
[-72.08845520 90.89529419]
[-57.12445831 91.93395996]
[-42.16046143 92.97262573]
[-27.19646645 94.01129150]
[-12.23247147 95.04995728]
[2.74252295 95.91572571]
[17.72651672 96.60847473]
[32.71051025 97.30123138]
[47.69450760 97.99398041]
[52.35130310 92.11484528]
[38.29047394 86.89057159]
[38.91403961 71.90354156]
[53.36025620 67.86536407]
[61.66490173 80.35657501]
[66.32170105 74.47743988]
[62.21675491 60.05005264]
[46.17893982 56.20644760]
[34.31750107 44.88332748]
[29.78571510 29.22097206]
[33.72275162 13.49509621]
[44.96910095 1.94963396]
[40.53200912 -12.37908649]
[28.13727760 -23.11699486]
[31.50448799 -39.16672897]
[47.16973877 -44.01769638]
[59.01796722 -32.67963791]
[54.86072922 -16.81617737]
[59.29782104 -2.48745799]
[72.83209229 -0.33143768]
[84.16047668 7.49897242]
[91.02592468 19.51334000]
[92.03054810 33.38094711]
[86.91989136 46.38288498]
[76.64413452 55.94510651]
[80.74908447 70.37248993]
[102.38748169 70.65295410]
[115.85809326 82.58215332]
[124.14923096 69.10745239]
[139.03306580 69.67378235]
[152.13740540 62.37471390]
[165.24172974 55.07564545]
[178.34606934 47.77658081]
[191.45040894 40.47751236]
[204.55474854 33.17844391]
[212.84587097 19.70374107]
[227.72970581 20.27007294]
[240.83404541 12.97100544]
[250.28221130 -4.76896667]
[269.54412842 -3.85604787]
[282.29739380 -11.75253010]
[295.05065918 -19.64901352]
[305.33438110 -33.12794113]
[321.13336182 -26.97745895]
[319.59683228 -10.09328270]
[302.94714355 -6.89575577]
[290.19387817 1.00072682]
[277.44061279 8.89720917]
[275.97473145 19.12041473]
[268.94055176 26.98109627]
[258.51504517 29.67996216]
[248.13311768 26.07534027]
[235.02877808 33.37440872]
[227.67495728 46.32703400]
[211.85380554 46.28277969]
[198.74948120 53.58184814]
[185.64514160 60.88091660]
[172.54080200 68.17998505]
[159.43646240 75.47904968]
[146.33213806 82.77811432]
[138.97830200 95.73074341]
[123.15715790 95.68649292]
[112.43038177 126.69146729]
[72.69414520 122.42269897]
[73.73281097 137.38668823]
[74.77147675 152.35069275]
[75.81014252 167.31468201]
[76.84880829 182.27868652]
[77.88747406 197.24267578]
[78.92613983 212.20668030]
[87.60045624 225.43795776]
[80.76301575 238.67044067]
[81.80168152 253.63444519]
[82.84034729 268.59844971]
[83.87901306 283.56243896]
[84.91767883 298.52642822]
[86.12911224 313.47741699]
[87.51313019 328.41345215]
[88.89715576 343.34945679]
[90.28118134 358.28546143]
[91.83762360 373.20449829]
[93.56626892 388.10455322]
[95.29491425 403.00460815]
[97.02356720 417.90469360]
[109.56636810 427.51995850]
[111.55358124 443.19882202]
[101.80622101 455.63925171]
[86.10723114 457.46060181]
[73.77053833 447.58224487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[6 126]
[7 125]
[8 124]
[9 123]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[17 116]
[18 115]
[19 114]
[20 113]
[21 112]
[22 111]
[23 110]
[24 46]
[25 45]
[26 44]
[27 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[52 72]
[53 71]
[58 65]
[59 64]
[74 108]
[76 106]
[77 105]
[78 104]
[79 103]
[80 102]
[81 101]
[83 99]
[84 98]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
