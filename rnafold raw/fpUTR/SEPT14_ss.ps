%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGAAUAUUUAUUUGGUCCACAACUGGGGACAGUAGAAAGGACACCAGCUUGGAAUCAGUUCGGACCUGUGUCUGCUGCACAGCUGAAUCCCUGGGAAACUCUUUUAGUGUAGC\
) } def
/len { sequence length } bind def

/coor [
[101.99609375 218.93962097]
[100.79930115 203.98744202]
[99.60250854 189.03526306]
[90.87441254 176.96589661]
[97.48598480 162.59237671]
[96.28919983 147.64019775]
[95.09240723 132.68801880]
[93.89561462 117.73584747]
[87.77744293 131.43139648]
[84.81504059 146.13595581]
[74.61102295 157.13040161]
[60.16790390 161.17964172]
[45.73555374 157.09219360]
[35.56067657 146.07075500]
[32.63721085 131.35841370]
[37.82538605 117.28421783]
[49.59859085 107.98950195]
[64.49356842 106.20938110]
[78.63359833 101.20342255]
[63.82456970 98.81747437]
[49.01554489 96.43151855]
[34.20652008 94.04557037]
[15.84044647 102.14601135]
[1.23875117 89.58599091]
[-13.30566502 95.81258392]
[-25.13841057 86.76629639]
[-40.05343246 85.17189026]
[-54.96845245 83.57749176]
[-69.88347626 81.98308563]
[-84.64929199 89.11769867]
[-98.05697632 79.67492676]
[-96.31385803 63.36868286]
[-81.21309662 56.97343445]
[-68.28907013 67.06806183]
[-53.37405014 68.66246796]
[-38.45903015 70.25686646]
[-23.54400826 71.85127258]
[-10.06641388 65.51062775]
[2.83315349 74.67096710]
[10.30401993 67.47229767]
[20.73384476 65.60363770]
[30.64471626 69.93771362]
[36.59247208 79.23654175]
[51.40149689 81.62249756]
[66.21052551 84.00844574]
[81.01954651 86.39440155]
[94.08298492 81.35232544]
[105.17663574 85.09889221]
[115.35131073 74.07727814]
[125.52598572 63.05566406]
[135.70066833 52.03405380]
[136.89077759 46.68530273]
[139.78584290 42.78767776]
[143.51048279 40.75609970]
[147.15420532 40.58051682]
[158.17581177 30.40583801]
[169.19743347 20.23116112]
[174.08912659 5.18517256]
[188.68910217 2.23728180]
[199.71072388 -7.93739557]
[210.73233032 -18.11207390]
[221.75393677 -28.28675079]
[232.77555847 -38.46142960]
[243.79716492 -48.63610458]
[253.97184753 -59.65771866]
[263.23471069 -71.45599365]
[272.49758911 -83.25426483]
[281.76046753 -95.05253601]
[291.02331543 -106.85081482]
[292.80715942 -123.15264893]
[307.92385864 -129.51016235]
[320.82263184 -119.38328552]
[318.23434448 -103.18968201]
[302.82159424 -97.58794403]
[293.55871582 -85.78966522]
[284.29586792 -73.99139404]
[275.03298950 -62.19312286]
[265.77011108 -50.39484787]
[280.76950073 -50.25719833]
[291.45214844 -39.72720337]
[291.80566406 -24.73136902]
[281.63107300 -13.70967579]
[266.65484619 -12.86536884]
[255.30593872 -22.67364311]
[253.97184753 -37.61449432]
[242.95022583 -27.43981552]
[231.92861938 -17.26513863]
[220.90701294 -7.09046125]
[209.88539124 3.08421659]
[198.86378479 13.25889397]
[194.76042175 27.57712173]
[179.37210083 31.25277328]
[168.35049438 41.42745209]
[157.32887268 51.60212708]
[146.72227478 62.20872879]
[136.54760742 73.23033905]
[126.37292480 84.25195312]
[116.19824219 95.27356720]
[129.48179626 88.30596924]
[144.38513184 90.00614166]
[155.75807190 99.78653717]
[159.67044067 114.26732635]
[154.77024841 128.44435120]
[142.75083923 137.41841125]
[127.76580811 138.08833313]
[114.99356079 130.22261047]
[108.84779358 116.53905487]
[110.04458618 131.49122620]
[111.24137878 146.44340515]
[112.43817139 161.39559937]
[121.25186157 174.53443909]
[114.55468750 187.83847046]
[115.75148010 202.79064941]
[116.94827271 217.74282837]
[126.69528198 230.93099976]
[119.90031433 245.85615540]
[103.55344391 247.16458130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 110]
[6 109]
[7 108]
[8 107]
[19 46]
[20 45]
[21 44]
[22 43]
[24 39]
[26 37]
[27 36]
[28 35]
[29 34]
[48 98]
[49 97]
[50 96]
[51 95]
[55 94]
[56 93]
[57 92]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
