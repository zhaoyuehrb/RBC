%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUUGUUUUCUUUCCUCCAGUCUCGGGGCUGCAGGCUGAGCGCGAUGCGCGGAGACCCCCGCGGGGGCGGCGGCGGCCGUGAGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[10.29377937 196.80403137]
[0.19677424 200.33648682]
[-9.93324280 197.67086792]
[-22.18779182 206.32107544]
[-34.44234085 214.97126770]
[-46.69688797 223.62147522]
[-53.50926590 237.90090942]
[-68.36901093 238.91932678]
[-66.30138397 254.08453369]
[-71.52911377 268.46957397]
[-82.85090637 278.76889038]
[-97.66510010 282.61572266]
[-112.56749725 279.12615967]
[-124.13364410 269.10205078]
[-129.70570374 254.84684753]
[-128.00329590 239.63630676]
[-119.41757965 226.96571350]
[-105.92151642 219.74664307]
[-90.61639404 219.63801575]
[-77.01921844 226.66477966]
[-71.08336639 213.00407410]
[-55.34709167 211.36692810]
[-43.09254456 202.71672058]
[-30.83799553 194.06651306]
[-18.58344650 185.41632080]
[-12.03720093 167.35621643]
[7.87167978 165.28340149]
[19.50734901 155.81707764]
[31.14301872 146.35076904]
[42.77868652 136.88444519]
[54.41435623 127.41812897]
[66.05002594 117.95180511]
[77.68569946 108.48548889]
[76.94287109 93.81124878]
[84.93388367 81.48125458]
[98.63180542 76.16600037]
[112.84798431 79.87884521]
[124.48365784 70.41252136]
[136.11932373 60.94620514]
[147.75498962 51.47988510]
[159.39065552 42.01356506]
[161.53424072 29.15568924]
[171.59744263 21.52085304]
[183.75471497 22.83414841]
[195.70678711 13.77060223]
[207.65887451 4.70705652]
[209.36831665 -13.99226189]
[223.82141113 -25.48211479]
[241.80320740 -23.01581192]
[247.11959839 -37.91703796]
[261.79727173 -40.44974518]
[273.10296631 -50.30780029]
[284.40866089 -60.16585541]
[295.71438599 -70.02391052]
[307.02008057 -79.88196564]
[307.84841919 -95.66453552]
[319.64981079 -106.17652893]
[335.42276001 -105.18137360]
[345.80938721 -93.26947784]
[344.64752197 -77.50794983]
[332.62649536 -67.24783325]
[316.87811279 -68.57627106]
[305.57241821 -58.71821594]
[294.26672363 -48.86016083]
[282.96102905 -39.00210571]
[271.65533447 -29.14405060]
[267.14761353 -14.94793606]
[251.66125488 -11.71011639]
[253.37094116 -0.18265335]
[249.16944885 10.81702805]
[240.02383423 18.42442322]
[228.20454407 20.59647751]
[216.72241211 16.65913391]
[204.77033997 25.72267914]
[192.81826782 34.78622437]
[187.01533508 51.25201035]
[168.85697937 53.64923477]
[157.22131348 63.11555481]
[145.58564758 72.58187103]
[133.94996643 82.04819489]
[122.31430054 91.51451111]
[123.05712891 106.18875122]
[115.06611633 118.51874542]
[101.36819458 123.83399963]
[87.15201569 120.12115479]
[75.51634216 129.58747864]
[63.88067627 139.05380249]
[52.24500656 148.52011108]
[40.60933685 157.98643494]
[28.97366905 167.45275879]
[17.33799934 176.91906738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[8 20]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[37 81]
[38 80]
[39 79]
[40 78]
[41 77]
[44 75]
[45 74]
[46 73]
[49 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
