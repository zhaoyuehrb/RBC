%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCGCGCCGGCGACCACGCCUAAAUAGCCGCAGCCUCUGCGCGUCGCCCUCCACGGUUACCCCGGCUCUCCGCCCCUCCUUCUCGCGGCGCUCGAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[-107.55879211 263.07565308]
[-114.13251495 262.43942261]
[-120.19396210 259.92181396]
[-125.22090912 255.76567078]
[-139.01382446 261.66104126]
[-152.80674744 267.55642700]
[-166.59965515 273.45181274]
[-173.39564514 279.80468750]
[-180.89448547 279.31036377]
[-194.85758972 284.79049683]
[-207.29415894 304.31015015]
[-229.53358459 301.37194824]
[-242.52397156 308.87194824]
[-255.51434326 316.37194824]
[-268.50473022 323.87194824]
[-276.23123169 338.33685303]
[-292.62817383 338.60742188]
[-300.82772827 324.40533447]
[-292.39495850 310.34048462]
[-276.00473022 310.88156128]
[-263.01434326 303.38156128]
[-250.02397156 295.88156128]
[-237.03358459 288.38156128]
[-236.96755981 280.85247803]
[-234.17903137 273.78417969]
[-228.99327087 268.13623047]
[-222.06442261 264.69433594]
[-214.29321289 263.96124268]
[-206.70989990 266.08392334]
[-200.33770752 270.82739258]
[-186.37460327 265.34725952]
[-172.49502563 259.65887451]
[-158.70211792 253.76350403]
[-144.90919495 247.86813354]
[-131.11628723 241.97276306]
[-119.99323273 220.92218018]
[-95.54237366 221.97970581]
[-83.27658081 213.34545898]
[-71.01078796 204.71119690]
[-58.74499893 196.07693481]
[-55.02645111 189.54629517]
[-45.98061371 187.37432861]
[-39.62123108 173.90557861]
[-23.84152031 172.76043701]
[-11.32292080 164.49699402]
[1.19567764 156.23353577]
[13.71427631 147.97007751]
[26.23287582 139.70661926]
[38.75147247 131.44317627]
[51.27007294 123.17971802]
[45.97898483 107.15876770]
[45.86942291 90.12194824]
[51.05344772 73.71936035]
[61.12551117 59.57083893]
[75.19241333 49.10602570]
[91.95184326 43.42018890]
[109.81274414 43.16024780]
[127.04627228 48.45283890]
[135.12153625 35.81202316]
[133.08677673 19.89852715]
[144.36274719 8.48660469]
[160.29948425 10.33050346]
[168.67169189 24.01574516]
[163.05691528 39.04418182]
[147.76234436 43.88728333]
[139.68708801 56.52809525]
[149.38607788 67.97054291]
[163.17900085 62.07516479]
[176.97190857 56.17979050]
[184.25511169 41.88522339]
[200.00032043 38.80823135]
[212.12916565 49.30921936]
[211.33743286 65.33272552]
[198.23246765 74.58688354]
[182.86729431 69.97270966]
[169.07437134 75.86808014]
[155.28144836 81.76345825]
[157.68466187 95.96745300]
[156.52076721 110.23004150]
[151.90863037 123.67512512]
[144.17750549 135.48847961]
[133.84385681 144.96711731]
[121.57722473 151.56098938]
[108.15680695 154.90483093]
[94.42210388 154.83813477]
[81.22037506 151.41223145]
[69.35436249 144.88423157]
[59.53352737 135.69831848]
[47.01492691 143.96176147]
[34.49633026 152.22521973]
[21.97773170 160.48867798]
[9.45913219 168.75213623]
[-3.05946660 177.01559448]
[-15.57806492 185.27903748]
[-22.83286476 199.33885193]
[-37.71715927 199.89292908]
[-50.11074066 208.34272766]
[-62.37653351 216.97698975]
[-74.64232635 225.61123657]
[-86.90811157 234.24549866]
[-86.11662292 241.04969788]
[-87.34486389 247.74714661]
[-90.46157074 253.75502014]
[-95.17224884 258.55767822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 35]
[5 34]
[6 33]
[7 32]
[9 31]
[10 30]
[12 23]
[13 22]
[14 21]
[15 20]
[37 100]
[38 99]
[39 98]
[40 97]
[42 96]
[44 94]
[45 93]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[58 66]
[59 65]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
