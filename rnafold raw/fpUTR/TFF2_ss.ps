%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGUGGAAGGGCUGGGGCCACGGGGCAGAGAAGAAAGGUUAUCUCUGCUUGUUGGACAAACAGAGGGGAGAUUAUAAAACAUACCCGGCAGUGGACACCAUGCAUUCUGCAAGCCACCCUGGGGUGCAGCUGAGCUAGAC\
) } def
/len { sequence length } bind def

/coor [
[51.82228851 443.12557983]
[37.22874069 438.12240601]
[27.67472649 426.00939941]
[26.20890045 410.65185547]
[33.29899597 396.95022583]
[46.68259811 389.27673340]
[47.34146118 374.29119873]
[48.00032425 359.30566406]
[36.25095367 350.19027710]
[32.07262421 335.73327637]
[37.26905823 321.42065430]
[50.04446030 312.81280518]
[50.70332336 297.82727051]
[51.36218643 282.84176636]
[52.02104950 267.85623169]
[52.67991257 252.87071228]
[45.50911713 239.81587219]
[53.84511185 226.36886597]
[46.67431259 213.31402588]
[55.01030731 199.86703491]
[55.66917038 184.88150024]
[52.79838943 178.00781250]
[56.51068878 169.57508850]
[57.49858856 154.60765076]
[58.48648453 139.64022827]
[59.47438431 124.67279053]
[49.90287018 113.12349701]
[35.01223755 111.31544495]
[20.12160492 109.50740051]
[5.23097086 107.69934845]
[-9.65966225 105.89129639]
[-24.55029488 104.08324432]
[-39.44092941 102.27519226]
[-54.07310867 108.29265594]
[-65.77495575 99.07766724]
[-80.66558838 97.26961517]
[-95.53216553 104.19181824]
[-108.80310822 94.55781555]
[-106.82641602 78.27823639]
[-91.63552856 72.10012054]
[-78.85754395 82.37898254]
[-63.96690750 84.18703461]
[-50.39980316 78.04025269]
[-37.63287735 87.38455963]
[-22.74224472 89.19261169]
[-7.85161209 91.00066376]
[7.03902102 92.80871582]
[21.92965508 94.61676025]
[36.82028580 96.42481232]
[51.71092224 98.23286438]
[59.54137421 85.43895721]
[51.15651703 73.00135040]
[42.77165604 60.56373596]
[34.38679886 48.12612534]
[26.00194168 35.68851471]
[10.59247208 31.22446251]
[4.60840988 16.33921623]
[12.64021587 2.45146465]
[28.52657700 0.21470222]
[40.08083344 11.34478188]
[38.43955231 27.30365753]
[46.82440948 39.74126816]
[55.20927048 52.17887878]
[63.59412766 64.61649323]
[71.97898102 77.05410004]
[87.92742157 67.25415039]
[105.95360565 66.94841003]
[109.86241150 52.46665573]
[113.77121735 37.98490143]
[101.35588837 29.28803253]
[92.66635132 16.86757851]
[88.75189972 2.22336912]
[90.08522034 -12.87623501]
[96.50531769 -26.60788536]
[107.23692322 -37.31341553]
[120.98415375 -43.70008087]
[136.08695984 -44.99666595]
[150.72160339 -41.04659271]
[163.12088013 -32.32685852]
[171.78750610 -19.89041328]
[175.67497253 -5.23901558]
[174.31382751 9.85810566]
[167.86843872 23.57789993]
[157.11711121 34.26363754]
[143.35813904 40.62495804]
[128.25297546 41.89370728]
[124.34416962 56.37546158]
[120.43536377 70.85721588]
[130.62644958 81.86366272]
[145.36567688 79.07884216]
[160.10488892 76.29402161]
[173.73423767 63.96505737]
[190.05926514 70.31347656]
[204.73376465 67.20555115]
[219.40824890 64.09761810]
[234.08274841 60.98968887]
[248.75724792 57.88175964]
[253.43774414 43.25341034]
[264.81613159 32.93702316]
[279.83166504 29.70765114]
[294.44528198 34.43397903]
[304.72595215 45.84464645]
[307.90823364 60.87024307]
[303.13613892 75.46896362]
[291.69329834 85.71381378]
[276.65780640 88.84899139]
[262.07409668 84.03114319]
[251.86517334 72.55625153]
[237.19067383 75.66418457]
[222.51618958 78.77210999]
[207.84169006 81.88004303]
[193.16719055 84.98796844]
[186.27220154 94.98594666]
[174.01379395 97.66072845]
[162.88970947 91.03324890]
[148.15048218 93.81806946]
[133.41127014 96.60289001]
[125.97229767 122.65017700]
[101.24050903 135.31758118]
[74.44181824 125.66069031]
[73.45391846 140.62811279]
[72.46601868 155.59555054]
[71.47812653 170.56298828]
[70.65469360 185.54037476]
[69.99582672 200.52589417]
[77.11949921 214.65260315]
[68.83063507 227.02774048]
[75.95430756 241.15443420]
[67.66543579 253.52957153]
[67.00656891 268.51510620]
[66.34770966 283.50061035]
[65.68884277 298.48614502]
[65.02998352 313.47167969]
[77.00062561 323.16754150]
[80.92089081 337.88095093]
[75.48988342 351.91549683]
[62.98584747 359.96453857]
[62.32698441 374.95007324]
[61.66812134 389.93557739]
[74.32662201 398.75408936]
[80.18685913 413.02508545]
[77.37884521 428.19473267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 139]
[7 138]
[8 137]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[18 127]
[20 125]
[21 124]
[23 123]
[24 122]
[25 121]
[26 120]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[35 42]
[36 41]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[67 88]
[68 87]
[69 86]
[89 117]
[90 116]
[91 115]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
