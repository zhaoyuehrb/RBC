%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCUGCUGGAGCCACGAUUCAGUCCCCUGGACUGUAGAUAAAGACCCUUUCUUGCCAGGUGCUGAGACAACCACACU\
) } def
/len { sequence length } bind def

/coor [
[59.54507446 281.95669556]
[48.64748764 280.90420532]
[38.15762711 277.78872681]
[28.46207809 272.72729492]
[18.72035789 284.13339233]
[8.97863674 295.53948975]
[8.79885578 311.58151245]
[-3.94347024 321.32897949]
[-19.47352028 317.30441284]
[-25.87796783 302.59512329]
[-18.24386978 288.48486328]
[-2.42745280 285.79776001]
[7.31426811 274.39166260]
[17.05598831 262.98556519]
[6.41013288 245.91670227]
[2.35813785 226.18699646]
[5.42252541 206.25485229]
[15.23798561 188.61003113]
[30.59483147 175.46266174]
[49.58806229 168.46636963]
[69.85366058 168.51037598]
[74.48891449 154.24452209]
[79.12417603 139.97868347]
[83.75942993 125.71283722]
[88.39468384 111.44698334]
[83.71031952 100.60267639]
[87.58055115 89.44186401]
[97.97290802 83.82570648]
[103.16466522 69.75283813]
[108.35642242 55.67996597]
[113.54817200 41.60709763]
[118.73992920 27.53422546]
[111.72393799 18.89103317]
[109.09387207 8.15849400]
[111.28594208 -2.58807421]
[117.81084442 -11.30141544]
[127.36078644 -16.35232925]
[138.07109070 -16.83409882]
[144.88095093 -30.19919586]
[151.69081116 -43.56429291]
[142.79275513 -56.01753616]
[140.71272278 -71.18104553]
[145.92868042 -85.57035828]
[157.24203491 -95.87892151]
[172.05307007 -99.73789215]
[186.95832825 -96.26052094]
[198.53266907 -86.24587250]
[204.11639404 -71.99523926]
[202.42642212 -56.78331757]
[193.85108948 -44.10569382]
[180.36093140 -36.87559128]
[165.05590820 -36.75443649]
[158.24604797 -23.38933754]
[151.43618774 -10.02424049]
[158.97879028 7.67726946]
[151.33970642 25.65729141]
[132.81280518 32.72598267]
[127.62104797 46.79885101]
[122.42929077 60.87172318]
[117.23753357 74.94459534]
[112.04577637 89.01746368]
[115.40111542 105.34064484]
[102.66053009 116.08223724]
[98.02527618 130.34808350]
[93.39002228 144.61393738]
[88.75476837 158.87979126]
[84.11950684 173.14562988]
[93.55395508 178.85238647]
[101.71882629 186.25428772]
[108.31419373 195.07652283]
[113.09831238 204.99218750]
[115.89650726 215.63436890]
[116.60755157 226.60969543]
[115.20732117 237.51293945]
[111.74961853 247.94189453]
[106.36408234 257.51229858]
[99.25135040 265.87194824]
[90.67558289 272.71365356]
[80.95465088 277.78656006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[38 54]
[39 53]
[40 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
