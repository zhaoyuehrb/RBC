%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGCGGCGUGAGGGCUCCGGGUCGCUGGCGGCGUGGACACCUGAGUCCCGGGGUAGGGGUCUCCCGCGAGGAGUGAGCUGUUGCCGCAGAAUGGGCUGCUGGCUCCUGCCCUGCUUCCUGUGAUCGAGCCGGCCCUGAGGACUCUGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[-70.12374878 308.95339966]
[-76.64209747 310.75173950]
[-83.34379578 310.41723633]
[-89.55400848 308.01617432]
[-95.13544464 322.82015991]
[-109.85599518 325.09054565]
[-121.33579254 334.74530029]
[-132.81559753 344.40005493]
[-138.39703369 359.20404053]
[-153.11758423 361.47442627]
[-164.59738159 371.12918091]
[-176.07719421 380.78393555]
[-181.65863037 395.58792114]
[-196.37918091 397.85830688]
[-207.85897827 407.51306152]
[-219.24035645 417.28363037]
[-230.52212524 427.16906738]
[-241.80389404 437.05447388]
[-253.08567810 446.93991089]
[-261.01385498 461.92590332]
[-277.60894775 458.45608521]
[-278.86871338 441.54901123]
[-262.97109985 435.65814209]
[-251.68931580 425.77270508]
[-240.40754700 415.88729858]
[-229.12577820 406.00186157]
[-226.15010071 399.18829346]
[-217.51373291 396.03326416]
[-206.03392029 386.37850952]
[-201.27360535 372.26507568]
[-185.73193359 369.30410767]
[-174.25213623 359.64938354]
[-162.77233887 349.99462891]
[-158.01200867 335.88119507]
[-142.47035217 332.92025757]
[-130.99053955 323.26550293]
[-119.51074219 313.61074829]
[-114.75041199 299.49734497]
[-99.20875549 296.53637695]
[-94.12634277 273.95858765]
[-70.72249603 269.34133911]
[-60.49869537 258.36526489]
[-50.27489853 247.38920593]
[-50.38035583 235.25631714]
[-41.90124512 226.02432251]
[-29.00237274 225.03747559]
[-18.55822372 214.27085876]
[-8.11407566 203.50425720]
[2.33007360 192.73765564]
[12.77422237 181.97105408]
[23.21837044 171.20445251]
[33.55287552 160.33256531]
[43.77667236 149.35649109]
[54.00046921 138.38043213]
[64.22426605 127.40436554]
[74.44806671 116.42830658]
[84.67185974 105.45223999]
[84.97003937 93.77272034]
[93.01946259 85.30473328]
[104.66888428 84.41538239]
[115.11303711 73.64878082]
[119.16814423 58.35607910]
[133.58348083 54.60808182]
[144.02761841 43.84147644]
[141.51640320 28.64279556]
[148.35621643 15.03873825]
[161.73678589 8.15222645]
[176.43080139 10.43788338]
[186.87493896 -0.32872027]
[197.31909180 -11.09532356]
[207.76324463 -21.86192703]
[211.81834412 -37.15462875]
[226.23367310 -40.90262604]
[236.67782593 -51.66923141]
[247.12197876 -62.43583298]
[257.56613159 -73.20243835]
[268.01028442 -83.96903992]
[278.34478760 -94.84093475]
[282.08911133 -110.21267700]
[296.42553711 -114.25205994]
[306.64932251 -125.22812653]
[310.39364624 -140.59986877]
[324.73007202 -144.63925171]
[324.34631348 -160.21134949]
[334.87103271 -171.19700623]
[349.71902466 -171.46690369]
[359.94284058 -182.44296265]
[370.16662598 -193.41902161]
[380.27865601 -204.49813843]
[390.27792358 -215.67915344]
[400.27716064 -226.86016846]
[410.27639771 -238.04118347]
[409.14584351 -253.80497742]
[419.55609131 -265.69622803]
[435.33096313 -266.66009521]
[447.11148071 -256.12469482]
[447.90850830 -240.34049988]
[437.24914551 -228.67201233]
[421.45742798 -228.04193115]
[411.45819092 -216.86091614]
[401.45892334 -205.67990112]
[391.45968628 -194.49888611]
[389.33255005 -187.37463379]
[381.14270020 -183.19523621]
[370.91888428 -172.21916199]
[360.69509888 -161.24310303]
[361.47830200 -146.41333008]
[351.26626587 -135.13639832]
[335.70614624 -134.41545105]
[332.69308472 -119.82878876]
[317.62539673 -115.00432587]
[307.40158081 -104.02825928]
[304.38851929 -89.44159698]
[289.32083130 -84.61713409]
[287.04974365 -77.53746033]
[278.77688599 -73.52489471]
[268.33273315 -62.75828934]
[257.88858032 -51.99168396]
[247.44442749 -41.22508240]
[237.00028992 -30.45847702]
[233.69221497 -15.93587685]
[218.52984619 -11.41777897]
[208.08569336 -0.65117514]
[197.64154053 10.11542892]
[187.19740295 20.88203239]
[189.92866516 35.49976730]
[183.45207214 49.08349991]
[170.06222534 56.33368301]
[154.79421997 54.28562546]
[144.35008240 65.05223083]
[141.04200745 79.57482910]
[125.87963867 84.09292603]
[115.43549347 94.85953522]
[111.79161835 111.20877075]
[95.64792633 115.67604065]
[85.42412567 126.65209961]
[75.20033264 137.62815857]
[64.97653198 148.60423279]
[54.75273514 159.58029175]
[44.52893829 170.55635071]
[40.94053268 179.02185059]
[33.98497391 181.64860535]
[23.54082680 192.41520691]
[13.09667778 203.18180847]
[2.65252852 213.94841003]
[-7.79162025 224.71501160]
[-18.23576927 235.48161316]
[-22.28461647 253.41725159]
[-39.29883575 257.61300659]
[-49.52263260 268.58908081]
[-59.74642944 279.56512451]
[-57.71423721 286.28558350]
[-57.89122391 293.25250244]
[-60.22703552 299.76351929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 39]
[6 37]
[7 36]
[8 35]
[10 33]
[11 32]
[12 31]
[14 29]
[15 28]
[16 26]
[17 25]
[18 24]
[19 23]
[41 151]
[42 150]
[43 149]
[46 147]
[47 146]
[48 145]
[49 144]
[50 143]
[51 142]
[52 140]
[53 139]
[54 138]
[55 137]
[56 136]
[57 135]
[60 133]
[61 132]
[63 130]
[64 129]
[68 125]
[69 124]
[70 123]
[71 122]
[73 120]
[74 119]
[75 118]
[76 117]
[77 116]
[78 114]
[80 112]
[81 111]
[83 109]
[86 106]
[87 105]
[88 104]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
