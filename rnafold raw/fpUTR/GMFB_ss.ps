%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUGGGCCAGGCGCCGGGGCAGGAAGGGAGGCGGCCGCCGUGCCAUUCUUAAAGGCGCCCGAGUGUAGGCGACAGGCCGCUGACGGCCGGAAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[197.70207214 201.18273926]
[186.76754761 190.91453552]
[172.19322205 187.84236145]
[167.42987061 172.75524902]
[156.49534607 162.48704529]
[145.56080627 152.21882629]
[130.98648071 149.14666748]
[126.22313690 134.05953979]
[115.28860474 123.79133606]
[104.19413757 113.69615173]
[90.52740479 110.74455261]
[85.88618469 97.55551147]
[74.63451385 87.63583374]
[63.38285065 77.71615601]
[52.13118362 67.79647827]
[40.87951660 57.87680054]
[29.62785149 47.95712280]
[17.69371033 52.31837845]
[5.11699915 51.12501144]
[-5.65885353 44.67187500]
[-12.56743240 34.26955414]
[-14.31550789 21.97865105]
[-10.62472916 10.20171070]
[-21.23133087 -0.40489140]
[-31.83793259 -11.01149273]
[-42.44453430 -21.61809540]
[-53.05113602 -32.22469711]
[-63.82302856 -42.66338730]
[-74.75756073 -52.93159485]
[-90.11399841 -56.73821259]
[-94.09523773 -71.09088135]
[-105.18969727 -81.18606567]
[-116.44136810 -91.10574341]
[-127.69303131 -101.02542114]
[-143.86683655 -103.73465729]
[-149.35324097 -119.18883514]
[-138.50828552 -131.49002075]
[-122.48834229 -127.98380280]
[-117.77335358 -112.27709198]
[-106.52169037 -102.35741425]
[-95.27001953 -92.43773651]
[-88.04122925 -90.33795166]
[-83.82702637 -82.02540588]
[-69.25270081 -78.95323944]
[-64.48935699 -63.86612320]
[-53.55482483 -53.59791946]
[-46.39555359 -51.27210617]
[-42.44453430 -42.83129883]
[-31.83793259 -32.22469711]
[-21.23133087 -21.61809540]
[-10.62472916 -11.01149273]
[-0.01812731 -0.40489140]
[17.11743355 -4.03146172]
[33.19734573 3.29422641]
[41.85650635 18.87453842]
[39.54752731 36.70545959]
[50.79919434 46.62513733]
[62.05086136 56.54481506]
[73.30252838 66.46449280]
[84.55419159 76.38417053]
[95.80586243 86.30384827]
[109.47259521 89.25544739]
[114.11381531 102.44448853]
[122.78605652 105.85770416]
[125.55681610 112.85681152]
[136.49134827 123.12501526]
[151.84777832 126.93163300]
[155.82902527 141.28430176]
[166.76354980 151.55250549]
[177.69807434 161.82070923]
[193.05451965 165.62733459]
[197.03575134 179.97999573]
[207.97027588 190.24819946]
[228.81320190 184.16590881]
[249.17446899 191.34432983]
[261.45407104 208.95231628]
[261.15719604 230.29454041]
[274.06832886 237.93016052]
[286.97946167 245.56578064]
[299.89059448 253.20140076]
[312.80172729 260.83703613]
[329.19671631 260.46759033]
[337.48175049 274.61999512]
[329.13391113 288.73544312]
[312.74072266 288.29315186]
[305.16610718 273.74813843]
[292.25497437 266.11251831]
[279.34384155 258.47689819]
[266.43270874 250.84129333]
[253.52159119 243.20567322]
[246.41923523 249.11094666]
[237.99487305 252.94544983]
[228.83900452 254.42924500]
[219.59632874 253.44749451]
[210.92042542 250.05940247]
[203.42744446 244.49465942]
[197.65242004 237.13790894]
[194.01106262 228.50222778]
[192.76979065 219.19328308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[4 70]
[5 69]
[6 68]
[8 66]
[9 65]
[10 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 46]
[29 45]
[31 43]
[32 41]
[33 40]
[34 39]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
