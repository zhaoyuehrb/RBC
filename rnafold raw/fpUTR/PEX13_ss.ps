%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUGUCUUACGCUCCAGGUGCUGGUCUACGCGGGCCUGGACAGUCAGGGGUAGGAGCGGGAGCCGAGAGGAGGCGGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[185.69363403 222.43313599]
[200.68289185 223.05682373]
[190.89857483 211.68724060]
[176.73208618 207.08728027]
[173.59506226 191.58018494]
[163.81074524 180.21061707]
[153.81555176 169.02598572]
[143.61296082 158.03021240]
[133.41036987 147.03442383]
[123.20777893 136.03865051]
[113.00518799 125.04286957]
[102.80259705 114.04709625]
[89.49980164 109.74275970]
[86.20162201 96.15549469]
[74.65107727 86.58549500]
[61.95021820 78.60501099]
[49.24935532 70.62453461]
[36.54849243 62.64405060]
[23.84762764 54.66357040]
[11.14676476 46.68309021]
[-1.55409813 38.70261002]
[-17.35552979 37.91183472]
[-24.01552773 24.58915710]
[-36.86339569 16.84756279]
[-49.85377502 9.34756279]
[-65.65995789 12.09422302]
[-77.56628418 1.34159911]
[-76.43923950 -14.66181660]
[-63.14339828 -23.63957405]
[-47.87818909 -18.70470428]
[-42.35377502 -3.64281821]
[-29.36339569 3.85718179]
[-21.81220436 4.48947430]
[-16.03504562 11.88829422]
[-1.14206481 12.10825157]
[6.42638302 26.00174522]
[19.12724686 33.98222733]
[31.82810974 41.96270752]
[44.52897263 49.94318771]
[57.22983551 57.92367172]
[69.93069458 65.90415192]
[82.63156128 73.88463593]
[81.01547241 58.97194290]
[89.10200500 46.33833694]
[103.32103729 41.56141281]
[117.39503479 46.75012589]
[125.11046600 59.61371994]
[123.06106567 74.47306061]
[112.15161896 84.76790619]
[97.19740295 85.95290375]
[110.50019836 90.25724030]
[113.79837799 103.84450531]
[124.00096893 114.84027863]
[134.20355225 125.83605957]
[144.40614319 136.83183289]
[154.60873413 147.82762146]
[164.81132507 158.82339478]
[173.15521240 163.12431335]
[175.18032837 170.42630005]
[184.96464539 181.79588318]
[199.83097839 187.20907593]
[202.26815796 201.90293884]
[212.05247498 213.27250671]
[223.60301208 222.84251404]
[236.59339905 230.34251404]
[249.58377075 237.84251404]
[264.21542358 232.32447815]
[278.95364380 237.55122375]
[286.83950806 251.05482483]
[284.14953613 266.45932007]
[272.15383911 276.49114990]
[256.51644897 276.41360474]
[244.62084961 266.26330566]
[242.08377075 250.83288574]
[229.09339905 243.33288574]
[216.10301208 235.83288574]
[219.50260925 250.44256592]
[214.71310425 264.65737915]
[203.16532898 274.23071289]
[188.30911255 276.30261230]
[174.58264160 270.25411987]
[166.08663940 257.89218140]
[165.35922241 242.90982056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[5 60]
[6 59]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[14 50]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[23 34]
[24 32]
[25 31]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
