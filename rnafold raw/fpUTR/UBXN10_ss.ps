%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCCCGGGAGACCAGGGUUGUUUACCAGCAGGACAGAGCCCGGGCGCAGGCGGCGGAUGGAGCGGAACGGCUAGGGGUCUUGAGAAGCA\
) } def
/len { sequence length } bind def

/coor [
[-22.69354057 252.02217102]
[-25.57708168 254.64816284]
[-28.79819298 255.87139893]
[-31.80349731 255.77995300]
[-42.76603699 266.01824951]
[-53.72857666 276.25656128]
[-64.69111633 286.49484253]
[-75.47725677 296.91882324]
[-86.08386230 307.52542114]
[-89.80331421 323.49719238]
[-105.57148743 328.00238037]
[-117.16743469 316.40643311]
[-112.66223907 300.63827515]
[-96.69046021 296.91882324]
[-86.08386230 286.31222534]
[-83.52720642 279.20785522]
[-74.92941284 275.53231812]
[-63.96687317 265.29400635]
[-53.00433350 255.05570984]
[-42.04179382 244.81741333]
[-31.80349731 233.85487366]
[-22.33717728 222.21920776]
[-12.87085915 210.58354187]
[-3.40453982 198.94787598]
[6.06177950 187.31219482]
[2.19557691 177.41502380]
[2.90505219 166.73110962]
[8.12525654 157.28865051]
[16.92836571 150.90974426]
[27.68788719 148.85890198]
[38.37900162 151.59291077]
[48.98560333 140.98631287]
[59.59220505 130.37971497]
[70.19880676 119.77310944]
[80.80541229 109.16650391]
[91.41201019 98.55990601]
[91.60111237 95.27904510]
[93.09334564 92.00961304]
[95.87944794 89.27587891]
[99.74051666 87.58734131]
[104.26076508 87.35636902]
[116.21283722 78.29282379]
[128.16491699 69.22927856]
[134.48580933 54.72559357]
[149.30212402 53.20043182]
[161.25419617 44.13688660]
[173.20626831 35.07334137]
[170.73997498 21.18883133]
[174.52313232 7.67304134]
[183.75105286 -2.81358767]
[196.55335999 -8.23295212]
[210.37274170 -7.56525612]
[222.47589111 -1.00039423]
[229.28826904 -15.27982330]
[244.14801025 -16.29825020]
[256.40255737 -24.94845390]
[257.52597046 -40.54563141]
[268.44924927 -51.73560715]
[284.01480103 -53.23481369]
[296.87304688 -44.33537292]
[300.95266724 -29.23932648]
[294.32745361 -15.07456970]
[280.12557983 -8.52926540]
[265.05276489 -12.69390583]
[252.79821777 -4.04370070]
[246.86236572 9.61700821]
[231.12609863 11.25415421]
[233.01191711 27.20458984]
[226.61520386 42.03887177]
[213.57194519 51.72731400]
[197.33712769 53.58728027]
[182.26982117 47.02541733]
[170.31773376 56.08896255]
[158.36566162 65.15251160]
[152.89967346 79.00791168]
[137.22845459 81.18135834]
[125.27638245 90.24490356]
[113.32431030 99.30844879]
[102.01861572 109.16650391]
[91.41201019 119.77310944]
[80.80541229 130.37971497]
[70.19880676 140.98631287]
[59.59220505 151.59291077]
[48.98560333 162.19950867]
[50.26671600 182.04557800]
[36.98926163 196.45100403]
[17.69744873 196.77851868]
[8.23112965 208.41418457]
[-1.23518968 220.04986572]
[-10.70150852 231.68553162]
[-20.16782761 243.32119751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 15]
[9 14]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[36 79]
[41 78]
[42 77]
[43 76]
[45 74]
[46 73]
[47 72]
[53 67]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
