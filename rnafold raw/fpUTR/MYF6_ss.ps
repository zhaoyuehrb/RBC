%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCACUAAUUAAAUGCCAUCUGGGUGGUUCCUCUGGGUUUUUGAGUCCAUCACCCAGUUCAGAUCGAGUCAGAGGCCAAGGAGGAGAAC\
) } def
/len { sequence length } bind def

/coor [
[97.46707153 214.32659912]
[96.65759277 229.30473328]
[91.95362091 243.54806519]
[83.68351746 256.06228638]
[72.42462921 265.97375488]
[58.96292877 272.59060669]
[44.23815918 275.45086670]
[29.27824974 274.35491943]
[15.12754059 269.37924194]
[2.77387905 260.87118530]
[-6.92033386 249.42468262]
[-13.27835274 235.83882141]
[-15.85632992 221.06201172]
[-14.47429848 206.12582397]
[-9.22873688 192.07292175]
[-0.48583394 179.88433838]
[11.13933182 170.41384888]
[-3.85192323 169.90173340]
[-18.84317780 169.38961792]
[-33.83443451 168.87750244]
[-48.82568741 168.36538696]
[-63.03716278 176.54866028]
[-77.09233856 168.09974670]
[-76.53244781 151.71015930]
[-61.93347168 144.24011230]
[-48.31357193 153.37413025]
[-33.32231903 153.88624573]
[-18.33106232 154.39836121]
[-3.33980656 154.91047668]
[11.65144920 155.42259216]
[25.86906433 150.64144897]
[37.50473404 141.17512512]
[49.14040375 131.70880127]
[60.77607346 122.24248505]
[72.41174316 112.77616882]
[84.04740906 103.30984497]
[89.50382996 87.53923798]
[105.97222900 84.84174347]
[117.27793121 74.98368835]
[128.58361816 65.12563324]
[139.88931274 55.26758194]
[151.19500732 45.40952682]
[162.50070190 35.55147171]
[173.80641174 25.69341469]
[185.11210632 15.83536053]
[196.41780090 5.97730494]
[201.73417664 -8.92392254]
[216.41188049 -11.45662880]
[227.71757507 -21.31468391]
[233.03396606 -36.21591187]
[247.71165466 -38.74861908]
[259.01733398 -48.60667419]
[270.32302856 -58.46472931]
[267.29086304 -73.52133179]
[272.20840454 -88.07170105]
[283.75289917 -98.20185852]
[298.81893921 -101.18684387]
[313.35382080 -96.22370911]
[323.44775391 -84.64750671]
[326.38549805 -69.57218933]
[321.37680054 -55.05293655]
[309.76904297 -44.99534988]
[294.68457031 -42.10487366]
[280.18109131 -47.15903473]
[268.87539673 -37.30097961]
[257.56970215 -27.44292259]
[253.06198120 -13.24680901]
[237.57562256 -10.00898838]
[226.26992798 -0.15093350]
[221.76220703 14.04518032]
[206.27584839 17.28300095]
[194.97015381 27.14105606]
[183.66445923 36.99911118]
[172.35876465 46.85716629]
[161.05307007 56.71522141]
[149.74737549 66.57327271]
[138.44168091 76.43132782]
[127.13598633 86.28938293]
[115.83028412 96.14744568]
[114.29055023 107.82434845]
[105.28246307 115.41219330]
[93.51373291 114.94551849]
[81.87805939 124.41183472]
[70.24239349 133.87815857]
[58.60671997 143.34448242]
[46.97105408 152.81079102]
[35.33538437 162.27711487]
[50.32627106 162.79981995]
[64.65701294 167.23037720]
[77.32719421 175.25947571]
[87.45230865 186.32664490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[48 69]
[49 68]
[51 66]
[52 65]
[53 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
