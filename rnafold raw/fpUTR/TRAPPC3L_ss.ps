%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAAAAACAAAACAAAAAGACAUGGACUGAUACACCUCUAAGAAACAGGCAAAAGAAGAGAAAUUGAAGAUCAUAUUCUUCAUCUAUCAAGCACU\
) } def
/len { sequence length } bind def

/coor [
[43.18582916 162.42424011]
[34.79957581 170.21337891]
[25.36780739 176.69326782]
[15.09305477 181.72560120]
[4.19583511 185.20310974]
[-7.09008503 187.05187988]
[-18.52270317 187.23297119]
[-29.85696793 185.74316406]
[-40.85003662 182.61503601]
[-51.26647949 177.91630554]
[-60.88330460 171.74829102]
[-69.49475861 164.24372864]
[-76.91670990 155.56399536]
[-82.99058533 145.89555359]
[-87.58676910 135.44598389]
[-90.60736847 124.43952179]
[-91.98828888 113.11225891]
[-91.70058441 101.70705414]
[-89.75110626 90.46833801]
[-103.89208221 85.46505737]
[-118.03305054 80.46176910]
[-132.16250610 87.01892853]
[-146.43218994 81.74343872]
[-152.59635925 68.23275757]
[-166.73733521 63.22946930]
[-179.44619751 72.13251495]
[-194.96035767 71.83148956]
[-207.31428528 62.44213486]
[-211.75765991 47.57485199]
[-206.58190918 32.94641495]
[-193.77720642 24.18175697]
[-178.26722717 24.65106773]
[-166.01586914 34.17388535]
[-161.73405457 49.08849716]
[-147.59307861 54.09178162]
[-134.30363464 47.46407318]
[-119.89141083 52.33667374]
[-113.02976227 66.32079315]
[-98.88879395 71.32408142]
[-84.74781799 76.32736969]
[-74.29321289 59.69192123]
[-60.00328064 46.19408798]
[-42.78340530 36.69530869]
[-23.72617340 31.80346870]
[-4.04205132 31.83397102]
[15.01750660 36.78942108]
[32.23961639 46.35916519]
[46.52714539 59.93876266]
[56.96861267 76.66815948]
[62.89632797 95.48617554]
[77.84718323 94.27296448]
[83.42561340 84.22547913]
[93.18512726 78.15730286]
[104.66377258 77.59921265]
[114.96593475 82.69200134]
[121.49275208 92.15093994]
[136.49078369 91.90804291]
[146.11611938 83.13609314]
[158.73373413 83.34911346]
[167.47915649 91.87841797]
[182.47718811 92.12131500]
[197.47521973 92.36421204]
[202.36698914 89.61731720]
[207.31188965 89.20471191]
[211.36363220 90.72113037]
[213.89756775 93.42945862]
[228.80130005 95.12616730]
[243.70503235 96.82287598]
[258.60876465 98.51958466]
[273.51248169 100.21629333]
[288.41622925 101.91300201]
[300.62631226 91.87858582]
[316.34719849 93.50015259]
[326.25195312 105.81564331]
[324.46426392 121.51850128]
[312.04473877 131.29249573]
[296.36166382 129.33889771]
[286.71951294 116.81672668]
[271.81579590 115.12001801]
[256.91204834 113.42331696]
[242.00833130 111.72660828]
[227.10459900 110.02989960]
[212.20086670 108.33319092]
[197.23231506 107.36224365]
[182.23428345 107.11934662]
[167.23625183 106.87644958]
[152.49755859 116.24979401]
[136.73367310 106.90607452]
[121.73564148 107.14897156]
[109.95386505 120.60258484]
[92.09173584 121.47103882]
[79.06039429 109.22382355]
[64.10953522 110.43702698]
[63.08395767 121.84801483]
[60.40380859 132.98474121]
[56.12718201 143.60865784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 40]
[20 39]
[21 38]
[24 35]
[25 34]
[50 93]
[51 92]
[56 89]
[57 88]
[60 86]
[61 85]
[62 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
