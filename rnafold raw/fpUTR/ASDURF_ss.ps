%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUUGGUAAGACUCGCGGGAAAAGAAAGGGUGAGCGCGGCUGGAAGCGCGCAUGCGCUGUGGCUAAUGCCGUAGGCUCCUUCAGGGCUGAGCCAUCCCGCGUGUCUUGCGCUCGGUGGAA\
) } def
/len { sequence length } bind def

/coor [
[112.08995819 448.53906250]
[120.39524078 434.39852905]
[120.01216125 419.40344238]
[119.62908173 404.40832520]
[119.24600220 389.41320801]
[118.86292267 374.41812134]
[118.47984314 359.42300415]
[117.52269745 344.45358276]
[115.99287415 329.53179932]
[114.46305847 314.61001587]
[112.93323517 299.68823242]
[111.40341949 284.76644897]
[109.87359619 269.84466553]
[108.34378052 254.92286682]
[99.34879303 243.05107117]
[105.63829803 228.53375244]
[104.10847473 213.61195374]
[102.57865906 198.69017029]
[101.04883575 183.76838684]
[99.51902008 168.84660339]
[97.98919678 153.92481995]
[96.45938110 139.00303650]
[85.66244507 136.44458008]
[76.01641846 130.96063232]
[68.29561615 122.99140930]
[63.11978912 113.17661285]
[60.90442276 102.30409241]
[61.82734680 91.24662018]
[65.81447601 80.89180756]
[54.36495972 71.20116425]
[38.83264542 68.19155121]
[34.11652756 54.06330109]
[22.66701126 44.37265778]
[11.21749210 34.68201828]
[-4.31482315 31.67240715]
[-9.03093910 17.54415512]
[-20.48045731 7.85351372]
[-31.92997551 -1.83712733]
[-43.37949371 -11.52776814]
[-54.82901382 -21.21841049]
[-69.86841583 -17.39795303]
[-84.26865387 -23.17833519]
[-92.49253845 -36.33688354]
[-91.37781525 -51.81386566]
[-81.35311890 -63.65806961]
[-66.27315521 -67.31515503]
[-51.93647003 -61.37889481]
[-43.85581970 -48.13190842]
[-45.13837051 -32.66792679]
[-33.68885422 -22.97728729]
[-22.23933411 -13.28664589]
[-10.78981590 -3.59600449]
[0.65970254 6.09463692]
[15.37307167 8.41110802]
[20.90813255 23.23250008]
[32.35765076 32.92314148]
[43.80717087 42.61378098]
[58.52053833 44.93025208]
[64.05560303 59.75164413]
[75.50511932 69.44228363]
[84.29788208 64.12220001]
[94.17189789 61.27266693]
[104.44723511 61.08990860]
[108.97304535 46.78896332]
[113.49884796 32.48801804]
[109.44000244 16.59909630]
[121.35827637 5.33468676]
[136.99316406 10.28264713]
[140.26083374 26.35294151]
[127.79979706 37.01382828]
[123.27398682 51.31477356]
[118.74817657 65.61571503]
[123.15882111 68.41769409]
[127.15718079 71.78191376]
[130.67208862 75.64848328]
[133.64094543 79.94857025]
[147.75804138 74.87831116]
[161.87513733 69.80805969]
[175.99224854 64.73780823]
[190.10934448 59.66755295]
[192.76176453 44.53942490]
[202.63517761 32.77459717]
[217.07369995 27.53774834]
[232.19343567 30.23756599]
[243.92726135 40.14781189]
[249.11883545 54.60268021]
[246.37162781 69.71388245]
[236.42465210 81.41658783]
[221.95358276 86.56281281]
[206.85105896 83.76826477]
[195.17959595 73.78465271]
[181.06250000 78.85491180]
[166.94540405 83.92516327]
[152.82829285 88.99541473]
[138.71119690 94.06566620]
[133.14158630 120.86643219]
[111.38116455 137.47322083]
[112.91098022 152.39500427]
[114.44080353 167.31678772]
[115.97061920 182.23857117]
[117.50044250 197.16035461]
[119.03025818 212.08213806]
[120.56008148 227.00392151]
[129.66448975 239.94302368]
[123.26556396 253.39305115]
[124.79537964 268.31481934]
[126.32520294 283.23660278]
[127.85501862 298.15838623]
[129.38484192 313.08016968]
[130.91465759 328.00198364]
[132.44447327 342.92376709]
[135.65156555 347.33673096]
[136.66003418 352.06570435]
[135.73403931 356.19015503]
[133.47496033 359.03991699]
[133.85803223 374.03503418]
[134.24111938 389.03015137]
[134.62419128 404.02523804]
[135.00727844 419.02035522]
[135.39035034 434.01547241]
[144.40682983 447.71347046]
[136.81140137 462.24761963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 115]
[8 111]
[9 110]
[10 109]
[11 108]
[12 107]
[13 106]
[14 105]
[16 103]
[17 102]
[18 101]
[19 100]
[20 99]
[21 98]
[22 97]
[29 60]
[30 59]
[32 57]
[33 56]
[34 55]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[63 72]
[64 71]
[65 70]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
