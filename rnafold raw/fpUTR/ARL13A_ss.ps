%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAGAAGGCUAGAAAGCUCAAUGCGUCUUCCUAUUACUCUGCAUAUCUUAUGUCUUCCAUCCAAAAAGAAUCAACUUAUCAGAUAAAUAACCACCUCAUGAACUAAGAUGAAUC\
) } def
/len { sequence length } bind def

/coor [
[81.10742188 192.54798889]
[67.99542236 185.26269531]
[61.44362259 171.76921082]
[63.82749176 156.95985413]
[74.28483582 146.20286560]
[81.74254608 133.18815613]
[68.95820618 141.03422546]
[56.17386627 148.88027954]
[43.38952637 156.72634888]
[30.60519028 164.57241821]
[17.82085228 172.41847229]
[31.83259583 177.77301025]
[38.17954254 191.36404419]
[33.29078293 205.54501343]
[19.91682243 212.33744812]
[5.58209705 207.91979980]
[-1.64841211 194.77751160]
[2.29426622 180.30342102]
[-11.58311558 185.99713135]
[-19.07389641 200.18402100]
[-34.86228561 203.03117371]
[-46.83678055 192.35452271]
[-45.81157303 176.34425354]
[-32.57311630 167.28208923]
[-17.27682114 172.11975098]
[-3.39943933 166.42604065]
[9.97478962 159.63414001]
[22.75912857 151.78807068]
[35.54346466 143.94201660]
[48.32780457 136.09594727]
[61.11214447 128.24989319]
[73.89648438 120.40382385]
[73.24617004 88.37010956]
[97.80349731 74.88301086]
[101.00091553 60.22775650]
[104.19834137 45.57250214]
[107.39576721 30.91724586]
[99.12475586 17.71769524]
[102.57616425 2.90073156]
[115.21089172 -4.90306711]
[118.40831757 -19.55832100]
[121.60574341 -34.21357727]
[124.80316162 -48.86883163]
[123.57071686 -58.05498123]
[128.28817749 -63.87215042]
[131.87791443 -78.43627930]
[135.46765137 -93.00040436]
[122.92356110 -101.47809601]
[114.05348206 -113.71302795]
[109.91234589 -128.21720886]
[110.98139954 -143.23477173]
[117.11236572 -156.95455933]
[127.54766083 -167.72857666]
[141.01393127 -174.26986694]
[155.87747192 -175.80630493]
[159.46720886 -190.37043762]
[163.05694580 -204.93457031]
[166.64666748 -219.49868774]
[155.96708679 -230.63197327]
[153.02436829 -245.77607727]
[158.75755310 -260.09860229]
[171.33718872 -269.02923584]
[186.74914551 -269.71829224]
[200.07554626 -261.94586182]
[207.06398010 -248.19212341]
[205.48446655 -232.84582520]
[195.84100342 -220.80393982]
[181.21080017 -215.90896606]
[177.62106323 -201.34483337]
[174.03132629 -186.78070068]
[170.44158936 -172.21658325]
[182.88858032 -163.94868469]
[191.77247620 -151.89857483]
[196.00553894 -137.50914001]
[195.05834961 -122.51166534]
[189.02593994 -108.71746063]
[178.61871338 -97.79912567]
[165.07879639 -91.08776093]
[150.03176880 -89.41066742]
[146.44203186 -74.84654236]
[142.85231018 -60.28241348]
[139.45841980 -45.67140579]
[136.26100159 -31.01615334]
[133.06356812 -16.36089897]
[129.86614990 -1.70564377]
[138.10220337 10.65165806]
[135.06832886 25.55971909]
[122.05101776 34.11466980]
[118.85359192 48.76992416]
[115.65617371 63.42517853]
[112.45874786 78.08043671]
[119.25653076 82.02227783]
[124.76177216 88.09406281]
[128.30517578 95.85794067]
[129.36947632 104.66662598]
[127.65412140 113.71697235]
[123.12133789 122.12310791]
[116.01708221 129.00280762]
[124.70301819 141.23205566]
[133.38894653 153.46130371]
[142.07489014 165.69055176]
[157.59193420 165.72254944]
[170.10679626 174.89630127]
[174.80728149 189.68429565]
[169.88592529 204.40028381]
[157.23512268 213.38563538]
[141.71932983 213.18530273]
[129.30471802 203.87634277]
[124.76493835 189.03820801]
[129.84564209 174.37649536]
[121.15969849 162.14723206]
[112.47377014 149.91798401]
[103.78783417 137.68873596]
[105.54743958 152.58517456]
[110.95144653 166.57791138]
[107.34119415 181.13696289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[18 26]
[19 25]
[34 91]
[35 90]
[36 89]
[37 88]
[40 85]
[41 84]
[42 83]
[43 82]
[45 81]
[46 80]
[47 79]
[55 71]
[56 70]
[57 69]
[58 68]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
