%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGCGCGCCGCGCGUGGGACAAUCGUAAAAGGGGCGGGACGCGCCGCGCUCGGGAUGUCGUGAAGCUGGGGGAGCUCGUCGCCGCCGCCGGCGGCUAGCGGGCGUCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[73.82904053 97.15108490]
[60.92947006 106.31141663]
[47.45187759 99.97077942]
[32.53685379 101.56517792]
[17.62183189 103.15958405]
[2.70681024 104.75398254]
[-10.19275665 113.91432190]
[-23.67035103 107.57367706]
[-38.58537292 109.16808319]
[-53.50039291 110.76248169]
[-63.41242981 122.77869415]
[-78.56109619 124.18317413]
[-89.95563507 114.65951538]
[-104.87065125 116.25392151]
[-119.78567505 117.84832001]
[-134.70069885 119.44272614]
[-147.60026550 128.60305786]
[-161.07786560 122.26242065]
[-173.97743225 131.42276001]
[-187.45501709 125.08211517]
[-195.24739075 138.37065125]
[-209.20712280 144.45167542]
[-223.89707947 141.18531799]
[-233.72915649 130.02877808]
[-248.64418030 131.62318420]
[-261.56820679 141.71780396]
[-276.66897583 135.32255554]
[-278.41207886 119.01631927]
[-265.00439453 109.57354736]
[-250.23858643 116.70815277]
[-235.32356262 115.11375427]
[-228.07196045 102.13098907]
[-214.40440369 95.83322906]
[-199.47467041 98.82599640]
[-189.04942322 110.16709137]
[-177.21667480 101.12079620]
[-162.67225647 107.34739685]
[-150.83952332 98.30110168]
[-136.29510498 104.52770233]
[-121.38008118 102.93329620]
[-106.46505737 101.33889771]
[-91.55003357 99.74449158]
[-82.42610931 88.02742767]
[-67.32286835 86.19800568]
[-55.09479523 95.84746552]
[-40.17977524 94.25305939]
[-25.26475334 92.65866089]
[-13.43200779 83.61236572]
[1.11240792 89.83896637]
[16.02742958 88.24456024]
[30.94245148 86.65016174]
[45.85747528 85.05575562]
[57.69021988 76.00946045]
[72.23463440 82.23606110]
[82.98148346 71.77159119]
[84.97236633 56.90429688]
[86.96324921 42.03700256]
[81.12603760 27.33198738]
[90.48412323 15.74425316]
[83.74510956 0.79374158]
[93.54145813 -12.35782146]
[109.79551697 -10.18123627]
[115.78651428 5.08441353]
[105.35140991 17.73513603]
[111.33102417 31.37674522]
[101.83054352 44.02788925]
[99.83966064 58.89517975]
[97.84877777 73.76247406]
[114.56911469 81.80112457]
[120.10349274 97.19083405]
[134.67494202 100.75074005]
[143.88626099 99.74650574]
[149.58435059 104.60421753]
[164.93402100 100.77038574]
[175.17716980 111.58365631]
[189.64869690 115.53019714]
[204.12020874 119.47673798]
[219.46987915 115.64289856]
[229.71304321 126.45617676]
[244.18455505 130.40270996]
[258.65606689 134.34925842]
[273.12759399 138.29579163]
[287.59912109 142.24232483]
[302.07061768 146.18887329]
[319.69226074 141.05384827]
[331.61984253 153.85131836]
[346.19131470 157.41122437]
[360.76275635 160.97113037]
[375.33419800 164.53102112]
[389.90563965 168.09092712]
[404.47711182 171.65081787]
[421.29867554 169.53628540]
[427.98724365 185.11508179]
[414.86883545 195.85491943]
[400.91720581 186.22227478]
[386.34576416 182.66236877]
[371.77429199 179.10247803]
[357.20285034 175.54257202]
[342.63140869 171.98266602]
[328.05996704 168.42277527]
[317.48065186 174.45199585]
[305.24981689 171.51176453]
[298.12408447 160.66038513]
[283.65255737 156.71385193]
[269.18106079 152.76730347]
[254.70953369 148.82077026]
[240.23802185 144.87423706]
[225.76649475 140.92768860]
[211.45193481 145.04380798]
[200.17367554 133.94825745]
[185.70214844 130.00170898]
[171.23063660 126.05517578]
[156.91607666 130.17129517]
[145.63781738 119.07573700]
[131.11503601 115.32218933]
[116.54359436 111.76228333]
[101.68071747 122.24433136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[3 52]
[4 51]
[5 50]
[6 49]
[8 47]
[9 46]
[10 45]
[13 42]
[14 41]
[15 40]
[16 39]
[18 37]
[20 35]
[24 31]
[25 30]
[55 68]
[56 67]
[57 66]
[59 64]
[70 116]
[71 115]
[73 114]
[75 112]
[76 111]
[77 110]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
