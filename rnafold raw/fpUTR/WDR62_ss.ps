%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCGCGGCUGUUCGCUGUUCCAGUGGGUCGUGGCGGUGGCGGCAGCGGCGGUUAGGGGAUGUAACGGUCGCCCGCCUCCGGCGUGACG\
) } def
/len { sequence length } bind def

/coor [
[46.12581635 192.57250977]
[38.41104126 179.70851135]
[36.41348648 164.84211731]
[40.45895386 150.39794922]
[49.88637161 138.73280334]
[35.10448074 141.28144836]
[20.32258606 143.83010864]
[5.54069376 146.37876892]
[-9.24119949 148.92741394]
[-24.02309227 151.47607422]
[-38.80498505 154.02473450]
[-53.58687592 156.57339478]
[-57.91231918 160.20925903]
[-62.72909164 161.53189087]
[-67.01375580 160.76956177]
[-70.00489044 158.54501343]
[-84.96992493 159.56864929]
[-99.93495178 160.59228516]
[-114.89998627 161.61592102]
[-129.86502075 162.63955688]
[-145.25460815 169.75270081]
[-156.35003662 156.93367004]
[-147.10348511 142.72319031]
[-130.88865662 147.67453003]
[-115.92362213 146.65089417]
[-100.95858765 145.62725830]
[-85.99356079 144.60362244]
[-71.02852631 143.57998657]
[-56.13553238 141.79148865]
[-41.35364151 139.24284363]
[-26.57174683 136.69418335]
[-11.78985500 134.14552307]
[2.99203801 131.59687805]
[17.77393150 129.04821777]
[32.55582428 126.49955750]
[47.33771515 123.95090485]
[61.19590759 118.21065521]
[73.45045471 109.56044769]
[85.70500946 100.91024017]
[91.73966217 88.29776764]
[105.64479065 86.83520508]
[117.89933777 78.18500519]
[130.15388489 69.53479767]
[142.40843201 60.88459396]
[154.66297913 52.23439026]
[157.93721008 46.09755707]
[163.10185242 43.14036560]
[168.06216431 43.44586945]
[180.87844849 35.65210724]
[193.69474792 27.85834885]
[206.51103210 20.06459045]
[219.32733154 12.27083111]
[227.09828186 -1.51041675]
[241.99288940 -1.51240349]
[254.80917358 -9.30616283]
[267.62545776 -17.09992218]
[280.44177246 -24.89368057]
[282.62692261 -40.37783432]
[294.28839111 -50.79629135]
[309.91998291 -51.22977066]
[322.14089966 -41.47360229]
[325.18084717 -26.13434410]
[317.60443115 -12.45472908]
[302.98898315 -6.89385271]
[288.23553467 -12.07738972]
[275.41921997 -4.28363085]
[262.60293579 3.51012826]
[249.78665161 11.30388737]
[242.93238831 24.52767372]
[227.12107849 25.08712196]
[214.30479431 32.88088226]
[201.48849487 40.67464066]
[188.67221069 48.46839905]
[175.85592651 56.26215744]
[163.31318665 64.48893738]
[151.05863953 73.13914490]
[138.80409241 81.78934479]
[126.54954529 90.43955231]
[114.29499054 99.08975983]
[108.26033783 111.70223236]
[94.35520935 113.16479492]
[82.10066223 121.81499481]
[69.84611511 130.46519470]
[84.76236725 132.04800415]
[97.83619690 139.40158081]
[106.93531799 151.32659912]
[110.57572174 165.87814331]
[108.16366577 180.68293762]
[100.09255981 193.32641602]
[87.67874146 201.74645996]
[72.94685364 204.56982422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[37 83]
[38 82]
[39 81]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
