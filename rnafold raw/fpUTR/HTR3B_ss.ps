%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCAGUAAGGAUAGCAUCAACUGGCAAACGGAGAAGGAGGAGAACAGAGUGGAGAGGAACCCUGUUAGGAGAAAUUGAGCGGCAUUCCAUCUGGUAGGCAAGUUUGCAUUUCUCCUUUUUGGGAUCUGCCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[-33.32812500 249.99938965]
[-53.53208923 257.81890869]
[-75.10717773 259.65155029]
[-96.31785583 255.35639954]
[-115.45973969 245.28527832]
[-125.38704681 256.53021240]
[-135.31434631 267.77514648]
[-145.24165344 279.02008057]
[-155.16896057 290.26501465]
[-153.86302185 301.17013550]
[-158.71815491 310.77517700]
[-167.88973999 315.97235107]
[-178.18432617 315.23272705]
[-188.60961914 326.01760864]
[-199.03491211 336.80245972]
[-205.69616699 352.39297485]
[-222.52140808 350.30795288]
[-225.17555237 333.56301880]
[-209.81977844 326.37716675]
[-199.39448547 315.59231567]
[-188.96919250 304.80743408]
[-185.76345825 285.78894043]
[-166.41389465 280.33770752]
[-156.48658752 269.09277344]
[-146.55928040 257.84783936]
[-136.63197327 246.60290527]
[-126.70467377 235.35797119]
[-132.88960266 227.80987549]
[-138.06095886 219.53222656]
[-142.13369751 210.66032410]
[-145.04069519 201.33924866]
[-146.73390198 191.72148132]
[-147.18516541 181.96441650]
[-146.38661194 172.22779846]
[-144.35086060 162.67111206]
[-141.11079407 153.45091248]
[-136.71902466 144.71833801]
[-131.24707031 136.61659241]
[-124.78411865 129.27856445]
[-117.43566132 122.82473755]
[-109.32171631 117.36112976]
[-100.57488251 112.97758484]
[-91.33818054 109.74629974]
[-81.76269531 107.72060394]
[-72.00511169 106.93412781]
[-62.22518158 107.40021515]
[-52.58305359 109.11169434]
[-43.23669434 112.04099274]
[-34.33927536 116.14058685]
[-26.03668213 121.34377289]
[-18.46510506 127.56574249]
[-11.74881458 134.70497131]
[-5.99812365 142.64488220]
[7.42042494 135.94096375]
[20.83897400 129.23704529]
[25.45562172 123.38439178]
[34.63738632 122.53710938]
[42.84775162 110.10975647]
[58.62991333 111.22058105]
[72.19654083 104.82162476]
[85.76316833 98.42266846]
[93.88944244 87.04482269]
[107.83787537 88.01071167]
[121.40450287 81.61175537]
[134.97113037 75.21279144]
[136.33952332 59.97879410]
[145.09162903 47.55714035]
[158.79508972 41.22613907]
[173.72766113 42.59516525]
[185.88813782 51.19682312]
[199.45475769 44.79786682]
[213.02137756 38.39891052]
[226.58801270 31.99995232]
[240.15463257 25.60099602]
[253.72126770 19.20203972]
[267.28790283 12.80308247]
[280.85452271 6.40412521]
[294.42114258 0.00516811]
[307.91458130 -6.54668951]
[321.33312988 -13.25061035]
[334.75167847 -19.95453072]
[348.17022705 -26.65845299]
[361.58877563 -33.36237335]
[371.32913208 -48.94344330]
[388.76507568 -47.30237198]
[402.02868652 -54.30783463]
[404.34478760 -69.53746796]
[415.05926514 -80.35661316]
[429.91421509 -82.76367188]
[443.17932129 -76.04241180]
[456.44293213 -83.04787445]
[464.70870972 -97.21151733]
[481.10418701 -96.86439514]
[488.76309204 -82.36359406]
[479.80661011 -68.62629700]
[463.44839478 -69.78425598]
[450.18478394 -62.77879333]
[448.25772095 -48.03347778]
[437.89492798 -37.12124252]
[422.91857910 -34.37124252]
[409.03414917 -41.04421997]
[395.77053833 -34.03875732]
[391.87255859 -22.53175545]
[380.80838013 -16.60572433]
[368.29269409 -19.94382477]
[354.87414551 -13.23990440]
[341.45559692 -6.53598309]
[328.03704834 0.16793799]
[314.61849976 6.87185907]
[310.00186157 12.72451591]
[300.82009888 13.57179451]
[287.25347900 19.97075081]
[273.68685913 26.36970901]
[260.12020874 32.76866531]
[246.55358887 39.16762161]
[232.98696899 45.56657791]
[219.42033386 51.96553802]
[205.85371399 58.36449432]
[192.28709412 64.76345062]
[191.19026184 79.61816406]
[182.74913025 92.01184082]
[169.14791870 98.55960846]
[153.99597168 97.41275787]
[141.37008667 88.77941895]
[127.80345917 95.17837524]
[114.23683167 101.57733154]
[106.11055756 112.95517731]
[92.16212463 111.98928833]
[78.59549713 118.38824463]
[65.02886963 124.78720856]
[55.84812927 137.67225647]
[41.03634262 136.10372925]
[27.54289436 142.65559387]
[14.12434578 149.35951233]
[0.70579743 156.06343079]
[5.47079182 177.25671387]
[4.09572268 198.92387390]
[-3.30233693 219.32293701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[13 21]
[14 20]
[15 19]
[53 135]
[54 134]
[55 133]
[57 132]
[59 130]
[60 129]
[61 128]
[63 126]
[64 125]
[65 124]
[70 119]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[78 111]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[85 102]
[86 101]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
