%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCGUGAUGGAGAAAAUUGGGCACCAGGGCUGCUCCCGAGAUUCUCAGAUCUGAUUUCCACGCUUGCUACCAAAAUAGUCUGGGCAGGCCACUUUUGGAAGUAGGCGUUAUCUAGUGAGCAGGCGGCCGCUUUCGAUUUCGCUUUCCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[80.19351196 635.09338379]
[79.77964783 619.92126465]
[84.87821960 605.62554932]
[94.79968262 594.13946533]
[108.20224762 587.01660156]
[106.39419556 572.12597656]
[104.58614349 557.23529053]
[95.37115479 545.53344727]
[101.38861084 530.90130615]
[99.58056641 516.01068115]
[97.77251434 501.12002563]
[88.55752563 489.41818237]
[94.57498169 474.78598022]
[92.76692963 459.89535522]
[90.95888519 445.00473022]
[89.15083313 430.11410522]
[80.25106049 426.84231567]
[73.13214111 420.49111938]
[68.81808472 411.91683960]
[67.95036316 402.29931641]
[70.69287109 392.97970581]
[76.70306396 385.27340698]
[85.17414093 380.28436279]
[84.57014465 365.29653931]
[83.96615601 350.30868530]
[80.53475189 343.71408081]
[83.50399017 335.01361084]
[81.17398071 332.29534912]
[80.07538605 328.29333496]
[80.80611420 323.61315918]
[83.66414642 319.10830688]
[76.44560242 306.07983398]
[84.73229980 292.60238647]
[85.33628845 277.61456299]
[85.94027710 262.62670898]
[86.54426575 247.63888550]
[87.14825439 232.65104675]
[87.75225067 217.66320801]
[80.53369904 204.63471985]
[88.82039642 191.15728760]
[81.60185242 178.12878418]
[89.88854980 164.65135193]
[90.49253845 149.66351318]
[91.09652710 134.67568970]
[91.70051575 119.68785095]
[79.87274170 115.81378174]
[70.55390167 104.75379944]
[67.95829773 88.45487976]
[55.12157822 80.69481659]
[42.28486252 72.93474579]
[25.88706970 73.14566803]
[17.73921776 58.91385651]
[26.22311783 44.87977219]
[42.61125946 45.48048401]
[50.04492950 60.09802628]
[62.88164902 67.85809326]
[75.71836853 75.61816406]
[82.80811310 73.17163849]
[73.77300262 61.19805908]
[82.36870575 48.90522003]
[96.71604919 53.28170013]
[96.98760986 68.27859497]
[104.07736206 65.83207703]
[109.39643097 51.80683517]
[114.71550751 37.78158951]
[120.03458405 23.75634575]
[125.35365295 9.73110294]
[130.67272949 -4.29414082]
[135.99180603 -18.31938362]
[141.31086731 -32.34462738]
[146.62994385 -46.36987305]
[144.28904724 -62.01694107]
[156.03671265 -71.17346191]
[161.35578918 -85.19870758]
[166.67485046 -99.22395325]
[171.99392700 -113.24919128]
[177.31300354 -127.27443695]
[182.63208008 -141.29968262]
[175.15882874 -157.08607483]
[181.26780701 -173.08860779]
[196.73886108 -179.61663818]
[201.77442932 -193.74615479]
[206.80999756 -207.87565613]
[211.84556580 -222.00517273]
[208.35891724 -238.02938843]
[220.67333984 -248.85929871]
[236.12080383 -243.35403442]
[238.81027222 -227.17692566]
[225.97506714 -216.96960449]
[220.93949890 -202.84008789]
[215.90393066 -188.71058655]
[210.86836243 -174.58106995]
[217.97830200 -163.79513550]
[217.55355835 -150.68856812]
[209.52508545 -140.07456970]
[196.65731812 -135.98060608]
[191.33824158 -121.95536041]
[186.01916504 -107.93012238]
[180.70010376 -93.90487671]
[175.38102722 -79.87963104]
[170.06195068 -65.85439301]
[172.78329468 -51.21049881]
[160.65519714 -41.05079651]
[155.33612061 -27.02555466]
[150.01704407 -13.00031090]
[144.69796753 1.02493274]
[139.37889099 15.05017662]
[134.05982971 29.07542038]
[128.74075317 43.10066223]
[123.42167664 57.12590790]
[118.10260773 71.15115356]
[127.50932312 103.34496307]
[106.68835449 120.29183960]
[106.08436584 135.27967834]
[105.48037720 150.26750183]
[104.87638855 165.25534058]
[112.05173492 179.35586548]
[103.80823517 191.76127625]
[110.98358154 205.86180115]
[102.74008179 218.26719666]
[102.13609314 233.25503540]
[101.53210449 248.24287415]
[100.92811584 263.23071289]
[100.32412720 278.21853638]
[99.72013855 293.20639038]
[106.89548492 307.30691528]
[98.65198517 319.71231079]
[98.50094604 334.71154785]
[98.95399475 349.70471191]
[99.55798340 364.69253540]
[100.16197205 379.68038940]
[116.52362823 392.80047607]
[117.98813629 413.43029785]
[104.04146576 428.30603027]
[105.84951782 443.19668579]
[107.65756226 458.08731079]
[109.46561432 472.97793579]
[118.80992889 485.74487305]
[112.66314697 499.31198120]
[114.47119904 514.20257568]
[116.27924347 529.09326172]
[125.62355804 541.86016846]
[119.47677612 555.42724609]
[121.28482819 570.31787109]
[123.09288025 585.20855713]
[137.81060791 588.91699219]
[150.19255066 597.69494629]
[158.56417847 610.35510254]
[161.79325867 625.18542480]
[159.44311523 640.18011475]
[151.83157349 653.31134033]
[139.98803711 662.80316162]
[125.51423645 667.37194824]
[110.36764526 666.39971924]
[96.59671021 660.01806641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 145]
[6 144]
[7 143]
[9 141]
[10 140]
[11 139]
[13 137]
[14 136]
[15 135]
[16 134]
[23 131]
[24 130]
[25 129]
[27 128]
[31 127]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[40 118]
[42 116]
[43 115]
[44 114]
[45 113]
[48 57]
[49 56]
[50 55]
[63 111]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
