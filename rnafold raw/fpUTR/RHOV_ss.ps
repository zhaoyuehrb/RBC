%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCCCUACACAAACCCGCUGGUAGCGCUGGGCCGACUCGCCCAGCCUGGACCCAUUCAGUCAGAGGCAGCCAGCGGGACCUGCUUCACCGAGCGCAGCGAAGCCGAGACCCGGGCUGGCCCCUCUGCUGCCCCCGGAGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[35.21986771 336.14920044]
[31.51370621 350.68414307]
[27.80754471 365.21908569]
[24.10138321 379.75402832]
[26.04676819 396.59597778]
[10.40152931 403.12765503]
[-0.20592241 389.90197754]
[9.56644726 376.04785156]
[13.27260780 361.51290894]
[16.97876930 346.97796631]
[20.68493080 332.44305420]
[12.74691010 326.63894653]
[6.92990732 318.67358398]
[3.79837775 309.28933716]
[3.66545439 299.36758423]
[6.56173182 289.84603882]
[12.23066998 281.63000488]
[20.15121460 275.50640869]
[29.58565331 272.06838989]
[39.64830399 271.65786743]
[44.84371948 257.58636475]
[50.03913498 243.51484680]
[55.23455048 229.44332886]
[60.42996597 215.37181091]
[65.62538147 201.30029297]
[70.08219910 186.97769165]
[73.78836060 172.44274902]
[77.49452209 157.90782166]
[81.20068359 143.37287903]
[84.90684509 128.83793640]
[88.61300659 114.30300903]
[80.36071777 101.77704620]
[65.54296112 99.44593811]
[50.72520065 97.11483765]
[35.90744019 94.78373718]
[21.08968353 92.45262909]
[6.27192497 90.12152863]
[-8.54583263 87.79042053]
[-21.17296600 97.29468536]
[-36.81033325 95.00379181]
[-46.18056870 82.27687836]
[-43.72447205 66.66460419]
[-30.89920616 57.42945099]
[-15.31377029 60.05047226]
[-6.21472931 72.97266388]
[8.60302925 75.30376434]
[23.42078781 77.63487244]
[38.23854446 79.96597290]
[53.05630493 82.29708099]
[67.87406158 84.62818146]
[82.69181824 86.95928955]
[90.01092529 73.86613464]
[80.26327515 62.46511078]
[70.51561737 51.06409073]
[60.76796722 39.66307068]
[51.02031708 28.26204872]
[35.38702011 23.30906105]
[32.12451172 7.23771811]
[44.58898163 -3.41916060]
[59.95804977 2.30130816]
[62.42133713 18.51439667]
[72.16899109 29.91541862]
[81.91664124 41.31644058]
[91.66429138 52.71746063]
[101.41194916 64.11848450]
[105.17537689 73.98246765]
[105.93350220 83.91417694]
[103.79260254 93.22620392]
[116.40373230 85.10466003]
[129.01486206 76.98311615]
[141.62599182 68.86157990]
[154.23712158 60.74003601]
[157.74447632 48.28401947]
[168.46920776 41.78795624]
[180.34664917 44.28474426]
[193.12400818 36.42731857]
[205.90136719 28.56989288]
[218.67871094 20.71246719]
[231.45606995 12.85504150]
[244.23342896 4.99761534]
[256.84457397 -3.12392664]
[269.28399658 -11.50607014]
[281.72344971 -19.88821220]
[288.84417725 -34.01639175]
[303.72253418 -34.71200180]
[316.07412720 -43.22309113]
[322.89941406 -57.49635315]
[337.76007080 -58.50133896]
[350.02243042 -67.14044952]
[362.28482056 -75.77957153]
[374.54718018 -84.41868591]
[386.80953979 -93.05780029]
[393.63482666 -107.33106232]
[408.49548340 -108.33604431]
[408.58682251 -123.85285187]
[417.80834961 -136.33256531]
[432.61419678 -140.97647095]
[447.31124878 -135.99888611]
[456.24816895 -123.31381989]
[455.98855591 -107.79891205]
[446.63217163 -95.41998291]
[431.77679443 -90.93696594]
[417.13461304 -96.07367706]
[411.18640137 -82.41834259]
[395.44866943 -80.79543304]
[383.18627930 -72.15631866]
[370.92391968 -63.51720047]
[358.66156006 -54.87808609]
[346.39920044 -46.23896790]
[340.45098877 -32.58363342]
[324.71322632 -30.96072388]
[321.03277588 -24.49544525]
[312.10467529 -22.27256203]
[305.87368774 -8.74392796]
[290.10559082 -7.44877291]
[277.66613770 0.93337047]
[265.22671509 9.31551361]
[263.44351196 13.80948544]
[258.78256226 17.20163345]
[252.09085083 17.77497292]
[239.31350708 25.63239861]
[226.53614807 33.48982620]
[213.75878906 41.34725189]
[200.98143005 49.20467758]
[188.20407104 57.06210327]
[180.73767090 72.91305542]
[162.35865784 73.35116577]
[149.74752808 81.47270203]
[137.13639832 89.59424591]
[124.52527618 97.71578979]
[111.91414642 105.83733368]
[103.14794159 118.00917053]
[99.44178009 132.54409790]
[95.73561859 147.07904053]
[92.02945709 161.61398315]
[88.32329559 176.14891052]
[84.61713409 190.68385315]
[98.77852631 185.73864746]
[111.58659363 193.54589844]
[113.67968750 208.39913940]
[103.52792358 219.44186401]
[88.55141449 218.60272217]
[79.69689941 206.49569702]
[74.50148773 220.56721497]
[69.30606842 234.63873291]
[64.11065674 248.71026611]
[58.91524124 262.78176880]
[53.71982574 276.85330200]
[66.30157471 293.22525024]
[66.56213379 313.73446655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[20 148]
[21 147]
[22 146]
[23 145]
[24 144]
[25 143]
[26 137]
[27 136]
[28 135]
[29 134]
[30 133]
[31 132]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[68 131]
[69 130]
[70 129]
[71 128]
[72 127]
[75 125]
[76 124]
[77 123]
[78 122]
[79 121]
[80 120]
[81 117]
[82 116]
[83 115]
[85 113]
[86 111]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[94 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
