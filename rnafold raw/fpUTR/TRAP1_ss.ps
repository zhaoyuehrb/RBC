%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAGCCCCGCCCCGCGCAGCCCCGUCCCGCCCCUUCCCAUCGUGUACGGUCCCGCGUGGCUGCGCGCGGCGCUCUGGGAGUACGAC\
) } def
/len { sequence length } bind def

/coor [
[93.66641998 283.72940063]
[81.72528839 274.39212036]
[73.70048523 261.53216553]
[70.56102753 246.70246887]
[72.68603516 231.69380188]
[79.81888580 218.31851196]
[91.09826660 208.19175720]
[105.16213989 202.53636169]
[104.63864136 187.54550171]
[104.11515045 172.55464172]
[102.54722595 157.63681030]
[99.94250488 142.86470032]
[97.33777618 128.09257507]
[94.73305511 113.32046509]
[85.89366913 102.48732758]
[90.49482727 89.28426361]
[87.89010620 74.51214600]
[85.28537750 59.74002838]
[82.68065643 44.96791077]
[80.07593536 30.19579506]
[77.47121429 15.42367935]
[74.86649323 0.65156275]
[72.26176453 -14.12055397]
[69.65704346 -28.89266968]
[59.64091873 -41.13961792]
[65.05060577 -55.01710129]
[62.44588089 -69.78921509]
[59.84115601 -84.56133270]
[46.05359650 -91.43224335]
[39.03757095 -104.94625854]
[41.29767227 -119.82429504]
[51.75995636 -130.39210510]
[49.15523148 -145.16423035]
[46.55051041 -159.93634033]
[31.61815071 -162.54411316]
[18.47977638 -170.10446167]
[8.72191429 -181.70445251]
[3.52286935 -195.94334412]
[3.51045394 -211.10168457]
[8.68616676 -225.34907532]
[18.42501450 -236.96502686]
[31.55098534 -244.54690552]
[46.47905350 -247.17912292]
[61.40658188 -244.54383850]
[74.53099823 -236.95928955]
[84.26747131 -225.34132385]
[89.44026184 -211.09289551]
[89.42474365 -195.93453979]
[84.22278595 -181.69673157]
[74.46254730 -170.09872437]
[61.32262802 -162.54106140]
[63.92734909 -147.76895142]
[66.53207397 -132.99682617]
[79.97780609 -126.64464569]
[87.19019318 -113.43686676]
[85.21935272 -98.33821869]
[74.61327362 -87.16606140]
[77.21799469 -72.39394379]
[79.82271576 -57.62182617]
[89.65254211 -46.43147659]
[84.42916107 -31.49739265]
[87.03388214 -16.72527695]
[89.63860321 -1.95315993]
[92.24333191 12.81895638]
[94.84805298 27.59107208]
[97.45277405 42.36318970]
[100.05749512 57.13530350]
[102.66222382 71.90742493]
[105.26694489 86.67953491]
[114.10633087 97.51267242]
[109.50517273 110.71573639]
[112.10989380 125.48785400]
[114.71462250 140.25997925]
[117.31934357 155.03208923]
[120.60725403 158.60942078]
[122.26461029 162.66659546]
[122.35566711 166.57975769]
[121.15800476 169.82231140]
[119.10601807 172.03114319]
[119.62950897 187.02200317]
[120.15299988 202.01287842]
[134.57710266 206.67344666]
[146.53541565 215.98872375]
[154.58390808 228.83386230]
[157.75068665 243.65774536]
[155.65335083 258.67028809]
[148.54515076 272.05871582]
[137.28445435 282.20623779]
[123.23103333 287.88754272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 81]
[9 80]
[10 79]
[11 74]
[12 73]
[13 72]
[14 71]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[26 59]
[27 58]
[28 57]
[32 53]
[33 52]
[34 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
