%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGUAGGGGAGGAUAUUUUGAUUGAACACAGGCUUGACAGAAUCUUCUUUUCUUCUUAGAAAUCCUAGAAAACAGAAAGCAACAGGAAGAUGUCUUAUUGGGAACUACCCCCAUCAACUUCACC\
) } def
/len { sequence length } bind def

/coor [
[71.32985687 266.84692383]
[59.91225052 256.98281860]
[51.43751526 244.49916077]
[46.48347092 230.24714661]
[45.38789368 215.19850159]
[48.22547913 200.37922668]
[54.80275726 186.79977417]
[64.67127991 175.38597107]
[77.15818787 166.91606140]
[91.41211700 161.96751404]
[90.31718445 147.00753784]
[89.22225189 132.04754639]
[88.12732697 117.08757019]
[77.32877350 106.67645264]
[62.33877945 106.12862396]
[47.34878540 105.58079529]
[32.35879517 105.03296661]
[18.28524780 112.26109314]
[5.84904814 104.06412506]
[-9.14094448 103.51629639]
[-24.13093758 102.96846771]
[-39.12092972 102.42063904]
[-54.11092377 101.87281036]
[-69.10091400 101.32497406]
[-77.89533997 104.16108704]
[-84.44798279 100.57687378]
[-99.42019653 99.66418457]
[-114.39240265 98.75149536]
[-129.36460876 97.83880615]
[-139.12794495 109.89935303]
[-154.12435913 113.88526154]
[-168.58740234 108.26387024]
[-176.95574951 95.19672394]
[-176.01159668 79.70839691]
[-166.11799622 67.75447845]
[-151.07922363 63.93148422]
[-136.67802429 69.70944214]
[-128.45191956 82.86660004]
[-113.47971344 83.77928925]
[-98.50750732 84.69197845]
[-83.53529358 85.60466766]
[-68.55308533 86.33498383]
[-53.56309128 86.88281250]
[-38.57310104 87.43064117]
[-23.58310699 87.97847748]
[-8.59311485 88.52630615]
[6.39687824 89.07413483]
[19.39824104 81.80682373]
[32.90662384 90.04296875]
[47.89661789 90.59080505]
[62.88661194 91.13863373]
[77.87660217 91.68646240]
[87.33059692 80.04077911]
[83.71358490 65.48339844]
[80.09657288 50.92602158]
[76.47956085 36.36864471]
[72.86254883 21.81126785]
[61.09699249 10.38744640]
[65.36934662 -5.44539881]
[81.28458405 -9.39979362]
[92.47047424 2.59220505]
[87.41992188 18.19425583]
[91.03693390 32.75163269]
[94.65394592 47.30900955]
[98.27095795 61.86638641]
[101.88796997 76.42376709]
[115.54621887 82.62476349]
[128.88635254 75.76612854]
[142.22648621 68.90749359]
[155.56660461 62.04886246]
[168.90673828 55.19022751]
[182.24687195 48.33159256]
[195.50250244 41.31103134]
[208.67166138 34.12958145]
[217.08311462 20.72965240]
[231.96128845 21.42922020]
[245.13044739 14.24777412]
[258.29959106 7.06632710]
[257.61343384 -8.14191246]
[263.57409668 -22.08312035]
[274.95013428 -32.01320267]
[289.44989014 -36.00293350]
[304.18322754 -33.31261444]
[316.23751831 -24.52854919]
[324.31396484 -38.80099869]
[340.71261597 -38.67221832]
[348.56393433 -24.27468109]
[339.79113770 -10.41934395]
[323.41897583 -11.35938740]
[324.27505493 3.53129983]
[318.55752563 17.37395859]
[307.35089111 27.40252304]
[292.84219360 31.58796883]
[277.89431763 29.04867554]
[265.48104858 20.23548889]
[252.31188965 27.41693497]
[239.14273071 34.59838104]
[231.67323303 47.48464966]
[215.85311890 47.29874420]
[202.68395996 54.48019028]
[198.27221680 60.50682068]
[189.10551453 61.67172241]
[175.76538086 68.53035736]
[162.42524719 75.38899231]
[149.08511353 82.24762726]
[135.74497986 89.10626221]
[122.40485382 95.96489716]
[121.61371613 101.76597595]
[119.41803741 106.89596558]
[116.10548401 111.04091644]
[112.02619934 113.98799133]
[107.56072998 115.63536072]
[103.08731079 115.99263763]
[104.18223572 130.95262146]
[105.27716827 145.91261292]
[106.37210083 160.87258911]
[121.19463348 163.69300842]
[134.78170776 170.25454712]
[146.20692444 180.10984802]
[154.69129944 192.58694458]
[159.65634155 206.83512878]
[160.76354980 221.88293457]
[157.93740845 236.70437622]
[151.37062073 250.28890991]
[141.51091003 261.71032715]
[129.03054810 270.18988037]
[114.78044891 275.14944458]
[99.73220825 276.25082397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 116]
[11 115]
[12 114]
[13 113]
[14 52]
[15 51]
[16 50]
[17 49]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[26 41]
[27 40]
[28 39]
[29 38]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[72 102]
[73 100]
[74 99]
[76 97]
[77 96]
[78 95]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
