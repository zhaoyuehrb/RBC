%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGGCCGGCCCCUAGCGAUCUGAACCCAAACUAAAUUUCCCAGCAAGCAGCGCGCCGGCCUGGGAAAAGGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[156.40492249 271.98104858]
[166.74900818 260.84243774]
[160.46910095 247.22030640]
[154.18920898 233.59815979]
[141.83424377 225.27926636]
[143.08323669 209.50743103]
[136.80334473 195.88528442]
[130.52345276 182.26313782]
[124.24355316 168.64099121]
[117.96365356 155.01884460]
[111.68376160 141.39669800]
[105.40386200 127.77455139]
[98.85772705 114.27832794]
[87.23727417 106.50293732]
[87.77717590 92.53153229]
[80.96732330 79.16643524]
[74.10225677 72.73329926]
[74.16413116 65.14025116]
[67.88423920 51.51810074]
[52.80168533 48.38396072]
[42.57617188 37.10157394]
[40.97381592 22.13840294]
[48.40073776 9.25512600]
[42.12084198 -4.36702204]
[35.84094620 -17.98917007]
[20.82000160 -16.19294930]
[5.97956514 -19.12835884]
[-7.22644854 -26.50781631]
[-17.50424767 -37.60836029]
[-23.84692001 -51.34246445]
[-25.63307381 -66.36460876]
[-22.68772125 -81.20307922]
[-15.29941654 -94.40414429]
[-4.19199085 -104.67449951]
[9.54636288 -111.00797272]
[24.56970215 -112.78405762]
[39.40618896 -109.82876587]
[52.60230255 -102.43161011]
[62.86521912 -91.31730652]
[69.18947601 -77.57471466]
[70.95549774 -62.55018997]
[67.99026489 -47.71568298]
[60.58427429 -34.52452850]
[49.46309280 -24.26906586]
[55.74298859 -10.64691830]
[62.02288437 2.97522974]
[76.64280701 5.69477320]
[86.98024750 16.63101387]
[88.91849518 31.73388100]
[81.50638580 45.23820496]
[87.78627777 58.86035156]
[94.33242035 72.35657501]
[101.14227295 85.72167206]
[112.76272583 93.49706268]
[112.22282410 107.46846771]
[119.08788300 113.90160370]
[119.02600861 121.49465179]
[125.30590820 135.11680603]
[131.58580017 148.73895264]
[137.86569214 162.36109924]
[144.14559937 175.98324585]
[150.42549133 189.60539246]
[156.70538330 203.22753906]
[169.50953674 212.52078247]
[167.81135559 227.31825256]
[174.09126282 240.94039917]
[180.37115479 254.56254578]
[195.55895996 253.93080139]
[209.83068848 259.16394043]
[221.01004028 269.46398926]
[227.39221191 283.26022339]
[228.00398254 298.44885254]
[222.75205994 312.71368408]
[212.43731689 323.87948608]
[198.63269043 330.24349976]
[183.44328308 330.83529663]
[169.18536377 325.56460571]
[158.03315735 315.23519897]
[151.68730164 301.42221069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 55]
[15 53]
[16 52]
[18 51]
[19 50]
[23 46]
[24 45]
[25 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
