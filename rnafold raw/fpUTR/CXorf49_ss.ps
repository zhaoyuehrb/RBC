%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGGUGUCCCGAAGGCCUCACUGUUUCUGUCGCGUGGCCCGCUCAGCUGGGCUUGGCUGGGCUCAGCUCUCCGCUCCCGCCGUUACCAGGACGACCGUCUCCCCGCAGCCCAGGCUGCCCGGACUGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[84.92200470 132.13586426]
[75.82524109 144.06266785]
[66.72847748 155.98948669]
[57.63171005 167.91629028]
[48.53494263 179.84310913]
[39.43817520 191.76991272]
[30.34140968 203.69673157]
[28.12436867 219.36183167]
[14.25381279 224.78924561]
[5.15704632 236.71606445]
[-3.93972015 248.64286804]
[-3.23305345 264.67034912]
[-15.41746807 275.10681152]
[-31.14612389 271.94628906]
[-38.35334396 257.61325073]
[-31.51036263 243.10281372]
[-15.86653233 239.54611206]
[-6.76976585 227.61929321]
[2.32700038 215.69248962]
[3.89337993 200.88047791]
[18.41459846 194.59996033]
[27.51136398 182.67315674]
[36.60813141 170.74633789]
[45.70489502 158.81953430]
[54.80166245 146.89271545]
[63.89842987 134.96589661]
[72.99519348 123.03909302]
[67.38415527 115.42414093]
[63.91299057 106.46067810]
[62.89973450 96.74808502]
[64.49509430 86.95871735]
[68.66637421 77.79138184]
[75.19429779 69.92146301]
[83.68333435 63.95132065]
[93.58514404 60.36458206]
[87.80460358 46.52314377]
[82.02406311 32.68170547]
[75.77275085 25.89331245]
[76.27420807 18.45030785]
[70.81730652 4.47811222]
[56.61909866 -1.92880332]
[51.28406525 -16.17633247]
[57.47957993 -29.67267227]
[52.02268219 -43.64487076]
[37.15372467 -47.67230988]
[27.61877823 -59.54404831]
[26.91102982 -74.57611847]
[35.09255219 -86.99387360]
[29.63565254 -100.96607208]
[24.17875481 -114.93827057]
[18.72185707 -128.91046143]
[13.26495934 -142.88265991]
[7.80806112 -156.85485840]
[2.35116291 -170.82705688]
[-3.10573506 -184.79925537]
[-8.56263351 -198.77143860]
[-14.01953125 -212.74363708]
[-27.15497971 -222.56158447]
[-24.95168877 -238.81204224]
[-9.67621517 -244.77793884]
[2.95734334 -234.32206726]
[-0.04733522 -218.20053101]
[5.40956306 -204.22834778]
[10.86646080 -190.25614929]
[16.32335854 -176.28395081]
[21.78025627 -162.31175232]
[27.23715591 -148.33955383]
[32.69405365 -134.36735535]
[38.15095139 -120.39516449]
[43.60784912 -106.42296600]
[49.06474686 -92.45077515]
[63.49660492 -88.86476135]
[73.16390228 -77.33188629]
[74.19863129 -62.14035034]
[65.99488068 -49.10176849]
[71.45177460 -35.12957001]
[85.15429688 -29.40448761]
[90.88740540 -15.31243038]
[84.78950500 -0.97878569]
[90.24640656 12.99341011]
[95.86550140 26.90116882]
[101.64604187 40.74260330]
[107.42658234 54.58404160]
[121.63752747 59.38496780]
[134.62791443 51.88496780]
[147.61828613 44.38496780]
[160.60867310 36.88496780]
[166.13308716 21.82308388]
[181.39830017 16.88821411]
[194.69413757 25.86597061]
[195.82118225 41.86938858]
[183.91485596 52.62201309]
[168.10867310 49.87535095]
[155.11828613 57.37535095]
[142.12791443 64.87535095]
[129.13752747 72.37535095]
[136.18334961 86.55692291]
[137.00715637 101.75202179]
[131.95825195 115.45088196]
[143.77841187 124.68580627]
[155.59857178 133.92073059]
[167.41873169 143.15565491]
[179.45057678 152.11302185]
[191.68759155 160.78800964]
[203.92462158 169.46299744]
[219.30770874 167.01385498]
[231.59420776 175.98583984]
[233.83428955 190.66636658]
[246.07130432 199.34133911]
[258.30831909 208.01632690]
[270.54534912 216.69131470]
[282.78234863 225.36630249]
[299.15191650 226.35102844]
[306.24087524 241.13882446]
[296.75671387 254.51725769]
[280.45593262 252.72377014]
[274.10739136 237.60331726]
[261.87036133 228.92832947]
[249.63334656 220.25334167]
[237.39631653 211.57836914]
[225.15930176 202.90338135]
[210.56503296 205.64979553]
[198.03137207 197.02645874]
[195.24963379 181.70001221]
[183.01260376 173.02502441]
[170.77558899 164.35005188]
[165.91661072 164.27642822]
[161.07347107 161.08720398]
[158.18380737 154.97581482]
[146.36364746 145.74089050]
[134.54348755 136.50596619]
[122.72332001 127.27104187]
[114.19307709 132.53637695]
[104.53093719 135.20695496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[9 19]
[10 18]
[11 17]
[35 83]
[36 82]
[37 81]
[39 80]
[40 79]
[43 76]
[44 75]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[84 96]
[85 95]
[86 94]
[87 93]
[99 132]
[100 131]
[101 130]
[102 129]
[103 126]
[104 125]
[105 124]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
