%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUCCUGAUUUCUGAAGUCUGAGUGAUUUCCUCCGUGUGCCGAGAGGAAACAGCCUUCUGCACUCACAGCCGAAGGGAAAGCAGCAGGUUGGGGCUUCUUGUGGCCAACUUCAGAGCCUGUCACCAGGAAAGGUAAGC\
) } def
/len { sequence length } bind def

/coor [
[55.25454712 376.47735596]
[57.87388611 357.27346802]
[58.20806885 342.27719116]
[58.54225159 327.28091431]
[58.87643814 312.28463745]
[59.04354095 297.28558350]
[59.04354095 282.28558350]
[59.04354095 267.28558350]
[63.27396393 252.62873840]
[71.58053589 242.24670410]
[81.76281738 237.00518799]
[91.55026245 236.84745789]
[87.91062927 222.29573059]
[84.27098846 207.74398804]
[80.63135529 193.19224548]
[76.99171448 178.64051819]
[73.35208130 164.08877563]
[69.71244049 149.53704834]
[66.07280731 134.98530579]
[62.43317032 120.43357086]
[62.97372437 135.42382812]
[54.99804688 148.12770081]
[41.26230621 154.15509033]
[26.51319885 151.42309570]
[15.84760857 140.87580872]
[12.95126915 126.15809631]
[18.82507706 112.35597992]
[31.43920517 104.23909760]
[46.43489456 104.61253357]
[31.84351349 101.13523102]
[17.25213242 97.65792847]
[2.66075277 94.18062592]
[-11.93062687 90.70332336]
[-26.52200699 87.22602081]
[-41.11338806 83.74871826]
[-55.74259949 80.43418121]
[-70.40782928 77.28282166]
[-84.60830688 84.74781036]
[-99.24001312 78.16809845]
[-103.07875824 62.59107971]
[-93.17978668 49.96610641]
[-77.13674164 49.97798538]
[-67.25646973 62.61759567]
[-52.59123993 65.76895142]
[-45.33225632 64.08532715]
[-37.63608551 69.15734100]
[-23.04470444 72.63464355]
[-8.45332527 76.11194611]
[6.13805532 79.58924866]
[20.72943497 83.06655121]
[35.32081604 86.54385376]
[49.91219330 90.02115631]
[62.18347931 81.39470673]
[63.85108566 66.48769379]
[65.51869202 51.58067703]
[67.18629456 36.67366409]
[68.85390472 21.76664734]
[70.52150726 6.85963345]
[64.36638641 -7.71517611]
[73.47066498 -19.50336647]
[75.13826752 -34.41038132]
[76.80587006 -49.31739807]
[78.47348022 -64.22441101]
[69.52320862 -82.22741699]
[81.47270203 -97.36910248]
[82.47459412 -112.33560181]
[83.47648621 -127.30210876]
[71.02326965 -136.40820312]
[65.49140167 -150.80966187]
[68.64608765 -165.91102600]
[79.48068237 -176.89352417]
[94.53789520 -180.25267029]
[109.01303101 -174.91656494]
[118.28712463 -162.58795166]
[119.40084839 -147.20085144]
[111.99881744 -133.66520691]
[98.44298553 -126.30021667]
[97.44110107 -111.33371735]
[96.43920898 -96.36721039]
[103.89224243 -89.23351288]
[106.19393158 -78.95052338]
[102.33531952 -68.90830231]
[93.38049316 -62.55680466]
[91.71289062 -47.64979172]
[90.04528046 -32.74277496]
[88.37767792 -17.83576202]
[94.65207672 -4.32720184]
[85.42852020 8.52723885]
[83.76091766 23.43425369]
[82.09330750 38.34126663]
[80.42570496 53.24828339]
[78.75810242 68.15529633]
[77.09049225 83.06230927]
[101.47235870 74.31551361]
[119.90306854 88.54835510]
[134.63487244 85.72451019]
[149.36666870 82.90065765]
[164.09846497 80.07680511]
[172.76161194 66.85842896]
[188.25099182 63.71922684]
[201.37702942 72.52163696]
[204.35229492 88.04334259]
[195.41160583 101.07559204]
[179.85931396 103.88658142]
[166.92231750 94.80860138]
[152.19052124 97.63245392]
[137.45872498 100.45630646]
[122.72692108 103.28015137]
[106.20318604 124.96759796]
[76.98490906 116.79393005]
[80.62454224 131.34567261]
[84.26418304 145.89739990]
[87.90381622 160.44914246]
[91.54345703 175.00088501]
[95.18309021 189.55261230]
[98.82273102 204.10435486]
[102.46236420 218.65608215]
[106.10200500 233.20782471]
[113.16374207 246.44155884]
[123.22550964 257.56634521]
[133.28727722 268.69113159]
[143.34906006 279.81591797]
[159.11437988 284.33105469]
[162.82376099 300.30517578]
[150.66130066 311.30548096]
[135.13868713 306.01577759]
[132.22427368 289.87768555]
[122.16249847 278.75289917]
[112.10073090 267.62811279]
[102.03895569 256.50332642]
[95.04010010 259.19888306]
[81.04239655 264.58999634]
[74.04354095 267.28558350]
[74.04354095 282.28558350]
[74.04354095 297.28558350]
[77.19326019 305.94787598]
[73.87271118 312.61883545]
[73.53852844 327.61511230]
[73.20434570 342.61138916]
[72.87016296 357.60766602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[5 137]
[6 135]
[7 134]
[8 133]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 44]
[37 43]
[53 93]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[60 86]
[61 85]
[62 84]
[63 83]
[65 79]
[66 78]
[67 77]
[95 108]
[96 107]
[97 106]
[98 105]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
