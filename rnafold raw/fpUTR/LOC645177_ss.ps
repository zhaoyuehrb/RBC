%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCAGUUCUCAGAUGGUUCUUGGAGCACUGGCGAAGUCAAGCGAAAAUAAGGUGCCACUUCAUCUGUAUACUAGGAGGAAAGUCAACA\
) } def
/len { sequence length } bind def

/coor [
[187.24533081 367.88095093]
[182.22213745 353.74703979]
[177.19894409 339.61312866]
[172.17575073 325.47921753]
[167.15255737 311.34527588]
[155.59989929 301.94393921]
[158.26905823 286.34951782]
[153.24586487 272.21560669]
[148.22267151 258.08169556]
[133.90832520 254.05209351]
[124.60147095 242.22642517]
[124.03596497 227.01020813]
[132.63810730 214.23095703]
[127.61491394 200.09703064]
[122.59172058 185.96311951]
[117.56852722 171.82920837]
[112.54533386 157.69529724]
[107.52214050 143.56138611]
[102.49894714 129.42745972]
[91.12125397 128.16714478]
[81.07748413 122.67507172]
[73.87658691 113.77635193]
[70.60040283 102.80789948]
[71.74114227 91.41759491]
[77.12742615 81.31669617]
[85.95002747 74.02272797]
[80.77655792 66.23382568]
[82.53513336 58.89108276]
[79.48329163 44.20482254]
[76.43145752 29.51856232]
[73.37961578 14.83230019]
[70.32777405 0.14603899]
[56.15959167 -2.13496733]
[43.66423416 -9.13102055]
[34.35343552 -19.97204399]
[29.34549141 -33.32424164]
[29.23098755 -47.55418777]
[34.00321579 -60.92863464]
[43.06150818 -71.82563782]
[55.28675842 -78.93123627]
[52.73810196 -93.71313477]
[41.83457565 -105.96242523]
[47.24716568 -121.44260406]
[63.40785980 -124.22898865]
[73.69192505 -111.45518494]
[67.51999664 -96.26178741]
[70.06864929 -81.47989655]
[85.48833466 -78.27278137]
[98.55243683 -69.40779877]
[107.27128601 -56.19986725]
[110.30357361 -40.62792587]
[107.16266632 -25.03850937]
[98.29438782 -11.79211617]
[85.01403809 -2.90580130]
[88.06587219 11.78046036]
[91.11771393 26.46672058]
[94.16955566 41.15298462]
[97.22139740 55.83924484]
[100.52352905 70.47126007]
[117.85283661 76.47348785]
[128.29801941 91.54762268]
[127.83138275 109.88102722]
[116.63285828 124.40427399]
[121.65605164 138.53819275]
[126.67924500 152.67210388]
[131.70243835 166.80601501]
[136.72563171 180.93992615]
[141.74882507 195.07383728]
[146.77201843 209.20774841]
[161.50964355 213.69204712]
[170.67375183 225.85234070]
[170.91735840 240.89909363]
[162.35658264 253.05848694]
[167.37977600 267.19241333]
[172.40296936 281.32632446]
[184.31492615 291.73861694]
[181.28646851 306.32208252]
[186.30966187 320.45602417]
[191.33285522 334.58993530]
[196.35604858 348.72384644]
[201.37924194 362.85775757]
[216.53993225 364.95831299]
[228.98110962 373.87322998]
[235.84388733 387.55389404]
[235.55126953 402.85659790]
[228.17048645 416.26492310]
[215.39758301 424.69766235]
[200.16767883 426.21710205]
[185.98049927 420.47406006]
[176.09616089 408.78823853]
[172.78599548 393.84497070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[7 75]
[8 74]
[9 73]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[26 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
