%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCGACAGGAUGCCCUGCGCGGGGCGGCGGAGCGGGUGCGUGCGGCGGCGGUUGCGAGAGAGAUGAGCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[57.07386780 140.01445007]
[49.93403625 154.13299561]
[35.05475616 154.80850220]
[22.60400391 163.17382812]
[10.15325069 171.53916931]
[4.57929039 179.13984680]
[-2.98036218 179.97962952]
[-15.76196384 187.83013916]
[-28.54356575 195.68066406]
[-41.32516861 203.53118896]
[-48.65542984 218.20085144]
[-65.03891754 218.91726685]
[-73.62171173 204.94345093]
[-65.57455444 190.65444946]
[-49.17568588 190.74957275]
[-36.39408493 182.89906311]
[-23.61248398 175.04853821]
[-10.83088207 167.19802856]
[1.78792107 159.08840942]
[14.23867416 150.72308350]
[26.68942833 142.35774231]
[32.93869781 128.83753967]
[48.70853806 127.56369019]
[55.39984131 111.47295380]
[73.62422180 110.02988434]
[85.72340393 101.16366577]
[91.53338623 88.44612885]
[105.41038513 86.73715210]
[117.50956726 77.87093353]
[129.60874939 69.00471497]
[141.70793152 60.13850021]
[144.24847412 44.77024078]
[156.64506531 35.95099258]
[171.28070068 38.46772766]
[183.37988281 29.60151100]
[181.38671875 13.32397270]
[187.76156616 -1.68448079]
[200.71142578 -11.44011402]
[216.71174622 -13.40404034]
[231.46546936 -7.14240503]
[237.43074036 -21.79593658]
[252.20545959 -23.68199539]
[263.93292236 -33.03434372]
[275.66040039 -42.38668823]
[287.38787842 -51.73903656]
[299.11535645 -61.09138489]
[310.84280396 -70.44373322]
[316.32714844 -85.89863586]
[332.50061035 -88.61002350]
[342.72531128 -75.78865814]
[336.48297119 -60.62405396]
[320.19515991 -58.71625900]
[308.46768188 -49.36391068]
[296.74020386 -40.01156616]
[285.01275635 -30.65921783]
[273.28527832 -21.30687141]
[261.55780029 -11.95452404]
[256.43133545 2.03006554]
[240.81781006 4.58506727]
[243.74378967 18.07878113]
[240.49554443 31.56721306]
[231.66299438 42.35289764]
[218.95870972 48.25297165]
[204.88607788 48.04084396]
[192.24609375 41.70069122]
[180.14691162 50.56690979]
[178.13781738 65.28081512]
[165.99382019 74.44477844]
[150.57414246 72.23767853]
[138.47496033 81.10389709]
[126.37577820 89.97011566]
[114.27659607 98.83633423]
[108.46661377 111.55387115]
[94.58961487 113.26284790]
[82.49043274 122.12906647]
[79.67989349 134.90611267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[3 21]
[4 20]
[5 19]
[7 18]
[8 17]
[9 16]
[10 15]
[25 75]
[26 74]
[28 72]
[29 71]
[30 70]
[31 69]
[34 66]
[35 65]
[40 59]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
