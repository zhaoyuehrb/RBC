%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCUUUUCCGCACGCGCCUCGCCGGCGCGCGGCUCUCUCAGCGUCCCAAGAGCCACUUUCUCGCCAGUACGAUGCUGCAGCGGUUUUCCGGUUUUCCGCUUCCCUUCAUCGUAGCUCCCGUACUCAUUUUUAGCCACUGCUGCCGGUUUUUAUAUCCUUCUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[171.36366272 284.14743042]
[165.14396667 270.49771118]
[158.92427063 256.84796143]
[152.70457458 243.19822693]
[146.48487854 229.54847717]
[133.80769348 229.69238281]
[121.97933197 225.00074768]
[112.77996826 216.14147949]
[107.60853577 204.41247559]
[107.27008820 191.55165100]
[111.85067749 179.47933960]
[120.69920349 170.01164246]
[114.99117279 156.14015198]
[86.61901093 156.54556274]
[61.43766403 143.46720886]
[50.11803818 153.30926514]
[38.79840851 163.15132141]
[27.47878265 172.99337769]
[16.15915489 182.83543396]
[4.83952761 192.67747498]
[2.29219246 208.51701355]
[-11.75013351 216.27540588]
[-26.51537895 210.00108337]
[-30.67691231 194.50717163]
[-21.04236031 181.67927551]
[-5.00252676 181.35784912]
[6.31710052 171.51579285]
[17.63672829 161.67375183]
[28.95635605 151.83169556]
[40.27598190 141.98963928]
[51.59561157 132.14758301]
[44.77019882 118.05882263]
[41.95363617 102.65927124]
[27.00608826 101.40596008]
[12.05854034 100.15264130]
[-2.88900805 98.89933014]
[-17.83655548 97.64601135]
[-32.78410339 96.39270020]
[-40.48794174 109.56895447]
[-53.15061569 118.09065247]
[-68.25794220 120.26581573]
[-82.81035614 115.66255951]
[-93.91846466 105.19486237]
[-99.37673950 90.94108582]
[-98.10144043 75.73133850]
[-90.34577942 62.58552933]
[-77.64964294 54.11375427]
[-62.53386307 51.99810028]
[-47.99969101 56.65863037]
[-36.93289185 67.16999054]
[-31.53078842 81.44514465]
[-16.58324051 82.69846344]
[-1.63569272 83.95178223]
[13.31185532 85.20509338]
[28.25940323 86.45841217]
[43.20695114 87.71172333]
[45.49917984 79.84777069]
[48.87443542 72.38426971]
[53.26564407 65.46955109]
[58.58555222 59.24100876]
[64.72843933 53.82242203]
[71.57222748 49.32146454]
[78.98093414 45.82758331]
[86.80732727 43.41020203]
[94.89588165 42.11735916]
[103.08586121 41.97475052]
[111.21451569 42.98520660]
[119.12032318 45.12865067]
[125.84308624 31.71952820]
[132.56584167 18.31040573]
[139.28860474 4.90128517]
[146.01135254 -8.50783634]
[152.73411560 -21.91695786]
[146.91287231 -38.39288712]
[154.63839722 -53.68952179]
[170.70837402 -58.58662033]
[177.18072510 -72.11839294]
[183.65306091 -85.65016174]
[190.12541199 -99.18193054]
[196.59774780 -112.71369934]
[201.78623962 -126.78777313]
[205.64607239 -141.28265381]
[209.50590515 -155.77754211]
[213.36573792 -170.27243042]
[217.22558594 -184.76730347]
[205.60768127 -194.66615295]
[199.44311523 -208.62899780]
[199.95587158 -223.88349915]
[207.04412842 -237.40086365]
[219.30052185 -246.49722290]
[234.29151917 -249.36648560]
[249.04066467 -245.43893433]
[260.61947632 -235.49441528]
[266.72903442 -221.50740051]
[266.15618896 -206.25503540]
[259.01477051 -192.76568604]
[246.72265625 -183.71766663]
[231.72045898 -180.90747070]
[227.86062622 -166.41258240]
[224.00079346 -151.91770935]
[220.14096069 -137.42282104]
[216.28111267 -122.92793274]
[228.19552612 -132.04095459]
[243.05380249 -134.09796143]
[256.99588013 -128.56457520]
[266.39968872 -116.87832642]
[268.82217407 -102.07523346]
[263.63397217 -88.00104523]
[252.18296814 -78.31216431]
[237.44406128 -75.52569580]
[223.24630737 -80.36554718]
[213.27822876 -91.57435608]
[210.12951660 -106.24135590]
[203.65718079 -92.70958710]
[197.18482971 -79.17781830]
[190.71249390 -65.64604950]
[184.24014282 -52.11427689]
[190.19190979 -40.65954208]
[188.42053223 -27.67628670]
[179.35214233 -17.94946480]
[166.14323425 -15.19420052]
[159.42047119 -1.78507888]
[152.69772339 11.62404251]
[145.97496033 25.03316307]
[139.25219727 38.44228363]
[132.52944946 51.85140610]
[142.46331787 60.33491516]
[150.25102234 70.82316589]
[155.49894714 82.78606415]
[157.94186401 95.61898804]
[157.45628357 108.67333221]
[154.06678772 121.28931427]
[147.94465637 132.82929993]
[139.39930725 142.71002197]
[128.86267090 150.43211365]
[134.57069397 164.30361938]
[152.00590515 166.21070862]
[166.01719666 176.61270142]
[172.81817627 192.58685303]
[170.62753296 209.72026062]
[160.13462830 223.32878113]
[166.35432434 236.97853088]
[172.57402039 250.62826538]
[178.79370117 264.27801514]
[185.01339722 277.92773438]
[199.82737732 275.13317871]
[214.87962341 275.96572876]
[229.29504395 280.37701416]
[242.23551941 288.11056519]
[252.94871521 298.71670532]
[260.81179810 311.57888794]
[265.36758423 325.94927979]
[266.35122681 340.99243164]
[263.70556641 355.83370972]
[257.58435059 369.61029053]
[248.34352112 381.52124023]
[236.52029419 390.87402344]
[222.80206299 397.12493896]
[207.98640442 399.91052246]
[192.93466187 399.06881714]
[178.52192688 394.64880371]
[165.58613586 386.90744019]
[154.87937927 376.29476929]
[147.02409363 363.42782593]
[142.47702026 349.05468750]
[141.50248718 334.01095581]
[144.15716553 319.17126465]
[150.28671265 305.39840698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[12 136]
[13 135]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[73 121]
[76 117]
[77 116]
[78 115]
[79 114]
[80 113]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
