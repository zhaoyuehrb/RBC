%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGUGCGCCUACCAGACAGUGGCGGAGGACGGCGCUCGCUAGUCUCCCAGGUCGCGGUACACGGCGAGAACGGGCGGGGCGGUCUCGGCUGCGUCCGGGCGAUCCAGUGCUUAGUUCCGUCAUAUCCCUCUCCACGACCUCGGUCGAGC\
) } def
/len { sequence length } bind def

/coor [
[51.45348740 529.26580811]
[57.49982452 513.42669678]
[57.49982452 498.42669678]
[57.49982452 483.42669678]
[57.49982452 468.42669678]
[46.62470245 478.75778198]
[31.66489220 479.85510254]
[19.39870834 471.22140503]
[15.38397598 456.76864624]
[21.43977928 443.04541016]
[34.82222366 436.26971436]
[49.46770096 439.51162720]
[58.74068451 451.30331421]
[60.90330124 436.46002197]
[63.06591797 421.61672974]
[65.07502747 406.75189209]
[66.93041229 391.86709595]
[55.94779587 381.84112549]
[52.93922043 367.09619141]
[59.26381683 353.24511719]
[72.68679810 345.68667603]
[74.54219055 330.80187988]
[76.39757538 315.91705322]
[78.25296783 301.03225708]
[75.94482422 293.96109009]
[80.30359650 285.86019897]
[82.46621704 271.01690674]
[84.62882996 256.17361450]
[86.79145050 241.33033752]
[88.95406342 226.48704529]
[90.19275665 211.53828430]
[90.50276184 196.54148865]
[90.81275940 181.54469299]
[91.12276459 166.54789734]
[83.65015411 153.66343689]
[91.67100525 140.02612305]
[91.98101044 125.02931976]
[92.29101562 110.03252411]
[92.13600159 95.03332520]
[91.51612854 80.04614258]
[90.89625549 65.05895233]
[90.27637482 50.07176590]
[80.05362701 34.79103470]
[88.71739960 19.56075096]
[87.78791809 4.58957624]
[86.85843658 -10.38159847]
[78.28086853 -23.67580605]
[85.21465302 -36.85806656]
[84.28517151 -51.82923889]
[83.35569000 -66.80041504]
[79.68077087 -75.23359680]
[82.56495667 -82.09000397]
[81.94508362 -97.07718658]
[73.64410400 -110.54582977]
[80.84883881 -123.58197021]
[80.22896576 -138.56915283]
[79.60908508 -153.55633545]
[78.98921204 -168.54353333]
[78.36933899 -183.53071594]
[77.74946594 -198.51789856]
[66.53707123 -188.55386353]
[51.55302811 -189.24562073]
[41.30639267 -200.20037842]
[41.61596298 -215.19717407]
[52.30593872 -225.71974182]
[67.30576324 -225.79257202]
[78.09788513 -215.37326050]
[79.33657837 -230.32203674]
[80.57526398 -245.27079773]
[81.81395721 -260.21957397]
[83.05265045 -275.16833496]
[76.48138428 -289.56030273]
[85.24326324 -301.60516357]
[86.48195648 -316.55392456]
[75.24723816 -327.43121338]
[73.68415833 -342.99047852]
[82.53074646 -355.88513184]
[97.60991669 -360.02670288]
[111.80175018 -353.45965576]
[118.40528870 -339.28479004]
[114.30255127 -324.19500732]
[101.43072510 -315.31524658]
[100.19203186 -300.36648560]
[106.85189819 -287.04373169]
[98.00141144 -273.92965698]
[96.76272583 -258.98086548]
[95.52403259 -244.03210449]
[94.28534698 -229.08334351]
[93.04665375 -214.13456726]
[92.73664856 -199.13777161]
[93.35652924 -184.15058899]
[93.97640228 -169.16340637]
[94.59627533 -154.17622375]
[95.21614838 -139.18902588]
[95.83602142 -124.20184326]
[104.09266663 -111.80519104]
[96.93226624 -97.69705963]
[97.55214691 -82.70987701]
[98.32686615 -67.72989655]
[99.25634766 -52.75872040]
[100.18582916 -37.78754425]
[108.69690704 -25.56417656]
[101.82961273 -11.31107903]
[102.75908661 3.66009521]
[103.68856812 18.63126945]
[112.56647491 26.90577888]
[113.42851257 39.41385269]
[105.26356506 49.45189285]
[105.88343811 64.43907928]
[106.50331116 79.42626190]
[107.12319183 94.41345215]
[109.61910248 97.44554138]
[110.73706818 101.57818604]
[110.01025391 106.15732574]
[107.28781128 110.34252930]
[106.97780609 125.33932495]
[106.66780090 140.33612061]
[114.11824036 154.29325867]
[106.11956024 166.85789490]
[105.80955505 181.85469055]
[105.49955750 196.85148621]
[105.18955231 211.84828186]
[116.99782562 202.59817505]
[131.91020203 204.21710205]
[141.45832825 215.78573608]
[140.22007751 230.73454285]
[128.89860535 240.57447815]
[113.92309570 239.71769714]
[103.79734802 228.64967346]
[101.63473511 243.49295044]
[99.47211456 258.33624268]
[97.30950165 273.17953491]
[95.14688110 288.02279663]
[93.13777161 302.88763428]
[91.28238678 317.77246094]
[89.42699432 332.65725708]
[87.57160950 347.54208374]
[98.72836304 358.16436768]
[101.45919037 373.14422607]
[94.92301178 386.69937134]
[81.81522369 393.72247314]
[79.95983887 408.60729980]
[82.01168823 417.57464600]
[77.90920258 423.77935791]
[75.74658203 438.62265015]
[73.58396912 453.46591187]
[72.49982452 468.42669678]
[72.49982452 483.42669678]
[72.49982452 498.42669678]
[72.49982452 513.42669678]
[78.54616547 529.26580811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[13 146]
[14 145]
[15 144]
[16 142]
[17 141]
[21 137]
[22 136]
[23 135]
[24 134]
[26 133]
[27 132]
[28 131]
[29 130]
[30 129]
[31 122]
[32 121]
[33 120]
[34 119]
[36 117]
[37 116]
[38 115]
[39 111]
[40 110]
[41 109]
[42 108]
[44 105]
[45 104]
[46 103]
[48 101]
[49 100]
[50 99]
[52 98]
[53 97]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
