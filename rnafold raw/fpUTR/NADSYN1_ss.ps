%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGAUGGGCGGGGAGGGGGCGGGGCCGGGCAACCCGGAAGGUCCGGCGUCCCAGCCGCCUACCUCGCUGGGACCCUGGUCUUGCUGUCCCCCGCUGGCCUCCUGCCCAAGCGACUGCGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[117.88198853 166.50936890]
[112.63864136 158.77600098]
[111.59082794 149.35211182]
[115.10872650 140.39772034]
[107.34255219 127.56468964]
[101.12099457 123.42663574]
[99.54753113 114.31679535]
[87.56568146 107.11077118]
[87.43128204 93.12958527]
[79.98490143 80.10839081]
[72.53852081 67.08719635]
[65.09214020 54.06600571]
[57.64575958 41.04481506]
[50.19938278 28.02362442]
[42.75300217 15.00243187]
[35.69942093 9.02648544]
[35.28804398 1.56578851]
[28.16601372 -11.63560104]
[14.80412292 -20.10734558]
[15.57073021 -34.98221207]
[8.44870090 -48.18360138]
[1.32667160 -61.38499069]
[-5.79535770 -74.58638000]
[-12.91738701 -87.78777313]
[-20.03941727 -100.98915863]
[-27.16144562 -114.19055176]
[-34.28347397 -127.39193726]
[-41.40550613 -140.59332275]
[-48.52753448 -153.79472351]
[-55.64956284 -166.99610901]
[-62.77159500 -180.19749451]
[-76.09535980 -182.56994629]
[-85.45860291 -192.06910706]
[-87.57574463 -205.04029846]
[-81.89021301 -216.67277527]
[-88.68353271 -230.04629517]
[-95.47685242 -243.41979980]
[-102.27017975 -256.79330444]
[-109.06349945 -270.16680908]
[-124.70516968 -279.78878784]
[-123.20769501 -297.22756958]
[-130.32972717 -310.42895508]
[-137.45175171 -323.63037109]
[-144.57379150 -336.83175659]
[-162.18304443 -346.49636841]
[-161.05564880 -365.73620605]
[-168.82182312 -378.56924438]
[-176.58798218 -391.40225220]
[-184.35415649 -404.23529053]
[-199.75894165 -407.76635742]
[-208.08403015 -421.20019531]
[-204.39028931 -436.56677246]
[-190.86917114 -444.74938965]
[-175.54249573 -440.89337158]
[-167.50331116 -427.28649902]
[-171.52113342 -412.00146484]
[-163.75495911 -399.16842651]
[-155.98878479 -386.33541870]
[-148.22261047 -373.50238037]
[-137.99377441 -371.92608643]
[-130.19767761 -364.78771973]
[-127.62248230 -354.30804443]
[-131.37239075 -343.95376587]
[-124.25036621 -330.75238037]
[-117.12833405 -317.55099487]
[-110.00630188 -304.34960938]
[-98.45285034 -300.54467773]
[-92.43473053 -289.51336670]
[-95.68998718 -276.96014404]
[-88.89666748 -263.58663940]
[-82.10334778 -250.21311951]
[-75.31002045 -236.83961487]
[-68.51670074 -223.46609497]
[-52.35845184 -218.98117065]
[-44.23783875 -203.92620850]
[-49.57020187 -187.31953430]
[-42.44817352 -174.11813354]
[-35.32614517 -160.91674805]
[-28.20411491 -147.71536255]
[-21.08208656 -134.51397705]
[-13.96005630 -121.31257629]
[-6.83802700 -108.11119080]
[0.28400260 -94.90979767]
[7.40603209 -81.70841217]
[14.52806187 -68.50701904]
[21.65009117 -55.30562973]
[28.77211952 -42.10424042]
[41.62459564 -34.57674789]
[41.36740494 -18.75763130]
[48.48943329 -5.55624104]
[55.77419281 7.55605268]
[63.22057343 20.57724380]
[70.66695404 33.59843445]
[78.11333466 46.61962891]
[85.55971527 59.64081955]
[93.00608826 72.66201019]
[100.45246887 85.68320465]
[112.43431854 92.88922882]
[112.56871796 106.87041473]
[120.17558289 119.79851532]
[127.94174957 132.63154602]
[147.32154846 141.60763550]
[147.29188538 162.18719482]
[155.98815918 174.40908813]
[164.68443298 186.63098145]
[173.38070679 198.85289001]
[182.22747803 210.96629333]
[191.22338867 222.96936035]
[200.36706543 234.86024475]
[209.65711975 246.63711548]
[225.37985229 248.24072266]
[235.29866028 260.54489136]
[233.52891541 276.24978638]
[221.12057495 286.03796387]
[205.43527222 284.10226440]
[195.77882385 271.59112549]
[197.88023376 255.92716980]
[188.59019470 244.15029907]
[181.90565491 240.81140137]
[179.22032166 231.96527100]
[170.22441101 219.96220398]
[163.62449646 216.45899963]
[161.15879822 207.54916382]
[152.46252441 195.32725525]
[143.76625061 183.10536194]
[135.06997681 170.88346863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 101]
[5 100]
[7 99]
[9 97]
[10 96]
[11 95]
[12 94]
[13 93]
[14 92]
[15 91]
[17 90]
[18 89]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[35 73]
[36 72]
[37 71]
[38 70]
[39 69]
[41 66]
[42 65]
[43 64]
[44 63]
[46 59]
[47 58]
[48 57]
[49 56]
[103 126]
[104 125]
[105 124]
[106 123]
[107 121]
[108 120]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
