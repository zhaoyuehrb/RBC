%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUUGAAACUUGGCGGUUAAAGCUCCGGCUGGGACAGGGCGGCGGGAGACCCCGGGUGAACGGGGAAGGGACAUUUAGUUUGAGACGGUGCUGAGAUAGGAUC\
) } def
/len { sequence length } bind def

/coor [
[75.93898773 394.05261230]
[78.69953156 374.86853027]
[79.14403534 359.87512207]
[79.58853149 344.88168335]
[80.03303528 329.88827515]
[80.47753143 314.89486694]
[69.13685608 307.68313599]
[62.82626724 295.69430542]
[63.30878448 282.04577637]
[70.56490326 270.34762573]
[82.76922607 263.74768066]
[83.65782928 248.77401733]
[84.54644012 233.80036926]
[85.43505096 218.82670593]
[86.32366180 203.85305786]
[87.21227264 188.87939453]
[88.10087585 173.90574646]
[81.13114166 160.74246216]
[89.67237854 147.42489624]
[75.74449921 142.04106140]
[64.11237335 132.67810059]
[55.87696075 120.22219849]
[51.81773758 105.85229492]
[52.31890106 90.92848206]
[57.33301544 76.86327362]
[45.41019821 67.76126862]
[33.48738098 58.65926743]
[21.56456566 49.55726242]
[5.90044260 47.33334351]
[0.47910890 33.46040726]
[-11.44370747 24.35840416]
[-23.36652374 15.25640202]
[-35.28934097 6.15440035]
[-50.11736298 10.72707748]
[-64.79032135 5.67891169]
[-73.66616058 -7.04897547]
[-73.33193970 -22.56245041]
[-63.91617584 -34.89626694]
[-49.03942108 -39.30781937]
[-34.42209244 -34.10077667]
[-25.68484688 -21.27735329]
[-26.18733788 -5.76841640]
[-14.26452255 3.33358574]
[-2.34170556 12.43558788]
[9.58111095 21.53759003]
[24.39243507 23.11047363]
[30.66656876 37.63444901]
[42.58938599 46.73645020]
[54.51219940 55.83845139]
[66.43502045 64.94045258]
[87.20643616 53.18008423]
[111.07204437 52.74336243]
[116.70945740 38.84302139]
[122.34687042 24.94267464]
[127.98428345 11.04233170]
[133.62170410 -2.85801268]
[127.23557281 -17.31460190]
[133.02008057 -32.02225113]
[147.54338074 -38.25517273]
[162.18905640 -32.31548691]
[168.26808167 -17.72710037]
[162.17388916 -3.14504647]
[147.52204895 2.77940106]
[141.88462830 16.67974472]
[136.24720764 30.58008957]
[130.60980225 44.48043442]
[124.97238922 58.38077927]
[132.08404541 63.58030701]
[138.13868713 69.97967529]
[142.93687439 77.36805725]
[146.32051086 85.50204468]
[161.15611267 83.28734589]
[175.99171448 81.07264709]
[190.82731628 78.85794830]
[201.48950195 66.87055969]
[217.50099182 67.87642670]
[226.57913208 81.10392761]
[221.75996399 96.40605927]
[206.74032593 102.04433441]
[193.04200745 93.69355011]
[178.20640564 95.90824890]
[163.37080383 98.12294769]
[148.53520203 100.33764648]
[147.00801086 112.08418274]
[142.68093872 123.11096191]
[135.81175232 132.76123047]
[126.80956268 140.46018982]
[116.21056366 145.74928284]
[104.64603424 148.31349182]
[111.55221558 162.54779053]
[103.07453156 174.79435730]
[102.18592834 189.76800537]
[101.29731750 204.74166870]
[100.40870667 219.71531677]
[99.52009583 234.68898010]
[98.63148499 249.66262817]
[97.74288177 264.63629150]
[110.91880798 275.11874390]
[115.26528931 291.21408081]
[109.27693176 306.59628296]
[95.47094727 315.33938599]
[95.02644348 330.33279419]
[94.58194733 345.32620239]
[94.13744354 360.31961060]
[93.69294739 375.31301880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[19 89]
[25 50]
[26 49]
[27 48]
[28 47]
[30 45]
[31 44]
[32 43]
[33 42]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
