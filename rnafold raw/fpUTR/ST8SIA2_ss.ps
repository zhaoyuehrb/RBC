%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGCCGCUGCCGCCGCCGGCCCGGACUCGUCCGGAGCGCAGGGUGUCUGCCCAGCUGCGCGCGGCGCGCGGAGGCUCCGGCGUCCGCCGCUGCGCCCUCCGGCCCCUGCUCCUCGCGCCGGCCCGCGUGGGUCCCGGCGGGCGCGAACCCACC\
) } def
/len { sequence length } bind def

/coor [
[191.63255310 728.06518555]
[189.22639465 713.25946045]
[186.82022095 698.45367432]
[174.62258911 689.98297119]
[171.97148132 675.00207520]
[180.93907166 662.26550293]
[178.53289795 647.45977783]
[176.12673950 632.65399170]
[173.72056580 617.84826660]
[171.31439209 603.04248047]
[168.90821838 588.23675537]
[154.04110718 581.33862305]
[146.11761475 566.80261230]
[148.42169189 550.24096680]
[160.24421692 538.18286133]
[157.54039001 523.42852783]
[154.83656311 508.67422485]
[152.13273621 493.91995239]
[149.28048706 479.19360352]
[146.28009033 464.49676514]
[143.27970886 449.79989624]
[133.15299988 438.87750244]
[137.97354126 423.80856323]
[134.97315979 409.11169434]
[131.97277832 394.41482544]
[128.97238159 379.71795654]
[124.52756500 373.75918579]
[126.06269836 364.69509888]
[116.15798187 353.57098389]
[121.28099060 338.60217285]
[118.57716370 323.84786987]
[109.62351227 318.78024292]
[104.86519623 309.41067505]
[106.10610962 298.75378418]
[113.17414093 290.39154053]
[111.06660461 275.54031372]
[108.95906830 260.68911743]
[106.85153198 245.83792114]
[104.74399567 230.98670959]
[101.48596191 227.42352295]
[100.46894073 221.75866699]
[102.86312866 215.49636841]
[101.35529327 200.57234192]
[99.84746552 185.64833069]
[98.33963776 170.72430420]
[94.51631165 164.34889221]
[96.95481110 155.48501587]
[95.74781799 140.53366089]
[94.54081726 125.58230591]
[73.13433075 112.90670013]
[70.09744263 85.00424194]
[58.28968811 75.75345612]
[42.63281250 77.90702057]
[30.08958435 68.29228973]
[28.10167503 52.61352539]
[37.84848022 40.17264938]
[53.54738617 38.35061646]
[65.88452148 48.22840881]
[67.54046631 63.94570541]
[79.34822083 73.19648743]
[92.96404266 66.90287781]
[93.56803131 51.91504288]
[94.17201996 36.92720795]
[94.77600861 21.93937302]
[95.37999725 6.95153809]
[95.98398590 -8.03629684]
[96.58797455 -23.02413177]
[97.19196320 -38.01196671]
[94.39852905 -46.77045822]
[97.96203613 -53.29464722]
[98.86771393 -68.26728058]
[99.77339172 -83.23991394]
[100.67906952 -98.21254730]
[101.58474731 -113.18518066]
[94.69479370 -127.42734528]
[103.18643188 -139.66423035]
[104.09210968 -154.63685608]
[96.28491211 -169.05836487]
[105.10006714 -182.88677979]
[121.46929169 -181.89662170]
[128.55334473 -167.10647583]
[119.06474304 -153.73118591]
[118.15906525 -138.75854492]
[125.11380005 -125.58733368]
[116.55738068 -112.27950287]
[115.65170288 -97.30686951]
[114.74602509 -82.33423615]
[113.84034729 -67.36160278]
[112.93466949 -52.38896942]
[112.17980194 -37.40797806]
[111.57580566 -22.42014313]
[110.97181702 -7.43230772]
[110.36782837 7.55552721]
[109.76383972 22.54336166]
[109.15985107 37.53119659]
[108.55586243 52.51903152]
[107.95187378 67.50686646]
[119.80827332 74.56741333]
[127.40883636 85.47266388]
[129.74090576 98.04405975]
[126.79658508 109.96516418]
[119.50395203 119.20748138]
[109.49217987 124.37530518]
[110.69917297 139.32666016]
[111.90617371 154.27803040]
[113.26365662 169.21647644]
[114.77148438 184.14048767]
[116.27931976 199.06451416]
[117.78714752 213.98854065]
[119.59519958 228.87916565]
[121.70273590 243.73037720]
[123.81027222 258.58157349]
[125.91780853 273.43280029]
[128.02534485 288.28399658]
[141.17996216 303.50894165]
[133.33146667 321.14404297]
[136.03529358 335.89834595]
[146.13340759 348.07778931]
[140.81700134 361.99127197]
[143.66925049 376.71759033]
[146.66963196 391.41445923]
[149.67001343 406.11129761]
[152.67039490 420.80816650]
[163.01171875 432.78179932]
[157.97657776 446.79949951]
[160.97695923 461.49636841]
[163.97734070 476.19323730]
[168.78564453 484.02868652]
[166.88703918 491.21612549]
[169.59085083 505.97039795]
[172.29467773 520.72473145]
[174.99850464 535.47900391]
[187.86454773 540.51391602]
[196.48265076 551.17364502]
[198.67601013 564.59484863]
[193.97528076 577.24023438]
[183.71397400 585.83056641]
[186.12014771 600.63635254]
[188.52632141 615.44207764]
[190.93247986 630.24786377]
[193.33865356 645.05358887]
[195.74482727 659.85937500]
[208.28417969 669.10070801]
[210.51345825 684.15008545]
[201.62597656 696.04748535]
[204.03213501 710.85327148]
[206.43830872 725.65899658]
[220.62718201 731.71539307]
[229.27040100 744.49420166]
[229.60993958 759.91784668]
[221.53746033 773.06463623]
[207.62884521 779.73950195]
[192.32229614 777.81256104]
[180.50209045 767.89862061]
[175.93997192 753.16125488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[6 142]
[7 141]
[8 140]
[9 139]
[10 138]
[11 137]
[15 132]
[16 131]
[17 130]
[18 129]
[19 127]
[20 126]
[21 125]
[23 123]
[24 122]
[25 121]
[26 120]
[28 119]
[30 117]
[31 116]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[42 109]
[43 108]
[44 107]
[45 106]
[47 105]
[48 104]
[49 103]
[51 60]
[52 59]
[61 97]
[62 96]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
