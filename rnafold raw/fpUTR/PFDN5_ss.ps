%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAUCAUAGAGCUGUCUGGCGCAGCGAGGCCUCCCGGCGCCACCGAGACGCGCAGAGGACGGCUAGAGCGUUGCUCGCCGAGAGACUUCCUCUUCGUUAAGUCGGCCUUCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[102.62587738 163.44917297]
[100.23992920 148.64015198]
[97.85397339 133.83113098]
[95.46802521 119.02209473]
[88.31681824 116.76151276]
[88.43643188 131.76103210]
[74.20794678 136.50973511]
[65.29497528 124.44495392]
[74.01439667 112.24034882]
[66.86318970 109.97976685]
[56.39871979 120.72661591]
[45.93424606 131.47346497]
[42.42773056 147.49334717]
[26.72092628 152.20803833]
[14.97164631 140.76747131]
[19.26654434 124.94072723]
[35.18739700 121.00899506]
[45.65187073 110.26214600]
[56.11634064 99.51529694]
[51.02775955 85.40479279]
[36.11273575 83.81038666]
[21.19771385 82.21598816]
[6.28269291 80.62158203]
[-8.63232899 79.02718353]
[-15.01658249 81.42610931]
[-20.75520515 80.31280518]
[-24.29117203 76.93030548]
[-39.10019684 74.54434967]
[-48.20203018 76.28031158]
[-54.26952744 71.89271545]
[-69.00978851 69.11338806]
[-85.69496918 72.12021637]
[-93.20320892 56.91946793]
[-80.67500305 45.49666977]
[-66.23046112 54.37312317]
[-51.49019623 57.15245438]
[-36.71424484 59.73532486]
[-21.90522003 62.12127686]
[-7.03792715 64.11215973]
[7.87709522 65.70655823]
[22.79211617 67.30096436]
[37.70713806 68.89536285]
[52.62216187 70.48976898]
[93.39502716 67.15123749]
[106.47658539 90.86782837]
[118.27485657 81.60495758]
[130.07313538 72.34209442]
[141.87141418 63.07922363]
[140.98817444 46.24943542]
[150.17939758 32.32116699]
[165.68989563 26.62843895]
[181.39160156 31.21125221]
[192.93910217 21.63758850]
[204.48661804 12.06392574]
[210.17218018 -2.70039058]
[224.90834045 -4.86706114]
[236.45585632 -14.44072342]
[248.00337219 -24.01438713]
[259.55087280 -33.58805084]
[271.09838867 -43.16171265]
[282.64590454 -52.73537445]
[293.25250244 -63.34197617]
[302.82617188 -74.88948822]
[312.39981079 -86.43699646]
[321.97348022 -97.98450470]
[323.50363159 -104.63072205]
[327.60369873 -108.79736328]
[332.37704468 -109.87408447]
[342.55172729 -120.89569092]
[352.72640991 -131.91731262]
[362.90109253 -142.93891907]
[369.20227051 -158.67840576]
[386.07098389 -156.98060608]
[389.10925293 -140.30111694]
[373.92269897 -132.76423645]
[363.74801636 -121.74263000]
[353.57333374 -110.72101593]
[343.39868164 -99.69940186]
[333.52099609 -88.41084290]
[323.94732666 -76.86333466]
[314.37365723 -65.31582642]
[304.80001831 -53.76831436]
[319.79074097 -54.29542542]
[331.74935913 -45.24049759]
[335.30725098 -30.66856194]
[328.86721802 -17.12139320]
[315.32034302 -10.68072128]
[300.74822998 -14.23795605]
[291.69274902 -26.19614792]
[292.21957397 -41.18786621]
[280.67205811 -31.61420250]
[269.12454224 -22.04053879]
[257.57702637 -12.46687698]
[246.02952576 -2.89321399]
[234.48200989 6.68044853]
[229.62240601 20.75999260]
[214.06028748 23.61143494]
[202.51277161 33.18509674]
[190.96525574 42.75876236]
[193.04685974 56.01776123]
[188.23606873 68.66367340]
[177.70027161 77.32463074]
[164.14826965 79.63427734]
[151.13427734 74.87749481]
[139.33599854 84.14036560]
[127.53772736 93.40323639]
[115.73945618 102.66609955]
[110.27704620 116.63614655]
[112.66300201 131.44517517]
[115.04895020 146.25419617]
[117.43490601 161.06321716]
[130.95219421 168.92558289]
[136.20455933 183.65469360]
[130.71197510 198.29592896]
[117.06787109 205.93612671]
[101.71459198 202.96783447]
[91.90147400 190.79257202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[10 19]
[11 18]
[12 17]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[27 38]
[28 37]
[30 36]
[31 35]
[45 107]
[46 106]
[47 105]
[48 104]
[52 99]
[53 98]
[54 97]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 82]
[63 81]
[64 80]
[65 79]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
