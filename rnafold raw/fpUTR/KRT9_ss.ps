%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGCACUUGGGAGCCGGUAGCACUCCUAUCACUGCUUCUCAACCCGUGAGCUACCAGCUGUGUC\
) } def
/len { sequence length } bind def

/coor [
[82.04317474 158.72428894]
[72.88851929 170.60673523]
[63.73386765 182.48916626]
[67.26512146 197.72282410]
[60.13216782 211.63882446]
[45.70297241 217.66645813]
[30.79055977 212.95965576]
[22.43611336 199.74082947]
[24.58434868 184.25151062]
[36.22093201 173.80526733]
[51.85142899 173.33451843]
[61.00608444 161.45207214]
[70.16073608 149.56964111]
[77.55899048 136.52104187]
[83.05468750 122.56406403]
[88.55039215 108.60708618]
[86.67206573 94.75199127]
[97.49263000 85.89721680]
[102.98832703 71.94023895]
[108.48403168 57.98325729]
[113.97972870 44.02627945]
[119.47543335 30.06929970]
[124.97113037 16.11231995]
[110.41033173 19.71552467]
[96.77334595 13.46792030]
[89.99327850 0.08768380]
[93.01997375 -14.60377979]
[104.53659058 -24.21458435]
[119.53253937 -24.56330681]
[131.48345947 -15.49822998]
[135.18994141 -0.96510381]
[144.89149475 -12.40538120]
[154.59304810 -23.84565926]
[164.29458618 -35.28593826]
[157.65208435 -48.98983765]
[157.16419983 -64.21093750]
[162.91549683 -78.31208801]
[173.90953064 -88.85018158]
[188.24148560 -93.99942780]
[203.42829895 -92.86769104]
[216.83872986 -85.65104675]
[226.14936829 -73.59983063]
[229.74708557 -58.80197906]
[227.00854492 -43.82131577]
[218.40821838 -31.25332832]
[205.43617249 -23.27549744]
[190.33987427 -21.27003098]
[175.73486328 -25.58438873]
[166.03332520 -14.14411068]
[156.33177185 -2.70383286]
[146.63021851 8.73644447]
[138.92811584 21.60802078]
[133.43240356 35.56499863]
[127.93670654 49.52198029]
[122.44100952 63.47895813]
[116.94531250 77.43593597]
[111.44960785 91.39291382]
[113.32793427 105.24800873]
[102.50737000 114.10278320]
[97.01167297 128.05976868]
[91.51596832 142.01673889]
[106.26315308 139.27438354]
[118.86758423 147.40632629]
[122.44770050 161.97282410]
[115.04889679 175.02110291]
[100.71064758 179.42729187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[14 61]
[15 60]
[16 59]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[31 51]
[32 50]
[33 49]
[34 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
