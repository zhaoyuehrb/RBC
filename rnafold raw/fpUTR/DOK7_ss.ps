%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUAUUUUGAAAGUGACCCUGGGCUGGGGCGCCGGGGCGAGCGCGGCGGCGCGGAACCAUGACAGAAG\
) } def
/len { sequence length } bind def

/coor [
[42.56396484 330.23358154]
[28.30951500 335.05096436]
[13.40092850 337.08334351]
[-1.62285554 336.25723267]
[-16.21873665 332.60256958]
[-29.85908508 326.25137329]
[-42.05080795 317.43331909]
[-52.35318375 306.46710205]
[-60.39378738 293.74920654]
[-65.88195801 279.73934937]
[-68.61930084 264.94393921]
[-68.50685883 249.89788818]
[-65.54869843 235.14506531]
[-59.85176086 221.21878052]
[-51.62198257 208.62246704]
[-41.15686035 197.81146240]
[-28.83471107 189.17658997]
[-15.10096645 183.02998352]
[-0.45209458 179.59384155]
[14.58235741 178.99238586]
[29.45890427 181.24734497]
[43.63976669 186.27722168]
[51.23535919 173.34251404]
[58.83095551 160.40779114]
[57.87146378 143.02429199]
[73.63095856 133.79435730]
[80.64697266 120.53632355]
[87.66298676 107.27828979]
[87.33950806 93.30020142]
[99.07897949 85.70569611]
[98.69503021 69.88915253]
[111.48677063 62.25890732]
[118.50278473 49.00086975]
[125.51879883 35.74283218]
[132.53482056 22.48479652]
[139.55082703 9.22675896]
[139.16688538 -6.58978748]
[151.95861816 -14.22002983]
[148.63113403 -29.91421318]
[158.93753052 -42.20883942]
[174.97161865 -41.67252731]
[184.43341064 -28.71668243]
[180.06465149 -13.27992725]
[165.21665955 -7.20401573]
[166.10243225 7.66422796]
[152.80886841 16.24277306]
[145.79284668 29.50081062]
[138.77684021 42.75884628]
[131.76081848 56.01688385]
[124.74481201 69.27492523]
[125.63058472 84.14316559]
[112.33701324 92.72171021]
[112.66049194 106.69979858]
[100.92102051 114.29430389]
[93.90500641 127.55233765]
[86.88899231 140.81037903]
[89.93769073 153.55780029]
[83.56620026 164.54591370]
[71.76567078 168.00338745]
[64.17008209 180.93811035]
[56.57448578 193.87281799]
[67.87563324 203.80662537]
[77.09236145 215.69984436]
[83.89147949 229.12252808]
[88.02721405 243.58946228]
[89.35005951 258.57766724]
[87.81218719 273.54534912]
[83.46920013 287.95141602]
[76.47808838 301.27511597]
[67.09158325 313.03479004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 61]
[23 60]
[24 59]
[26 56]
[27 55]
[28 54]
[30 52]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
