%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCGCGGACGCCUGCUCAGUGCGCGCCGGCCGGGCAACCCUAUGCUGGCGUAAUCGGGUUCCUCCGAGCCGCCGUAGGACUGGUUCCGGCGGGCUGGUGAGGA\
) } def
/len { sequence length } bind def

/coor [
[109.96321869 135.83287048]
[95.11352539 133.71470642]
[90.45511627 119.45534515]
[83.21323395 132.59136963]
[75.97135162 145.72740173]
[68.72946930 158.86341858]
[69.59426880 175.23974609]
[55.69876862 183.94877625]
[41.33746338 176.03138733]
[41.28403091 159.63232422]
[55.59344101 151.62153625]
[62.83532715 138.48551941]
[70.07720947 125.34948730]
[77.31909180 112.21346283]
[83.43454742 104.50497437]
[91.43199158 100.31795502]
[80.06932831 90.52562714]
[68.70665741 80.73329163]
[57.34399033 70.94096375]
[41.83912277 67.79299164]
[37.24915314 53.62326050]
[25.88648224 43.83092880]
[12.88410950 43.98518753]
[3.60527301 35.46049881]
[2.71903944 23.29544258]
[-8.34846020 13.17069721]
[-19.41595840 3.04595184]
[-30.48345757 -7.07879305]
[-41.55095673 -17.20353889]
[-52.61845779 -27.32828331]
[-63.68595505 -37.45302963]
[-74.75345612 -47.57777405]
[-94.53446198 -50.85478210]
[-99.91525269 -69.32743835]
[-111.56311035 -78.77875519]
[-123.21096802 -88.23007202]
[-139.32015991 -93.51498413]
[-138.70124817 -110.45763397]
[-122.24938965 -114.55310059]
[-113.75965118 -99.87792969]
[-102.11179352 -90.42661285]
[-90.46393585 -80.97529602]
[-80.23873138 -82.95372772]
[-70.44255066 -78.81016541]
[-64.49761200 -69.72417450]
[-64.62870789 -58.64527130]
[-53.56121063 -48.52052689]
[-42.49371338 -38.39578247]
[-31.42621231 -28.27103806]
[-20.35871315 -18.14629173]
[-9.29121399 -8.02154732]
[1.77628529 2.10319781]
[12.84378433 12.22794247]
[30.10283661 14.99736881]
[35.67881393 32.46825790]
[47.04148483 42.26058960]
[61.73361588 44.70814133]
[67.13632202 59.57829285]
[78.49899292 69.37062073]
[89.86165619 79.16295624]
[101.22432709 88.95528412]
[114.56918335 95.80472565]
[129.14952087 99.32801819]
[143.72987366 102.85131073]
[158.31021118 106.37459564]
[172.89056396 109.89788818]
[187.52151489 113.20473480]
[202.61947632 108.47589111]
[213.48011780 118.66882324]
[228.15846252 121.75849915]
[242.83680725 124.84818268]
[257.51516724 127.93785858]
[272.23767090 130.80969238]
[287.00112915 133.46304321]
[301.76458740 136.11639404]
[316.52804565 138.76976013]
[331.47924805 133.59558105]
[342.63717651 143.46220398]
[357.40063477 146.11555481]
[370.23181152 136.88862610]
[385.81558228 139.51963806]
[394.90631104 152.44766235]
[392.11068726 168.00271606]
[379.08728027 176.95628357]
[363.56265259 173.99635315]
[354.74728394 160.87901306]
[339.98382568 158.22566223]
[326.08859253 163.58961487]
[313.87469482 153.53321838]
[299.11123657 150.87986755]
[284.34777832 148.22650146]
[269.58432007 145.57315063]
[262.32791138 147.51896667]
[254.42547607 142.61621094]
[239.74713135 139.52653503]
[225.06878662 136.43684387]
[210.39042664 133.34716797]
[196.34236145 138.29701233]
[184.43182373 127.88308716]
[177.12095642 129.61300659]
[169.36726379 124.47823334]
[154.78692627 120.95494080]
[140.20657349 117.43164825]
[125.62623596 113.90836334]
[111.04589081 110.38507080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[16 61]
[17 60]
[18 59]
[19 58]
[21 56]
[22 55]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[34 42]
[35 41]
[36 40]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[67 99]
[69 97]
[70 96]
[71 95]
[72 94]
[73 92]
[74 91]
[75 90]
[76 89]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
