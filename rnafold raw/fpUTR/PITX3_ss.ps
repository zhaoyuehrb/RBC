%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCGCCCGAGCGGAGAGGCGGCCCGGGAGCAGGGGGGCGGCCCCCACUCCGGCCGGGUGCCCGGCCCCUGGCCCCUGCCUGCCCUCUAGAUCGCCGCCGCAGCCGCCGCUACUGGGAGUCUGCCUGUUGCAGGACGCACUAGCCCUCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[205.27983093 221.91438293]
[194.61962891 211.36166382]
[183.85302734 200.91751099]
[172.98112488 190.58300781]
[162.10923767 180.24850464]
[151.23735046 169.91400146]
[148.66740417 184.69219971]
[135.61206055 192.07855225]
[121.62104797 186.67005920]
[116.92853546 172.42294312]
[124.96698761 159.75869751]
[139.85597229 157.94081116]
[130.08538818 146.55943298]
[120.31480408 135.17805481]
[110.54421234 123.79669189]
[94.39392853 125.41721344]
[80.42378235 117.15326691]
[74.06661224 102.21859741]
[77.79464722 86.42114258]
[67.79540253 75.24012756]
[57.79615784 64.05911255]
[47.79691315 52.87810135]
[37.79766464 41.69708633]
[27.79841995 30.51607323]
[8.40466595 25.15999603]
[5.13640690 6.13680601]
[-5.63019705 -4.30734253]
[-16.70930481 -14.41938400]
[-27.78841209 -24.53142548]
[-36.28983307 -28.03385544]
[-38.98693848 -34.96243668]
[-49.85882950 -45.29693985]
[-60.73072052 -55.63144684]
[-71.60261536 -65.96595001]
[-82.47450256 -76.30045319]
[-97.80751801 -80.20037842]
[-101.70140839 -94.57698822]
[-112.57329559 -104.91149139]
[-123.44519043 -115.24599457]
[-131.87388611 -118.91999817]
[-134.43000793 -125.90182495]
[-145.09022522 -136.45454407]
[-155.75042725 -147.00726318]
[-166.41064453 -157.55998230]
[-175.68742371 -153.68125916]
[-185.67428589 -152.80351257]
[-195.42753601 -154.99160767]
[-204.03108215 -160.02159119]
[-210.68240356 -167.40339661]
[-214.76745605 -176.42864990]
[-215.91725159 -186.23854065]
[-214.04124451 -195.90556335]
[-209.33404541 -204.52124023]
[-218.87196350 -216.09829712]
[-228.40988159 -227.67533875]
[-237.94778442 -239.25239563]
[-247.48570251 -250.82945251]
[-257.02362061 -262.40649414]
[-272.56390381 -267.64404297]
[-275.53250122 -283.77224731]
[-262.87557983 -294.19982910]
[-247.61349487 -288.19976807]
[-245.44656372 -271.94442749]
[-235.90864563 -260.36737061]
[-226.37074280 -248.79031372]
[-216.83282471 -237.21325684]
[-207.29490662 -225.63619995]
[-197.75698853 -214.05914307]
[-177.71310425 -216.89570618]
[-159.85214233 -207.07891846]
[-151.39001465 -188.38685608]
[-155.85792542 -168.22019958]
[-145.19770813 -157.66748047]
[-134.53750610 -147.11476135]
[-123.87728882 -136.56202698]
[-113.11068726 -126.11788177]
[-102.23879242 -115.78337860]
[-91.36690521 -105.44887543]
[-76.81152344 -102.28814697]
[-72.13999939 -87.17234802]
[-61.26810837 -76.83783722]
[-50.39621735 -66.50333405]
[-39.52432632 -56.16883469]
[-28.65243530 -45.83433151]
[-17.67637062 -35.61053085]
[-6.59726334 -25.49849129]
[4.48184395 -15.38644981]
[8.05871582 -15.20346165]
[11.71805954 -13.24193192]
[14.60781288 -9.48567677]
[15.90301037 -4.30734253]
[26.16494751 -5.06702900]
[35.32731247 0.08254643]
[40.21440506 9.63571739]
[38.97943497 20.51682663]
[48.97867966 31.69784164]
[58.97792435 42.87885666]
[68.97717285 54.05986786]
[78.97641754 65.24088287]
[88.97566223 76.42189789]
[102.03043365 74.05120087]
[114.55756378 78.42362213]
[123.30173492 88.40293121]
[125.99066162 101.39588928]
[121.92559052 114.02610016]
[131.69616699 125.40747070]
[141.46676636 136.78884888]
[151.23735046 148.17021179]
[161.57185364 159.04211426]
[172.44374084 169.37661743]
[183.31564331 179.71112061]
[194.18753052 190.04562378]
[202.61622620 193.71963501]
[205.17234802 200.70144653]
[215.83256531 211.25416565]
[226.91166687 221.36621094]
[238.39146423 231.02096558]
[249.87127686 240.67570496]
[261.35107422 250.33045959]
[272.83087158 259.98519897]
[283.66940308 258.42004395]
[293.36672974 263.01446533]
[298.79244995 272.01608276]
[298.34503174 282.29635620]
[309.42416382 292.40838623]
[324.99157715 291.86685181]
[336.08331299 302.27972412]
[336.50366211 317.12420654]
[347.58276367 327.23623657]
[356.08419800 330.73867798]
[358.78131104 337.66726685]
[369.65319824 348.00177002]
[385.66296387 349.03439331]
[394.71899414 362.27706909]
[389.87426758 377.57110596]
[374.84521484 383.18426514]
[361.16088867 374.81060791]
[359.31869507 358.87365723]
[348.44680786 348.53915405]
[337.47073364 338.31536865]
[326.39163208 328.20330811]
[311.57055664 329.13677979]
[300.19070435 319.03955078]
[299.31210327 303.48751831]
[288.23300171 293.37545776]
[269.11926270 290.68698120]
[263.17611694 271.46499634]
[251.69633484 261.81024170]
[240.21652222 252.15551758]
[228.73672485 242.50076294]
[217.25691223 232.84602356]
[214.40126038 232.98876953]
[211.31619263 231.97509766]
[208.45468140 229.71139526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 112]
[4 111]
[5 110]
[6 109]
[12 108]
[13 107]
[14 106]
[15 105]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[26 91]
[27 87]
[28 86]
[29 85]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[37 78]
[38 77]
[39 76]
[41 75]
[42 74]
[43 73]
[44 72]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[116 151]
[117 150]
[118 149]
[119 148]
[120 147]
[124 145]
[125 144]
[128 141]
[129 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
