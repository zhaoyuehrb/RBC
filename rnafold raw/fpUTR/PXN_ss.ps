%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGCGCGGGCGCGGGCGCGCGCGGCGGCGGCGCGUUCCGUUCCGGGCCGAGGCUCGCGGCGGAAAAGUUGCGGGGCAUAGACGAGCGGCCCCGGGACGGGCAGCUAGCGCGACCCUGAGCCGGCGCCCGUGGUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[113.41860962 482.30679321]
[105.40359497 469.75256348]
[112.83586884 455.78576660]
[112.50636292 440.78936768]
[112.17684937 425.79299927]
[111.84733582 410.79663086]
[111.51782227 395.80023193]
[111.02360535 380.80838013]
[110.36474609 365.82287598]
[109.70587921 350.83734131]
[109.04701996 335.85180664]
[108.38815308 320.86630249]
[107.72929382 305.88076782]
[107.07042694 290.89523315]
[106.41156769 275.90972900]
[98.12269592 263.53457642]
[105.24636841 249.40788269]
[104.58750153 234.42236328]
[103.92864227 219.43682861]
[95.63977051 207.06170654]
[102.76344299 192.93499756]
[102.10458374 177.94947815]
[100.78812408 163.00735474]
[98.81661987 148.13748169]
[96.84511566 133.26760864]
[94.87361145 118.39772797]
[83.43434906 109.50449371]
[81.52993774 95.14067078]
[90.25651550 83.57377625]
[88.28501129 68.70390320]
[86.31350708 53.83403015]
[76.82952118 41.17051697]
[82.82690430 27.53671074]
[80.85540009 12.66683674]
[71.37141418 0.00332313]
[77.36879730 -13.63048077]
[75.39729309 -28.50035477]
[73.42578888 -43.37023163]
[71.45428467 -58.24010468]
[69.48278046 -73.10997772]
[67.51127625 -87.97985077]
[65.53977203 -102.84973145]
[62.64787674 -106.32318878]
[61.20718765 -110.15726471]
[61.14776993 -113.83553314]
[62.23423004 -116.92098999]
[64.10766602 -119.10449219]
[63.44880295 -134.09001160]
[62.78993988 -149.07553101]
[62.13107300 -164.06106567]
[61.47220993 -179.04658508]
[60.81334686 -194.03210449]
[54.91245651 -203.98689270]
[58.20214462 -213.72685242]
[47.64335632 -225.50914001]
[52.42104721 -239.61669922]
[49.15211487 -254.25616455]
[45.88318253 -268.89562988]
[42.61425018 -283.53509521]
[39.34531784 -298.17456055]
[36.07638550 -312.81405640]
[32.80745316 -327.45352173]
[29.53852081 -342.09298706]
[16.06371498 -350.35162354]
[12.45662022 -365.73876953]
[20.85726357 -379.12551880]
[36.28168869 -382.56973267]
[49.57886505 -374.02801514]
[52.85980606 -358.56805420]
[44.17798996 -345.36190796]
[47.44692230 -330.72244263]
[50.71585464 -316.08297729]
[53.98478699 -301.44351196]
[57.25371933 -286.80404663]
[60.52265167 -272.16458130]
[63.79158401 -257.52508545]
[67.06051636 -242.88563538]
[77.38549042 -232.15043640]
[72.84161377 -216.99577332]
[80.76476288 -229.73248291]
[94.14425659 -236.51402283]
[109.10088348 -235.37416077]
[121.29817200 -226.64340210]
[127.19967651 -212.85310364]
[125.09433746 -198.00158691]
[115.59255981 -186.39485168]
[101.44927216 -181.39810181]
[86.76512909 -184.46011353]
[75.79887390 -194.69096375]
[76.45773315 -179.70544434]
[77.11660004 -164.71992493]
[77.77545929 -149.73440552]
[78.43432617 -134.74887085]
[79.09318542 -119.76335144]
[80.40964508 -104.82123566]
[82.38114929 -89.95136261]
[84.35265350 -75.08148193]
[86.32415771 -60.21160889]
[88.29566193 -45.34173584]
[90.26716614 -30.47186089]
[92.23867798 -15.60198689]
[101.58164978 -4.00206614]
[95.72527313 10.69533157]
[97.69677734 25.56520653]
[107.03974915 37.16512680]
[101.18338013 51.86252213]
[103.15488434 66.73239899]
[105.12638855 81.60227203]
[116.56565094 90.49550629]
[118.47006226 104.85932922]
[109.74348450 116.42622375]
[111.71498871 131.29609680]
[113.68649292 146.16596985]
[115.65799713 161.03584290]
[118.54988861 164.50930786]
[119.99057770 168.34338379]
[120.04999542 172.02165222]
[118.96353912 175.10711670]
[117.09010315 177.29060364]
[117.74897003 192.27612305]
[126.08496094 205.72312927]
[118.91416168 218.77796936]
[119.57302856 233.76348877]
[120.23188782 248.74902344]
[128.56788635 262.19601440]
[121.39708710 275.25085449]
[122.05595398 290.23638916]
[122.71481323 305.22189331]
[123.37368011 320.20742798]
[124.03253937 335.19296265]
[124.69140625 350.17846680]
[125.35026550 365.16400146]
[126.00913239 380.14950562]
[129.53529358 388.66177368]
[126.51420593 395.47073364]
[126.84371948 410.46710205]
[127.17322540 425.46350098]
[127.50273895 440.45986938]
[127.83225250 455.45623779]
[135.87083435 469.08312988]
[128.41499329 481.97729492]
[131.02835083 501.18197632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[17 124]
[18 123]
[19 122]
[21 120]
[22 119]
[23 114]
[24 113]
[25 112]
[26 111]
[29 108]
[30 107]
[31 106]
[33 104]
[34 103]
[36 101]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 95]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[54 79]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
