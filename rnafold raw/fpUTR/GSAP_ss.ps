%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGGCGAGGCGGCCACGCGGGGCCGGGAAUGCCCGCGGUGCGGGGCCCCAGAGCCGCCCGGUGGUCGUGUCCGGGCG\
) } def
/len { sequence length } bind def

/coor [
[143.40422058 212.76144409]
[132.38935852 202.57945251]
[131.44062805 187.60948181]
[141.08193970 176.11840820]
[155.98918152 174.45193481]
[146.24745178 163.04585266]
[136.50573730 151.63975525]
[119.81747437 151.12088013]
[108.34754944 138.53205872]
[109.42081451 121.20058441]
[99.23880768 110.18574524]
[91.68634796 106.75721741]
[88.88376617 98.53282928]
[79.14204407 87.12673950]
[69.40032196 75.72064972]
[59.65860367 64.31455994]
[44.81261826 58.84580231]
[42.43040466 44.14293289]
[32.68868637 32.73684311]
[22.94696426 21.33075523]
[13.20524406 9.92466545]
[-0.56971896 12.02158356]
[-13.45480824 7.01239443]
[-22.05943871 -3.66807914]
[-24.17775154 -17.10844421]
[-19.35329437 -29.71390152]
[-28.63970375 -41.49365616]
[-37.92611313 -53.27341080]
[-47.21252060 -65.05316162]
[-62.63641739 -70.62411499]
[-65.25703430 -86.81252289]
[-52.37850571 -96.96513367]
[-37.24915695 -90.63781738]
[-35.43276978 -74.33956909]
[-26.14635849 -62.55981827]
[-16.85994911 -50.78006363]
[-7.57354069 -39.00030899]
[8.67345715 -40.21773529]
[22.63519287 -31.50544548]
[28.80401039 -16.07103920]
[24.61133385 0.18294501]
[34.35305405 11.58903408]
[44.09477615 22.99512482]
[53.83649445 34.40121460]
[67.98568726 39.05413055]
[71.06468964 54.57284164]
[80.80641174 65.97892761]
[90.54813385 77.38501740]
[100.28985596 88.79110718]
[110.25363922 100.00373077]
[120.43565369 111.01856995]
[134.02635193 110.01377106]
[145.50224304 116.99310303]
[150.70713806 129.16206360]
[147.91181946 141.89804077]
[157.65354919 153.30412292]
[167.39526367 164.71022034]
[178.41009521 174.89222717]
[190.54536438 183.70899963]
[202.68061829 192.52578735]
[214.81587219 201.34255981]
[226.95112610 210.15934753]
[239.08638000 218.97612000]
[253.42495728 213.28326416]
[268.56072998 216.26855469]
[279.66390991 226.97943115]
[283.19152832 241.99806213]
[278.01794434 256.53207397]
[265.79400635 265.94369507]
[250.42034912 267.22976685]
[236.80262756 259.97982788]
[229.28622437 246.50737000]
[230.26959229 231.11137390]
[218.13433838 222.29460144]
[205.99908447 213.47781372]
[193.86383057 204.66104126]
[181.72857666 195.84426880]
[169.59332275 187.02748108]
[169.10165405 202.01942444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 57]
[6 56]
[7 55]
[10 51]
[11 50]
[13 49]
[14 48]
[15 47]
[16 46]
[18 44]
[19 43]
[20 42]
[21 41]
[26 37]
[27 36]
[28 35]
[29 34]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
