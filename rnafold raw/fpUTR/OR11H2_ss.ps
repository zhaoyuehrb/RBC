%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUUCAUGUUCAUUAUCUUCUCUUCAUUCUUAAAAAAGGAACACAUUUUAUAAAAGAGUCCUGACUGAUA\
) } def
/len { sequence length } bind def

/coor [
[117.43708038 199.06938171]
[127.70685577 187.77803040]
[122.04123688 173.88916016]
[116.37561798 160.00028992]
[110.70999908 146.11141968]
[105.04438019 132.22254944]
[81.75223541 127.03252411]
[68.22882843 107.37095642]
[71.71375275 83.76342773]
[60.77038574 73.50463104]
[49.82702255 63.24584198]
[38.88365936 52.98704910]
[27.94029617 42.72826004]
[15.52253437 51.24959946]
[1.56308603 56.90184784]
[-13.28513908 59.42063141]
[-28.32766342 58.68814850]
[-42.86091995 54.73865128]
[-56.20516205 47.75687408]
[-67.73625946 38.06935883]
[-76.91487885 26.12921333]
[-83.31171417 12.49489880]
[-86.62757874 -2.19588423]
[-86.70738220 -17.25601959]
[-83.54740143 -31.98111916]
[-77.29541779 -45.68246460]
[-68.24385834 -57.71921539]
[-56.81608200 -67.52838898]
[-43.54658127 -74.65119934]
[-29.05599976 -78.75450134]
[-14.02208233 -79.64636230]
[0.85200340 -77.28508759]
[14.87057018 -71.78109741]
[27.37794495 -63.39184189]
[37.78913498 -52.50968933]
[45.61718750 -39.64362335]
[50.49597549 -25.39541435]
[52.19730377 -10.43147278]
[50.64160156 4.54830933]
[45.90163040 18.84329987]
[38.19908524 31.78489494]
[49.14245224 42.04368591]
[60.08581543 52.30247879]
[71.02917480 62.56126785]
[81.97254181 72.82006073]
[88.92139435 69.32423401]
[96.50041199 67.57329559]
[104.27850342 67.66684723]
[111.81321716 69.59957123]
[118.67597961 73.26152039]
[124.47640991 78.44440460]
[128.88458252 84.85341644]
[131.64974976 92.12398529]
[132.61462402 99.84255981]
[131.72431946 107.57009125]
[129.02946472 114.86701965]
[124.68338013 121.31828308]
[118.93325043 126.55693054]
[124.59886932 140.44580078]
[130.26448059 154.33467102]
[135.93009949 168.22354126]
[141.59573364 182.11241150]
[156.83308411 182.99876404]
[170.17272949 190.41607666]
[178.96606445 202.89166260]
[181.46716309 217.94845581]
[177.17942810 232.59695435]
[166.95420837 243.92864990]
[152.82170105 249.69364929]
[137.58795166 248.74729919]
[124.27761841 241.27751160]
[115.53348541 228.76741028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
