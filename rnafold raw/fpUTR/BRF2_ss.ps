%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCGCGCUGGCCGGAAGACGGGGGUGCAACCCUUUGAAGUGUCCCCUCCUACUUCUUGCUGCCUCACGGUUGCUGUUGCAGACCCAGGAGUCUCUGAAGGCUUCCGCGGCUUUGGGGCCGGUUGUGAG\
) } def
/len { sequence length } bind def

/coor [
[101.52651978 392.11242676]
[87.45706177 384.40335083]
[84.85417938 368.57284546]
[95.71457672 356.76473999]
[96.43374634 341.78198242]
[97.15292358 326.79925537]
[97.87209320 311.81649780]
[98.59126282 296.83374023]
[99.13073730 281.84344482]
[99.49042511 266.84774780]
[99.85011292 251.85208130]
[100.20980835 236.85638428]
[100.56949615 221.86070251]
[100.92918396 206.86502075]
[91.68644714 191.99726868]
[101.27339172 176.32957458]
[101.27339172 161.32957458]
[101.27339172 146.32957458]
[101.27339172 131.32957458]
[80.98210907 121.17231750]
[74.49279022 101.69838715]
[82.75033569 85.29357910]
[75.19847107 72.33328247]
[67.64661407 59.37298203]
[52.62844467 55.23868179]
[45.15440750 41.98751450]
[49.18838120 27.69546700]
[41.63652039 14.73516655]
[34.08465958 1.77486598]
[26.53279686 -11.18543434]
[18.98093414 -24.14573479]
[11.42907333 -37.10603333]
[1.41967046 -36.66336823]
[-8.00268555 -39.87291718]
[-15.56092167 -46.24954987]
[-20.24893188 -54.88238525]
[-21.46538544 -64.56468964]
[-19.09050179 -73.96247864]
[-30.49074936 -83.71103668]
[-41.89099503 -93.45959473]
[-53.29124069 -103.20815277]
[-64.69149017 -112.95671082]
[-76.09173584 -122.70526886]
[-91.15031433 -118.96109772]
[-105.52106476 -124.81440735]
[-113.67813873 -138.01446533]
[-112.48497009 -153.48561096]
[-102.40036011 -165.27883911]
[-87.30205536 -168.85943604]
[-72.99564362 -162.85057068]
[-64.98225403 -149.56278992]
[-66.34317780 -134.10551453]
[-54.94293213 -124.35695648]
[-43.54268646 -114.60839844]
[-32.14243698 -104.85984039]
[-20.74219131 -95.11128235]
[-9.34194469 -85.36272430]
[-6.48806190 -86.95556641]
[-3.45742130 -88.17908478]
[-0.29758519 -89.01408386]
[1.13910651 -103.94512177]
[-5.24084949 -118.42292023]
[3.67989039 -130.35060120]
[5.11658192 -145.28164673]
[6.55327368 -160.21269226]
[-0.73698425 -174.90228271]
[8.56357002 -188.40901184]
[24.88732338 -186.83830261]
[31.44179916 -171.80598450]
[21.48431206 -158.77598572]
[20.04762077 -143.84495544]
[18.61092949 -128.91390991]
[25.09364700 -115.50408173]
[16.07014465 -102.50843048]
[14.63345337 -87.57739258]
[30.80695343 -68.97183228]
[24.38937378 -44.65789795]
[31.94123459 -31.69759560]
[39.49309540 -18.73729515]
[47.04496002 -5.77699566]
[54.59682083 7.18330479]
[62.14868164 20.14360428]
[76.57168579 23.68092346]
[84.41497040 36.71693039]
[80.60691071 51.82111740]
[88.15877533 64.78141785]
[95.71063232 77.74172211]
[117.24668121 79.21105957]
[131.35510254 100.14580536]
[146.34539795 99.60633850]
[161.33569336 99.06687164]
[176.32598877 98.52739716]
[191.31628418 97.98793030]
[206.30657959 97.44845581]
[221.29687500 96.90898895]
[234.90008545 87.75012207]
[249.51268005 95.19353485]
[250.10246277 111.58206940]
[236.06272888 120.05661774]
[221.83634949 111.89928436]
[206.84605408 112.43875122]
[191.85575867 112.97822571]
[176.86546326 113.51769257]
[161.87516785 114.05716705]
[146.88487244 114.59663391]
[131.89457703 115.13610840]
[146.38325500 119.01919556]
[153.28857422 132.33522034]
[148.11480713 146.41471863]
[134.23036194 152.09115601]
[120.67475891 145.66888428]
[116.27339172 131.32957458]
[116.27339172 146.32957458]
[116.27339172 161.32957458]
[116.27339172 176.32957458]
[124.85814667 186.04257202]
[124.49322510 198.59812927]
[115.92487335 207.22470093]
[115.56518555 222.22039795]
[115.20549011 237.21607971]
[114.84580231 252.21176147]
[114.48611450 267.20745850]
[114.12642670 282.20312500]
[117.07173920 290.95718384]
[113.57401276 297.55291748]
[112.85484314 312.53567505]
[112.13567352 327.51840210]
[111.41649628 342.50115967]
[110.69732666 357.48391724]
[120.37681580 370.27792358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 129]
[5 128]
[6 127]
[7 126]
[8 125]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[16 115]
[17 114]
[18 113]
[19 112]
[22 87]
[23 86]
[24 85]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[60 75]
[61 74]
[63 72]
[64 71]
[65 70]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
