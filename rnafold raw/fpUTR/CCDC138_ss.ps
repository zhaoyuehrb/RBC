%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUGCGGCCGCGUAGCGCCGCGGGUUUGAUGAACGCGGUUCCCGGGGAGACUGGUACGGUUGCUGUGUGCU\
) } def
/len { sequence length } bind def

/coor [
[125.66319275 339.55447388]
[123.75792694 324.67596436]
[121.85266113 309.79745483]
[119.94739532 294.91894531]
[110.65617371 283.27755737]
[116.57793427 268.60638428]
[114.67266846 253.72785950]
[112.76740265 238.84936523]
[110.86212921 223.97085571]
[108.95686340 209.09234619]
[107.05159760 194.21383667]
[105.14633179 179.33532715]
[91.47408295 169.78025818]
[88.74581909 152.98649597]
[99.08783722 139.05873108]
[96.55282593 124.27449799]
[94.01781464 109.49025726]
[91.16957092 94.76315308]
[80.69852448 82.90280914]
[85.58078766 68.83111572]
[82.42060089 54.16778183]
[71.94954681 42.30744171]
[76.83181763 28.23574066]
[73.67162323 13.57241249]
[70.51143646 -1.09091580]
[67.35124969 -15.75424480]
[54.68258667 -28.92240143]
[60.34120941 -45.39625931]
[56.56153870 -59.91225433]
[52.78186798 -74.42824554]
[38.57984161 -80.97320557]
[31.95426559 -95.13780212]
[36.03353500 -110.23394775]
[48.89154434 -119.13370514]
[64.45713043 -117.63487244]
[75.38070679 -106.44516754]
[76.50448608 -90.84801483]
[67.29785919 -78.20791626]
[71.07752991 -63.69192505]
[74.85720062 -49.17593002]
[85.25885773 -42.64041901]
[88.40020752 -30.34607697]
[82.01457977 -18.91443253]
[85.17476654 -4.25110483]
[88.33495331 10.41222382]
[91.49514771 25.07555199]
[101.74015808 35.88707352]
[97.08393097 51.00759506]
[100.24411774 65.67092133]
[110.48912811 76.48244476]
[105.83290100 91.60296631]
[110.60486603 98.42460632]
[108.80204773 106.95524597]
[111.33706665 121.73947906]
[113.87207794 136.52372742]
[125.83121490 143.10083008]
[131.64523315 155.23150635]
[129.34887695 168.28662109]
[120.02483368 177.43006897]
[121.93010712 192.30857849]
[123.83537292 207.18707275]
[125.74063873 222.06558228]
[127.64590454 236.94409180]
[129.55117798 251.82260132]
[131.45643616 266.70111084]
[140.88394165 279.40673828]
[134.82589722 293.01370239]
[136.73117065 307.89218140]
[138.63642883 322.77069092]
[140.54170227 337.64920044]
[150.90380859 350.35980225]
[144.82504272 365.59069824]
[128.55871582 367.67367554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[15 55]
[16 54]
[17 53]
[18 51]
[20 49]
[21 48]
[23 46]
[24 45]
[25 44]
[26 43]
[28 40]
[29 39]
[30 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
