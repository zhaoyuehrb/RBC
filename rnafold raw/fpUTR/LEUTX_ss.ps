%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCACACGGUUUUCAGCCUCAUGCCUCCGUGGAACCUGCCUGUCAGGCGGGCACCUGGAAUCUCAAGCAACUUUCUCAAGAAGGGCCAAGGCGUUAUCGUCGGCCACGCACAAGAUUUCUCUCCAAACAACUCACAGCAUUGAGAGAAUUGCUUGAAAAGACC\
) } def
/len { sequence length } bind def

/coor [
[107.42536926 140.42985535]
[99.71222687 141.10507202]
[92.00929260 140.32192993]
[84.58985138 138.10823059]
[76.52371216 150.75486755]
[68.45756531 163.40148926]
[73.97334290 177.78489685]
[70.00843048 192.48635864]
[58.28569412 201.92253113]
[43.43220139 202.63792419]
[35.36605835 215.28454590]
[27.29991531 227.93118286]
[19.23377037 240.57781982]
[15.81411266 257.18331909]
[-1.08908355 258.49414062]
[-7.02796555 242.61441040]
[6.58713770 232.51167297]
[14.65328121 219.86503601]
[22.71942520 207.21841431]
[30.78556824 194.57177734]
[25.17104530 180.80169678]
[28.78424072 166.19317627]
[40.44294357 156.39889526]
[55.81093216 155.33535767]
[63.87707901 142.68872070]
[71.94322205 130.04208374]
[62.89267731 117.68492126]
[58.99438858 102.87224579]
[44.09099197 101.17263031]
[29.18759155 99.47301483]
[14.28419304 97.77339935]
[5.35823631 99.91632843]
[-0.88418627 95.89801025]
[-15.75275326 93.91666412]
[-28.22738457 103.24518585]
[-43.27799988 101.02400970]
[-52.09444427 89.07386780]
[-66.96301270 87.09252167]
[-81.83157349 85.11117554]
[-96.70014191 83.12983704]
[-111.56871033 81.14849091]
[-126.43727875 79.16714478]
[-141.30584717 77.18579865]
[-157.80485535 81.08697510]
[-166.12094116 66.31270599]
[-154.22618103 54.23168564]
[-139.32449341 62.31723404]
[-124.45593262 64.29857635]
[-109.58736420 66.27992249]
[-94.71879578 68.26126862]
[-79.85023499 70.24261475]
[-64.98166656 72.22395325]
[-50.11309814 74.20529938]
[-38.47499084 64.98087311]
[-23.36792374 66.77843475]
[-13.77140808 79.04809570]
[1.09715843 81.02944183]
[15.98380756 82.87000275]
[30.88720703 84.56961823]
[45.79060745 86.26923370]
[60.69400406 87.96884918]
[72.54145813 69.41015625]
[92.26692200 59.62786484]
[114.21105194 61.42856216]
[132.07794189 74.29561615]
[145.29838562 67.20902252]
[158.51884460 60.12243271]
[171.73928833 53.03583908]
[184.95973206 45.94924545]
[198.18017578 38.86265182]
[211.40061951 31.77605820]
[224.62106323 24.68946457]
[233.12863159 11.35034657]
[248.00137329 12.15685081]
[261.22183228 5.07025719]
[274.44226074 -2.01633620]
[287.66271973 -9.10293007]
[300.88314819 -16.18952370]
[314.10360718 -23.27611732]
[327.32406616 -30.36271095]
[340.54449463 -37.44930267]
[336.46994019 -61.79518890]
[344.12588501 -85.93508148]
[362.38644409 -104.39440155]
[387.65817261 -112.71320343]
[414.57876587 -108.51374817]
[421.91427612 -121.59771729]
[429.24978638 -134.68168640]
[436.58529663 -147.76565552]
[436.88681030 -154.44168091]
[440.06237793 -159.22161865]
[444.45407104 -161.19833374]
[452.27941895 -173.99534607]
[460.10479736 -186.79235840]
[467.93017578 -199.58937073]
[467.80279541 -215.98802185]
[482.07595825 -224.06324768]
[496.06661987 -215.50796509]
[495.38241577 -199.12309265]
[480.72720337 -191.76399231]
[472.90182495 -178.96697998]
[465.07644653 -166.16996765]
[457.25106812 -153.37295532]
[449.66928101 -140.43014526]
[442.33377075 -127.34617615]
[434.99826050 -114.26220703]
[427.66275024 -101.17823792]
[432.04812622 -95.09396362]
[444.21667480 -103.86475372]
[453.07934570 -115.96652985]
[467.32751465 -111.27726746]
[467.27069092 -96.27737427]
[452.98745728 -91.69621277]
[440.81890869 -82.92543030]
[445.20431519 -76.84115601]
[459.93649292 -79.66303253]
[474.66867065 -82.48490143]
[486.71398926 -93.61332703]
[502.29171753 -88.48825073]
[505.37680054 -72.38191223]
[492.79559326 -61.86312485]
[477.49053955 -67.75272369]
[462.75836182 -64.93085480]
[448.02618408 -62.10898209]
[448.03057861 -53.54871750]
[446.79757690 -45.13375473]
[444.36938477 -37.04081726]
[440.81307983 -29.43749619]
[436.21890259 -22.47877884]
[430.69812012 -16.30389214]
[424.38018799 -11.03352547]
[417.40991211 -6.76749516]
[409.94406128 -3.58287382]
[402.14791870 -1.53264403]
[394.19149780 -0.64488131]
[386.24597168 -0.92248511]
[378.47998047 -2.34345484]
[371.05599976 -4.86169815]
[364.12689209 -8.40834522]
[357.83288574 -12.89353848]
[352.29873657 -18.20864677]
[347.63110352 -24.22885704]
[334.41064453 -17.14226532]
[321.19021606 -10.05567074]
[307.96975708 -2.96907735]
[294.74929810 4.11751604]
[281.52886963 11.20411015]
[268.30841064 18.29070282]
[255.08796692 25.37729645]
[247.52603149 38.20953369]
[231.70765686 37.90991211]
[218.48721313 44.99650574]
[205.26676941 52.08309937]
[192.04632568 59.16969299]
[178.82588196 66.25628662]
[165.60543823 73.34288025]
[152.38497925 80.42947388]
[139.16453552 87.51606750]
[140.81077576 95.08167267]
[141.00910950 102.82176971]
[139.75250244 110.46176147]
[137.08552551 117.73058319]
[133.10281372 124.37034607]
[127.94565582 130.14547729]
[121.79702759 134.85110474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[10 20]
[11 19]
[12 18]
[13 17]
[28 61]
[29 60]
[30 59]
[31 58]
[33 57]
[34 56]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[65 158]
[66 157]
[67 156]
[68 155]
[69 154]
[70 153]
[71 152]
[72 151]
[74 149]
[75 148]
[76 147]
[77 146]
[78 145]
[79 144]
[80 143]
[81 142]
[86 107]
[87 106]
[88 105]
[89 104]
[92 103]
[93 102]
[94 101]
[95 100]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
