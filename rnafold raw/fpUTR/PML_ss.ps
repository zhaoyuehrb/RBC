%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCAGAGGCGGGCCCUGAGCCGGCACCUCCCCUUUCGGACAGCUCAAGGGACUCAGCCAACUGGCUCACGCCUCCCCUUCAGCUUCUCUUCACGCACUCCAAGAUCUAAACCGAGAAUCGAAACUAAGCUGGGGUCC\
) } def
/len { sequence length } bind def

/coor [
[207.44868469 165.97459412]
[200.38055420 165.28233337]
[193.65423584 162.94660950]
[187.64735413 159.08940125]
[182.69921875 153.91841125]
[179.09176636 147.71577454]
[177.03341675 140.82278442]
[176.64712524 133.62103271]
[162.42315674 128.85881042]
[148.19917297 124.09660339]
[133.97520447 119.33439636]
[119.75123596 114.57218170]
[105.52726746 109.80997467]
[109.33092499 124.31970215]
[100.54238129 136.47541809]
[85.57160950 137.41130066]
[75.33760071 126.44476318]
[77.30458069 111.57428741]
[90.03867340 103.64564514]
[76.43231201 97.33162689]
[62.82594681 91.01760101]
[49.21958160 84.70358276]
[35.61322021 78.38955688]
[22.00685501 72.07553864]
[8.13272858 66.37390137]
[-5.98161459 61.29598236]
[-20.09595871 56.21805573]
[-31.01157951 66.82987213]
[-45.39355850 71.63045502]
[-60.37236023 69.71846008]
[-72.98380280 61.52623749]
[-80.75566101 48.72359467]
[-82.19220734 33.87765884]
[-96.30654907 28.79973412]
[-110.42089081 23.72181129]
[-124.53524017 18.64388657]
[-138.64958191 13.56596184]
[-152.81347656 20.04838181]
[-167.05509949 14.69758034]
[-173.14779663 1.15452039]
[-188.21655273 6.66016293]
[-201.84072876 -1.81105852]
[-203.56901550 -17.76074791]
[-192.07562256 -28.95366859]
[-176.17729187 -26.80356979]
[-168.06988525 -12.95982265]
[-154.74562073 -19.51722908]
[-140.35932922 -14.56855583]
[-133.57165527 -0.54838121]
[-119.45731354 4.52954292]
[-105.34297180 9.60746670]
[-91.22863007 14.68539143]
[-77.11428070 19.76331520]
[-66.54894257 9.23530579]
[-52.40209961 4.31836271]
[-37.46212769 6.03832865]
[-24.69841385 14.10726738]
[-16.67118454 26.97002602]
[-15.01803398 42.10371399]
[-0.90369040 47.18163681]
[13.21065331 52.25956345]
[15.85407352 51.11563110]
[19.12732887 50.99353409]
[22.62693596 52.14537048]
[25.86349869 54.66639709]
[28.32087708 58.46917343]
[41.92723846 64.78319550]
[55.53360367 71.09721375]
[69.13996887 77.41123962]
[82.74633026 83.72525787]
[96.35269165 90.03928375]
[110.28947449 95.58599854]
[124.51345062 100.34821320]
[138.73742676 105.11042023]
[152.96139526 109.87263489]
[167.18536377 114.63484192]
[181.40933228 119.39705658]
[201.51081848 106.17297363]
[224.69451904 111.62152863]
[236.55375671 131.99003601]
[251.44126892 133.82360840]
[266.32876587 135.65716553]
[281.21627808 137.49073792]
[296.10379028 139.32431030]
[310.99130249 141.15788269]
[325.87881470 142.99143982]
[340.76632690 144.82501221]
[355.65383911 146.65858459]
[366.25976562 135.48626709]
[381.23559570 132.73348999]
[394.80032349 139.24978638]
[401.84265137 152.34725952]
[416.73016357 154.18083191]
[431.61767578 156.01440430]
[439.47952271 144.39190674]
[451.53347778 137.33952332]
[465.38516235 136.19174194]
[478.31152344 141.11669922]
[487.79635620 151.09439087]
[492.01983643 164.12730408]
[506.86279297 166.29209900]
[521.70574951 168.45687866]
[529.80718994 155.56166077]
[542.45678711 147.08183289]
[557.46295166 144.48657227]
[572.22570801 148.22552490]
[584.18743896 157.65089417]
[591.27557373 171.12968445]
[592.26214600 186.32661438]
[586.97619629 200.60871887]
[576.33349609 211.50154114]
[562.17803955 217.11782837]
[546.96228027 216.48451233]
[533.32250977 209.71134949]
[523.62182617 197.97181702]
[519.54095459 183.29985046]
[504.69799805 181.13505554]
[489.85504150 178.97026062]
[480.18664551 191.87118530]
[465.25463867 198.19371033]
[449.07614136 196.13467407]
[436.05523682 186.15965271]
[429.78408813 170.90191650]
[414.89657593 169.06834412]
[400.00906372 167.23477173]
[389.99920654 178.23208618]
[375.25872803 181.26226807]
[361.39837646 174.95797729]
[353.82028198 161.54609680]
[338.93276978 159.71252441]
[324.04525757 157.87895203]
[309.15774536 156.04539490]
[294.27023315 154.21182251]
[279.38272095 152.37825012]
[264.49520874 150.54467773]
[249.60769653 148.71112061]
[234.72018433 146.87754822]
[231.44926453 153.07781982]
[226.80401611 158.35244751]
[221.03678894 162.40185547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 61]
[26 60]
[27 59]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[40 46]
[80 137]
[81 136]
[82 135]
[83 134]
[84 133]
[85 132]
[86 131]
[87 130]
[88 129]
[92 125]
[93 124]
[94 123]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
