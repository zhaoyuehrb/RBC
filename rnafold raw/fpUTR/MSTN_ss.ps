%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCACUGGUGUGGCAAGUUGUCUCUCAGACUGUACAUGCAUUAAAAUUUUGCUUGGCAUUACUCAAAAGCAAAAGAAAAGUAAAAGGAAGAAACAAGAACAAGAAAAAAGAUUAUAUUGAUUUUAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[102.43966675 179.27836609]
[105.39203644 164.57037354]
[105.27713013 149.57081604]
[105.16221619 134.57125854]
[105.04730225 119.57169342]
[97.58900452 120.36148834]
[90.49868011 133.57992554]
[83.40834808 146.79837036]
[84.46144104 163.16366577]
[70.66701508 172.03193665]
[56.21560287 164.28024292]
[55.97357178 147.88287354]
[70.18990326 139.70803833]
[77.28023529 126.48960114]
[84.37055969 113.27115631]
[75.35582733 101.28222656]
[60.68850327 104.42382812]
[46.02117920 107.56542969]
[34.14757919 118.02144623]
[20.08207703 113.12134552]
[5.41475487 116.26295471]
[-8.80974770 130.45930481]
[-26.96094131 123.95523834]
[-41.46488571 127.78087616]
[-55.96883392 131.60652161]
[-70.47277832 135.43215942]
[-84.24603271 145.31820679]
[-97.55854034 134.81994629]
[-91.15582275 119.12148285]
[-74.29842377 120.92821503]
[-59.79447556 117.10256958]
[-45.29052734 113.27693176]
[-30.78658295 109.45128632]
[-26.39509773 100.09861755]
[-17.36572456 94.63614655]
[-6.60212231 95.10630798]
[2.27315068 101.59562683]
[16.94047165 98.45402527]
[27.76496887 88.22272491]
[42.87957764 92.89810944]
[57.54689789 89.75650787]
[72.21421814 86.61490631]
[57.35479736 88.66370392]
[44.35046005 81.18792725]
[38.64331055 67.31607056]
[42.62170029 52.85327530]
[54.62073517 43.85198975]
[69.61901855 44.07910538]
[81.34000397 53.43957901]
[84.87854004 68.01745605]
[82.42787933 53.21900558]
[79.97721863 38.42054749]
[77.52655792 23.62209511]
[75.07589722 8.82363987]
[72.62523651 -5.97481489]
[70.17457581 -20.77326965]
[67.72391510 -35.57172394]
[53.06075668 -39.80899429]
[41.69391632 -49.99514389]
[35.88028717 -64.10771179]
[36.77417374 -79.34462738]
[44.19809341 -92.68060303]
[56.67802429 -101.46775818]
[71.73606110 -103.96141052]
[86.38242340 -99.66642761]
[97.70906067 -89.43559265]
[103.46707153 -75.30024719]
[102.51318359 -60.06696320]
[95.03681183 -46.76033020]
[82.52237701 -38.02238464]
[84.97303009 -23.22393036]
[87.42369080 -8.42547512]
[89.87435150 6.37297916]
[92.32501221 21.17143440]
[94.77567291 35.96989059]
[97.22633362 50.76834488]
[99.67699432 65.56679535]
[104.62109375 51.40502167]
[102.69654083 36.52899933]
[103.28747559 21.54064369]
[106.37723541 6.86231279]
[111.87875366 -7.09237242]
[119.63701630 -19.93018341]
[129.43339539 -31.28936577]
[140.99183655 -40.84982681]
[153.98663330 -48.34216309]
[168.05162048 -53.55525208]
[182.79043579 -56.34218979]
[197.78778076 -56.62444687]
[212.62104797 -54.39406586]
[226.87222290 -49.71389771]
[240.13973999 -42.71582413]
[252.04972839 -33.59704590]
[262.26657104 -22.61452293]
[270.50241089 -10.07772446]
[276.52511597 3.66007090]
[280.16497803 18.21174812]
[281.31945801 33.16725540]
[279.95602417 48.10515976]
[276.11306763 62.60453033]
[269.89889526 76.25678253]
[261.48861694 88.67722321]
[251.11923218 99.51584625]
[239.08293152 108.46723938]
[225.71888733 115.27914429]
[211.40367126 119.75962830]
[196.54069519 121.78243256]
[181.54875183 121.29054260]
[166.85032654 118.29783630]
[152.86114502 112.88938141]
[138.86247253 107.50077057]
[148.56402588 118.94104767]
[158.26557922 130.38131714]
[167.96713257 141.82159424]
[177.66867065 153.26187134]
[187.37022400 164.70214844]
[197.07177734 176.14244080]
[211.92750549 184.31211853]
[208.18957520 200.84886169]
[191.26431274 201.83483887]
[185.63150024 185.84397888]
[175.92994690 174.40370178]
[166.22839355 162.96342468]
[156.52685547 151.52314758]
[146.82530212 140.08287048]
[137.12374878 128.64259338]
[127.42220306 117.20231628]
[119.96390533 117.99211121]
[122.99304962 132.68305969]
[126.02220154 147.37402344]
[129.05134583 162.06498718]
[135.01878357 175.82687378]
[127.46103668 188.78375244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[16 42]
[17 41]
[18 40]
[20 38]
[21 37]
[23 33]
[24 32]
[25 31]
[26 30]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
