%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCACAGCCGAGCAUCCCACAUUCAACAGGAGGAACCCGCGGGAGAGGAGCCCCACUCCCCCAGCGCCGCAGCCACCGCAGCCACCGCAGCCCGUGCGCCCCGCGCCCUCGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[101.52366638 269.23376465]
[87.02800751 274.01275635]
[71.89546967 272.02050781]
[59.13062668 263.65261841]
[51.26795197 250.57052612]
[49.86857986 235.37170410]
[55.21036148 221.07386780]
[66.23268127 210.51586914]
[80.74704742 205.79400635]
[82.70494080 190.92233276]
[84.46800232 176.02630615]
[86.03592682 161.10848999]
[87.60385132 146.19065857]
[89.17178345 131.27282715]
[77.06271362 128.04193115]
[66.09693146 119.99800110]
[58.19635391 107.63550568]
[43.44753265 110.36904144]
[28.69870758 113.10256958]
[19.73738289 125.84354401]
[4.74103785 128.40563965]
[-7.35030794 119.78385925]
[-13.90878201 133.84678650]
[-27.49697113 141.33950806]
[-42.88994217 139.38088989]
[-54.16877747 128.72409058]
[-56.99654007 113.46685028]
[-50.28589630 99.47589874]
[-36.61722183 92.13102722]
[-21.24640846 94.25650787]
[-10.08384037 105.03504181]
[-1.88536406 92.65277100]
[13.03310013 89.67047882]
[25.96517372 98.35375214]
[40.71399689 95.62021637]
[55.46282196 92.88668060]
[59.04151154 86.29555511]
[44.04665375 86.68830109]
[36.20901871 73.89879608]
[43.36615753 60.71640778]
[58.36100769 60.32338333]
[66.19889069 73.11329651]
[69.77758789 66.52217102]
[64.03733063 52.66397476]
[58.29708099 38.80578232]
[52.55683136 24.94758987]
[46.81657791 11.08939743]
[34.38714600 1.30063748]
[36.66496658 -13.41876507]
[30.92471313 -27.27695847]
[17.59208679 -36.82542038]
[19.46405029 -53.11737442]
[34.61488724 -59.39305496]
[47.45871353 -49.19658279]
[44.78290558 -33.01720810]
[50.52315903 -19.15901756]
[62.54200745 -10.36148739]
[60.67477036 5.34914589]
[66.41502380 19.20733833]
[72.15527344 33.06553268]
[77.89552307 46.92372513]
[83.63578033 60.78191757]
[99.99208069 59.85496521]
[114.54040527 65.11410522]
[125.17832947 75.05259705]
[130.66326904 87.54992676]
[145.47859192 85.20340729]
[160.29391479 82.85689545]
[175.10923767 80.51037598]
[183.21263123 76.02711487]
[190.34263611 78.30164337]
[199.95848083 66.04712677]
[215.06837463 64.27339935]
[226.69190979 73.51616669]
[241.56358337 71.55827332]
[256.40835571 69.40588379]
[271.22369385 67.05936432]
[286.03900146 64.71285248]
[299.99887085 52.79246902]
[316.13049316 59.56650162]
[330.87930298 56.83296967]
[343.03839111 46.71035004]
[356.96255493 51.99872589]
[371.71136475 49.26519394]
[383.82318115 38.20915222]
[399.36990356 43.42749786]
[402.35842896 59.55204010]
[389.71438599 69.99523163]
[374.44491577 64.01401520]
[359.69607544 66.74755096]
[348.59194946 76.67465210]
[333.61285400 71.58179474]
[318.86401367 74.31532288]
[311.69335938 84.15306854]
[299.33685303 86.49343872]
[288.38552856 79.52817535]
[273.57019043 81.87469482]
[258.75488281 84.22120667]
[252.56449890 88.42710114]
[243.52148438 86.42994690]
[228.64981079 88.38784027]
[219.81452942 100.32406616]
[204.76043701 102.52149963]
[192.30052185 93.17330933]
[177.45574951 95.32569885]
[162.64042664 97.67221832]
[147.82510376 100.01873779]
[133.00978088 102.36524963]
[124.00583649 122.78068542]
[104.08960724 132.84075928]
[102.52168274 147.75857544]
[100.95375824 162.67640686]
[99.38582611 177.59423828]
[101.61901855 186.58187866]
[97.57661438 192.88023376]
[95.61872101 207.75190735]
[108.41641235 216.06945801]
[116.33055115 229.12048340]
[117.78975677 244.31369019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 116]
[10 115]
[11 113]
[12 112]
[13 111]
[14 110]
[17 36]
[18 35]
[19 34]
[22 31]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[49 56]
[50 55]
[66 108]
[67 107]
[68 106]
[69 105]
[71 104]
[74 101]
[75 100]
[76 98]
[77 97]
[78 96]
[80 93]
[81 92]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
