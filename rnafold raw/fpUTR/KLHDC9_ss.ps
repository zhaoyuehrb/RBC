%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGGGACUUGAGGUGGGAACCCCGGCUGGCGUCCGGUAGGGGGAGGUUCCCGGGGAAGCCCGCGGAAGGCGAGGUGCCUGGCCUGCCAUGUAGGGGCUCGUUCCAAGCCGCAGACCCCACCGCCCUCCCUCUCCCCGGGGCCC\
) } def
/len { sequence length } bind def

/coor [
[-62.78556061 330.80343628]
[-71.80992126 342.78512573]
[-80.83428192 354.76681519]
[-89.85864258 366.74850464]
[-98.88300323 378.73019409]
[-107.90736389 390.71188354]
[-116.93172455 402.69357300]
[-118.40202332 422.75045776]
[-136.40762329 429.68228149]
[-144.90814209 442.04110718]
[-153.40867615 454.39996338]
[-151.91635132 470.37344360]
[-163.57394409 481.39526367]
[-179.43873596 479.01037598]
[-187.34063721 465.04830933]
[-181.21797180 450.21954346]
[-165.76751709 445.89944458]
[-157.26699829 433.54058838]
[-148.76646423 421.18173218]
[-151.53315735 411.25335693]
[-148.27291870 401.24377441]
[-139.84405518 394.57546997]
[-128.91342163 393.66921997]
[-119.88905334 381.68753052]
[-110.86469269 369.70584106]
[-101.84033203 357.72415161]
[-92.81597137 345.74246216]
[-83.79161072 333.76077271]
[-74.76725006 321.77908325]
[-66.00277710 309.60598755]
[-57.50225067 297.24713135]
[-49.00172424 284.88830566]
[-47.79388809 277.54156494]
[-40.18296814 272.35766602]
[-31.41849518 260.18460083]
[-22.65402222 248.01150513]
[-13.88954926 235.83842468]
[-5.12507677 223.66532898]
[-4.34473753 206.16464233]
[12.43984222 198.67300415]
[20.94036865 186.31416321]
[29.44089508 173.95532227]
[37.94142151 161.59646606]
[46.44194794 149.23762512]
[54.94247437 136.87878418]
[63.44300079 124.51993561]
[71.94352722 112.16108704]
[80.44405365 99.80224609]
[80.44405365 84.80224609]
[71.94352722 72.44339752]
[63.44300079 60.08455658]
[54.94247437 47.72570801]
[46.30947495 35.45903397]
[37.54500198 23.28594780]
[28.78052902 11.11286259]
[20.01605797 -1.06022346]
[4.84947157 -7.29774761]
[2.93650484 -23.58493805]
[16.24505424 -33.16693115]
[31.08442307 -26.18659210]
[32.18914413 -9.82469559]
[40.95361710 2.34838986]
[49.71809006 14.52147579]
[58.48255920 26.69456100]
[64.99049377 30.31120872]
[67.30132294 39.22518158]
[75.80184937 51.58403015]
[84.30236816 63.94287491]
[92.80289459 76.30171967]
[107.60798645 73.89146423]
[111.74944305 59.47451782]
[115.89089966 45.05757141]
[115.25495911 35.87092972]
[120.27966309 30.37677765]
[124.73035431 16.05227661]
[129.18104553 1.72777534]
[133.63174438 -12.59672642]
[127.46707916 -27.40808868]
[135.32937622 -41.39250183]
[151.18736267 -43.82231522]
[162.87612915 -32.83359146]
[161.42907715 -16.85593224]
[147.95623779 -8.14603329]
[143.50555420 6.17846775]
[139.05485535 20.50296974]
[134.60417175 34.82746887]
[130.30784607 49.19902802]
[126.16638947 63.61597443]
[122.02493286 78.03292084]
[126.79067993 83.82409668]
[134.86077881 71.17998505]
[149.37983704 74.94788361]
[150.28295898 89.92066956]
[136.32215881 95.40644073]
[141.08790588 101.19761658]
[156.03237915 99.90814209]
[170.97685242 98.61867523]
[185.92132568 97.32920074]
[200.85105896 95.87902069]
[215.76432800 94.26830292]
[230.65940857 92.49723053]
[245.53456116 90.56600189]
[252.84460449 76.87867737]
[266.81842041 70.13243103]
[282.08282471 72.92133331]
[292.76831055 84.17300415]
[294.76608276 99.56093597]
[287.30801392 113.16815948]
[273.26181030 119.76241302]
[258.02859497 116.80808258]
[247.46578979 105.44116211]
[232.59062195 107.37238312]
[226.31697083 111.38172150]
[217.37504578 109.18157196]
[202.46177673 110.79228973]
[196.10331726 114.66571045]
[187.21080017 112.27367401]
[172.26632690 113.56314850]
[157.32185364 114.85261536]
[142.37738037 116.14208984]
[130.70539856 125.04005432]
[118.19069672 128.59945679]
[106.86870575 127.31748199]
[98.34446716 122.38001251]
[93.58335876 115.43380737]
[92.80289459 108.30277252]
[84.30236816 120.66161346]
[75.80184937 133.02046204]
[67.30132294 145.37930298]
[58.80079269 157.73815918]
[50.30026627 170.09700012]
[41.79973984 182.45584106]
[33.29921341 194.81468201]
[24.79868698 207.17353821]
[26.36899567 220.02342224]
[18.97514343 230.15626526]
[7.04800940 232.42980957]
[-1.71646345 244.60289001]
[-10.48093605 256.77597046]
[-19.24540901 268.94906616]
[-28.00988197 281.12216187]
[-36.64287949 293.38882446]
[-45.14340591 305.74768066]
[-53.64393234 318.10650635]
[-54.56038666 324.77270508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[9 19]
[10 18]
[11 17]
[30 144]
[31 143]
[32 142]
[34 141]
[35 140]
[36 139]
[37 138]
[38 137]
[40 134]
[41 133]
[42 132]
[43 131]
[44 130]
[45 129]
[46 128]
[47 127]
[48 126]
[49 69]
[50 68]
[51 67]
[52 66]
[53 64]
[54 63]
[55 62]
[56 61]
[70 89]
[71 88]
[72 87]
[74 86]
[75 85]
[76 84]
[77 83]
[95 120]
[96 119]
[97 118]
[98 117]
[99 115]
[100 114]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
