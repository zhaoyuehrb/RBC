%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGAGCGGCGCGGGGCCAAUCAGCGUGCGCCGUUCCGAAAGUUGCCUUUUAUGGCUCGAGCGGCCGCGGCGGCGCCCUAUAAAACCCAGCGGCGCGACGCGCCACCACCGCCGAGACCGCGUCCGCCCCGCGAGCACAGAGCCUCGCCUUUGCCGAUCCGCCGCCCGUCCACACCCGCCGCCAGCUCACC\
) } def
/len { sequence length } bind def

/coor [
[108.41068268 344.73529053]
[100.68094635 330.27212524]
[109.57013702 316.49118042]
[109.81429291 301.49319458]
[110.05844879 286.49517822]
[110.30260468 271.49716187]
[110.54676056 256.49914551]
[110.79090881 241.50112915]
[110.91299438 226.50163269]
[110.91299438 211.50163269]
[110.91299438 196.50163269]
[110.91299438 181.50163269]
[110.79090881 166.50212097]
[110.54676056 151.50410461]
[110.30260468 136.50610352]
[110.05844879 121.50808716]
[95.92631531 116.47988892]
[86.26373291 127.95310211]
[87.86223602 143.67634583]
[77.80992889 155.87168884]
[62.07066727 157.30387878]
[49.98227310 147.12319946]
[48.71657944 131.36967468]
[59.02449799 119.38958740]
[74.79051971 118.29051971]
[84.45310211 106.81730652]
[78.07083130 93.24282074]
[63.07133102 93.36490631]
[48.07182693 93.48698425]
[39.50083160 96.69007874]
[32.82766342 93.48698425]
[17.82816124 93.36490631]
[2.82865834 93.24282074]
[-12.17084503 93.12074280]
[-27.17034721 92.99866486]
[-42.16984940 92.87657928]
[-57.16935349 92.75450134]
[-65.79135132 95.81765747]
[-72.41149902 92.50637054]
[-87.40702820 92.14015961]
[-79.18388367 104.68527222]
[-83.70607758 118.98736572]
[-97.64666748 124.52450562]
[-110.74968719 117.22307587]
[-113.37536621 102.45467377]
[-103.59314728 91.08477783]
[-118.50926208 89.50066376]
[-133.42538452 87.91654968]
[-145.55934143 98.04287720]
[-161.29202271 96.54006958]
[-171.28948975 84.29972839]
[-169.62043762 68.58381653]
[-157.27508545 58.71631622]
[-141.57769775 60.55143356]
[-131.84126282 73.00042725]
[-116.92514801 74.58454132]
[-102.00903320 76.16865540]
[-87.04081726 77.14463043]
[-72.04528809 77.51084137]
[-57.04727173 77.75499725]
[-42.04777145 77.87707520]
[-27.04826736 77.99916077]
[-12.04876328 78.12123871]
[2.95073962 78.24332428]
[17.95024300 78.36540222]
[32.94974518 78.48748016]
[47.94974518 78.48748016]
[62.94924927 78.36540222]
[77.94875336 78.24332428]
[91.57472992 71.97174072]
[101.42278290 60.65732956]
[111.27082825 49.34291840]
[121.11888123 38.02850342]
[130.96693420 26.71409416]
[140.81497192 15.39968109]
[150.66302490 4.08526945]
[142.49990845 -5.99014759]
[136.04286194 -17.23171616]
[131.45503235 -29.35334396]
[128.85198975 -42.04673004]
[128.29885864 -54.98921204]
[129.80865479 -67.85195160]
[133.34201050 -80.30831909]
[138.80815125 -92.04214478]
[146.06730652 -102.75578308]
[154.93418884 -112.17765808]
[165.18280029 -120.06911469]
[176.55216980 -126.23050690]
[188.75299072 -130.50621033]
[201.47492981 -132.78858948]
[214.39466858 -133.02066040]
[227.18395996 -131.19758606]
[239.51805115 -127.36668396]
[246.33877563 -140.72624207]
[253.15951538 -154.08578491]
[259.98025513 -167.44534302]
[261.09875488 -176.52667236]
[267.02227783 -180.96548462]
[274.05957031 -194.21224976]
[281.09683228 -207.45899963]
[288.13412476 -220.70576477]
[295.17141724 -233.95252991]
[302.20867920 -247.19927979]
[294.18594360 -260.22167969]
[293.76138306 -275.41104126]
[300.94897461 -288.68527222]
[313.73028564 -296.52706909]
[328.62036133 -296.91580200]
[323.75509644 -311.95257568]
[331.02172852 -325.98721313]
[346.10910034 -330.69323730]
[360.06616211 -323.27862549]
[364.61239624 -308.14233398]
[357.05062866 -294.26446533]
[341.86712646 -289.87850952]
[349.88037109 -277.32250977]
[350.53726196 -262.34170532]
[343.56137085 -248.95503235]
[330.73730469 -240.80393982]
[315.45544434 -240.16200256]
[308.41815186 -226.91523743]
[301.38088989 -213.66848755]
[294.34359741 -200.42172241]
[287.30630493 -187.17495728]
[280.26904297 -173.92820740]
[273.33981323 -160.62460327]
[266.51907349 -147.26506042]
[259.69833374 -133.90550232]
[252.87759399 -120.54595184]
[268.92291260 -107.19716644]
[281.02569580 -90.19232178]
[288.38275146 -70.65988922]
[303.23941040 -72.72867584]
[318.09606934 -74.79746246]
[332.95272827 -76.86625671]
[347.80938721 -78.93504333]
[362.64871216 -81.12467957]
[373.23333740 -93.18058014]
[389.25097656 -92.27800751]
[398.41427612 -79.10932922]
[393.69387817 -63.77643585]
[378.71093750 -58.04140854]
[364.95904541 -66.30366516]
[358.82492065 -62.16077042]
[349.87817383 -64.07839203]
[335.02151489 -62.00960159]
[320.16485596 -59.94081497]
[305.30819702 -57.87202454]
[290.45156860 -55.80323410]
[289.76010132 -40.71172333]
[286.27816772 -26.00557327]
[280.12490845 -12.19636059]
[271.51226807 0.23515990]
[260.73800659 10.85579395]
[248.17514038 19.29499626]
[234.25920105 25.25780678]
[219.47303772 28.53514671]
[204.33012390 29.01116562]
[189.35668945 26.66732025]
[175.07342529 21.58309746]
[161.97744751 13.93331909]
[152.12939453 25.24773026]
[142.28134155 36.56214142]
[132.43328857 47.87655640]
[122.58524323 59.19096756]
[112.73719025 70.50537872]
[102.88914490 81.81979370]
[116.95603943 76.61186981]
[131.68592834 73.77810669]
[145.97372437 78.34526825]
[156.32881165 89.19756317]
[160.22135925 103.68369293]
[156.70040894 118.26460266]
[146.62612915 129.37806702]
[132.46115112 134.30886841]
[125.05646515 121.26393127]
[125.30061340 136.26194763]
[125.54476929 151.25994873]
[125.78892517 166.25796509]
[129.06166077 174.80261230]
[125.91299438 181.50163269]
[125.91299438 196.50163269]
[125.91299438 211.50163269]
[125.91299438 226.50163269]
[129.04621887 235.09840393]
[125.78892517 241.74528503]
[125.54476929 256.74328613]
[125.30061340 271.74130249]
[125.05646515 286.73931885]
[124.81230927 301.73733521]
[124.56815338 316.73535156]
[133.00407410 330.79833984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 191]
[4 190]
[5 189]
[6 188]
[7 187]
[8 186]
[9 184]
[10 183]
[11 182]
[12 181]
[13 179]
[14 178]
[15 177]
[16 176]
[17 26]
[18 25]
[27 69]
[28 68]
[29 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[39 59]
[40 58]
[46 57]
[47 56]
[48 55]
[70 167]
[71 166]
[72 165]
[73 164]
[74 163]
[75 162]
[76 161]
[93 129]
[94 128]
[95 127]
[96 126]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[108 115]
[132 149]
[133 148]
[134 147]
[135 146]
[136 145]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
