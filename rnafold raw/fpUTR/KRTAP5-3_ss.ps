%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUCAGAGAACUCCACACCUGCACACCUCCCUCUCACCUGCUCCUCUACCUGCUCCACCCUCAACCCACCAGAACC\
) } def
/len { sequence length } bind def

/coor [
[165.71389771 125.13250732]
[151.21221924 121.29826355]
[136.71054077 117.46401215]
[122.20887756 113.62976074]
[109.92800140 124.09230804]
[93.84140015 125.31948090]
[80.11559296 116.84087372]
[74.01213074 101.90660858]
[59.36948395 98.65192413]
[44.72684097 95.39723969]
[30.08419609 92.14255524]
[23.11919022 105.52729034]
[12.92657089 116.65261841]
[0.20128886 124.76000214]
[-14.18902588 129.29666138]
[-29.26321793 129.95327759]
[-43.99350357 126.68507385]
[-57.37554932 119.71490479]
[-68.49694061 109.51799011]
[-76.59940338 96.78958130]
[-81.13050842 82.39751434]
[-81.78129578 67.32306671]
[-78.50741577 52.59404755]
[-71.53208160 39.21469498]
[-61.33087158 28.09724045]
[-48.59933090 19.99968910]
[-34.20551682 15.47414780]
[-19.13082314 14.82917404]
[-4.40306520 18.10874176]
[8.97359180 25.08924675]
[20.08710670 35.29474640]
[28.17974091 48.02941132]
[32.69972229 62.42497253]
[33.33887863 77.49991608]
[47.98152161 80.75459290]
[62.62416840 84.00927734]
[77.26681519 87.26396179]
[86.58861542 77.65857697]
[99.44908905 73.94811249]
[112.45492554 77.11158752]
[122.17445374 86.31431580]
[126.04312134 99.12808990]
[140.54479980 102.96234131]
[155.04647827 106.79658508]
[169.54814148 110.63083649]
[175.85577393 96.97854614]
[184.43841553 84.62908173]
[195.03526306 73.95772552]
[207.32429504 65.28877258]
[220.93206787 58.88566208]
[235.44503784 54.94297028]
[250.42218018 53.58052063]
[265.40835571 54.83971024]
[279.94815063 58.68227768]
[293.59973145 64.99144745]
[305.94824219 73.57549286]
[316.61837769 84.17356110]
[325.28594971 96.46357727]
[331.68750000 110.07206726]
[335.62854004 124.58548737]
[336.98931885 139.56278992]
[335.72842407 154.54881287]
[331.88421631 169.08818054]
[325.57348633 182.73904419]
[316.98803711 195.08656311]
[306.38876343 205.75550842]
[294.09774780 214.42167664]
[280.48855591 220.82170105]
[265.97467041 224.76110840]
[250.99722290 226.12016296]
[236.01133728 224.85757446]
[221.47241211 221.01170349]
[207.82226562 214.69943237]
[195.47572327 206.11259460]
[184.80796814 195.51210022]
[176.14318848 183.22012329]
[169.74470520 169.61018372]
[165.80696106 155.09587097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[8 37]
[9 36]
[10 35]
[11 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
