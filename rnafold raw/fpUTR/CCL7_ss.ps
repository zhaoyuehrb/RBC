%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAGCAGAGGGGCUGAGACCAAACCAGAAACCUCCAAUUCUCAUGUGGAAGCCCAUGCCCUCACCCUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[119.16891479 213.76119995]
[129.61012268 202.62818909]
[124.15749359 188.65431213]
[118.70487976 174.68045044]
[113.25225830 160.70658875]
[107.72835541 155.47125244]
[107.87620544 146.04089355]
[103.00571442 131.85362244]
[98.13522339 117.66637421]
[88.64704132 113.66339111]
[82.97399902 105.06886292]
[83.02251434 94.77094269]
[88.77628326 86.23023987]
[85.09400177 71.68923950]
[81.41172028 57.14823532]
[77.72943115 42.60723114]
[74.04714966 28.06622696]
[64.90703583 24.14838409]
[58.82584381 16.45839119]
[57.16860962 6.93811750]
[60.20412827 -2.08808541]
[67.07175446 -8.48078728]
[65.21636200 -23.36559486]
[63.36097717 -38.25040436]
[49.31085587 -44.29534531]
[40.23284149 -56.48085022]
[38.48464584 -71.47451782]
[44.43630219 -85.23801422]
[56.39749908 -94.11468506]
[54.54211044 -108.99949646]
[52.68672180 -123.88430023]
[50.83133316 -138.76911926]
[37.18143463 -146.14880371]
[30.50649071 -160.15682983]
[33.37315369 -175.40681458]
[44.67913055 -186.03482056]
[60.07704163 -187.95416260]
[73.64608002 -180.42683411]
[80.16867065 -166.34721375]
[77.13674927 -151.12924194]
[65.71614075 -140.62449646]
[67.57153320 -125.73969269]
[69.42691803 -110.85488129]
[71.28231049 -95.97007751]
[85.05659485 -90.30132294]
[94.20487213 -78.42003632]
[96.19089508 -63.45601273]
[90.38203430 -49.41486359]
[78.24578857 -40.10579300]
[80.10117340 -25.22098541]
[81.95656586 -10.33617592]
[96.04212952 4.51201534]
[88.58815765 24.38394547]
[92.27043915 38.92494965]
[95.95272064 53.46595383]
[99.63500214 68.00695801]
[103.31728363 82.54795837]
[117.02600098 94.93113708]
[112.32247925 112.79587555]
[117.19297028 126.98313904]
[122.06346893 141.17039490]
[127.22612000 155.25396729]
[132.67874146 169.22782898]
[138.13136292 183.20170593]
[143.58398438 197.17556763]
[158.80601501 198.29476929]
[172.03070068 205.91516113]
[180.63227844 218.52371216]
[182.90287781 233.61698914]
[178.39170837 248.19821167]
[167.99443054 259.37225342]
[153.77545166 264.92053223]
[138.55793762 263.74139404]
[125.36336517 256.06896973]
[116.81150818 243.42665100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[7 61]
[8 60]
[9 59]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[22 51]
[23 50]
[24 49]
[29 44]
[30 43]
[31 42]
[32 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
