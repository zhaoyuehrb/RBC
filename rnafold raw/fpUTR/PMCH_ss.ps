%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUACCAAGCAGGCUGACAGAGAAAUUUUUCAUUUUCUUUCUUGUUUGACUGUAUGCAAACAUCAAACUAAGA\
) } def
/len { sequence length } bind def

/coor [
[106.10147858 119.04524231]
[91.34049988 116.24397278]
[79.50339508 125.45716095]
[67.66628265 134.67034912]
[65.57225800 150.10578918]
[53.43650436 159.28065491]
[38.73407364 157.18919373]
[26.89696693 166.40238953]
[23.49371719 182.08030701]
[9.05101204 189.06513977]
[-5.35194111 181.99870300]
[-8.66642952 166.30177307]
[1.65013957 154.01568604]
[17.68377686 154.56527710]
[29.52088356 145.35208130]
[31.10265732 130.58612061]
[42.97592163 121.07402039]
[58.45309448 122.83324432]
[70.29019928 113.62005615]
[82.12731171 104.40686035]
[83.16435242 87.79524994]
[98.27424622 76.88408661]
[90.59597015 63.99827576]
[82.91769409 51.11246490]
[75.23941803 38.22665787]
[67.56114197 25.34084702]
[59.88286972 12.45503712]
[44.41826630 11.18000793]
[32.67857361 1.03312695]
[29.17793846 -14.08392239]
[35.26242828 -28.35832596]
[48.59243393 -36.30128479]
[64.04228973 -34.85857010]
[75.67122650 -24.58493233]
[79.00765991 -9.43079758]
[72.76867676 4.77676153]
[80.44695282 17.66257095]
[88.12522888 30.54837990]
[95.80350494 43.43418884]
[103.48178101 56.31999969]
[111.16005707 69.20581055]
[123.71755219 77.41003418]
[138.60237122 79.26541901]
[153.48716736 81.12081146]
[168.37197876 82.97619629]
[183.29196167 84.52356720]
[198.24072266 85.76226044]
[213.18948364 87.00094604]
[228.13825989 88.23963928]
[243.08702087 89.47833252]
[258.03579712 90.71701813]
[267.14129639 88.25867462]
[273.57247925 92.32834625]
[288.45727539 94.18373871]
[303.34207153 96.03913116]
[315.65838623 86.13536835]
[331.36108398 87.92432404]
[341.13409424 100.34464264]
[339.17919922 116.02755737]
[326.65625000 125.66868591]
[310.99487305 123.54811859]
[301.48669434 110.92393494]
[286.60189819 109.06855011]
[271.71707153 107.21315765]
[256.79708862 105.66578674]
[241.84834290 104.42710114]
[226.89956665 103.18840790]
[211.95080566 101.94971466]
[197.00202942 100.71102905]
[182.05326843 99.47233582]
[174.92381287 102.13562012]
[166.51658630 97.86100769]
[151.63179016 96.00561523]
[136.74697876 94.15023041]
[121.86216736 92.29483795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[7 15]
[8 14]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[42 75]
[43 74]
[44 73]
[45 72]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
