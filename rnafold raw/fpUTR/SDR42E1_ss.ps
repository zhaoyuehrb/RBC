%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCCGACGGCUUCGGCGCCCCAGCUGUGGUGAUGGGUAGCUAGGAGGCCUGGGCCUCUCUGCCUGCUGUAGCCGUCUGCCGCGCCCUUGUUCCUGCAGCUGUCCAGUUAUCUUUUGACUGCCACAU\
) } def
/len { sequence length } bind def

/coor [
[143.51879883 382.95581055]
[144.16015625 367.96954346]
[150.72294617 354.48141479]
[162.11897278 344.72790527]
[176.45861816 340.32629395]
[191.36424255 342.00640869]
[204.36561584 349.49084473]
[198.33137512 335.75811768]
[192.29713440 322.02539062]
[186.26290894 308.29263306]
[180.22866821 294.55990601]
[174.19444275 280.82717896]
[168.16020203 267.09442139]
[155.95663452 258.55499268]
[157.48869324 242.80813599]
[151.45445251 229.07540894]
[145.42022705 215.34266663]
[130.74465942 205.80093384]
[132.77639771 187.54748535]
[126.40954590 173.96575928]
[111.55746460 172.83380127]
[99.18378448 164.36338806]
[92.66820526 150.74671936]
[93.85089874 135.59751892]
[102.51406860 122.99209595]
[96.14722443 109.41037750]
[90.08515167 103.96181488]
[89.79520416 95.41951752]
[83.76097107 81.68678284]
[77.72673798 67.95404816]
[71.69250488 54.22130966]
[65.65827179 40.48857498]
[59.45727158 26.83033180]
[53.09041977 13.24860859]
[46.72357178 -0.33311513]
[40.35671997 -13.91483879]
[33.98986816 -27.49656296]
[26.80842209 -40.66572571]
[18.83899117 -53.37352371]
[10.86956024 -66.08132172]
[2.90012860 -78.78912354]
[-10.98677731 -86.36965179]
[-11.19378090 -101.26281738]
[-19.16321182 -113.97061920]
[-27.13264465 -126.67841339]
[-35.25621796 -139.28823853]
[-43.53273773 -151.79820251]
[-51.80925369 -164.30816650]
[-60.08576965 -176.81813049]
[-68.36228180 -189.32810974]
[-83.27050018 -196.16017151]
[-84.53826141 -212.51023865]
[-70.86141205 -221.55876160]
[-56.30951309 -213.99739075]
[-55.85231781 -197.60461426]
[-47.57580185 -185.09465027]
[-39.29928589 -172.58468628]
[-31.02276802 -160.07472229]
[-22.74625206 -147.56475830]
[-16.36591339 -143.68209839]
[-14.42484474 -134.64784241]
[-6.45541334 -121.94004822]
[1.51401830 -109.23224640]
[14.83089733 -102.56066895]
[15.60792828 -86.75855255]
[23.57736015 -74.05075073]
[31.54679108 -61.34295654]
[39.51622391 -48.63515472]
[45.90406418 -62.20701981]
[60.43801880 -65.91702271]
[72.54929352 -57.06733322]
[73.43081665 -42.09325790]
[62.44156265 -31.88364029]
[47.57159424 -33.86341095]
[53.93844223 -20.28168869]
[60.30529404 -6.69996548]
[66.67214203 6.88175774]
[73.03899384 20.46348190]
[78.78601837 25.23374176]
[79.39100647 34.45434189]
[85.42523956 48.18707657]
[91.45947266 61.91981125]
[97.49371338 75.65254974]
[103.52794647 89.38528442]
[109.72894287 103.04352570]
[116.09579468 116.62525177]
[131.32652283 118.02967834]
[143.72743225 126.81113434]
[150.02600098 140.52952576]
[148.62167358 155.45881653]
[139.99127197 167.59890747]
[146.35812378 181.18063354]
[158.25613403 186.33294678]
[163.25398254 197.85952759]
[159.15295410 209.30844116]
[165.18719482 223.04116821]
[171.22142029 236.77391052]
[183.85661316 246.29560852]
[181.89294434 261.06021118]
[187.92716980 274.79293823]
[193.96141052 288.52566528]
[199.99563599 302.25839233]
[206.02987671 315.99114990]
[212.06411743 329.72387695]
[218.09834290 343.45660400]
[226.22192383 356.06643677]
[236.23170471 367.23800659]
[246.24148560 378.40960693]
[256.25128174 389.58117676]
[266.26104736 400.75277710]
[276.27084351 411.92434692]
[292.14657593 414.23516846]
[300.11355591 428.16021729]
[294.06015015 443.01739502]
[278.63000488 447.40954590]
[265.65985107 437.96737671]
[265.09924316 421.93414307]
[255.08946228 410.76254272]
[245.07968140 399.59097290]
[235.06990051 388.41937256]
[225.06011963 377.24780273]
[215.05033875 366.07620239]
[216.49072266 381.00689697]
[211.85925293 395.27398682]
[201.92390442 406.51181030]
[188.33204651 412.85699463]
[173.33740234 413.25747681]
[159.42623901 407.64682007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[12 100]
[13 99]
[15 97]
[16 96]
[17 95]
[19 92]
[20 91]
[25 86]
[26 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 68]
[39 67]
[40 66]
[41 65]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
