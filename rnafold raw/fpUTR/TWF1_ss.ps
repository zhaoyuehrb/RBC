%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCGGCCGCGGGUCGCGGGCGGAUGACGCGCCGGGGCCGGCGGAGGAGCAGCCACUUCCUGGGGCCGCCGGCCGGGGCCGCUGGCUGCACUCAGCGCCGGAGCCGGGAGCUAGCGGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[228.83366394 177.12945557]
[240.98248291 168.33151245]
[227.00689697 162.88330078]
[213.03131104 157.43508911]
[201.76864624 162.01623535]
[190.04260254 157.51339722]
[184.38916016 145.84811401]
[170.54823303 140.06634521]
[156.70732117 134.28457642]
[142.86639404 128.50280762]
[129.02546692 122.72103882]
[115.18454742 116.93927002]
[101.34362030 111.15750885]
[86.49863434 109.00659943]
[71.58589935 110.62221527]
[58.69937515 119.80089569]
[45.21277618 113.47943878]
[30.30003738 115.09505463]
[15.38729858 116.71067047]
[0.47456014 118.32629395]
[-12.41196156 127.50497437]
[-25.89856339 121.18350983]
[-40.81130219 122.79913330]
[-55.72404099 124.41474915]
[-70.61633301 126.20906067]
[-85.48604584 128.18180847]
[-100.35575104 130.15457153]
[-111.21178436 141.96669006]
[-127.20476532 140.70014954]
[-136.06625366 127.32653809]
[-130.99847412 112.10493469]
[-115.88898468 106.71205902]
[-102.32850647 115.28485870]
[-87.45879364 113.31210327]
[-72.58908844 111.33935547]
[-66.30982208 107.30097961]
[-57.33966064 109.50201416]
[-42.42692184 107.88639069]
[-27.51418114 106.27077484]
[-15.69431877 97.20765686]
[-1.14105916 103.41355133]
[13.77167988 101.79793549]
[28.68441772 100.18231964]
[43.59715652 98.56669617]
[55.41701889 89.50357819]
[69.97027588 95.70948029]
[84.88301849 94.09386444]
[92.27893829 81.04393768]
[86.00312042 67.41991425]
[79.72731018 53.79588318]
[73.45149994 40.17185211]
[67.17568970 26.54782295]
[51.93193817 23.64821434]
[41.32838821 12.31929684]
[39.44231796 -3.08272767]
[46.99896240 -16.63546753]
[61.09263611 -23.12761688]
[76.30403137 -20.06281281]
[86.78405762 -8.61953545]
[88.50293732 6.80204344]
[80.79971313 20.27201080]
[87.07553101 33.89604187]
[93.35134125 47.52006912]
[99.62715149 61.14410019]
[105.90296936 74.76812744]
[109.75918579 81.02412415]
[111.05639648 87.39949799]
[110.02266693 93.06375885]
[107.12538910 97.31658173]
[120.96631622 103.09835052]
[134.80723572 108.88011932]
[148.64816284 114.66188812]
[162.48908997 120.44365692]
[176.33000183 126.22542572]
[190.17092896 132.00718689]
[208.32324219 129.20018005]
[218.47950745 143.45950317]
[232.45509338 148.90771484]
[246.43067932 154.35592651]
[260.70761108 158.95695496]
[275.23455811 162.69427490]
[289.80529785 166.25714111]
[304.41769409 169.64503479]
[319.03009033 173.03292847]
[333.64248657 176.42082214]
[348.25488281 179.80871582]
[362.86727905 183.19660950]
[377.47967529 186.58450317]
[392.09207153 189.97239685]
[406.70446777 193.36029053]
[421.31686401 196.74818420]
[435.92926025 200.13607788]
[441.11053467 198.54406738]
[445.88388062 199.10975647]
[449.47610474 201.29515076]
[451.45199585 204.32864380]
[465.78305054 208.75816345]
[480.11410522 213.18766785]
[495.58367920 209.87062073]
[505.45855713 221.02124023]
[519.78961182 225.45075989]
[533.64788818 217.85316467]
[548.79589844 222.36027527]
[556.24652100 236.29811096]
[551.57952881 251.39759827]
[537.56365967 258.70046997]
[522.51440430 253.87408447]
[515.36010742 239.78182983]
[501.02905273 235.35231018]
[486.58450317 238.98619080]
[475.68460083 227.51873779]
[461.35354614 223.08923340]
[447.02246094 218.65971375]
[432.54138184 214.74848938]
[417.92898560 211.36058044]
[403.31658936 207.97268677]
[388.70419312 204.58479309]
[374.09179688 201.19689941]
[359.47937012 197.80900574]
[344.86697388 194.42111206]
[330.25457764 191.03321838]
[315.64218140 187.64532471]
[301.02978516 184.25743103]
[286.41738892 180.86953735]
[279.11846924 182.43902588]
[271.49725342 177.22122192]
[256.97030640 173.48391724]
[261.69589233 187.72007751]
[253.71890259 200.42314148]
[238.84324646 202.35050964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[7 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[14 47]
[15 46]
[17 44]
[18 43]
[19 42]
[20 41]
[22 39]
[23 38]
[24 37]
[25 35]
[26 34]
[27 33]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[80 127]
[81 126]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[96 113]
[97 112]
[98 111]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
