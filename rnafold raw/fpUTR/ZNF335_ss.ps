%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGCGGAGGAAAGAGGAUGGCGACCUCGUCGAUGCCGGAGUCAGAGAGGAACGUGGCUACGAAAGCCUCGGAGUGAAGUUCCCAGACCCUACGCCCCGCUGUCAGGCAGCCCGCCGAUCAG\
) } def
/len { sequence length } bind def

/coor [
[149.19757080 236.25202942]
[154.63804626 229.55287170]
[148.03213501 216.08580017]
[141.42620850 202.61872864]
[134.82029724 189.15167236]
[128.21438599 175.68460083]
[121.60848236 162.21752930]
[115.00256348 148.75045776]
[109.16561127 144.07762146]
[108.40475464 134.85751343]
[102.14212036 121.22742462]
[102.50483704 136.22303772]
[91.67823029 146.60496521]
[76.71099854 145.61401367]
[67.34763336 133.89533997]
[69.68419647 119.07843781]
[82.19902039 110.80999756]
[67.43429565 113.45629883]
[52.76443100 127.17155457]
[34.83515167 120.11237335]
[20.22340965 123.50309753]
[5.61166811 126.89381409]
[-9.00007439 130.28453064]
[-23.61181641 133.67526245]
[-35.21680450 145.26216125]
[-50.98146057 140.74467468]
[-54.68845367 124.76999664]
[-42.52435303 113.77151489]
[-27.00253677 119.06351471]
[-12.39079475 115.67279816]
[2.22094727 112.28207397]
[16.83268929 108.89134979]
[31.44443130 105.50063324]
[36.12786865 96.26243591]
[45.34592819 91.07269287]
[56.11431122 91.89297485]
[64.78799438 98.69157410]
[79.55271912 96.04527283]
[90.02411652 85.30516815]
[92.29553223 70.47814178]
[90.49062347 61.40447235]
[94.81688690 55.30619812]
[97.46318054 40.54147339]
[100.10947418 25.77674866]
[93.31088257 17.10306168]
[92.49060059 6.33467960]
[97.68033600 -2.88337922]
[106.91854095 -7.56681585]
[105.80783081 -16.75134277]
[110.58466339 -22.50350189]
[114.34445190 -37.02465820]
[118.10424042 -51.54581451]
[121.86402893 -66.06697083]
[125.62381744 -80.58812714]
[121.59255981 -95.88713074]
[132.27299500 -106.26873779]
[128.24172974 -121.56774139]
[138.92216492 -131.94935608]
[142.68194580 -146.47050476]
[146.44174194 -160.99166870]
[142.41047668 -176.29066467]
[153.09091187 -186.67227173]
[156.85069275 -201.19343567]
[160.61048889 -215.71458435]
[153.74377441 -230.21383667]
[160.92755127 -244.55862427]
[176.65101624 -247.74487305]
[188.85247803 -237.32835388]
[188.17202759 -221.29974365]
[175.13163757 -211.95480347]
[171.37185669 -197.43363953]
[167.61206055 -182.91249084]
[171.91224670 -168.65213013]
[160.96289062 -157.23187256]
[157.20310974 -142.71072388]
[153.44331360 -128.18955994]
[157.74349976 -113.92920685]
[146.79414368 -102.50894928]
[151.09432983 -88.24859619]
[140.14497375 -76.82833862]
[136.38519287 -62.30718231]
[132.62539673 -47.78602600]
[128.86561584 -33.26486969]
[125.10581970 -18.74371338]
[121.53028107 -4.17609501]
[128.58946228 13.75318432]
[114.87419891 28.42304420]
[112.22790527 43.18777084]
[109.58161163 57.95249557]
[107.12255859 72.74955750]
[104.85113525 87.57658386]
[110.38755035 89.15391541]
[115.27836609 93.26016235]
[118.37463379 99.56026459]
[118.72061920 107.20948792]
[115.77220917 114.96479034]
[122.03484344 128.59487915]
[128.46963501 142.14454651]
[135.07554626 155.61161804]
[141.68145752 169.07868958]
[148.28736877 182.54574585]
[154.89328003 196.01281738]
[161.49919128 209.47988892]
[168.10510254 222.94696045]
[189.89689636 228.10440063]
[200.95196533 247.27243042]
[194.65632629 268.20758057]
[203.22534180 280.51904297]
[211.79437256 292.83050537]
[227.26856995 297.06472778]
[233.47348022 311.85928345]
[225.64924622 325.86502075]
[209.79792786 328.33795166]
[198.07931519 317.38104248]
[199.48291016 301.39950562]
[190.91389465 289.08807373]
[182.34486389 276.77661133]
[174.13992310 278.36618042]
[165.80299377 277.41021729]
[158.10859680 273.97689819]
[151.77781677 268.36550903]
[147.41059875 261.08047485]
[145.42906189 252.78605652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[10 97]
[11 96]
[17 38]
[18 37]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[39 91]
[40 90]
[42 89]
[43 88]
[44 87]
[48 85]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[56 78]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
[64 70]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
