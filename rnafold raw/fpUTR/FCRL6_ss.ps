%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACACCCACAGGACCUGCAGCUGAACGAAGUUGAAGACAACUCAGGAGAUCUGUUGGAAAGAGAACGAUAGAGGAAAAUAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[161.41380310 273.35083008]
[157.93661499 258.72149658]
[156.98199463 243.71493530]
[158.57737732 228.76292419]
[162.67689514 214.29565430]
[169.16256714 200.72937012]
[177.84780884 188.45440674]
[167.24119568 177.84780884]
[152.77056885 174.31936646]
[148.48345947 159.09007263]
[137.87686157 148.48345947]
[127.27026367 137.87686157]
[116.66365814 127.27026367]
[106.05706024 116.66365814]
[87.91822052 112.97675323]
[82.94669342 95.14714813]
[71.61045074 85.32423401]
[60.27420425 75.50132751]
[48.93796158 65.67841339]
[36.17641830 57.79532623]
[22.31822586 52.05507660]
[8.46003342 46.31482315]
[-5.39815950 40.57457352]
[-19.25635147 34.83432007]
[-33.75986099 41.11315536]
[-48.42424774 35.21982574]
[-54.54939270 20.65074348]
[-48.50135040 6.04948378]
[-33.86832428 0.07871658]
[-19.33182526 6.28079128]
[-13.51610088 20.97612762]
[0.34209207 26.71637917]
[14.20028496 32.45663071]
[28.05847740 38.19688034]
[41.91667175 43.93713379]
[36.48311234 29.95584297]
[39.22377014 15.20834255]
[49.31760788 4.11264563]
[63.74073410 -0.00722886]
[78.17231750 4.08294010]
[88.28897858 15.15783119]
[91.05998993 29.89965820]
[85.65523529 43.89210510]
[73.69384003 52.94335175]
[58.76087189 54.34217072]
[70.09711456 64.16507721]
[81.43335724 73.98799133]
[92.76959991 83.81090546]
[102.90925598 82.50995636]
[112.08177948 87.02324677]
[117.23793793 95.85043335]
[116.66365814 106.05706024]
[127.27026367 116.66365814]
[137.87686157 127.27026367]
[148.48345947 137.87686157]
[159.09007263 148.48345947]
[174.31936646 152.77056885]
[177.84780884 167.24119568]
[188.45440674 177.84780884]
[200.72937012 169.16256714]
[214.29565430 162.67689514]
[228.76292419 158.57737732]
[243.71493530 156.98199463]
[258.72149658 157.93661499]
[273.35083008 161.41380310]
[287.18200684 167.31349182]
[299.81710815 175.46594238]
[310.89254761 185.63659668]
[320.08972168 197.53282166]
[327.14398193 210.81234741]
[331.85235596 225.09307861]
[334.07937622 239.96412659]
[333.76095581 254.99765015]
[330.90631104 269.76107788]
[325.59750366 283.82965088]
[317.98733521 296.79858398]
[308.29473877 308.29473877]
[296.79858398 317.98733521]
[283.82965088 325.59750366]
[269.76107788 330.90631104]
[254.99765015 333.76095581]
[239.96412659 334.07937622]
[225.09307861 331.85235596]
[210.81234741 327.14398193]
[197.53282166 320.08972168]
[185.63659668 310.89254761]
[175.46594238 299.81710815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 59]
[8 58]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[16 48]
[17 47]
[18 46]
[19 45]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
