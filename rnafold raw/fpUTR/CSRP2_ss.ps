%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCGGCGCGCGCUUCGCCUGGGAUCUCGGACUCCCUGGACCCUCCCUCCAGCCCAGCCUCGCUAGCUCCGCCUGCGGUACGUGCUCCCGCCUCCGACUCAAA\
) } def
/len { sequence length } bind def

/coor [
[162.66864014 175.19963074]
[151.82670593 164.83367920]
[140.98478699 154.46774292]
[136.11915588 153.69471741]
[131.74253845 149.75028992]
[129.82798767 143.14277649]
[119.62538910 132.14698792]
[109.42279816 121.15121460]
[99.22020721 110.15544128]
[91.73971558 106.78641510]
[88.88295746 98.67475891]
[73.97654724 93.37290955]
[71.42951965 78.69769287]
[61.56044006 67.40161896]
[51.69136047 56.10554886]
[34.18408966 50.64973450]
[31.29459190 33.41173553]
[21.09200096 22.41595840]
[1.64647865 17.53602028]
[-2.21294188 -1.31136394]
[-13.05486488 -11.67730331]
[-23.89678764 -22.04324341]
[-34.73871231 -32.40918350]
[-45.58063507 -42.77512360]
[-43.92181015 -27.86712837]
[-48.73318100 -13.65970993]
[-59.10904694 -2.82728577]
[-73.09624481 2.59104037]
[-88.06181335 1.57531762]
[-101.18862915 -5.68325329]
[-110.00567627 -17.81831169]
[-112.85323334 -32.54554749]
[-109.19526672 -47.09268951]
[-99.72036743 -58.72137070]
[-86.21208954 -65.24259949]
[-71.21324921 -65.42881775]
[-57.54600525 -59.24404526]
[-64.05426025 -72.75857544]
[-70.56251526 -86.27310944]
[-77.07077026 -99.78764343]
[-83.57903290 -113.30217743]
[-98.77668762 -116.98526764]
[-108.00965118 -129.60614014]
[-106.91839600 -145.20561218]
[-96.01817322 -156.41806030]
[-80.45574951 -157.94934082]
[-67.57920837 -149.07641602]
[-63.46847153 -133.98881531]
[-70.06449890 -119.81043243]
[-63.55624008 -106.29589844]
[-57.04798508 -92.78136444]
[-50.53973007 -79.26683044]
[-44.03147125 -65.75230408]
[-35.21469498 -53.61704636]
[-24.37277031 -43.25110626]
[-13.53084755 -32.88516617]
[-2.68892503 -22.51922607]
[8.15299797 -12.15328693]
[18.50888443 -13.29475403]
[27.93856049 -8.36564636]
[33.12433243 1.17839026]
[32.08778000 12.21336651]
[42.29037094 23.20914459]
[54.46326065 24.01018524]
[63.05319214 33.23133850]
[62.98743057 46.23646927]
[72.85651398 57.53253937]
[82.72559357 68.82861328]
[96.92610168 73.32248688]
[100.17902374 88.80567169]
[110.21598816 99.95285034]
[120.41857910 110.94862366]
[130.62117004 121.94440460]
[140.82376099 132.94018555]
[151.35072327 143.62582397]
[162.19265747 153.99176025]
[173.03457642 164.35769653]
[184.62083435 173.88444519]
[196.88661194 182.51869202]
[209.15240479 191.15295410]
[218.12922668 193.59454346]
[221.65074158 200.23352051]
[233.65274048 209.23085022]
[253.65710449 210.56022644]
[260.81982422 228.41560364]
[273.33843994 236.67906189]
[289.73168945 237.11914062]
[297.30822754 251.66313171]
[288.27398682 265.34942627]
[271.92260742 264.09872437]
[265.07498169 249.19764709]
[252.55638123 240.93420410]
[242.57073975 243.90643311]
[232.41247559 240.74028015]
[225.60588074 232.27557373]
[224.65541077 221.23284912]
[212.65341187 212.23551941]
[200.51815796 203.41874695]
[188.25236511 194.78448486]
[175.98657227 186.15022278]
[173.55166626 186.68307495]
[170.76495361 186.33872986]
[167.93589783 184.98612976]
[165.41331482 182.59967041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[6 74]
[7 73]
[8 72]
[9 71]
[11 70]
[13 68]
[14 67]
[15 66]
[17 63]
[18 62]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[78 100]
[79 99]
[80 98]
[82 97]
[83 96]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
