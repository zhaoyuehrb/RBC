%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGACAAUCUUCUUCCUUCCCCUGGCCACCUCUCUGCCCACUUGCUUCCUCAGUACCUUGGUCCAGCUCUUCCUGCAACGGCCCAGGAGCUCAGAGCUCCACAUCUGACCUUCUAGUC\
) } def
/len { sequence length } bind def

/coor [
[118.82623291 291.59472656]
[108.69040680 302.65206909]
[96.67069244 311.62573242]
[83.18863678 318.20098877]
[68.71704102 322.14724731]
[53.76343918 323.32614136]
[38.85224915 321.69625854]
[24.50641251 317.31481934]
[11.22904015 310.33547974]
[-0.51422948 301.00296021]
[-10.31155777 289.64462280]
[-17.81934929 276.65872192]
[-22.77430725 262.50076294]
[-25.00265694 247.66719055]
[-24.42625237 232.67826843]
[-21.06530762 218.05966187]
[-15.03769112 204.32402039]
[-6.55479240 191.95306396]
[4.08589172 181.38066101]
[16.51119041 172.97756958]
[30.28534698 167.03848267]
[44.92529678 163.77171326]
[59.91761780 163.29179382]
[74.73652649 165.61558533]
[88.86231995 170.66157532]
[101.79959869 178.25280762]
[113.08948517 188.11758423]
[109.64416504 173.51861572]
[106.19885254 158.91964722]
[102.75354004 144.32069397]
[90.15530396 143.30111694]
[78.35464478 138.77349854]
[68.30759430 131.10461426]
[60.82812500 120.91577148]
[56.52218246 109.03242493]
[55.73862076 96.41731262]
[58.54091644 84.09246063]
[64.70204926 73.05635834]
[73.72285461 64.20311737]
[67.01644897 50.78580856]
[60.31004333 37.36849976]
[45.04882050 36.34756088]
[32.43097305 27.88075447]
[25.78938866 14.32510185]
[26.81782532 -0.63478732]
[35.14017868 -12.98808670]
[28.43377113 -26.40539360]
[21.72736549 -39.82270050]
[15.02095795 -53.24000549]
[0.31798756 -59.65890121]
[-3.69131660 -75.19289398]
[6.06864023 -87.92564392]
[22.11085510 -88.08966064]
[32.12911224 -75.55913544]
[28.43826485 -59.94641113]
[35.14467239 -46.52910614]
[41.85107803 -33.11180115]
[48.55748367 -19.69449425]
[63.43333435 -18.93641281]
[76.01612091 -10.77985668]
[82.87209320 2.66864061]
[82.07076263 17.84278488]
[73.72734833 30.66209412]
[80.43375397 44.07939911]
[87.14015961 57.49670792]
[95.77004242 55.79578400]
[104.56588745 55.82921600]
[113.18257904 57.59569931]
[121.28205872 61.02591705]
[130.59120178 49.26411819]
[127.25931549 33.98562241]
[134.57350159 20.16401863]
[149.08023071 14.32544899]
[163.92985535 19.22670746]
[172.11085510 32.55356979]
[169.76040649 48.01350021]
[157.98831177 58.30678940]
[142.35299683 58.57326126]
[133.04385376 70.33506012]
[142.95510864 88.74105072]
[143.34664917 109.64225769]
[134.13171387 128.40653992]
[117.35250092 140.87536621]
[120.79782104 155.47433472]
[124.24313354 170.07330322]
[127.68845367 184.67227173]
[132.13064575 188.66371155]
[134.17689514 193.79908752]
[146.83354187 201.84953308]
[159.49017334 209.89997864]
[172.14680481 217.95042419]
[184.80343628 226.00085449]
[200.60026550 226.87881470]
[207.18664551 240.23803711]
[219.84327698 248.28848267]
[232.49990845 256.33892822]
[245.15653992 264.38937378]
[257.81317139 272.43981934]
[272.19647217 266.61740112]
[287.24697876 270.39395142]
[297.17742920 282.31726074]
[298.16940308 297.80261230]
[289.84146118 310.89553833]
[275.39584351 316.56155396]
[260.38720703 312.62197876]
[250.58666992 300.59164429]
[249.76274109 285.09643555]
[237.10610962 277.04598999]
[224.44946289 268.99554443]
[211.79283142 260.94512939]
[199.13619995 252.89466858]
[184.24465942 252.59254456]
[176.75299072 238.65750122]
[164.09635925 230.60705566]
[151.43972778 222.55661011]
[138.78309631 214.50616455]
[126.12645721 206.45571899]
[131.73658752 220.36711121]
[134.65458679 235.08053589]
[134.77813721 250.08003235]
[132.10290527 264.83953857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 86]
[28 85]
[29 84]
[30 83]
[39 65]
[40 64]
[41 63]
[46 58]
[47 57]
[48 56]
[49 55]
[69 79]
[70 78]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
