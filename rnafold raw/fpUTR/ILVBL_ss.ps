%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGACUGUGCGCAUGCGCAUCGGGCCGGACUACGGGGCGCCGCUGAGCCAAGUGGGCCACCCGGGCACGGCCACGCUCCCGGGUCACGUGACACGGAGGGGGCCGAAUUCUGCUGGAGGCAGCGCCAUAUCCUGGAGGUGAAGGUACCACCUC\
) } def
/len { sequence length } bind def

/coor [
[106.01002502 117.90545654]
[98.52388763 117.44969940]
[90.98004913 130.41467285]
[83.43621063 143.37963867]
[75.89237213 156.34461975]
[74.26457977 165.39401245]
[68.06198120 169.49368286]
[60.25692749 182.30310059]
[52.45187759 195.11251831]
[44.64682770 207.92193604]
[36.84177780 220.73135376]
[36.99517822 237.12979126]
[22.73486710 245.22766113]
[8.73063183 236.69458008]
[9.38882732 220.30865479]
[24.03235817 212.92630005]
[31.83740997 200.11688232]
[39.64245987 187.30746460]
[47.44750977 174.49804688]
[55.25255966 161.68862915]
[62.92739868 148.80078125]
[70.47123718 135.83580017]
[78.01507568 122.87083435]
[85.55891418 109.90586090]
[76.13838959 98.23223114]
[66.71871185 86.55962372]
[52.45286179 91.19488525]
[38.18701553 95.83013916]
[29.65178108 109.41429138]
[13.69413662 111.06751251]
[2.55542040 99.52157593]
[4.78030252 83.63355255]
[18.66204453 75.59136200]
[33.55176163 81.56429291]
[47.81760788 76.92903137]
[62.08345795 72.29377747]
[71.96887970 61.01200867]
[74.68995667 46.26087952]
[77.41103363 31.50975418]
[80.13211060 16.75862694]
[82.85318756 2.00749993]
[77.74768066 -12.96729183]
[87.66539764 -24.07981300]
[90.38647461 -38.83094025]
[93.10755157 -53.58206558]
[86.39109802 -62.23151016]
[85.59362030 -72.93247986]
[90.73840332 -82.09753418]
[99.89699554 -86.78845215]
[103.21363831 -101.41719055]
[106.53027344 -116.04592133]
[105.37435913 -125.16760254]
[110.06521606 -130.93609619]
[113.67765045 -145.49461365]
[117.29008484 -160.05311584]
[120.90252686 -174.61163330]
[118.03210449 -189.33442688]
[109.21532440 -201.46968079]
[100.39854431 -213.60493469]
[84.84171295 -217.52468872]
[78.33822632 -232.19044495]
[85.87700653 -246.35188293]
[101.67494965 -249.14556885]
[113.61321259 -238.42842102]
[112.53379822 -222.42172241]
[121.35057831 -210.28646851]
[130.16735840 -198.15121460]
[140.24647522 -206.53611755]
[152.05897522 -207.72048950]
[157.97431946 -221.50486755]
[163.88964844 -235.28923035]
[169.80499268 -249.07359314]
[175.72033691 -262.85797119]
[176.23831177 -272.03799438]
[181.89776611 -276.85983276]
[180.54890442 -292.62344360]
[192.85093689 -301.02041626]
[199.04443359 -314.68206787]
[205.23791504 -328.34371948]
[211.43141174 -342.00537109]
[212.13533020 -351.17300415]
[217.89135742 -355.87915039]
[216.86224365 -371.66683960]
[229.33192444 -379.81277466]
[235.80102539 -393.34609985]
[242.27012634 -406.87942505]
[240.45851135 -423.17819214]
[253.82640076 -432.67721558]
[268.62207031 -425.60470581]
[269.62500000 -409.23623657]
[255.80345154 -400.41030884]
[249.33435059 -386.87698364]
[242.86524963 -373.34368896]
[244.35707092 -358.52395630]
[231.42468262 -349.41006470]
[225.09306335 -335.81185913]
[218.89956665 -322.15020752]
[212.70606995 -308.48855591]
[206.51258850 -294.82690430]
[208.30445862 -280.04049683]
[195.55941772 -270.66635132]
[189.50469971 -256.94262695]
[183.58935547 -243.15826416]
[177.67402649 -229.37388611]
[171.75868225 -215.58952332]
[165.84335327 -201.80516052]
[171.97012329 -191.31257629]
[170.77500916 -178.68052673]
[162.08418274 -168.70988464]
[148.68641663 -165.55186462]
[135.46104431 -170.99919128]
[131.84860229 -156.44068909]
[128.23616028 -141.88217163]
[124.62372589 -127.32366180]
[121.15901184 -112.72928619]
[117.84236908 -98.10054779]
[114.52573395 -83.47181702]
[121.63323212 -65.52615356]
[107.85868073 -50.86099243]
[105.13760376 -36.10986328]
[102.41652679 -21.35873604]
[107.71665955 -7.43904448]
[97.60430908 4.72857618]
[94.88323975 19.47970390]
[92.16216278 34.23083115]
[89.44108582 48.98195648]
[86.72000885 63.73308182]
[96.55095673 52.40380859]
[109.99334717 45.74783325]
[124.96318817 44.79705811]
[139.13964844 49.69887543]
[150.32493591 59.69335175]
[156.78494263 73.23101044]
[157.51817322 88.21308136]
[152.41093445 102.31684875]
[142.25280762 113.35739136]
[148.16815186 127.14175415]
[154.08349609 140.92611694]
[159.99882507 154.71049500]
[165.91416931 168.49485779]
[171.82949829 182.27922058]
[186.85292053 186.61871338]
[195.52919006 199.62855530]
[193.76165771 215.16592407]
[182.38488770 225.89454651]
[166.77064514 226.74868774]
[154.29150391 217.32504272]
[150.83972168 202.07318115]
[158.04513550 188.19456482]
[152.12979126 174.41020203]
[146.21446228 160.62582397]
[140.29911804 146.84146118]
[134.38378906 133.05709839]
[128.46844482 119.27272797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[26 36]
[27 35]
[28 34]
[37 127]
[38 126]
[39 125]
[40 124]
[41 123]
[43 121]
[44 120]
[45 119]
[49 117]
[50 116]
[51 115]
[53 114]
[54 113]
[55 112]
[56 111]
[57 67]
[58 66]
[59 65]
[69 106]
[70 105]
[71 104]
[72 103]
[73 102]
[75 101]
[77 99]
[78 98]
[79 97]
[80 96]
[82 95]
[84 93]
[85 92]
[86 91]
[136 154]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
