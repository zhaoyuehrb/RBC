%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGGACCCUUGACCUCUGGCCCAAGAUGGUGGCGCCCAGAGCUUCGCUCUUGCUGCUCCCCUGAGGUGAACUGAAGCCAGCAGCCCCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[62.51810455 104.41986847]
[47.56933975 103.18117523]
[32.62057114 101.94248199]
[17.67180252 100.70379639]
[2.72303605 99.46510315]
[-12.22573185 98.22641754]
[-2.58566427 109.71854401]
[-0.45739672 124.56679535]
[-6.48121214 138.30410767]
[-18.84486198 146.79763794]
[-33.82877350 147.49214172]
[-46.92508316 140.17868042]
[-54.19379425 127.05748749]
[-53.44813919 112.07603455]
[-44.91244507 99.74144745]
[-31.15489960 93.76460266]
[-45.08320999 88.19664001]
[-59.01152039 82.62868500]
[-72.93982697 77.06072235]
[-86.86814117 71.49276733]
[-100.79645538 65.92480469]
[-114.81491852 60.58789825]
[-129.00218201 55.71740723]
[-143.26802063 51.08214951]
[-157.53387451 46.44689560]
[-171.50004578 53.84430695]
[-186.58160400 49.11970139]
[-193.83094788 35.07610321]
[-188.94715881 20.04533005]
[-174.82769775 12.94487476]
[-159.84939575 17.98731041]
[-152.89862061 32.18104935]
[-138.63276672 36.81630325]
[-124.36692047 41.45155716]
[-116.88510132 40.50562286]
[-109.71051788 46.48310852]
[-102.20151520 45.78506088]
[-95.22849274 51.99649429]
[-81.30018616 57.56445312]
[-67.37187195 63.13241196]
[-53.44356155 68.70037079]
[-39.51525116 74.26833344]
[-25.58694077 79.83628845]
[-10.98704147 83.27764893]
[3.96172619 84.51633453]
[18.91049385 85.75502777]
[33.85926056 86.99372101]
[48.80802917 88.23240662]
[63.75679398 89.47109985]
[73.64982605 72.97970581]
[90.38441467 63.50386047]
[109.61558533 63.50386047]
[126.35017395 72.97970581]
[136.24320984 89.47109985]
[151.19197083 88.23240662]
[166.14073181 86.99372101]
[181.08950806 85.75502777]
[196.03826904 84.51633453]
[210.98704529 83.27764893]
[221.18247986 71.50093842]
[236.36029053 70.45767975]
[247.52476501 80.25004578]
[260.63885498 71.39956665]
[273.96160889 78.05942535]
[287.07568359 69.20894623]
[300.39843750 75.86880493]
[315.34719849 74.63011932]
[326.77130127 63.36648178]
[342.68258667 65.41842651]
[350.87527466 79.21188354]
[345.06466675 94.16567993]
[329.70812988 98.80855560]
[316.58590698 89.57888794]
[301.63711548 90.81757355]
[289.59225464 99.57946014]
[275.20028687 93.00819397]
[263.15542603 101.77008057]
[248.76344299 95.19881439]
[239.36302185 106.69523621]
[224.22048950 108.16439056]
[212.22573853 98.22641754]
[197.27696228 99.46510315]
[182.32820129 100.70379639]
[167.37942505 101.94248199]
[152.43066406 103.18117523]
[137.48188782 104.41986847]
[134.64270020 114.97702789]
[128.89685059 124.27756500]
[120.72644043 131.54112244]
[110.81701660 136.15826416]
[100.00000000 137.74159241]
[89.18298340 136.15826416]
[79.27355957 131.54112244]
[71.10315704 124.27756500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 36]
[23 34]
[24 33]
[25 32]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[62 78]
[64 76]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
