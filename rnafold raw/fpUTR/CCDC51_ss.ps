%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGAUUGGUCGGGCCACGCCAGGUACGAGGAGCUAGGGUUGUCCUGCCAGGGUAGAAUCGGAACCGUAGGAGGGGUACUUAACCGGACGGCCUCCCAGGCCUGUGGCCGUGCGCGGGAAGAGCACUGCAGAUCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[85.92288208 121.21975708]
[78.83786011 123.67993927]
[74.23440552 137.95608521]
[69.63094330 152.23222351]
[75.63703918 167.10859680]
[67.62579346 181.00822449]
[51.74276352 183.26849365]
[40.17204285 172.15553284]
[41.78969955 156.19424438]
[55.35480499 147.62876892]
[59.95826340 133.35263062]
[64.56172180 119.07648468]
[75.30551910 99.37664032]
[92.16525269 95.25778961]
[86.61853027 81.32100677]
[81.07181549 67.38422394]
[75.52509308 53.44744110]
[69.97837830 39.51065826]
[64.43165588 25.57387733]
[58.57581711 11.76412868]
[52.41376495 -1.91172993]
[46.25171280 -15.58758831]
[33.52827072 -24.99102592]
[35.35414505 -39.77329254]
[29.19209290 -53.44915390]
[24.81741142 -56.58490372]
[22.38130569 -60.69257355]
[21.92537308 -64.84814453]
[23.10942078 -68.25048828]
[17.87457657 -82.30738831]
[12.63973045 -96.36428070]
[7.40488529 -110.42118073]
[-7.75747299 -111.03648376]
[-21.49209976 -117.39282227]
[-31.71913528 -128.49333191]
[-36.90304184 -142.62538147]
[-36.28311157 -157.62472534]
[-29.98492050 -171.20700073]
[-18.99647141 -181.31558228]
[-24.23131752 -195.37248230]
[-29.46616173 -209.42938232]
[-34.70100784 -223.48628235]
[-39.93585205 -237.54316711]
[-45.79169083 -251.35292053]
[-52.25689697 -264.88809204]
[-58.72210693 -278.42327881]
[-65.18730927 -291.95846558]
[-78.11709595 -301.07611084]
[-76.62100983 -315.89538574]
[-83.08621216 -329.43057251]
[-89.70180511 -342.89288330]
[-102.83150482 -351.72018433]
[-101.66594696 -366.56912231]
[-108.43109894 -379.95690918]
[-115.19625092 -393.34469604]
[-130.55163574 -394.83322144]
[-142.65048218 -404.40512085]
[-147.63209534 -419.00604248]
[-143.90686035 -433.97689819]
[-132.66348267 -444.54049683]
[-117.48969269 -447.32608032]
[-103.22737885 -441.44476318]
[-94.42759705 -428.77325439]
[-93.89833832 -413.35494995]
[-101.80847168 -400.10983276]
[-95.04331970 -386.72204590]
[-88.27816772 -373.33425903]
[-75.63235474 -365.46453857]
[-76.31401825 -349.65802002]
[-70.44247437 -345.06973267]
[-69.55103302 -335.89575195]
[-63.08582687 -322.36059570]
[-50.61848068 -314.21105957]
[-51.65213394 -298.42367554]
[-45.18692398 -284.88848877]
[-38.72171783 -271.35330200]
[-32.25651169 -257.81811523]
[-29.57258415 -256.77276611]
[-27.15933609 -254.55796814]
[-25.48091507 -251.27819824]
[-24.95228386 -247.20985413]
[-25.87895393 -242.77801514]
[-20.64410973 -228.72111511]
[-15.40926361 -214.66421509]
[-10.17441845 -200.60733032]
[-4.93957329 -186.55043030]
[9.98419380 -186.09165955]
[23.63232040 -179.93746948]
[33.91224670 -168.99726868]
[39.23477554 -154.91685486]
[38.75970840 -139.83084106]
[32.52831650 -126.03907013]
[21.46178436 -115.65602875]
[26.69662857 -101.59912872]
[31.93147469 -87.54222870]
[37.16632080 -73.48532867]
[42.86795044 -59.61120605]
[49.03000641 -45.93534470]
[61.31269455 -37.51009750]
[59.92757034 -21.74964142]
[66.08962250 -8.07378197]
[72.25167847 5.60207653]
[76.39492798 8.12242413]
[78.95503235 13.31024933]
[78.36843872 20.02715874]
[83.91516113 33.96393967]
[89.46187592 47.90072250]
[95.00859833 61.83750534]
[100.55531311 75.77429199]
[106.10203552 89.71107483]
[115.52884674 101.37876892]
[127.98927307 109.72968292]
[140.44970703 118.08059692]
[152.91012573 126.43151093]
[168.68142700 127.68711090]
[174.94635010 141.20007324]
[190.90069580 139.51527405]
[202.06224060 151.03913879]
[199.86878967 166.93154907]
[186.00299072 175.00119019]
[171.10148621 169.05773926]
[166.59542847 153.66049194]
[151.71537781 153.00221252]
[144.55921936 138.89193726]
[132.09878540 130.54103088]
[119.63835907 122.19010925]
[107.17793274 113.83919525]
[100.09291840 116.29938507]
[107.02433014 129.60185242]
[113.95574188 142.90431213]
[120.88715363 156.20677185]
[133.26007080 164.68681335]
[138.25561523 178.83052063]
[133.95324707 193.20027161]
[122.00702667 202.27153015]
[107.00974274 202.55680847]
[94.72718048 193.94642639]
[89.88143921 179.75068665]
[94.33617401 165.42626953]
[91.53174591 150.69076538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[14 110]
[15 109]
[16 108]
[17 107]
[18 106]
[19 105]
[20 102]
[21 101]
[22 100]
[24 98]
[25 97]
[29 96]
[30 95]
[31 94]
[32 93]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 77]
[45 76]
[46 75]
[47 74]
[49 72]
[50 71]
[51 69]
[53 67]
[54 66]
[55 65]
[111 127]
[112 126]
[113 125]
[114 124]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
