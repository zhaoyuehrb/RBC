%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGUCCUGGCAGGACCGGGCGGCGGCGGCGGCGGGGCCGGCGGCGGCCAGGGACCCGGGCUUAGGCUCGGCCAGGCCGGCUGAGGGGCGCGGGCGGCCAGCGGGCGGCGGACGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[-51.18416214 293.36950684]
[-60.62396622 305.02670288]
[-70.06377411 316.68386841]
[-68.60341644 332.19210815]
[-78.34278870 343.87966919]
[-93.13651276 345.17633057]
[-102.57631683 356.83352661]
[-112.01612091 368.49072266]
[-121.45592499 380.14788818]
[-130.89573669 391.80508423]
[-130.65551758 407.84634399]
[-143.13832092 417.92401123]
[-158.76840210 414.30734253]
[-165.55569458 399.77078247]
[-158.29357910 385.46548462]
[-142.55291748 382.36529541]
[-133.11311340 370.70809937]
[-123.67330933 359.05090332]
[-114.23350525 347.39370728]
[-104.79370117 335.73654175]
[-106.60116577 320.99649048]
[-97.19392395 309.03997803]
[-81.72096252 307.24407959]
[-72.28115845 295.58688354]
[-62.84135056 283.92968750]
[-63.77784348 271.79205322]
[-55.90182877 261.98751831]
[-43.05080032 260.17163086]
[-33.30908203 248.76553345]
[-23.56735992 237.35943604]
[-13.82563877 225.95335388]
[-4.08391857 214.54725647]
[5.65780210 203.14117432]
[15.39952278 191.73507690]
[13.33521080 175.10073853]
[24.10573769 161.82144165]
[41.47781372 160.35125732]
[50.91762161 148.69407654]
[60.35742569 137.03688049]
[69.79723358 125.37969208]
[71.79375458 110.61950684]
[86.49149323 104.76399994]
[88.86820221 90.98564911]
[101.85131836 85.79619598]
[111.29112244 74.13900757]
[120.57752991 62.35925293]
[129.70895386 50.45895386]
[138.84037781 38.55865479]
[147.97180176 26.65835381]
[148.67037964 21.23357201]
[151.19290161 17.09465790]
[154.70941162 14.73238850]
[158.31651306 14.22018814]
[161.79261780 5.63640594]
[168.76507568 2.91699076]
[179.09039307 -7.96362495]
[189.41571045 -18.84424019]
[199.74102783 -29.72485542]
[203.62800598 -45.06115341]
[218.00132751 -48.96718597]
[228.32664490 -59.84780121]
[238.65196228 -70.72841644]
[248.97727966 -81.60903168]
[250.23907471 -86.93106842]
[253.18041992 -90.78363800]
[256.92459106 -92.76538849]
[260.56546021 -92.89774323]
[271.71264648 -102.93470001]
[282.85980225 -112.97165680]
[294.00698853 -123.00862122]
[305.15414429 -133.04557800]
[316.30133057 -143.08253479]
[327.44848633 -153.11949158]
[329.72064209 -169.00083923]
[343.62625122 -177.00167847]
[358.49813843 -170.98446655]
[362.92785645 -155.56509399]
[353.51730347 -142.57197571]
[337.48544312 -141.97232056]
[326.33828735 -131.93536377]
[315.19110107 -121.89840698]
[304.04394531 -111.86144257]
[292.89675903 -101.82448578]
[281.74960327 -91.78752899]
[270.60241699 -81.75057220]
[259.85787964 -71.28371429]
[249.53257751 -60.40309525]
[239.20726013 -49.52248001]
[228.88194275 -38.64186478]
[225.73350525 -24.08382225]
[210.62164307 -19.39953804]
[200.29632568 -8.51892185]
[189.97100830 2.36169386]
[179.64569092 13.24230957]
[169.46368408 24.25714684]
[159.87210083 35.78977585]
[150.74067688 47.69007492]
[141.60925293 59.59037399]
[132.47782898 71.49067688]
[130.88262939 78.80269623]
[122.94831085 83.57881165]
[113.50850677 95.23600006]
[111.13179779 109.01435089]
[98.14868164 114.20380402]
[95.47696686 129.79779053]
[81.45442200 134.81950378]
[72.01461792 146.47668457]
[62.57481003 158.13388062]
[53.13500595 169.79106140]
[56.07759476 183.01025391]
[50.90766525 195.31573486]
[39.73859406 202.26037598]
[26.80561256 201.47680664]
[17.06389236 212.88288879]
[7.32217121 224.28898621]
[-2.41954970 235.69506836]
[-12.16127014 247.10116577]
[-21.90299034 258.50726318]
[-31.64471245 269.91333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[37 109]
[38 108]
[39 107]
[40 106]
[42 104]
[44 102]
[45 101]
[46 99]
[47 98]
[48 97]
[49 96]
[53 95]
[55 94]
[56 93]
[57 92]
[58 91]
[60 89]
[61 88]
[62 87]
[63 86]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
