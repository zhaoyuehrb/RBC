%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGACUGGCCGUAGAGUCUGCGCAGUUGGUGAAUGGCGUUGGUGGCGGGAAAGUUGAGUCUCUCCUGCGCCGAGCCUUCGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[35.66143799 179.31196594]
[27.43848801 177.77349854]
[20.01512909 173.97622681]
[13.99520493 168.24655151]
[0.27008113 174.29808044]
[-13.45504284 180.34960938]
[-27.18016624 186.40113831]
[-40.90528870 192.45266724]
[-45.35267639 197.84695435]
[-51.03176117 199.71720886]
[-55.84608841 198.40562439]
[-69.97209930 203.45100403]
[-84.09810638 208.49636841]
[-98.22412109 213.54174805]
[-112.35012817 218.58712769]
[-125.23264313 229.60881042]
[-139.38981628 220.28085327]
[-134.34548950 204.09471130]
[-117.39550781 204.46112061]
[-103.26950073 199.41574097]
[-89.14348602 194.37036133]
[-75.01747894 189.32498169]
[-60.89146805 184.27960205]
[-46.95681763 178.72753906]
[-33.23169327 172.67601013]
[-19.50656891 166.62448120]
[-5.78144646 160.57295227]
[7.94367743 154.52142334]
[13.03885555 132.69856262]
[32.34902191 120.85012054]
[54.58975983 126.30987549]
[66.36531830 117.01815033]
[78.14088440 107.72642517]
[89.91644287 98.43470001]
[93.90621948 91.19792175]
[102.28902435 89.02931213]
[114.39236450 80.16876984]
[126.49569702 71.30822754]
[131.72460938 63.52979279]
[139.19976807 62.35564423]
[151.61511230 53.93783951]
[164.03044128 45.52003479]
[176.44577026 37.10222626]
[188.86111450 28.68442154]
[201.27644348 20.26661491]
[206.78276062 12.68203068]
[214.29544067 11.77852058]
[227.00659180 3.81442595]
[239.71772766 -4.14966917]
[252.42887878 -12.11376381]
[265.14001465 -20.07785797]
[272.72637939 -33.96157837]
[287.61962891 -34.16233063]
[300.33078003 -42.12642670]
[303.62271118 -57.58406830]
[316.92596436 -66.11631775]
[332.34793091 -62.66114426]
[340.73904419 -49.26843643]
[337.12103271 -33.88385391]
[323.64035034 -25.63479614]
[308.29486084 -29.41528130]
[295.58374023 -21.45118713]
[288.90655518 -8.13710976]
[273.10412598 -7.36671400]
[260.39297485 0.59738064]
[247.68182373 8.56147575]
[234.97068787 16.52556992]
[222.25953674 24.48966599]
[209.69424438 32.68194962]
[197.27891541 41.09975815]
[184.86358643 49.51756287]
[172.44824219 57.93536758]
[160.03291321 66.35317230]
[147.61758423 74.77098083]
[135.35624695 83.41156006]
[123.25290680 92.27210236]
[111.14956665 101.13264465]
[99.20816803 110.21025848]
[87.43260956 119.50198364]
[75.65705109 128.79371643]
[63.88148499 138.08543396]
[66.07607269 146.35694885]
[65.83277130 154.88372803]
[63.18716812 162.96449280]
[58.37179947 169.93904114]
[51.79578400 175.24221802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[31 81]
[32 80]
[33 79]
[34 78]
[36 77]
[37 76]
[38 75]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
