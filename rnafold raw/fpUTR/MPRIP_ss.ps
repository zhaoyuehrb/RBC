%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGCUGAGCCCCUAGCCCGCCGGGAGCGCCAGGCCGGCCAGGCCUGCGCCGCCGCCGCCGCCGCCGUCGCCGCCGCGCCGACC\
) } def
/len { sequence length } bind def

/coor [
[214.96440125 186.59111023]
[202.52883911 178.20321655]
[190.09327698 169.81532288]
[177.65771484 161.42742920]
[165.22215271 153.03953552]
[150.34411621 152.33705139]
[143.22990417 138.20556641]
[130.79434204 129.81767273]
[118.35877991 121.42978668]
[105.92321014 113.04189301]
[91.99015045 111.87509155]
[85.68889618 99.39366913]
[76.61216736 97.11231232]
[72.97272491 90.48971558]
[60.83747482 81.67293549]
[48.70221710 72.85615540]
[37.29359818 77.03030396]
[25.42345428 75.09435272]
[16.12184143 67.66295624]
[11.70397568 56.73797607]
[13.19454193 45.17046738]
[1.70387542 35.52865219]
[-9.78679085 25.88683891]
[-25.33177757 22.94337463]
[-30.10799217 8.83532715]
[-41.59865952 -0.80648738]
[-53.08932495 -10.44830132]
[-68.63431549 -13.39176559]
[-73.41053009 -27.49981308]
[-84.90119171 -37.14162827]
[-101.13636780 -39.45489502]
[-106.99870300 -54.77041245]
[-96.45753479 -67.33288574]
[-80.35671234 -64.21912384]
[-75.25937653 -48.63229370]
[-63.76871109 -38.99048233]
[-49.04561615 -36.73666382]
[-43.44750977 -21.93896866]
[-31.95684433 -12.29715443]
[-20.46617889 -2.65533996]
[-5.74308157 -0.40152308]
[-0.14497706 14.39617252]
[11.34568977 24.03798676]
[22.83635712 33.67980194]
[40.76102066 30.86833191]
[55.43288803 42.06668091]
[57.51899719 60.72090530]
[69.65425110 69.53768158]
[81.78950500 78.35446167]
[94.07678986 86.95810699]
[108.00984955 88.12490845]
[114.31110382 100.60633087]
[126.74667358 108.99422455]
[139.18223572 117.38211823]
[151.61779785 125.77001190]
[167.38529968 127.07245636]
[173.61004639 140.60397339]
[186.04560852 148.99186707]
[198.48117065 157.37976074]
[210.91673279 165.76765442]
[223.35229492 174.15554810]
[236.71739197 180.96539307]
[250.81278992 186.09570312]
[264.90817261 191.22599792]
[280.52239990 188.67526245]
[289.83581543 200.29891968]
[303.93121338 205.42922974]
[319.54544067 202.87847900]
[328.85885620 214.50215149]
[342.95425415 219.63244629]
[359.00149536 216.25344849]
[369.74850464 228.64028931]
[364.13967896 244.05044556]
[347.94488525 246.63127136]
[337.82394409 233.72784424]
[323.72854614 228.59753418]
[309.12252808 231.51524353]
[298.80090332 219.52461243]
[284.70550537 214.39431763]
[270.09948730 217.31201172]
[259.77786255 205.32139587]
[245.68247986 200.19108582]
[231.58709717 195.06079102]
[236.49552917 209.23497009]
[231.41812134 223.34948730]
[218.60517883 231.14875793]
[203.73545837 229.17610168]
[193.39926147 218.30581665]
[192.17764282 203.35563660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[7 55]
[8 54]
[9 53]
[10 52]
[12 50]
[14 49]
[15 48]
[16 47]
[21 44]
[22 43]
[23 42]
[25 40]
[26 39]
[27 38]
[29 36]
[30 35]
[62 83]
[63 82]
[64 81]
[66 79]
[67 78]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
