%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGGCGGGGCGGCGCUCGGGGCUCGGCUGGCCUCGGCUCGCCUCGGCUGCGCUCGGCAGGCUGCGGUAAAUCCGGGCUUGCGGCCGCUGGCGUAGUCUGUGGCCGGGUGGUCGUUGCUGCGCGCCCCGAGCCCCGAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[28.00097084 362.14349365]
[24.79815674 376.79757690]
[32.21325302 391.02413940]
[25.58222389 405.63269043]
[9.99182606 409.41671753]
[-2.59832168 399.47351074]
[-2.53013515 383.43060303]
[10.14407921 373.59475708]
[13.34689236 358.94067383]
[7.66912174 353.25311279]
[4.70676231 345.68093872]
[5.02506018 337.46157837]
[8.64635754 329.97097778]
[15.03378105 324.49325562]
[23.16959572 322.00079346]
[27.62028694 307.67630005]
[32.07098007 293.35180664]
[28.45845985 278.90191650]
[39.94201279 268.01895142]
[44.39270401 253.69445801]
[48.84339905 239.36996460]
[53.29409027 225.04545593]
[57.74478149 210.72096252]
[62.19547272 196.39645386]
[66.64616394 182.07196045]
[71.09685516 167.74745178]
[75.54755402 153.42295837]
[79.99824524 139.09844971]
[84.44893646 124.77395630]
[88.89962769 110.44944763]
[90.34980774 95.51971436]
[88.73908997 80.60644531]
[87.12836456 65.69317627]
[85.51764679 50.77991104]
[83.90692902 35.86664200]
[82.29620361 20.95337296]
[73.12176514 8.06383705]
[79.44765472 -5.42068672]
[77.83693695 -20.33395576]
[76.22621155 -35.24722290]
[74.45513916 -50.14229965]
[72.52391815 -65.01745605]
[70.43276978 -79.87097931]
[68.18193817 -94.70114136]
[65.93110657 -109.53131104]
[63.68027496 -124.36147308]
[51.85158539 -138.43019104]
[58.79126358 -154.51509094]
[56.22186661 -169.29338074]
[53.65246964 -184.07168579]
[51.08307266 -198.84999084]
[48.51367569 -213.62829590]
[45.94427872 -228.40660095]
[43.37488174 -243.18489075]
[40.48810577 -257.90447998]
[37.28529358 -272.55856323]
[34.08248138 -287.21264648]
[30.87966537 -301.86672974]
[27.67685318 -316.52081299]
[24.47403908 -331.17486572]
[8.91794300 -337.72729492]
[0.39396349 -352.10437012]
[2.07560635 -368.56698608]
[13.10725021 -380.67858887]
[9.58987999 -395.26034546]
[-2.09727526 -406.76437378]
[2.28326344 -422.56762695]
[18.22517395 -426.41308594]
[29.32878304 -414.34487915]
[24.17165184 -398.77770996]
[27.68902397 -384.19595337]
[40.48434448 -380.24743652]
[49.71839142 -370.40060425]
[52.88830948 -357.16729736]
[49.05732346 -343.99700928]
[39.12811661 -334.37768555]
[42.33092880 -319.72360229]
[45.53374481 -305.06954956]
[48.73655701 -290.41546631]
[51.93936920 -275.76138306]
[55.14218521 -261.10729980]
[58.66810989 -257.78881836]
[60.10138321 -252.19497681]
[58.15318298 -245.75428772]
[60.72257996 -230.97599792]
[63.29197693 -216.19769287]
[65.86137390 -201.41938782]
[68.43077087 -186.64108276]
[71.00016785 -171.86277771]
[73.56956482 -157.08448792]
[83.30683899 -149.83114624]
[85.53405762 -137.48678589]
[78.51043701 -126.61230469]
[80.76126862 -111.78214264]
[83.01210022 -96.95197296]
[85.26293182 -82.12181091]
[89.40631866 -75.93588257]
[87.39907837 -66.94868469]
[89.33029938 -52.07352448]
[93.33963013 -45.79987717]
[91.13948059 -36.85794449]
[92.75020599 -21.94467545]
[94.36092377 -7.03140688]
[103.42015839 4.79143333]
[97.20947266 19.34265327]
[98.82019806 34.25592041]
[100.43091583 49.16918945]
[102.04163361 64.08245850]
[103.65235901 78.99572754]
[105.26307678 93.90899658]
[110.98164368 92.05709076]
[117.59490204 92.68133545]
[124.23726654 96.03433990]
[137.43745422 103.15860748]
[150.63763428 110.28287506]
[163.91369629 117.26470947]
[177.26411438 124.10330963]
[190.61453247 130.94190979]
[206.95693970 129.57893372]
[216.08496094 143.20285034]
[208.60848999 157.79853821]
[192.21865845 158.35121155]
[183.77592468 144.29232788]
[170.42550659 137.45372009]
[157.07510376 130.61512756]
[149.63400269 130.36322021]
[143.51336670 123.48305511]
[130.31318665 116.35878754]
[117.11299896 109.23452759]
[103.22412872 114.90014648]
[98.77343750 129.22463989]
[94.32274628 143.54914856]
[89.87205505 157.87364197]
[85.42136383 172.19815063]
[80.97066498 186.52264404]
[76.51997375 200.84715271]
[72.06928253 215.17164612]
[67.61859131 229.49615479]
[63.16790009 243.82064819]
[58.71720505 258.14514160]
[54.26651382 272.46966553]
[57.56069183 287.94412231]
[46.39548111 297.80249023]
[41.94478989 312.12698364]
[37.49409866 326.45147705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[15 145]
[16 144]
[17 143]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[29 131]
[30 130]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[38 103]
[39 102]
[40 101]
[41 99]
[42 98]
[43 96]
[44 95]
[45 94]
[46 93]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[64 71]
[65 70]
[113 129]
[114 128]
[115 127]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
