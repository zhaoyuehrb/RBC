%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGUUCAGUCAUACUGCACCAGCUGAGCAAUGCAUGGAGUGGACCUGUAGGCGACUUGCAUCGUCUUCAAC\
) } def
/len { sequence length } bind def

/coor [
[167.58726501 172.56245422]
[161.43022156 168.10902405]
[157.07666016 161.81651306]
[155.05212402 154.38259888]
[155.62149048 146.64596558]
[143.19384766 138.24633789]
[130.76618958 129.84672546]
[118.33855438 121.44709778]
[105.91090393 113.04747772]
[91.97895050 111.86752319]
[85.68946838 99.38017273]
[73.26182556 90.98054504]
[61.90729141 95.56639099]
[49.88868332 93.97262573]
[40.31613159 86.73284149]
[35.60695267 75.82582855]
[36.87574005 64.13608551]
[25.20520210 54.71278381]
[13.53466606 45.28948593]
[1.86413014 35.86618423]
[-11.45859623 38.83002472]
[-23.83744240 33.56504440]
[-30.73882866 22.24778748]
[-29.78036499 9.22389793]
[-41.04045105 -0.68622249]
[-56.92510986 -6.61191702]
[-55.62830734 -23.51619530]
[-39.02566147 -26.94964027]
[-31.13032913 -11.94630718]
[-19.87024498 -2.03618622]
[-3.29406953 -3.89636350]
[9.84916878 6.90774775]
[11.28742981 24.19564819]
[22.95796585 33.61894608]
[34.62850189 43.04224777]
[46.29903793 52.46554947]
[64.09513855 49.27344513]
[79.00531006 60.04020309]
[81.66144562 78.55290222]
[94.08909607 86.95252228]
[108.02104950 88.13247681]
[114.31053162 100.61982727]
[126.73817444 109.01945496]
[139.16581726 117.41907501]
[151.59346008 125.81869507]
[164.02110291 134.21832275]
[187.77879333 132.51496887]
[199.67933655 152.38612366]
[213.82250977 157.38322449]
[229.41197205 154.68528748]
[238.83464050 166.22058105]
[252.97779846 171.21766663]
[267.12097168 176.21476746]
[281.26412964 181.21186829]
[295.40728760 186.20896912]
[309.55044556 191.20605469]
[323.70050049 184.16676331]
[338.65682983 189.27395630]
[345.54614258 203.49763489]
[340.28109741 218.39913940]
[325.98538208 225.13768005]
[311.14035034 219.71539307]
[304.55334473 205.34922791]
[290.41018677 200.35212708]
[276.26702881 195.35502625]
[262.12387085 190.35792542]
[247.98069763 185.36083984]
[233.83753967 180.36373901]
[219.25967407 183.41909790]
[208.82540894 171.52638245]
[194.68225098 166.52929688]
[189.18363953 171.46243286]
[182.30755615 174.30401611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[11 40]
[12 39]
[17 36]
[18 35]
[19 34]
[20 33]
[24 30]
[25 29]
[48 71]
[49 70]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
