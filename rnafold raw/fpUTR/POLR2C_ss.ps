%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCGCUGACUGACUUCCGGUGUUGGCGGUGGCGCCGCGCAGUCACCGCGGAGCAGACGCGGAGGCUGGUGGCCCCUGGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[171.22056580 212.18748474]
[162.57998657 199.92614746]
[153.93940735 187.66481018]
[145.29882812 175.40347290]
[136.65823364 163.14213562]
[128.01765442 150.88081360]
[119.15711975 138.77746582]
[110.07950592 126.83607483]
[103.37055206 123.33655548]
[100.89902496 114.29570770]
[88.29129028 108.25115204]
[86.83964539 94.34487915]
[78.19905853 82.08354187]
[69.55847931 69.82220459]
[61.87571716 64.45372009]
[60.83671951 56.95857620]
[52.64443588 44.39328766]
[44.45214844 31.82800102]
[36.25986481 19.26271248]
[27.84205627 6.84737825]
[19.20147514 -5.41395664]
[10.56089211 -17.67529106]
[1.92031014 -29.93662643]
[-6.72027206 -42.19796371]
[-15.58081436 -54.30130005]
[-24.65842819 -66.24269867]
[-33.73604202 -78.18408966]
[-43.02776718 -89.95965576]
[-52.53057480 -101.56554413]
[-62.03338242 -113.17142487]
[-71.53619385 -124.77731323]
[-81.03900146 -136.38320923]
[-95.75162506 -144.80787659]
[-91.72905731 -161.27769470]
[-74.78932190 -161.97163391]
[-69.43311310 -145.88601685]
[-59.93030548 -134.28012085]
[-50.42749405 -122.67424011]
[-40.92468643 -111.06835175]
[-31.42187881 -99.46246338]
[-24.59095764 -96.20743561]
[-21.79464531 -87.26170349]
[-12.71703148 -75.32031250]
[-3.63941813 -63.37891388]
[3.06953573 -59.87939835]
[5.54106283 -50.83854294]
[14.18164539 -38.57720947]
[22.82222748 -26.31587410]
[31.46281052 -14.05453873]
[40.10339355 -1.79320407]
[46.68163300 1.94623876]
[48.82514954 11.07042789]
[57.01743698 23.63571548]
[65.20972443 36.20100403]
[73.40200806 48.76629257]
[81.81981659 61.18162537]
[90.46039581 73.44296265]
[99.10097504 85.70429230]
[111.70870972 91.74884796]
[113.16035461 105.65512085]
[122.02089691 117.75846100]
[131.09851074 129.69985962]
[138.97007751 134.78747559]
[140.27899170 142.24021912]
[148.91957092 154.50155640]
[157.56015015 166.76289368]
[166.20074463 179.02423096]
[174.84132385 191.28556824]
[183.48190308 203.54690552]
[198.80046082 206.37167358]
[207.38858032 218.92950439]
[204.60118103 233.51600647]
[218.87525940 240.33958435]
[219.88201904 255.20013428]
[228.52259827 267.46145630]
[237.16317749 279.72280884]
[252.26573181 286.11380005]
[254.01344299 302.41955566]
[240.60841370 311.86608887]
[225.84059143 304.73562622]
[224.90185547 288.36337280]
[216.26126099 276.10205078]
[207.62068176 263.84072876]
[193.96464539 257.89413452]
[192.33984375 242.15658569]
[177.66567993 239.87528992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 62]
[8 61]
[10 60]
[12 58]
[13 57]
[14 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 44]
[26 43]
[27 42]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[72 85]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
