%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACGUGACCCGGGCGCGCUGCGGCCGCCCGCGCGGACCCGGCGAGAGGCGGCGGCGGGAGCGGCGGUG\
) } def
/len { sequence length } bind def

/coor [
[76.21894836 253.10508728]
[63.39749908 261.68493652]
[47.97238159 261.94812012]
[34.86569595 253.81066895]
[28.25973701 239.86918640]
[30.26244354 224.57237244]
[40.23476028 212.80136108]
[54.99455643 208.31227112]
[58.98510742 193.85282898]
[62.97566223 179.39338684]
[61.25785065 174.61225891]
[62.77268219 168.69897461]
[68.02683258 163.84745789]
[65.25495148 149.21305847]
[77.34791565 139.01155090]
[82.61853790 124.96802521]
[87.88916016 110.92449951]
[84.60523224 94.61313629]
[97.34267426 83.90789795]
[101.97792816 69.64204407]
[106.61318207 55.37620163]
[111.24844360 41.11035156]
[108.15431976 25.59465027]
[119.44586945 15.88125324]
[124.08112335 1.61540568]
[128.71638489 -12.65044212]
[133.35163879 -26.91629028]
[137.98689270 -41.18213654]
[142.62214661 -55.44798660]
[146.93614197 -69.81424713]
[143.14901733 -85.17550659]
[153.99340820 -95.38571930]
[157.98396301 -109.84516144]
[161.97451782 -124.30460358]
[152.95285034 -137.07736206]
[154.30352783 -152.65650940]
[165.38880920 -163.68603516]
[180.97456360 -164.95814514]
[193.70167542 -155.87217712]
[197.56079102 -140.71826172]
[190.72975159 -126.65160370]
[176.43395996 -120.31404877]
[172.44340515 -105.85460663]
[168.45285034 -91.39516449]
[172.52540588 -77.06813812]
[161.39558411 -65.82369232]
[162.69583130 -58.29463959]
[156.88800049 -50.81272888]
[152.25273132 -36.54688263]
[147.61747742 -22.28103447]
[142.98222351 -8.01518726]
[138.34696960 6.25066042]
[133.71171570 20.51650810]
[137.13739014 35.01182175]
[125.51428986 45.74560547]
[120.87903595 60.01145554]
[116.24377441 74.27730560]
[111.60852051 88.54315186]
[116.29992676 99.42587280]
[112.38583374 110.61170959]
[101.93267822 116.19512177]
[96.66205597 130.23864746]
[91.39143372 144.28216553]
[93.78633118 159.92106628]
[82.07035828 169.11808777]
[77.43510437 183.38392639]
[73.44454956 197.84338379]
[69.45400238 212.30282593]
[79.82207489 223.72676086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[13 65]
[15 63]
[16 62]
[17 61]
[19 58]
[20 57]
[21 56]
[22 55]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 46]
[32 44]
[33 43]
[34 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
