%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGAUUGCCAUUUCCUUGGGACAGCCUGAAGAGAGAAUCGAAAGAAGUUCUUUUCAGUAUGGUUGCAUAACAUCGAGUCGGAGAUUGUGAAAUGUCCUUUGAGAAAAAUGUACGGGCAGGAAGAUGAAUAGGUGUCUGUUUGAUUAAGGCUCUCCUUCGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[78.18823242 382.11968994]
[75.08465576 397.00042725]
[66.51858521 409.55792236]
[53.79628372 417.87725830]
[38.85781097 420.68981934]
[23.98117065 417.56665039]
[11.43494701 408.98406982]
[3.13234687 396.25085449]
[0.33945623 381.30868530]
[3.48217082 366.43615723]
[12.08124924 353.90124512]
[24.82539558 345.61538696]
[39.77121735 342.84216309]
[42.85308075 328.16217041]
[45.93494415 313.48217773]
[49.01681137 298.80218506]
[52.09867477 284.12219238]
[43.76551437 271.83016968]
[46.68183899 256.89868164]
[59.63135147 248.24143982]
[62.71321487 233.56144714]
[65.79508209 218.88145447]
[68.87694550 204.20146179]
[63.91962433 190.15602112]
[74.32720947 178.23995972]
[77.40907288 163.55996704]
[80.49093628 148.87997437]
[83.57279968 134.19998169]
[86.65466309 119.51998901]
[77.58867645 107.56977081]
[62.62117767 106.58285522]
[47.65367889 105.59593964]
[32.68618011 104.60903168]
[17.71868324 103.62211609]
[2.75118423 102.63520050]
[-12.21631432 101.64829254]
[-27.18381310 100.66137695]
[-39.00961304 110.79982758]
[-54.17472458 109.58573914]
[-63.76731110 98.24916840]
[-78.73480988 97.26225281]
[-93.19846344 104.99108124]
[-106.97884369 96.10102081]
[-105.89987183 79.73740387]
[-91.07151031 72.73371887]
[-77.74789429 82.29476166]
[-62.78039932 83.28166962]
[-51.78233337 73.30278778]
[-36.58910370 74.09043884]
[-26.19689941 85.69387817]
[-11.22940063 86.68079376]
[3.73809719 87.66770935]
[18.70559502 88.65461731]
[33.67309189 89.64153290]
[48.64059067 90.62844849]
[63.60808945 91.61535645]
[78.57559204 92.60227203]
[65.91352081 84.56037140]
[52.12272644 78.66004181]
[44.05623245 66.01363373]
[44.52036285 51.02081299]
[53.35364914 38.89756775]
[67.48300171 33.86156082]
[81.99283600 37.66480255]
[91.83520508 48.98416138]
[93.58636475 63.87940216]
[97.37650299 78.39266205]
[101.00837708 63.83898926]
[104.64024353 49.28531265]
[108.27211761 34.73163223]
[96.27280426 23.38540649]
[91.64711761 7.62990189]
[95.56342316 -8.22019196]
[106.86416626 -19.87367821]
[122.40588379 -24.22460556]
[125.76335144 -38.84402466]
[129.12080383 -53.46344757]
[132.47827148 -68.08287048]
[135.83573914 -82.70228577]
[134.24699402 -89.19145203]
[135.94799805 -94.67057037]
[139.60423279 -97.80349731]
[143.50923157 -112.28627777]
[147.41423035 -126.76906586]
[143.53636169 -142.10766602]
[154.32019043 -152.38182068]
[158.22518921 -166.86459351]
[162.13018799 -181.34738159]
[157.39004517 -197.04652405]
[168.81153870 -208.81433105]
[184.64523315 -204.54508972]
[188.60276794 -188.63063049]
[176.61297607 -177.44238281]
[172.70797729 -162.95960999]
[168.80297852 -148.47682190]
[172.96015930 -134.17411804]
[161.89701843 -122.86406708]
[157.99201965 -108.38128662]
[154.08702087 -93.89850616]
[150.45515442 -79.34482574]
[147.09768677 -64.72540283]
[143.74023438 -50.10598373]
[140.38276672 -35.48656464]
[137.02531433 -20.86714363]
[147.63075256 -12.22617340]
[153.49839783 0.20482542]
[153.42807007 14.01713085]
[147.37635803 26.50697136]
[136.47633362 35.20479584]
[122.82579041 38.36350250]
[119.19392395 52.91718292]
[115.56204987 67.47085571]
[111.93018341 82.02453613]
[120.65539551 94.22579193]
[135.60168457 95.49407959]
[150.54797363 96.76236725]
[165.49424744 98.03065491]
[180.44053650 99.29895020]
[195.38682556 100.56723785]
[210.33311462 101.83552551]
[217.28576660 88.31779480]
[228.88542175 78.49352264]
[243.36322021 73.86083984]
[258.51141357 75.12619781]
[272.01998901 82.09662628]
[281.82897949 93.70920563]
[286.44262695 108.19308472]
[285.15734863 123.33958435]
[278.16912842 136.83897400]
[266.54367065 146.63269043]
[252.05372620 151.22727966]
[236.90893555 149.92207336]
[223.41874695 142.91612244]
[213.64033508 131.27778625]
[209.06481934 116.78181458]
[194.11853027 115.51351929]
[179.17224121 114.24523163]
[164.22596741 112.97694397]
[149.27967834 111.70865631]
[134.33338928 110.44036865]
[119.38710785 109.17207336]
[134.09892273 112.09822083]
[143.94123840 123.41762543]
[144.79519653 138.39329529]
[136.30343628 150.75816345]
[122.01961517 155.33772278]
[107.92127991 150.21551514]
[99.90836334 137.53509521]
[101.33465576 122.60185242]
[98.25279236 137.28184509]
[95.17092896 151.96183777]
[92.08906555 166.64183044]
[89.00720215 181.32182312]
[93.74407959 196.41726685]
[83.55693817 207.28332520]
[80.47506714 221.96331787]
[77.39320374 236.64331055]
[74.31134033 251.32330322]
[82.68608856 264.45727539]
[79.35151672 279.30096436]
[66.77866364 287.20407104]
[63.69680023 301.88406372]
[60.61493683 316.56405640]
[57.53307343 331.24404907]
[54.45120621 345.92404175]
[67.01996613 354.47357178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 165]
[14 164]
[15 163]
[16 162]
[17 161]
[20 158]
[21 157]
[22 156]
[23 155]
[25 153]
[26 152]
[27 151]
[28 150]
[29 149]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[40 47]
[41 46]
[67 113]
[68 112]
[69 111]
[70 110]
[75 104]
[76 103]
[77 102]
[78 101]
[79 100]
[82 99]
[83 98]
[84 97]
[86 95]
[87 94]
[88 93]
[114 141]
[115 140]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
