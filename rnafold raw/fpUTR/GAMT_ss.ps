%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCUGUUGGACCCGCCCCCGGCCCACAAGCCCCUGCAGGGAGCGGGCCCGGGCGGCGCGCGAUCGAGGUCGGGUCGCCGUCCAGCCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[91.27536011 106.27581024]
[76.44113922 104.05185699]
[61.60692215 101.82790375]
[46.77270508 99.60395050]
[31.93848610 97.37999725]
[17.10426903 95.15604401]
[2.27005005 92.93208313]
[-12.56416798 90.70812988]
[-27.39838600 88.48417664]
[-32.62458420 90.56671143]
[-37.59315872 90.31697083]
[-41.41370773 88.26618958]
[-43.56241226 85.23420715]
[-58.10341644 81.55192566]
[-72.64442444 77.86964417]
[-87.24432373 74.42828369]
[-101.89912415 71.22879028]
[-111.57482147 81.20227814]
[-124.82472229 85.01216125]
[-138.10867310 81.75318146]
[-147.93319702 72.39393616]
[-151.77020264 59.49235916]
[-166.31120300 55.81007385]
[-180.85221863 52.12779236]
[-194.29895020 60.43206406]
[-209.65979004 56.71453476]
[-217.82142639 43.18075562]
[-213.94171143 27.86007309]
[-200.32238770 19.84197807]
[-185.04357910 23.88346481]
[-177.16993713 37.58678818]
[-162.62892151 41.26907349]
[-148.08792114 44.95135498]
[-135.91372681 34.07628250]
[-119.49887085 32.51358032]
[-105.20828247 41.06547928]
[-98.69963074 56.57398605]
[-84.04482269 59.77347946]
[-76.69348145 58.09115601]
[-68.96213531 63.32863998]
[-54.42113495 67.01091766]
[-39.88013077 70.69319916]
[-25.17443085 73.64995575]
[-10.34021282 75.87391663]
[4.49400473 78.09786987]
[19.32822227 80.32182312]
[34.16244125 82.54577637]
[48.99665833 84.76972961]
[63.83087540 86.99368286]
[78.66509247 89.21764374]
[93.49931335 91.44159698]
[108.49111176 90.94564819]
[123.14591217 87.74614716]
[137.80072021 84.54665375]
[152.45552063 81.34716034]
[167.11032104 78.14766693]
[181.76512146 74.94817352]
[196.41992188 71.74868011]
[211.07472229 68.54918671]
[225.67462158 65.10782623]
[237.15312195 54.21954346]
[251.39033508 58.59572220]
[265.93133545 54.91344070]
[280.47235107 51.23115921]
[295.01336670 47.54887390]
[306.38427734 35.73218918]
[322.23611450 39.93347549]
[326.26187134 55.83081436]
[314.32019043 67.07038116]
[298.69564819 62.08987808]
[284.15463257 65.77216339]
[269.61361694 69.45444489]
[255.07261658 73.13672638]
[244.63420105 83.76162720]
[229.35690308 79.64882660]
[223.53079224 84.43723297]
[214.27423096 83.20398712]
[199.61941528 86.40348053]
[184.96461487 89.60297394]
[170.30981445 92.80246735]
[155.65501404 96.00196075]
[141.00021362 99.20146179]
[126.34540558 102.40095520]
[111.69060516 105.60044861]
[124.67510223 113.11062622]
[132.85244751 125.68564606]
[134.45045471 140.60028076]
[129.12281799 154.62226868]
[118.02412415 164.71281433]
[103.55965424 168.68511963]
[88.86411285 165.67829895]
[77.12226868 156.34400940]
[70.87878418 142.70512390]
[71.48673248 127.71745300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[13 42]
[14 41]
[15 40]
[16 38]
[17 37]
[22 33]
[23 32]
[24 31]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 75]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
