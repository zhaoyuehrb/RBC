%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCAGAGCAAUCACCACCAAGCCUGGAAUAACUGCAAGGGCUCUGCUGACAUCUUCCUGAGGUGCCAAGGAAAUGAGG\
) } def
/len { sequence length } bind def

/coor [
[215.07446289 171.89305115]
[213.72561646 163.06259155]
[200.19309998 156.59181213]
[186.66059875 150.12101746]
[173.12808228 143.65022278]
[159.59556580 137.17942810]
[146.06306458 130.70863342]
[132.53054810 124.23784637]
[118.99803925 117.76705933]
[105.46552277 111.29626465]
[109.35543823 125.78311157]
[104.26502991 139.89295959]
[92.02204895 148.55952454]
[77.02246857 148.67102051]
[64.65201569 140.18739319]
[59.35242844 126.15476990]
[63.02656937 111.61170197]
[74.35520935 101.78002167]
[89.27256775 100.19025421]
[78.36196136 89.89663696]
[62.78772354 90.18103027]
[51.86945724 79.58640289]
[51.69430542 64.73699951]
[40.78370285 54.44337463]
[27.72310829 53.99655533]
[18.83171272 44.97897720]
[18.58623886 32.72190475]
[2.78224993 32.81930542]
[-8.40286160 21.65378380]
[-8.33316612 5.84964943]
[2.94998527 -5.21678782]
[18.75250053 -4.98000622]
[29.69902611 6.41951609]
[29.29518509 22.21864510]
[46.34626007 25.86329079]
[51.07732773 43.53276825]
[61.98793030 53.82639313]
[76.82240295 53.13783264]
[88.03394318 63.42160416]
[88.65558624 78.98603058]
[99.56619263 89.27965546]
[111.93631744 97.76375580]
[125.46882629 104.23455048]
[139.00134277 110.70533752]
[152.53384399 117.17613220]
[166.06636047 123.64691925]
[179.59887695 130.11770630]
[193.13137817 136.58850098]
[206.66389465 143.05929565]
[220.19641113 149.53009033]
[242.09736633 145.57717896]
[254.75363159 162.99409485]
[269.12347412 167.29614258]
[283.49331665 171.59819031]
[292.88140869 171.07379150]
[298.33099365 176.35571289]
[312.52322388 181.21171570]
[326.71545410 186.06771851]
[340.90765381 190.92373657]
[355.09988403 195.77973938]
[367.12878418 186.12008667]
[382.47296143 184.51991272]
[396.23608398 191.48983765]
[404.02642822 204.80577087]
[403.35812378 220.21864319]
[394.44439697 232.81028748]
[380.12963867 238.56272888]
[364.98156738 235.64039612]
[353.83392334 224.97579956]
[350.24386597 209.97196960]
[336.05166626 205.11595154]
[321.85943604 200.25994873]
[307.66720581 195.40394592]
[293.47497559 190.54792786]
[279.19128418 185.96803284]
[264.82144165 181.66598511]
[250.45158386 177.36393738]
[244.02781677 182.85835266]
[235.81701660 185.23901367]
[227.26049805 184.00563049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[19 41]
[20 40]
[23 37]
[24 36]
[27 34]
[52 77]
[53 76]
[54 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
