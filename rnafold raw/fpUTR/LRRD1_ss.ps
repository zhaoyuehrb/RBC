%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAAAGGAAAAAACAUGAAAAUUAAAAUCAAGUUACAAUUUUGUAUUGGCAUAAAACAUAUCAGCAAAUAAG\
) } def
/len { sequence length } bind def

/coor [
[78.72962189 138.16535950]
[72.13770294 124.69143677]
[76.63921356 110.38282776]
[89.75997162 103.10971069]
[76.46691895 96.16027069]
[63.17386246 89.21083069]
[49.88080978 82.26139069]
[36.58775711 75.31195068]
[25.03694725 83.48054504]
[11.14875507 85.80025482]
[-2.30160880 81.86639404]
[-12.65198135 72.51808929]
[-17.88014030 59.66003036]
[-16.99875641 45.87460709]
[-29.98913765 38.37460709]
[-42.97951889 30.87460899]
[-58.79946899 30.67522049]
[-65.95295715 17.61088562]
[-78.94333649 10.11088657]
[-91.93372345 2.61088610]
[-105.59868622 9.77135372]
[-120.96358490 8.38452435]
[-133.12554932 -1.10706854]
[-138.20372009 -15.67469311]
[-134.57768250 -30.66987228]
[-123.40449524 -41.30770111]
[-108.24947357 -44.19368362]
[-93.94853973 -38.40691757]
[-85.06505585 -25.79393578]
[-84.43372345 -10.37949467]
[-71.44333649 -2.87949491]
[-58.45295715 4.62050486]
[-43.56216812 4.28344250]
[-35.47951889 17.88422775]
[-22.48913765 25.38422775]
[-9.49875641 32.88422775]
[4.15114307 24.49485588]
[20.25968170 24.04687881]
[34.51813889 31.75296402]
[43.06625366 45.63229752]
[43.53719711 62.01889420]
[56.83024979 68.96833038]
[70.12330627 75.91777802]
[83.41635895 82.86721802]
[96.70941162 89.81665802]
[110.76863861 95.04523468]
[125.37232208 98.47049713]
[139.97601318 101.89575958]
[154.57969666 105.32102203]
[169.78207397 100.93943787]
[180.40625000 111.37859344]
[195.00993347 114.80385590]
[204.18367004 102.64810181]
[217.51164246 95.28024292]
[232.68467712 93.97680664]
[247.07395935 98.96362305]
[258.18646240 109.37670135]
[264.09689331 123.41189575]
[263.78118896 138.63754272]
[257.29409790 152.41569519]
[245.75952148 162.35920715]
[231.17590332 166.74531555]
[216.06994629 164.81407166]
[203.05882263 156.90011597]
[194.39682007 144.37455750]
[191.58467102 129.40753174]
[176.98098755 125.98227692]
[162.82316589 130.60885620]
[151.15443420 119.92470551]
[136.55075073 116.49944305]
[121.94705963 113.07418060]
[107.34337616 109.64891815]
[112.52337646 123.72612000]
[106.58274078 137.49960327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[14 36]
[15 35]
[16 34]
[18 32]
[19 31]
[20 30]
[46 72]
[47 71]
[48 70]
[49 69]
[51 67]
[52 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
