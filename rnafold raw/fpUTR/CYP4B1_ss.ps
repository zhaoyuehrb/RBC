%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUGCAUGGGUCCAGAGUAUAAAGGAACCCAGGAGCAGCUGAAGGCAGGUCAGAUGAAGGCUAGGUGGCUGGAACUGCAACC\
) } def
/len { sequence length } bind def

/coor [
[13.17760086 177.70693970]
[4.89033508 180.36894226]
[-3.76918268 181.12953186]
[-12.37090015 179.95602417]
[-20.48876190 176.91163635]
[-27.72181129 172.15219116]
[-33.71399307 165.91802979]
[-38.17169189 158.52194214]
[-40.87808990 150.33349609]
[-55.87553024 150.61067200]
[-70.87297058 150.88786316]
[-85.87040710 151.16503906]
[-100.86784363 151.44223022]
[-115.85759735 151.99649048]
[-130.83454895 152.82766724]
[-137.69346619 166.56997681]
[-150.51345825 175.02830505]
[-165.84600830 175.92742920]
[-179.56674194 169.02548218]
[-187.98484802 156.17904663]
[-188.83590698 140.84375000]
[-181.89099121 127.14471436]
[-169.01823425 118.76691437]
[-153.68034363 117.96392822]
[-140.00314331 124.95175934]
[-131.66572571 137.85070801]
[-116.68877411 137.01954651]
[-110.02570343 133.41845703]
[-101.14502716 136.44477844]
[-86.14759064 136.16760254]
[-71.15015411 135.89041138]
[-56.15271378 135.61323547]
[-41.15527344 135.33604431]
[-30.89105797 114.98945618]
[-10.87829494 103.86921692]
[12.03075886 105.91876221]
[29.91552734 120.54879761]
[43.80009460 114.87262726]
[57.68465805 109.19646454]
[71.56922150 103.52029419]
[73.60430908 88.86585999]
[82.67954254 77.18107605]
[96.37441254 71.58245850]
[111.03629303 73.56324768]
[122.75460815 82.59513855]
[136.63917542 76.91896820]
[146.48526001 64.53489685]
[161.19398499 66.88069153]
[175.07853699 61.20452881]
[188.62724304 54.76771927]
[201.79846191 47.59004593]
[214.96968079 40.41237259]
[228.14089966 33.23469925]
[231.05737305 17.87148857]
[243.19944763 8.01734257]
[258.83401489 8.32508850]
[270.57888794 18.64941597]
[272.88851929 34.11549377]
[264.67236328 47.42071533]
[249.80984497 52.28276062]
[235.31857300 46.40591812]
[222.14735413 53.58359146]
[208.97613525 60.76126480]
[195.80493164 67.93893433]
[194.48075867 71.45569611]
[191.24447632 74.42687988]
[186.41351318 75.89139557]
[180.75471497 75.08909607]
[166.87014771 80.76525879]
[158.01718140 92.74333191]
[142.31533813 90.80353546]
[128.43077087 96.47970581]
[126.39569092 111.13414001]
[117.32045746 122.81892395]
[103.62558746 128.41754150]
[88.96370697 126.43675232]
[77.24539185 117.40486145]
[63.36082458 123.08103180]
[49.47625732 128.75718689]
[35.59169388 134.43336487]
[36.28581238 143.17890930]
[35.02853012 151.84982300]
[31.88723755 160.01666260]
[27.02251625 167.27607727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 27]
[15 26]
[37 80]
[38 79]
[39 78]
[40 77]
[45 72]
[46 71]
[48 69]
[49 68]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
