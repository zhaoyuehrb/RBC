%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGCGGCUGCUGCCGGGCCGGGCGGCGGGAGCGCGCGGCGUCGGAGGCCGCCCCUCUGCGGAACGCCGAGAGCCCCGGGAGAGUGAAGGGCCGGGGAGGACAAGGCGCCCCGGGCCCAAAGCGCGCCGGCUCCCGCUCGGGCGGCCGCGGAC\
) } def
/len { sequence length } bind def

/coor [
[41.55014801 810.86688232]
[30.66254044 799.41107178]
[31.14783287 783.61425781]
[42.71810913 772.84832764]
[35.23867035 759.96783447]
[43.25229645 746.32629395]
[43.55435181 731.32934570]
[43.85640717 716.33239746]
[44.15846252 701.33538818]
[44.46051788 686.33843994]
[44.76257324 671.34149170]
[45.06462860 656.34454346]
[45.36668396 641.34759521]
[42.72241974 637.30792236]
[42.62727737 631.55328369]
[45.99499893 625.75610352]
[46.90067673 610.78350830]
[47.80635452 595.81085205]
[48.71203232 580.83819580]
[49.61771011 565.86560059]
[50.52338791 550.89294434]
[47.77226639 543.98681641]
[51.60105133 535.62890625]
[52.80805206 520.67749023]
[54.01504898 505.72616577]
[51.40355682 498.76599121]
[55.39986801 490.48687744]
[56.90769958 475.56286621]
[58.41553116 460.63882446]
[51.99679184 447.19827271]
[61.08212280 434.24575806]
[62.58995056 419.32174683]
[56.17121506 405.88116455]
[65.25654602 392.92864990]
[66.76437378 378.00463867]
[68.27220154 363.08059692]
[69.78003693 348.15658569]
[57.36956787 334.75610352]
[58.65919495 316.21856689]
[73.29783630 304.26339722]
[74.20351410 289.29074097]
[75.10919189 274.31811523]
[72.35807037 267.41195679]
[76.18685150 259.05404663]
[77.39385223 244.10267639]
[78.60085297 229.15132141]
[79.80784607 214.19996643]
[77.19635773 207.23980713]
[81.19267273 198.96067810]
[82.70050049 184.03666687]
[84.20832825 169.11264038]
[81.73752594 162.10130310]
[85.89974213 153.90432739]
[87.70779419 139.01370239]
[89.51584625 124.12306976]
[70.35932922 104.73484039]
[77.58724976 74.79312897]
[70.61640930 61.51128769]
[63.64555740 48.22944641]
[56.67470932 34.94760513]
[49.87628174 28.75924683]
[49.70027161 21.32737732]
[42.99829483 7.90785837]
[36.29631805 -5.51166153]
[22.32433701 -14.09744930]
[23.04427147 -30.48078537]
[37.71551895 -37.80789948]
[51.24555206 -28.54128456]
[49.71583939 -12.21363831]
[56.41781616 1.20588112]
[63.11979294 14.62540054]
[69.95655060 27.97675705]
[76.92739868 41.25859833]
[83.89824677 54.54043961]
[90.86909485 67.82228088]
[105.85009003 67.06740570]
[111.45050812 53.15211868]
[117.05093384 39.23682785]
[122.65135193 25.32153893]
[128.25177002 11.40625000]
[133.85220337 -2.50903916]
[123.52958679 -13.75209999]
[119.11563110 -28.36304665]
[121.48673248 -43.44086456]
[130.17210388 -55.99184418]
[143.44725037 -63.52397919]
[158.67640686 -64.54175568]
[172.83578491 -58.84309769]
[183.11404419 -47.55947495]
[187.47042847 -32.93125916]
[185.03996277 -17.86289215]
[176.30523682 -5.34621286]
[163.00051880 2.13358521]
[147.76748657 3.09138274]
[142.16706848 17.00667191]
[136.56663513 30.92196083]
[130.96621704 44.83724976]
[125.36579895 58.75254059]
[119.76537323 72.66783142]
[126.08699799 80.11488342]
[129.85353088 88.83436584]
[130.88049316 98.00515747]
[129.23361206 106.81056213]
[125.21009827 114.51090240]
[119.29985809 120.50564575]
[112.13118744 124.37981415]
[104.40647888 125.93112183]
[102.59842682 140.82174683]
[100.79037476 155.71238708]
[99.13235474 170.62046814]
[97.62451935 185.54449463]
[96.11669159 200.46850586]
[94.75920868 215.40696716]
[93.55220795 230.35832214]
[92.34521484 245.30967712]
[91.13821411 260.26104736]
[90.08182526 275.22378540]
[89.17614746 290.19644165]
[88.27046967 305.16906738]
[97.78553009 312.40985107]
[102.55023956 323.24508667]
[101.47706604 334.91217041]
[94.95099640 344.49761963]
[84.70405579 349.66442871]
[83.19622803 364.58843994]
[81.68840027 379.51245117]
[80.18056488 394.43649292]
[86.49145508 408.94451904]
[77.51397705 420.82955933]
[76.00614166 435.75360107]
[82.31703186 450.26162720]
[73.33955383 462.14666748]
[71.83172607 477.07067871]
[70.32389069 491.99472046]
[68.96640778 506.93316650]
[67.75940704 521.88452148]
[66.55241394 536.83587646]
[65.49601746 551.79864502]
[64.59033966 566.77124023]
[63.68466568 581.74389648]
[62.77898788 596.71655273]
[61.87331009 611.68914795]
[60.96763229 626.66180420]
[60.36364365 641.64965820]
[60.06158829 656.64660645]
[59.75953293 671.64355469]
[59.45747757 686.64050293]
[59.15542221 701.63745117]
[58.85336685 716.63439941]
[58.55130768 731.63140869]
[58.24925232 746.62835693]
[65.70709229 760.58154297]
[57.71506882 773.15039062]
[68.84246826 784.37347412]
[68.69129181 800.17700195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 153]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 146]
[12 145]
[13 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[23 137]
[24 136]
[25 135]
[27 134]
[28 133]
[29 132]
[31 130]
[32 129]
[34 127]
[35 126]
[36 125]
[37 124]
[40 119]
[41 118]
[42 117]
[44 116]
[45 115]
[46 114]
[47 113]
[49 112]
[50 111]
[51 110]
[53 109]
[54 108]
[55 107]
[57 75]
[58 74]
[59 73]
[60 72]
[62 71]
[63 70]
[64 69]
[76 99]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
