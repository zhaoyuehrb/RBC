%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUAACUUCCGGUUGCUGUGCUGAGUCGGAAGUGGGAACCCUUCGGCCGCUGAGAUUCUGUCGUGUCGUCGCUGCUGGCACUUCAGGCUCUGCCUCUCCCACUAGGUCUGGAUGGAGGAUACCUUAAAGUGAA\
) } def
/len { sequence length } bind def

/coor [
[98.27557373 131.93128967]
[98.74497223 116.93863678]
[91.14517212 129.87088013]
[83.69524384 142.89004517]
[76.39617157 155.99438477]
[69.09710693 169.09870911]
[61.79803848 182.20304871]
[54.49897385 195.30738831]
[47.19990540 208.41172791]
[44.77473068 225.19131470]
[27.97953224 227.50598145]
[21.10595894 212.00790405]
[34.09556961 201.11265564]
[41.39463806 188.00831604]
[48.69370270 174.90397644]
[55.99277115 161.79965210]
[63.29183960 148.69531250]
[70.59090424 135.59097290]
[71.10212708 128.15005493]
[78.21292877 122.27108002]
[85.81272888 109.33883667]
[86.50547791 94.35484314]
[80.13133240 80.77653503]
[67.26308441 71.57225800]
[68.85868073 56.76336288]
[62.48453522 43.18506241]
[56.11038971 29.60676003]
[49.73624420 16.02845955]
[43.36209869 2.45015764]
[30.49385071 -6.75412321]
[32.08944702 -21.56301689]
[25.71529961 -35.14131927]
[19.34115410 -48.71961975]
[12.96700764 -62.29792023]
[6.59286213 -75.87622070]
[0.21871647 -89.45452118]
[-4.63187456 -75.26045227]
[-16.79579544 -66.48326111]
[-31.79523849 -66.35403442]
[-44.10858154 -74.92034149]
[-49.20301056 -89.02873230]
[-45.20315552 -103.48561096]
[-33.58145142 -112.96906281]
[-18.61610031 -113.98803711]
[-5.81544065 -106.16657257]
[-9.58604813 -120.68492126]
[-13.35665607 -135.20327759]
[-17.12726402 -149.72161865]
[-20.89787102 -164.23997498]
[-31.85572815 -175.65206909]
[-27.56617546 -189.91563416]
[-31.33678436 -204.43397522]
[-36.56727219 -212.03448486]
[-35.02267456 -219.33125305]
[-38.45693588 -233.93283081]
[-42.05960846 -248.49375916]
[-45.83021545 -263.01211548]
[-49.60082245 -277.53045654]
[-64.09269714 -283.07711792]
[-72.52839661 -296.10089111]
[-71.66422272 -311.59387207]
[-61.83246994 -323.59872437]
[-46.81364822 -327.49929810]
[-32.38279724 -321.79577637]
[-24.08887672 -308.68127441]
[-25.12106895 -293.19854736]
[-35.08246994 -281.30108643]
[-31.31186485 -266.78271484]
[-27.54125595 -252.26437378]
[-22.77240944 -246.52967834]
[-23.85536385 -237.36709595]
[-20.42110634 -222.76551819]
[-16.81843185 -208.20458984]
[-13.04782486 -193.68623352]
[-2.35966563 -183.31259155]
[-6.37951946 -168.01058960]
[-2.60891199 -153.49223328]
[1.16169548 -138.97387695]
[4.93230295 -124.45552826]
[8.70291042 -109.93717957]
[13.79701805 -95.82866669]
[20.17116356 -82.25036621]
[26.54530907 -68.67206573]
[32.91945648 -55.09376526]
[39.29360199 -41.51546478]
[45.66774750 -27.93716431]
[58.08007050 -19.70409393]
[56.94039917 -3.92398810]
[63.31454468 9.65431309]
[69.68869019 23.23261452]
[76.06283569 36.81091690]
[82.43698120 50.38921738]
[94.84931183 58.62228775]
[93.70963287 74.40238953]
[100.08377838 87.98069000]
[111.52278900 85.65198517]
[124.16268921 94.48197937]
[138.49140930 98.91906738]
[152.82012939 103.35616302]
[167.14884949 107.79325104]
[181.47756958 112.23034668]
[195.33514404 105.11659241]
[209.80329895 109.82055664]
[216.49977112 123.07546997]
[230.82849121 127.51255798]
[245.15721130 131.94964600]
[261.02066040 127.79241180]
[272.35873413 139.64064026]
[267.50775146 155.30589294]
[251.45802307 158.67309570]
[240.72012329 146.27836609]
[226.39140320 141.84127808]
[212.06268311 137.40419006]
[199.04727173 144.55503845]
[184.45269775 140.25930786]
[177.04048157 126.55906677]
[162.71176147 122.12197113]
[148.38304138 117.68488312]
[134.05432129 113.24778748]
[119.72560120 108.81069946]
[130.17297363 119.57416534]
[140.62036133 130.33763123]
[154.42883301 136.19648743]
[165.23918152 146.59535217]
[171.62924194 160.16616821]
[172.75833130 175.12361145]
[168.47795105 189.49992371]
[159.35116577 201.40379333]
[146.57870483 209.26918030]
[131.84088135 212.06132507]
[117.07652283 209.41293335]
[104.22801971 201.67239380]
[94.98567963 189.85803223]
[90.56538391 175.52412415]
[91.54866791 160.55638123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[22 95]
[23 94]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[51 74]
[52 73]
[54 72]
[55 71]
[56 69]
[57 68]
[58 67]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
