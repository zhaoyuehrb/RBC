%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUCCCGGGCCGGGAGCGCUGGGCCUGCCGGGAAGGCGCUGGGACGGUUACCCAGCGGGCCGCCGGCGGUCGUGGGCAAGCUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[114.21910858 235.20785522]
[100.05797577 230.26191711]
[88.34386444 220.89283752]
[80.40708923 208.16461182]
[77.14897919 193.52273560]
[78.93930054 178.63081360]
[67.88499451 188.76995850]
[56.83069611 198.90911865]
[45.77639771 209.04827881]
[34.72209930 219.18742371]
[27.13638115 234.34965515]
[10.46676159 231.25772095]
[8.82325745 214.38362122]
[24.58294296 208.13313293]
[35.63724518 197.99397278]
[46.69154358 187.85481262]
[57.74584198 177.71566772]
[68.80014038 167.57650757]
[76.67070770 154.80725098]
[80.76100159 140.37570190]
[76.78747559 126.02089691]
[87.99467468 114.85356140]
[81.02297974 102.15152740]
[84.97407532 88.21111298]
[97.57378387 81.05614471]
[101.66407776 66.62459564]
[105.75437164 52.19305038]
[109.84466553 37.76150513]
[109.18070984 28.43038177]
[114.33322144 22.90702820]
[118.91920471 8.62526321]
[123.50518036 -5.65650129]
[128.09115601 -19.93826675]
[132.67713928 -34.22003174]
[121.69358826 -44.76152420]
[116.39771271 -58.96858978]
[117.78971863 -74.00463104]
[125.54018402 -86.89227295]
[138.06593323 -95.10292816]
[152.85321045 -97.05285645]
[157.43917847 -111.33461761]
[162.02516174 -125.61638641]
[166.61114502 -139.89814758]
[171.19711304 -154.17991638]
[175.78309631 -168.46168518]
[180.36906433 -182.74343872]
[171.88412476 -195.87889099]
[173.87887573 -211.38871765]
[185.41143799 -221.94967651]
[201.03651428 -222.57521057]
[213.37640381 -212.96994019]
[216.60458374 -197.66918945]
[209.19682312 -183.89750671]
[194.65083313 -178.15747070]
[190.06486511 -163.87570190]
[185.47888184 -149.59393311]
[180.89289856 -135.31217957]
[176.30693054 -121.03041077]
[171.72094727 -106.74864197]
[167.13496399 -92.46688080]
[178.02262878 -82.27254486]
[183.42665100 -68.30451202]
[182.22521973 -53.31393051]
[174.60322571 -40.27837753]
[162.02624512 -31.81042099]
[146.95889282 -29.63405418]
[142.37292480 -15.35228920]
[137.78694153 -1.07052398]
[133.20097351 13.21124077]
[128.61499023 27.49300575]
[124.27620697 41.85179901]
[120.18591309 56.28334427]
[116.09561920 70.71488953]
[112.00532532 85.14643860]
[118.97702026 97.84847260]
[115.02592468 111.78888702]
[102.42621613 118.94385529]
[106.10717773 134.33090210]
[95.19255066 144.46598816]
[91.10225677 158.89753723]
[103.60215759 150.60581970]
[118.14658356 146.93708801]
[133.08381653 148.30798340]
[146.71748352 154.56280518]
[157.49931335 164.99124146]
[164.20484924 178.40898132]
[166.07260132 193.29223633]
[162.89044189 207.95082092]
[155.01974487 220.72001648]
[143.35437012 230.14968872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[19 80]
[20 79]
[22 77]
[25 74]
[26 73]
[27 72]
[28 71]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
