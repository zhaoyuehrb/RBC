%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUUGCCAUGGGGACGGAGCUUGGGUGGCAACCAGAACUAGGGAGCUGGUGGAGAAGGUGGCGGCCGCUGGAAGGAGGCCCGGGAGGUGGCUGAGGGGUCCAGGCGGCGGGACGACUCUGGCCUUUUGAAGACCGGGAGGAAACUCUACAGAGAAGA\
) } def
/len { sequence length } bind def

/coor [
[59.76620483 100.85224915]
[60.18725586 94.13227844]
[46.01516724 89.21782684]
[31.84307671 84.30337524]
[17.67098618 79.38892365]
[3.49889493 74.47447205]
[-10.67319584 69.56002045]
[-24.84528732 64.64556885]
[-39.01737595 59.73111343]
[-56.98719406 63.64059067]
[-67.97706604 49.98722458]
[-83.49276733 53.08134842]
[-93.20616150 41.78979492]
[-107.47200775 37.15453720]
[-121.73786163 32.51928329]
[-130.91978455 32.84006500]
[-136.23670959 27.65044212]
[-147.02894592 38.38771057]
[-161.35449219 43.35420227]
[-176.35438538 41.61545563]
[-189.05967712 33.56954193]
[-196.97898865 20.85758018]
[-198.58702087 6.02923965]
[-212.75910950 1.11478710]
[-228.33256531 3.90368223]
[-237.82240295 -7.57640409]
[-251.99449158 -12.49085712]
[-266.16659546 -17.40530968]
[-280.33868408 -22.31976318]
[-294.51077271 -27.23421478]
[-308.68286133 -32.14866638]
[-322.77087402 -25.50297546]
[-337.07339478 -30.68881607]
[-343.32223511 -44.16055298]
[-357.49432373 -49.07500458]
[-371.66641235 -53.98945999]
[-390.90417480 -42.42491531]
[-412.19216919 -48.63205338]
[-421.95724487 -68.23756409]
[-436.60873413 -71.45220184]
[-451.26022339 -74.66683960]
[-465.91171265 -77.88147736]
[-480.56320190 -81.09611511]
[-496.02023315 -75.61770630]
[-508.31579590 -86.46900940]
[-504.80130005 -102.48713684]
[-489.09216309 -107.19400787]
[-477.34857178 -95.74760437]
[-462.69708252 -92.53296661]
[-448.04559326 -89.31832886]
[-433.39410400 -86.10369110]
[-418.74261475 -82.88905334]
[-413.91583252 -89.47135162]
[-407.32647705 -94.34571838]
[-399.55578613 -97.05721283]
[-391.29666138 -97.34277344]
[-383.29190063 -95.15659332]
[-376.26733398 -90.67608643]
[-370.86614990 -84.28762817]
[-367.58987427 -76.55332184]
[-366.75195312 -68.16155243]
[-352.57986450 -63.24709702]
[-338.40777588 -58.33264542]
[-325.16018677 -65.04360962]
[-310.71765137 -60.26154709]
[-303.76840210 -46.32075882]
[-289.59631348 -41.40630722]
[-275.42422485 -36.49185181]
[-261.25213623 -31.57740021]
[-247.08003235 -26.66294861]
[-232.90794373 -21.74849510]
[-218.34817505 -24.88890457]
[-207.84466553 -13.05730343]
[-193.67256165 -8.14285088]
[-183.22961426 -18.79227066]
[-169.14054871 -23.87239265]
[-154.18168640 -22.32521629]
[-141.32557678 -14.40433884]
[-133.15020752 -1.63521647]
[-131.32225037 13.47835255]
[-117.10260010 18.25343704]
[-102.83675385 22.88869095]
[-88.57090759 27.52394676]
[-74.07559204 24.09827995]
[-63.34180832 35.72137833]
[-52.39173508 30.50514412]
[-40.44638062 34.28966141]
[-34.10292435 45.55902100]
[-19.93083382 50.47347641]
[-5.75874329 55.38792801]
[8.41334724 60.30237961]
[22.58543777 65.21683502]
[36.75753021 70.13128662]
[50.92961884 75.04573822]
[65.10170746 79.96018982]
[81.92313385 64.04570007]
[104.73003387 60.03612518]
[125.97076416 69.25907898]
[138.61224365 88.66073608]
[153.54002380 87.19047546]
[168.46778870 85.72022247]
[183.39555359 84.24996185]
[198.29158020 82.48690033]
[213.15013123 80.43171692]
[228.00866699 78.37653351]
[242.86720276 76.32135010]
[255.47712708 66.76622009]
[269.14447021 72.68675995]
[284.00302124 70.63157654]
[298.86157227 68.57639313]
[311.47149658 59.02126312]
[325.13882446 64.94180298]
[339.99737549 62.88661957]
[354.85592651 60.83143234]
[367.46136475 50.34170151]
[382.75280762 56.26659393]
[384.99969482 72.51108551]
[371.89062500 82.36424255]
[356.91110229 75.68997192]
[342.05255127 77.74515533]
[327.19403076 79.80034637]
[315.64688110 89.20847321]
[300.91674805 83.43492889]
[286.05819702 85.49011993]
[271.19967651 87.54530334]
[259.65252686 96.95343018]
[244.92239380 91.17988586]
[230.06385803 93.23507690]
[215.20530701 95.29026031]
[200.34677124 97.34544373]
[196.77490234 100.58647919]
[191.11373901 101.58443451]
[184.86581421 99.17773438]
[169.93804932 100.64799500]
[155.01026917 102.11824799]
[140.08250427 103.58850861]
[136.86997986 116.12726593]
[129.84315491 126.99760437]
[138.89649963 138.95741272]
[147.94982910 150.91722107]
[157.00317383 162.87702942]
[172.31471252 168.74974060]
[174.61698914 184.98648071]
[161.54161072 194.88427734]
[146.53941345 188.26113892]
[145.04336548 171.93037415]
[135.99002075 159.97056580]
[126.93668365 148.01075745]
[117.88334656 136.05094910]
[111.62238312 138.52796936]
[105.03607178 139.92646790]
[98.30878448 140.20726013]
[91.62883759 139.36251831]
[85.18322754 137.41587830]
[79.15239716 134.42182922]
[73.70516205 130.46417236]
[68.99401855 125.65373230]
[65.15084839 120.12513733]
[62.28322983 114.03317261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[11 85]
[13 83]
[14 82]
[15 81]
[17 80]
[23 74]
[24 73]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[34 63]
[35 62]
[36 61]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[99 136]
[100 135]
[101 134]
[102 133]
[103 130]
[104 129]
[105 128]
[106 127]
[108 125]
[109 124]
[110 123]
[112 121]
[113 120]
[114 119]
[138 149]
[139 148]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
