%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCAGCGCGUGUCGGCGUCCGGAGGAGGUGACCUAGCCGCCGCGGUCCUAGAAGGGAGAAGUGGAGAGAGACCGCUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[68.57529449 308.96261597]
[68.15830994 293.16384888]
[79.09535217 281.75521851]
[70.89305115 269.32254028]
[78.11512756 255.24588013]
[77.56085205 240.25613403]
[77.00658417 225.26637268]
[76.45230865 210.27662659]
[75.89804077 195.28686523]
[72.42068481 188.55838013]
[75.61061096 179.73515320]
[75.61061096 164.73515320]
[67.87330627 152.00787354]
[75.61061096 138.20770264]
[75.61061096 123.20771027]
[67.95114136 110.31070709]
[54.77992249 103.13303375]
[41.60870361 95.95536041]
[28.05999565 89.51855469]
[14.17543125 83.84238434]
[0.29086637 78.16622162]
[-13.69621658 72.74759674]
[-27.16373634 80.69492340]
[-42.58031845 78.07518768]
[-52.66672516 66.12535858]
[-52.66046524 50.48777771]
[-42.56449127 38.54603195]
[-27.14581680 35.93864441]
[-13.68466568 43.89675140]
[-8.53698349 58.66277313]
[-0.99298096 57.99013519]
[5.96703196 64.28165436]
[19.85159683 69.95782471]
[33.73616028 75.63398743]
[37.29886246 74.43891144]
[41.64652252 75.07075500]
[45.83359146 77.89058685]
[48.78637695 82.78414154]
[61.95759583 89.96181488]
[75.12881470 97.13948822]
[89.30026245 80.23040009]
[108.91867065 82.18410492]
[120.18865204 72.28523254]
[131.45863342 62.38636780]
[142.72860718 52.48749924]
[143.46701050 35.12619400]
[156.20306396 23.80192184]
[172.86439514 25.04936981]
[183.76089478 14.74081993]
[194.65740967 4.43226957]
[205.55390930 -5.87628078]
[209.71461487 -21.73883438]
[225.60159302 -25.80525970]
[236.87168884 -13.89236832]
[231.93119812 1.74487913]
[215.86245728 5.02022266]
[204.96595764 15.32877350]
[194.06945801 25.63732338]
[183.17294312 35.94587326]
[184.60363770 48.89167023]
[178.15476990 60.43282700]
[166.02528381 66.16735840]
[152.62747192 63.75747681]
[141.35749817 73.65634918]
[130.08752441 83.55521393]
[118.81754303 93.45407867]
[120.60515594 104.99297333]
[115.49560547 116.28520203]
[104.44137573 123.33840179]
[90.61061096 123.20771027]
[90.61061096 138.20770264]
[98.34790802 152.00787354]
[90.61061096 164.73515320]
[90.61061096 179.73515320]
[90.88779449 194.73258972]
[91.44206238 209.72235107]
[91.99633789 224.71209717]
[92.55061340 239.70185852]
[93.10488129 254.69161987]
[101.34683990 268.19647217]
[94.08511353 281.20092773]
[105.83483887 291.77069092]
[106.58577728 307.55712891]
[95.89241028 319.19445801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[11 74]
[12 73]
[14 71]
[15 70]
[16 40]
[17 39]
[18 38]
[19 34]
[20 33]
[21 32]
[22 30]
[42 66]
[43 65]
[44 64]
[45 63]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
