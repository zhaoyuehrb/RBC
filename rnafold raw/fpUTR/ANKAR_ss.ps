%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAAGAAGCUGAGCAGAUGCUGGUGCCAUGCUUGUACAGCCUGCAGAAUUAAGCUUCAAAAAGGACACACUAGAUUUAAUUAGAA\
) } def
/len { sequence length } bind def

/coor [
[207.61674500 324.65698242]
[202.77629089 310.42254639]
[200.34490967 295.58547974]
[200.38894653 280.55059814]
[202.90718079 265.72802734]
[207.83093262 251.52217102]
[215.02587891 238.32055664]
[224.29573059 226.48333740]
[214.16729736 215.41920471]
[204.03887939 204.35507202]
[193.91044617 193.29095459]
[183.78201294 182.22682190]
[173.65357971 171.16270447]
[152.65480042 172.65628052]
[136.79370117 158.40924072]
[136.01428223 136.83465576]
[124.10056305 127.72074890]
[112.18684387 118.60684204]
[100.27312469 109.49293518]
[94.80699158 108.98899078]
[90.08293915 105.34453583]
[87.87079620 99.29168701]
[76.62963867 89.36009979]
[65.38848877 79.42851257]
[54.14733124 69.49692535]
[45.43973160 66.05426025]
[42.69267273 59.01099014]
[31.80902100 48.68887329]
[20.92536926 38.36675644]
[5.41040230 40.32119370]
[-7.70294905 31.80215645]
[-12.22296238 16.83206940]
[-6.01542473 2.47935224]
[7.98865414 -4.47908115]
[23.17697525 -0.75767159]
[32.37807846 11.88644505]
[31.24748611 27.48310471]
[42.13113785 37.80522156]
[53.01478958 48.12733841]
[64.07891846 58.25576782]
[75.32007599 68.18735504]
[86.56122589 78.11894226]
[97.80238342 88.05052948]
[109.38703918 97.57921600]
[121.30075073 106.69312286]
[133.21447754 115.80703735]
[145.12818909 124.92094421]
[153.66928101 120.70282745]
[163.08987427 119.62857819]
[172.27522278 121.79518127]
[180.14854431 126.91789246]
[185.79734802 134.36727905]
[188.57905579 143.24642944]
[188.19406128 152.49885559]
[184.71771240 161.03427124]
[194.84614563 172.09838867]
[204.97456360 183.16252136]
[215.10299683 194.22665405]
[225.23143005 205.29077148]
[235.35986328 216.35490417]
[247.96798706 208.16436768]
[261.75234985 202.16091919]
[276.33688354 198.50831604]
[291.32369995 197.30621338]
[306.30395508 198.58741760]
[320.86898804 202.31697083]
[334.62145996 208.39311218]
[347.18618774 216.65010071]
[358.22036743 226.86265564]
[367.42300415 238.75219727]
[374.54306030 251.99435425]
[379.38626099 266.22787476]
[381.82049561 281.06448364]
[381.77935791 296.09936523]
[379.26397705 310.92242432]
[374.34295654 325.12921143]
[367.15057373 338.33221436]
[357.88299561 350.17123413]
[346.79309082 360.32327271]
[334.18338013 368.51138306]
[320.39785767 374.51217651]
[305.81262207 378.16195679]
[290.82559204 379.36117554]
[275.84555054 378.07708740]
[261.28125000 374.34472656]
[247.52995300 368.26593018]
[234.96682739 360.00653076]
[223.93460083 349.79183960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[16 47]
[17 46]
[18 45]
[19 44]
[22 43]
[23 42]
[24 41]
[25 40]
[27 39]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
