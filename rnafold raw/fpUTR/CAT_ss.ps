%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGGGGCAACAGGCAGAUUUGCCUGCUGAGGGUGGAGACCCACGAGCCGAGGCCUCCUGCAGUGUUCUGCACAGCAAACCGCACGCU\
) } def
/len { sequence length } bind def

/coor [
[168.82965088 145.42108154]
[181.70080566 137.71800232]
[167.60542297 132.58769226]
[153.51002502 127.45738983]
[139.41464233 122.32708740]
[125.31925201 117.19678497]
[108.40491486 129.43045044]
[87.58095551 127.97429657]
[72.53382111 113.50566864]
[57.86160660 116.62434387]
[45.97167587 127.06178284]
[31.91385269 122.13970947]
[17.24163818 125.25838470]
[2.56942415 128.37705994]
[-12.10278988 131.49574280]
[-26.77500343 134.61441040]
[-41.44721985 137.73309326]
[-53.26546860 149.10238647]
[-68.94347382 144.29280090]
[-72.35305023 128.25201416]
[-59.98671341 117.48141479]
[-44.56589508 123.06087494]
[-29.89367867 119.94219971]
[-15.22146511 116.82352448]
[-0.54925132 113.70484924]
[14.12296295 110.58617401]
[28.79517746 107.46749878]
[39.63565063 97.25312805]
[54.74293137 101.95213318]
[69.41514587 98.83345795]
[72.03903198 87.55097198]
[78.66783142 78.05159760]
[71.16783142 65.06121063]
[63.66782761 52.07083130]
[56.16782761 39.08045197]
[41.70293808 31.35393524]
[41.43236160 14.95701981]
[55.63443756 6.75744629]
[69.69929504 15.19023228]
[69.15821075 31.58045197]
[76.65821075 44.57083130]
[84.15821075 57.56121445]
[91.65821075 70.55159760]
[101.48955536 69.42917633]
[111.16520691 71.50206757]
[119.67385864 76.55360413]
[126.12616730 84.05580139]
[129.84773254 93.22451019]
[130.44955444 103.10139465]
[144.54493713 108.23169708]
[158.64033508 113.36199951]
[172.73571777 118.49230194]
[186.83111572 123.62260437]
[201.44667053 126.99687195]
[216.36448669 128.56480408]
[225.43772888 116.25124359]
[239.36421204 110.17261505]
[254.36376953 111.86962891]
[266.41931152 120.78702545]
[272.35269165 134.44940186]
[287.27053833 136.01731873]
[302.18835449 137.58525085]
[316.72171021 131.33285522]
[328.57049561 140.35812378]
[343.48831177 141.92605591]
[358.40612793 143.49397278]
[373.32397461 145.06190491]
[389.70834351 140.70433044]
[398.43127441 155.24209595]
[386.87640381 167.64859009]
[371.75604248 159.97973633]
[356.83822632 158.41180420]
[341.92037964 156.84388733]
[327.00256348 155.27595520]
[313.53622437 161.64050293]
[300.62042236 152.50308228]
[285.70260620 150.93515015]
[270.78475952 149.36723328]
[262.14047241 161.49742126]
[248.49433899 167.71345520]
[233.46974182 166.25480652]
[221.11140442 157.41352844]
[214.79656982 143.48263550]
[199.87873840 141.91470337]
[208.07041931 154.48037720]
[206.55844116 169.40399170]
[196.01290894 180.07131958]
[181.10765076 181.75456238]
[168.44873047 173.70771790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[9 30]
[10 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[32 43]
[33 42]
[34 41]
[35 40]
[54 84]
[55 83]
[60 78]
[61 77]
[62 76]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
