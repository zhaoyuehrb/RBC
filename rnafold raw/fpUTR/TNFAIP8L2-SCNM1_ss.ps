%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAAGCCAAAGGGCUCUCACACUAAGUGAAGCUUCUCCAUUCUGUAAGCUUUCCGGGAACAUCCAAGGCAAGACUGGCACCCAGCACAGCAGAAAAGAAGAGUCGGGGACCUCCUAGCCAGUUACAUUCCAGAGGAUGAGGCGCUG\
) } def
/len { sequence length } bind def

/coor [
[93.42261505 143.83049011]
[93.10636902 128.83381653]
[92.79012299 113.83715820]
[85.49094391 112.11323547]
[70.89257050 108.66539764]
[63.59338379 106.94147491]
[56.60100555 120.21199799]
[49.60862732 133.48251343]
[42.61624527 146.75302124]
[43.79033279 163.11009216]
[30.06187057 172.08012390]
[15.55352592 164.43551636]
[15.19023991 148.04039001]
[29.34572792 139.76065063]
[36.33810806 126.49012756]
[43.33049011 113.21961212]
[50.32286835 99.94909668]
[44.93637085 94.73031616]
[28.77687836 79.07398224]
[15.73410797 86.48249817]
[2.69133663 93.89102173]
[-10.35143471 101.29953766]
[-15.98156834 116.32221985]
[-31.28108406 121.14968872]
[-44.51350021 112.07870483]
[-45.52804184 96.06776428]
[-33.54644012 85.39908600]
[-17.75995064 88.25676727]
[-4.71718025 80.84824371]
[8.32559109 73.43972778]
[21.36836243 66.03121185]
[72.95483398 61.01673889]
[99.53793335 90.77449036]
[107.88791656 78.31343842]
[116.23789978 65.85238647]
[124.58787537 53.39133835]
[132.93786621 40.93028641]
[141.15600586 28.38190079]
[149.24142456 15.74757576]
[157.32682800 3.11325192]
[158.02062988 -3.57202148]
[161.49981689 -8.17324162]
[166.02890015 -9.87323093]
[174.63973999 -22.15546989]
[183.25057983 -34.43770981]
[191.86141968 -46.71995163]
[183.34779358 -60.06847000]
[180.58634949 -75.58945465]
[183.94448853 -90.92308044]
[192.86311340 -103.75799561]
[184.51312256 -116.21904755]
[176.16314697 -128.68009949]
[167.81315613 -141.14115906]
[159.46318054 -153.60220337]
[153.61231995 -156.91003418]
[150.78504944 -161.93820190]
[151.03683472 -166.76927185]
[143.21958923 -179.57124329]
[127.80087280 -183.04089355]
[119.42232513 -196.44148254]
[123.05480194 -211.82266235]
[136.54321289 -220.05905151]
[151.88513184 -216.26416016]
[159.97845459 -202.68942261]
[156.02157593 -187.38848877]
[163.83882141 -174.58651733]
[171.92422485 -161.95219421]
[180.27421570 -149.49113464]
[188.62419128 -137.03009033]
[196.97418213 -124.56903076]
[205.32415771 -112.10797882]
[221.83296204 -115.29602051]
[238.19656372 -111.43126678]
[251.53459167 -101.19401550]
[264.57736206 -108.60253143]
[277.62011719 -116.01104736]
[290.66290283 -123.41956329]
[303.70568848 -130.82807922]
[316.74844360 -138.23660278]
[329.79122925 -145.64511108]
[336.01892090 -155.48612976]
[346.26525879 -156.93760681]
[357.87921143 -166.43057251]
[369.49316406 -175.92353821]
[375.28146362 -190.64787292]
[390.03237915 -192.71180725]
[401.64633179 -202.20475769]
[407.43463135 -216.92909241]
[422.18554688 -218.99302673]
[423.91073608 -234.47402954]
[435.82415771 -243.93579102]
[450.57229614 -242.19567871]
[451.90289307 -257.94384766]
[464.03314209 -268.07464600]
[479.76635742 -266.57760620]
[489.76834106 -254.34094238]
[488.10504150 -238.62442017]
[475.76330566 -228.75238037]
[460.06524658 -230.58174133]
[458.83618164 -215.78224182]
[447.19323730 -205.98959351]
[431.67849731 -207.37908936]
[426.72091675 -193.33374023]
[411.13928223 -190.59082031]
[399.52532959 -181.09785461]
[394.56774902 -167.05252075]
[378.98611450 -164.30958557]
[367.37216187 -154.81663513]
[355.75823975 -145.32366943]
[370.70098877 -144.01437378]
[382.79852295 -135.14593506]
[388.54336548 -121.28963470]
[386.26983643 -106.46293640]
[376.63714600 -94.96463013]
[362.43811035 -90.12850952]
[347.78961182 -93.35673523]
[336.93878174 -103.71332550]
[333.03161621 -118.19553375]
[337.19973755 -132.60234070]
[324.15695190 -125.19382477]
[311.11419678 -117.78530884]
[298.07141113 -110.37679291]
[285.02865601 -102.96827698]
[271.98587036 -95.55976105]
[258.94311523 -88.15124512]
[261.18273926 -75.07198334]
[259.02859497 -61.94506836]
[252.69517517 -50.20967484]
[242.85627747 -41.15951157]
[230.57347107 -35.80019379]
[217.18161011 -34.73752594]
[204.14366150 -38.10910797]
[195.53282166 -25.82686806]
[186.92198181 -13.54462910]
[178.31114197 -1.26238978]
[169.96115112 11.19866180]
[161.87574768 23.83298683]
[153.79032898 36.46731186]
[152.82749939 43.84653473]
[145.39891052 49.28026581]
[137.04893494 61.74131775]
[128.69894409 74.20236969]
[120.34896851 86.66342163]
[111.99898529 99.12447357]
[107.78678894 113.52091217]
[108.10303497 128.51757812]
[108.41928101 143.51423645]
[111.01564026 162.72123718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[6 17]
[7 16]
[8 15]
[9 14]
[19 31]
[20 30]
[21 29]
[22 28]
[33 144]
[34 143]
[35 142]
[36 141]
[37 140]
[38 138]
[39 137]
[40 136]
[43 135]
[44 134]
[45 133]
[46 132]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[57 66]
[58 65]
[74 125]
[75 124]
[76 123]
[77 122]
[78 121]
[79 120]
[80 119]
[82 109]
[83 108]
[84 107]
[86 105]
[87 104]
[89 102]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
