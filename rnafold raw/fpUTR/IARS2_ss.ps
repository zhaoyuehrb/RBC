%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCGCGUGCGCCCUCUUACUCGGCUCCCCUUGGUUUCCUGGGGUCCUGCCCCUUCAAGCUGGGGCGGGAGCGGAGGACCCCGCUCUCAGGGGUUGCCGGACC\
) } def
/len { sequence length } bind def

/coor [
[-5.80321693 300.52346802]
[-12.71285343 313.83724976]
[-13.92736721 323.06054688]
[-20.03354645 327.44137573]
[-27.33837891 340.54248047]
[-34.64321136 353.64361572]
[-33.85699844 370.02389526]
[-47.79413223 378.66613770]
[-62.11728287 370.67996216]
[-62.09202194 354.28082275]
[-47.74433517 346.33877563]
[-40.43950272 333.23767090]
[-33.13467026 320.13653564]
[-26.02663994 306.92761230]
[-19.11700439 293.61383057]
[-27.11869049 283.60769653]
[-30.69981194 271.25720215]
[-29.28158760 258.42901611]
[-23.04371262 247.07643127]
[-12.90248489 238.94187927]
[-0.37637356 235.28956604]
[12.64129925 236.70907593]
[20.33478737 223.83235168]
[28.02827644 210.95561218]
[35.72176743 198.07888794]
[43.41525650 185.20214844]
[42.65763092 167.74008179]
[58.64799500 158.76351929]
[65.95282745 145.66239929]
[73.25765991 132.56127930]
[80.56249237 119.46015167]
[87.86732483 106.35903168]
[94.17268372 92.74864960]
[99.44330597 78.70513153]
[104.71392822 64.66160583]
[98.42596436 50.41031265]
[103.97118378 36.24326706]
[117.59635925 30.33648300]
[122.86698151 16.29295921]
[128.13760376 2.24943686]
[133.40823364 -11.79408646]
[127.12026978 -26.04537773]
[132.66548157 -40.21242523]
[146.29066467 -46.11920929]
[143.89576721 -61.75810242]
[155.61174011 -70.95512390]
[160.88235474 -84.99864960]
[166.15298462 -99.04217529]
[171.42359924 -113.08569336]
[176.69422913 -127.12921906]
[181.96484375 -141.17274475]
[187.23547363 -155.21626282]
[192.50610352 -169.25978088]
[197.77671814 -183.30331421]
[189.11634827 -196.17877197]
[189.71159363 -211.68443298]
[199.33360291 -223.85803223]
[214.28250122 -228.01858521]
[228.81011963 -222.56628418]
[237.33032227 -209.59762573]
[236.56687927 -194.09934998]
[226.81338501 -182.03083801]
[211.82023621 -178.03268433]
[206.54962158 -163.98916626]
[201.27899170 -149.94564819]
[196.00837708 -135.90211487]
[190.73774719 -121.85859680]
[185.46713257 -107.81507111]
[180.19650269 -93.77155304]
[174.92588806 -79.72802734]
[169.65525818 -65.68450165]
[172.42715454 -51.05009460]
[160.33418274 -40.84858704]
[166.70861816 -27.43582344]
[161.56350708 -13.11861134]
[147.45175171 -6.52346373]
[142.18113708 7.52005911]
[136.91050720 21.56358147]
[131.63989258 35.60710526]
[138.01431274 49.01986694]
[132.86921692 63.33707809]
[118.75745392 69.93222809]
[113.48683167 83.97575378]
[108.21620941 98.01927185]
[109.31298065 100.49285126]
[109.60864258 103.42387390]
[108.93743896 106.54024506]
[107.22798157 109.51535034]
[104.51976013 112.00080872]
[100.96844482 113.66386414]
[93.66361237 126.76498413]
[86.35877991 139.86610413]
[79.05395508 152.96723938]
[71.74912262 166.06835938]
[74.51736450 178.77561951]
[68.03232574 189.58122253]
[56.29198837 192.89564514]
[48.59849930 205.77236938]
[40.90501022 218.64910889]
[33.21152115 231.52583313]
[25.51803017 244.40257263]
[34.41283417 259.39453125]
[34.58906174 276.73776245]
[26.08733177 291.75439453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[4 13]
[5 12]
[6 11]
[22 101]
[23 100]
[24 99]
[25 98]
[26 97]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 84]
[34 83]
[35 82]
[38 79]
[39 78]
[40 77]
[41 76]
[44 73]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
