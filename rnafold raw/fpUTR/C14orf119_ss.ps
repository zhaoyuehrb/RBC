%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUUGGGGCGGGUCCGAGGCCGGAAGUGCGUGGGCUGCCGGGCUGGCCCAGCUUAGGGUUUUCAGGAAAUUUGGAAGCUGCCGCAGUAGUUGGAGUCUAAGGACUCGUGACAAUCUUCGGGUGCCCUUCGAGAGAAAAGGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[93.67427063 146.88220215]
[87.33034515 145.57888794]
[81.22387695 143.42132568]
[75.46930695 140.44996643]
[70.17449951 136.72048950]
[65.43868256 132.30279541]
[61.35062027 127.27967072]
[57.98692703 121.74526978]
[43.74088669 126.44104767]
[29.49484634 131.13682556]
[15.24880600 135.83259583]
[4.56446075 147.50115967]
[-9.94526386 144.13706970]
[-24.19130516 148.83283997]
[-38.43734360 153.52862549]
[-52.68338776 158.22439575]
[-66.92942810 162.92018127]
[-81.17546844 167.61595154]
[-93.07329559 181.62818909]
[-110.09168243 177.46821594]
[-124.23484802 182.46531677]
[-138.37800598 187.46241760]
[-152.52116394 192.45951843]
[-154.64971924 207.61628723]
[-163.58757019 220.04098511]
[-177.28088379 226.87852478]
[-192.58303833 226.55764771]
[-205.97769165 219.15213013]
[-214.38685608 206.36367798]
[-215.87818909 191.13099670]
[-210.10896301 176.95445251]
[-198.40492249 167.09169006]
[-183.45556641 163.80911255]
[-168.69613647 167.86103821]
[-157.51826477 178.31634521]
[-143.37510681 173.31925964]
[-129.23194885 168.32215881]
[-115.08878326 163.32505798]
[-109.56161499 152.51637268]
[-97.76384735 148.26132202]
[-85.87124634 153.36991882]
[-71.62520599 148.67413330]
[-57.37916183 143.97836304]
[-43.13312149 139.28257751]
[-28.88708115 134.58680725]
[-14.64104080 129.89102173]
[-4.97566795 118.55833435]
[10.55302906 121.58656311]
[24.79907036 116.89078522]
[39.04510880 112.19500732]
[53.29115295 107.49922943]
[52.69897079 99.24659729]
[53.55367661 91.01701355]
[55.82912445 83.06221008]
[59.45570755 75.62551880]
[64.32250214 68.93441010]
[70.28062439 63.19356155]
[77.14783478 58.57858658]
[84.71406555 55.23064423]
[82.17905426 40.44640350]
[79.64404297 25.66216660]
[77.10903168 10.87792778]
[74.57402039 -3.90631104]
[72.03900909 -18.69054985]
[69.50399780 -33.47478867]
[66.96897888 -48.25902557]
[64.43396759 -63.04326630]
[52.21881104 -73.44371796]
[52.87817764 -89.47322083]
[65.90626526 -98.83529663]
[81.30903625 -94.34817505]
[87.27079773 -79.45398712]
[79.21820831 -65.57827759]
[81.75321960 -50.79404068]
[84.28823090 -36.00979996]
[86.82324219 -21.22556114]
[89.35825348 -6.44132328]
[91.89327240 8.34291553]
[94.42828369 23.12715340]
[96.96329498 37.91139221]
[99.49830627 52.69563293]
[123.50842285 58.94748688]
[141.05232239 76.49123383]
[155.08622742 71.19506836]
[169.12014771 65.89890289]
[179.29963684 53.78740311]
[193.93905640 56.53265762]
[207.97297668 51.23649216]
[214.85447693 35.18953323]
[230.88497925 29.17009354]
[246.02015686 36.43055344]
[259.93847656 30.83770370]
[273.85681152 25.24485779]
[284.83883667 10.50387096]
[302.08743286 13.57239151]
[315.88394165 7.68538189]
[329.68041992 1.79837286]
[343.47692871 -4.08863640]
[357.27340698 -9.97564602]
[366.67984009 -23.40886116]
[382.99072266 -21.70991516]
[389.42684937 -6.62653828]
[379.36727905 6.32478571]
[363.16040039 3.82084394]
[349.36392212 9.70785332]
[335.56744385 15.59486198]
[321.77093506 21.48187065]
[307.97445679 27.36888123]
[303.14633179 38.50739670]
[291.64328003 43.50460815]
[279.44967651 39.16319275]
[265.53134155 44.75603867]
[251.61299133 50.34888840]
[248.24418640 62.82754517]
[238.13874817 71.19564819]
[224.86190796 72.20866394]
[213.26913452 65.27040100]
[199.23522949 70.56656647]
[190.05953979 82.29925537]
[174.41630554 79.93281555]
[160.38240051 85.22898102]
[146.34848022 90.52514648]
[144.92918396 114.80954742]
[131.62998962 135.17810059]
[145.61425781 142.57746887]
[146.01484680 157.46669006]
[154.14878845 170.06982422]
[162.28274536 182.67295837]
[170.41668701 195.27607727]
[178.55064392 207.87921143]
[194.05093384 208.60067749]
[206.14579773 218.32145691]
[210.18453979 233.30372620]
[204.61413574 247.78648376]
[191.57655334 256.20083618]
[176.08500671 255.31124878]
[164.09629822 245.45983887]
[160.22033691 230.43464661]
[165.94750977 216.01315308]
[157.81355286 203.41003418]
[149.67961121 190.80690002]
[141.54566956 178.20376587]
[133.41171265 165.60063171]
[120.00923920 159.10272217]
[119.02685547 143.31205750]
[112.93296051 145.50486755]
[106.59667969 146.84483337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 51]
[9 50]
[10 49]
[11 48]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[20 38]
[21 37]
[22 36]
[23 35]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[83 122]
[84 121]
[85 120]
[87 118]
[88 117]
[91 113]
[92 112]
[93 111]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[124 145]
[126 143]
[127 142]
[128 141]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
