%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCUUUCGUUCUUUCUGGUGCAGCUUAACUGAUUUGAAGAAGCCGAAGAAGAAAAUCCAGUAGCACGGUUAAGACUUUAGCC\
) } def
/len { sequence length } bind def

/coor [
[132.65153503 318.84133911]
[130.46751404 304.00119019]
[128.28349304 289.16104126]
[126.09947968 274.32089233]
[123.91546631 259.48074341]
[121.73144531 244.64059448]
[119.54743195 229.80044556]
[117.36341095 214.96029663]
[114.63886261 200.20980835]
[111.37740326 185.56867981]
[108.11595154 170.92753601]
[104.85449982 156.28639221]
[94.53501892 145.54594421]
[99.08663177 130.39360046]
[95.82518005 115.75246429]
[86.29057312 108.81026459]
[83.93684387 97.25332642]
[89.99685669 87.13507080]
[87.27230835 72.38459015]
[84.54775238 57.63410187]
[81.82320404 42.88361740]
[67.15716553 38.80087280]
[55.76457214 28.79608536]
[49.86972427 14.89389324]
[50.59252167 -0.12737760]
[57.73609924 -13.29091454]
[69.83649445 -22.01134872]
[67.11193848 -36.76183319]
[64.38739014 -51.51231766]
[50.54450607 -58.27107239]
[43.41900635 -71.72769928]
[45.55826187 -86.62358856]
[55.93441010 -97.27598572]
[53.20985794 -112.02646637]
[43.09464264 -124.19170380]
[48.39149475 -138.11264038]
[45.66694260 -152.86312866]
[42.94239044 -167.61361694]
[31.89372826 -179.73216248]
[37.12153625 -195.27571106]
[53.24789429 -198.25439453]
[63.68338776 -185.60400391]
[57.69287491 -170.33816528]
[60.41742706 -155.58767700]
[63.14198303 -140.83720398]
[73.06231689 -129.72702026]
[67.96034241 -114.75102234]
[70.68489838 -100.00053406]
[84.18175507 -93.75770569]
[91.50112152 -80.60890961]
[89.65291595 -65.49476624]
[79.13787079 -54.23686981]
[81.86242676 -39.48638535]
[84.58697510 -24.73590088]
[99.00415039 -20.91350937]
[110.37879181 -11.17046165]
[116.41995239 2.60144186]
[115.88036346 17.69213486]
[108.81351471 31.10655403]
[96.57368469 40.15906525]
[99.29824066 54.90954971]
[102.02278900 69.66003418]
[104.74734497 84.41052246]
[115.96848297 96.74780273]
[110.46631622 112.49101257]
[113.72777557 127.13214874]
[124.28054047 138.91984558]
[119.49563599 153.02494812]
[122.75709534 167.66609192]
[126.01854706 182.30722046]
[129.27999878 196.94836426]
[133.70927429 202.36738586]
[134.43478394 208.30831909]
[132.20356750 212.77627563]
[134.38757324 227.61642456]
[136.57159424 242.45658875]
[138.75561523 257.29672241]
[140.93963623 272.13687134]
[143.12365723 286.97702026]
[145.30766296 301.81719971]
[147.49168396 316.65734863]
[159.45700073 327.34429932]
[158.41802979 343.35366821]
[145.17178345 352.40444946]
[129.87965393 347.55364990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 71]
[10 70]
[11 69]
[12 68]
[14 66]
[15 65]
[18 63]
[19 62]
[20 61]
[21 60]
[27 54]
[28 53]
[29 52]
[33 48]
[34 47]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
