%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGCUAGUAAGAUAGGAAGUGAGGCCAGGUACCUUGUGGGCAGUGAUGUCAUUCGGUGCGACUCCUAAG\
) } def
/len { sequence length } bind def

/coor [
[61.39847183 254.64419556]
[52.77968979 267.09390259]
[40.58400726 276.06854248]
[26.13431358 280.59457397]
[10.99800777 280.18109131]
[-3.18303823 274.87292480]
[-14.87057018 265.24588013]
[-22.79681206 252.34419250]
[-26.10198593 237.56736755]
[-24.42757034 222.51828003]
[-17.95519257 208.82933044]
[-7.38692808 197.98542786]
[6.13085651 191.16279602]
[21.13185310 189.10153198]
[35.98886490 192.02520752]
[43.48886490 179.03482056]
[50.98886490 166.04444885]
[58.48886490 153.05406189]
[65.98886871 140.06367493]
[66.62406921 132.46017456]
[74.10997009 126.68051147]
[82.16946411 114.02964020]
[76.68729401 105.63825989]
[75.18350220 95.17409515]
[78.39090729 84.52638245]
[86.14965820 75.81005096]
[97.35956573 70.94873810]
[94.75483704 56.17662430]
[92.15011597 41.40450668]
[82.13398743 29.15755844]
[87.54367828 15.28007317]
[75.27959442 4.93735456]
[75.86334229 -11.09507465]
[88.84712219 -20.51850700]
[104.27088165 -16.10409164]
[110.30284119 -1.23818898]
[102.31578827 12.67535114]
[112.14561462 23.86569977]
[106.92223358 38.79978561]
[109.52695465 53.57189941]
[112.13167572 68.34401703]
[124.60372162 76.67756653]
[139.24816895 73.43097687]
[153.89260864 70.18437958]
[165.69099426 59.64358139]
[179.79124451 64.44279480]
[194.43568420 61.19619751]
[209.08012390 57.94960403]
[217.35931396 44.48741150]
[232.75195312 40.90379715]
[246.12585449 49.32485580]
[249.54652405 64.75451660]
[240.98454285 78.03864288]
[225.51957703 81.29599762]
[212.32672119 72.59403992]
[197.68228149 75.84063721]
[183.03784180 79.08723450]
[172.28691101 89.39581299]
[157.13919067 84.82881927]
[142.49475098 88.07541656]
[127.85031891 91.32200623]
[118.98069763 117.66577911]
[94.82034302 122.08913422]
[86.76084137 134.74000549]
[78.97924805 147.56367493]
[71.47924805 160.55406189]
[63.97924805 173.54444885]
[56.47924805 186.53482056]
[48.97924805 199.52520752]
[58.93973160 210.92991638]
[64.65512085 224.95179749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[21 64]
[22 63]
[27 41]
[28 40]
[29 39]
[31 37]
[42 61]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
