%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGACCGGGCUGCGCUCACUGCCCAGCCGGGGCCCCGGGAGCCUCCAGGCUCCCGCCCGCCCUGAGCUGCGGCCUCCGC\
) } def
/len { sequence length } bind def

/coor [
[81.93277740 196.14318848]
[75.10716248 201.04913330]
[67.44233704 204.47909546]
[59.25275803 206.29609680]
[50.87362289 206.42929077]
[42.64720154 204.87667847]
[34.90882492 201.70503235]
[27.97323227 197.04707336]
[22.12176514 191.09585571]
[8.94408226 198.26165771]
[-4.23360157 205.42745972]
[-17.41128540 212.59324646]
[-28.43770027 225.47171021]
[-43.86527252 218.44131470]
[-41.38040924 201.67045593]
[-24.57708168 199.41557312]
[-11.39939880 192.24977112]
[1.77828503 185.08396912]
[14.95596886 177.91818237]
[14.19296169 154.28047180]
[26.55660629 134.00631714]
[48.09508514 123.77925873]
[71.81198883 127.03858948]
[80.44176483 114.76964569]
[89.07154846 102.50070953]
[97.46473694 90.06871033]
[105.61824799 77.47823334]
[113.77175903 64.88774872]
[121.92527008 52.29727173]
[129.83612061 39.55291748]
[137.50140381 26.65937424]
[145.16668701 13.76583099]
[152.83195496 0.87228662]
[160.49723816 -12.02125740]
[168.16252136 -24.91480064]
[163.50537109 -41.64861298]
[172.11201477 -56.35007095]
[188.33421326 -60.32108688]
[195.50001526 -73.49877167]
[202.66580200 -86.67645264]
[209.83160400 -99.85414124]
[216.99740601 -113.03182220]
[224.16320801 -126.20951080]
[231.32899475 -139.38719177]
[238.49479675 -152.56488037]
[237.53530884 -168.93592834]
[251.38020325 -177.72515869]
[265.78704834 -169.89096069]
[265.93533325 -153.49249268]
[251.67248535 -145.39907837]
[244.50668335 -132.22138977]
[237.34088135 -119.04370880]
[230.17509460 -105.86602783]
[223.00929260 -92.68833923]
[215.84349060 -79.51065826]
[208.67768860 -66.33297729]
[201.51190186 -53.15529251]
[206.88536072 -41.28145981]
[204.32188416 -28.30293274]
[194.55212402 -19.09458160]
[181.05606079 -17.24952126]
[173.39079285 -4.35597706]
[165.72550964 8.53756714]
[158.06022644 21.43111038]
[150.39494324 34.32465363]
[142.72966003 47.21820068]
[142.00047302 54.76833344]
[134.51574707 60.45078278]
[126.36224365 73.04126740]
[118.20872498 85.63174438]
[110.05521393 98.22222900]
[108.60422516 106.37915802]
[101.34048462 111.13048553]
[92.71070862 123.39942932]
[84.08092499 135.66836548]
[89.35578918 142.30056763]
[93.18563080 149.85025024]
[95.41709900 158.00755310]
[95.96237946 166.43841553]
[94.80261230 174.79830933]
[91.98857880 182.74624634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 19]
[10 18]
[11 17]
[12 16]
[23 75]
[24 74]
[25 73]
[26 71]
[27 70]
[28 69]
[29 68]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
