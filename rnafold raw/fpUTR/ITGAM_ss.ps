%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUGCCCUUCUUUGCUUUGGUGGCUUCCUUGUGGUUCCUCAGUGGUGCCUGCAACCCCUGGUUCACCUCCUUCCAGGUUCUGGCUCCUUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[100.87335968 153.11715698]
[92.45471191 152.58576965]
[84.22630310 150.72854614]
[76.39559174 147.59230042]
[69.16002655 143.25610352]
[62.70202255 137.82929993]
[57.18441391 131.44869995]
[43.96261597 138.53276062]
[30.74081421 145.61683655]
[17.63307381 152.90979004]
[4.64269209 160.40979004]
[4.72292948 175.76846313]
[-2.90085936 189.10163879]
[-16.17791367 196.82273865]
[-31.53677177 196.85482788]
[-44.84598160 189.18928528]
[-52.52542496 175.88809204]
[-52.50937653 160.52922058]
[-44.80215454 147.24409485]
[-31.47695732 139.60638428]
[-16.11819839 139.67057800]
[-2.85730815 147.41940308]
[10.13307285 139.91940308]
[14.43032074 133.73570251]
[23.65674782 132.39503479]
[36.87854767 125.31096649]
[50.10034943 118.22689819]
[46.96440506 103.06934357]
[48.33083344 87.65122223]
[54.08363342 73.28142548]
[63.73442459 61.17986298]
[76.46392822 52.37387085]
[71.78342438 38.12280273]
[67.10292053 23.87173653]
[62.42242050 9.62066936]
[57.51639938 -4.55434275]
[52.38609695 -18.64973259]
[47.25579453 -32.74512100]
[35.26517487 -43.06673050]
[38.18287659 -57.67276382]
[33.05257416 -71.76815033]
[19.17881584 -79.82411194]
[16.96969414 -95.71433258]
[28.11985779 -107.24921417]
[44.07585526 -105.58016968]
[52.59761047 -91.98755646]
[47.14796448 -76.89845276]
[52.27826309 -62.80306625]
[63.90193176 -53.48965454]
[61.35118484 -37.87542343]
[66.48149109 -23.78003311]
[71.61178589 -9.68464470]
[76.95532990 -4.37889433]
[76.67348480 4.94016790]
[81.35398865 19.19123459]
[86.03449249 33.44230270]
[90.71498871 47.69336700]
[114.13664246 48.79111099]
[134.80441284 59.86462402]
[148.69207764 78.75672913]
[163.14970398 74.75962067]
[177.60734558 70.76251221]
[192.06497192 66.76540375]
[206.52261353 62.76829529]
[209.70454407 47.79719543]
[219.48834229 36.02706909]
[233.62576294 30.16260910]
[248.86813354 31.55142403]
[261.71286011 39.87437439]
[269.20831299 53.21891022]
[269.63211060 68.51854706]
[262.88687134 82.25755310]
[250.52256775 91.27879333]
[235.38046265 93.50925446]
[220.94007874 88.43640137]
[210.51971436 77.22592926]
[196.06208801 81.22303772]
[181.60444641 85.22014618]
[167.14682007 89.21724701]
[152.68917847 93.21435547]
[152.91799927 104.67759705]
[150.68190002 115.92295837]
[146.08502197 126.42662048]
[139.34149170 135.69932556]
[130.76542664 143.30915833]
[137.63882446 156.64169312]
[144.51222229 169.97422791]
[151.38562012 183.30676270]
[166.51390076 187.87960815]
[173.90394592 201.84967041]
[169.17140198 216.92874146]
[155.12399292 224.17070007]
[140.09579468 219.27899170]
[133.00277710 205.15579224]
[138.05308533 190.18016052]
[131.17968750 176.84762573]
[124.30629730 163.51509094]
[117.43289948 150.18255615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[9 25]
[10 23]
[11 22]
[32 57]
[33 56]
[34 55]
[35 54]
[36 52]
[37 51]
[38 50]
[40 48]
[41 47]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
