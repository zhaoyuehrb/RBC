%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGGAAGUCCUAUGAGGGACCAUUUACGGUUUCCUCAGUAAUUUCCACCAGGAUGAAUUUCCUUCUCAUCACUCUGCCUCAGGUAGUGCUCUGAAGGUCGUCCUUUCUGAACAAACGCAGCAAAGCAAGCCACACC\
) } def
/len { sequence length } bind def

/coor [
[52.06401825 143.56713867]
[61.85163498 132.20040894]
[75.33535767 125.63178253]
[84.97420502 114.13862610]
[71.00520325 119.60371399]
[57.03620911 125.06879425]
[43.06721497 130.53387451]
[29.09821892 135.99896240]
[15.12922192 141.46405029]
[1.16022575 146.92913818]
[-1.33685231 160.53317261]
[-10.17664909 171.02951050]
[-22.95402145 175.72920227]
[-36.27421951 173.49816895]
[-46.65470886 165.02874756]
[-60.74364471 170.17675781]
[-74.83258057 175.32475281]
[-88.92151642 180.47274780]
[-103.01045227 185.62074280]
[-117.09938812 190.76873779]
[-131.18832397 195.91673279]
[-145.21818542 201.22361755]
[-159.18717957 206.68869019]
[-165.29237366 221.26615906]
[-179.94866943 227.17956543]
[-194.46076965 220.92059326]
[-200.21888733 206.20259094]
[-193.80683899 191.75747681]
[-179.02877808 186.15528870]
[-164.65226746 192.71969604]
[-150.68327332 187.25462341]
[-145.55708313 181.84266663]
[-136.33631897 181.82780457]
[-122.24738312 176.67979431]
[-108.15844727 171.53179932]
[-94.06951141 166.38380432]
[-79.98057556 161.23580933]
[-65.89163971 156.08781433]
[-51.80270386 150.93981934]
[-47.83261871 135.05120850]
[-35.06597519 124.53096008]
[-18.38059998 123.65379333]
[-4.30485868 132.96014404]
[9.66413784 127.49504852]
[23.63313293 122.02996826]
[37.60213089 116.56488037]
[51.57112503 111.09980011]
[65.54012299 105.63471222]
[79.50911713 100.16963196]
[83.02877808 89.68269348]
[91.28956604 82.85484314]
[101.56892395 81.46570587]
[107.81416321 67.82763672]
[114.05940247 54.18956757]
[120.30464172 40.55149460]
[126.54988098 26.91342545]
[132.79512024 13.27535343]
[139.04035950 -0.36271775]
[138.43733215 -4.85831165]
[139.26382446 -8.88382244]
[141.18247986 -12.03577042]
[143.75712585 -14.06797504]
[146.51501465 -14.91042614]
[153.96603394 -27.92896652]
[161.41703796 -40.94750595]
[168.86805725 -53.96604919]
[176.31907654 -66.98458862]
[168.71046448 -80.25321198]
[168.76454163 -95.44840240]
[176.36662292 -108.48966980]
[189.38858032 -115.92502594]
[204.28352356 -115.84456635]
[211.73454285 -128.86311340]
[219.18554688 -141.88165283]
[226.63656616 -154.90019226]
[227.00042725 -161.63856506]
[230.26890564 -166.41728210]
[234.72987366 -168.32768250]
[242.76155090 -180.99623108]
[250.79322815 -193.66477966]
[254.16766357 -210.27952576]
[271.06723022 -211.63638306]
[277.04931641 -195.77287292]
[263.46179199 -185.63310242]
[255.43009949 -172.96455383]
[247.39842224 -160.29600525]
[239.65510559 -147.44917297]
[232.20408630 -134.43063354]
[224.75308228 -121.41209412]
[217.30206299 -108.39355469]
[224.91587830 -95.59138489]
[225.10061646 -80.59732819]
[217.70652771 -67.43701172]
[204.63211060 -59.69386673]
[189.33761597 -59.53357315]
[181.88659668 -46.51503372]
[174.43557739 -33.49649429]
[166.98457336 -20.47795296]
[159.53355408 -7.45941257]
[152.67843628 5.88252163]
[146.43319702 19.52059364]
[140.18795776 33.15866470]
[133.94271851 46.79673386]
[127.69747162 60.43480682]
[121.45223236 74.07287598]
[115.20699310 87.71094513]
[127.22614288 78.73654175]
[136.84457397 67.22629547]
[150.58505249 61.20970535]
[165.56686401 61.94815063]
[178.64906311 69.28681946]
[187.08895874 81.68714905]
[189.11711121 96.54940033]
[184.30831909 110.75769806]
[173.67076111 121.33324432]
[159.43458557 126.05887604]
[144.58444214 123.94385529]
[132.23291016 115.43075562]
[118.24884033 110.00437927]
[127.91947937 121.47080231]
[143.68626404 122.55879211]
[154.00260925 134.53163147]
[152.74798584 150.28604126]
[140.66673279 160.47520447]
[124.92647552 159.05409241]
[114.86560059 146.86579895]
[116.45305634 131.14143372]
[106.78241730 119.67502594]
[109.77191162 134.37409973]
[118.49024200 146.58027649]
[121.67022705 161.23931885]
[118.79330444 175.96084595]
[110.32861328 188.34426880]
[97.65645599 196.37025452]
[82.84323883 198.73004150]
[68.30450439 195.03883362]
[56.41102219 185.89852905]
[49.10222626 172.79960632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 31]
[23 30]
[52 106]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
[58 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[72 90]
[73 89]
[74 88]
[75 87]
[78 86]
[79 85]
[80 84]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
