%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAAAGGAAGGCUGGGAACUAAGAAGCUAUUGGUUGGUGAUCCCUGGACCAAUCGGAGGAGCCGUGAUUUGGCGGGAGUCUUGACCGCCGCCGGGCUCUUGGUACCUCAGCGCGAGCGCCAGGCGUCCGGCCGCCGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[239.56338501 426.59255981]
[229.42570496 423.67309570]
[220.07327271 418.77615356]
[211.88755798 412.09823608]
[205.20314026 403.90856934]
[200.29393005 394.53817749]
[197.36204529 384.36657715]
[196.52941895 373.80642700]
[197.83279419 363.28674316]
[201.22204590 353.23547363]
[206.56216431 344.06204224]
[213.63858032 336.14083862]
[222.16581726 329.79571533]
[216.42556763 315.93753052]
[210.68531799 302.07934570]
[204.94506836 288.22116089]
[199.05398560 274.42639160]
[193.01278687 260.69671631]
[180.80488586 252.16348267]
[182.32894897 236.41584778]
[176.28775024 222.68617249]
[170.24655151 208.95651245]
[164.20535278 195.22683716]
[158.16415405 181.49716187]
[152.12294006 167.76748657]
[146.08174133 154.03781128]
[140.46635437 149.14521790]
[140.06214905 139.94210815]
[134.32189941 126.08392334]
[128.58164978 112.22573090]
[72.65087891 116.68835449]
[58.34512329 112.17777252]
[44.03936768 107.66718292]
[29.73361397 103.15660095]
[15.42786026 98.64601135]
[1.12210572 94.13542175]
[-13.18364906 89.62483978]
[-27.62932587 85.58473206]
[-42.19945526 82.01944733]
[-57.78347397 87.12537384]
[-69.81512451 75.98214722]
[-65.91727448 60.05296707]
[-50.09970474 55.72440720]
[-38.63416672 67.44931793]
[-24.06403732 71.01460266]
[-20.82576942 69.44721222]
[-16.65198517 69.41653442]
[-12.29509449 71.35161591]
[-8.67306137 75.31908417]
[5.63269281 79.82966614]
[19.93844604 84.34025574]
[34.24420166 88.85084534]
[48.54995728 93.36142731]
[62.85570908 97.87201691]
[77.16146088 102.38260651]
[86.80327606 90.89193726]
[79.87705231 77.58677673]
[72.95082092 64.28160858]
[58.14424133 58.10546494]
[53.87992859 42.63953018]
[63.42909622 29.74794579]
[79.46643829 29.32003403]
[89.68948364 41.68405151]
[86.25598145 57.35538483]
[93.18221283 70.66054535]
[100.10844421 83.96570587]
[107.60799408 84.04751587]
[103.12865448 69.73194885]
[115.35939026 61.04810715]
[127.39770508 69.99679565]
[122.60710144 84.21114349]
[130.10665894 84.29295349]
[137.32148743 71.14205170]
[144.53631592 57.99114990]
[151.75114441 44.84024811]
[158.96598816 31.68934631]
[166.18081665 18.53844452]
[161.98417664 3.53757811]
[169.48837280 -9.69652748]
[183.81527710 -13.60493565]
[191.03010559 -26.75583649]
[190.13160706 -43.13035202]
[204.00915527 -51.86795425]
[218.38671875 -43.98014832]
[218.47390747 -27.58123207]
[204.18101501 -19.54100609]
[196.96617126 -6.39010429]
[201.36769104 7.79306316]
[194.23817444 21.23272514]
[179.33171082 25.75327492]
[172.11688232 38.90417862]
[164.90205383 52.05507660]
[157.68722534 65.20597839]
[150.47238159 78.35688019]
[143.25755310 91.50778198]
[142.43983459 106.48547363]
[148.18008423 120.34367371]
[153.92034912 134.20185852]
[159.81141663 147.99661255]
[165.85261536 161.72628784]
[171.89381409 175.45596313]
[177.93501282 189.18563843]
[183.97622681 202.91529846]
[190.01742554 216.64497375]
[196.05862427 230.37464905]
[208.69863892 239.88993835]
[206.74246216 254.65551758]
[212.78366089 268.38519287]
[219.15214539 275.04122925]
[218.80325317 282.48089600]
[224.54350281 296.33908081]
[230.28376770 310.19729614]
[236.02401733 324.05548096]
[256.04910278 322.95672607]
[275.00708008 329.40960693]
[290.15936279 342.45895386]
[299.32580566 360.19842529]
[301.19824219 380.04898071]
[295.52716064 399.13372803]
[283.15472412 414.69497681]
[291.21423340 427.34585571]
[299.27371216 439.99670410]
[307.33322144 452.64758301]
[315.53021240 465.20977783]
[323.86376953 477.68182373]
[332.19732666 490.15386963]
[340.53088379 502.62591553]
[356.07846069 505.46298218]
[364.99728394 518.51019287]
[361.99600220 534.02691650]
[348.85522461 542.80731201]
[333.37112427 539.64215088]
[324.73016357 526.40924072]
[328.05883789 510.95947266]
[319.72528076 498.48742676]
[311.39172363 486.01538086]
[303.05819702 473.54333496]
[296.67849731 469.70019531]
[294.68234253 460.70709229]
[286.62286377 448.05621338]
[278.56335449 435.40533447]
[270.50387573 422.75445557]
[260.52847290 426.12078857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 113]
[14 112]
[15 111]
[16 110]
[17 108]
[18 107]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[28 98]
[29 97]
[30 96]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 45]
[39 44]
[56 66]
[57 65]
[58 64]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[80 87]
[81 86]
[120 142]
[121 141]
[122 140]
[123 139]
[124 137]
[125 136]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
