%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGAAACCCGGAUUCCGGUUCCGGUGGGCCUCCAUCAGCAAGCUCCAGUGCUACGUGUCCCUGGCAUUUUAGGUGUCGGUUGGGUAGGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[86.38485718 219.22126770]
[75.50059509 229.54273987]
[61.42992020 234.74044800]
[46.44955063 233.97335815]
[32.98339081 227.36558533]
[23.21035194 215.98631287]
[18.71176720 201.67678833]
[20.21553230 186.75234985]
[27.48002052 173.62591553]
[13.52976131 179.13864136]
[-0.32843170 184.87890625]
[-14.18662453 190.61915588]
[-28.04481697 196.35940552]
[-41.90301132 202.09965515]
[-46.43244934 217.06689453]
[-59.55116653 225.57766724]
[-75.06489563 223.61346436]
[-85.64853668 212.10169983]
[-86.30481720 196.47789001]
[-76.72385406 184.11912537]
[-61.42949295 180.86082458]
[-47.64326096 188.24145508]
[-33.78506851 182.50120544]
[-19.92687607 176.76095581]
[-6.06868315 171.02070618]
[7.78950977 165.28045654]
[12.86252213 159.70428467]
[22.19626808 159.58732605]
[27.18720818 152.87855530]
[36.33318329 150.79641724]
[47.28114700 140.54254150]
[58.22910690 130.28865051]
[69.17707062 120.03476715]
[79.95579529 109.60312653]
[90.56239319 98.99652863]
[91.77915192 93.67574310]
[95.98051453 89.48912048]
[102.22676849 88.07164764]
[113.50436401 78.18145752]
[124.78195953 68.29127502]
[136.05955505 58.40108490]
[137.24661255 42.86954880]
[148.82458496 33.00014496]
[163.62422180 34.22752762]
[174.90180969 24.33734131]
[180.17578125 9.42104626]
[194.84620667 6.84658289]
[206.12379456 -3.04360461]
[216.90252686 -13.47524357]
[227.15640259 -24.42320442]
[237.41029358 -35.37116623]
[247.66418457 -46.31912613]
[257.91806030 -57.26708984]
[268.17193604 -68.21504974]
[278.42584229 -79.16300964]
[275.36614990 -94.37543488]
[281.86300659 -108.46692657]
[295.41830444 -116.01902008]
[310.81967163 -114.12777710]
[322.14505005 -103.52042389]
[325.03952026 -88.27570343]
[318.39016724 -74.25552368]
[304.75375366 -66.85092163]
[289.37377930 -68.90912628]
[279.11990356 -57.96116638]
[268.86602783 -47.01320267]
[258.61215210 -36.06524277]
[248.35826111 -25.11728096]
[238.10437012 -14.16932106]
[227.85047913 -3.22135949]
[227.67640686 0.48704901]
[225.56968689 4.27127934]
[221.52868652 7.16184378]
[216.01399231 8.23399258]
[204.73638916 18.12417984]
[200.26907349 32.33306503]
[184.79200745 35.61494064]
[173.51440430 45.50512695]
[172.79954529 60.33835220]
[161.50335693 70.52906036]
[145.94975281 69.67868042]
[134.67214966 79.56887054]
[123.39455414 89.45905304]
[112.11695862 99.34924316]
[101.16899872 109.60312653]
[90.56239319 120.20973206]
[86.60375214 128.66322327]
[79.43095398 130.98272705]
[68.48299408 141.23661804]
[57.53503036 151.49049377]
[46.58707047 161.74438477]
[61.57025528 161.03433228]
[75.62103271 166.28558350]
[86.46591187 176.64843750]
[92.35012054 190.44612122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[30 91]
[31 90]
[32 89]
[33 88]
[34 86]
[35 85]
[38 84]
[39 83]
[40 82]
[41 81]
[44 78]
[45 77]
[47 75]
[48 74]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
