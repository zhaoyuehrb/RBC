%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACUAAAGACAAACCUGGCGGGUCCCCCGGAGCGGUCCCAGGCGCGCGCGCUCGGGAGCCCACGGGCCACACCCGCCUCCUAGCAACCGGAGCUCAGGUUCAGCCUAGAGAGAGAGGAGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[227.34471130 284.09362793]
[219.24246216 285.32897949]
[211.04449463 285.43209839]
[202.90829468 284.40023804]
[194.99031067 282.25247192]
[187.44288635 279.02932739]
[180.41131592 274.79202271]
[174.03112793 269.62136841]
[168.42538452 263.61611938]
[163.70236206 256.89114380]
[159.95341492 249.57518005]
[157.25125122 241.80851746]
[155.64852905 233.74011230]
[155.17678833 225.52487183]
[155.84582520 217.32057190]
[157.64355469 209.28492737]
[160.53617859 201.57254028]
[164.46882629 194.33181763]
[169.36659241 187.70228577]
[159.29321289 176.58802795]
[149.21983337 165.47375488]
[139.14643860 154.35948181]
[129.07305908 143.24522400]
[118.99967194 132.13095093]
[108.92629242 121.01668549]
[90.98036957 120.97679901]
[78.60589600 107.97948456]
[79.44661713 90.05322266]
[68.84001923 79.44661713]
[58.23341751 68.84001923]
[47.62681580 58.23341751]
[32.05089569 58.06472015]
[21.44538689 47.15702438]
[21.70220184 32.30880356]
[13.32794476 28.39770508]
[10.96945381 21.30934906]
[-4.15004158 16.64979553]
[-7.32229424 2.09692407]
[-17.66540337 -8.76678181]
[-28.00851059 -19.63048935]
[-38.35161972 -30.49419403]
[-53.47111511 -35.15374756]
[-56.64336777 -49.70661926]
[-66.98647308 -60.57032394]
[-77.32958221 -71.43402863]
[-87.67269135 -82.29773712]
[-103.54837799 -86.40803528]
[-107.66524506 -102.28202057]
[-95.78820801 -113.58989716]
[-80.13535309 -108.69909668]
[-76.80898285 -92.64084625]
[-66.46587372 -81.77713776]
[-56.12276840 -70.91343689]
[-45.77965927 -60.04972839]
[-31.39997292 -56.16722107]
[-27.48791313 -40.83730316]
[-17.14480400 -29.97359657]
[-6.80169630 -19.10988998]
[3.54141188 -8.24618435]
[17.92109871 -4.36367702]
[21.83316040 10.96623993]
[32.30880356 21.70220184]
[47.15702438 21.44538689]
[58.06472015 32.05089569]
[58.23341751 47.62681580]
[68.84001923 58.23341751]
[79.44661713 68.84001923]
[90.05322266 79.44661713]
[101.22198486 77.19898224]
[112.08654785 80.62746429]
[119.94226074 88.87857819]
[122.83351898 99.89827728]
[120.04055786 110.94330597]
[130.11393738 122.05757141]
[140.18733215 133.17182922]
[150.26071167 144.28610229]
[160.33409119 155.40037537]
[170.40747070 166.51463318]
[180.48086548 177.62890625]
[202.61546326 168.19688416]
[226.64355469 168.31301880]
[248.62724304 177.93286133]
[264.97378540 195.45652771]
[273.02261353 217.99470520]
[271.47860718 241.84501648]
[285.33679199 247.58526611]
[299.79162598 241.78047180]
[313.76400757 247.79931641]
[319.20892334 261.61557007]
[333.06710815 267.35580444]
[346.03057861 257.17318726]
[362.26306152 254.89978027]
[377.35189819 261.05862427]
[387.24298096 273.89340210]
[389.32989502 289.86798096]
[403.32479858 295.26641846]
[417.31967163 300.66482544]
[431.37976074 305.89111328]
[445.50292969 310.94445801]
[459.62606812 315.99780273]
[473.74923706 321.05114746]
[490.69943237 320.69430542]
[495.73461914 336.88330078]
[481.57217407 346.20324707]
[468.69589233 335.17431641]
[454.57272339 330.12097168]
[440.44958496 325.06762695]
[426.32641602 320.01428223]
[418.89041138 320.73062134]
[411.92126465 314.65972900]
[397.92636108 309.26129150]
[383.93145752 303.86288452]
[373.84405518 313.15258789]
[360.66836548 317.18753052]
[346.97760010 315.11968994]
[335.47158813 307.29873657]
[328.44433594 295.21466064]
[327.32687378 281.21401978]
[313.46865845 275.47375488]
[299.84899902 281.39318848]
[285.71304321 275.76916504]
[279.59652710 261.44345093]
[265.73834229 255.70320129]
[261.20721436 262.51290894]
[255.77615356 268.63265991]
[249.54890442 273.94436646]
[242.64465332 278.34536743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[28 68]
[29 67]
[30 66]
[31 65]
[34 62]
[36 61]
[38 59]
[39 58]
[40 57]
[41 56]
[43 54]
[44 53]
[45 52]
[46 51]
[85 123]
[86 122]
[89 119]
[90 118]
[95 112]
[96 111]
[97 110]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
