%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUGGGCCUCUCACUUCCGCCCAGGUGAGGCAGGGCCGACACCGAGCCCGCCCGACCCGGGCUCCCACCUGCUCCUCCAGCGCACCAGGUGUCUUUAAGAGUGAUUGAAGAGAAUAAUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[140.96554565 185.28540039]
[155.39599609 181.19120789]
[170.26208496 183.18626404]
[159.52409363 172.71272278]
[148.78608704 162.23916626]
[138.04808044 151.76560974]
[127.31008148 141.29205322]
[116.44234467 130.95318604]
[105.44656372 120.75059509]
[108.73196411 135.38636780]
[105.61737061 150.05946350]
[96.66979218 162.09860229]
[83.51814270 169.31205750]
[68.55668640 170.38664246]
[54.50915527 165.12672424]
[43.93290710 154.48983765]
[38.75335693 140.41247559]
[39.91344070 125.45740509]
[47.20196533 112.34720612]
[59.29205322 103.46858978]
[73.98220825 100.43790436]
[61.18284988 92.61637878]
[48.38348389 84.79485321]
[35.58412170 76.97332001]
[19.77406120 76.37959290]
[12.94849586 63.14097977]
[0.14913280 55.31945038]
[-12.65023041 47.49792480]
[-27.83082771 50.98894119]
[-40.69978333 42.87446976]
[-43.93438339 28.38057709]
[-56.73374557 20.55904770]
[-69.53311157 12.73752022]
[-78.59550476 10.89939690]
[-82.55063629 4.55806446]
[-95.15102386 -3.58012938]
[-107.75141907 -11.71832371]
[-120.35180664 -19.85651779]
[-133.05267334 -27.83699799]
[-145.85203552 -35.65852737]
[-162.25064087 -35.52622986]
[-170.33016968 -49.79694748]
[-161.77906799 -63.79019165]
[-145.39399719 -63.11090851]
[-138.03050232 -48.45788956]
[-125.23114014 -40.63636017]
[-117.80172729 -39.82431030]
[-112.21360779 -32.45690536]
[-99.61322021 -24.31871223]
[-87.01283264 -16.18051910]
[-74.41244507 -8.04232407]
[-61.71158218 -0.06184319]
[-48.91221619 7.75968504]
[-36.11285400 15.58121300]
[-21.73948860 11.84732437]
[-8.64769268 19.59713364]
[-4.82870245 34.69855881]
[7.97066069 42.52008820]
[20.77002335 50.34161758]
[35.66458893 50.37589645]
[43.40565109 64.17395782]
[56.20501328 71.99549103]
[69.00437927 79.81701660]
[81.80374146 87.63854218]
[69.57633209 78.95001221]
[64.34363556 64.89231873]
[67.91390991 50.32340622]
[79.05338287 40.27789688]
[93.91254425 38.22724152]
[107.35649109 44.88008881]
[114.73935699 57.93739319]
[113.50983429 72.88691711]
[104.09250641 84.56271362]
[114.29509735 73.56693268]
[124.49768829 62.57115555]
[125.33710480 46.55007935]
[138.46954346 37.33495331]
[153.82092285 41.99483490]
[159.61499023 56.95505905]
[151.40702820 70.73942566]
[135.49346924 72.77375031]
[125.29087830 83.76952362]
[115.08828735 94.76530457]
[115.64915466 109.75481415]
[126.64493561 119.95740509]
[135.16342163 123.55476379]
[137.78363037 130.55406189]
[148.52163696 141.02760315]
[159.25962830 151.50115967]
[169.99763489 161.97471619]
[180.73564148 172.44825745]
[193.02291870 181.05191040]
[208.81353760 180.06851196]
[216.92332458 192.56173706]
[230.43785095 199.06999207]
[243.95239258 205.57824707]
[257.46691895 212.08650208]
[270.98144531 218.59475708]
[284.49600220 225.10301208]
[298.01052856 231.61126709]
[312.84326172 226.15553284]
[327.15414429 232.86183167]
[332.45275879 247.75143433]
[325.59552002 261.99060059]
[310.65075684 267.13150024]
[296.48486328 260.12411499]
[291.50225830 245.12580872]
[277.98773193 238.61755371]
[264.47320557 232.10929871]
[250.95866394 225.60104370]
[237.44413757 219.09278870]
[223.92959595 212.58453369]
[210.41506958 206.07626343]
[195.59109497 207.52517700]
[186.51466370 194.56643677]
[193.47409058 207.85427856]
[194.56205750 222.81477356]
[189.59835815 236.96968079]
[179.40522766 247.97424316]
[165.67118835 254.00550842]
[150.67131042 254.06439209]
[136.89033508 248.14114380]
[126.61112213 237.21694946]
[121.53643799 223.10144043]
[122.50691986 208.13287354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[6 88]
[7 87]
[8 85]
[9 84]
[21 64]
[22 63]
[23 62]
[24 61]
[26 59]
[27 58]
[28 57]
[31 54]
[32 53]
[33 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 46]
[40 45]
[73 83]
[74 82]
[75 81]
[92 115]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
