%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGACCCGCGCUGCCUCCGCCGCUCCUCGGAUGGUGACGGGGCCCUGCCGCCGCAGCCCCCCCAAGCCCCGGCUCCGCAGGCCCACAGCGCCGGAGCCCCGCAGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[142.13674927 339.11614990]
[139.23596191 324.39929199]
[136.33517456 309.68246460]
[133.43438721 294.96560669]
[130.53359985 280.24877930]
[127.63281250 265.53192139]
[115.15827179 257.47454834]
[112.00681305 242.59089661]
[120.54272461 229.56108093]
[117.64193726 214.84423828]
[114.74114990 200.12739563]
[111.63607025 185.45230103]
[108.32730103 170.82177734]
[105.01853943 156.19126892]
[101.70977020 141.56074524]
[98.40100098 126.93022919]
[91.39292145 125.56779480]
[84.98761749 122.41477966]
[79.63367462 117.69200134]
[75.70603943 111.73019409]
[73.47977448 104.94689178]
[58.55073166 103.48960876]
[43.62168884 102.03231812]
[28.69264793 100.57503510]
[13.76360512 99.11774445]
[4.77466774 101.42020416]
[-1.55817449 97.40679932]
[-16.44093895 95.53507996]
[-31.33698654 102.39363098]
[-44.56660080 92.70294952]
[-42.52029037 76.43197632]
[-27.30312157 70.31889343]
[-14.56921482 80.65231323]
[0.31354901 82.52404022]
[15.22089195 84.18870544]
[30.14993477 85.64598846]
[45.07897949 87.10327911]
[60.00801849 88.56056213]
[74.93706512 90.01785278]
[79.80179596 82.11630249]
[87.05602264 76.33045197]
[95.84156799 73.34476471]
[105.11906433 73.51246643]
[111.94749451 60.15684891]
[118.77591705 46.80123138]
[125.60434723 33.44561386]
[132.43278503 20.08999443]
[133.58570862 10.88276577]
[139.64117432 6.46196175]
[146.83822632 -6.69867802]
[154.03527832 -19.85931778]
[152.52503967 -39.86674881]
[169.21957397 -49.45609665]
[175.67410278 -62.99636841]
[182.12863159 -76.53664398]
[188.58316040 -90.07691956]
[183.53941345 -104.81457520]
[190.27810669 -118.45439148]
[204.35929871 -123.17200470]
[210.81382751 -136.71228027]
[203.28851318 -150.28244019]
[205.21014404 -165.68006897]
[215.83982849 -176.98446655]
[231.09024048 -179.84884644]
[245.09727478 -173.17182922]
[252.47492981 -159.52082825]
[250.38638306 -144.14495850]
[239.63468933 -132.95654297]
[224.35409546 -130.25775146]
[217.89956665 -116.71747589]
[223.10131836 -102.80786133]
[216.74839783 -88.98414612]
[202.12342834 -83.62239075]
[195.66889954 -70.08211517]
[189.21437073 -56.54183960]
[182.75984192 -43.00156403]
[187.07522583 -33.54968643]
[185.36430359 -23.07676506]
[177.96310425 -15.16610622]
[167.19592285 -12.66226578]
[159.99887085 0.49837381]
[152.80181885 13.65901375]
[145.78839111 26.91842461]
[138.95997620 40.27404404]
[132.13154602 53.62966156]
[125.30310822 66.98528290]
[118.47467804 80.34089661]
[126.76680756 103.36631775]
[113.03152466 123.62145996]
[116.34028625 138.25198364]
[119.64905548 152.88249207]
[122.95782471 167.51301575]
[126.26658630 182.14353943]
[131.27758789 189.95327759]
[129.45799255 197.22660828]
[132.35877991 211.94345093]
[135.25956726 226.66029358]
[148.10144043 235.47640991]
[150.83360291 250.44270325]
[142.34965515 262.63113403]
[145.25044250 277.34799194]
[148.15122986 292.06481934]
[151.05201721 306.78167725]
[153.95280457 321.49850464]
[156.85359192 336.21536255]
[170.99006653 342.61376953]
[178.63655090 356.11602783]
[176.85281372 371.53021240]
[166.32473755 382.92932129]
[151.10058594 385.93008423]
[137.03434753 379.37872314]
[129.53479004 365.79431152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[9 97]
[10 96]
[11 95]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[27 34]
[28 33]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[49 82]
[50 81]
[51 80]
[53 76]
[54 75]
[55 74]
[56 73]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
