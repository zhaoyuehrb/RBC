%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCCAACGGGGCAAGGGGGGCGGGAAGGAGGUGGGGUUUCUCCCAGCCAAUCGACGGGCGCGCCCUCGUUGCCGCUCU\
) } def
/len { sequence length } bind def

/coor [
[62.93595886 374.37466431]
[48.88703918 380.25241089]
[33.66217422 379.90130615]
[19.89915276 373.38217163]
[9.98250866 361.82446289]
[5.63035774 347.23068237]
[7.59673691 332.12927246]
[15.54095840 319.13659668]
[28.08663940 310.50375366]
[43.06016159 307.72644043]
[38.46653366 293.55789185]
[49.17781067 281.91406250]
[52.63705063 267.31838989]
[56.09629059 252.72271729]
[59.55552673 238.12704468]
[63.01476669 223.53137207]
[58.42113495 209.36280823]
[69.13241577 197.71897888]
[72.59165192 183.12330627]
[76.05088806 168.52761841]
[79.51013184 153.93194580]
[82.96936798 139.33627319]
[86.42860413 124.74060822]
[89.88784027 110.14493561]
[86.06215668 96.69667053]
[95.51648712 86.39582825]
[82.49015808 72.77150726]
[80.01566315 54.23128510]
[88.87450409 37.92234802]
[105.51229095 30.03031349]
[107.25368500 15.13173771]
[108.41607666 0.17684339]
[108.99770355 -14.81187630]
[109.57933807 -29.80059433]
[102.38295746 -43.89040756]
[110.60794830 -56.30809021]
[111.18957520 -71.29680634]
[111.77120972 -86.28553009]
[101.97470093 -98.99017334]
[105.93934631 -114.53562927]
[120.62380219 -120.99674988]
[134.76342773 -113.41712189]
[137.51148987 -97.61118317]
[126.75992584 -85.70389557]
[126.17829895 -70.71517944]
[125.59666443 -55.72645950]
[132.83464050 -42.70874023]
[124.56805420 -29.21896553]
[123.98641968 -14.23024559]
[123.40479279 0.75847393]
[126.11994934 4.97759247]
[126.02467346 10.99394131]
[122.15225983 16.87313080]
[120.41086578 31.77170753]
[130.24440002 37.90910721]
[137.00439453 47.38972855]
[139.62545776 58.78836441]
[137.66812134 70.37250519]
[131.39193726 80.36566925]
[121.72187805 87.21979523]
[110.11215973 89.85506439]
[113.93784332 103.30332947]
[104.48351288 113.60417175]
[101.02427673 128.19984436]
[97.56504059 142.79551697]
[94.10580444 157.39118958]
[90.64656067 171.98686218]
[87.18732452 186.58253479]
[83.72808838 201.17820740]
[88.07428741 216.39074707]
[77.61043549 226.99060059]
[74.15119934 241.58627319]
[70.69196320 256.18194580]
[67.23272705 270.77761841]
[63.77348709 285.37329102]
[68.11968994 300.58581543]
[57.65583420 311.18569946]
[69.79020691 320.38769531]
[77.12702942 333.73275757]
[78.39514923 348.90878296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 77]
[12 75]
[13 74]
[14 73]
[15 72]
[16 71]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[26 61]
[30 54]
[31 53]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
