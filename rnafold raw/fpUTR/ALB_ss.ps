%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUUGGUUAAAGAAGUAUAUUAGUGCUAAUUUCCCUCCGUUUGUCCUAGCUUUUCUCUUCUGUCAACCCCACACGCCUUUGGCACA\
) } def
/len { sequence length } bind def

/coor [
[105.95390320 236.74272156]
[99.12541199 226.75062561]
[94.98233032 215.36653137]
[93.78881073 203.29876709]
[95.62529755 191.29977417]
[100.38310242 180.11920166]
[107.77085114 170.45706177]
[117.33229065 162.91993713]
[111.71319580 149.01217651]
[106.09409332 135.10441589]
[100.47499847 121.19666290]
[85.20844269 115.18992615]
[78.79820251 100.08834839]
[85.08235931 84.93387604]
[78.98130798 71.23069763]
[72.88025665 57.52751541]
[66.77921295 43.82433319]
[60.67815781 30.12115097]
[47.65573120 31.45153236]
[34.81705093 28.99265099]
[23.23996925 22.96156502]
[13.89338017 13.87478161]
[7.55611563 2.50404191]
[4.75206757 -10.18921947]
[5.70688534 -23.13516235]
[10.32985592 -35.24571609]
[18.22240639 -45.50602722]
[28.71245193 -53.05949020]
[24.07719612 -67.32534027]
[19.44194031 -81.59118652]
[14.80668640 -95.85703278]
[-0.32126307 -95.83879089]
[-14.71381187 -100.49815369]
[-26.96092606 -109.37866211]
[-35.86275482 -121.61028290]
[-40.54719162 -135.99468994]
[-40.55530167 -151.12265015]
[-35.88628769 -165.51208496]
[-26.99757767 -177.75323486]
[-14.75999260 -186.64686584]
[-0.37244725 -191.32167053]
[14.75551319 -191.31964111]
[29.14180565 -186.64099121]
[41.37700653 -177.74407959]
[50.26243591 -165.50053406]
[54.92758942 -151.10986328]
[54.91542816 -135.98190308]
[50.22713470 -121.59874725]
[41.32202530 -109.36951447]
[29.07253456 -100.49228668]
[33.70779037 -86.22644043]
[38.34304428 -71.96059418]
[42.97829819 -57.69474411]
[60.05953979 -56.96313095]
[75.64085388 -49.84257889]
[87.42040253 -37.35659027]
[93.64730072 -21.32338333]
[93.38184357 -4.09113932]
[86.63720703 11.80589390]
[74.38134003 24.02010155]
[80.48239136 37.72328186]
[86.58344269 51.42646408]
[92.68449402 65.12964630]
[98.78553772 78.83282471]
[111.19078827 81.99193573]
[119.51652527 91.71572876]
[120.72769165 104.45947266]
[114.38275146 115.57756042]
[120.00185394 129.48532104]
[125.62094879 143.39308167]
[131.24005127 157.30084229]
[149.60682678 156.65063477]
[166.87834167 162.83998108]
[180.60482788 174.96641541]
[188.84851074 191.28707886]
[190.45704651 209.46929932]
[185.22465515 226.92385864]
[173.91802979 241.17381287]
[181.86680603 253.89454651]
[189.81559753 266.61526489]
[203.33665466 276.84353638]
[197.25109863 292.66763306]
[180.36074829 291.20046997]
[177.09487915 274.56405640]
[169.14608765 261.84332275]
[161.19729614 249.12260437]
[149.62741089 252.46174622]
[137.57885742 252.82952881]
[125.80326843 250.19703674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[11 68]
[14 64]
[15 63]
[16 62]
[17 61]
[18 60]
[28 53]
[29 52]
[30 51]
[31 50]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
