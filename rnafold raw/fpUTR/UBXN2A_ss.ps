%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCGCGGCCGCGGAACCUGAGGCGGUCUGGGGCGGCGGCGCUCCGGCUCUGAAGGGCUCCAGCCAAACGGAGCCCGCGGCCAAACGGUGCCUGCGGUGCCUGAGCUGAGUGAGGCCGAGGCCGGGAGGCCGUGCCCGGAGUAAGGCGAAAGAGA\
) } def
/len { sequence length } bind def

/coor [
[-0.18094648 227.37411499]
[-12.06610012 236.52523804]
[-23.95125389 245.67636108]
[-35.83640671 254.82749939]
[-42.05054855 269.37722778]
[-56.85525513 271.01123047]
[-68.74040985 280.16235352]
[-80.62556458 289.31347656]
[-86.83970642 303.86322021]
[-101.64440918 305.49722290]
[-113.52956390 314.64834595]
[-125.41471863 323.79946899]
[-131.62886047 338.34921265]
[-146.43356323 339.98321533]
[-158.31872559 349.13433838]
[-170.20387268 358.28546143]
[-182.08903503 367.43658447]
[-187.01425171 375.19570923]
[-194.30268860 376.64871216]
[-206.36743164 385.56170654]
[-208.46739197 401.22586060]
[-221.07905579 410.75067139]
[-236.72012329 408.48519897]
[-246.11105347 395.77355957]
[-243.68035889 380.15731812]
[-230.87013245 370.90130615]
[-215.28044128 373.49697876]
[-203.21569824 364.58395386]
[-191.24015808 355.55142212]
[-179.35499573 346.40029907]
[-167.46984863 337.24917603]
[-155.58470154 328.09805298]
[-150.22065735 314.20285034]
[-134.56584167 311.91430664]
[-122.68069458 302.76318359]
[-110.79553986 293.61206055]
[-105.43150330 279.71685791]
[-89.77668762 277.42831421]
[-77.89154053 268.27719116]
[-66.00638580 259.12606812]
[-60.64234543 245.23088074]
[-44.98753357 242.94233704]
[-33.10237885 233.79121399]
[-21.21722794 224.64009094]
[-9.33207321 215.48895264]
[1.58610845 205.20336914]
[11.42949486 193.88490295]
[13.82006073 176.52297974]
[31.23574638 170.61994934]
[40.85214996 159.10800171]
[50.46855545 147.59606934]
[60.08496094 136.08412170]
[69.70136261 124.57218933]
[79.31777191 113.06024933]
[73.57536316 98.80855560]
[77.41543579 82.71122742]
[90.74095154 71.00959015]
[84.11777496 57.55100632]
[77.49459076 44.09242630]
[70.87140656 30.63384247]
[64.24822235 17.17525864]
[57.62504196 3.71667600]
[51.00186157 -9.74190712]
[35.68875504 -12.24958420]
[24.79812431 -23.30281067]
[22.51763916 -38.65139389]
[29.72418976 -52.39348984]
[43.64671326 -59.24498367]
[58.93171310 -56.57133865]
[69.70179749 -45.40061951]
[71.81564331 -30.02820015]
[64.46044159 -16.36508942]
[71.08362579 -2.90650654]
[77.70681000 10.55207634]
[84.32999420 24.01066017]
[90.95317078 37.46924210]
[97.57635498 50.92782593]
[104.19953918 64.38640594]
[118.39949036 69.21976471]
[131.85807800 62.59658432]
[145.31665039 55.97340012]
[158.77523804 49.35021973]
[172.23382568 42.72703552]
[185.69239807 36.10385513]
[188.54888916 22.90780830]
[198.35298157 13.91063213]
[211.35856628 12.24492550]
[222.76919556 18.29830170]
[231.99227905 5.44352579]
[246.79882812 7.06076908]
[253.29028320 0.55516052]
[260.72033691 0.71822679]
[274.43161011 -5.36465311]
[288.14285278 -11.44753265]
[301.85412598 -17.53041267]
[308.47363281 -23.90567017]
[315.89898682 -23.59491158]
[329.72845459 -29.40397835]
[334.08175659 -34.49679565]
[339.53976440 -36.31185150]
[344.22512817 -35.15695190]
[358.27462769 -40.41161346]
[372.32412720 -45.66627884]
[386.37362671 -50.92094040]
[396.58886719 -63.00230408]
[411.22012329 -60.21379089]
[417.54357910 -74.69790649]
[432.28701782 -80.39051819]
[446.70349121 -73.91429138]
[452.23989868 -59.11146927]
[445.61160278 -44.76429367]
[430.75106812 -39.38469315]
[416.47479248 -46.16428757]
[407.26446533 -34.45877457]
[391.62829590 -36.87143707]
[377.57879639 -31.61677551]
[363.52929688 -26.36211205]
[349.47979736 -21.10744858]
[335.53753662 -15.57449055]
[321.70803833 -9.76542282]
[307.93698120 -3.81915545]
[294.22573853 2.26372433]
[280.51449585 8.34660435]
[266.80322266 14.42948437]
[253.15312195 20.64837456]
[244.90191650 33.04864883]
[229.12348938 31.88590813]
[224.09259033 47.90780640]
[208.74018860 55.50706100]
[192.31558228 49.56243515]
[178.85700989 56.18561935]
[165.39842224 62.80879974]
[151.93983459 69.43198395]
[138.48126221 76.05516815]
[125.02267456 82.67835236]
[128.92262268 101.00251007]
[121.43151855 117.14706421]
[106.56825256 125.10890198]
[90.82971191 122.67665100]
[81.21330261 134.18858337]
[71.59690094 145.70053101]
[61.98049545 157.21246338]
[52.36408997 168.72441101]
[42.74768448 180.23634338]
[43.11447144 193.16497803]
[34.82247162 202.56179810]
[22.74796486 203.72828674]
[12.90457821 215.04675293]
[27.63998222 212.24179077]
[41.84650421 217.05580139]
[51.84125900 228.24082947]
[55.03322601 242.89727783]
[50.59492493 257.22561646]
[39.67692947 267.51141357]
[25.10960960 271.08816528]
[10.66937447 267.02865601]
[0.09969199 256.38525391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[6 40]
[7 39]
[8 38]
[10 36]
[11 35]
[12 34]
[14 32]
[15 31]
[16 30]
[17 29]
[19 28]
[20 27]
[46 148]
[47 147]
[49 144]
[50 143]
[51 142]
[52 141]
[53 140]
[54 139]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[79 135]
[80 134]
[81 133]
[82 132]
[83 131]
[84 130]
[88 127]
[90 125]
[92 124]
[93 123]
[94 122]
[95 121]
[97 120]
[98 119]
[101 118]
[102 117]
[103 116]
[104 115]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
