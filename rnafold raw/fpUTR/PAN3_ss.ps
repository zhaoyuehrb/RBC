%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCGGGCGGCUCCGGCUCCCGCAGCGGGACAGACCCACCCGCCCAGGCUUUUAUCCGGCACCGGCAGCGUCUUCCUUUCCUCCCCCGUCUAUGGUGGUGGCGGCGGCGGCUCCUCGGGCGGCGGCGGAAGACGAGGCUGCGGCGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[7.19652510 174.39973450]
[-10.87362194 182.15386963]
[-30.31298828 179.76358032]
[-45.84244156 167.95695496]
[-59.26988983 174.64303589]
[-68.17448425 187.72044373]
[-83.01628113 186.46733093]
[-96.44373322 193.15341187]
[-109.87118530 199.83947754]
[-123.29862976 206.52555847]
[-136.72607422 213.21162415]
[-150.15353394 219.89770508]
[-151.42707825 233.65747070]
[-159.28416443 244.89282227]
[-171.57548523 250.71769714]
[-185.03033447 249.70088196]
[-196.12683105 242.21624756]
[-209.68873596 248.62522888]
[-223.18411255 255.17309570]
[-236.47145081 262.13345337]
[-249.61308289 269.36514282]
[-262.75473022 276.59686279]
[-275.89636230 283.82855225]
[-289.03799438 291.06027222]
[-299.99975586 303.99377441]
[-315.46234131 297.04074097]
[-313.06152344 280.25762939]
[-296.26968384 277.91864014]
[-283.12805176 270.68692017]
[-269.98641968 263.45523071]
[-256.84478760 256.22351074]
[-243.70315552 248.99182129]
[-241.52433777 244.67881775]
[-236.58151245 241.71969604]
[-229.87019348 241.74563599]
[-225.25598145 235.91285706]
[-216.09770203 235.06332397]
[-202.53581238 228.65434265]
[-200.02197266 212.46081543]
[-188.24908447 200.82417297]
[-171.69914246 198.45188904]
[-156.83959961 206.47026062]
[-143.41215515 199.78417969]
[-129.98471069 193.09811401]
[-116.55725861 186.41203308]
[-103.12980652 179.72595215]
[-89.70236206 173.03988647]
[-81.75818634 160.44070435]
[-65.95596313 161.21557617]
[-52.52851486 154.52951050]
[-53.84336853 144.02178955]
[-52.15396881 133.54634094]
[-47.58431244 123.94653320]
[-40.49076462 115.99859619]
[-31.43428612 110.34886932]
[-21.13609695 107.46127319]
[-10.42023373 107.57917023]
[-0.14761755 110.70496368]
[8.85311317 116.59890747]
[15.85244274 124.79747009]
[29.89441872 119.52272797]
[43.93639374 114.24799347]
[57.97837067 108.97325134]
[71.96545410 103.55462646]
[85.83833313 97.84996033]
[94.41672516 86.80899811]
[108.31487274 88.33645630]
[122.12845612 82.48966980]
[135.94204712 76.64288330]
[149.75563049 70.79608917]
[163.56921387 64.94930267]
[173.26197815 52.44487000]
[187.99847412 54.60927963]
[201.81205750 48.76249313]
[211.50482178 36.25806046]
[226.24133301 38.42247009]
[240.05491638 32.57568359]
[244.40171814 27.46218109]
[249.86477661 25.63384819]
[254.55767822 26.78535080]
[268.59963989 21.51061058]
[282.64163208 16.23586845]
[296.68359375 10.96112633]
[306.88156128 -1.13482869]
[321.51678467 1.63276589]
[335.55877686 -3.64197564]
[345.75671387 -15.73793125]
[360.39193726 -12.97033691]
[374.43392944 -18.24507713]
[388.47589111 -23.51981926]
[402.51788330 -28.79456139]
[416.55984497 -34.06930161]
[430.60183716 -39.34404373]
[437.19284058 -53.45773697]
[451.50854492 -58.60704422]
[464.92315674 -52.23654556]
[478.96514893 -57.51128769]
[485.95043945 -63.49473190]
[493.34994507 -62.74692917]
[507.49728394 -67.73225403]
[521.64459229 -72.71757507]
[532.08874512 -84.60159302]
[546.66406250 -81.53409576]
[560.81140137 -86.51941681]
[571.06427002 -99.31827545]
[587.23168945 -96.57131958]
[592.68200684 -81.10439301]
[581.80841064 -68.82853699]
[565.79669189 -72.37210083]
[551.64941406 -67.38677979]
[542.21716309 -55.85934067]
[526.62988281 -58.57025909]
[512.48260498 -53.58493423]
[498.33526611 -48.59961319]
[484.23989868 -43.46931076]
[470.19790649 -38.19456863]
[464.29513550 -24.56765938]
[450.12969971 -19.01828766]
[435.87655640 -25.30206871]
[421.83459473 -20.02732658]
[407.79260254 -14.75258446]
[393.75064087 -9.47784328]
[379.70867920 -4.20310163]
[365.66668701 1.07163990]
[356.47311401 12.79031086]
[340.83349609 10.40000057]
[326.79153442 15.67474270]
[317.59793091 27.39341354]
[301.95834351 25.00310326]
[287.91638184 30.27784538]
[273.87438965 35.55258560]
[259.83242798 40.82732773]
[245.90170288 46.38926697]
[232.08811951 52.23605347]
[223.38339233 64.32228851]
[207.65884399 62.57607651]
[193.84526062 68.42286682]
[185.14053345 80.50909424]
[169.41600037 78.76288605]
[155.60241699 84.60967255]
[141.78883362 90.45646667]
[127.97525024 96.30325317]
[114.16166687 102.15003967]
[105.58327484 113.19100189]
[91.68512726 111.66354370]
[84.95137787 117.92872620]
[77.52738953 117.48533630]
[70.66643524 123.61094666]
[63.25311279 123.01522827]
[49.21113586 128.28996277]
[35.16915894 133.56471252]
[21.12718391 138.83944702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 50]
[5 49]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[17 38]
[18 37]
[19 35]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[60 152]
[61 151]
[62 150]
[63 149]
[64 147]
[65 145]
[67 143]
[68 142]
[69 141]
[70 140]
[71 139]
[73 137]
[74 136]
[76 134]
[77 133]
[80 132]
[81 131]
[82 130]
[83 129]
[85 127]
[86 126]
[88 124]
[89 123]
[90 122]
[91 121]
[92 120]
[93 119]
[96 116]
[97 115]
[99 114]
[100 113]
[101 112]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
