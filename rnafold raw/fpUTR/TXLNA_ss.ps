%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGGGGAAGCCAUCGGACGUCGGCGGUGAGGAUCUUCUCCUGACCCAGCAUCGCUCAUCACA\
) } def
/len { sequence length } bind def

/coor [
[90.45606995 254.70115662]
[89.87101746 238.90769958]
[100.68605804 227.38334656]
[99.97232819 212.40034485]
[99.25859833 197.41732788]
[98.54486847 182.43432617]
[97.83113861 167.45130920]
[97.11740875 152.46830750]
[96.04732513 137.50651550]
[94.62148285 122.57444000]
[76.07315063 110.17762756]
[75.19110870 85.37921906]
[60.79871368 81.15322876]
[46.40632248 76.92723846]
[32.65481567 84.24391937]
[18.11908150 79.75314331]
[11.22848797 66.59809875]
[-4.57215023 70.98806763]
[-16.08314514 59.30778503]
[-11.46297073 43.57291794]
[4.53553247 39.97014999]
[15.45447636 52.20569992]
[28.36336899 44.86430359]
[43.01950455 48.94503403]
[50.63230896 62.53484344]
[65.02470398 66.76083374]
[79.41709900 70.98682404]
[93.20600128 65.08206940]
[100.07939911 51.74953461]
[106.95279694 38.41700363]
[106.39921570 22.60548592]
[119.10837555 14.83847141]
[125.98177338 1.50593960]
[132.85517883 -11.82659245]
[139.72857666 -25.15912437]
[136.23292542 -40.81671143]
[146.40684509 -53.22118378]
[162.44577026 -52.85689163]
[172.04600525 -40.00328445]
[167.84306335 -24.52055550]
[153.06109619 -18.28572655]
[146.18769836 -4.95319414]
[139.31430054 8.37933731]
[132.44090271 21.71186829]
[133.48612976 36.56975555]
[120.28533173 45.29040146]
[113.41193390 58.62293243]
[106.53853607 71.95546722]
[116.72480774 77.71242523]
[123.47517395 86.79716492]
[125.87770844 97.46577454]
[123.81999207 107.81676483]
[117.95816040 116.12917328]
[109.55355835 121.14859772]
[110.97940063 136.08067322]
[115.03362274 144.67466736]
[112.10041809 151.75457764]
[112.81414795 166.73757935]
[113.52787781 181.72059631]
[114.24160767 196.70359802]
[114.95533752 211.68661499]
[115.66906738 226.66961670]
[127.53059387 237.11375427]
[128.44944763 252.89131165]
[117.88050079 264.64175415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 55]
[10 54]
[12 27]
[13 26]
[14 25]
[17 22]
[28 48]
[29 47]
[30 46]
[32 44]
[33 43]
[34 42]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
