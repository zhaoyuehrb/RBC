%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUCCCCCUCCCAAAAUCGCUCCAUUACAUAAAUCGGGGGGGGUGCAGGAGGGGGGUCCCUUCCGAUCCUCCCUCCUGACGCCCCCCCCAGCAGCCCCCUCCCCCACCAUUGAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[47.26802444 565.94995117]
[32.26050568 566.24932861]
[17.28794479 565.18273926]
[2.47440791 562.75903320]
[-12.05735016 558.99829102]
[-26.18691254 553.93164062]
[-39.79719543 547.60113525]
[-52.77541733 540.05914307]
[-65.01403046 531.36828613]
[-76.41162872 521.60046387]
[-86.87375641 510.83670044]
[-96.31372833 499.16610718]
[-104.65331268 486.68548584]
[-111.82341003 473.49816895]
[-117.76459503 459.71350098]
[-122.42765045 445.44564819]
[-125.77392578 430.81289673]
[-127.77569580 415.93646240]
[-128.41636658 400.93963623]
[-127.69064331 385.94668579]
[-125.60453033 371.08184814]
[-122.17530823 356.46829224]
[-117.43140411 342.22714233]
[-111.41212463 328.47637939]
[-104.16735077 315.32995605]
[-95.75711060 302.89682007]
[-86.25109863 291.27996826]
[-75.72808075 280.57568359]
[-64.27526855 270.87268066]
[-51.98755264 262.25137329]
[-38.96676254 254.78314209]
[-25.32079315 248.52992249]
[-11.16272068 243.54351807]
[3.39013410 239.86524963]
[18.21717834 237.52560425]
[33.19554901 236.54394531]
[48.20112991 236.92843628]
[63.10957336 238.67587280]
[66.20285034 223.99829102]
[69.29611969 209.32069397]
[72.38939667 194.64311218]
[75.48267365 179.96551514]
[78.57594299 165.28793335]
[81.66921997 150.61033630]
[84.76249695 135.93273926]
[87.85576630 121.25515747]
[90.94904327 106.57756805]
[93.85152435 91.86106110]
[96.56271362 77.10810852]
[99.27390289 62.35516357]
[101.98509979 47.60221863]
[104.69628906 32.84926987]
[107.40748596 18.09632492]
[110.11867523 3.34337735]
[112.82986450 -11.40956974]
[115.34931946 -26.19646835]
[117.67659760 -41.01482773]
[120.00388336 -55.83318710]
[122.33116150 -70.65154266]
[124.65844727 -85.46990204]
[115.15092468 -98.09458160]
[117.43778229 -113.73254395]
[130.16227722 -123.10605621]
[145.77519226 -120.65399170]
[155.01364136 -107.83110809]
[152.39665222 -92.24499512]
[139.47680664 -83.14262390]
[137.14952087 -68.32426453]
[134.82223511 -53.50590515]
[132.49494934 -38.68754578]
[130.16767883 -23.86918640]
[132.26354980 -16.68651581]
[127.58280945 -8.69837761]
[124.87162018 6.05456924]
[122.16043091 20.80751610]
[119.44923401 35.56046295]
[116.73804474 50.31340790]
[114.02685547 65.06635284]
[111.31565857 79.81930542]
[108.60446930 94.57225037]
[110.37344360 102.54456329]
[105.62663269 109.67083740]
[102.53336334 124.34843445]
[99.44008636 139.02601624]
[96.34680939 153.70361328]
[93.25354004 168.38119507]
[90.16026306 183.05879211]
[87.06698608 197.73638916]
[83.97371674 212.41397095]
[80.88043976 227.09156799]
[77.78716278 241.76914978]
[92.13283539 246.18696594]
[106.01732635 251.89100647]
[119.32559204 258.83401489]
[131.94734192 266.95843506]
[143.77801514 276.19699097]
[154.71954346 286.47308350]
[164.68127441 297.70159912]
[173.58065796 309.78942871]
[181.34394836 322.63647461]
[187.90682983 336.13626099]
[193.21488953 350.17691040]
[197.22416687 364.64205933]
[199.90144348 379.41186523]
[201.22450256 394.36395264]
[201.18241882 409.37438965]
[199.77551270 424.31881714]
[197.01545715 439.07339478]
[192.92512512 453.51583862]
[187.53839111 467.52648926]
[180.89991760 480.98925781]
[173.06468201 493.79257202]
[164.09765625 505.83032227]
[154.07310486 517.00274658]
[143.07412720 527.21734619]
[131.19183350 536.38940430]
[118.52471161 544.44293213]
[105.17771912 551.31115723]
[91.26145172 556.93725586]
[76.89123535 561.27453613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
