%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGCAGGCGCCCAGGCCGGGUGAGGCGUUCCCGGAGGUGUCCAGCAGAGGACGCUGCCGGCGGAGACGGGACCGGAAGCCGGGCCGCAGGCGGCCGGGCGUAUUCGCCGACUCCUCCCGCUUCCGCUGCCGCAGCCGGUCGUAACCAAGUUGUGUCCUGUCAGCCGCUGUCCCCUUCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[-53.93616104 364.73120117]
[-56.49222183 349.94918823]
[-65.18688202 362.17221069]
[-73.88155365 374.39526367]
[-82.57621765 386.61831665]
[-91.27088165 398.84133911]
[-99.96554565 411.06439209]
[-108.66020966 423.28744507]
[-104.90482330 436.23474121]
[-109.23493195 448.79556274]
[-119.85523224 456.45040894]
[-132.75134277 456.58239746]
[-141.64904785 468.65844727]
[-150.54673767 480.73449707]
[-159.44444275 492.81054688]
[-168.34213257 504.88659668]
[-167.36973572 520.90014648]
[-179.37936401 531.53729248]
[-195.15827942 528.63806152]
[-202.60223389 514.42651367]
[-196.00086975 499.80459595]
[-180.41818237 495.98889160]
[-171.52049255 483.91284180]
[-162.62278748 471.83679199]
[-153.72509766 459.76074219]
[-144.82739258 447.68469238]
[-148.05949402 431.18951416]
[-138.17478943 417.17913818]
[-120.88325500 414.59277344]
[-112.18859100 402.36972046]
[-103.49392700 390.14669800]
[-94.79926300 377.92364502]
[-86.10459137 365.70059204]
[-77.40992737 353.47753906]
[-68.71526337 341.25451660]
[-60.74994659 328.54412842]
[-53.54122162 315.38989258]
[-46.33249664 302.23562622]
[-39.12376785 289.08139038]
[-31.91504288 275.92712402]
[-24.70631599 262.77288818]
[-24.24800682 255.38142395]
[-17.26564217 249.46052551]
[-21.43616295 235.20773315]
[-14.08924198 221.88566589]
[0.88868439 217.60787964]
[8.31620979 204.57591248]
[15.74373436 191.54396057]
[23.17125893 178.51200867]
[22.75125694 163.62332153]
[36.30680847 155.46504211]
[32.13628769 141.21223450]
[39.48321152 127.89017487]
[54.46113586 123.61238861]
[61.88866043 110.58042908]
[69.31618500 97.54847717]
[74.11799622 83.33782196]
[76.11730194 68.47165680]
[78.11660004 53.60549927]
[80.11590576 38.73933411]
[82.11521149 23.87317276]
[83.86582184 8.97567844]
[85.36726379 -5.94898891]
[86.86869812 -20.87365532]
[88.37013245 -35.79832458]
[89.87156677 -50.72299194]
[91.37300110 -65.64765930]
[92.87443542 -80.57232666]
[94.37586975 -95.49699402]
[88.05876923 -110.00232697]
[97.03115845 -121.89121246]
[98.53259277 -136.81587219]
[100.03402710 -151.74053955]
[101.53546143 -166.66520691]
[103.03689575 -181.58987427]
[92.32386017 -201.26052856]
[105.55033112 -218.38388062]
[106.05155945 -233.37550354]
[106.55278015 -248.36712646]
[90.48748779 -263.09567261]
[90.50485229 -284.60772705]
[106.17617035 -298.92843628]
[105.42450714 -313.90960693]
[104.67285156 -328.89074707]
[96.25373077 -342.28585815]
[103.34353638 -355.38488770]
[102.59187317 -370.36602783]
[101.84020996 -385.34719849]
[101.08855438 -400.32833862]
[100.33689117 -415.30950928]
[90.98633575 -428.78164673]
[98.22209930 -443.49816895]
[114.60064697 -444.31994629]
[123.27313232 -430.40161133]
[115.31804657 -416.06115723]
[116.06970215 -401.08001709]
[116.82136536 -386.09884644]
[117.57302856 -371.11770630]
[118.32469177 -356.13653564]
[126.69004822 -343.81298828]
[119.65400696 -329.64242554]
[120.40566254 -314.66125488]
[121.15732574 -299.68011475]
[129.16902161 -296.37237549]
[135.69779968 -290.60525513]
[140.01190186 -282.98733521]
[141.61555481 -274.33651733]
[140.30572510 -265.59237671]
[136.19743347 -257.71398926]
[129.71415710 -251.57482910]
[121.54440308 -247.86590576]
[121.04318237 -232.87428284]
[120.54195404 -217.88265991]
[127.06113434 -213.38253784]
[131.31101990 -206.58630371]
[132.53146362 -198.56893921]
[130.44862366 -190.63394165]
[125.33188629 -184.10140991]
[117.96156311 -180.08843994]
[116.46012878 -165.16377258]
[114.95869446 -150.23910522]
[113.45726013 -135.31443787]
[111.95582581 -120.38977814]
[118.38031769 -106.95195007]
[109.30053711 -93.99555969]
[107.79910278 -79.07089233]
[106.29766846 -64.14622498]
[104.79623413 -49.22155380]
[103.29479980 -34.29688644]
[101.79336548 -19.37222099]
[100.29193115 -4.44755316]
[98.79048920 10.47711372]
[101.07827759 14.68998051]
[100.72999573 20.38744545]
[96.98137665 25.87247849]
[94.98207092 40.73863983]
[92.98276520 55.60480118]
[90.98345947 70.47096252]
[88.98415375 85.33712769]
[106.06758118 84.40377808]
[114.87344360 97.22533417]
[129.04348755 102.14570618]
[144.61810303 99.36331940]
[154.10313416 110.84736633]
[168.27317810 115.76773834]
[182.44320679 120.68811798]
[196.61325073 125.60848999]
[210.78327942 130.52885437]
[224.95332336 135.44923401]
[241.89941406 134.93307495]
[247.08654785 151.07402039]
[233.01234436 160.52668762]
[220.03294373 149.61926270]
[205.86291504 144.69889832]
[191.69287109 139.77851868]
[177.52284241 134.85815430]
[163.35279846 129.93777466]
[149.18276978 125.01740265]
[134.62167358 128.15173340]
[124.12310791 116.31574249]
[109.95307159 111.39537048]
[95.22993469 116.04070282]
[82.34814453 104.97599792]
[74.92061615 118.00795746]
[67.49309540 131.03991699]
[71.44548035 146.10697937]
[63.72726440 159.21742249]
[49.33876419 162.89256287]
[49.22750092 178.71337891]
[36.20321655 185.93952942]
[28.77569008 198.97148132]
[21.34816551 212.00344849]
[13.92063999 225.03540039]
[17.87302589 240.10246277]
[10.15481281 253.21290588]
[-4.23368645 256.88806152]
[-11.55206776 269.98159790]
[-18.76079369 283.13586426]
[-25.96952057 296.29010010]
[-33.17824554 309.44436646]
[-40.38697433 322.59860229]
[-47.59569931 335.75286865]
[-33.17985153 331.60757446]
[-19.41549492 337.56933594]
[-12.57774258 350.92016602]
[-15.78389454 365.57351685]
[-27.57228088 374.84896851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[36 182]
[37 181]
[38 180]
[39 179]
[40 178]
[41 177]
[43 176]
[46 173]
[47 172]
[48 171]
[49 170]
[51 168]
[54 165]
[55 164]
[56 163]
[57 139]
[58 138]
[59 137]
[60 136]
[61 135]
[62 132]
[63 131]
[64 130]
[65 129]
[66 128]
[67 127]
[68 126]
[69 125]
[71 123]
[72 122]
[73 121]
[74 120]
[75 119]
[77 113]
[78 112]
[79 111]
[82 103]
[83 102]
[84 101]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
[141 161]
[142 160]
[144 158]
[145 157]
[146 156]
[147 155]
[148 154]
[149 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
