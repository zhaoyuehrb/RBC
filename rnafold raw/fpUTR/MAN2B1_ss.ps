%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCCGGGUCUGGGGGCGGGGCGUUUGCCCGGCCUUUCCAGGGCCGGGGAACCCCAGGAGGAAGCUGCUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[179.60990906 152.55757141]
[166.51872253 145.23492432]
[153.42755127 137.91227722]
[140.33638000 130.58963013]
[127.24520111 123.26699066]
[114.15402222 115.94435120]
[101.06284332 108.62170410]
[97.77830505 109.38278198]
[94.12459564 108.81964111]
[90.65132904 106.78732300]
[87.95462799 103.37022400]
[86.58238983 98.89266968]
[74.85491943 89.54032898]
[63.12744522 80.18798065]
[51.39997101 70.83563232]
[39.30079269 61.96941376]
[26.85003853 53.60408401]
[14.39928532 45.23875427]
[1.94853175 36.87342453]
[-13.82130909 35.59957123]
[-20.07057953 22.07937050]
[-32.52133179 13.71403980]
[-44.97208405 5.34870958]
[-57.42284012 -3.01662040]
[-73.81194305 -3.59045935]
[-81.26956940 -18.19579506]
[-72.12394714 -31.80791092]
[-55.78331375 -30.42382812]
[-49.05750656 -15.46737385]
[-36.60675430 -7.10204363]
[-24.15600204 1.26328659]
[-11.70524883 9.62861633]
[3.17403054 10.30412388]
[10.31386185 24.42267227]
[22.76461411 32.78800201]
[35.21536636 41.15333176]
[47.66612244 49.51866150]
[52.70315170 49.41693115]
[57.79272842 52.68006516]
[60.75231934 59.10815811]
[72.47978973 68.46051025]
[84.20726776 77.81285095]
[95.93473816 87.16519928]
[108.38549042 95.53053284]
[121.47666931 102.85317230]
[134.56784058 110.17581940]
[147.65901184 117.49845886]
[160.75019836 124.82110596]
[173.84136963 132.14375305]
[186.93254089 139.46638489]
[198.31396484 130.83912659]
[212.09584045 127.26418304]
[226.14927673 129.25909424]
[238.31669617 136.48364258]
[246.74319458 147.79736328]
[250.15917969 161.43945312]
[248.07168579 175.30276489]
[260.85327148 183.15327454]
[273.63488770 191.00379944]
[289.44357300 191.63336182]
[296.23910522 204.88740540]
[309.02069092 212.73793030]
[325.41958618 212.64280701]
[333.46673584 226.93179321]
[324.88394165 240.90562439]
[308.50045776 240.18920898]
[301.17019653 225.51953125]
[288.38858032 217.66900635]
[273.49414062 217.60096741]
[265.78436279 203.78540039]
[253.00276184 195.93487549]
[240.22116089 188.08436584]
[227.07658386 196.93801880]
[211.33938599 199.24803162]
[196.09492493 194.51119995]
[184.35374451 183.61083984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 37]
[17 36]
[18 35]
[19 34]
[21 32]
[22 31]
[23 30]
[24 29]
[57 72]
[58 71]
[59 70]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
