%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGCGUCGGUUGCCGCCUUAGCGGGCGCCUCCUUUUCAUCCCUCAUCCUUCAUCCCUGGCUUUCGCGCUCUAGCGGAGUGGGAUCUGCGAACACGUGAGGCGGGGGCGCGGUCCCCAGGCUGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[123.03823853 272.79986572]
[121.95999908 257.83865356]
[120.88175201 242.87745667]
[117.22687531 236.36750793]
[119.96142578 227.54534912]
[119.24225616 212.56259155]
[118.52308655 197.57984924]
[110.18447113 185.23817444]
[117.25122833 171.08290100]
[108.91262054 158.74124146]
[115.97937775 144.58596802]
[115.26020050 129.60322571]
[108.64844513 126.06278992]
[95.90464020 133.97451782]
[95.42492676 118.98192596]
[88.81317139 115.44149017]
[75.94435120 123.14821625]
[63.07553482 130.85493469]
[50.20671463 138.56164551]
[42.71243668 153.14820862]
[26.32194519 153.68089294]
[17.89636993 139.61172485]
[26.10322189 125.41384888]
[42.49999619 125.69283295]
[55.36881256 117.98611450]
[68.23763275 110.27939606]
[81.10645294 102.57267761]
[89.86492157 90.39527130]
[93.07736206 75.74330139]
[96.28980255 61.09133148]
[99.50224304 46.43936157]
[102.71469116 31.78739357]
[105.92713165 17.13542366]
[109.13957214 2.48345304]
[112.35201263 -12.16851711]
[107.34768677 -16.52177811]
[103.82720184 -22.09510803]
[102.06780243 -28.40582466]
[102.19536591 -34.91524887]
[104.17576599 -41.07466888]
[107.81964874 -46.37159348]
[112.80031586 -50.37239075]
[118.68291473 -52.75775528]
[124.96234131 -53.34810638]
[130.57774353 -67.25736237]
[136.19313049 -81.16661835]
[141.80851746 -95.07586670]
[147.42391968 -108.98512268]
[153.03930664 -122.89437866]
[145.90014648 -138.81251526]
[152.30992126 -154.67579651]
[167.87899780 -160.91543579]
[173.15924072 -174.95533752]
[178.43949890 -188.99525452]
[183.04052734 -203.27217102]
[186.95175171 -217.75326538]
[190.86299133 -232.23437500]
[194.77421570 -246.71546936]
[198.68545532 -261.19656372]
[197.32594299 -267.83154297]
[199.29368591 -273.29687500]
[203.14698792 -276.26950073]
[207.74801636 -290.54644775]
[212.34904480 -304.82336426]
[216.95007324 -319.10028076]
[216.61048889 -328.33029175]
[221.83639526 -333.66204834]
[226.77845764 -347.82452393]
[231.72052002 -361.98699951]
[224.62623596 -376.10958862]
[229.67523193 -391.08566284]
[243.87200928 -398.03024292]
[258.79388428 -392.82318115]
[265.58795166 -378.55377197]
[260.22344971 -363.68780518]
[245.88299561 -357.04495239]
[240.94094849 -342.88247681]
[235.99888611 -328.71997070]
[231.22700500 -314.49926758]
[226.62597656 -300.22232056]
[222.02494812 -285.94540405]
[217.42390442 -271.66848755]
[213.16654968 -257.28533936]
[209.25532532 -242.80424500]
[205.34408569 -228.32313538]
[201.43286133 -213.84204102]
[197.52162170 -199.36093140]
[198.89546204 -196.80903625]
[199.28906250 -193.53309631]
[198.41120911 -189.92369080]
[196.12495422 -186.47290039]
[192.47940063 -183.71501160]
[187.19915771 -169.67509460]
[181.91891479 -155.63519287]
[188.84852600 -144.70373535]
[188.17579651 -131.58296204]
[179.92295837 -121.11083984]
[166.94856262 -117.27898407]
[161.33317566 -103.36972809]
[155.71777344 -89.46047974]
[150.10238647 -75.55122375]
[144.48698425 -61.64196777]
[138.87159729 -47.73271179]
[145.53308105 -24.91414833]
[127.00398254 -8.95607567]
[123.79154205 5.69589424]
[120.57910156 20.34786415]
[117.36666107 34.99983215]
[114.15421295 49.65180206]
[110.94177246 64.30377197]
[107.72933197 78.95574188]
[104.51689148 93.60771179]
[111.97089386 91.59706879]
[120.65715027 94.31812286]
[128.14317322 102.12020111]
[131.99479675 114.24223328]
[130.24295044 128.88404846]
[130.96212769 143.86679077]
[139.35217285 157.28013611]
[132.23397827 170.36373901]
[140.62402344 183.77706909]
[133.50582886 196.86067200]
[134.22500610 211.84341431]
[134.94418335 226.82617188]
[135.84295654 241.79922485]
[136.92118835 256.76040649]
[137.99943542 271.72161865]
[147.64160156 284.98663330]
[140.72854614 299.85745239]
[124.37182617 301.03628540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[5 124]
[6 123]
[7 122]
[9 120]
[11 118]
[12 117]
[16 27]
[17 26]
[18 25]
[19 24]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 98]
[52 94]
[53 93]
[54 92]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[62 82]
[63 81]
[64 80]
[65 79]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
