%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGUGCGCAGUGCGCGGCUUUUGCUCGGACCUGGAGUAAUGAGAGUGGACGUUUGAUUCCAACAGG\
) } def
/len { sequence length } bind def

/coor [
[79.42276764 126.53107452]
[67.81446075 136.03092957]
[56.20616150 145.53079224]
[44.59785461 155.03063965]
[32.98955154 164.53050232]
[21.38124847 174.03036499]
[21.36998177 189.66793823]
[11.27018547 201.60646057]
[-4.14932346 204.20890808]
[-17.60792542 196.24649048]
[-22.75088120 181.47882080]
[-17.14984322 166.87873840]
[-3.44944930 159.33995056]
[11.88139153 162.42205811]
[23.48969460 152.92219543]
[35.09799957 143.42234802]
[46.70630264 133.92248535]
[58.31460571 124.42263031]
[69.92291260 114.92276764]
[66.63464355 96.24854279]
[73.98768616 78.77077484]
[89.63691711 68.06370544]
[88.31121063 53.12240219]
[86.98551178 38.18110275]
[85.32960510 23.27278328]
[83.34429169 8.40474510]
[81.35898590 -6.46329308]
[79.37368011 -21.33133125]
[77.38836670 -36.19936752]
[75.40306091 -51.06740570]
[62.10293961 -59.29180908]
[57.25011826 -74.15734100]
[63.13594818 -88.64495850]
[76.98132324 -95.91404724]
[92.24887848 -92.53237152]
[101.72974396 -80.09664154]
[100.94734192 -64.47864532]
[90.27110291 -53.05271530]
[92.25640869 -38.18467712]
[94.24171448 -23.31663895]
[96.22702026 -8.44860077]
[98.21233368 6.41943693]
[100.19763947 21.28747559]
[104.33718109 27.70309067]
[101.92681122 36.85540009]
[103.25251770 51.79670334]
[104.57821655 66.73800659]
[120.71978760 73.58010101]
[131.21209717 87.62560272]
[133.19439697 105.04499054]
[147.14593506 110.55451965]
[161.09745789 116.06404114]
[175.04899597 121.57356262]
[188.07037354 113.13418579]
[203.56361389 113.99398041]
[215.57122803 123.82233429]
[219.47605896 138.84005737]
[213.77661133 153.27252197]
[200.66444397 161.57014465]
[185.18144226 160.54232788]
[173.28115845 150.58428955]
[169.53945923 135.52510071]
[155.58793640 130.01556396]
[141.63641357 124.50604248]
[127.68488312 118.99652100]
[122.55731201 124.86942291]
[116.21350098 129.40141296]
[108.99549103 132.34812927]
[101.29245758 133.55070496]
[93.51974487 132.94429016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[22 47]
[23 46]
[24 45]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
