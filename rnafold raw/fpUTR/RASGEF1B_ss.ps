%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCUGCCGUAGUUUCAGUAUAAACAAGGAACCCGACUGGUUAGACAGAUUUUGUUUUUCUUCUUCCCGCGCGCUUUAGCUCCCUGUCCUUUGGUCGCAUUUGUGGGCGCGCGGCACGCAGCCGGGAGGCCGAGGACUCGGAGUUCACCUGCAGGAAAGU\
) } def
/len { sequence length } bind def

/coor [
[106.36836243 126.23169708]
[98.91564941 126.97187805]
[94.17253113 141.20222473]
[89.42942047 155.43257141]
[84.68630219 169.66293335]
[79.94318390 183.89328003]
[83.75954437 199.84217834]
[71.67108154 210.92373657]
[56.11337280 205.73820496]
[53.09085464 189.62001038]
[65.71283722 179.15016174]
[70.45595551 164.91981506]
[75.19906616 150.68946838]
[79.94218445 136.45910645]
[84.68529510 122.22875977]
[81.29086304 124.12790680]
[77.64108276 125.70666504]
[65.98985291 135.15382385]
[54.33862305 144.60098267]
[42.68738937 154.04814148]
[41.29479218 169.79095459]
[29.12475014 179.87388611]
[13.39753914 178.31492615]
[3.44383216 166.03897095]
[5.16898680 150.32911682]
[17.54949951 140.50575256]
[33.24023056 142.39691162]
[44.89146423 132.94975281]
[56.54269791 123.50259399]
[68.19393158 114.05543518]
[65.23278046 99.35061646]
[50.83313370 95.14939880]
[36.43349075 90.94817352]
[22.03384590 86.74695587]
[7.63420296 82.54573822]
[-6.76544142 78.34451294]
[-20.50433731 85.68484497]
[-35.04777527 81.21908569]
[-41.96099472 68.07591248]
[-56.36063766 63.87469101]
[-70.76028442 59.67346954]
[-85.27336884 55.88266373]
[-99.88821411 52.50532150]
[-114.50305176 49.12798309]
[-127.77315521 57.71168518]
[-143.20838928 54.31625748]
[-151.65132141 40.95614624]
[-148.09289551 25.55766678]
[-134.64425659 17.25646782]
[-119.28426361 20.97750092]
[-111.12571716 34.51314163]
[-96.51087189 37.89048004]
[-81.89603424 41.26782227]
[-78.69890594 39.68469620]
[-74.56690216 39.59794617]
[-70.22410583 41.43393707]
[-66.55905914 45.27382660]
[-52.15941620 49.47504425]
[-37.75977325 53.67626572]
[-24.86352921 46.31267166]
[-10.20039558 50.36817932]
[-2.56422091 63.94487000]
[11.83542347 68.14609528]
[26.23506737 72.34731293]
[40.63471222 76.54853058]
[55.03435516 80.74975586]
[69.43399811 84.95097351]
[97.48858643 69.57171631]
[121.93496704 84.26737976]
[136.07301331 79.25582123]
[150.21104431 74.24425507]
[164.34909058 69.23268890]
[174.77119446 57.32931137]
[189.35217285 60.36976242]
[203.49020386 55.35820007]
[217.62825012 50.34663773]
[224.70899963 44.50472641]
[232.08152771 45.37677383]
[235.26231384 31.93946075]
[244.60171509 21.91585922]
[257.57409668 17.85928917]
[270.74838257 20.73032188]
[280.69531250 29.67187309]
[295.01287842 25.19890594]
[309.33044434 20.72593689]
[323.64797974 16.25296783]
[337.96554565 11.77999878]
[352.28311157 7.30703068]
[359.66098022 -6.41173935]
[374.24475098 -10.74400616]
[387.27804565 -3.62578154]
[401.59561157 -8.09875011]
[415.91314697 -12.57171917]
[430.23071289 -17.04468727]
[444.54827881 -21.51765633]
[458.86584473 -25.99062538]
[456.56112671 -30.46634483]
[455.49581909 -35.92095184]
[455.95602417 -42.01515198]
[458.13766479 -48.33767700]
[462.12985229 -54.42855835]
[473.41525269 -64.30985260]
[484.70065308 -74.19113922]
[489.46911621 -89.88170624]
[505.50091553 -93.33332062]
[516.30389404 -80.99526978]
[510.76489258 -65.55987549]
[494.58193970 -62.90574646]
[483.29653931 -53.02445602]
[472.01113892 -43.14316559]
[477.55413818 -29.20489502]
[492.54339600 -29.77251625]
[507.53265381 -30.34013939]
[522.86077881 -40.50765610]
[538.05706787 -31.76806831]
[551.39599609 -40.27599716]
[564.54180908 -33.27337646]
[579.51763916 -34.12455368]
[594.49346924 -34.97573471]
[609.46929932 -35.82691193]
[621.18121338 -46.79094696]
[637.03405762 -44.32766724]
[644.86682129 -30.32669258]
[638.67089844 -15.52837276]
[623.19927979 -11.28471088]
[610.32043457 -20.85108185]
[595.34460449 -19.99990273]
[580.36877441 -19.14872360]
[565.39294434 -18.29754448]
[553.12524414 -9.85049915]
[538.90826416 -16.79223824]
[530.59808350 -7.96410465]
[518.09851074 -7.15688133]
[508.10025024 -15.35088253]
[493.11099243 -14.78326035]
[478.12176514 -14.21563816]
[463.33880615 -11.67306423]
[449.02124023 -7.20009518]
[434.70367432 -2.72712660]
[420.38613892 1.74584222]
[406.06857300 6.21881104]
[391.75100708 10.69177914]
[385.08773804 23.96342659]
[370.63143921 28.70361137]
[356.75607300 21.62459183]
[342.43850708 26.09756088]
[328.12097168 30.57052803]
[313.80340576 35.04349899]
[299.48583984 39.51646423]
[285.16827393 43.98943329]
[280.43438721 59.68672562]
[267.15344238 69.58113098]
[250.42608643 69.62634277]
[236.82464600 59.60712433]
[222.63981628 64.48468018]
[208.50177002 69.49624634]
[194.36372375 74.50780487]
[184.95288086 86.05272675]
[169.36065674 83.37073517]
[155.22261047 88.38229370]
[141.08456421 93.39385986]
[126.94652557 98.40542603]
[126.34751129 105.87081146]
[123.72031403 112.88427734]
[119.26716614 118.90593719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 30]
[18 29]
[19 28]
[20 27]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[39 59]
[40 58]
[41 57]
[42 53]
[43 52]
[44 51]
[69 162]
[70 161]
[71 160]
[72 159]
[74 157]
[75 156]
[76 155]
[78 154]
[83 150]
[84 149]
[85 148]
[86 147]
[87 146]
[88 145]
[91 142]
[92 141]
[93 140]
[94 139]
[95 138]
[96 137]
[101 110]
[102 109]
[103 108]
[111 136]
[112 135]
[113 134]
[115 131]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
