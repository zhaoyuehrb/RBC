%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCCGACGCCCGAGCGCCGGAGCCCCGGCCCCGCCCCGCGAGCGCCGAGACUUGUUGGCCGCGGAGACUGCGACCCUCUUCUCUCAGUCUGCCUUACUACC\
) } def
/len { sequence length } bind def

/coor [
[68.65680695 155.99617004]
[70.56422424 141.11793518]
[77.46453857 127.79931641]
[88.52085876 117.65850830]
[75.45561981 125.02732849]
[62.39038086 132.39614868]
[49.32513809 139.76496887]
[44.98000717 154.72349548]
[31.62502480 162.01040649]
[17.39113235 157.77580261]
[4.32589102 165.14462280]
[-8.62656593 172.70993042]
[-21.46328545 180.47000122]
[-34.30000305 188.23005676]
[-39.51999664 203.40014648]
[-54.68273544 208.64140320]
[-68.15666962 199.93321228]
[-69.60574341 183.95573425]
[-57.91835785 172.96553040]
[-42.06007004 175.39334106]
[-29.22335243 167.63327026]
[-16.38663292 159.87321472]
[-12.22151947 153.61503601]
[-3.04292798 152.07937622]
[10.02231216 144.71055603]
[13.76215076 130.33874512]
[26.90719032 122.67959595]
[41.95632172 126.69972229]
[55.02156067 119.33090973]
[68.08679962 111.96208954]
[81.15203857 104.59326935]
[66.23550415 106.17340851]
[54.11009598 97.34308624]
[51.03619385 82.66143036]
[58.60086441 69.70859528]
[72.89844513 65.17217255]
[86.54706573 71.39432526]
[92.50000000 85.16458130]
[92.50000000 70.16458130]
[92.50000000 55.16458130]
[92.50000000 40.16458130]
[92.50000000 25.16458130]
[89.70169067 20.35943794]
[89.19982147 15.46362495]
[90.61533356 11.40914440]
[93.24098969 8.82249451]
[94.59847260 -6.11595345]
[95.95595551 -21.05440140]
[97.31343842 -35.99285126]
[98.67092133 -50.93129730]
[88.36154938 -62.91012955]
[89.62533569 -78.66381073]
[101.71249390 -88.84595490]
[117.45192719 -87.41568756]
[127.50571442 -75.22154999]
[125.90911865 -59.49811554]
[113.60937500 -49.57381439]
[112.25189209 -34.63536835]
[110.89440155 -19.69691849]
[109.53691864 -4.75847054]
[108.17943573 10.17997837]
[107.50000000 25.16458130]
[107.50000000 40.16458130]
[107.50000000 55.16458130]
[107.50000000 70.16458130]
[107.50000000 85.16458130]
[117.61528015 96.24073029]
[132.55372620 97.59821320]
[147.49217224 98.95569611]
[162.43061829 100.31317902]
[177.36907959 101.67066956]
[192.30752563 103.02815247]
[206.75128174 96.57149506]
[218.72610474 105.42885590]
[233.66456604 106.78633881]
[243.78221130 95.02143860]
[258.89050293 91.48320770]
[273.17999268 97.53216553]
[281.15609741 110.84236908]
[279.75180054 126.29577637]
[269.50714111 137.95022583]
[254.36134338 141.32435608]
[240.13830566 135.12072754]
[232.30708313 121.72478485]
[217.36862183 120.36730194]
[203.99336243 126.92105103]
[190.95004272 117.96659851]
[176.01159668 116.60911560]
[161.07313538 115.25163269]
[146.13468933 113.89414978]
[131.19624329 112.53666687]
[116.25779724 111.17918396]
[130.66014099 115.37113953]
[142.74734497 124.25367737]
[151.04953003 136.74661255]
[154.55711365 151.33074951]
[152.84353638 166.23254395]
[146.11718750 179.63986206]
[135.19601440 189.92228699]
[121.40813446 195.82942200]
[106.43020630 196.64289856]
[92.08364868 192.26380920]
[80.11309814 183.22468567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 28]
[10 25]
[11 24]
[12 22]
[13 21]
[14 20]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
