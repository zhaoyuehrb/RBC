%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGUCCGGGGCGGGGCCUGAGUGCGCCUGCGCAGUCCGCGCCACUCAGGGAGCCGGAGGGGACGCGCCGGAGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[18.21940041 195.20336914]
[7.09887648 205.26985168]
[-4.02164745 215.33631897]
[-15.14217091 225.40280151]
[-26.26269531 235.46928406]
[-37.38322067 245.53575134]
[-48.50374222 255.60223389]
[-49.03860855 271.39746094]
[-60.64261627 282.12698364]
[-76.43131256 281.42514038]
[-87.03754425 269.70834351]
[-86.16882324 253.92796326]
[-74.34054565 243.44619751]
[-58.57022095 244.48170471]
[-47.44969559 234.41522217]
[-36.32917023 224.34875488]
[-25.20864868 214.28227234]
[-14.08812428 204.21580505]
[-2.96759987 194.14932251]
[8.15292358 184.08283997]
[7.78073835 165.98371887]
[20.78348351 152.94398499]
[39.50726700 153.27558899]
[42.60261536 138.70616150]
[57.69728851 133.96682739]
[60.79263687 119.39739990]
[75.88731384 114.65805817]
[86.17289734 103.73987579]
[89.57390594 90.17798615]
[102.90892029 85.97454071]
[113.19450378 75.05635834]
[123.48009491 64.13817596]
[133.76568604 53.21998978]
[137.50953674 44.58266449]
[144.68386841 42.08253098]
[155.39538574 31.58189964]
[166.10690308 21.08126831]
[176.81843567 10.58063698]
[181.25672913 -4.60528278]
[195.76171875 -7.98968983]
[200.20001221 -23.17560959]
[214.70501709 -26.56001663]
[225.41653442 -37.06064987]
[229.80281067 -54.81360626]
[246.77362061 -58.79475784]
[257.05920410 -69.71293640]
[267.34478760 -80.63111877]
[273.80477905 -96.30609894]
[290.65548706 -94.43784332]
[293.52496338 -77.72849274]
[278.26296997 -70.34553528]
[267.97738647 -59.42735291]
[257.69180298 -48.50917053]
[257.69116211 -36.24296951]
[248.97367859 -27.04777145]
[235.91717529 -26.34912491]
[225.20564270 -15.84849358]
[221.53352356 -1.41364884]
[206.26235962 2.72183394]
[202.59022522 17.15667915]
[187.31906128 21.29216194]
[176.60754395 31.79279137]
[165.89601135 42.29342270]
[155.18449402 52.79405594]
[144.68386841 63.50557709]
[134.39826965 74.42375946]
[124.11268616 85.34194183]
[113.82710266 96.26012421]
[110.42609406 109.82201385]
[97.09107971 114.02545929]
[86.80549622 124.94364166]
[82.97444916 140.29400635]
[68.61547089 144.25241089]
[64.78443146 159.60276794]
[50.42544937 163.56117249]
[53.12524033 175.46997070]
[49.64990616 187.04905701]
[41.01398087 195.33447266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[23 75]
[25 73]
[27 71]
[28 70]
[30 68]
[31 67]
[32 66]
[33 65]
[35 64]
[36 63]
[37 62]
[38 61]
[40 59]
[42 57]
[43 56]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
