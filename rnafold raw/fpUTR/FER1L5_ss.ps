%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACCCCAGGAUCGCUGGGAAAAGUCUUGGACUGAGGAGCUCCAAAAAGGAAGCUGUGGCGCUGCGUAGGGAAGGAGGGAAGAAAGUAGGUCUCCGAG\
) } def
/len { sequence length } bind def

/coor [
[87.62574005 185.45632935]
[90.41442871 166.27630615]
[90.88092804 151.28356934]
[91.34742737 136.29081726]
[87.51245117 132.78672791]
[84.42594147 128.93553162]
[82.10880280 124.87004852]
[70.63481140 134.53170776]
[59.16082382 144.19335938]
[47.68683624 153.85501099]
[36.21284866 163.51667786]
[33.41512680 179.31388855]
[19.25176239 186.84906006]
[4.58767509 180.34182739]
[0.67189902 164.78398132]
[10.50828266 152.11018372]
[26.55119324 152.04267883]
[38.02518082 142.38102722]
[49.49916840 132.71937561]
[60.97315598 123.05771637]
[72.44714355 113.39605713]
[69.64526367 104.14777374]
[69.86332703 94.48683929]
[73.07963562 85.37439728]
[78.97421265 77.71703339]
[86.96061707 72.27657318]
[96.24427795 69.59426117]
[98.10576630 54.71021652]
[99.96724701 39.82616806]
[101.82872772 24.94211960]
[90.67631531 14.31526756]
[87.95162201 -0.66570121]
[94.49334717 -14.21818542]
[107.60400391 -21.23592377]
[109.46548462 -36.11997223]
[111.32697296 -51.00402069]
[105.36206055 -65.65770721]
[114.61899567 -77.32640076]
[108.65408325 -91.98008728]
[117.91101837 -103.64878845]
[119.77249908 -118.53283691]
[121.63397980 -133.41688538]
[115.66907501 -148.07057190]
[124.92600250 -159.73927307]
[126.78748322 -174.62332153]
[128.64895630 -189.50737000]
[121.35405731 -197.87338257]
[119.99729919 -208.66644287]
[124.79515076 -218.18141174]
[133.89331055 -223.29020691]
[136.67652893 -238.02973938]
[130.74679565 -253.31929016]
[141.23254395 -265.92807007]
[157.34692383 -262.88525391]
[162.51284790 -247.32101440]
[151.41604614 -235.24652100]
[148.63284302 -220.50698853]
[156.47323608 -202.94735718]
[143.53300476 -187.64588928]
[141.67152405 -172.76184082]
[139.81004333 -157.87779236]
[145.90809631 -144.28871155]
[136.51802063 -131.55540466]
[134.65653992 -116.67135620]
[132.79505920 -101.78730774]
[138.89311218 -88.19822693]
[129.50303650 -75.46492004]
[135.60108948 -61.87584686]
[126.21101379 -49.14253998]
[124.34953308 -34.25849152]
[122.48805237 -19.37444305]
[133.46656799 -9.34397888]
[136.46911621 5.40216398]
[130.13883972 19.25066948]
[116.71277618 26.80360222]
[114.85129547 41.68764877]
[112.98981476 56.57169724]
[111.12832642 71.45574951]
[132.41044617 89.81720734]
[130.99609375 120.76374817]
[141.51989746 131.45249939]
[152.04370117 142.14126587]
[160.45053101 146.15596008]
[162.72212219 153.32991028]
[172.90841675 164.34078979]
[188.51789856 163.40377808]
[201.04689026 172.76104736]
[204.57957458 187.99436951]
[197.44792175 201.91104126]
[183.01930237 207.94003296]
[168.10644531 203.23463440]
[159.75074768 190.01660156]
[161.89753723 174.52706909]
[151.71124268 163.51620483]
[141.35493469 152.66506958]
[130.83113098 141.97630310]
[120.30733490 131.28755188]
[106.34017181 136.75732422]
[105.87367249 151.75006104]
[105.40717316 166.74281311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[27 78]
[28 77]
[29 76]
[30 75]
[34 71]
[35 70]
[36 69]
[38 67]
[40 65]
[41 64]
[42 63]
[44 61]
[45 60]
[46 59]
[50 57]
[51 56]
[80 97]
[81 96]
[82 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
