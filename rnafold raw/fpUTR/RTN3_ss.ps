%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCGCGCUCGCGCUCCCGCCCUCUAGCUGCGCUCGGCUGAGUCAGUCAGUCUGUCGGAGUCUGUCCUCGGAGCAGGCGGAGUAAAGGGACUUGAGCGAGCCAGUUGCCGGAUUAUUCUAUUUCCCCUCCCUCUCUCCCGCCCCGUAUCUCUUUUCACCCUUCUCCCACCCUCGCUCGCGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[40.28713989 244.08976746]
[34.66287613 257.99542236]
[42.72410965 275.12271118]
[35.84377289 292.41485596]
[18.81315613 299.08923340]
[13.65669155 313.17507935]
[8.50022697 327.26092529]
[3.34376240 341.34677124]
[6.69295740 357.40026855]
[-5.71381617 368.12426758]
[-21.11353302 362.48681641]
[-23.66428566 346.28726196]
[-10.74207687 336.19030762]
[-5.58561230 322.10446167]
[-0.42914769 308.01861572]
[4.72731686 293.93276978]
[-2.21565938 284.85031128]
[-3.92077398 273.42459106]
[0.15158208 262.48580933]
[9.09527779 254.80029297]
[20.75720406 252.37117004]
[26.38146782 238.46549988]
[20.22865105 231.36042786]
[17.07734299 222.44404602]
[17.40308571 212.93475342]
[21.20318413 204.14846802]
[27.99123001 197.31652832]
[36.85897446 193.41313171]
[46.59772110 193.01661682]
[53.13822174 179.51765442]
[59.67871857 166.01869202]
[66.21922302 152.51972961]
[72.75971985 139.02078247]
[79.30021667 125.52182007]
[85.84072113 112.02286530]
[81.75242615 105.73510742]
[73.57582855 93.15960693]
[69.48753357 86.87184906]
[54.49591064 87.37307739]
[39.50428772 87.87429810]
[24.51266479 88.37552643]
[9.52104187 88.87674713]
[-5.47058153 89.37797546]
[-17.43536377 100.06551361]
[-33.22633362 97.23270416]
[-40.73001099 83.05263519]
[-34.19021606 68.40303802]
[-18.62372017 64.52183533]
[-5.97180605 74.38635254]
[9.01981735 73.88512421]
[24.01144028 73.38390350]
[39.00306320 72.88267517]
[53.99468613 72.38145447]
[68.98631287 71.88022614]
[70.96777344 64.64670563]
[56.50080109 60.68355560]
[60.46417999 46.21664047]
[74.93070984 50.17967224]
[76.91217041 42.94615173]
[64.26879120 34.87491608]
[51.62540436 26.80368233]
[35.71255875 28.84350014]
[24.29704666 17.57116127]
[26.13587379 1.63383770]
[39.81844711 -6.74271870]
[54.84867096 -1.13273108]
[59.69664001 14.16029835]
[72.34002686 22.23153305]
[84.98340607 30.30276871]
[97.08731079 45.10678101]
[104.09586334 61.57336807]
[105.85368347 78.46317291]
[102.46838379 94.54000854]
[115.62263489 87.33128357]
[128.77688599 80.12255859]
[141.93113708 72.91382599]
[155.02468872 65.59545135]
[168.05664062 58.16792297]
[181.08860779 50.74039841]
[190.44538879 32.89974976]
[209.74917603 33.79727173]
[222.52566528 25.93843269]
[235.30215454 18.07959366]
[248.07864380 10.22075367]
[251.57106018 4.56913996]
[256.63723755 1.93924558]
[261.41598511 2.32103562]
[274.44793701 -5.10648918]
[287.47988892 -12.53401470]
[300.51184082 -19.96154022]
[313.54379272 -27.38906479]
[313.73168945 -42.68324661]
[321.49838257 -55.74368286]
[334.67202759 -63.11402130]
[349.66571045 -62.90224838]
[362.45413208 -55.26536179]
[375.48608398 -62.69288635]
[388.51803589 -70.12041473]
[396.67633057 -83.67596436]
[411.56500244 -83.25595856]
[424.59695435 -90.68348694]
[425.09292603 -104.46954346]
[432.28341675 -116.11520386]
[444.19650269 -122.63055420]
[457.66467285 -122.40530396]
[469.16674805 -115.60543060]
[473.69421387 -130.50978088]
[487.13717651 -137.63307190]
[501.31829834 -133.22497559]
[514.47253418 -140.43370056]
[522.85620117 -153.85102844]
[537.73577881 -153.18229675]
[550.89001465 -160.39102173]
[564.04431152 -167.59974670]
[560.30401611 -182.21006775]
[560.31555176 -197.29153442]
[564.07812500 -211.89611816]
[571.35516357 -225.10577393]
[581.68933105 -236.09011841]
[594.43096924 -244.15866089]
[608.77917480 -248.80422974]
[623.83190918 -249.73477173]
[638.64300537 -246.89181519]
[652.28137207 -240.45407104]
[663.88977051 -230.82620239]
[672.73846436 -218.61343384]
[678.27117920 -204.58348083]
[680.14019775 -189.61825562]
[678.22790527 -174.65850830]
[672.65466309 -160.64460754]
[663.77069092 -148.45748901]
[652.13446045 -138.86323547]
[638.47753906 -132.46495056]
[623.65826416 -129.66484070]
[608.60827637 -130.63891602]
[594.27362061 -135.32595825]
[581.55535889 -143.43132019]
[571.25299072 -154.44551086]
[558.09875488 -147.23678589]
[544.94451904 -140.02804565]
[537.50170898 -127.12633514]
[521.68127441 -127.27944946]
[508.52700806 -120.07071686]
[504.61196899 -105.74564362]
[491.37438965 -98.24758148]
[476.37545776 -102.45117950]
[474.82400513 -86.11803436]
[463.73718262 -73.79985809]
[447.33145142 -70.47714996]
[432.02450562 -77.65153503]
[418.99252319 -70.22400665]
[411.76638794 -57.19972229]
[395.94555664 -57.08845520]
[382.91360474 -49.66093063]
[369.88165283 -42.23340607]
[369.93527222 -27.33834839]
[362.47644043 -14.32981968]
[349.42147827 -6.75125599]
[334.22619629 -6.72458553]
[320.97134399 -14.35710812]
[307.93936157 -6.92958355]
[294.90740967 0.49794143]
[281.87545776 7.92546654]
[268.84350586 15.35299110]
[255.93748474 22.99724197]
[243.16099548 30.85608101]
[230.38450623 38.71492004]
[217.60801697 46.57376099]
[216.13607788 56.71001434]
[209.17381287 64.51952362]
[198.84741211 67.25358582]
[188.51612854 63.77235413]
[175.48417664 71.19988251]
[162.45220947 78.62740326]
[158.18928528 84.68308258]
[149.13986206 86.06807709]
[135.98561096 93.27680206]
[122.83135986 100.48553467]
[109.67710876 107.69425964]
[99.33967590 118.56336212]
[92.79917908 132.06231689]
[86.25867462 145.56127930]
[79.71817780 159.06024170]
[73.17768097 172.55918884]
[66.63717651 186.05815125]
[60.09667969 199.55711365]
[68.29010010 218.90245056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[5 16]
[6 15]
[7 14]
[8 13]
[29 186]
[30 185]
[31 184]
[32 183]
[33 182]
[34 181]
[35 180]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[59 69]
[60 68]
[61 67]
[73 179]
[74 178]
[75 177]
[76 176]
[77 174]
[78 173]
[79 172]
[81 168]
[82 167]
[83 166]
[84 165]
[87 164]
[88 163]
[89 162]
[90 161]
[91 160]
[96 155]
[97 154]
[98 153]
[100 151]
[101 150]
[106 146]
[109 143]
[110 142]
[112 140]
[113 139]
[114 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
