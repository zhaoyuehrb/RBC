%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGCCCGCCCCCCGCCUCCCGCCGCCUCCGGGCUCCCGGCUCCCGGCCGCGCCUCGCCCCAUGCACUCGCCGCGCCGCGCAGCCCGCGCACGCCCGG\
) } def
/len { sequence length } bind def

/coor [
[89.33412933 288.68994141]
[92.12281799 269.50991821]
[92.58931732 254.51716614]
[93.05581665 239.52442932]
[93.52231598 224.53167725]
[93.98881531 209.53894043]
[94.45530701 194.54618835]
[83.98958588 178.41294861]
[94.40345764 161.29174805]
[93.93695831 146.29899597]
[93.47045898 131.30625916]
[86.29330444 128.89364624]
[79.88452148 124.86129761]
[74.60339355 119.43525696]
[70.74597168 112.91969299]
[68.52849579 105.67987061]
[68.07527161 98.12163544]
[53.72540283 93.75341797]
[39.37553787 89.38519287]
[28.13199997 99.75486755]
[13.30553818 103.08245087]
[-1.10009038 98.57199097]
[-11.24598122 87.53039551]
[-14.48104477 72.99079132]
[-28.83091164 68.62257385]
[-43.18077850 64.25435638]
[-56.18564224 72.93810272]
[-71.72402191 71.17949677]
[-82.45917511 59.80889130]
[-83.32228088 44.19514465]
[-73.90581512 31.71058846]
[-58.65593719 28.25004768]
[-44.77318192 35.44748306]
[-38.81255722 49.90448761]
[-24.46269035 54.27270889]
[-10.11282444 58.64093018]
[0.67478889 48.36995316]
[15.25203419 44.85428619]
[29.72745705 49.13546371]
[40.18509293 60.15974045]
[43.74375916 75.03533173]
[58.09362411 79.40354919]
[72.44348907 83.77177429]
[80.22396851 74.86785126]
[90.70802307 69.39974213]
[102.46238708 68.11499786]
[113.88011932 71.18925476]
[123.40029907 78.20223236]
[136.46774292 70.83731842]
[149.53518677 63.47240829]
[157.75840759 49.95615768]
[172.64491272 50.44758987]
[185.71235657 43.08267975]
[198.77980042 35.71776962]
[211.84724426 28.35285759]
[216.19683838 13.39562893]
[229.55400085 6.11271191]
[243.78663635 10.35157108]
[256.85406494 2.98666000]
[269.92150879 -4.37825108]
[270.66156006 -13.09062767]
[274.83801270 -20.66375732]
[281.65957642 -25.82336807]
[289.89785767 -27.73759842]
[298.10827637 -26.15042305]
[304.88333130 -21.41292763]
[318.76373291 -27.09925270]
[328.36395264 -40.39465332]
[344.64849854 -38.45936203]
[350.86523438 -23.28423882]
[340.61889648 -10.48015118]
[324.45004272 -13.21884632]
[310.56964111 -7.53252029]
[299.47985840 10.97148895]
[277.28643799 8.68919277]
[264.21899414 16.05410385]
[251.15155029 23.41901398]
[247.40740967 37.78971481]
[234.26007080 45.44493484]
[219.21215820 41.42029953]
[206.14471436 48.78521347]
[193.07727051 56.15012360]
[180.00982666 63.51503372]
[172.72126770 76.50450134]
[156.90010071 76.53985596]
[143.83265686 83.90476227]
[130.76521301 91.26967621]
[127.85974121 115.70196533]
[108.46320343 130.83975220]
[108.92970276 145.83250427]
[109.39620209 160.82524109]
[117.89894104 167.96032715]
[120.91115570 178.41294861]
[117.64505768 188.55627441]
[109.44805145 195.01269531]
[108.98155975 210.00543213]
[108.51506042 224.99818420]
[108.04856110 239.99092102]
[107.58206177 254.98367310]
[107.11556244 269.97640991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[9 91]
[10 90]
[11 89]
[17 43]
[18 42]
[19 41]
[24 36]
[25 35]
[26 34]
[48 87]
[49 86]
[50 85]
[52 83]
[53 82]
[54 81]
[55 80]
[58 77]
[59 76]
[60 75]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
