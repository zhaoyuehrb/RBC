%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCACAGCCCACAGAGUUCCACCUGCUCACAGGUUGGCUGGCUCAGCCAAGGUGGUGCCCUGCUCUGAGCAUUCAGGCCAAGCCCAUCCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[89.52282715 125.16702271]
[80.17047882 136.89450073]
[70.81813812 148.62196350]
[61.46578979 160.34944153]
[52.11344147 172.07690430]
[57.79928970 186.34458923]
[55.57365799 201.54136658]
[46.03523254 213.57939148]
[31.74979973 219.22048950]
[16.56007004 216.94723511]
[4.55200434 207.37112427]
[-1.04428792 193.06808472]
[1.27656782 177.88555908]
[10.89027309 165.90756226]
[25.21078873 160.35612488]
[40.38596725 162.72456360]
[49.73831558 150.99708557]
[59.09066391 139.26962280]
[68.44300842 127.54214478]
[77.79535675 115.81467438]
[70.54666138 104.89082336]
[68.90054321 90.72699738]
[74.21524048 76.26112366]
[59.97940826 71.53450012]
[45.74357224 66.80787659]
[31.50773430 62.08125305]
[17.27189827 57.35462952]
[1.32742870 61.18946075]
[-9.76813507 49.11384583]
[-4.60062933 33.55014038]
[11.51406002 30.50895309]
[21.99852180 43.11879349]
[36.23435593 47.84541702]
[50.47019196 52.57204056]
[64.70603180 57.29866409]
[78.94186401 62.02528763]
[89.54846954 51.41868591]
[84.82184601 37.18284988]
[80.09522247 22.94701385]
[75.36859894 8.71117687]
[70.64197540 -5.52465963]
[65.91535187 -19.76049614]
[55.18599701 -32.88746262]
[64.82978058 -46.83141708]
[80.89846039 -41.42459106]
[80.15118408 -24.48711967]
[84.87780762 -10.25128269]
[89.60443115 3.98455358]
[94.33105469 18.22039032]
[99.05767822 32.45622635]
[103.78430176 46.69206238]
[116.35562897 54.87508392]
[131.28631592 53.43474197]
[146.21699524 51.99439621]
[161.12268066 50.31492615]
[175.99952698 48.39677048]
[190.87638855 46.47861099]
[199.16755676 42.20677185]
[206.25987244 44.74530792]
[221.19056702 43.30496216]
[229.11968994 30.09757805]
[243.14147949 24.16098022]
[257.79693604 27.57882309]
[267.51330566 38.83626556]
[282.44400024 37.39591980]
[290.86782837 33.39202118]
[297.87515259 36.15657043]
[312.84432983 35.19551849]
[327.81350708 34.23446655]
[342.78268433 33.27341080]
[356.12280273 23.73540878]
[370.93902588 30.76469994]
[371.98974609 47.13015366]
[358.19403076 55.99639511]
[343.74374390 48.24259186]
[328.77456665 49.20364761]
[313.80535889 50.16469955]
[298.83618164 51.12575150]
[283.88433838 52.32660675]
[268.95364380 53.76695251]
[261.56842041 66.67416382]
[247.83656311 72.83049774]
[232.93852234 69.68376160]
[222.63090515 58.23564911]
[207.70022583 59.67599487]
[192.79454041 61.35546494]
[177.91769409 63.27362061]
[163.04083252 65.19178009]
[156.69122314 69.24485779]
[147.65734863 66.92507935]
[132.72665405 68.36542511]
[117.79597473 69.80577087]
[127.83200073 80.58294678]
[132.29258728 94.12116241]
[130.73289490 107.81447601]
[123.82958984 119.19394684]
[113.18675995 126.37274933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[52 92]
[53 91]
[54 90]
[55 88]
[56 87]
[57 86]
[59 85]
[60 84]
[64 80]
[65 79]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
