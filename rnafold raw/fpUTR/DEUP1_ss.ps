%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACGCGGUCCUGCGCCCUCGCCUCAGACCUCUCGGGCGAGCGCGGCGCAGCGCAGAUUAAAAAUCAAGAAAUAUAAACCAGAUGUAGCAGUUUCUUGAC\
) } def
/len { sequence length } bind def

/coor [
[172.65441895 167.28877258]
[155.74156189 161.62930298]
[142.16571045 150.01263428]
[133.92921448 134.11956787]
[132.25909424 116.26399231]
[117.78031921 112.34416199]
[103.30154419 108.42433167]
[99.55005646 109.96923828]
[95.11998749 109.75840759]
[90.85555267 107.52377319]
[87.68927765 103.40523529]
[73.63874054 98.15333557]
[59.58820343 92.90144348]
[45.53766632 87.64954376]
[31.48713112 82.39764404]
[17.43659401 77.14575195]
[3.38605762 71.89385223]
[-10.89413929 67.30299377]
[-25.37291527 63.38316727]
[-39.85168839 59.46333694]
[-54.33046722 55.54350662]
[-68.80924225 51.62368011]
[-83.28801727 47.70384979]
[-97.76679230 43.78401947]
[-113.10935974 47.64617538]
[-123.37245178 36.85181808]
[-137.85122681 32.93198776]
[-153.55522156 37.65604782]
[-165.31132507 26.22249603]
[-161.02586365 10.39319134]
[-145.10736084 6.45196533]
[-133.93139648 18.45321465]
[-119.45262146 22.37304306]
[-105.14567566 18.23051643]
[-93.84696198 29.30524635]
[-79.36818695 33.22507477]
[-64.88941193 37.14490509]
[-50.41063690 41.06473160]
[-35.93186188 44.98456192]
[-21.45308495 48.90438843]
[-6.97430992 52.82421875]
[-3.62961411 51.25321579]
[0.67709255 51.33647537]
[5.10469341 53.52320099]
[8.63795471 57.84331512]
[22.68849182 63.09521484]
[36.73902893 68.34710693]
[50.78956604 73.59900665]
[64.84010315 78.85090637]
[78.89064026 84.10279846]
[92.94117737 89.35469818]
[107.22137451 93.94555664]
[121.70014954 97.86538696]
[136.17892456 101.78520966]
[142.85614014 91.20576477]
[152.08180237 82.77775574]
[163.19425964 77.09513855]
[175.39930725 74.55535126]
[187.82698059 75.33155060]
[199.59349060 79.36077118]
[209.86413574 86.34902954]
[217.91247559 95.79268646]
[223.17176819 107.01479340]
[225.27478027 119.21360016]
[224.07951355 131.51982117]
[237.95991516 137.20614624]
[251.84031677 142.89247131]
[265.72073364 148.57879639]
[279.60113525 154.26512146]
[293.48153687 159.95144653]
[307.36193848 165.63777161]
[321.24237061 171.32409668]
[335.12277222 177.01042175]
[347.28363037 167.73353577]
[362.35565186 165.80194092]
[376.27832031 171.63508606]
[385.35122681 183.57403564]
[387.21740723 198.35180664]
[401.09780884 204.03814697]
[416.39154053 199.19235229]
[429.63482666 208.24748230]
[430.66854858 224.25720215]
[418.69970703 234.94021606]
[402.90982056 232.10145569]
[395.41149902 217.91854858]
[381.53109741 212.23222351]
[369.83337402 221.45333862]
[354.99194336 223.59539795]
[340.97842407 217.98403931]
[331.59353638 206.03329468]
[329.43643188 190.89082336]
[315.55603027 185.20449829]
[301.67562866 179.51817322]
[287.79522705 173.83184814]
[273.91479492 168.14552307]
[260.03439331 162.45919800]
[246.15399170 156.77287292]
[232.27359009 151.08654785]
[218.39318848 145.40022278]
[206.44610596 158.50840759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 54]
[6 53]
[7 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[27 32]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[73 91]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
