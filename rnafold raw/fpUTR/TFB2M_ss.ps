%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUGUUUACUUCCGCUUGACCUGGCCCGGACGCCAGAAAAUGUUCCACGUGGGAUACCCUGCGUGGGGUUCACUGUAGUAGCUGCACUAGGUGAUUCUUGGAGCGGGCCUGAGAGACAAGGAC\
) } def
/len { sequence length } bind def

/coor [
[119.44398499 404.16580200]
[118.32303619 389.20773315]
[109.65625763 377.09426880]
[116.34063721 362.75448608]
[115.21968079 347.79641724]
[106.55290985 335.68295288]
[113.23728180 321.34313965]
[112.11633301 306.38510132]
[110.99538422 291.42703247]
[96.79357147 283.29479980]
[90.13447571 268.16452026]
[93.80318451 251.87622070]
[106.55624390 240.84530640]
[105.06272888 225.91984558]
[103.56920624 210.99438477]
[102.07569122 196.06892395]
[100.58217621 181.14346313]
[99.08865356 166.21800232]
[97.59513855 151.29254150]
[88.62905884 139.39889526]
[94.95385742 124.89691925]
[72.65422821 116.62541962]
[62.88238144 89.39476013]
[47.90102768 90.14244843]
[32.91967392 90.89013672]
[17.93832207 91.63782501]
[2.95696759 92.38551331]
[-7.46024513 104.27068329]
[-23.23567772 105.22530365]
[-35.01004410 94.68301392]
[-35.79782104 78.89836884]
[-25.13163757 67.23612213]
[-9.33954906 66.61527252]
[2.20927930 77.40415955]
[17.19063377 76.65647125]
[32.17198563 75.90878296]
[47.15333939 75.16109467]
[62.13469315 74.41340637]
[66.51277161 68.32387543]
[53.00693512 61.79758835]
[38.40275192 58.37445831]
[33.13842010 44.32857513]
[41.89512253 32.14989853]
[56.88616943 32.66801453]
[64.78105164 45.42078781]
[75.26892853 56.14480209]
[79.64700317 50.05526733]
[75.58439636 35.61590576]
[71.52178955 21.17654037]
[67.45918274 6.73717690]
[63.39657593 -7.70218706]
[59.33396912 -22.14155006]
[55.27136230 -36.58091354]
[51.20875549 -51.02027893]
[47.14614868 -65.45964050]
[35.03512955 -76.51654816]
[38.81897736 -92.47319794]
[54.60519409 -96.91474915]
[66.15427399 -85.27211761]
[61.58551407 -69.52224731]
[65.64811707 -55.08288574]
[69.71072388 -40.64352036]
[73.77333069 -26.20415688]
[77.83593750 -11.76479435]
[81.89854431 2.67456985]
[85.96115112 17.11393356]
[90.02375793 31.55329704]
[94.08636475 45.99266052]
[107.98007202 51.64641953]
[120.97045135 44.14641953]
[129.05310059 30.54563332]
[143.94389343 30.88269615]
[156.93428040 23.38269615]
[169.92465210 15.88269711]
[182.91503906 8.38269711]
[195.90542603 0.88269675]
[201.85382080 -6.19700432]
[209.31448364 -6.63772058]
[222.48780823 -13.81153011]
[235.66113281 -20.98534012]
[248.83444214 -28.15914917]
[253.06324768 -43.38717651]
[266.86224365 -51.09196091]
[282.04470825 -46.70239639]
[289.60314941 -32.82272720]
[285.05331421 -17.68751907]
[271.09451294 -10.27622223]
[256.00827026 -14.98582649]
[242.83493042 -7.81201649]
[229.66160583 -0.63820690]
[216.48828125 6.53560257]
[203.40542603 13.87307739]
[190.41503906 21.37307739]
[177.42465210 28.87307739]
[164.43428040 36.37307739]
[151.44389343 43.87307739]
[144.29040527 56.93741226]
[128.47045898 57.13679886]
[115.48007202 64.63680267]
[132.00236511 100.21086121]
[109.87931824 123.40340424]
[118.95222473 136.36460876]
[112.52059937 149.79902649]
[114.01411438 164.72448730]
[115.50763702 179.64994812]
[117.00115204 194.57540894]
[118.49466705 209.50086975]
[119.98818970 224.42633057]
[121.48170471 239.35179138]
[133.91929626 245.43531799]
[141.64179993 256.79620361]
[142.70532227 270.38311768]
[136.93722534 282.61077881]
[125.95343781 290.30609131]
[127.07439423 305.26412964]
[128.19534302 320.22219849]
[136.94229126 333.40557861]
[130.17773438 346.67547607]
[131.29869080 361.63351440]
[140.04563904 374.81689453]
[133.28109741 388.08679199]
[134.40203857 403.04486084]
[144.08204651 416.28228760]
[137.21147156 431.17279053]
[120.85818481 432.39828491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[4 119]
[5 118]
[7 116]
[8 115]
[9 114]
[13 109]
[14 108]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[21 101]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[69 99]
[70 98]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
