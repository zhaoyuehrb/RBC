%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUGUCUCGGCUUCUCUCGGCCCCUGGGUCUCUUCGUCUCUGCCGUUCUCAGGCUCAGCUCCGUCUCGCUCGGUCCCUCGCUUCCCCGCCGGGCUCUAGCCGGCCGUCUGGUGGCCCGAGGUGGCGGCGGGCUGGGCGCGGGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[14.04196358 183.94416809]
[0.13962576 189.57666016]
[-13.74749374 183.90675354]
[-19.73492813 170.15354919]
[-14.42223549 156.12435913]
[-28.64901543 160.87817383]
[-42.87579346 165.63198853]
[-47.72708511 181.80348206]
[-61.11418152 191.81683350]
[-77.66588593 191.90074158]
[-90.88627625 182.21948242]
[-105.01107788 187.26823425]
[-119.13587952 192.31700134]
[-133.26068115 197.36575317]
[-132.88969421 215.11111450]
[-138.54570007 231.91021729]
[-149.54444885 245.78083801]
[-164.57229614 255.09196472]
[-181.84306335 258.75564575]
[-199.31027222 256.35412598]
[-214.90974426 248.18724060]
[-226.80345154 235.23529053]
[-240.45970154 241.44070435]
[-254.11593628 247.64611816]
[-267.77218628 253.85151672]
[-276.86450195 267.49929810]
[-293.21044922 266.17910767]
[-299.99465942 251.24903870]
[-290.23815918 238.06790161]
[-273.97760010 240.19528198]
[-260.32135010 233.98986816]
[-246.66510010 227.78446960]
[-233.00886536 221.57905579]
[-235.00157166 209.28263855]
[-233.95979309 196.85829163]
[-229.94003296 185.04437256]
[-223.17594910 174.54428101]
[-214.06474304 165.98455811]
[-203.14387512 159.87753296]
[-191.05937195 156.59059143]
[-178.52752686 156.32415771]
[-166.29255676 159.09944153]
[-155.08229065 164.75683594]
[-145.56500244 172.96516418]
[-138.30943298 183.24095154]
[-124.18463898 178.19218445]
[-110.05982971 173.14343262]
[-95.93502808 168.09468079]
[-93.37192535 154.95593262]
[-84.56837463 144.72808838]
[-71.75316620 140.16510010]
[-58.25312805 142.56552124]
[-47.62960815 151.40521240]
[-33.40282822 146.65139771]
[-19.17605019 141.89758301]
[-5.27349472 136.26562500]
[8.25069523 129.77746582]
[9.75935936 126.52301025]
[12.95434189 123.85960388]
[17.52981567 122.58782196]
[22.82695770 123.33608246]
[36.72951508 117.70412445]
[50.63206863 112.07216644]
[64.53462219 106.44020844]
[78.43717957 100.80825043]
[92.33973694 95.17629242]
[94.35443878 91.80325317]
[97.87083435 89.35771942]
[102.42968750 88.50035858]
[107.28939819 89.65665436]
[121.51617432 84.90283966]
[135.74295044 80.14902496]
[149.96974182 75.39521027]
[164.19651794 70.64139557]
[178.42329407 65.88758087]
[192.65007019 61.13376999]
[206.87684631 56.37995529]
[221.10363770 51.62613678]
[235.33041382 46.87232208]
[245.96710205 35.16030121]
[260.49041748 38.46522141]
[274.71719360 33.71140671]
[288.94396973 28.95759010]
[303.17074585 24.20377541]
[317.39752197 19.44996071]
[321.72235107 9.38112926]
[330.71060181 3.50617647]
[341.22787476 3.58282375]
[349.76397705 9.34190559]
[364.17617798 5.18401814]
[371.11282349 -5.74012375]
[383.25131226 -8.88271523]
[393.91146851 -3.08022547]
[408.40704346 -6.93738461]
[422.90264893 -10.79454422]
[437.39825439 -14.65170383]
[451.89382935 -18.50886345]
[466.38943481 -22.36602211]
[470.17266846 -26.14844513]
[474.59359741 -27.88277245]
[478.74792480 -27.67510414]
[481.91000366 -25.98136520]
[496.61798096 -28.92684746]
[511.32592773 -31.87232971]
[526.03387451 -34.81781387]
[540.74188232 -37.76329422]
[552.69329834 -48.99247742]
[568.31353760 -43.99839020]
[571.53375244 -27.91851997]
[559.04132080 -17.29446220]
[543.68731689 -23.05533409]
[528.97937012 -20.10985184]
[514.27142334 -17.16436958]
[499.56344604 -14.21888638]
[484.85549927 -11.27340412]
[470.24661255 -7.87042618]
[455.75100708 -4.01326656]
[441.25540161 -0.15610710]
[426.75979614 3.70105243]
[412.26422119 7.55821180]
[397.76861572 11.41537094]
[386.06475830 24.45452309]
[368.33407593 19.59623337]
[353.92184448 23.75412178]
[341.64440918 38.64351273]
[322.15133667 33.67673874]
[307.92456055 38.43055344]
[293.69778442 43.18436813]
[279.47100830 47.93818283]
[265.24423218 52.69199753]
[255.62513733 64.06399536]
[240.08422852 61.09910202]
[225.85745239 65.85292053]
[211.63066101 70.60673523]
[197.40388489 75.36054993]
[183.17710876 80.11436462]
[168.95033264 84.86817932]
[154.72355652 89.62199402]
[140.49676514 94.37580872]
[126.26998901 99.12962341]
[112.04321289 103.88343811]
[97.97169495 109.07884979]
[84.06913757 114.71080780]
[70.16658020 120.34276581]
[56.26402664 125.97472382]
[42.36146927 131.60667419]
[28.45891380 137.23863220]
[14.73886013 143.30165100]
[1.21467030 149.78981018]
[14.79256439 156.16482544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[11 48]
[12 47]
[13 46]
[14 45]
[22 33]
[23 32]
[24 31]
[25 30]
[56 149]
[57 148]
[61 147]
[62 146]
[63 145]
[64 144]
[65 143]
[66 142]
[70 141]
[71 140]
[72 139]
[73 138]
[74 137]
[75 136]
[76 135]
[77 134]
[78 133]
[79 132]
[81 130]
[82 129]
[83 128]
[84 127]
[85 126]
[89 124]
[90 123]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
