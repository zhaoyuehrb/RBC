%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGGUGGGGCUGCAGGGUGGGGGCAGGCCAGCUCAGCAGAGCCUGGGGCCAGAGGGCCAGACAGCCACAGAGCUCCUGGCGUGGGCAAGGCUGGCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[84.27445221 242.77951050]
[80.23598480 257.22564697]
[71.61775208 269.50268555]
[59.40334320 278.20947266]
[44.98679352 282.35232544]
[30.01345444 281.45834351]
[16.19223785 275.62963867]
[5.10055304 265.53140259]
[-1.99570489 252.31613159]
[-4.28664207 237.49211121]
[-1.51079345 222.75119019]
[6.01665211 209.77381897]
[-7.84154081 215.51406860]
[-21.69973373 221.25431824]
[-31.48849487 233.68374634]
[-46.20789719 231.40592957]
[-52.02362061 246.10127258]
[-66.56011963 252.30334473]
[-81.19314575 246.33258057]
[-87.24118805 231.73132324]
[-81.11604309 217.16223145]
[-66.45166016 211.26890564]
[-51.94814682 217.54774475]
[-43.15061951 205.52888489]
[-27.43998528 207.39613342]
[-13.58179283 201.65588379]
[0.27640045 195.91561890]
[4.72028255 189.41380310]
[13.11097431 186.76730347]
[23.05781364 175.53964233]
[33.00465393 164.31198120]
[42.95149231 153.08432007]
[52.89833450 141.85665894]
[62.84517288 130.62899780]
[72.79201508 119.40134430]
[82.73885345 108.17368317]
[81.96878815 93.70463562]
[91.57711792 82.85907745]
[106.03348541 81.87947845]
[115.98032379 70.65181732]
[112.09130859 54.27313995]
[118.60919952 38.93135452]
[132.81375122 30.52858353]
[149.06967163 32.17087555]
[158.67286682 20.64791298]
[168.27606201 9.12494946]
[171.16734314 -6.42982817]
[185.25927734 -11.25336838]
[194.86247253 -22.77633286]
[204.46565247 -34.29929733]
[214.06884766 -45.82225800]
[223.67204285 -57.34522247]
[217.43852234 -71.23423004]
[217.85179138 -86.39062500]
[224.77632141 -99.80967712]
[236.79109192 -108.85436249]
[251.48080444 -111.77351379]
[265.92141724 -108.04066467]
[275.52462769 -119.56362915]
[285.12780762 -131.08659363]
[283.44812012 -146.80136108]
[293.43728638 -159.04847717]
[309.16894531 -160.56193542]
[321.30978394 -150.44381714]
[322.65682983 -134.69705200]
[312.41091919 -122.66388702]
[296.65078735 -121.48339844]
[287.04757690 -109.96043396]
[277.44439697 -98.43746948]
[283.71908569 -84.90625763]
[283.49566650 -69.93096161]
[276.76483154 -56.48265076]
[264.81378174 -47.25268936]
[249.98013306 -44.11417770]
[235.19500732 -47.74203110]
[225.59181213 -36.21906662]
[215.98861694 -24.69610405]
[206.38543701 -13.17313957]
[196.78224182 -1.65017593]
[194.57785034 13.08040237]
[179.79902649 18.72814178]
[170.19583130 30.25110626]
[160.59263611 41.77407074]
[165.06546021 54.45104980]
[162.62881470 67.78190613]
[153.82048035 78.22330475]
[140.88623047 82.94548035]
[127.20798492 80.59865570]
[117.26114655 91.82631683]
[118.03121185 106.29536438]
[108.42288208 117.14092255]
[93.96651459 118.12052155]
[84.01967621 129.34819031]
[74.07283783 140.57585144]
[64.12599182 151.80351257]
[54.17915344 163.03117371]
[44.23231506 174.25883484]
[34.28547668 185.48649597]
[24.33863640 196.71415710]
[39.05909348 193.83177185]
[53.89929581 196.01544189]
[67.16552734 203.01596069]
[77.34371948 214.03431702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 27]
[13 26]
[14 25]
[16 23]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[39 89]
[40 88]
[44 83]
[45 82]
[46 81]
[48 79]
[49 78]
[50 77]
[51 76]
[52 75]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
