%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUACUUGGCUCGGAGCGGGCGAGGGGACGCGUGGGCGGAGCGGGGCUGGCCAGCCUCGGCCCCCAUGACCCGCUGUCCUGUGCCCUUUCCCAGCG\
) } def
/len { sequence length } bind def

/coor [
[66.38134003 333.84426880]
[58.95274353 347.17764282]
[46.46973038 355.96041870]
[31.41082191 358.44879150]
[16.76596642 354.14868164]
[5.44291639 343.91384888]
[-0.31013098 329.77648926]
[0.64909673 314.54354858]
[8.13014412 301.23953247]
[20.64764404 292.50598145]
[35.71623611 290.07693481]
[39.94222641 275.68453979]
[44.16821289 261.29214478]
[40.33001709 246.90057373]
[51.64185715 235.83924866]
[55.86784744 221.44685364]
[60.09383392 207.05445862]
[64.31982422 192.66206360]
[60.48162460 178.27049255]
[71.79346466 167.20916748]
[76.01945496 152.81677246]
[80.24544525 138.42437744]
[84.47143555 124.03199005]
[83.31426239 116.59120178]
[89.06656647 109.25394440]
[86.39123535 95.53044891]
[96.68236542 86.06555939]
[101.36286926 71.81449127]
[106.04337311 57.56342316]
[110.72386932 43.31235504]
[115.40437317 29.06129074]
[120.08487701 14.81022263]
[119.80303192 5.49116039]
[125.14656830 0.18541029]
[130.27687073 -13.90997887]
[135.40718079 -28.00536919]
[140.53747559 -42.10075760]
[145.66778564 -56.19614792]
[150.57380676 -70.37116241]
[155.25430298 -84.62222290]
[150.11779785 -96.58422089]
[154.44451904 -108.43387604]
[165.35986328 -113.90907288]
[165.37384033 -123.23238373]
[170.88302612 -128.36592102]
[176.45796204 -142.29144287]
[182.03289795 -156.21696472]
[187.60783386 -170.14248657]
[193.18276978 -184.06800842]
[198.75770569 -197.99351501]
[204.33264160 -211.91903687]
[209.90757751 -225.84455872]
[203.45660400 -240.27232361]
[209.17501831 -255.00579834]
[223.67018127 -261.30386353]
[238.34237671 -255.43002319]
[244.48684692 -240.86907959]
[238.45819092 -226.25979614]
[223.83309937 -220.26962280]
[218.25816345 -206.34410095]
[212.68322754 -192.41857910]
[207.10829163 -178.49305725]
[201.53335571 -164.56755066]
[195.95841980 -150.64202881]
[190.38348389 -136.71650696]
[184.80854797 -122.79098511]
[179.45524597 -108.77877045]
[183.49552917 -91.78249359]
[169.50537109 -79.94172668]
[164.82485962 -65.69065857]
[165.74537659 -58.21689987]
[159.76316833 -51.06584549]
[154.63287354 -36.97045517]
[149.50256348 -22.87506676]
[144.37226868 -8.77967644]
[139.24195862 5.31571245]
[134.33593750 19.49072456]
[129.65544128 33.74179077]
[124.97493744 47.99285889]
[120.29443359 62.24392319]
[115.61393738 76.49499512]
[110.93343353 90.74605560]
[113.60876465 104.46955109]
[103.31763458 113.93444061]
[98.86383057 128.25798035]
[94.63784027 142.65037537]
[90.41184998 157.04277039]
[86.18585968 171.43516541]
[89.72178650 186.85618591]
[78.71221924 196.88806152]
[74.48622894 211.28045654]
[70.26023865 225.67285156]
[66.03425598 240.06524658]
[69.57018280 255.48625183]
[58.56060791 265.51812744]
[54.33462143 279.91052246]
[50.10863113 294.30291748]
[61.47189713 304.49307251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 97]
[12 96]
[13 95]
[15 93]
[16 92]
[17 91]
[18 90]
[20 88]
[21 87]
[22 86]
[23 85]
[25 84]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 70]
[40 69]
[43 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
