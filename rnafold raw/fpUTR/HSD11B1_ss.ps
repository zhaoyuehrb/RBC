%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGAAACAGAAGGAAAGGCAGAGGAGGAGGGAGAGAGAGAGAAGAGAAGAAAAAGAAAAAAGAACAUCAAUAAAAAGAAGUCAGAUUUGUUCGAAAUCUUGAGGUUCUCUCUGUGUGUCCUACAGGAGUCUUCAGGCCAGCUCCCUGUCGG\
) } def
/len { sequence length } bind def

/coor [
[89.90116882 497.12918091]
[75.55307770 502.33447266]
[60.36827469 500.79031372]
[47.36170578 492.80334473]
[39.11583710 479.95932007]
[37.26789856 464.80850220]
[42.18479156 450.35903931]
[52.89027023 439.47988892]
[67.25875092 434.33114624]
[68.77627563 419.40811157]
[70.29380035 404.48507690]
[71.81132507 389.56204224]
[69.50250244 385.32022095]
[69.87512970 379.57507324]
[73.70473480 374.06930542]
[75.82578278 359.22000122]
[77.94682312 344.37072754]
[67.29350281 331.39175415]
[69.33528137 314.38562012]
[83.29669189 303.89205933]
[85.11634827 289.00283813]
[86.93601227 274.11361694]
[79.19590759 258.39169312]
[90.31636810 243.74876404]
[91.83389282 228.82571411]
[93.35141754 213.90267944]
[94.86894226 198.97964478]
[96.38646698 184.05659485]
[96.69047546 169.05967712]
[95.77896118 154.08740234]
[94.86744690 139.11512756]
[86.37104034 126.88154602]
[93.25543976 112.63670349]
[85.70252991 100.87042999]
[91.77228546 88.27481079]
[83.21067810 74.97032166]
[90.16027832 61.79639053]
[89.24876404 46.82411194]
[88.33724976 31.85183144]
[87.42573547 16.87955284]
[86.51422119 1.90727329]
[85.60270691 -13.06500626]
[84.69119263 -28.03728485]
[83.77967834 -43.00956345]
[70.92874146 -48.61403275]
[61.79951477 -59.16674805]
[58.13753510 -72.56253815]
[60.60515594 -86.16149139]
[68.66255951 -97.30918884]
[80.68457031 -103.85481262]
[80.07668304 -118.84249115]
[79.46880341 -133.83016968]
[78.86091614 -148.81784058]
[65.36372375 -156.01319885]
[57.33330536 -168.91316223]
[56.84131622 -184.00038147]
[63.91980743 -197.21972656]
[76.57946777 -205.06820679]
[75.97158051 -220.05587769]
[75.36370087 -235.04356384]
[67.07349396 -248.51884460]
[74.28865814 -261.54922485]
[73.68077087 -276.53689575]
[73.07289124 -291.52456665]
[58.67503357 -303.76693726]
[57.75180817 -322.32525635]
[70.42273712 -335.47827148]
[69.20796967 -350.42901611]
[60.37848282 -363.55725098]
[67.05965424 -376.86932373]
[65.84488678 -391.82003784]
[52.52433777 -399.77883911]
[46.45682144 -414.06048584]
[49.97542572 -429.17333984]
[61.72717667 -439.30627441]
[77.19328308 -440.56292725]
[90.42671204 -432.46008301]
[96.33894348 -418.11346436]
[92.65660095 -403.03964233]
[80.79561615 -393.03482056]
[82.01039124 -378.08407593]
[90.75298309 -366.02520752]
[84.15869904 -351.64376831]
[85.37347412 -336.69305420]
[95.51843262 -331.32522583]
[101.85536957 -321.61175537]
[102.69803619 -309.92407227]
[97.71894073 -299.18380737]
[88.06056976 -292.13244629]
[88.66844940 -277.14477539]
[89.27633667 -262.15710449]
[97.52305603 -249.75384521]
[90.35137177 -235.65144348]
[90.95925903 -220.66377258]
[91.56714630 -205.67608643]
[104.82082367 -198.87863159]
[112.94662476 -186.27595520]
[113.67808533 -171.19844055]
[106.71874237 -157.69050598]
[93.84859467 -149.42573547]
[94.45648193 -134.43804932]
[95.06436157 -119.45037842]
[95.67224884 -104.46269989]
[110.14155579 -97.32981110]
[119.10504150 -83.80477905]
[120.04710388 -67.51268768]
[112.61746216 -52.87756729]
[98.75196075 -43.92107773]
[99.66347504 -28.94879913]
[100.57498932 -13.97651958]
[101.48650360 0.99575996]
[102.39801788 15.96803951]
[103.30952454 30.94031906]
[104.22103882 45.91259766]
[105.13255310 60.88487625]
[113.62895966 73.11845398]
[106.74456024 87.36329651]
[114.29747009 99.12957001]
[108.22771454 111.72518921]
[116.78932190 125.02967834]
[109.83972168 138.20361328]
[110.75123596 153.17588806]
[111.66275024 168.14816284]
[121.21444702 156.58248901]
[135.70027161 152.68876648]
[149.76336670 157.90690613]
[158.20324707 170.30725098]
[157.89883423 185.30416870]
[148.96270752 197.35180664]
[134.69943237 201.99496460]
[120.38355255 197.51663208]
[111.30950928 185.57412720]
[109.79198456 200.49716187]
[108.27445984 215.42021179]
[106.75693512 230.34324646]
[105.23941040 245.26628113]
[112.78650665 255.77323914]
[111.17865753 268.20465088]
[101.82522583 275.93325806]
[100.00556946 290.82247925]
[98.18591309 305.71170044]
[107.67018890 315.32479858]
[109.83576202 328.45666504]
[104.11042023 340.25515747]
[92.79610443 346.49176025]
[90.67506409 361.34106445]
[88.55401611 376.19033813]
[86.73435974 391.07955933]
[85.21683502 406.00259399]
[83.69931030 420.92562866]
[82.18178558 435.84866333]
[95.21970367 443.78439331]
[103.51609039 456.59582520]
[105.42367554 471.73925781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 151]
[10 150]
[11 149]
[12 148]
[15 147]
[16 146]
[17 145]
[20 141]
[21 140]
[22 139]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[29 123]
[30 122]
[31 121]
[33 119]
[35 117]
[37 115]
[38 114]
[39 113]
[40 112]
[41 111]
[42 110]
[43 109]
[44 108]
[50 103]
[51 102]
[52 101]
[53 100]
[58 95]
[59 94]
[60 93]
[62 91]
[63 90]
[64 89]
[67 84]
[68 83]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
