%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAUUCUGGAAGUGCGGCCCGGGGAGGGGCCAGGAGCGGGAACGUGCCCGGUGCUGCCCAGUCUUUGUCUGCUGCCUCCGGAUGCACAGCG\
) } def
/len { sequence length } bind def

/coor [
[96.65727997 461.68438721]
[87.80971527 449.37600708]
[83.70843506 434.78302002]
[84.84867859 419.66760254]
[91.09275818 405.85501099]
[101.68667603 395.01321411]
[115.35115814 388.45138550]
[113.84972382 373.52673340]
[112.34828949 358.60205078]
[110.84684753 343.67739868]
[109.34541321 328.75271606]
[107.84397888 313.82806396]
[103.96389008 307.35797119]
[106.55030823 298.38082886]
[102.88858032 291.78472900]
[105.77352142 282.89901733]
[105.27230072 267.90737915]
[104.77107239 252.91577148]
[104.26985168 237.92414856]
[103.76862335 222.93252563]
[92.27232361 207.53623962]
[101.49243164 189.76347351]
[99.99099731 174.83880615]
[98.48956299 159.91413879]
[96.98812866 144.98947144]
[95.48668671 130.06480408]
[93.98525238 115.14012909]
[83.82020569 101.90129852]
[90.63932037 86.66664124]
[88.64001465 71.80048370]
[86.64070892 56.93431854]
[84.64140320 42.06815720]
[80.31869507 33.78606796]
[82.83228302 26.67279243]
[81.33084869 11.74812603]
[72.25106812 -1.20826876]
[78.67556763 -14.64609241]
[69.59578705 -27.60248756]
[76.02028656 -41.04030991]
[74.51884460 -55.96497726]
[73.01741028 -70.88964844]
[71.51597595 -85.81431580]
[59.12112427 -95.61957550]
[57.37302017 -111.32688904]
[67.30877686 -123.61737823]
[83.03369904 -125.19932556]
[95.21845245 -115.13417053]
[96.63405609 -99.39340973]
[86.44064331 -87.31575012]
[87.94207764 -72.39108276]
[89.44351196 -57.46641541]
[90.94495392 -42.54174805]
[99.91733551 -30.65286446]
[93.60023499 -16.14752769]
[102.57262421 -4.25864506]
[96.25551605 10.24669075]
[97.75695038 25.17135811]
[99.50756836 40.06885147]
[101.50687408 54.93501663]
[103.50617218 69.80117798]
[105.50547791 84.66734314]
[114.39963531 92.38086700]
[115.77364349 104.07345581]
[108.90991974 113.63869476]
[110.41135406 128.56336975]
[111.91279602 143.48803711]
[113.41423035 158.41270447]
[114.91566467 173.33737183]
[116.41709900 188.26203918]
[125.41663361 194.81343079]
[129.13864136 205.06832886]
[126.54385376 215.43586731]
[118.76024628 222.43128967]
[119.26147461 237.42291260]
[119.76270294 252.41453552]
[120.26392365 267.40615845]
[120.76515198 282.39779663]
[121.51680756 297.37893677]
[122.76864624 312.32659912]
[124.27008057 327.25128174]
[125.77151489 342.17593384]
[127.27295685 357.10061646]
[128.77438354 372.02526855]
[130.27581787 386.94995117]
[144.97352600 390.65850830]
[157.51469421 399.17291260]
[166.38491821 411.46496582]
[170.51309204 426.05038452]
[169.40071106 441.16787720]
[163.18209839 454.99194336]
[152.60816956 465.85324097]
[138.95581055 472.44024658]
[123.87357330 473.95751953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[14 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[29 61]
[30 60]
[31 59]
[32 58]
[34 57]
[35 56]
[37 54]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
