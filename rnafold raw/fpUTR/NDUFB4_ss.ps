%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUUCCUGAAGCUGAAGGUCAGCAUAGACAAAGGGCCUCAGAAUCGCGCAGGCGCAAUUGUGCCCUGGUUCGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[93.42826843 141.87760925]
[83.72232819 139.14025879]
[74.93764496 134.18772888]
[67.57138062 127.30031586]
[62.04044342 118.86782074]
[58.65785980 109.36748505]
[57.61506271 99.33699036]
[58.97107697 89.34401703]
[45.34893036 83.06411743]
[31.72678185 76.78422546]
[18.10463524 70.50432587]
[2.33280611 71.75332642]
[-5.98608303 59.39835739]
[-19.60823059 53.11846161]
[-33.23037720 46.83856583]
[-45.78016281 55.58214188]
[-60.92148590 56.86165619]
[-74.57952881 50.43325424]
[-83.12887573 38.11397934]
[-84.35575867 23.26944160]
[-97.97790527 16.98954582]
[-111.60005188 10.70964909]
[-126.33889008 16.41423607]
[-140.76058960 9.94973087]
[-146.30903625 -4.84859133]
[-139.69241333 -19.20114899]
[-124.83625793 -24.59282303]
[-110.55445862 -17.82482910]
[-105.32015991 -2.91249847]
[-91.69801331 3.36739755]
[-78.07585907 9.64729309]
[-65.99118805 0.93946332]
[-51.07117844 -0.56028736]
[-37.31279755 5.65045643]
[-28.45224571 17.99498558]
[-26.95048141 33.21641541]
[-13.32833481 39.49631119]
[0.29381305 45.77620697]
[15.09129429 44.07802963]
[24.38453102 56.88218307]
[38.00667953 63.16207886]
[51.62882614 69.44197083]
[65.25097656 75.72187042]
[80.92987061 62.14167786]
[101.17485809 57.62615967]
[121.13854218 63.25650406]
[136.04087830 77.68459320]
[142.31370544 97.45581055]
[157.20973206 99.21887207]
[172.10575867 100.98192596]
[187.07974243 101.86499023]
[202.07974243 101.86499023]
[217.07974243 101.86499023]
[232.07974243 101.86499023]
[240.92837524 98.66875458]
[247.66574097 102.17105865]
[262.65417480 102.75995636]
[277.64260864 103.34885406]
[291.89581299 95.23847961]
[305.90753174 103.75927734]
[305.26370239 120.14577484]
[290.62664795 127.54096222]
[277.05371094 118.33728790]
[262.06527710 117.74839783]
[247.07684326 117.15950012]
[232.07974243 116.86499023]
[217.07974243 116.86499023]
[202.07974243 116.86499023]
[187.07974243 116.86499023]
[184.22346497 119.34500122]
[179.92628479 120.41151428]
[174.94480896 119.35678101]
[170.34269714 115.87795258]
[155.44667053 114.11489868]
[140.55064392 112.35183716]
[136.48551941 121.58075714]
[130.35546875 129.58830261]
[122.50743103 135.92127991]
[113.38556671 140.22125244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[11 40]
[13 38]
[14 37]
[15 36]
[20 31]
[21 30]
[22 29]
[48 75]
[49 74]
[50 73]
[51 69]
[52 68]
[53 67]
[54 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
