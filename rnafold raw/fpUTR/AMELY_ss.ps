%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGACCAAGCCUCCCUGUGUAGCACAAAGAAAGUUUCUCUGAAUAUAUUUAAAGAACCAUCAAGAA\
) } def
/len { sequence length } bind def

/coor [
[89.87653351 135.88632202]
[79.83201599 131.36184692]
[69.34683228 142.08848572]
[58.86164093 152.81512451]
[48.37645340 163.54176331]
[48.80693817 179.34019470]
[37.87965012 190.75816345]
[22.07755852 191.02159119]
[10.77576065 179.97419739]
[10.67941570 164.17019653]
[21.84568214 152.98583984]
[37.64981461 153.05657959]
[48.13499832 142.32994080]
[58.62018585 131.60330200]
[69.10536957 120.87665558]
[64.26096344 110.63175201]
[62.71785355 99.40477753]
[64.61857605 88.23278046]
[51.62819290 80.73278046]
[38.63781357 73.23278046]
[25.64743233 65.73278046]
[8.90717125 63.04949570]
[6.85142469 46.22064590]
[22.45351028 39.58654785]
[33.14743042 52.74239731]
[46.13781357 60.24239731]
[59.12819290 67.74240112]
[72.11857605 75.24240112]
[90.73158264 63.88339615]
[112.51427460 64.87585449]
[130.01724243 77.88036346]
[143.63580322 71.59272003]
[149.17687988 57.03475571]
[163.07762146 50.85218811]
[176.92227173 56.22447586]
[190.54083252 49.93682861]
[204.15940857 43.64917755]
[210.90879822 36.99374390]
[218.54393005 37.40109634]
[232.43457031 31.73980904]
[242.29391479 19.36628914]
[257.00012207 21.72784233]
[270.89074707 16.06655312]
[284.78140259 10.40526581]
[298.67202759 4.74397802]
[308.29620361 -8.53408909]
[324.57723999 -6.56943560]
[330.76660156 8.61687183]
[320.49719238 21.40246201]
[304.33331299 18.63461685]
[290.44268799 24.29590416]
[276.55203247 29.95719147]
[262.66140747 35.61848068]
[253.79560852 47.58706665]
[238.09585571 45.63044739]
[224.20523071 51.29173279]
[210.44705200 57.26774979]
[196.82849121 63.55539703]
[183.20991516 69.84304810]
[178.31961060 83.86518860]
[164.59800720 90.43576050]
[149.92346191 85.21128845]
[136.30488586 91.49893951]
[137.20442200 102.47865295]
[134.85630798 113.24199677]
[129.46551514 122.84941864]
[121.50261688 130.46226501]
[111.66271210 135.41601562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[18 28]
[19 27]
[20 26]
[21 25]
[31 63]
[32 62]
[35 59]
[36 58]
[37 57]
[39 56]
[40 55]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
