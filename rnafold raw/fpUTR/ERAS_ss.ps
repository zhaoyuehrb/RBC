%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGUCCCAGCGCGCCCGCCUCCCCACGGACACAGAGCCUGCUGCCCACGUCUCUUCCCUGAGCUGCCUGCUGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[182.37951660 173.21742249]
[170.70404053 163.80024719]
[159.02856445 154.38307190]
[147.35308838 144.96588135]
[135.49720764 135.77687073]
[123.46535492 126.81949615]
[111.43350983 117.86211395]
[95.29082489 120.67858887]
[81.95951080 111.14994049]
[79.39837646 94.96478271]
[67.02825165 86.48067474]
[54.65812683 77.99657440]
[42.28800201 69.51247406]
[29.91787529 61.02836609]
[14.16094875 59.60365295]
[8.04135609 46.02426147]
[-4.32876921 37.54016113]
[-16.86108589 29.29752541]
[-32.66140747 28.48486328]
[-39.30294418 15.15297413]
[-54.53044128 18.43338585]
[-67.28576660 10.14143848]
[-70.31929016 -4.39586782]
[-83.00908661 -12.39393425]
[-95.69888306 -20.39200020]
[-112.09776306 -20.48686028]
[-119.97883606 -34.86812210]
[-111.23473358 -48.74157715]
[-94.86064148 -47.83540726]
[-87.70082092 -33.08179855]
[-75.01102448 -25.08373070]
[-62.32122803 -17.08566475]
[-47.89751816 -20.62010384]
[-34.91432571 -12.68969822]
[-31.30487823 2.46317744]
[-16.41221619 2.70376420]
[-8.86301994 16.60772896]
[-1.33045566 17.53343773]
[4.15533400 25.17003441]
[16.52545929 33.65413666]
[31.39759254 34.47201157]
[38.40197754 48.65824127]
[50.77210236 57.14234543]
[63.14223099 65.62644958]
[75.51235199 74.11054993]
[87.88247681 82.59465790]
[100.13142395 78.79238129]
[112.33229828 82.74617004]
[120.02300262 93.01003265]
[120.39088440 105.83026886]
[132.42272949 114.78765106]
[144.45458984 123.74502563]
[153.45587158 126.46317291]
[156.77027893 133.29040527]
[168.44575500 142.70759583]
[180.12123108 152.12477112]
[191.79669189 161.54196167]
[209.01931763 159.30517578]
[222.35137939 169.90609741]
[223.98657227 186.52461243]
[236.01843262 195.48199463]
[248.05027771 204.43937683]
[263.74011230 206.47399902]
[269.32855225 220.28047180]
[281.36041260 229.23783875]
[293.39224243 238.19522095]
[309.41043091 237.30212402]
[319.98794556 249.36427307]
[317.01062012 265.12863159]
[302.76245117 272.50213623]
[288.17333984 265.82846069]
[284.43487549 250.22706604]
[272.40301514 241.26969910]
[260.37118530 232.31231689]
[245.54193115 230.91838074]
[239.09289551 216.47122192]
[227.06105042 207.51383972]
[215.02920532 198.55645752]
[202.51173401 202.19683838]
[190.02412415 197.82046509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 52]
[6 51]
[7 50]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[16 40]
[17 39]
[18 37]
[20 35]
[23 32]
[24 31]
[25 30]
[60 78]
[61 77]
[62 76]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
