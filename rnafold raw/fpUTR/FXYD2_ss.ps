%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACUCUCCAUCCAGGCCCCAGGCAAGCAGCACCUCCCUGCUCUCCUGCACUCCUGGACACAACCAGCAGCUCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[140.93876648 305.36697388]
[128.85339355 301.00018311]
[118.00659180 294.09616089]
[108.92347717 284.98522949]
[102.04460907 274.10464478]
[97.70465851 261.97760010]
[96.11612701 249.18814087]
[97.35890198 236.35290527]
[101.37631226 224.09147644]
[107.97763062 212.99647522]
[116.84719086 203.60490417]
[127.55944824 196.37213135]
[122.36769104 182.29925537]
[117.17593384 168.22637939]
[111.98418427 154.15351868]
[106.79242706 140.08064270]
[101.60066986 126.00777435]
[85.97982025 121.96363068]
[75.73534393 109.49700165]
[74.79573822 93.38851929]
[83.52130890 79.81536865]
[77.78105927 65.95717621]
[72.04080963 52.09898376]
[66.30056000 38.24079132]
[51.97483826 32.12429047]
[46.35082245 17.98834038]
[52.27025604 4.36865187]
[46.53000641 -9.48954105]
[40.78975296 -23.34773445]
[35.04950333 -37.20592880]
[29.30925179 -51.06412125]
[14.34201431 -55.59355927]
[5.83123541 -68.71227264]
[7.79544449 -84.22600555]
[19.30720139 -94.80964661]
[34.93100739 -95.46592712]
[47.28977966 -85.88496399]
[50.54808044 -70.59060669]
[43.16744232 -56.80437088]
[48.90769577 -42.94617844]
[54.64794540 -29.08798599]
[60.38819885 -15.22979259]
[66.12844849 -1.37159967]
[79.94469452 4.07330227]
[85.96353912 18.04570770]
[80.15875244 32.50053787]
[85.89900208 46.35873413]
[91.63925171 60.21692657]
[97.37950134 74.07511902]
[110.59288025 76.19333649]
[121.01233673 84.59065247]
[125.88970947 97.05223846]
[123.93857574 110.29132080]
[115.67353821 120.81601715]
[120.86529541 134.88888550]
[126.05705261 148.96176147]
[131.24880981 163.03462219]
[136.44056702 177.10749817]
[141.63232422 191.18037415]
[159.09640503 189.89823914]
[176.14886475 193.80935669]
[191.28117371 202.55815125]
[203.15750122 215.36152649]
[210.73265076 231.07893372]
[213.34396362 248.31399536]
[210.76936340 265.53854370]
[203.24615479 281.22811890]
[191.44920349 293.99685669]
[199.28668213 306.78646851]
[207.12416077 319.57608032]
[214.96163940 332.36566162]
[228.39291382 342.71154785]
[222.16950989 358.48196411]
[205.29260254 356.86743164]
[202.17202759 340.20315552]
[194.33454895 327.41354370]
[186.49707031 314.62396240]
[178.65959167 301.83435059]
[166.45755005 305.79101562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[21 49]
[22 48]
[23 47]
[24 46]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
