%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGCGCGUGCGCACUGGCGUGCGAGACUCGGCGGGCGCUGUUGAGGGAGUCGGGCCGCGACUGUGGUCGUUUUUAUACCUUCCCGCGCGGACGCCGGCGCUGCCAACGGAAGGGCGGGUAGGGCGGUGCGUGAUUAGGUUGGCGAAGGCUCUGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[95.74979401 210.20535278]
[82.60639954 199.49613953]
[89.25864410 183.90177917]
[89.83670807 168.91291809]
[82.59563446 155.89692688]
[90.85901642 142.40518188]
[91.43708038 127.41632843]
[92.01514435 112.42746735]
[78.06150055 106.92149353]
[64.10910034 101.41599274]
[54.29611969 112.76084137]
[44.48314667 124.10568237]
[34.67016983 135.45053101]
[24.85719299 146.79537964]
[15.04421711 158.14021301]
[5.23124123 169.48506165]
[2.67486906 185.68373108]
[-12.72680283 191.31584167]
[-25.12985611 180.58753967]
[-21.77509117 164.53520203]
[-6.11360359 159.67208862]
[3.69937229 148.32723999]
[13.51234818 136.98240662]
[23.32532310 125.63755798]
[33.13829803 114.29270935]
[42.95127487 102.94786835]
[52.76425171 91.60301971]
[49.54738235 84.82793427]
[34.59572220 83.62466431]
[43.11364746 71.27777100]
[39.89677811 64.50268555]
[24.90304565 64.93627930]
[9.90931416 65.36987305]
[-5.08441734 65.80346680]
[-20.07814980 66.23706818]
[-35.07188034 66.67066193]
[-50.06561279 67.10425568]
[-65.05934143 67.53784943]
[-80.71707916 74.03951263]
[-91.29914856 60.79352951]
[-81.50022888 46.95815659]
[-65.49294281 52.54411697]
[-50.49920654 52.11052322]
[-35.50547791 51.67692947]
[-20.51174355 51.24333191]
[-5.51801252 50.80973816]
[9.47571945 50.37614441]
[24.46945190 49.94254684]
[39.46318436 49.50895309]
[103.17004395 88.33754730]
[114.22649384 78.20073700]
[125.28294373 68.06391907]
[136.33938599 57.92710876]
[147.39582825 47.79029465]
[158.45228577 37.65348053]
[158.87648010 20.18814659]
[171.53556824 8.64263439]
[188.29331970 9.77859020]
[199.15234375 -0.56942451]
[210.01138306 -10.91743946]
[212.02897644 -25.78112984]
[204.32130432 -38.64937973]
[196.61364746 -51.51763153]
[188.90597534 -64.38587952]
[181.19830322 -77.25413513]
[166.61119080 -84.74733734]
[166.07730103 -101.13779449]
[180.14585876 -109.56439972]
[194.34434509 -101.35859680]
[194.06655884 -84.96179962]
[201.77423096 -72.09355164]
[209.48188782 -59.22529984]
[217.18955994 -46.35704803]
[224.89721680 -33.48879623]
[220.23347473 -47.74535370]
[226.33364868 -61.44892502]
[240.04821777 -67.52432251]
[254.29632568 -62.83481216]
[261.72161865 -49.80159378]
[258.49044800 -35.15374756]
[246.26904297 -26.45347977]
[260.11337280 -32.22710037]
[273.95767212 -38.00072479]
[287.80200195 -43.77434540]
[291.48983765 -58.73115158]
[303.14138794 -68.53393555]
[318.15347290 -69.58377075]
[330.75427246 -61.68711853]
[344.59860229 -67.46073914]
[358.44293213 -73.23435974]
[372.28726196 -79.00798798]
[386.13159180 -84.78160858]
[399.97589111 -90.55522919]
[405.61529541 -102.19002533]
[417.30316162 -106.70050049]
[428.55139160 -102.16938782]
[442.50439453 -107.67511749]
[456.45742798 -113.18085480]
[470.41046143 -118.68659210]
[481.49765015 -133.36105347]
[498.73132324 -130.15933228]
[512.57562256 -135.93295288]
[519.33105469 -142.15393066]
[526.74285889 -141.68159485]
[540.69586182 -147.18733215]
[554.64892578 -152.69306946]
[568.60192871 -158.19880676]
[582.55493164 -163.70454407]
[586.30072021 -178.76272583]
[598.20373535 -188.71752930]
[613.68701172 -189.74113464]
[626.79693604 -181.43995667]
[632.49243164 -167.00595093]
[628.58355713 -151.98928833]
[616.57324219 -142.16418457]
[601.07977295 -141.30860901]
[588.06066895 -149.75151062]
[574.10766602 -144.24577332]
[560.15466309 -138.74003601]
[546.20159912 -133.23431396]
[532.24859619 -127.72856903]
[518.34924316 -122.08863068]
[504.50494385 -116.31501007]
[499.59445190 -105.22715759]
[488.06832886 -100.31806183]
[475.91619873 -104.73357391]
[461.96316528 -99.22783661]
[448.01013184 -93.72209930]
[434.05712891 -88.21636200]
[423.92718506 -73.91127014]
[405.74951172 -76.71090698]
[391.90521240 -70.93728638]
[378.06088257 -65.16365814]
[364.21655273 -59.39003754]
[350.37222290 -53.61641693]
[336.52789307 -47.84279633]
[333.27142334 -33.33302689]
[321.96166992 -23.40563774]
[306.79763794 -22.02527809]
[293.57562256 -29.93002319]
[279.73129272 -24.15640068]
[265.88699341 -18.38277817]
[252.04266357 -12.60915661]
[238.02839661 1.77822113]
[220.35939026 -0.05840612]
[209.50036621 10.28960800]
[198.64132690 20.63762283]
[200.13291931 33.46421432]
[193.85781860 44.97248840]
[181.91796875 50.83802414]
[168.58909607 48.70993042]
[157.53265381 58.84674072]
[146.47619629 68.98355865]
[135.41975403 79.12036896]
[124.36330414 89.25717926]
[113.30686188 99.39399719]
[107.00399780 113.00553131]
[106.42593384 127.99439240]
[105.84786987 142.98324585]
[113.04759979 157.07135010]
[104.82556915 169.49098206]
[104.24750519 184.47984314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 162]
[4 161]
[6 159]
[7 158]
[8 157]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[50 156]
[51 155]
[52 154]
[53 153]
[54 152]
[55 151]
[58 147]
[59 146]
[60 145]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
[81 143]
[82 142]
[83 141]
[84 140]
[88 136]
[89 135]
[90 134]
[91 133]
[92 132]
[93 131]
[96 129]
[97 128]
[98 127]
[99 126]
[101 123]
[102 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
