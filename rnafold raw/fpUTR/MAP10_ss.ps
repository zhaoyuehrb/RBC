%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUGCCAGUGUAUUCACACUCCGUGUGUGUGUGGUGUGUCUGUCUCAGUACUACUGUAAUUGAUGAGGCAGGGGCUCCCUGGCCAUCCCAGCAGUGUCACCAUCUUUUGGGUAGAACAGCAGACACAGAG\
) } def
/len { sequence length } bind def

/coor [
[-25.47423935 311.93347168]
[-40.28267288 314.32308960]
[-54.35666656 309.13439941]
[-64.07010651 297.70419312]
[-66.92035675 282.97747803]
[-62.17326736 268.74884033]
[-74.92103577 276.65417480]
[-87.66880035 284.55953979]
[-100.41657257 292.46487427]
[-102.96302795 297.24069214]
[-106.73914337 300.20419312]
[-110.82101440 301.19168091]
[-114.35880280 300.44140625]
[-127.63430786 307.42431641]
[-140.90980530 314.40722656]
[-149.52149963 327.67935181]
[-164.38748169 326.75646973]
[-177.66299438 333.73937988]
[-190.93849182 340.72229004]
[-204.21398926 347.70520020]
[-217.48948669 354.68811035]
[-228.69291687 367.41287231]
[-244.02180481 360.16986084]
[-241.30529785 343.43496704]
[-224.47239685 341.41262817]
[-211.19689941 334.42971802]
[-197.92140198 327.44680786]
[-184.64590454 320.46389771]
[-171.37039185 313.48098755]
[-163.70826721 300.70831299]
[-147.89271545 301.13171387]
[-134.61721802 294.14880371]
[-121.34172058 287.16589355]
[-108.32190704 279.71710205]
[-95.57414246 271.81176758]
[-82.82637787 263.90643311]
[-70.07860565 256.00106812]
[-58.35113525 246.64872742]
[-47.80735016 235.97967529]
[-37.26356888 225.31062317]
[-26.71978569 214.64157104]
[-16.17600441 203.97251892]
[-5.63222170 193.30348206]
[4.91156101 182.63442993]
[15.45534325 171.96537781]
[10.34810734 157.95175171]
[11.83789635 143.04907227]
[19.68251610 130.21852112]
[32.37172699 122.03291321]
[47.41773224 120.16082764]
[61.84286118 125.02673340]
[72.38664246 114.35768127]
[82.93042755 103.68862915]
[88.34795380 62.50743484]
[94.85620880 48.99290085]
[101.36446381 35.47836685]
[107.87271881 21.96383476]
[114.38098145 8.44930267]
[120.88923645 -5.06523085]
[113.45163727 -16.73404694]
[112.78129578 -30.44670868]
[118.94702148 -42.59171677]
[130.23135376 -50.02378464]
[143.60745239 -50.87820816]
[150.43309021 -64.23525238]
[157.25872803 -77.59230042]
[164.08436584 -90.94934845]
[165.22474670 -100.11085510]
[171.23220825 -104.53842163]
[170.99562073 -120.35785675]
[183.85787964 -127.86861420]
[190.99708557 -141.06071472]
[198.13630676 -154.25282288]
[205.27551270 -167.44493103]
[212.41471863 -180.63703918]
[214.63572693 -197.44488525]
[231.40153503 -199.96354675]
[238.46302795 -184.55018616]
[225.60682678 -173.49783325]
[218.46762085 -160.30572510]
[211.32841492 -147.11361694]
[204.18919373 -133.92150879]
[197.04998779 -120.72940063]
[197.79722595 -105.85355377]
[184.42431641 -97.39920807]
[177.44140625 -84.12371063]
[170.61576843 -70.76666260]
[163.79013062 -57.40961838]
[156.96449280 -44.05257034]
[164.86164856 -29.71115303]
[162.66667175 -13.31991291]
[151.04406738 -1.32367241]
[134.40376282 1.44302523]
[127.89550781 14.95755863]
[121.38725281 28.47209167]
[114.87899780 41.98662567]
[108.37074280 55.50115585]
[101.86248779 69.01569366]
[104.71214294 75.95323181]
[119.57797241 77.95499420]
[110.41144562 89.82831573]
[113.26110077 96.76585388]
[127.38985443 101.80355835]
[141.51860046 106.84127045]
[156.57160950 101.29273224]
[170.21984863 109.72512054]
[171.99356079 125.66982269]
[160.53208923 136.89543152]
[144.62770081 134.79061890]
[136.48089600 120.97001648]
[122.35214233 115.93230438]
[108.22339630 110.89459991]
[93.59947968 114.23241425]
[83.05569458 124.90146637]
[72.51190948 135.57051086]
[77.54784393 149.93717957]
[75.85358429 165.00424194]
[67.81841278 177.78923035]
[55.08140564 185.78483582]
[40.19735718 187.45053101]
[26.12439537 182.50915527]
[15.58061218 193.17820740]
[5.03682947 203.84725952]
[-5.50695324 214.51631165]
[-16.05073547 225.18536377]
[-26.59451866 235.85441589]
[-37.13830185 246.52346802]
[-47.68208313 257.19250488]
[-32.75348663 255.73066711]
[-19.03031921 261.78662109]
[-10.04830837 273.80010986]
[-8.12163830 288.67584229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[13 33]
[14 32]
[15 31]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[38 128]
[39 127]
[40 126]
[41 125]
[42 124]
[43 123]
[44 122]
[45 121]
[51 115]
[52 114]
[53 113]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[64 89]
[65 88]
[66 87]
[67 86]
[69 85]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
