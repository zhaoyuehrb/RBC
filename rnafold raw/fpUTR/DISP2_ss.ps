%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCGCUGCCGCCGCCACCGCCGCCGCCGCCGCCGCCGCCGCGGCUUCAGCACCAGCGCCCGGACAGCGGUGCCGCCCACGGGC\
) } def
/len { sequence length } bind def

/coor [
[154.03150940 290.13668823]
[155.03884888 283.22589111]
[143.67822266 273.59338379]
[146.66149902 258.05596924]
[141.92449951 243.82359314]
[137.18750000 229.59120178]
[132.45051575 215.35881042]
[127.71351624 201.12641907]
[122.97652435 186.89402771]
[118.23953247 172.66163635]
[113.50253296 158.42926025]
[108.51226044 144.28369141]
[103.27030182 130.22943115]
[98.02833557 116.17519379]
[84.83655548 105.96609497]
[87.53488159 89.50498962]
[81.79463196 75.64679718]
[76.05438232 61.78860474]
[60.90364456 59.69041061]
[48.91649628 50.35204315]
[43.25069046 36.36043930]
[45.33504486 21.51080894]
[54.51060104 9.77732277]
[48.77035141 -4.08086967]
[36.34091949 -13.86962986]
[38.61873627 -28.58903313]
[24.29302025 -34.70553207]
[18.66900444 -48.84148407]
[24.58843803 -62.46117020]
[18.84818649 -76.31936646]
[13.10793495 -90.17755890]
[7.36768341 -104.03575134]
[1.62743175 -117.89394379]
[-10.80199909 -127.68270111]
[-8.52418137 -142.40209961]
[-14.26443291 -156.26029968]
[-27.59705925 -165.80876160]
[-25.72509766 -182.10072327]
[-10.57426071 -188.37640381]
[2.26956868 -178.17991638]
[-0.40624014 -162.00054932]
[5.33401155 -148.14236450]
[17.35286140 -139.34483337]
[15.48562431 -123.63419342]
[21.22587585 -109.77600098]
[26.96612740 -95.91780853]
[32.70637894 -82.05961609]
[38.44663239 -68.20142365]
[52.26287460 -62.75652313]
[58.28172302 -48.78411484]
[52.47692871 -34.32928467]
[64.49578094 -25.53175545]
[62.62854385 -9.82112122]
[68.36879730 4.03707170]
[83.15372467 5.84579992]
[95.12785339 14.87221336]
[101.01508331 28.77210236]
[99.14211273 43.85151672]
[89.91257477 56.04835510]
[95.65282440 69.90654755]
[101.39307404 83.76473999]
[111.97856903 88.95291138]
[116.29473114 99.92288971]
[112.08258057 110.93322754]
[117.32454681 124.98747253]
[122.56650543 139.04171753]
[128.63064575 146.18211365]
[127.73492432 153.69226074]
[132.47192383 167.92465210]
[137.20890808 182.15704346]
[141.94590759 196.38941956]
[146.68289185 210.62181091]
[151.41989136 224.85420227]
[156.15689087 239.08659363]
[160.89387512 253.31898499]
[172.59332275 263.96951294]
[169.27124023 278.48892212]
[174.51319885 292.54315186]
[180.25344849 306.40133667]
[185.99369812 320.25955200]
[199.32632446 329.80801392]
[197.45436096 346.09994507]
[182.30352783 352.37564087]
[169.45970154 342.17916870]
[172.13551331 325.99978638]
[166.39526367 312.14160156]
[160.65499878 298.28341675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 66]
[13 65]
[14 64]
[16 61]
[17 60]
[18 59]
[23 54]
[24 53]
[26 51]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[35 42]
[36 41]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
