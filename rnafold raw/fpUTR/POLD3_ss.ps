%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUGCGUCGCCUCCGUUGCCGGGGAAACGACCCGGGACCUGGGAGGGAGCAAAGACGUUUCCCGCCGGCGGGAGCUGUGGCUGUGAUUGAGAGAGGGGUUAGAGGCGGGUCCCAGCGCUGCCGCACC\
) } def
/len { sequence length } bind def

/coor [
[46.69458771 324.84747314]
[44.52725220 310.00485229]
[42.35991669 295.16226196]
[40.19258118 280.31967163]
[38.02524567 265.47708130]
[35.85790634 250.63447571]
[33.69057083 235.79188538]
[20.01207542 229.63569641]
[7.46502256 237.85588074]
[-5.08202934 246.07606506]
[-17.62908173 254.29624939]
[-25.76667595 272.66577148]
[-45.03678894 273.16534424]
[-57.17204285 281.98211670]
[-69.30729675 290.79888916]
[-81.44255066 299.61569214]
[-93.57781219 308.43246460]
[-99.75000763 323.62576294]
[-116.02881622 325.60879517]
[-125.66799164 312.34161377]
[-118.75157928 297.47232056]
[-102.39458466 296.29721069]
[-90.25933075 287.48043823]
[-78.12407684 278.66363525]
[-65.98882294 269.84686279]
[-53.85356903 261.03009033]
[-53.14372253 250.71250916]
[-46.69380188 242.34759521]
[-36.47746658 238.89590454]
[-25.84926987 241.74920654]
[-13.30221748 233.52902222]
[-0.75516510 225.30882263]
[11.79188728 217.08863831]
[13.22880077 197.47639465]
[26.11631012 184.74971008]
[42.64931107 183.77572632]
[49.93906403 170.66619873]
[57.22881317 157.55668640]
[64.51856232 144.44715881]
[71.80831909 131.33764648]
[79.09806824 118.22812653]
[86.38781738 105.11860657]
[86.75027466 90.12298584]
[80.10240173 76.67658234]
[65.40212250 71.52491760]
[58.85178375 57.79365158]
[63.85369492 43.81093216]
[57.20582199 30.36452866]
[50.55794907 16.91812325]
[43.91007614 3.47171974]
[37.26220322 -9.97468472]
[30.61433029 -23.42108917]
[15.56522465 -28.24808884]
[8.41150188 -42.34063339]
[13.39734173 -57.33786392]
[27.56473160 -64.34219360]
[42.50841141 -59.19807053]
[49.36256027 -44.95742035]
[44.06073380 -30.06896210]
[50.70860672 -16.62255669]
[57.35647964 -3.17615342]
[64.00435638 10.27025032]
[70.65222931 23.71665382]
[77.30010223 37.16305923]
[91.44743347 41.67843246]
[98.38086700 55.22029877]
[93.54880524 70.02870178]
[100.19667816 83.47511292]
[115.19229889 83.11265564]
[121.18276978 69.36077118]
[127.17323303 55.60888672]
[124.79109192 39.38367844]
[137.81761169 29.42165375]
[152.85221863 35.97089386]
[154.42860413 52.29409790]
[140.92512512 61.59935760]
[134.93464661 75.35124207]
[128.94418335 89.10311890]
[133.49789429 95.06245422]
[142.60533142 106.98111725]
[147.15905762 112.94045258]
[159.69645691 103.29036713]
[173.40812683 109.10752869]
[188.25073242 106.94019318]
[200.78813171 97.29010773]
[214.49980164 103.10726929]
[229.34240723 100.93993378]
[244.18499756 98.77259827]
[259.02758789 96.60526276]
[273.87017822 94.43791962]
[280.96182251 80.63616943]
[294.82669067 73.66873932]
[310.13345337 76.21475220]
[320.99639893 87.29521179]
[323.23843384 102.64945984]
[315.99749756 116.37346649]
[302.05786133 123.19007874]
[286.77960205 120.47817230]
[276.03753662 109.28051758]
[261.19491577 111.44785309]
[246.35232544 113.61518860]
[231.50973511 115.78252411]
[216.66714478 117.94985962]
[205.19137573 127.44492340]
[190.41806030 121.78279114]
[175.57546997 123.95012665]
[164.09970093 133.44517517]
[149.32638550 127.78305054]
[99.49733734 112.40835571]
[92.20758820 125.51787567]
[84.91783905 138.62739563]
[77.62808228 151.73690796]
[70.33833313 164.84643555]
[63.04858398 177.95596313]
[55.75883102 191.06547546]
[63.94180298 212.53054810]
[48.53316879 233.62454224]
[50.70050430 248.46714783]
[52.86783981 263.30975342]
[55.03517532 278.15234375]
[57.20251083 292.99493408]
[59.36984634 307.83752441]
[61.53718185 322.68011475]
[74.93708038 330.74093628]
[79.97168732 345.54589844]
[74.26380920 360.10455322]
[60.50854492 367.54272461]
[45.20069885 364.34838867]
[35.56817245 352.02975464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[8 33]
[9 32]
[10 31]
[11 30]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[41 110]
[42 109]
[43 68]
[44 67]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[69 78]
[70 77]
[71 76]
[81 108]
[83 106]
[84 105]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
