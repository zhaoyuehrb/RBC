%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUACUAGUCAAGCCGCGGAGUGGGCGGGGCCCCCUGCCCAGACUUGAAGCCACACAGGCAGGUCGGGCAGGCGGGUCGCAGGUUGUAAAUCC\
) } def
/len { sequence length } bind def

/coor [
[97.09635162 216.64018250]
[96.74627686 200.83978271]
[107.73153687 189.47756958]
[107.24075317 174.48561096]
[106.74996948 159.49363708]
[106.25917816 144.50166321]
[105.76839447 129.50970459]
[99.97081757 124.75174713]
[99.76062012 139.75027466]
[87.90335846 148.93751526]
[73.32756042 145.39544678]
[67.00885010 131.79125977]
[73.70521545 118.36893463]
[88.37565613 115.23585510]
[82.57807922 110.47790527]
[67.77842712 112.92133331]
[52.97877884 115.36476898]
[46.14546204 129.29621887]
[32.41278076 136.52070618]
[17.06123543 134.26025391]
[5.99380541 123.38405609]
[3.46614408 108.07423401]
[10.45018959 94.21772766]
[24.26043320 87.14264679]
[39.58655548 89.56950378]
[50.53534698 100.56511688]
[65.33499908 98.12168121]
[80.13465118 95.67825317]
[92.32734680 86.94108582]
[92.00901794 71.12308502]
[104.83229828 63.54597092]
[111.90325165 50.31715012]
[118.97419739 37.08833313]
[126.04515076 23.85951233]
[133.11610413 10.63069344]
[139.96966553 -2.71204782]
[146.60398865 -16.16513824]
[153.23832703 -29.61823082]
[159.87265015 -43.07131958]
[166.50698853 -56.52441406]
[173.14131165 -69.97750092]
[179.77565002 -83.43059540]
[180.80691528 -92.70793152]
[186.85346985 -97.20995331]
[193.92442322 -110.43877411]
[200.99537659 -123.66759491]
[208.06632996 -136.89640808]
[215.13728333 -150.12522888]
[214.92915344 -155.73933411]
[216.82659912 -160.33114624]
[220.03358459 -163.24214172]
[223.60559082 -164.25376892]
[231.93914795 -176.72581482]
[240.27270508 -189.19784546]
[238.56568909 -205.14982605]
[250.07400513 -216.32740784]
[265.96945190 -214.15611267]
[274.05838013 -200.30155945]
[268.13568115 -185.39178467]
[252.74475098 -180.86430359]
[244.41119385 -168.39225769]
[236.07763672 -155.92021179]
[228.36610413 -143.05427551]
[221.29515076 -129.82545471]
[214.22419739 -116.59664154]
[207.15324402 -103.36782074]
[200.08229065 -90.13900757]
[193.22872925 -76.79626465]
[186.59440613 -63.34317398]
[179.96006775 -49.89008331]
[173.32574463 -36.43699265]
[166.69140625 -22.98390007]
[160.05708313 -9.53080845]
[153.42274475 3.92228246]
[153.28527832 11.45953751]
[146.34492493 17.70164490]
[139.27397156 30.93046379]
[132.20301819 44.15928268]
[125.13207245 57.38809967]
[118.06111908 70.61692047]
[118.88521576 85.48870850]
[105.55616760 94.01203918]
[111.02120972 93.58161163]
[116.87499237 96.01461029]
[121.88031006 101.39148712]
[124.82031250 109.31244659]
[124.67177582 118.92639160]
[120.76036072 129.01892090]
[121.25115204 144.01087952]
[121.74193573 159.00285339]
[122.23271942 173.99482727]
[122.72351074 188.98678589]
[134.42837524 199.60618591]
[135.11244202 215.39567566]
[124.36988831 226.98760986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[15 28]
[16 27]
[17 26]
[29 82]
[31 80]
[32 79]
[33 78]
[34 77]
[35 76]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
