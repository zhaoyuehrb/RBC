%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCCUCAUAUUGCCAGACAAGAGCUCAGACCUGAGGAGAGUGACUAGCUUCUCUGUGUCCCAGGUGGCCACCUUCCACUGUGGAAGCUC\
) } def
/len { sequence length } bind def

/coor [
[204.21076965 250.57385254]
[194.83015442 238.86898804]
[180.83323669 233.77629089]
[178.24055481 218.16896057]
[168.85993958 206.46408081]
[159.47932434 194.75921631]
[150.09870911 183.05433655]
[140.71809387 171.34947205]
[129.53262329 174.02404785]
[118.12081909 172.22448730]
[108.21233368 166.18339539]
[101.32424927 156.77925110]
[98.52885437 145.40888977]
[100.28684998 133.78002930]
[106.37196350 123.65485382]
[98.22363281 111.06101227]
[89.86376953 98.60659027]
[81.29474640 86.29513550]
[72.72572327 73.98368835]
[64.15670013 61.67223358]
[53.10227966 60.32241821]
[44.86157608 53.16605377]
[42.09118271 42.83904648]
[45.49920273 32.93925858]
[37.78087234 20.07740021]
[30.06254196 7.21554327]
[22.34420967 -5.64631367]
[14.62587929 -18.50817108]
[-2.14604974 -19.71323204]
[-14.81922913 -30.51243019]
[-18.59456444 -46.55972672]
[-12.19476795 -61.57313919]
[-20.34309387 -74.16697693]
[-28.70296097 -86.62139893]
[-37.27198410 -98.93285370]
[-52.33705902 -105.41170502]
[-53.98977280 -121.72735596]
[-40.52995300 -131.09567261]
[-25.80390739 -123.87931824]
[-24.96053123 -107.50187683]
[-16.39150810 -95.19042206]
[-9.85232162 -91.42198181]
[-7.74925423 -82.31530762]
[0.39907146 -69.72146606]
[13.85412598 -70.22096252]
[25.87081528 -63.90968323]
[33.21343613 -52.36464310]
[33.84422684 -38.58797073]
[27.48773575 -26.22650146]
[35.20606613 -13.36464500]
[42.92440033 -0.50278765]
[50.64273071 12.35906982]
[58.36106110 25.22092628]
[75.88695526 33.09235764]
[76.46814728 53.10321045]
[85.03717041 65.41466522]
[93.60619354 77.72611237]
[102.17521667 90.03756714]
[109.14201355 94.44011688]
[110.81747437 102.91268921]
[118.96579742 115.50652313]
[137.87850952 115.56472015]
[152.96649170 126.72463226]
[158.47241211 144.51271057]
[152.42295837 161.96885681]
[161.80358887 173.67372131]
[171.18420410 185.37860107]
[180.56481934 197.08346558]
[189.94543457 208.78834534]
[204.61331177 214.71824646]
[206.53501892 229.48835754]
[215.91563416 241.19323730]
[234.65716553 242.40370178]
[246.52716064 256.55038452]
[244.53274536 274.59368896]
[254.68215942 285.63858032]
[264.83157349 296.68347168]
[274.98098755 307.72836304]
[285.13037109 318.77325439]
[295.27978516 329.81811523]
[310.44906616 337.38977051]
[307.37258911 354.06225586]
[290.50003052 355.72140503]
[284.23489380 339.96752930]
[274.08551025 328.92263794]
[263.93609619 317.87777710]
[253.78668213 306.83288574]
[243.63726807 295.78799438]
[233.48786926 284.74310303]
[222.01356506 286.75253296]
[210.91166687 282.84317017]
[203.06820679 273.90542603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[15 61]
[16 60]
[17 58]
[18 57]
[19 56]
[20 55]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[32 44]
[33 43]
[34 41]
[35 40]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
