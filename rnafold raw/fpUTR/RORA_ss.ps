%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCACAGGGCCUCUGAGCAUUAUCCCCCAUACUCCUCCCCAUCAUUCUCCACCCAGCUGUUGGAGCCAUCUGUCUGAUCACCUUGGACUCCAUAGUACACUGGGGCAAAGCACAGCCCCAGUUUCUGGAGGCAGAUGGGUAACCAGGAAAAGGC\
) } def
/len { sequence length } bind def

/coor [
[-33.41613770 431.79611206]
[-39.21930313 437.80166626]
[-46.04058456 442.60671997]
[-53.63582230 446.04269409]
[-61.73378372 447.99002075]
[-70.04586792 448.38214111]
[-78.27637482 447.20794678]
[-86.13304901 444.51196289]
[-93.33743286 440.39270020]
[-103.89083862 451.05221558]
[-114.44424438 461.71176147]
[-112.82942963 470.02871704]
[-114.64643860 478.20724487]
[-119.52005005 484.90536499]
[-126.58000946 489.05496216]
[-134.61563110 490.03173828]
[-142.28321838 487.74816895]
[-153.65512085 497.52978516]
[-154.58985901 513.30639648]
[-166.46188354 523.73858643]
[-182.22773743 522.63708496]
[-192.53382874 510.65545654]
[-191.26571655 494.90213013]
[-179.17576599 484.72329712]
[-163.43672180 486.15786743]
[-152.06481934 476.37628174]
[-147.09147644 455.33203125]
[-125.10377502 451.15835571]
[-114.55036926 440.49880981]
[-103.99695587 429.83929443]
[-112.05486298 408.84036255]
[-108.68690491 386.53652954]
[-94.70774078 368.75125122]
[-73.71101379 360.16021729]
[-51.14569092 363.06198120]
[-43.17428970 350.35543823]
[-35.20288849 337.64886475]
[-27.23148346 324.94229126]
[-28.70254898 303.36846924]
[-8.93190193 292.88037109]
[-2.00197482 279.57714844]
[4.92795181 266.27389526]
[11.85787868 252.97067261]
[18.78780556 239.66743469]
[25.71773148 226.36419678]
[21.01177216 212.27911377]
[27.85019302 198.68902588]
[42.65583038 193.84848022]
[49.58575821 180.54524231]
[56.51568222 167.24200439]
[63.44561005 153.93876648]
[70.37553406 140.63552856]
[77.30546570 127.33229065]
[67.77740479 114.95996857]
[64.47529602 99.69712830]
[68.03716278 84.49280548]
[77.77478027 72.28473663]
[91.80668640 65.43172455]
[91.50656128 50.43472290]
[91.20642853 35.43772888]
[90.90629578 20.44073105]
[90.60616302 5.44373322]
[87.29048157 -3.12914729]
[90.45308685 -9.85564804]
[90.45308685 -24.85564804]
[90.45308685 -39.85564804]
[90.45308685 -54.85564804]
[90.30300903 -69.85489655]
[90.00287628 -84.85189819]
[89.70274353 -99.84889221]
[76.87718201 -111.70587158]
[76.57292938 -128.83276367]
[88.49108124 -140.66271973]
[87.89093781 -155.65071106]
[76.10891724 -166.18443298]
[75.30966949 -181.96850586]
[85.96737671 -193.63848877]
[101.75901031 -194.27081299]
[113.31567383 -183.49032593]
[113.78100586 -167.69288635]
[102.87892914 -156.25085449]
[103.47907257 -141.26286316]
[114.09946442 -133.90936279]
[118.59608459 -121.59183502]
[115.10903168 -108.74926758]
[104.69974518 -100.14902496]
[104.99987793 -85.15202332]
[105.30001068 -70.15502930]
[108.59657288 -63.49315643]
[105.45308685 -54.85564804]
[105.45308685 -39.85564804]
[105.45308685 -24.85564804]
[105.45308685 -9.85564804]
[105.60315704 5.14360094]
[105.90328979 20.14059830]
[106.20342255 35.13759613]
[106.50355530 50.13459396]
[106.80368805 65.13159180]
[117.37793732 69.01445770]
[126.20500183 76.01262665]
[132.39741516 85.42248535]
[147.06753540 82.29402161]
[161.73767090 79.16556549]
[176.40780640 76.03710175]
[191.07792664 72.90863800]
[205.74806213 69.78018188]
[220.41819763 66.65171814]
[235.08833313 63.52325821]
[241.26693726 49.28934097]
[254.64909363 41.43457031]
[270.08908081 42.97927094]
[281.64993286 53.32946777]
[284.88623047 68.50530243]
[278.55358887 82.67135620]
[265.08700562 90.38049316]
[249.66467285 88.66838837]
[238.21678162 78.19338989]
[223.54666138 81.32184601]
[208.87652588 84.45030975]
[194.20639038 87.57877350]
[179.53627014 90.70722961]
[164.86613464 93.83569336]
[150.19599915 96.96415710]
[135.52587891 100.09261322]
[131.80888367 115.82060242]
[121.50917053 128.27458191]
[106.75823212 134.87724304]
[90.60870361 134.26222229]
[83.67877197 147.56546021]
[76.74884796 160.86869812]
[69.81892395 174.17193604]
[62.88899612 187.47517395]
[55.95906830 200.77841187]
[60.47780609 215.68540955]
[53.26036453 229.07806396]
[39.02096939 233.29412842]
[32.09104156 246.59736633]
[25.16111565 259.90060425]
[18.23118973 273.20382690]
[11.30126190 286.50708008]
[4.37133551 299.81030273]
[8.37299824 307.27798462]
[9.05532742 315.62808228]
[6.38001394 323.46768188]
[0.86259019 329.51916504]
[-6.52497625 332.82812500]
[-14.52492142 332.91369629]
[-22.49632454 345.62026978]
[-30.46772575 358.32684326]
[-38.43912888 371.03338623]
[-32.75194931 377.23037720]
[-28.33316231 384.37844849]
[-25.33749962 392.22198486]
[-23.86885643 400.48107910]
[-23.97669220 408.86154175]
[-25.65436363 417.06546021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 30]
[10 29]
[11 28]
[17 26]
[18 25]
[35 150]
[36 149]
[37 148]
[38 147]
[40 141]
[41 140]
[42 139]
[43 138]
[44 137]
[45 136]
[48 133]
[49 132]
[50 131]
[51 130]
[52 129]
[53 128]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 88]
[69 87]
[70 86]
[73 82]
[74 81]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
