%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUCCCGGCCCGCACGGGGCGGGCUGGGGGCGGGGCCUGGCUCGGACCACGCGGGGCGGGACCUGGAGCUGACGCGGCCGCCCCGCCCCUGGGACCAUAACCGGCCGCCGCCGCCACCGCGGACCGAGCGCGGAGUUCUGGAGUCUCGGACCCGAAGCCGCCACAGGGCGCCCCGCCUCCCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[51.50474167 400.65145874]
[51.12014771 415.64654541]
[41.29121780 426.97756958]
[26.50085068 429.47656250]
[13.49480820 422.00375366]
[8.20504665 407.96755981]
[1.98402393 421.61669922]
[-4.23699808 435.26583862]
[-10.45802021 448.91497803]
[-3.56365347 462.95068359]
[-7.35442972 478.12185669]
[-20.04046059 487.26507568]
[-35.63179016 486.06323242]
[-46.76667023 475.08377075]
[-48.18754959 459.51086426]
[-39.22353363 446.69757080]
[-24.10715485 442.69393921]
[-17.88613319 429.04479980]
[-11.66511059 415.39566040]
[-5.44408846 401.74655151]
[-0.01869775 387.76208496]
[4.59308624 373.48861694]
[9.20487022 359.21517944]
[13.81665421 344.94171143]
[18.42843819 330.66827393]
[23.04022217 316.39480591]
[19.59071922 301.90515137]
[31.19614601 291.15225220]
[35.80792999 276.87881470]
[40.41971207 262.60534668]
[45.03149796 248.33190918]
[49.64328003 234.05845642]
[54.25506592 219.78500366]
[58.86684799 205.51155090]
[63.47863388 191.23809814]
[68.09041595 176.96464539]
[72.70220184 162.69119263]
[77.31398773 148.41773987]
[81.57224274 134.03486633]
[85.47438812 119.55130768]
[89.37652588 105.06775665]
[89.12981415 90.06978607]
[84.75341797 75.72241211]
[80.37702179 61.37503815]
[76.00061798 47.02766418]
[71.62422180 32.68029022]
[67.24781799 18.33291626]
[55.84863281 14.88642216]
[47.61850739 6.44594622]
[44.52441025 -4.80522203]
[47.22525406 -16.03384972]
[54.93558502 -24.47012329]
[51.03344345 -38.95367813]
[47.13130188 -53.43722916]
[43.22916031 -67.92078400]
[39.32701874 -82.40433502]
[35.30589676 -96.85530853]
[31.16606522 -111.27272034]
[27.02623367 -125.69013214]
[22.88640404 -140.10754395]
[18.74657440 -154.52496338]
[14.35737228 -140.18150330]
[4.95484352 -128.49421692]
[-8.11587524 -121.13512421]
[-22.98487282 -119.15700531]
[-37.52497101 -122.84286499]
[-49.65604401 -131.66539001]
[-57.64260864 -144.36244202]
[-60.34209824 -159.11752319]
[-57.36832047 -173.81979370]
[-49.14670181 -186.36590576]
[-36.85344315 -194.96101379]
[-22.24723244 -198.37547302]
[-7.41764832 -196.12081909]
[5.51376820 -188.51960754]
[14.69783592 -176.65768433]
[13.46561623 -191.60699463]
[12.23339653 -206.55628967]
[11.00117779 -221.50559998]
[9.76895809 -236.45489502]
[8.53673840 -251.40420532]
[7.30451870 -266.35351562]
[-8.61356163 -284.86691284]
[1.77959085 -306.17791748]
[-1.16188633 -320.88668823]
[-4.10336351 -335.59542847]
[-17.39054489 -344.15267944]
[-20.65341759 -359.61648560]
[-11.95617485 -372.81243896]
[3.54126096 -375.91165161]
[16.64453697 -367.07537842]
[19.57971382 -351.54602051]
[10.60540009 -338.53692627]
[13.54687691 -323.82815552]
[16.48835373 -309.11938477]
[22.28898048 -307.43917847]
[27.41976547 -304.17807007]
[31.45681000 -299.57858276]
[34.05911636 -293.99496460]
[34.99732590 -287.86566162]
[34.17375946 -281.67916870]
[31.63205910 -275.93490601]
[27.55547523 -271.10296631]
[22.25382042 -267.58572388]
[23.48604012 -252.63641357]
[24.71825981 -237.68711853]
[25.95047951 -222.73780823]
[27.18269920 -207.78851318]
[28.41491890 -192.83920288]
[29.64713860 -177.88990784]
[34.21301270 -173.35173035]
[35.82120514 -166.28198242]
[33.16398621 -158.66479492]
[37.30381775 -144.24737549]
[41.44364929 -129.82995605]
[45.58347702 -115.41255188]
[49.72330856 -100.99513245]
[54.59949875 -95.42427063]
[53.81056976 -86.30647278]
[57.71271133 -71.82292175]
[61.61485291 -57.33937073]
[65.51699829 -42.85581970]
[69.41913605 -28.37226486]
[85.80027008 -20.22832489]
[91.13452911 -2.39625549]
[81.59519196 13.95651722]
[85.97159576 28.30389023]
[90.34799194 42.65126419]
[94.72438812 56.99863815]
[99.10079193 71.34600830]
[103.47718811 85.69338226]
[114.87927246 95.43979645]
[129.73291016 97.53010559]
[144.58654785 99.62041473]
[159.44018555 101.71073151]
[170.20378113 94.58364105]
[182.54161072 96.64143372]
[189.91983032 106.24073792]
[204.73709106 108.57507324]
[219.55433655 110.90940094]
[228.53588867 109.15202332]
[234.59527588 113.40590668]
[249.37213135 115.98362732]
[258.38137817 114.37421417]
[264.36996460 118.72718811]
[279.10241699 121.54759979]
[293.83486938 124.36801147]
[310.52838135 121.40770721]
[317.99423218 136.62933350]
[305.43420410 148.01715088]
[291.01446533 139.10046387]
[276.28201294 136.28005981]
[261.54956055 133.45964050]
[246.79440308 130.76048279]
[232.01754761 128.18275452]
[217.22000122 125.72665405]
[202.40275574 123.39231873]
[187.58549500 121.05799103]
[171.58059692 128.23820496]
[157.34988403 116.56436920]
[142.49624634 114.47406006]
[127.64260101 112.38374329]
[112.78896332 110.29343414]
[109.47835541 110.57308197]
[106.45216370 110.09692383]
[103.86007690 108.96989441]
[99.95793915 123.45345306]
[96.05579376 137.93699646]
[97.41206360 143.01281738]
[96.74170685 147.63487244]
[94.56044769 151.10415649]
[91.58744049 153.02952576]
[86.97565460 167.30297852]
[82.36386871 181.57643127]
[77.75208282 195.84988403]
[73.14030457 210.12333679]
[68.52851868 224.39678955]
[63.91673279 238.67024231]
[59.30495071 252.94369507]
[54.69316483 267.21713257]
[50.08138275 281.49060059]
[45.46959686 295.76403809]
[48.58923721 311.27462769]
[37.31367493 321.00659180]
[32.70188904 335.28005981]
[28.09010696 349.55349731]
[23.47832298 363.82696533]
[18.86653900 378.10040283]
[14.25475502 392.37387085]
[27.62677002 385.57760620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[21 189]
[22 188]
[23 187]
[24 186]
[25 185]
[26 184]
[28 182]
[29 181]
[30 180]
[31 179]
[32 178]
[33 177]
[34 176]
[35 175]
[36 174]
[37 173]
[38 172]
[39 168]
[40 167]
[41 166]
[42 131]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[76 110]
[77 109]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[84 95]
[85 94]
[86 93]
[132 163]
[133 162]
[134 161]
[135 160]
[138 158]
[139 157]
[140 156]
[142 155]
[143 154]
[145 153]
[146 152]
[147 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
