%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGAGGCCGCCGGGCCCUCCUCCAGAGUCCCGCCAGUCCCCCAGAGUCCAGGCCAGUCCCCGCCGUCACCCGGUGCGAGCCCGCGAGAGGCCUAGUGCAGCUGGCAGCCCCGCCCCGGCACCCGCCUGCUCUUCUCGCGGGUCCGGACCGCGAGCGCGGGGGCCGACGGGUCGCCGCUGCGCCGGGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[258.57174683 90.15264893]
[243.66799927 91.84935760]
[228.76426697 93.54605865]
[213.87477112 95.36338806]
[199.00047302 97.30120850]
[192.76493835 101.28853607]
[183.86984253 99.14796448]
[168.96612549 100.84466553]
[154.06239319 102.54137421]
[139.17288208 104.35870361]
[124.29858398 106.29652405]
[109.42427826 108.23434448]
[96.04817200 115.02255249]
[85.70231628 125.88363647]
[75.35646057 136.74472046]
[65.01060486 147.60581970]
[64.54084778 160.50476074]
[55.68820190 169.33892822]
[43.58980942 169.75318909]
[33.06943130 180.44532776]
[22.54905891 191.13746643]
[21.24061012 207.12707520]
[7.84381437 215.95347595]
[-7.36445236 210.84580994]
[-12.71770954 195.72224426]
[-4.10939693 182.18428040]
[11.85692501 180.61708069]
[22.37730026 169.92495728]
[32.89767456 159.23281860]
[36.37273026 142.03752136]
[54.14951324 137.25996399]
[64.49536896 126.39887238]
[74.84122467 115.53778076]
[85.18708038 104.67669678]
[83.44214630 97.38250732]
[69.15572357 101.95394135]
[57.69521332 111.63158417]
[43.44440079 106.95030975]
[39.95512009 92.36178589]
[50.54551315 81.73900604]
[65.14370728 85.18286896]
[79.95227814 82.79412079]
[78.20734406 75.49993134]
[64.06636810 70.49665070]
[48.47571945 73.18776703]
[39.05811310 61.64835358]
[29.90950012 61.73475647]
[24.72978401 56.44786453]
[10.67168331 51.21624756]
[-2.23335457 59.62850952]
[-17.43955803 58.83809280]
[-29.12633133 49.35741425]
[-32.94384384 34.98505783]
[-47.00194550 29.75344086]
[-61.06004333 24.52182388]
[-73.91141510 33.21791077]
[-89.41866302 32.66569901]
[-101.61892700 23.07752800]
[-105.82096863 8.14024258]
[-100.40901184 -6.40246439]
[-87.46406555 -14.95862579]
[-71.96372223 -14.23822308]
[-59.86817932 -4.51826572]
[-55.82843018 10.46372414]
[-41.77032852 15.69534016]
[-27.71222687 20.92695618]
[-15.42757702 12.54689884]
[-0.38607424 13.01294422]
[11.63738823 22.35584259]
[15.90329933 37.15814590]
[29.96140099 42.38976288]
[44.06139755 47.50738144]
[58.64059448 44.45839691]
[69.06965637 56.35567474]
[83.21063232 61.35896301]
[105.63000488 74.54635620]
[107.48645782 93.36004639]
[122.36076355 91.42221832]
[137.23506165 89.48439789]
[145.35414124 85.26717377]
[152.36567688 87.63764191]
[167.26940918 85.94094086]
[182.17314148 84.24423218]
[197.06265259 82.42690277]
[211.93695068 80.48908234]
[220.05603027 76.27185822]
[227.06756592 78.64233398]
[241.97129822 76.94562531]
[256.87503052 75.24891663]
[273.27279663 61.46730804]
[291.84951782 70.44280243]
[306.65328979 68.02433777]
[321.45703125 65.60587311]
[336.26077271 63.18740845]
[351.06451416 60.76894379]
[363.43664551 50.90785980]
[377.24490356 56.49190140]
[392.04864502 54.07343674]
[406.85241699 51.65497208]
[421.65615845 49.23650742]
[436.45989990 46.81804657]
[451.26367188 44.39958191]
[466.06741333 41.98111725]
[474.04568481 37.50319290]
[481.13027954 39.64537430]
[495.97125244 37.46694565]
[510.81222534 35.28851700]
[518.86193848 30.94037056]
[525.91094971 33.19699478]
[538.59594727 23.74171448]
[552.21612549 29.76996422]
[567.09039307 27.83214188]
[581.96472168 25.89431953]
[596.83898926 23.95649910]
[602.97412109 14.95318031]
[612.85131836 10.90347195]
[623.10968018 12.92392826]
[630.40026855 20.10840607]
[645.32952881 18.65325737]
[660.25872803 17.19811058]
[675.18798828 15.74296284]
[688.17248535 6.70340347]
[701.59033203 13.16953945]
[716.51959229 11.71439171]
[731.44885254 10.25924397]
[746.37811279 8.80409622]
[761.30731201 7.34894800]
[763.81921387 1.51335382]
[767.83978271 -3.35357857]
[773.02960205 -6.87638044]
[778.96008301 -8.79156399]
[785.14923096 -8.96723270]
[791.10070801 -7.41192627]
[796.34326172 -4.27213097]
[800.46868896 0.18120888]
[803.16296387 5.57594538]
[818.16101074 5.81884146]
[833.15899658 6.06173754]
[848.15704346 6.30463362]
[863.15509033 6.54752970]
[878.15313721 6.79042530]
[893.15118408 7.03332138]
[903.25805664 -4.89916325]
[918.67913818 -7.49240875]
[932.13299561 0.47803631]
[937.26715088 15.24877167]
[931.65734863 29.84550667]
[917.95245361 37.37611008]
[902.62347412 34.28486252]
[892.90826416 22.03135490]
[877.91021729 21.78845787]
[862.91217041 21.54556274]
[847.91418457 21.30266762]
[832.91613770 21.05977058]
[817.91809082 20.81687546]
[802.92004395 20.57397842]
[783.82464600 34.62501526]
[762.76251221 22.27820015]
[747.83325195 23.73334694]
[732.90399170 25.18849564]
[717.97473145 26.64364243]
[703.04547119 28.09879112]
[691.12884521 37.03426743]
[676.64312744 30.67221451]
[661.71392822 32.12736130]
[646.78466797 33.58250809]
[631.85540771 35.03765869]
[617.00756836 47.41144562]
[598.77685547 38.83079910]
[583.90252686 40.76862335]
[569.02825928 42.70644379]
[554.15393066 44.64426422]
[542.53289795 53.96094131]
[527.84881592 48.07129669]
[512.99066162 50.12948990]
[498.14968872 52.30791855]
[483.30871582 54.48634720]
[468.48587036 56.78487015]
[453.68212891 59.20333099]
[438.87838745 61.62179565]
[424.07461548 64.04026031]
[409.27087402 66.45872498]
[394.46713257 68.87718964]
[379.66336060 71.29565430]
[368.35009766 80.98374939]
[353.48300171 75.57269287]
[338.67922974 77.99115753]
[323.87548828 80.40962219]
[309.07174683 82.82808685]
[294.26797485 85.24655151]
[290.31497192 93.22446442]
[283.01828003 98.56330872]
[273.94598389 99.95863342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[4 85]
[5 84]
[7 83]
[8 82]
[9 81]
[10 79]
[11 78]
[12 77]
[13 34]
[14 33]
[15 32]
[16 31]
[19 29]
[20 28]
[21 27]
[43 75]
[44 74]
[46 72]
[48 71]
[49 70]
[53 66]
[54 65]
[55 64]
[91 190]
[92 189]
[93 188]
[94 187]
[95 186]
[97 184]
[98 183]
[99 182]
[100 181]
[101 180]
[102 179]
[103 178]
[105 177]
[106 176]
[107 175]
[109 174]
[111 172]
[112 171]
[113 170]
[114 169]
[118 167]
[119 166]
[120 165]
[121 164]
[123 162]
[124 161]
[125 160]
[126 159]
[127 158]
[136 156]
[137 155]
[138 154]
[139 153]
[140 152]
[141 151]
[142 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
