%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCGCGCUGUUUCCGGAAGUCGCGGCCGGCGUCACCGCUGCGGCUGCCUCAGCUACUGCCGCAGUCGCCGCGGAAUUCGGCGAGUAGAACCGCUGAGGCGGGCGCGGGCCCGGGUGGGGCCAAGGUUCCGGCCACUCUGCAGA\
) } def
/len { sequence length } bind def

/coor [
[173.91285706 216.28395081]
[188.53184509 219.62995911]
[179.05471802 208.00308228]
[169.57759094 196.37622070]
[155.53901672 191.39949036]
[152.81732178 175.81414795]
[143.34019470 164.18728638]
[133.86306763 152.56040955]
[124.38594818 140.93354797]
[114.90882111 129.30667114]
[105.43169403 117.67980194]
[112.45292664 130.93507385]
[111.58244324 145.90980530]
[103.07261658 158.26225281]
[89.39076996 164.41099548]
[74.50376892 162.57328796]
[62.72790146 153.28195190]
[57.47742081 139.23088074]
[60.27463913 124.49400330]
[70.30854034 113.34407806]
[84.66748047 109.01393127]
[69.73679352 110.45426941]
[54.80610275 111.89461517]
[39.87541580 113.33496094]
[24.94473076 114.77530670]
[10.01404381 116.21565247]
[-4.91664267 117.65599823]
[-19.84733009 119.09634399]
[-34.77801514 120.53668976]
[-43.08820343 124.50019836]
[-50.04263687 121.84477997]
[-65.00069427 122.96573639]
[-76.51312256 134.13906860]
[-92.40776062 131.96191406]
[-100.49160004 118.10437775]
[-94.56340790 103.19679260]
[-79.17079163 98.67497253]
[-66.12164307 108.00767517]
[-51.16358566 106.88672638]
[-36.21836090 105.60600281]
[-21.28767395 104.16565704]
[-6.35698795 102.72531128]
[8.57369900 101.28496552]
[23.50438499 99.84461975]
[38.43507004 98.40427399]
[53.36575699 96.96392822]
[68.29644775 95.52358246]
[83.22713470 94.08324432]
[93.77691650 83.42012024]
[95.05763245 68.47489929]
[96.33835602 53.52967072]
[97.61907959 38.58444595]
[98.89979553 23.63922119]
[100.18051910 8.69399643]
[101.46124268 -6.25122881]
[102.74196625 -21.19645500]
[89.99761963 -35.13906097]
[91.39343262 -53.65861893]
[105.59001160 -65.13419342]
[106.23095703 -80.12049103]
[106.87190247 -95.10678864]
[107.51284790 -110.09309387]
[94.65116882 -102.37447357]
[80.52232361 -107.41191101]
[75.44493103 -121.52644348]
[83.12712097 -134.40991211]
[97.95841980 -136.65324402]
[109.10703278 -126.61846924]
[111.34266663 -141.45092773]
[113.57830048 -156.28338623]
[115.81393433 -171.11585999]
[118.04956818 -185.94831848]
[120.28520203 -200.78077698]
[109.80307007 -212.38504028]
[109.28402710 -228.01400757]
[118.97315979 -240.28816223]
[134.29554749 -243.41201782]
[148.01643372 -235.91058350]
[153.65722656 -221.32582092]
[148.55451965 -206.54420471]
[135.11766052 -198.54515076]
[132.88203430 -183.71267700]
[130.64639282 -168.88021851]
[128.41076660 -154.04776001]
[126.17513275 -139.21530151]
[123.93949890 -124.38283539]
[122.49915314 -109.45214844]
[121.85820770 -94.46584320]
[121.21726227 -79.47954559]
[120.57631683 -64.49324799]
[129.99107361 -57.90400314]
[135.07931519 -47.46630859]
[134.45817566 -35.75056076]
[128.16709900 -25.70543289]
[117.68718719 -19.91573334]
[116.40646362 -4.97050762]
[115.12574768 9.97471714]
[113.84502411 24.91994286]
[112.56430054 39.86516953]
[111.28358459 54.81039429]
[110.00286102 69.75561523]
[108.72213745 84.70084381]
[117.44152069 94.56230927]
[117.05855560 108.20268250]
[126.53568268 119.82954407]
[136.01281738 131.45642090]
[145.48994446 143.08328247]
[154.96707153 154.71015930]
[164.44419861 166.33702087]
[179.16062927 172.14538574]
[181.20445251 186.89909363]
[190.68157959 198.52595520]
[200.15870667 210.15283203]
[210.31124878 214.27888489]
[213.79429626 223.35816956]
[225.71894836 232.45776367]
[241.38352966 234.67852783]
[246.80764771 248.55036926]
[258.73229980 257.64996338]
[270.65695190 266.74957275]
[282.58160400 275.84915161]
[294.50625610 284.94876099]
[306.43090820 294.04837036]
[322.75576782 295.60763550]
[329.32073975 310.63540649]
[319.37237549 323.67233276]
[303.14465332 321.30718994]
[297.33129883 305.97302246]
[285.40664673 296.87341309]
[273.48202515 287.77380371]
[261.55737305 278.67422485]
[249.63270569 269.57461548]
[237.70805359 260.47500610]
[222.89640808 258.90512085]
[216.61935425 244.38241577]
[204.69470215 235.28282166]
[208.50767517 249.79010010]
[205.88343811 264.55877686]
[197.30612183 276.86444092]
[184.35795593 284.43707275]
[169.42749023 285.87979126]
[155.26896667 280.92642212]
[144.49418640 270.49069214]
[139.09077454 256.49774170]
[140.05549622 241.52879333]
[147.21040344 228.34518433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[31 39]
[32 38]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[59 90]
[60 89]
[61 88]
[62 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[115 136]
[116 135]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
