%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCCCGCGCCUCGUUCGCCGCCGCUGUCGCCGCCGCCGCCCGAGACUCGCGCAGAGCAGUU\
) } def
/len { sequence length } bind def

/coor [
[112.79615784 334.87463379]
[122.46676636 322.37442017]
[120.33204651 307.52709961]
[116.11196899 301.13024902]
[118.46649933 291.92431641]
[117.04065704 276.99221802]
[105.42739105 267.73654175]
[103.76867676 252.61360168]
[113.55562592 240.49530029]
[112.12978363 225.56321716]
[110.70394135 210.63113403]
[109.27810669 195.69906616]
[96.79383850 181.22303772]
[104.47591400 162.85311890]
[101.63714600 148.12417603]
[98.79837799 133.39524841]
[95.95960999 118.66632080]
[84.01926422 110.45812988]
[81.27710724 96.23044586]
[89.31146240 84.17244720]
[86.47269440 69.44351959]
[83.28421021 54.78631592]
[72.51149750 43.19928741]
[77.03012848 29.00663757]
[73.49374390 14.42946434]
[62.72103500 2.84243512]
[67.23966217 -11.35021305]
[63.70328140 -25.92738533]
[52.00113297 -37.41615295]
[56.36105728 -53.22510910]
[72.29794312 -57.09135437]
[83.41728210 -45.03762817]
[78.28045654 -29.46376991]
[81.81684113 -14.88659668]
[92.33660126 -4.34222412]
[88.07092285 10.89308071]
[91.60730743 25.47025490]
[102.12706757 36.01462555]
[97.86138916 51.24993134]
[102.67041016 57.21667862]
[101.20162201 66.60475159]
[104.04039001 81.33367920]
[115.98073578 89.54187012]
[118.72289276 103.76955414]
[110.68853760 115.82755280]
[113.52730560 130.55648804]
[116.36607361 145.28541565]
[119.20484924 160.01434326]
[128.91506958 165.84400940]
[133.52960205 175.94123840]
[131.65928650 186.65686035]
[124.21018219 194.27322388]
[125.63602448 209.20530701]
[127.06186676 224.13737488]
[128.48770142 239.06945801]
[140.39118958 249.11657715]
[141.62448120 264.28015137]
[131.97273254 275.56637573]
[133.39857483 290.49847412]
[135.17936707 305.39239502]
[137.31408691 320.23971558]
[150.11468506 329.50903320]
[152.52912903 345.12780762]
[143.12498474 357.82968140]
[127.48156738 360.07885742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[5 59]
[6 58]
[9 55]
[10 54]
[11 53]
[12 52]
[14 48]
[15 47]
[16 46]
[17 45]
[20 42]
[21 41]
[22 39]
[24 37]
[25 36]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
