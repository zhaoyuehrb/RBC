%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUGGGCUGCAGAGAGCUGGGCGGAGUGUGGAAUUCUUCUCGGGAGGCAGUGCUGGGUCCUUUCCACC\
) } def
/len { sequence length } bind def

/coor [
[93.08459473 120.05677795]
[82.77178192 112.38085938]
[68.28289795 116.26314545]
[53.79400635 120.14543152]
[39.39326096 124.34286499]
[25.08750534 128.85345459]
[14.25269794 140.38243103]
[-0.21216840 136.83041382]
[-14.51792240 141.34098816]
[-28.82367706 145.85157776]
[-43.12943268 150.36216736]
[-50.20380783 164.49470520]
[-65.22554016 169.40625000]
[-79.28249359 162.18284607]
[-84.03493500 147.11003113]
[-76.66332245 133.13023376]
[-61.54109955 128.53741455]
[-47.64001846 136.05641174]
[-33.33426285 131.54582214]
[-19.02850914 127.03524017]
[-4.72275543 122.52465057]
[5.08880854 111.31829834]
[20.57691765 114.54769897]
[34.88267136 110.03710938]
[40.48785019 104.86035156]
[49.91172028 105.65653992]
[64.40061188 101.77425385]
[78.88949585 97.89196777]
[86.66809082 83.49674988]
[102.37683105 78.91806793]
[116.67177582 86.87944031]
[130.97752380 82.36885071]
[145.28327942 77.85826874]
[159.58903503 73.34767914]
[173.89479065 68.83708954]
[188.20054626 64.32650757]
[190.57119751 50.36882401]
[198.74206543 38.88896561]
[211.03654480 32.14224625]
[224.97518921 31.42295837]
[237.77571106 36.81646729]
[246.90830994 47.19374466]
[261.39718628 43.31145859]
[275.88607788 39.42917633]
[290.37496948 35.54689026]
[304.86386108 31.66460419]
[316.19125366 20.61919785]
[330.48739624 24.79879570]
[339.72189331 11.67995453]
[355.74417114 10.86416340]
[366.26336670 22.97722816]
[363.21002197 38.72703934]
[348.92639160 46.03169632]
[334.36968994 39.28768158]
[324.07864380 50.05540085]
[308.74615479 46.15349197]
[294.25726318 50.03577805]
[279.76837158 53.91806030]
[265.27947998 57.80034637]
[250.79060364 61.68263245]
[247.07597351 77.25875092]
[236.01480103 88.96535492]
[220.49632263 93.60962677]
[204.64205933 89.86135864]
[192.71113586 78.63226318]
[178.40538025 83.14284515]
[164.09962463 87.65343475]
[149.79386902 92.16402435]
[135.48811340 96.67460632]
[121.18236542 101.18519592]
[116.60889435 113.20006561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[11 18]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
