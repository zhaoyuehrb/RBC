%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAUCGCUGCGGGCUCACAAAGCGGCCAGACGCUCGGCGGCGGCGUGUGGCAGGAGCGCAGGGGCGCGAGCCGGCGAUCAGCCUUCCCGGCGACCGUGCCGCGGGAGCUCGAGCAACUCGGACUAGGGGACCCGGGCCGGCCCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[230.34301758 471.06185913]
[220.18240356 460.68688965]
[212.59304810 448.29745483]
[207.96160889 434.51828003]
[206.52549744 420.04513550]
[208.36065674 405.60958862]
[213.37765503 391.94201660]
[221.32592773 379.73477173]
[231.80636597 369.60696411]
[224.12808228 356.72116089]
[216.44981384 343.83535767]
[210.28515625 339.67291260]
[208.74917603 330.60293579]
[201.33883667 317.56118774]
[193.92851257 304.51947021]
[186.51818848 291.47772217]
[179.10786438 278.43597412]
[171.69754028 265.39422607]
[164.28721619 252.35247803]
[153.91392517 252.38598633]
[144.40260315 248.04660034]
[137.52305603 240.06726074]
[134.58638000 229.86482239]
[136.19546509 219.28875732]
[142.12266541 210.28582764]
[135.53472900 196.80996704]
[128.94677734 183.33410645]
[122.35882568 169.85823059]
[115.77087402 156.38237000]
[112.50693512 154.89779663]
[109.82112122 151.72416687]
[108.51513672 147.16090393]
[109.22148132 141.86106873]
[103.48123169 128.00288391]
[97.74098206 114.14469147]
[86.76640320 105.48153687]
[88.40082550 91.59556580]
[82.66057587 77.73736572]
[76.92032623 63.87917709]
[64.49089050 54.09041595]
[66.76870728 39.37101364]
[61.02845764 25.51282120]
[55.28820801 11.65462780]
[38.75580978 0.19303510]
[41.94972992 -18.84016228]
[35.64169312 -32.44929886]
[29.33365631 -46.05844116]
[14.76741314 -51.57770538]
[8.56403351 -65.46916962]
[13.91557693 -79.32183838]
[7.60753965 -92.93098450]
[-5.21579361 -102.19773102]
[-3.54820085 -116.99869537]
[-9.85623837 -130.60783386]
[-22.67957115 -139.87458801]
[-21.01197815 -154.67553711]
[-27.32001686 -168.28468323]
[-41.88626099 -173.80395508]
[-48.08963776 -187.69540405]
[-42.73809433 -201.54808044]
[-49.04613495 -215.15722656]
[-55.35417175 -228.76635742]
[-70.27729034 -233.96983337]
[-77.07478333 -248.23760986]
[-71.71382904 -263.10488892]
[-57.37497711 -269.75115967]
[-42.56521988 -264.23330688]
[-36.07091904 -249.82499695]
[-41.74503326 -235.07440186]
[-35.43699265 -221.46525574]
[-29.12895775 -207.85612488]
[-15.09950352 -202.98683167]
[-8.50838947 -189.27508545]
[-13.71087742 -174.59271240]
[-7.40284014 -160.98358154]
[4.96930027 -152.69024658]
[3.75290060 -136.91586304]
[10.06093788 -123.30673218]
[22.43307877 -115.01339722]
[21.21667862 -99.23902130]
[27.52471542 -85.62988281]
[41.55416870 -80.76058197]
[48.14528275 -67.04884338]
[42.94279480 -52.36647797]
[49.25083160 -38.75733948]
[55.55887222 -25.14819908]
[65.50197601 -22.47820091]
[72.45402527 -14.58837414]
[73.91142273 -3.95166254]
[69.14640045 5.91437626]
[74.88665009 19.77256966]
[80.62689972 33.63076401]
[92.64575195 42.42829132]
[90.77851868 58.13892365]
[96.51876831 71.99711609]
[102.25901794 85.85530853]
[113.23359680 94.51846313]
[111.59917450 108.40443420]
[117.33942413 122.26263428]
[123.07967377 136.12081909]
[129.24673462 149.79441833]
[135.83468628 163.27029419]
[142.42263794 176.74615479]
[149.01058960 190.22201538]
[155.59854126 203.69787598]
[174.88262939 209.12260437]
[183.91311646 226.66458130]
[177.32894897 244.94215393]
[184.73928833 257.98388672]
[192.14961243 271.02563477]
[199.55993652 284.06738281]
[206.97026062 297.10913086]
[214.38058472 310.15087891]
[221.79090881 323.19262695]
[229.33561707 336.15707397]
[237.01388550 349.04290771]
[244.69216919 361.92871094]
[259.56390381 357.34838867]
[275.09008789 356.44558716]
[290.37536621 359.26821899]
[304.53924561 365.64944458]
[316.76687622 375.21762085]
[326.35589600 387.41784668]
[332.75674438 401.54418945]
[335.60418701 416.78054810]
[334.73812866 432.24777222]
[330.21264648 447.05435181]
[322.29263306 460.34790039]
[311.43826294 471.36416626]
[319.38119507 484.08853149]
[327.32415771 496.81289673]
[335.26708984 509.53726196]
[349.13818359 517.14672852]
[349.31417847 532.04028320]
[357.25711060 544.76464844]
[372.70925903 548.08227539]
[381.21939087 561.39965820]
[377.73855591 576.81591797]
[364.33190918 585.18475342]
[348.95336914 581.54113770]
[340.72674561 568.04675293]
[344.53274536 552.70758057]
[336.58978271 539.98321533]
[323.28683472 533.28393555]
[322.54272461 517.48022461]
[314.59979248 504.75582886]
[306.65682983 492.03146362]
[298.71389771 479.30709839]
[285.01580811 484.01324463]
[270.60498047 485.54037476]
[256.20980835 483.80786133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 117]
[10 116]
[11 115]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[33 100]
[34 99]
[35 98]
[37 96]
[38 95]
[39 94]
[41 92]
[42 91]
[43 90]
[45 86]
[46 85]
[47 84]
[50 81]
[51 80]
[53 78]
[54 77]
[56 75]
[57 74]
[60 71]
[61 70]
[62 69]
[129 148]
[130 147]
[131 146]
[132 145]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
