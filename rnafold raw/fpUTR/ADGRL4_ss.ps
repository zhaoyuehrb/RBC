%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAAGAGGCCGGAAAGUGUCCGGAGGAAGCCGGCGCGUCACGGAGGACGGAUCCGGGACCCUGCCGCGCCCGCCCAGCGGCGCCCGGUCCCGGGUCCACAGCCGCACUCACUCCGCCGCGCUCUCCGCCACCGCCACCACUGCGGCCACCGCCA\
) } def
/len { sequence length } bind def

/coor [
[141.61306763 519.99523926]
[143.14790344 505.07394409]
[149.11170959 491.31048584]
[158.94902039 479.98672485]
[171.74359131 472.15737915]
[186.30377197 468.55166626]
[201.27342224 469.50540161]
[215.25828552 474.92974854]
[226.95634460 484.32006836]
[221.95159912 470.17959595]
[216.94685364 456.03915405]
[211.72117615 450.75329590]
[211.98652649 441.56539917]
[207.26571655 427.32763672]
[202.54490662 413.08987427]
[191.19525146 403.44442749]
[194.19616699 387.91043091]
[189.47535706 373.67266846]
[184.75454712 359.43490601]
[180.03373718 345.19714355]
[175.31294250 330.95938110]
[161.59400940 320.05426025]
[165.39012146 302.06210327]
[160.38537598 287.92163086]
[155.38063049 273.78118896]
[150.37588501 259.64071655]
[145.37113953 245.50025940]
[131.85981750 239.33749390]
[126.58286285 225.06834412]
[133.13856506 210.93821716]
[128.13381958 196.79776001]
[114.19944763 186.16932678]
[117.63478851 168.10481262]
[112.34811401 154.06733704]
[107.06143951 140.02984619]
[101.77475739 125.99235535]
[85.58287811 124.32286835]
[72.31162262 112.78217316]
[67.75759888 94.44070435]
[53.08747101 91.31224060]
[38.41734314 88.18377686]
[25.29504204 96.99177551]
[9.80432510 93.85917664]
[1.13555622 80.64448547]
[4.43176317 65.18775177]
[17.73736382 56.65918350]
[33.15838242 60.11862183]
[41.54580307 73.51364899]
[56.21593475 76.64211273]
[70.88606262 79.77056885]
[81.85750580 69.54181671]
[79.76330566 54.68872452]
[77.66910553 39.83563232]
[75.57490540 24.98254204]
[73.48069763 10.12945080]
[71.38649750 -4.72364092]
[69.29229736 -19.57673264]
[67.19809723 -34.42982483]
[65.10389709 -49.28291321]
[63.00969315 -64.13600922]
[60.91549301 -78.98909760]
[58.82128906 -93.84218597]
[45.68080139 -109.08056641]
[53.54863358 -126.70795441]
[50.86184311 -141.46536255]
[48.17504883 -156.22277832]
[45.48825836 -170.98017883]
[42.80146790 -185.73759460]
[40.11467743 -200.49499512]
[25.81339073 -206.28091431]
[16.92915154 -218.89335632]
[16.29689026 -234.30775452]
[24.11835861 -247.60543823]
[37.89775467 -254.54315186]
[53.23812103 -252.90708923]
[65.24440765 -243.21932983]
[70.08544159 -228.57119751]
[66.21648407 -213.63685608]
[54.87208939 -203.18179321]
[57.55887985 -188.42437744]
[60.24567032 -173.66697693]
[62.93246078 -158.90956116]
[65.61925507 -144.15214539]
[68.30604553 -129.39474487]
[77.25247192 -124.31782532]
[82.00009155 -114.94477844]
[80.74889374 -104.29086304]
[73.67438507 -95.93638611]
[75.76858521 -81.08329773]
[77.86278534 -66.23020935]
[79.95698547 -51.37711716]
[82.05118561 -36.52402496]
[84.14538574 -21.67093277]
[86.23959351 -6.81784201]
[88.33379364 8.03524876]
[90.42799377 22.88834000]
[92.52219391 37.74143219]
[94.61639404 52.59452438]
[96.71059418 67.44761658]
[116.14612579 73.47605896]
[127.32781982 89.19727325]
[126.70697021 107.42237854]
[115.81224823 120.70568085]
[121.09892273 134.74316406]
[126.38560486 148.78065491]
[131.67227173 162.81814575]
[143.10719299 168.86378479]
[147.20431519 180.70832825]
[142.27427673 191.79301453]
[147.27902222 205.93347168]
[161.26385498 212.79367065]
[166.13793945 227.20539856]
[159.51159668 240.49551392]
[164.51634216 254.63597107]
[169.52108765 268.77642822]
[174.52583313 282.91690063]
[179.53057861 297.05734253]
[190.84223938 303.33056641]
[194.70153809 315.25473022]
[189.55070496 326.23855591]
[194.27151489 340.47631836]
[198.99232483 354.71408081]
[203.71313477 368.95184326]
[208.43394470 383.18960571]
[220.12126160 393.85342407]
[216.78266907 408.36904907]
[221.50347900 422.60681152]
[226.22428894 436.84457397]
[231.08731079 451.03439331]
[236.09205627 465.17486572]
[241.09680176 479.31530762]
[248.59312439 485.77713013]
[249.60574341 494.51806641]
[259.04165649 506.17840576]
[268.47756958 517.83874512]
[277.91351318 529.49908447]
[293.55078125 529.59625244]
[305.43362427 539.76153564]
[307.95129395 555.19512939]
[299.91500854 568.60974121]
[285.11932373 573.67144775]
[270.55023193 567.99029541]
[263.08685303 554.24865723]
[266.25317383 538.93499756]
[256.81726074 527.27465820]
[247.38133240 515.61431885]
[237.94540405 503.95397949]
[239.83233643 518.83483887]
[237.14312744 533.59179688]
[230.12828064 546.85046387]
[219.44111633 557.37585449]
[206.07704163 564.18774414]
[191.28077698 566.65161133]
[176.43043518 564.53796387]
[162.90916443 558.04376221]
[151.97631836 547.77374268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 131]
[10 130]
[11 129]
[13 128]
[14 127]
[15 126]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[23 117]
[24 116]
[25 115]
[26 114]
[27 113]
[30 110]
[31 109]
[33 106]
[34 105]
[35 104]
[36 103]
[39 50]
[40 49]
[41 48]
[51 99]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[133 147]
[134 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
