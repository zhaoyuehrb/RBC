%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGUCCUCCACCAUGUGAAUGCCAACAUGGCCAGGUCAUUAGAGCUGAGGGAAAACUAGUGCCCAAAGAUAUGAAAAGAGUGUGGAUCUUCUGGAGAAGUGCUGUUGUUCAACAGGUACAAAAUUGGAA\
) } def
/len { sequence length } bind def

/coor [
[67.47194672 221.48777771]
[71.90351868 207.15734863]
[80.64334869 194.96655273]
[92.79262543 186.16911316]
[107.10191345 181.66975403]
[122.09963989 181.93118286]
[136.24284363 186.92622375]
[127.19488525 174.96234131]
[118.14692688 162.99845886]
[109.09896088 151.03459167]
[100.05100250 139.07070923]
[85.32621765 136.21054077]
[72.45739746 143.91725159]
[59.58857727 151.62397766]
[46.71976089 159.33068848]
[33.85094452 167.03741455]
[20.98212433 174.74412537]
[19.74125671 190.21151733]
[9.62033272 201.97358704]
[-5.48894787 205.50761414]
[-19.77675629 199.45466614]
[-27.74913979 186.14224243]
[-26.34055328 170.68922424]
[-16.09262848 159.03762817]
[-0.94589943 155.66772461]
[13.27540588 161.87532043]
[26.14422417 154.16859436]
[39.01304245 146.46186829]
[51.88185883 138.75515747]
[64.75067902 131.04843140]
[77.61949158 123.34171295]
[72.11840057 110.40343475]
[72.93441772 97.49856567]
[58.95883179 92.05036163]
[44.98324585 86.60214996]
[29.31524849 88.79862213]
[20.26747131 76.96701050]
[6.29188585 71.51879883]
[-9.82777977 74.53350067]
[-20.29150391 61.90644455]
[-14.33510303 46.62726593]
[1.91398644 44.41387177]
[11.74009609 57.54321289]
[25.71568108 62.99142456]
[40.38404846 60.40525818]
[50.43145370 72.62656403]
[64.40704346 78.07477570]
[78.38262939 83.52297974]
[78.25448608 75.48239899]
[80.55447388 66.93126678]
[74.93907928 53.02201462]
[69.32368469 39.11275864]
[54.10385513 37.05064392]
[41.96397781 27.64219666]
[36.16961670 13.41823864]
[38.27942657 -1.79505372]
[47.72588348 -13.90538216]
[61.96792984 -19.65513039]
[77.17453766 -17.49764252]
[89.25519562 -8.01327515]
[94.96027374 6.24672747]
[92.75513458 21.44649506]
[83.23294067 33.49736404]
[88.84833527 47.40662003]
[94.46372986 61.31587601]
[101.72720337 63.18453217]
[103.46768951 48.28585052]
[105.20816803 33.38716888]
[101.63513947 18.81893539]
[109.91488647 6.31110907]
[124.72138214 3.90949082]
[136.53016663 13.15894794]
[137.74511719 28.10966301]
[127.58541107 39.14411163]
[121.91978455 53.03298187]
[116.25416565 66.92185211]
[123.51763916 68.79050446]
[135.14837646 59.31812286]
[146.77909851 49.84574127]
[158.40983582 40.37335587]
[158.45808411 24.73584747]
[168.58607483 12.82124424]
[184.01168823 10.25526047]
[197.45143127 18.24947357]
[202.55944824 33.02925873]
[196.92391968 47.61605835]
[183.20573425 55.12242508]
[167.88221741 52.00408936]
[156.25149536 61.47647095]
[144.62075806 70.94885254]
[132.99002075 80.42124176]
[133.47387695 111.36317444]
[112.01488495 130.02275085]
[121.06284332 141.98661804]
[130.11080933 153.95050049]
[139.15876770 165.91438293]
[148.20672607 177.87826538]
[154.70736694 179.85169983]
[159.11941528 184.17564392]
[160.81933594 189.47428894]
[173.49964905 197.48738098]
[186.17996216 205.50047302]
[198.86027527 213.51356506]
[211.63577271 221.37402344]
[224.50459290 229.08074951]
[237.37339783 236.78747559]
[250.24221802 244.49418640]
[266.63900757 244.21520996]
[274.84585571 258.41308594]
[266.42028809 272.48226929]
[250.02978516 271.94958496]
[242.53550720 257.36300659]
[229.66668701 249.65628052]
[216.79786682 241.94956970]
[203.92904663 234.24284363]
[196.50054932 233.49784851]
[190.84719849 226.19387817]
[178.16688538 218.18078613]
[165.48655701 210.16769409]
[152.80624390 202.15460205]
[158.96958923 215.82987976]
[160.48727417 230.75291443]
[157.20318604 245.38899231]
[149.45510864 258.23294067]
[138.03981018 267.96389771]
[124.13129425 273.58108521]
[109.15988922 274.50686646]
[94.66527557 270.64602661]
[82.13808441 262.39559937]
[72.86662292 250.60406494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[33 48]
[34 47]
[35 46]
[37 44]
[38 43]
[50 65]
[51 64]
[52 63]
[77 91]
[78 90]
[79 89]
[80 88]
[100 120]
[101 119]
[102 118]
[103 117]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
