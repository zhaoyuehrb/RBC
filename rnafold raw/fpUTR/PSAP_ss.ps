%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCGCUGAGUCAGGGCGCUGUUGAGCUCGGGCAGGCCCGGAUGGGGCGGGGUUAGCGCCUGCGCUCUGGACGGCUUUGGGGCAGGGCAGAUUUAUAUCUGCGGGGGAUCAGCUGACGCUCCGCAUUGCAGACUGCGGAGUCAGACGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[-75.10941315 663.55523682]
[-79.19050598 674.53961182]
[-87.99346161 682.09051514]
[-99.23552704 684.40344238]
[-104.58738708 698.41619873]
[-109.93924713 712.42895508]
[-104.72813416 727.60211182]
[-113.46309662 741.05871582]
[-129.44342041 742.47601318]
[-140.41036987 730.76678467]
[-137.95103455 714.91339111]
[-123.95201111 707.07714844]
[-118.60015106 693.06433105]
[-113.24829102 679.05157471]
[-121.73014832 662.87713623]
[-115.64817810 645.31945801]
[-98.39865875 637.59753418]
[-93.61907196 623.37939453]
[-88.83948517 609.16125488]
[-84.05989838 594.94311523]
[-79.28031158 580.72497559]
[-74.50072479 566.50683594]
[-69.72113800 552.28869629]
[-64.94155121 538.07055664]
[-60.16196442 523.85241699]
[-66.99848938 510.66915894]
[-62.35385132 496.18185425]
[-48.47971725 489.10046387]
[-43.70013046 474.88232422]
[-38.92054367 460.66418457]
[-34.14095688 446.44604492]
[-39.24666977 435.43923950]
[-35.33597183 423.52993774]
[-23.99545288 417.30517578]
[-18.92868996 403.18682861]
[-13.86192608 389.06848145]
[-8.79516315 374.95013428]
[-19.33152199 364.39309692]
[-24.25964737 350.25015259]
[-22.55149460 335.30883789]
[-14.49264908 322.53872681]
[-1.63624024 314.50134277]
[13.49613476 312.83624268]
[18.56289864 298.71786499]
[23.62966156 284.59951782]
[28.69642448 270.48117065]
[25.71296883 255.88842773]
[37.65697861 245.51290894]
[42.72374344 231.39456177]
[42.01886368 223.99302673]
[48.03890991 217.04318237]
[53.39076614 203.03041077]
[50.70367432 188.38020325]
[62.85551071 178.24888611]
[68.20736694 164.23612976]
[73.55922699 150.22335815]
[78.91108704 136.21060181]
[84.26294708 122.19783020]
[89.61480713 108.18506622]
[78.07307434 100.05485535]
[75.84819031 81.15994263]
[74.02853394 66.27072144]
[72.20886993 51.38150406]
[70.38921356 36.49228287]
[68.56955719 21.60306549]
[59.21529388 8.84342861]
[65.35150146 -4.72846365]
[63.53184128 -19.61768341]
[51.36718369 -29.34696198]
[49.73389435 -44.47266769]
[59.08424377 -56.00985336]
[57.26458359 -70.89907074]
[46.97576141 -83.66904449]
[53.14203644 -98.86473846]
[69.42006683 -100.85412598]
[79.06441498 -87.59069824]
[72.15380096 -72.71872711]
[73.97346497 -57.82950974]
[85.82709503 -48.88373184]
[87.88459015 -33.80986786]
[78.42105865 -21.43733978]
[80.24072266 -6.54812145]
[89.46482849 5.14653873]
[83.45877838 19.78340721]
[85.27843475 34.67262650]
[87.09809113 49.56184387]
[88.91774750 64.45106506]
[90.73740387 79.34028625]
[104.95555115 84.11987305]
[115.39969635 73.35326385]
[125.84384918 62.58666229]
[136.28799438 51.82006073]
[146.73214722 41.05345535]
[157.17630005 30.28685188]
[160.65252686 14.26038074]
[176.35040283 9.51602077]
[188.12127686 20.93436432]
[183.85629272 36.76919556]
[167.94290161 40.73100281]
[157.49874878 51.49760437]
[147.05459595 62.26420975]
[136.61044312 73.03081512]
[126.16629791 83.79741669]
[115.72215271 94.56401825]
[129.98420715 89.91710663]
[144.58848572 93.33980560]
[155.30068970 103.83975220]
[159.01493835 118.37262726]
[154.65434265 132.72480774]
[143.48318481 142.73507690]
[128.74041748 145.50109863]
[114.70050049 140.22087097]
[105.43412018 128.42536926]
[103.62757111 113.53692627]
[98.27571106 127.54969025]
[92.92385101 141.56245422]
[87.57199097 155.57522583]
[82.22013092 169.58798218]
[76.86827850 183.60075378]
[79.17256927 199.25325012]
[67.40353394 208.38227844]
[62.05167389 222.39503479]
[56.84209442 236.46131897]
[51.77533340 250.57968140]
[54.39638138 266.18225098]
[42.81477737 275.54794312]
[37.74801636 289.66629028]
[32.68125153 303.78463745]
[27.61448860 317.90298462]
[38.23492813 328.81021118]
[43.04688263 343.18841553]
[41.14672852 358.16870117]
[32.96448135 370.78662109]
[20.16798592 378.56860352]
[5.32319069 380.01687622]
[0.25642714 394.13525391]
[-4.81033659 408.25360107]
[-9.87709999 422.37194824]
[-6.15908575 440.37905884]
[-19.92281342 451.22561646]
[-24.70240021 465.44375610]
[-29.48198700 479.66189575]
[-34.26157379 493.88003540]
[-27.48233795 507.90429688]
[-32.53206253 522.25543213]
[-45.94382095 528.63195801]
[-50.72340775 542.85009766]
[-55.50299454 557.06823730]
[-60.28258133 571.28637695]
[-65.06217194 585.50451660]
[-69.84175873 599.72265625]
[-74.62134552 613.94079590]
[-79.40093231 628.15893555]
[-84.18051910 642.37713623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[17 154]
[18 153]
[19 152]
[20 151]
[21 150]
[22 149]
[23 148]
[24 147]
[25 146]
[28 143]
[29 142]
[30 141]
[31 140]
[34 138]
[35 137]
[36 136]
[37 135]
[43 129]
[44 128]
[45 127]
[46 126]
[48 124]
[49 123]
[51 122]
[52 121]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 114]
[61 88]
[62 87]
[63 86]
[64 85]
[65 84]
[67 82]
[68 81]
[71 78]
[72 77]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
