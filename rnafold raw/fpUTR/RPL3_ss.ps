%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAUUUGGCUUUAUAUAGCGGACCCGUAAGGCCGACCGGCCUCUACCGGCGGGAUUUGAUGGCGUG\
) } def
/len { sequence length } bind def

/coor [
[111.07255554 149.45553589]
[105.48536682 163.37614441]
[93.44663239 172.32426453]
[78.50634003 173.66128540]
[65.07007599 166.99293518]
[57.09993362 154.28558350]
[56.94614410 139.28636169]
[64.65309906 126.41915894]
[52.25555801 136.24827576]
[38.46176910 130.62860107]
[23.65182495 133.00883484]
[8.84188080 135.38908386]
[-0.21425033 148.34138489]
[-15.79090691 151.01408386]
[-28.64673424 141.82151794]
[-31.15460014 126.21746826]
[-21.82662964 113.45954895]
[-6.19694376 111.11679840]
[6.46164227 120.57913208]
[21.27158737 118.19889832]
[36.08153152 115.81865692]
[47.41976929 106.15979767]
[62.27286530 111.60921478]
[76.28877258 106.26558685]
[88.92433167 98.18211365]
[101.37261200 89.81310272]
[113.62715912 81.16289520]
[125.88170624 72.51268768]
[138.13626099 63.86248398]
[136.04341125 46.70940018]
[142.70570374 30.85904312]
[156.28710938 20.45750046]
[173.15415955 18.17915344]
[188.84782410 24.53949547]
[200.26498413 14.81076527]
[211.68215942 5.08203363]
[216.38565063 -3.14756370]
[223.84756470 -4.81525278]
[235.69569397 -14.01425457]
[247.54383850 -23.21325493]
[259.39196777 -32.41225815]
[261.11672974 -48.12215042]
[273.49697876 -57.94583893]
[289.18774414 -56.05509567]
[298.88000488 -43.57166672]
[296.82348633 -27.90175438]
[284.23828125 -18.34203339]
[268.59097290 -20.56411934]
[256.74282837 -11.36511707]
[244.89469910 -2.16611624]
[233.04655457 7.03288507]
[221.41088867 16.49920464]
[209.99371338 26.22793579]
[198.57655334 35.95666504]
[202.24676514 48.42266464]
[200.80685425 61.38555527]
[194.44419861 72.82535553]
[184.11613464 80.94513702]
[171.40612793 84.45326233]
[158.28096008 82.76873016]
[146.78645325 76.11703491]
[134.53190613 84.76723480]
[122.27736664 93.41744232]
[110.02281189 102.06764984]
[105.59640503 109.15361786]
[97.00781250 110.81767273]
[84.37225342 118.90114594]
[98.69036865 123.37232971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 23]
[10 21]
[11 20]
[12 19]
[24 67]
[25 66]
[26 64]
[27 63]
[28 62]
[29 61]
[34 54]
[35 53]
[36 52]
[38 51]
[39 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
