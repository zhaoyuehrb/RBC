%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUUGAAGGGGCGCAGCGAUACCGGUGCGCGGCGCUGGCGUCGGGCGCGUGACGUCUUUCCUGCGCGCCACCUAGCGUCUCUAUCGCGCCAGUUCCUCAGCCUCAGUGCUAUGAAGGUGACAGCGUGAGGUGACCCAUCUGGCCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[117.98918915 202.43424988]
[105.82621002 211.55183411]
[91.09869385 215.31597900]
[76.05248260 213.15264893]
[62.98200989 205.39176941]
[53.88043594 193.21681213]
[50.13567734 178.48435974]
[52.31878662 163.44099426]
[60.09685516 150.38075256]
[72.28378296 141.29519653]
[87.02114868 137.56982422]
[89.15587616 122.72250366]
[76.21678925 115.13434601]
[64.30098724 124.24552155]
[52.38517761 133.35670471]
[40.46937180 142.46788025]
[28.55356598 151.57905579]
[22.29061508 166.10784912]
[7.48050737 167.69213867]
[-4.43529892 176.80331421]
[-10.23375225 192.14312744]
[-26.45914268 194.52404785]
[-36.42018127 181.49678040]
[-29.86980247 166.46266174]
[-13.54647636 164.88751221]
[-1.63067019 155.77633667]
[3.77998233 141.89923096]
[19.44238853 139.66325378]
[31.35819435 130.55206299]
[43.27400208 121.44089508]
[55.18980789 112.32971191]
[67.10561371 103.21853638]
[67.87027740 88.23803711]
[56.94413376 77.96091461]
[46.01798630 67.68379211]
[35.09183884 57.40666199]
[24.16569328 47.12953568]
[13.23954582 36.85241318]
[2.31339908 26.57528496]
[-8.61274815 16.29816055]
[-17.06196022 12.66785240]
[-19.65424156 5.69821262]
[-30.36847687 -4.79965210]
[-36.75905228 -6.84203339]
[-40.54920578 -11.17808533]
[-41.29462433 -15.95099735]
[-51.57174683 -26.87714386]
[-61.84887314 -37.80329132]
[-72.12599945 -48.72943878]
[-82.40312958 -59.65558624]
[-92.68025208 -70.58173370]
[-102.95737457 -81.50788116]
[-113.45523834 -92.22211456]
[-124.16947937 -102.71997833]
[-139.96839905 -102.30818176]
[-151.37342834 -113.24896240]
[-151.61817932 -129.05136108]
[-140.55741882 -140.34007263]
[-124.75332642 -140.41773987]
[-113.58217621 -129.23825073]
[-113.67161560 -113.43421173]
[-102.95737457 -102.93634796]
[-98.20066071 -102.09372711]
[-93.94282532 -98.21591187]
[-92.03122711 -91.78500366]
[-81.75410461 -80.85885620]
[-71.47698212 -69.93270874]
[-61.19985199 -59.00656509]
[-50.92272568 -48.08041763]
[-40.64560318 -37.15427017]
[-30.36847687 -26.22812271]
[-19.87061119 -15.51388741]
[-9.15637589 -5.01602268]
[1.66437781 5.37201309]
[12.59052467 15.64913845]
[23.51667213 25.92626381]
[34.44281769 36.20338821]
[45.36896515 46.48051453]
[56.29511261 56.75764084]
[67.22126007 67.03476715]
[78.14740753 77.31188965]
[89.44129944 72.90724945]
[100.62388611 73.35279083]
[109.84597015 77.85905457]
[115.84749603 85.01783752]
[118.12690735 93.12908936]
[116.95330811 100.55478668]
[131.90339661 101.77742767]
[146.28831482 95.19071960]
[158.34257507 103.93965912]
[173.29266357 105.16230011]
[188.24275208 106.38494110]
[203.19284058 107.60758209]
[218.14292908 108.83022308]
[224.51298523 95.09531403]
[235.17782593 84.38862610]
[248.83660889 77.98876953]
[263.83258057 76.65068817]
[278.35415649 80.51664734]
[290.65359497 89.10140228]
[299.25750732 101.35300446]
[303.14324951 115.78166962]
[318.09335327 117.00430298]
[333.04342651 118.22694397]
[347.99353027 119.44958496]
[362.94360352 120.67222595]
[377.89370728 121.89485931]
[386.76303101 119.46515656]
[393.13525391 123.29797363]
[408.05728149 124.82532501]
[422.97933960 126.35266876]
[437.90136719 127.88001251]
[446.30392456 115.08721924]
[459.69473267 107.67476654]
[474.99673462 107.34599304]
[488.69357300 114.17643738]
[497.63784790 126.59651947]
[499.77423096 141.75219727]
[494.61178589 156.16079712]
[483.33682251 166.51133728]
[468.54025269 170.42533875]
[453.62216187 167.00338745]
[442.01068115 157.03182983]
[436.37402344 142.80204773]
[421.45196533 141.27470398]
[406.52993774 139.74736023]
[391.60791016 138.22001648]
[376.67105103 136.84495544]
[361.72097778 135.62231445]
[346.77087402 134.39967346]
[331.82080078 133.17703247]
[316.87069702 131.95439148]
[301.92062378 130.73175049]
[295.74218750 144.33735657]
[285.26202393 155.02822876]
[271.73117065 161.50054932]
[256.77444458 162.95573425]
[242.19512939 159.19894409]
[229.75765991 150.66490173]
[220.97410583 138.36769104]
[216.92028809 123.78031158]
[201.97019958 122.55767059]
[187.02011108 121.33502960]
[172.07002258 120.11238861]
[157.11993408 118.88974762]
[143.80435181 125.56391907]
[130.68075562 116.72751617]
[115.73066711 115.50487518]
[104.00319672 124.85722351]
[101.86846924 139.70454407]
[114.95931244 147.43101501]
[124.09288788 159.58198547]
[127.87639618 174.30455017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 150]
[12 149]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[19 26]
[20 25]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[42 73]
[43 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 62]
[54 61]
[87 148]
[88 147]
[90 145]
[91 144]
[92 143]
[93 142]
[94 141]
[102 133]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[109 127]
[110 126]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
