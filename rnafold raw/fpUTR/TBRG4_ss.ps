%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUUUCCGCCGGCGCUCCGAGUGACGUAGGGAAGCGCGCCGCGCACCUCAUGGUUCCGGGGACAGUUAGGGCGGCGGAUGGAGGUCAGCGGUGGUGCUCGCUGCGGUUUGGAAUCACUUGCUAGGAGUCUUGUCUCUCUGCCACCCAGGACAUC\
) } def
/len { sequence length } bind def

/coor [
[191.47596741 99.66720581]
[184.58082581 96.48690796]
[179.19178772 91.04084015]
[164.55833435 94.33657074]
[149.92486572 97.63230133]
[135.29141235 100.92803192]
[120.65795135 104.22375488]
[106.02449036 107.51948547]
[91.94639587 112.69706726]
[78.66455841 119.66791534]
[65.45358276 126.77214813]
[52.31480408 134.00903320]
[39.17602921 141.24592590]
[26.03725624 148.48281860]
[12.89848042 155.71971130]
[-0.24029404 162.95660400]
[-13.15449905 170.58702087]
[-25.83234978 178.60400391]
[-38.51020050 186.62100220]
[-37.21505737 201.87161255]
[-43.16625977 215.97273254]
[-54.99627304 225.68403625]
[-69.98664093 228.77394104]
[-84.69268799 224.53237915]
[-95.73507690 213.93406677]
[-100.57633972 199.41439819]
[-98.10399628 184.30989075]
[-88.88616943 172.09146118]
[-75.04104614 165.56678772]
[-59.75014114 166.23521423]
[-46.52718735 173.94314575]
[-33.84933853 165.92616272]
[-21.17148590 157.90916443]
[-20.05066299 154.50894165]
[-17.19414902 151.49838257]
[-12.81092167 149.70249939]
[-7.47718525 149.81782532]
[5.66158962 142.58093262]
[18.80036545 135.34403992]
[31.93914032 128.10714722]
[45.07791519 120.87026215]
[58.21669006 113.63336945]
[62.58332443 107.61704254]
[71.69371033 106.38607788]
[84.97554779 99.41522980]
[84.82451630 84.41598511]
[71.40499878 77.71401215]
[57.98547745 71.01203156]
[41.65782928 72.54174805]
[32.39121628 59.01171112]
[39.71832657 44.34046936]
[56.10166550 43.62053299]
[64.68745422 57.59251404]
[78.10697174 64.29449463]
[91.52648926 70.99646759]
[97.01966095 75.61462402]
[100.77565002 81.09823608]
[102.68338013 87.00565338]
[102.72875977 92.88602448]
[117.36222076 89.59029388]
[131.99568176 86.29457092]
[146.62913513 82.99884033]
[161.26260376 79.70310974]
[175.89605713 76.40737915]
[191.42810059 59.19880295]
[212.75447083 66.20758820]
[226.98252869 61.45756912]
[241.21057129 56.70755005]
[253.06237793 42.64913559]
[270.09829712 46.75852966]
[284.22778320 41.72296143]
[298.35729980 36.68739319]
[308.75915527 24.76632881]
[323.34527588 27.78200912]
[337.47479248 22.74644279]
[351.60430908 17.71087456]
[365.73382568 12.67530727]
[379.86334229 7.63973951]
[393.99282837 2.60417175]
[404.39471436 -9.31689262]
[418.98083496 -6.30121088]
[433.11035156 -11.33677864]
[447.23983765 -16.37234688]
[457.64172363 -28.29341125]
[472.22784424 -25.27772903]
[486.08602905 -31.01798058]
[499.63778687 -37.44836807]
[513.12408447 -44.01488495]
[526.54364014 -50.71686172]
[539.96313477 -57.41883850]
[553.38269043 -64.12081909]
[566.73400879 -70.95757294]
[580.01586914 -77.92842102]
[593.29772949 -84.89926910]
[606.57952881 -91.87011719]
[619.86138916 -98.84096527]
[628.48510742 -112.10526276]
[643.35028076 -111.16888428]
[656.63208008 -118.13973236]
[666.07531738 -133.91725159]
[683.54980469 -132.59382629]
[696.68859863 -139.83071899]
[704.70477295 -154.13708496]
[721.10382080 -154.07742310]
[729.01574707 -139.71310425]
[720.30145264 -125.82092285]
[703.92547607 -126.69194794]
[690.78668213 -119.45505524]
[687.10064697 -107.89608002]
[676.16497803 -101.77132416]
[663.60296631 -104.85788727]
[650.32110596 -97.88703918]
[642.64739990 -85.12134552]
[626.83221436 -85.55912781]
[613.55041504 -78.58827972]
[600.26855469 -71.61743164]
[586.98669434 -64.64658356]
[573.70489502 -57.67573547]
[569.21795654 -51.74856186]
[560.08465576 -50.70129776]
[546.66510010 -43.99931717]
[533.24560547 -37.29734039]
[519.82611084 -30.59536552]
[515.22076416 -24.75974655]
[506.06817627 -23.89661217]
[492.51641846 -17.46622467]
[505.38735962 -9.76306343]
[507.59429932 5.07369757]
[497.52261353 16.18950272]
[482.54074097 15.45204353]
[473.60940552 3.40084195]
[477.26339722 -11.14821911]
[467.87216187 0.41266793]
[452.27542114 -2.24283624]
[438.14590454 2.79273152]
[424.01638794 7.82829905]
[414.62515259 19.38918686]
[399.02841187 16.73368263]
[384.89889526 21.76924896]
[370.76937866 26.80481720]
[356.63986206 31.84038544]
[342.51037598 36.87595367]
[328.38085938 41.91152191]
[318.98962402 53.47240829]
[303.39288330 50.81690216]
[289.26336670 55.85247040]
[275.13385010 60.88803864]
[269.64135742 71.70604706]
[257.86480713 75.99728394]
[245.96058655 70.93559265]
[231.73254395 75.68561554]
[217.50450134 80.43563843]
[215.99026489 87.52684784]
[212.04719543 93.69348907]
[206.13627625 98.12551117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 45]
[10 44]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[17 33]
[18 32]
[19 31]
[46 55]
[47 54]
[48 53]
[66 152]
[67 151]
[68 150]
[70 147]
[71 146]
[72 145]
[74 143]
[75 142]
[76 141]
[77 140]
[78 139]
[79 138]
[81 136]
[82 135]
[83 134]
[85 132]
[86 126]
[87 125]
[88 123]
[89 122]
[90 121]
[91 120]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[98 112]
[99 111]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
