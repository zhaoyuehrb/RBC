%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGAGGGAGCGGCGGCCGCUGCGGGCCGGGCCGGGCCGGGGCUGAGGCCGAGCGAGCCGCGGGGCCCGCGCAGCCCCGGCCGGAGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[54.65602493 176.16751099]
[45.94919586 163.95314026]
[48.12904739 149.11204529]
[34.82070541 156.03215027]
[21.51236343 162.95227051]
[18.91642761 176.28955078]
[9.20944309 185.51524353]
[-3.85481167 187.37484741]
[-15.40259361 181.40390015]
[-24.50961494 194.34117126]
[-39.33011627 192.85723877]
[-52.85998535 199.33355713]
[-66.38985443 205.80987549]
[-79.91972351 212.28619385]
[-93.44959259 218.76249695]
[-105.12581635 231.05487061]
[-120.17008209 223.23780823]
[-116.82319641 206.61750793]
[-99.92590332 205.23263550]
[-86.39603424 198.75631714]
[-72.86616516 192.27999878]
[-59.33629990 185.80369568]
[-45.80643082 179.32737732]
[-37.66715622 166.85334778]
[-21.87891006 167.87403870]
[-17.05235672 151.85797119]
[-1.88139224 144.04934692]
[14.59224606 149.64393616]
[27.90058899 142.72381592]
[41.20893097 135.80369568]
[53.76642990 127.59947205]
[65.44958496 118.19182587]
[77.13274384 108.78417969]
[88.81590271 99.37654114]
[100.34191895 89.77700806]
[105.74926758 74.90854645]
[120.44216156 72.46557617]
[131.80789185 62.67679214]
[143.17361450 52.88800430]
[154.53933716 43.09921646]
[165.90505981 33.31043243]
[177.27078247 23.52164459]
[188.63650513 13.73285866]
[200.00222778 3.94407248]
[211.36795044 -5.84471416]
[222.73367310 -15.63350010]
[234.09939575 -25.42228699]
[239.57142639 -45.99969101]
[259.75463867 -49.72891235]
[270.09494019 -60.59528732]
[280.43524170 -71.46166992]
[290.77554321 -82.32804108]
[290.55789185 -97.90335846]
[301.19924927 -108.77610779]
[316.04925537 -108.88760376]
[326.38955688 -119.75398254]
[336.72985840 -130.62036133]
[343.26849365 -146.26269531]
[360.10958862 -144.30981445]
[362.89511108 -127.58625793]
[347.59625244 -120.28005981]
[337.25595093 -109.41368103]
[326.91564941 -98.54730225]
[327.54058838 -83.71001434]
[317.20886230 -72.54266357]
[301.64190674 -71.98774719]
[291.30160522 -61.12136459]
[280.96130371 -50.25498581]
[270.62100220 -39.38861084]
[272.32528687 -30.32268333]
[269.51181030 -21.39101982]
[262.71984863 -14.74323559]
[253.46192932 -12.04377079]
[243.88818359 -14.05656338]
[232.52246094 -4.26777744]
[221.15673828 5.52100897]
[209.79101562 15.30979538]
[198.42529297 25.09858131]
[187.05957031 34.88736725]
[175.69383240 44.67615509]
[164.32810974 54.46494293]
[152.96238708 64.25373077]
[141.59666443 74.04251099]
[130.23094177 83.83129883]
[125.63655853 97.99960327]
[110.13070679 101.14273071]
[106.47103882 108.51922607]
[98.22354889 111.05970001]
[86.54039001 120.46734619]
[74.85723114 129.87498474]
[63.17407227 139.28263855]
[77.64051056 143.24777222]
[85.32884216 156.12757874]
[81.95363617 170.74290466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[9 25]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[31 91]
[32 90]
[33 89]
[34 88]
[35 86]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[49 69]
[50 68]
[51 67]
[52 66]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
