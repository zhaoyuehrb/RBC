%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGAGGCCUCUGGGUAGGUGGCUCAACCCCGCCUCUCAGUUGAGGACUCUGAAGGCUGUUUCUGUGGCGCUUCCCCUGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[89.49354553 221.43563843]
[98.85987854 208.41061401]
[97.77751160 193.44970703]
[96.69514465 178.48881531]
[95.61277771 163.52790833]
[94.53041077 148.56701660]
[90.82168579 141.97140503]
[93.68900299 133.04818726]
[93.14746857 118.05796051]
[85.41416168 105.20510864]
[72.42378235 97.70510864]
[59.43339920 90.20510864]
[46.44301605 82.70510864]
[33.06564713 75.91938782]
[19.34052277 69.86786652]
[5.61539936 63.81633759]
[-8.10972404 57.76480865]
[-17.46049881 57.12565613]
[-22.21492004 51.23905182]
[-35.71262360 44.69595718]
[-49.21032333 38.15286636]
[-62.70802307 31.60977173]
[-76.20572662 25.06668091]
[-89.70343018 18.52358818]
[-103.89877319 25.08302116]
[-118.97572327 20.93338203]
[-127.81540680 8.03400135]
[-126.24399567 -7.52442646]
[-115.00345612 -18.39568710]
[-99.40123749 -19.44670486]
[-86.80421448 -10.18122196]
[-83.16033173 5.02588654]
[-69.66263580 11.56897926]
[-56.16493225 18.11207199]
[-42.66722870 24.65516472]
[-29.16952896 31.19825554]
[-15.67182827 37.74134827]
[-2.05819654 44.03968430]
[11.66692734 50.09121323]
[25.39204979 56.14273834]
[39.11717224 62.19426727]
[42.70363235 61.10346222]
[47.02029800 61.85033798]
[51.12042999 64.76753235]
[53.94301605 69.71472931]
[66.93339539 77.21472931]
[79.92378235 84.71472931]
[92.91416168 92.21472931]
[95.00242615 88.97071075]
[98.46323395 86.39619446]
[103.04104614 85.03388214]
[108.27781677 85.31936646]
[113.55874634 87.50932312]
[118.18237305 91.62893677]
[133.17993164 91.35813141]
[148.17747498 91.08731842]
[163.17503357 90.81650543]
[178.16525269 90.27497101]
[193.14326477 89.46288300]
[208.12126160 88.65080261]
[216.43556213 75.54920197]
[230.87525940 69.86812592]
[245.88800049 73.79206085]
[255.70108032 85.81217957]
[256.54116821 101.30649567]
[248.08520508 114.31713104]
[233.58473206 119.84123230]
[218.61544800 115.75466919]
[208.93334961 103.62879944]
[193.95533752 104.44088745]
[178.97734070 105.25296783]
[172.31585693 108.84201050]
[163.44584656 105.81405640]
[148.44828796 106.08486938]
[133.45074463 106.35568237]
[118.45317841 106.62649536]
[108.13768768 117.51642609]
[108.67922974 132.50665283]
[109.49131012 147.48464966]
[110.57367706 162.44555664]
[111.65604401 177.40644836]
[112.73841095 192.36734009]
[113.82077789 207.32824707]
[124.96437836 218.86946106]
[122.74623108 234.75842285]
[108.86789703 242.80650330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[8 78]
[9 77]
[10 48]
[11 47]
[12 46]
[13 45]
[14 41]
[15 40]
[16 39]
[17 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[54 76]
[55 75]
[56 74]
[57 73]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
