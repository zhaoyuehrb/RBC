%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGAGAUGGGAGUUGGAAAGUGUUAGCACUUUGCCAGACUUUGCCAGCAAGAUUAACUGAGGAGAUCAAAUUGAGUCAGGGUCAAGGCUA\
) } def
/len { sequence length } bind def

/coor [
[163.54292297 137.22140503]
[176.64083862 129.91133118]
[162.22953796 125.75028229]
[147.81823730 121.58923340]
[133.40692139 117.42819214]
[118.99562073 113.26715088]
[104.58431244 109.10610199]
[96.40731049 110.07691193]
[89.76956940 104.56189728]
[80.15336609 110.15954590]
[69.27244568 109.44014740]
[60.82821274 102.89699554]
[57.55422974 92.96203613]
[43.62591934 87.39407349]
[29.69760704 81.82611847]
[15.76929665 76.25816345]
[1.84098601 70.69020081]
[-12.17748070 65.35329437]
[-26.28227234 60.24889755]
[-40.38706207 55.14449692]
[-54.57432175 50.27400589]
[-68.84017181 45.63875198]
[-83.10601807 41.00349808]
[-97.37186432 36.36824036]
[-111.63771057 31.73298645]
[-125.90355682 27.09773064]
[-141.82312012 31.03470993]
[-152.99586487 19.03048134]
[-147.92825317 3.43396497]
[-131.83340454 0.28952107]
[-121.26830292 12.83188343]
[-107.00245667 17.46713829]
[-92.73661041 22.10239410]
[-78.47076416 26.73764801]
[-64.20491028 31.37290382]
[-49.93906784 36.00815964]
[-42.45724106 35.06222153]
[-35.28266525 41.03970718]
[-21.17787361 46.14410400]
[-7.07308340 51.24850082]
[0.43592626 50.55045700]
[7.40894461 56.76189041]
[21.33725548 62.32984924]
[35.26556778 67.89780426]
[49.19387817 73.46576691]
[63.12218857 79.03372192]
[81.84447479 74.70033264]
[94.40482330 90.29605103]
[108.74536133 94.69480133]
[123.15666199 98.85584259]
[137.56796265 103.01688385]
[151.97927856 107.17793274]
[166.39057922 111.33897400]
[180.80187988 115.50001526]
[195.67085266 117.47840118]
[210.66879272 117.23039246]
[225.66674805 116.98238373]
[240.66468811 116.73437500]
[246.80885315 113.51577759]
[252.72750854 113.97088623]
[256.65441895 116.99877930]
[271.63595581 117.74253845]
[286.61752319 118.48629761]
[301.59906006 119.23004913]
[311.36257935 107.31452942]
[326.09799194 103.47769928]
[340.10153198 108.98813629]
[348.07958984 121.53756714]
[363.06115723 122.28132629]
[378.04269409 123.02508545]
[394.16213989 117.77154541]
[403.67269897 131.80671692]
[392.81878662 144.83090210]
[377.29895020 138.00663757]
[362.31738281 137.26287842]
[347.33584595 136.51911926]
[338.15402222 148.21665955]
[323.67358398 152.31300354]
[309.39065552 147.03556824]
[300.85531616 134.21159363]
[285.87374878 133.46784973]
[270.89221191 132.72409058]
[255.91065979 131.98033142]
[240.91270447 131.73233032]
[225.91474915 131.98033142]
[210.91680908 132.22834778]
[195.91885376 132.47634888]
[206.64976501 142.95716858]
[210.23822021 157.52160645]
[205.60464478 171.78800964]
[194.14303589 181.46434021]
[179.30158997 183.63952637]
[165.54530334 177.65914917]
[157.01274109 165.32240295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[9 48]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 40]
[19 39]
[20 38]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[55 87]
[56 86]
[57 85]
[58 84]
[61 83]
[62 82]
[63 81]
[64 80]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
