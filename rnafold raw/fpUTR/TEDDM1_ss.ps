%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUGAGUAUUGCUCUUCACGCUUCAGUCGGACAGGCCUGUAUUCCAUGGGAAAGUCCAUUGGCCAUUUUUAACUGGGGCUAUUUCUUUUCUCUUAUGGACUAUAUCAGGCCACAGUGGUCUCCAAGGGC\
) } def
/len { sequence length } bind def

/coor [
[97.20025635 319.86306763]
[97.20025635 304.86306763]
[97.20025635 289.86306763]
[97.20025635 274.86306763]
[97.20025635 259.86306763]
[96.84329224 244.86730957]
[96.12956238 229.88430786]
[95.41583252 214.90129089]
[91.92124939 208.30560303]
[94.86770630 199.55409241]
[94.51074219 184.55833435]
[94.15377045 169.56259155]
[93.79680634 154.56683350]
[93.43984222 139.57107544]
[93.08287811 124.57533264]
[85.94271088 121.31163788]
[80.13180542 116.03272247]
[66.20628357 121.60765839]
[52.28076553 127.18259430]
[38.42256927 132.92285156]
[24.63366699 138.82759094]
[18.99322319 153.59109497]
[4.53155661 159.96571350]
[-10.17148495 154.16949463]
[-16.39284706 139.64125061]
[-10.44150543 125.00030518]
[4.15171432 118.93289185]
[18.72891426 125.03869629]
[32.51781845 119.13394165]
[37.47640991 113.55473328]
[46.70582581 113.25707245]
[60.63134766 107.68213654]
[74.55686188 102.10720062]
[77.64409637 87.67089081]
[88.20639801 77.35702515]
[102.71208954 74.61421967]
[108.61684418 60.82531357]
[114.52159882 47.03640747]
[120.42635345 33.24750519]
[126.33110809 19.45859909]
[132.23585510 5.66969490]
[137.97610474 -8.18849850]
[143.55104065 -22.11401749]
[149.12597656 -36.03953552]
[154.36795044 -50.09378052]
[159.27397156 -64.26879120]
[164.17999268 -78.44380951]
[169.08599854 -92.61882019]
[173.99201965 -106.79383087]
[178.89804077 -120.96884155]
[183.80406189 -135.14385986]
[188.71008301 -149.31886292]
[193.61610413 -163.49388123]
[198.35308838 -177.72627258]
[202.92039490 -192.01402283]
[207.48768616 -206.30177307]
[196.49037170 -216.82888794]
[191.17591858 -231.02902222]
[192.54826355 -246.06686401]
[200.28186035 -258.96463013]
[212.79687500 -267.19165039]
[227.58157349 -269.16091919]
[232.14888000 -283.44866943]
[236.71617126 -297.73641968]
[241.28347778 -312.02416992]
[245.85076904 -326.31192017]
[234.73321533 -336.76959229]
[229.26208496 -351.01843262]
[230.52366638 -366.22933960]
[238.26745605 -379.38214111]
[250.95594788 -387.86535645]
[266.06979370 -389.99465942]
[280.60818481 -385.34722900]
[291.68444824 -374.84585571]
[297.09945679 -360.57559204]
[295.77798462 -345.36978149]
[287.98245239 -332.24758911]
[275.26065063 -323.81439209]
[260.13851929 -321.74462891]
[255.57122803 -307.45687866]
[251.00392151 -293.16912842]
[246.43663025 -278.88137817]
[241.86932373 -264.59362793]
[252.77030945 -254.41354370]
[258.19259644 -240.45259094]
[257.01074219 -225.46044922]
[249.40582275 -212.41493225]
[236.83992004 -203.93054199]
[221.77543640 -201.73446655]
[217.20814514 -187.44671631]
[212.64083862 -173.15896606]
[213.61013794 -165.75791931]
[207.79110718 -158.58786011]
[202.88510132 -144.41284180]
[197.97908020 -130.23783875]
[193.07305908 -116.06282043]
[188.16703796 -101.88780975]
[183.26101685 -87.71279907]
[178.35499573 -73.53778839]
[173.44897461 -59.36277390]
[168.54295349 -45.18776321]
[169.83418274 -40.49739456]
[168.12255859 -34.94916916]
[163.05149841 -30.46459961]
[157.47656250 -16.53907967]
[151.90162659 -2.61356139]
[152.34046936 4.83778715]
[146.02476501 11.57444763]
[140.12001038 25.36335182]
[134.21525574 39.15225601]
[128.31050110 52.94116211]
[122.40574646 66.73006439]
[116.50099945 80.51897430]
[125.19427490 95.87183380]
[121.85527802 113.19622803]
[108.07862854 124.21836090]
[108.43559265 139.21411133]
[108.79255676 154.20986938]
[109.14952850 169.20561218]
[109.50649261 184.20137024]
[109.86345673 199.19712830]
[110.39884186 214.18756104]
[111.11257172 229.17057800]
[111.82630157 244.15357971]
[115.15169525 250.05009460]
[114.95453644 255.85298157]
[112.20025635 259.86306763]
[112.20025635 274.86306763]
[112.20025635 289.86306763]
[112.20025635 304.86306763]
[112.20025635 319.86306763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 128]
[5 127]
[6 124]
[7 123]
[8 122]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[17 33]
[18 32]
[19 31]
[20 29]
[21 28]
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[41 108]
[42 106]
[43 105]
[44 104]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 91]
[55 90]
[56 89]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
