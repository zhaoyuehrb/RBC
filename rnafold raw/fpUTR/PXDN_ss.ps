%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCUGGGACGUGGGCCGCGGCCGGGCGGGCGCAGUCGGGAGCCGGCCGUGGUGGCUCCGUGCGUCCGAGCGUCCGUCCGCGCCGUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[1.32382727 394.05947876]
[1.17946386 409.23654175]
[-4.44137621 423.33514404]
[-14.77852058 434.44857788]
[-28.43395424 441.07379150]
[-43.56089401 442.31481934]
[-58.11354446 438.00378418]
[-70.12377930 428.72378540]
[-77.96730804 415.72979736]
[-80.58336639 400.77920532]
[-77.61814880 385.89389038]
[-69.47267914 373.08703613]
[-57.24856567 364.09063721]
[-42.59901428 360.12136841]
[-27.50525856 361.71603394]
[-20.67283821 348.36245728]
[-13.84041595 335.00888062]
[-7.00799417 321.65530396]
[-0.17557228 308.30172729]
[6.43033981 294.83468628]
[12.80785847 281.25796509]
[19.18537712 267.68124390]
[25.56289482 254.10452271]
[31.71019936 240.42202759]
[37.62553787 226.63766479]
[43.54087448 212.85328674]
[49.45621490 199.06892395]
[55.37155151 185.28456116]
[61.28688812 171.50018311]
[67.20222473 157.71582031]
[73.11756134 143.93145752]
[79.03290558 130.14709473]
[84.94824219 116.36272430]
[90.86357880 102.57835388]
[90.01667786 97.17339325]
[92.37615967 91.71595001]
[97.67189026 88.08455658]
[104.50431061 74.73097992]
[111.33673096 61.37739944]
[118.16915131 48.02382278]
[125.00157166 34.67024612]
[124.39943695 18.86050224]
[137.08468628 11.05449581]
[143.91711426 -2.29908133]
[150.52302551 -15.76614952]
[156.90054321 -29.34286690]
[162.81587219 -43.12723541]
[168.26228333 -57.10352325]
[173.70869446 -71.07981110]
[168.60020447 -86.28780365]
[177.42588806 -99.68507385]
[193.41542053 -100.99439240]
[204.30300903 -89.21134949]
[201.73663330 -73.37490082]
[187.68498230 -65.63339996]
[182.23857117 -51.65711594]
[176.79216003 -37.68082809]
[177.95364380 -32.85260391]
[175.94284058 -27.25675583]
[170.47724915 -22.96534920]
[164.09973145 -9.38863087]
[164.10575867 -1.84130716]
[157.27069092 4.53334045]
[150.43826294 17.88691711]
[151.52909851 32.74152374]
[138.35514832 41.50266647]
[131.52273560 54.85624313]
[124.69030762 68.20982361]
[117.85788727 81.56340027]
[111.02546692 94.91697693]
[104.64794159 108.49369049]
[98.73260498 122.27806091]
[92.81726837 136.06242371]
[86.90193176 149.84680176]
[80.98659515 163.63116455]
[75.07125854 177.41552734]
[69.15591431 191.19989014]
[63.24058151 204.98426819]
[57.32524109 218.76863098]
[51.40990448 232.55299377]
[45.49456787 246.33737183]
[44.95226669 255.66798401]
[39.13961411 260.48202515]
[32.76209259 274.05874634]
[26.38457680 287.63546753]
[20.00705719 301.21218872]
[19.14993286 310.51916504]
[13.17800426 315.13415527]
[6.34558249 328.48773193]
[-0.48683912 341.84130859]
[-7.31926107 355.19488525]
[-14.15168285 368.54846191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[20 86]
[21 85]
[22 84]
[23 83]
[24 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[43 64]
[44 63]
[45 61]
[46 60]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
