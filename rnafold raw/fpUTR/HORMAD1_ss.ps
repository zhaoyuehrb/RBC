%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGAAAGCGCAUGCGCGUCGGGCACAGCGCGUGCAGCCUCGUGCAGCUCUUCUGGUCUCCGGCGCCCGCCCCUCAGACGUAAUGUUGAAUUAAAGAAAAUACUUUAUCAGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[40.27570724 180.24401855]
[34.58605957 194.12306213]
[23.84242249 204.59083557]
[9.82010460 209.91761780]
[-5.16381311 209.22320557]
[-18.63335037 202.62232971]
[-28.36276817 191.20573425]
[-32.74435425 176.85993958]
[-31.05408096 161.95549011]
[-23.57125664 148.95520020]
[-11.53468513 140.00837708]
[-26.53337860 139.81037903]
[-35.28171921 142.85618591]
[-41.92399979 139.40397644]
[-56.91224289 138.81013489]
[-71.90048218 138.21629333]
[-86.88872528 137.62245178]
[-101.87696075 137.02861023]
[-116.86520386 136.43475342]
[-123.07117462 139.25340271]
[-128.86848450 138.52821350]
[-132.62272644 135.39324951]
[-147.55874634 134.00923157]
[-162.49475098 132.62519836]
[-177.43077087 131.24118042]
[-185.50788879 138.76023865]
[-196.18338013 140.48585510]
[-205.81571960 136.07820129]
[-211.25646973 127.24808502]
[-226.09863281 125.07773590]
[-241.12945557 131.63563538]
[-254.16171265 121.68111420]
[-251.78892517 105.45453644]
[-236.45201111 99.64840698]
[-223.92828369 110.23558044]
[-209.08612061 112.40592957]
[-191.81401062 103.87979889]
[-176.04673767 116.30516052]
[-161.11073303 117.68918610]
[-146.17471313 119.07321167]
[-131.23870850 120.45723724]
[-116.27136230 121.44651794]
[-101.28311920 122.04035950]
[-86.29487610 122.63420868]
[-71.30664062 123.22805023]
[-56.31839752 123.82189178]
[-41.33015823 124.41573334]
[-26.33538437 124.81169128]
[-11.33669186 125.00968170]
[3.47552347 122.64361572]
[17.66616249 117.78297424]
[31.85680199 112.92234039]
[46.04743958 108.06170654]
[60.23807907 103.20107269]
[74.42871857 98.34043884]
[88.61935425 93.47980499]
[99.96737671 83.67050171]
[106.83010864 70.33248138]
[113.69284058 56.99445343]
[120.55556488 43.65642548]
[114.04539490 25.97077370]
[122.27136993 9.36685181]
[139.68196106 4.01709414]
[145.83120728 -9.66452789]
[151.98045349 -23.34614944]
[149.78628540 -39.59784698]
[162.92723083 -49.40841675]
[177.88504028 -42.68559265]
[179.27236938 -26.34523201]
[165.66207886 -17.19690132]
[159.51283264 -3.51528049]
[153.36358643 10.16634083]
[159.69357300 19.83376312]
[160.52165222 31.48045731]
[155.52087402 42.16484451]
[145.85140991 49.13097763]
[133.89360046 50.51915741]
[127.03086853 63.85718155]
[120.16813660 77.19520569]
[113.30540466 90.53323364]
[125.72261047 82.11818695]
[133.20202637 69.11593628]
[145.78971863 60.95811844]
[160.71286011 59.44173050]
[174.68421936 64.90081024]
[184.62614441 76.13282013]
[188.34863281 90.66358185]
[185.03172302 105.29225159]
[175.40602112 116.79643250]
[161.59191895 122.64197540]
[146.63235474 121.54122162]
[133.82319641 113.73721313]
[118.88941956 112.32930756]
[131.32006836 120.72449493]
[143.75070190 129.11967468]
[156.18133545 137.51487732]
[168.61198425 145.91006470]
[184.07803345 142.65788269]
[197.26799011 151.36424255]
[200.35646057 166.86381531]
[191.51113892 179.96098328]
[175.97976685 182.88542175]
[162.97685242 173.90211487]
[160.21679688 158.34069824]
[147.78614807 149.94551086]
[135.35551453 141.55032349]
[122.92487335 133.15513611]
[110.49423218 124.75994873]
[97.20540619 118.26705170]
[93.47998810 107.67044067]
[79.28935242 112.53108215]
[65.09871674 117.39171600]
[50.90807343 122.25234985]
[36.71743393 127.11298370]
[22.52679634 131.97361755]
[8.33615780 136.83424377]
[22.56314850 141.58743286]
[33.72284698 151.61045837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 49]
[12 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[22 41]
[23 40]
[24 39]
[25 38]
[29 36]
[30 35]
[50 116]
[51 115]
[52 114]
[53 113]
[54 112]
[55 111]
[56 110]
[57 80]
[58 79]
[59 78]
[60 77]
[63 72]
[64 71]
[65 70]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
