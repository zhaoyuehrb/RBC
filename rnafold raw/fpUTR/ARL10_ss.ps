%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGCGCGGCCGCAGCAGUCGCAGCGGGGCCAUCUUCGGCGGGCGAGUGGGCUCGGCCUGUGCAACCCGCACCUGCGUCCCUCGCCCGGCCCG\
) } def
/len { sequence length } bind def

/coor [
[83.37557220 113.15236664]
[69.08000183 117.69512177]
[54.78442764 122.23786926]
[40.48885727 126.78061676]
[26.19328308 131.32336426]
[11.89770889 135.86611938]
[1.08885956 147.41944885]
[-13.38395882 143.89996338]
[-16.45452309 147.57797241]
[-20.20020103 149.74140930]
[-24.01612663 150.37062073]
[-27.36142731 149.66015625]
[-29.82848930 147.97491455]
[-44.59113693 150.63278198]
[-59.35378265 153.29063416]
[-74.11643219 155.94850159]
[-86.32725525 166.00863647]
[-100.22412109 160.64892578]
[-114.98676300 163.30679321]
[-127.15511322 174.30058289]
[-142.67488098 169.00257874]
[-145.58067322 152.86293030]
[-132.88323975 142.48471069]
[-117.64463043 148.54414368]
[-102.88198090 145.88627625]
[-91.72708130 136.01625061]
[-76.77429962 141.18585205]
[-62.01165009 138.52798462]
[-47.24900055 135.87013245]
[-32.48635483 133.21226501]
[-17.92671013 129.60438538]
[-8.14037514 118.37599182]
[7.35495806 121.57054901]
[21.65053177 117.02780151]
[35.94610596 112.48504639]
[50.24167633 107.94229889]
[64.53725433 103.39954376]
[78.83282471 98.85679626]
[85.99797058 84.08461761]
[101.56256104 78.85964203]
[116.18981171 86.31620026]
[130.33078003 81.31291199]
[144.47175598 76.30962372]
[158.52986145 71.07801056]
[172.50140381 65.61943817]
[186.47293091 60.16086197]
[200.44447327 54.70228958]
[214.41601562 49.24371338]
[228.38755798 43.78514099]
[242.35910034 38.32656479]
[249.37431335 32.17446136]
[256.87249756 32.92551804]
[271.01345825 27.92223167]
[285.15444946 22.91894531]
[299.29541016 17.91565895]
[309.72448730 6.01838112]
[324.30368042 9.06736565]
[338.44464111 4.06407928]
[352.58560181 -0.93920738]
[356.21215820 -5.21973896]
[360.70266724 -7.33108950]
[365.02886963 -7.32303762]
[368.34829712 -5.66854477]
[382.90792847 -9.27641869]
[397.46759033 -12.88429356]
[412.02722168 -16.49216843]
[421.50787354 -29.43421364]
[437.54272461 -29.94717216]
[447.83120728 -17.63754463]
[444.48086548 -1.94822502]
[430.06179810 5.08528423]
[415.63510132 -1.93252349]
[401.07543945 1.67535090]
[386.51580811 5.28322506]
[371.95617676 8.89109993]
[357.58889771 13.20176601]
[343.44793701 18.20505142]
[329.30694580 23.20833969]
[319.88934326 34.74774933]
[304.29870605 32.05663300]
[290.15771484 37.05991745]
[276.01675415 42.06320572]
[261.87579346 47.06649017]
[247.81767273 52.29810715]
[233.84613037 57.75668335]
[219.87458801 63.21525574]
[205.90306091 68.67382812]
[191.93151855 74.13240051]
[177.95997620 79.59098053]
[163.98843384 85.04955292]
[158.80546570 90.51979828]
[149.47503662 90.45059967]
[135.33406067 95.45388794]
[121.19309235 100.45717621]
[117.07542419 112.56129456]
[106.74612427 120.09592438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[8 31]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[19 24]
[41 94]
[42 93]
[43 92]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[52 83]
[53 82]
[54 81]
[55 80]
[57 78]
[58 77]
[59 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
