%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCCUCUUGCGCGCGCCCCACCGACCAAAAUGGCGGCUGCCGUUGGUGCGGGGUGCGGUUUGUAGUGCUGUUGCCCUACUCAUCCCUUUGCAAAAUGUGAAAGAAGAAGCGGCUGGUGGAGGCGGGCCAUAGGCA\
) } def
/len { sequence length } bind def

/coor [
[104.85796356 270.62554932]
[116.66567993 260.69671631]
[114.65218353 245.83247375]
[112.63867950 230.96823120]
[110.62518311 216.10398865]
[108.44503784 201.26327515]
[106.09851837 186.44793701]
[103.75200653 171.63261414]
[101.40548706 156.81729126]
[99.05896759 142.00196838]
[96.71245575 127.18664551]
[80.85457611 119.57994080]
[72.89396667 103.89673615]
[58.02972031 101.88323975]
[49.02122498 103.84188080]
[42.85598373 99.65416718]
[28.04065895 97.30765533]
[13.22533321 94.96113586]
[-1.58999181 92.61461639]
[-16.40531731 90.26810455]
[-31.22064209 87.92158508]
[-46.03596878 85.57506561]
[-60.85129166 83.22855377]
[-75.69194031 88.71176910]
[-87.05213928 79.07874298]
[-93.47837830 81.12878418]
[-99.10403442 79.77039337]
[-102.47340393 76.28019714]
[-117.16854095 73.27135468]
[-131.86366272 70.26251221]
[-146.55880737 67.25366974]
[-153.07054138 69.01333618]
[-158.62959290 67.40392303]
[-161.83898926 63.76607132]
[-176.38432312 60.10096359]
[-190.92967224 56.43585968]
[-205.47500610 52.77075195]
[-220.02035522 49.10564804]
[-235.63900757 54.10459900]
[-247.59397888 42.87914276]
[-243.58700562 26.97706032]
[-227.74012756 22.75705338]
[-216.35525513 34.56030273]
[-201.80990601 38.22541046]
[-187.26455688 41.89051437]
[-172.71922302 45.55562210]
[-158.17387390 49.22072983]
[-143.54995728 52.55854034]
[-128.85482788 55.56738281]
[-114.15969849 58.57622528]
[-99.46456909 61.58506393]
[-84.70561981 64.26342010]
[-70.92466736 58.61236191]
[-58.50477600 68.41322327]
[-43.68944931 70.75974274]
[-28.87412453 73.10626221]
[-14.05879974 75.45277405]
[0.75652522 77.79929352]
[15.57185078 80.14581299]
[30.38717461 82.49232483]
[45.20249939 84.83884430]
[60.04322052 87.01898956]
[74.90746307 89.03248596]
[80.81935120 77.57653809]
[91.97579956 69.40386200]
[106.52846527 66.88341522]
[109.53730011 52.18828201]
[112.54614258 37.49315262]
[115.55498505 22.79802132]
[110.74311066 7.72631073]
[120.87611389 -3.19026375]
[123.88494873 -17.88539505]
[118.19029999 -33.26404953]
[128.86810303 -45.71060181]
[144.93394470 -42.42110825]
[149.86067200 -26.77951431]
[138.58007812 -14.87655354]
[135.57124329 -0.18142253]
[140.59832764 13.83919334]
[130.25012207 25.80686188]
[127.24127960 40.50199127]
[124.23243713 55.19712448]
[121.22359467 69.89225769]
[131.46723938 80.84980011]
[146.33148193 78.83629608]
[161.19572449 76.82279968]
[173.83239746 67.30308533]
[187.48309326 73.26193237]
[202.34733582 71.24843597]
[217.18806458 69.06829071]
[232.00338745 66.72177124]
[246.81871033 64.37525940]
[261.63403320 62.02873993]
[264.50201416 47.14416504]
[272.29049683 34.13973999]
[284.05902100 24.58581161]
[298.38647461 19.63606071]
[313.54275513 19.88819695]
[327.69763184 25.31177330]
[339.14184570 35.25186539]
[346.49349976 48.50815582]
[348.86477661 63.47988892]
[345.96939087 78.35915375]
[338.15692139 91.34920502]
[326.37081909 100.88143158]
[312.03427124 105.80476379]
[296.87850952 105.52470398]
[282.73364258 100.07505035]
[271.30773926 90.11388397]
[263.98056030 76.84406281]
[249.16522217 79.19058228]
[234.34989929 81.53710175]
[219.53457642 83.88361359]
[213.36933899 88.07132721]
[204.36083984 86.11268616]
[189.49659729 88.12618256]
[177.92311096 97.50188446]
[163.20922852 91.68704987]
[148.34498596 93.70054626]
[133.48074341 95.71404266]
[126.76105499 114.77597046]
[111.52777863 124.84012604]
[113.87429810 139.65545654]
[116.22080994 154.47077942]
[118.56732941 169.28610229]
[120.91384888 184.10142517]
[123.26036072 198.91674805]
[127.72708893 206.98133850]
[125.48942566 214.09048462]
[127.50292969 228.95474243]
[129.51643372 243.81898499]
[131.52992249 258.68322754]
[145.55355835 265.11294556]
[153.85556030 278.11602783]
[153.78680420 293.54324341]
[145.36921692 306.47183228]
[131.28883362 312.77627563]
[116.03864288 310.44491577]
[104.48493195 300.22164917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[4 130]
[5 129]
[6 127]
[7 126]
[8 125]
[9 124]
[10 123]
[11 122]
[13 63]
[14 62]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[25 52]
[28 51]
[29 50]
[30 49]
[31 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[66 83]
[67 82]
[68 81]
[69 80]
[71 78]
[72 77]
[84 120]
[85 119]
[86 118]
[88 116]
[89 115]
[90 113]
[91 112]
[92 111]
[93 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
