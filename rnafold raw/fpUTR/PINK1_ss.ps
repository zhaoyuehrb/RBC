%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGAGGCACCGCCCCAAGUUUGUUGUGACCGGCGGGGGACGCCGGUGGUGGCGGCAGCGGCGGCUGCGGGGGCACCGGGCCGCGGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[90.93499756 118.94950867]
[78.37750244 127.15372467]
[65.82000732 135.35795593]
[53.26250839 143.56217957]
[40.70500946 151.76638794]
[28.28487778 160.17712402]
[16.00550461 168.79205322]
[3.72613311 177.40698242]
[-8.55323887 186.02191162]
[-7.12066174 201.31384277]
[-13.54056358 215.26664734]
[-26.08602142 224.12705994]
[-41.38237381 225.51170349]
[-55.31497574 219.04809570]
[-64.13602448 206.47491455]
[-65.47270966 191.17430115]
[-58.96546555 177.26203918]
[-46.36470795 168.48043823]
[-31.05997658 167.19171143]
[-17.16816902 173.74253845]
[-4.88879681 165.12760925]
[7.39057541 156.51268005]
[19.66994667 147.89775085]
[23.41114998 141.34977722]
[32.50078583 139.20889282]
[45.05828476 131.00466919]
[57.61578369 122.80045319]
[70.17327881 114.59622955]
[82.73077393 106.39200592]
[85.93026733 91.73720551]
[77.93479156 79.04577637]
[69.93931580 66.35434723]
[61.94384384 53.66292191]
[53.94836807 40.97149277]
[45.95289230 28.28006172]
[37.95741653 15.58863354]
[22.69365311 10.64928913]
[17.17365646 -4.41421604]
[25.63189125 -18.04644966]
[41.57992935 -19.78992844]
[52.78379440 -8.30720520]
[50.64884567 7.59315777]
[58.64432144 20.28458595]
[66.63979340 32.97601700]
[74.63526917 45.66744232]
[82.63074493 58.35887146]
[90.62622070 71.05030060]
[98.62169647 83.74172974]
[111.69396210 91.09808350]
[126.69190979 91.34609222]
[141.68986511 91.59410095]
[156.68780518 91.84210968]
[171.68576050 92.09011841]
[186.68371582 92.33812714]
[201.68165588 92.58613586]
[215.60787964 85.07806396]
[228.20547485 93.02474213]
[237.03733826 89.99106598]
[243.69302368 93.53709412]
[258.67456055 94.28084564]
[273.65612793 95.02460480]
[288.63766479 95.76836395]
[303.61923218 96.51211548]
[318.61718750 96.76012421]
[333.61511230 96.51211548]
[342.34185791 93.18808746]
[349.11114502 96.51211548]
[364.10910034 96.76012421]
[379.10702515 97.00813293]
[393.17218018 88.57583618]
[407.37399292 96.77589417]
[407.10284424 113.17279816]
[392.63769531 120.89881897]
[378.85903931 112.00608826]
[363.86108398 111.75807953]
[348.86312866 111.51006317]
[333.86312866 111.51006317]
[318.86517334 111.75807953]
[314.84030151 114.65447998]
[308.90985107 114.91365051]
[302.87545776 111.49366760]
[287.89392090 110.74990845]
[272.91235352 110.00615692]
[257.93081665 109.26239777]
[242.94926453 108.51863861]
[227.95747375 108.02268982]
[215.10400391 115.54850006]
[201.43365479 107.58409119]
[186.43569946 107.33607483]
[171.43775940 107.08806610]
[156.43980408 106.84005737]
[141.44184875 106.59204865]
[126.44390106 106.34403992]
[111.44595337 106.09603119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 23]
[7 22]
[8 21]
[9 20]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[57 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 78]
[65 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
