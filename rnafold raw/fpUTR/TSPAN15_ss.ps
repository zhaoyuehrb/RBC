%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCCCGGAGAGAACGCCGGUGGCGGGGCUGGUAGCCCGGCAGCCGCAGGUGGGGCCACGAGCGCUGGCUGAGGGACCGAGCCGGAGAGCCCCGGAGCCCCCGUAACCCGCGCGGGGAGCGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[90.53299713 141.53150940]
[89.66509247 126.55664062]
[98.14634705 114.18311310]
[88.69235229 125.82879639]
[79.23835754 137.47448730]
[69.92687225 149.23442078]
[60.75926590 161.10687256]
[51.59165955 172.97932434]
[42.42405319 184.85176086]
[46.91490173 199.70477295]
[41.78590393 214.34967041]
[29.00927162 223.15519714]
[13.49787426 222.73544312]
[1.21616375 213.25181580]
[-3.11329222 198.35095215]
[2.17427039 183.76255798]
[15.04567623 175.09616089]
[30.55160713 175.68415833]
[39.71921158 163.81170654]
[48.88681793 151.93927002]
[58.05442429 140.06681824]
[59.66903305 132.77458191]
[67.59267426 128.02049255]
[77.04666901 116.37480164]
[86.50066376 104.72911835]
[89.94014740 90.12877655]
[86.67869568 75.48764038]
[83.41724396 60.84650421]
[80.15579224 46.20536423]
[76.89434052 31.56422615]
[73.63288879 16.92308807]
[64.06591034 14.24507236]
[56.21440125 8.25372982]
[51.16585159 -0.16678603]
[49.59935379 -9.79987049]
[51.69449997 -19.27218437]
[57.11194992 -27.24943733]
[65.04753876 -32.62432861]
[63.22554398 -47.51325989]
[61.40354919 -62.40219498]
[59.58155060 -77.29113007]
[57.75955582 -92.18006134]
[44.88399887 -107.60161591]
[52.95502853 -125.10584259]
[50.23047638 -139.85632324]
[47.32651520 -154.57254028]
[34.88773727 -168.08523560]
[41.07233429 -184.46105957]
[37.81088257 -199.10220337]
[34.54942703 -213.74334717]
[23.99666214 -225.53103638]
[28.78156281 -239.63613892]
[25.52010918 -254.27728271]
[22.25865746 -268.91842651]
[11.70589066 -280.70611572]
[16.49078941 -294.81121826]
[13.22933769 -309.45236206]
[0.51584876 -319.23739624]
[0.38343829 -335.27987671]
[12.93367958 -345.27343750]
[28.53910255 -341.55181885]
[35.22856140 -326.96997070]
[27.87047577 -312.71380615]
[31.13192749 -298.07266235]
[41.45141220 -287.33221436]
[36.89979553 -272.17987061]
[40.16124725 -257.53872681]
[43.42269897 -242.89759827]
[53.74218369 -232.15713501]
[49.19056702 -217.00479126]
[52.45201874 -202.36366272]
[55.71347046 -187.72251892]
[65.79403687 -180.91969299]
[68.58552551 -168.67028809]
[62.04273224 -157.47650146]
[64.94669342 -142.76028442]
[69.37386322 -136.74497986]
[67.73759460 -127.65058136]
[76.68076324 -122.45175934]
[81.33295441 -112.96578979]
[79.91037750 -102.27378082]
[72.64848328 -94.00205994]
[74.47048187 -79.11312866]
[76.29248047 -64.22418976]
[78.11447906 -49.33525848]
[79.93647766 -34.44632721]
[97.05324554 -23.44019890]
[100.75252533 -3.13655710]
[88.27402496 13.66163540]
[91.53547668 28.30277252]
[94.79692841 42.94391251]
[98.05838013 57.58504868]
[101.31983185 72.22618866]
[104.58128357 86.86732483]
[129.17269897 98.97903442]
[141.37203979 107.70691681]
[157.09759521 109.44400024]
[162.94654846 123.14214325]
[175.14588928 131.87002563]
[187.45060730 140.44871521]
[199.85887146 148.87695312]
[212.26712036 157.30517578]
[224.67538452 165.73341370]
[237.08364868 174.16163635]
[249.49191284 182.58987427]
[264.48733521 178.15460205]
[278.80468750 184.44322205]
[285.68380737 198.48643494]
[281.87655640 213.65345764]
[269.18060303 222.78289795]
[253.59059143 221.56410217]
[242.46763611 210.57255554]
[241.06369019 194.99812317]
[228.65542603 186.56990051]
[216.24716187 178.14167786]
[203.83889771 169.71343994]
[191.43063354 161.28521729]
[179.02236938 152.85697937]
[171.64540100 151.68907166]
[166.41799927 144.06938171]
[154.21865845 135.34149170]
[139.36567688 134.22868347]
[132.64416504 119.90626526]
[120.44481659 111.17837524]
[131.89813232 120.86454010]
[135.02574158 135.53485107]
[128.51882935 149.05001831]
[115.10039520 155.75418091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 21]
[7 20]
[8 19]
[9 18]
[26 94]
[27 93]
[28 92]
[29 91]
[30 90]
[31 89]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[44 78]
[45 76]
[46 75]
[48 72]
[49 71]
[50 70]
[52 68]
[53 67]
[54 66]
[56 64]
[57 63]
[95 124]
[96 123]
[98 121]
[99 120]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
