%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGUGCGGUGGCGGUUCGGAGUGAGGGUAGCACGCUGAGCUGAAGGCUGUGCGGAGCGGCGCGGCACAGAGCCUGUUGUUGAGCUCAGU\
) } def
/len { sequence length } bind def

/coor [
[86.25841522 101.32672119]
[72.94013214 94.42574310]
[59.62185669 87.52477264]
[41.35557175 88.87210846]
[32.32395172 73.93135834]
[18.77783203 67.48911285]
[5.23171139 61.04685974]
[-8.31440926 54.60460663]
[-21.86053085 48.16235352]
[-35.40665054 41.72010422]
[-48.95277405 35.27785110]
[-65.21041870 41.45602036]
[-80.64839172 34.20263672]
[-86.05373383 18.37824631]
[-99.81190491 12.40222931]
[-113.57007599 6.42621326]
[-127.32823944 0.45019698]
[-141.08641052 -5.52581930]
[-154.84457397 -11.50183582]
[-168.60275269 -17.47785187]
[-182.36091614 -23.45386887]
[-198.10115051 -21.85513306]
[-206.69218445 -34.02243042]
[-220.45036316 -39.99844742]
[-234.20852661 -45.97446442]
[-248.11875916 -38.83027649]
[-263.35525513 -42.34922409]
[-272.72381592 -54.86977005]
[-271.80090332 -70.48009491]
[-261.02224731 -81.80947876]
[-245.47724915 -83.50853729]
[-232.50575256 -74.77501678]
[-228.23251343 -59.73263168]
[-214.47434998 -53.75661850]
[-200.71617126 -47.78060150]
[-185.96002197 -49.80678177]
[-176.38490295 -37.21203613]
[-162.62673950 -31.23602104]
[-148.86856079 -25.26000595]
[-135.11039734 -19.28398895]
[-121.35222626 -13.30797291]
[-107.59405518 -7.33195639]
[-93.83588409 -1.35593987]
[-80.07772064 4.62007666]
[-68.74984741 -1.77205598]
[-55.61994934 -0.38647839]
[-45.58226395 8.48874760]
[-42.51052094 21.73173141]
[-28.96439934 28.17398262]
[-15.41827869 34.61623383]
[-1.87215793 41.05848694]
[11.67396259 47.50073624]
[25.22008324 53.94298935]
[38.76620483 60.38524246]
[50.40200424 56.62594223]
[61.80807877 62.05366898]
[66.52282715 74.20648956]
[79.84111023 81.10746765]
[93.15938568 88.00844574]
[107.01757812 93.74869537]
[121.31475067 98.28641510]
[135.61192322 102.82412720]
[151.10612488 99.62411499]
[160.89642334 110.84906769]
[175.19358826 115.38678741]
[189.49076843 119.92450714]
[203.78793335 124.46221924]
[218.08509827 128.99993896]
[232.45765686 133.29290771]
[246.90142822 137.33985901]
[261.34518433 141.38681030]
[278.22824097 139.83802795]
[284.39019775 155.63253784]
[270.91873169 165.92604065]
[257.29821777 155.83056641]
[242.85447693 151.78361511]
[228.41070557 147.73666382]
[220.96507263 148.99005127]
[213.54737854 143.29711914]
[199.25021362 138.75939941]
[184.95304871 134.22167969]
[170.65586853 129.68395996]
[156.35870361 125.14624023]
[141.88711548 128.67082214]
[131.07420349 117.12129974]
[116.77703094 112.58358002]
[102.47985840 108.04586792]
[100.03157806 109.31699371]
[97.05757141 109.78176880]
[93.83795166 109.24743652]
[90.71759033 107.62099457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 35]
[24 34]
[25 33]
[60 87]
[61 86]
[62 85]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
