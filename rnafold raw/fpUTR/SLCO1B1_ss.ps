%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGGUGGACUUGUUGCAGUUGCUGUAGGAUUCUAAAUCCAGGUGAUUGUUUCAAACUGAGCAUCAACAACAAAAACAUUUGUAUGAUAUCUAUAUUUCAAUC\
) } def
/len { sequence length } bind def

/coor [
[80.84838867 250.29615784]
[74.99417114 236.29284668]
[74.59777069 221.12026978]
[79.71279144 206.83036804]
[89.64746094 195.35575867]
[103.05821228 188.24827576]
[101.26729584 173.35557556]
[99.47638702 158.46287537]
[97.68547058 143.57015991]
[95.89455414 128.67745972]
[76.31079865 116.67552948]
[71.61853790 94.19104004]
[58.20287323 87.48134613]
[44.78721237 80.77164459]
[29.95672226 85.53549194]
[16.44691658 78.53979492]
[11.99670887 64.37183380]
[-1.41895199 57.66213226]
[-14.83461285 50.95243835]
[-28.25027466 44.24274063]
[-41.66593552 37.53304291]
[-55.08159637 30.82334518]
[-68.49726105 24.11364746]
[-81.91291809 17.40395164]
[-95.32858276 10.69425392]
[-105.63010406 14.78372383]
[-116.24542236 12.48244095]
[-123.62108612 4.81338453]
[-125.42949677 -5.44707298]
[-138.41987610 -12.94707298]
[-151.41026306 -20.44707298]
[-164.40063477 -27.94707298]
[-177.39102173 -35.44707489]
[-194.13128662 -38.13035583]
[-196.18702698 -54.95920563]
[-180.58494568 -61.59330368]
[-169.89102173 -48.43745422]
[-156.90063477 -40.93745422]
[-143.91026306 -33.43745422]
[-130.91987610 -25.93745422]
[-117.92949677 -18.43745422]
[-98.75607300 -20.01821518]
[-88.61888123 -2.72140765]
[-75.20322418 3.98828959]
[-61.78755951 10.69798660]
[-48.37189865 17.40768433]
[-34.95623779 24.11738205]
[-21.54057693 30.82707787]
[-8.12491608 37.53677750]
[5.29074526 44.24647141]
[18.70640564 50.95616913]
[32.71200180 46.01867294]
[46.41297150 52.63214874]
[51.49691010 67.35598755]
[64.91257477 74.06568146]
[78.32823181 80.77538300]
[83.81656647 75.97193146]
[90.33067322 72.69147491]
[97.45765686 71.14193726]
[104.74578094 71.42152405]
[111.73310089 73.51253510]
[117.97673035 77.28241730]
[123.08092499 82.49222565]
[126.72216797 88.81173706]
[141.58641052 86.79824066]
[156.45066833 84.78474426]
[171.31491089 82.77124023]
[177.52275085 73.58930969]
[187.58988953 69.51089478]
[198.00408936 71.69250488]
[205.27818298 79.15138245]
[220.23623657 78.03043365]
[235.19430542 76.90947723]
[250.15235901 75.78852844]
[265.11041260 74.66757965]
[278.34783936 64.98757172]
[293.23834229 71.85814667]
[294.46386719 88.21143341]
[280.76367188 97.22458649]
[266.23135376 89.62563324]
[251.27330017 90.74658203]
[236.31524658 91.86753845]
[221.35719299 92.98848724]
[206.39913940 94.10944366]
[191.44778442 106.21630096]
[173.32841492 97.63549042]
[158.46415710 99.64898682]
[143.59991455 101.66248322]
[128.73567200 103.67598724]
[122.91719818 117.72154999]
[110.78726196 126.88655090]
[112.57817078 141.77925110]
[114.36908722 156.67195129]
[116.16000366 171.56466675]
[117.95091248 186.45736694]
[132.66436768 190.18278503]
[145.03620911 198.97494507]
[153.39324951 211.64476013]
[156.60527039 226.47874451]
[154.23786926 241.47074890]
[146.61122131 254.59320068]
[134.75675964 264.07138062]
[120.27771759 268.62350464]
[105.13225555 267.63388062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[12 56]
[13 55]
[14 54]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[64 89]
[65 88]
[66 87]
[67 86]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
