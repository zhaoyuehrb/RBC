%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACACAGCUGCCUGGAAGGUGACUGGAGGCCUUGAUCGGUUCUCAUUGCGAUUUUGCUGCUGUGGCCCCAACCCUGCCUCCCUCCCCACCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[98.73563385 110.69031525]
[87.09342957 120.14860535]
[75.45123291 129.60690308]
[63.80904007 139.06518555]
[52.16684341 148.52348328]
[40.52464676 157.98176575]
[35.72348022 165.97383118]
[28.35970497 167.54838562]
[26.09823608 182.96017456]
[13.86359310 192.00276184]
[-0.81526381 189.75181580]
[-12.75169182 198.83595276]
[-18.58489990 214.16259766]
[-34.81564713 216.50671387]
[-44.74712753 203.45690918]
[-38.16268921 188.43768311]
[-21.83583641 186.89953613]
[-9.89940929 177.81538391]
[-8.15743160 163.06747437]
[3.81839633 153.68481445]
[19.27555847 155.61195374]
[31.06635475 146.33956909]
[42.70855331 136.88128662]
[54.35074997 127.42298889]
[65.99294281 117.96469879]
[77.63514709 108.50640869]
[89.27734375 99.04811859]
[98.36148834 87.11169434]
[104.37544250 73.37006378]
[110.38940430 59.62843704]
[116.40335846 45.88681030]
[122.41732025 32.14518356]
[128.43127441 18.40355873]
[117.51142120 7.91631985]
[110.85095978 -5.64871740]
[109.23644257 -20.64583588]
[112.84352875 -35.26291275]
[121.21814728 -47.74038696]
[133.33349609 -56.58306122]
[147.71594238 -60.73927307]
[162.62428284 -59.72593689]
[168.63824463 -73.46755981]
[164.01826477 -83.56970215]
[165.79016113 -94.31107330]
[173.10574341 -102.07099915]
[183.29132080 -104.37425995]
[190.16471863 -117.70679474]
[197.03811646 -131.03932190]
[203.91151428 -144.37185669]
[203.35792542 -160.18338013]
[216.06709290 -167.95039368]
[222.94049072 -181.28291321]
[229.81388855 -194.61544800]
[223.60589600 -208.96797180]
[228.12545776 -223.93820190]
[241.23854065 -232.45764160]
[256.75357056 -230.50369263]
[267.34481812 -218.99893188]
[268.01141357 -203.37556458]
[258.43862915 -191.01046753]
[243.14642334 -187.74205017]
[236.27302551 -174.40951538]
[229.39962769 -161.07699585]
[230.44483948 -146.21910095]
[217.24404907 -137.49845886]
[210.37065125 -124.16592407]
[203.49725342 -110.83339691]
[196.62385559 -97.50086212]
[199.13430786 -78.43918610]
[182.37986755 -67.45360565]
[176.36590576 -53.71197891]
[187.22573853 -43.44799805]
[193.93125916 -30.06273651]
[195.65586853 -15.16306686]
[192.17227173 -0.54506224]
[183.88214111 12.02250195]
[171.76991272 21.01217461]
[157.28596497 25.32345963]
[142.17289734 24.41751671]
[136.15895081 38.15914154]
[130.14498901 51.90076828]
[124.13102722 65.64239502]
[118.11707306 79.38402557]
[112.10311127 93.12564850]
[125.44674683 86.27382660]
[140.34776306 84.55340576]
[154.90168762 88.18425751]
[167.24844360 96.70233917]
[175.80999756 109.01898193]
[179.49215698 123.56002045]
[177.82427979 138.46699524]
[171.01954651 151.83471680]
[159.94766235 161.95465088]
[146.02366638 167.53343201]
[131.02719116 167.85801697]
[116.87485504 162.88694763]
[105.37545013 153.25555420]
[97.99868774 140.19479370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[8 21]
[11 18]
[12 17]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[41 71]
[42 70]
[46 68]
[47 67]
[48 66]
[49 65]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
