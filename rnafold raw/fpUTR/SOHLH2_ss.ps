%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGUGCAGGGGGCGGGCCCGGGACGCAGCGGCUGUGGAGCUCCUCCUGCUGGGAGGCUGCCCCAGGACCCAGCACGUGCGCAGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[120.94490814 484.81631470]
[120.69782257 469.51278687]
[127.60129547 455.85260010]
[140.06895447 446.97476196]
[137.98135376 432.12072754]
[135.89375305 417.26672363]
[133.80615234 402.41268921]
[131.71856689 387.55868530]
[122.28526306 376.03207397]
[128.02665710 361.28939819]
[118.47518158 353.64611816]
[116.72431183 341.13104248]
[124.27848816 330.50115967]
[122.71056366 315.58331299]
[120.88252258 300.69512939]
[118.79492950 285.84112549]
[116.70732880 270.98709106]
[114.36081696 256.17178345]
[111.75608826 241.39965820]
[101.92626953 230.20930481]
[107.14965057 215.27522278]
[104.54492950 200.50309753]
[101.94020081 185.73098755]
[98.42956543 182.20243835]
[97.24319458 176.35958862]
[99.70689392 169.84016418]
[98.13896942 154.92234802]
[96.57104492 140.00451660]
[95.00311279 125.08668518]
[93.43518829 110.16885376]
[88.30488586 96.07346344]
[79.91699219 83.63790131]
[71.52909851 71.20233917]
[63.14120483 58.76677704]
[48.17257690 52.06809998]
[46.75886536 35.73000336]
[60.35437775 26.55971718]
[74.97321320 33.99084473]
[75.57676697 50.37888336]
[83.96466064 62.81444550]
[92.35255432 75.25000763]
[100.74044800 87.68557739]
[108.18454742 86.77155304]
[130.51683044 84.02949524]
[135.64714050 69.93410492]
[140.77743530 55.83871460]
[145.90774536 41.74332428]
[151.03804016 27.64793587]
[150.77365112 10.69605064]
[166.98985291 5.74923563]
[176.23243713 19.96229172]
[165.13343811 32.77823639]
[160.00312805 46.87362671]
[154.87283325 60.96901703]
[149.74252319 75.06440735]
[144.61222839 89.15979767]
[108.35301971 108.60092926]
[109.92094421 123.51876068]
[111.48886871 138.43658447]
[113.05679321 153.35441589]
[114.62472534 168.27224731]
[116.71231842 183.12626648]
[119.31703949 197.89837646]
[121.92176819 212.67050171]
[131.93789673 224.91744995]
[126.52820587 238.79493713]
[129.13293457 253.56704712]
[133.79708862 261.68106079]
[131.56135559 268.89950562]
[133.64895630 283.75350952]
[135.73654175 298.60754395]
[140.11468506 306.87939453]
[137.62838745 314.01541138]
[139.19631958 328.93322754]
[150.37457275 343.43756104]
[142.88067627 359.20178223]
[152.46328735 371.79083252]
[146.57258606 385.47106934]
[148.66018677 400.32510376]
[150.74777222 415.17910767]
[152.83537292 430.03314209]
[154.92297363 444.88714600]
[169.35472107 449.98455811]
[179.75601196 461.21270752]
[183.73672485 475.99148560]
[180.38211060 490.92483521]
[170.46302795 502.58120728]
[156.25881958 508.28201294]
[141.03350830 506.71725464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 82]
[5 81]
[6 80]
[7 79]
[8 78]
[10 76]
[13 74]
[14 73]
[15 71]
[16 70]
[17 69]
[18 67]
[19 66]
[21 64]
[22 63]
[23 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 42]
[32 41]
[33 40]
[34 39]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
