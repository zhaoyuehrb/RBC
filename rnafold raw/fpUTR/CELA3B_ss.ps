%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGAGAACUGUGGCCUUGGACCAUGGGAGACCUGCAUUUCCACCACCUGUUCUGGGAGUGGGGCCCAGUCAGCCCCCUUUGCUUACCUUCUGCCCUAUAUUAGAGCCCCAGGUUCUGUGCCCUUUUCCUAUCAUCGCAAAACUC\
) } def
/len { sequence length } bind def

/coor [
[139.60903931 297.65637207]
[135.80422974 283.14694214]
[122.85554504 275.87597656]
[118.79022980 261.21554565]
[126.50450134 247.68307495]
[121.73165131 241.97035217]
[122.77694702 232.82289124]
[119.28305817 218.23547363]
[115.78917694 203.64805603]
[102.99883270 196.10202026]
[99.24772644 181.35807800]
[107.24942780 167.99356079]
[102.59974670 162.18014526]
[103.84028625 153.05711365]
[100.65892029 138.39836121]
[97.47756195 123.73960876]
[84.05352783 117.76631165]
[76.66987610 105.06329346]
[78.12346649 90.44234467]
[87.86368561 79.44174957]
[84.68232727 64.78300476]
[81.50096893 50.12425232]
[78.31961060 35.46550369]
[75.13824463 20.80675316]
[70.22753906 13.01871490]
[72.04906464 5.80086470]
[69.18168640 -8.92252254]
[66.31430817 -23.64591026]
[63.44692993 -38.36929703]
[58.15913773 -24.33223152]
[49.34374619 -12.19596672]
[37.62986374 -2.82660317]
[23.85344505 3.10722136]
[8.99763489 5.18204308]
[-5.87739182 3.24979353]
[-19.71008682 -2.55163360]
[-31.51328659 -11.80822277]
[-40.44466782 -23.85938263]
[-45.86684036 -37.84509277]
[-47.39286041 -52.76726532]
[-44.91382217 -67.56098938]
[-38.60663986 -81.17052460]
[-28.92142296 -92.62463379]
[-16.54935074 -101.10589600]
[-2.37335014 -106.00905609]
[12.59491920 -106.98420715]
[27.28725624 -103.96174622]
[40.65514755 -97.15737152]
[51.74460602 -87.05668640]
[59.76423645 -74.38050079]
[64.14167023 -60.03379059]
[67.94648743 -74.54321289]
[71.75130463 -89.05263519]
[75.55612183 -103.56205750]
[79.36093903 -118.07147980]
[83.16576385 -132.58090210]
[86.97058105 -147.09033203]
[81.13526154 -158.64486694]
[84.65287781 -170.68415833]
[95.10025787 -176.86909485]
[99.21427155 -191.29389954]
[103.32828522 -205.71870422]
[107.44229889 -220.14350891]
[111.55631256 -234.56829834]
[115.67031860 -248.99310303]
[119.78433228 -263.41790771]
[108.19242859 -277.28344727]
[107.19783020 -295.17230225]
[117.00856018 -309.97677612]
[133.57644653 -315.92648315]
[137.07034302 -330.51388550]
[132.76026917 -345.73669434]
[143.24926758 -356.31167603]
[146.74314880 -370.89910889]
[150.23704529 -385.48651123]
[140.78396606 -397.94338989]
[141.60125732 -413.55960083]
[152.30297852 -424.96163940]
[167.83613586 -426.76586914]
[180.86642456 -418.12030029]
[185.24136353 -403.10717773]
[178.89521790 -388.81521606]
[164.82446289 -381.99261475]
[161.33056641 -367.40521240]
[157.83668518 -352.81777954]
[162.39665222 -338.63836670]
[151.65776062 -327.01998901]
[148.16386414 -312.43258667]
[157.38690186 -304.41726685]
[162.33047485 -293.16351318]
[161.99012756 -280.80407715]
[156.36923218 -269.71020508]
[146.49021912 -262.03680420]
[134.20913696 -259.30389404]
[130.09512329 -244.87908936]
[125.98110962 -230.45429993]
[121.86709595 -216.02949524]
[117.75308228 -201.60469055]
[113.63907623 -187.17988586]
[109.52506256 -172.75508118]
[114.72872162 -156.02699280]
[101.48000336 -143.28550720]
[97.67518616 -128.77609253]
[93.87036896 -114.26666260]
[90.06554413 -99.75724030]
[86.26072693 -85.24781799]
[82.45590973 -70.73839569]
[78.65109253 -56.22896957]
[78.17031860 -41.23667526]
[81.03769684 -26.51329041]
[83.90507507 -11.78990269]
[86.77245331 2.93348503]
[89.79699707 17.62539291]
[92.97835541 32.28414154]
[96.15971375 46.94289398]
[99.34107971 61.60164261]
[102.52243805 76.26039124]
[115.94647217 82.23368835]
[123.33012390 94.93670654]
[121.87653351 109.55765533]
[112.13631439 120.55825043]
[115.31767273 135.21699524]
[118.49903107 149.87574768]
[121.83684540 164.49966431]
[135.02493286 172.78894043]
[138.36042786 187.63243103]
[130.37658691 200.15417480]
[133.87048340 214.74159241]
[137.36436462 229.32901001]
[141.01393127 243.87826538]
[154.37614441 251.88381958]
[158.02807617 266.65264893]
[150.31364441 279.34213257]
[154.11846924 293.85156250]
[169.15371704 296.27255249]
[181.90083313 304.60507202]
[190.15130615 317.40545654]
[192.47569275 332.45593262]
[188.47128296 347.14895630]
[178.83186340 358.93881226]
[165.22750854 365.78292847]
[150.01527405 366.49542236]
[135.83074951 360.95291138]
[125.13151550 350.11566162]
[119.77126312 335.86126709]
[120.67869568 320.65942383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[5 130]
[7 129]
[8 128]
[9 127]
[12 124]
[14 123]
[15 122]
[16 121]
[20 117]
[21 116]
[22 115]
[23 114]
[24 113]
[26 112]
[27 111]
[28 110]
[29 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[70 88]
[71 87]
[73 85]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
