%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUGCCUAGCAACCGGUGGUGCCAAACACUGGAGCUCAGAGCGGGGGGCGCGGAGAGCGAAGCGGGAAAGGAGGUGGUGUCUGUGAACAGGCCUAGGGGUUUCUGACCCUUCUGGUUUCUGUGCC\
) } def
/len { sequence length } bind def

/coor [
[-64.10544586 192.75068665]
[-75.13579559 196.86575317]
[-86.65586090 195.11456299]
[-95.77445221 188.05517578]
[-109.89761353 193.10852051]
[-124.02077484 198.16186523]
[-138.14393616 203.21520996]
[-152.20402527 208.44149780]
[-166.19891357 213.83992004]
[-180.12649536 219.40968323]
[-193.98469543 225.14993286]
[-207.84289551 230.89018250]
[-213.53378296 242.54168701]
[-225.27812195 247.00759888]
[-236.52836609 242.38594055]
[-250.52326965 247.78436279]
[-264.51815796 253.18278503]
[-278.51306152 258.58120728]
[-292.50793457 263.97964478]
[-306.50283813 269.37805176]
[-310.36413574 284.40704346]
[-322.34323120 294.27014160]
[-337.83389282 295.17483521]
[-350.87969971 286.77322388]
[-356.46420288 272.29589844]
[-352.44009399 257.30969238]
[-340.35470581 247.57711792]
[-324.85513306 246.84053040]
[-311.90124512 255.38317871]
[-297.90637207 249.98474121]
[-283.91146851 244.58631897]
[-269.91659546 239.18789673]
[-255.92169189 233.78947449]
[-241.92680359 228.39105225]
[-231.72372437 214.16842651]
[-213.58314514 217.03198242]
[-199.72494507 211.29173279]
[-185.86676025 205.55148315]
[-180.83810425 200.02699280]
[-171.59733582 199.84503174]
[-157.60244751 194.44659424]
[-152.43972778 189.04718018]
[-143.19728088 189.09205627]
[-129.07412720 184.03869629]
[-114.95095825 178.98535156]
[-100.82779694 173.93200684]
[-94.10606384 156.98748779]
[-76.87874603 150.12043762]
[-59.76946640 158.06074524]
[-45.91127396 152.32048035]
[-32.05308151 146.58023071]
[-18.19488716 140.83998108]
[-4.33669472 135.09973145]
[9.52149868 129.35948181]
[23.37969208 123.61923218]
[37.23788452 117.87897491]
[51.09607697 112.13872528]
[64.95426941 106.39847565]
[73.75180054 94.37962341]
[89.46243286 96.24686432]
[103.24913788 90.33698273]
[116.96228790 84.25836182]
[130.67543030 78.17974091]
[144.38858032 72.10112000]
[151.05146790 65.69558716]
[158.51365662 66.04619598]
[172.37184143 60.30594254]
[176.08856201 47.29429245]
[186.49053955 38.94742966]
[199.60859680 38.16108322]
[210.60154724 44.99943924]
[224.59645081 39.60101318]
[238.59133911 34.20258713]
[252.58622742 28.80416107]
[266.58111572 23.40573692]
[276.67196655 11.22027683]
[291.33102417 13.85864067]
[305.11773682 7.94876003]
[318.67758179 1.53543377]
[325.18124390 -5.03168917]
[332.64981079 -4.86431646]
[346.36294556 -10.94293594]
[360.07611084 -17.02155685]
[373.78924561 -23.10017586]
[387.50238037 -29.17879486]
[396.72079468 -42.74173737]
[413.05377197 -41.27016449]
[419.69937134 -26.27790260]
[409.82116699 -13.18770790]
[393.58102417 -15.46564865]
[379.86785889 -9.38702965]
[366.15472412 -3.30840969]
[352.44158936 2.77021003]
[338.72842407 8.84882927]
[325.09091187 15.09527302]
[311.53106689 21.50860023]
[310.00448608 24.79772377]
[306.75115967 27.47421837]
[302.09475708 28.70783997]
[296.72946167 27.85353279]
[287.63961792 39.65285873]
[271.97955322 37.40062714]
[257.98464966 42.79905319]
[243.98976135 48.19747925]
[229.99487305 53.59590530]
[215.99998474 58.99433136]
[209.89454651 74.61353302]
[194.09039307 81.16023254]
[178.11210632 74.16413879]
[164.25390625 79.90438843]
[150.46719360 85.81427002]
[136.75405884 91.89289093]
[123.04090881 97.97150421]
[109.32775879 104.05012512]
[103.75102234 109.99699402]
[95.20268250 110.10505676]
[85.41392517 122.53448486]
[70.69451904 120.25666809]
[56.83633041 125.99691772]
[42.97813416 131.73716736]
[29.11994362 137.47741699]
[15.26175022 143.21766663]
[1.40355682 148.95793152]
[-12.45463657 154.69818115]
[-26.31282997 160.43843079]
[-40.17102051 166.17868042]
[-54.02921677 171.91893005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[7 43]
[8 41]
[9 40]
[10 38]
[11 37]
[12 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[49 127]
[50 126]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[56 120]
[57 119]
[58 118]
[60 116]
[61 114]
[62 113]
[63 112]
[64 111]
[66 110]
[67 109]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[77 100]
[78 96]
[79 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
