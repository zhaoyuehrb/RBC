%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCCGCGGAGCCCGAGCGGCGGCUGCGCAGUCCCGCUGGGGGAGGGCGUCGCGGGCAUCGGUCUCACCUGGACGGACGAUCCGCUCAGCGCCCGCAGUCGGUGGUUAGCCCACGGCG\
) } def
/len { sequence length } bind def

/coor [
[72.52559662 478.66973877]
[56.76922989 477.43997192]
[46.56100464 465.37481689]
[47.95728302 449.63232422]
[60.12968063 439.55224609]
[61.29685974 424.59771729]
[62.46404266 409.64318848]
[63.63122177 394.68869019]
[56.90771484 381.39794922]
[65.69537354 368.24166870]
[66.86255646 353.28713989]
[64.21413422 346.28933716]
[68.25910950 337.96121216]
[69.81412506 323.04202271]
[62.41027832 313.38040161]
[63.66333008 300.86831665]
[73.44193268 292.33688354]
[75.38373566 277.46310425]
[69.35913086 263.84130859]
[78.81781006 251.15887451]
[80.75961304 236.28509521]
[74.73500824 222.66328430]
[84.19367981 209.98086548]
[86.13548279 195.10707092]
[88.07729340 180.23329163]
[90.01909637 165.35951233]
[91.96089935 150.48573303]
[93.90270233 135.61195374]
[95.84450531 120.73816681]
[85.42359161 131.52726746]
[70.59280396 129.28053284]
[63.83501434 115.88903809]
[70.83816528 102.62419891]
[85.70787048 100.65088654]
[72.58962250 93.37685394]
[59.47137833 86.10281372]
[46.35313034 78.82878113]
[30.59685516 81.84860229]
[18.50620461 71.30366516]
[19.35608864 55.28314209]
[32.49455261 46.07660294]
[47.84288788 50.74652100]
[53.62716675 65.71053314]
[66.74541473 72.98457336]
[79.86366272 80.25860596]
[92.98191071 87.53264618]
[107.52793121 83.87023163]
[115.63754272 71.25143433]
[123.74715424 58.63262939]
[131.85676575 46.01382446]
[139.96638489 33.39502335]
[148.07598877 20.77621841]
[148.00421143 0.69833803]
[165.36747742 -7.64723396]
[172.81120300 -20.66994858]
[180.25491333 -33.69266129]
[187.69862366 -46.71537399]
[195.14234924 -59.73809052]
[202.41638184 -72.85633850]
[202.13655090 -88.67506409]
[214.97824097 -96.22094727]
[222.08137512 -109.43251038]
[221.80154419 -125.25124359]
[234.64323425 -132.79711914]
[241.74636841 -146.00869751]
[248.84948730 -159.22026062]
[255.95262146 -172.43182373]
[252.72851562 -188.14756775]
[263.11560059 -200.37409973]
[279.14581299 -199.73225403]
[288.52212524 -186.71441650]
[284.05184937 -171.30674744]
[269.16418457 -165.32870483]
[262.06106567 -152.11712646]
[254.95793152 -138.90556335]
[247.85479736 -125.69399261]
[248.64270020 -110.82024384]
[235.29293823 -102.32938385]
[228.18981934 -89.11781311]
[228.97770691 -74.24406433]
[215.62796021 -65.75320435]
[215.22700500 -58.28174591]
[208.16505432 -52.29437256]
[200.72134399 -39.27165985]
[193.27763367 -26.24894524]
[185.83390808 -13.22623062]
[178.39019775 -0.20351692]
[181.98539734 9.51897335]
[179.52032471 19.81501007]
[171.58747864 27.15568161]
[160.69479370 28.88583183]
[152.58517456 41.50463486]
[144.47557068 54.12343597]
[136.36595154 66.74224091]
[128.25634766 79.36104584]
[120.14673615 91.97984314]
[110.71828461 122.67996979]
[108.77648163 137.55375671]
[106.83467865 152.42753601]
[104.89287567 167.30131531]
[102.95107269 182.17509460]
[101.00926971 197.04887390]
[99.06746674 211.92266846]
[104.95317841 226.60833740]
[95.63339233 238.22689819]
[93.69158936 253.10067749]
[99.57730103 267.78634644]
[90.25751495 279.40490723]
[88.31571198 294.27868652]
[95.79806519 311.04260254]
[84.73330688 324.59704590]
[83.17828369 339.51620483]
[81.81707764 354.45431519]
[80.64989471 369.40884399]
[87.28991699 383.76922607]
[78.58573914 395.85586548]
[77.41856384 410.81036377]
[76.25138092 425.76489258]
[75.08420563 440.71942139]
[85.54524994 452.56600952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 119]
[6 118]
[7 117]
[8 116]
[10 114]
[11 113]
[13 112]
[14 111]
[17 109]
[18 108]
[20 106]
[21 105]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[29 97]
[34 46]
[35 45]
[36 44]
[37 43]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[52 91]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[59 81]
[61 79]
[62 78]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
