%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCAGCCUCAGGAACUGCCCCCAGCCAUCGAGCCUUGGCUACUUAAGGGACCUGGGCCCAAUCCACAGCUGGGACAGUCCUGGCCCACUGCACUGGGAAUCUAGG\
) } def
/len { sequence length } bind def

/coor [
[113.49057007 390.90029907]
[110.84435272 376.13555908]
[113.00932312 361.29263306]
[119.76268768 347.89889526]
[130.40950012 337.33264160]
[143.85414124 330.68121338]
[158.71310425 328.62908936]
[173.45732117 331.38739014]
[186.56930542 338.67211914]
[180.57574463 324.92160034]
[174.58216858 311.17105103]
[168.58859253 297.42053223]
[162.59501648 283.67001343]
[156.60144043 269.91946411]
[150.95474243 264.96752930]
[150.64035034 255.67619324]
[145.05302429 241.75564575]
[139.46569824 227.83508301]
[128.39031982 222.72978210]
[123.67109680 211.04870605]
[128.38313293 198.93132019]
[123.20687103 184.85275269]
[118.03060913 170.77416992]
[112.85435486 156.69558716]
[107.67809296 142.61701965]
[102.50183868 128.53843689]
[87.92950439 125.98085022]
[76.57656860 116.49376678]
[71.47102356 102.60752869]
[73.97461700 88.02582550]
[83.41958618 76.63781738]
[78.24332428 62.55924225]
[72.24974823 48.80871201]
[65.45951843 35.43363190]
[58.66929245 22.05855179]
[51.87906265 8.68347168]
[38.73283768 -0.11921942]
[39.87056732 -14.97030830]
[33.08033752 -28.34538841]
[26.09449577 -41.61935043]
[18.91454697 -54.78932953]
[3.55083346 -57.70314407]
[-6.30540895 -69.84351349]
[-6.00036335 -85.47811890]
[4.32193613 -97.22478485]
[19.78761673 -99.53708649]
[33.09425354 -91.32323456]
[37.95886612 -76.46155548]
[32.08452606 -61.96927643]
[39.26447296 -48.79929733]
[45.32489014 -44.36326981]
[46.45541763 -35.13562012]
[53.24564743 -21.76053810]
[65.90618896 -13.91452217]
[65.25414276 1.89324212]
[72.04437256 15.26832294]
[78.83460236 28.64340401]
[85.62483215 42.01848221]
[88.41987610 42.97840118]
[90.96886444 45.19225311]
[92.75684357 48.55875778]
[93.32089996 52.77902985]
[92.32190704 57.38298416]
[97.49816132 71.46156311]
[112.07049561 74.01914978]
[123.42343140 83.50623322]
[128.52897644 97.39247131]
[126.02538300 111.97417450]
[116.58041382 123.36218262]
[121.75667572 137.44075012]
[126.93292999 151.51933289]
[132.10919189 165.59791565]
[137.28544617 179.67648315]
[142.46170044 193.75506592]
[156.86033630 205.11531067]
[153.38624573 222.24775696]
[158.97357178 236.16831970]
[164.56089783 250.08886719]
[170.35197449 263.92590332]
[176.34555054 277.67642212]
[182.33911133 291.42697144]
[188.33268738 305.17749023]
[194.32626343 318.92800903]
[200.31983948 332.67855835]
[209.52388000 344.52276611]
[221.36810303 353.72680664]
[233.21232605 362.93084717]
[245.05654907 372.13488770]
[260.70480347 369.91946411]
[273.28591919 379.48455811]
[275.33578491 395.15533447]
[265.63824463 407.63464355]
[249.94664001 409.51870728]
[237.57057190 399.68975830]
[235.85250854 383.97912598]
[224.00828552 374.77508545]
[212.16406250 365.57104492]
[200.31983948 356.36700439]
[204.14048767 370.87225342]
[203.17167664 385.84094238]
[197.51310730 399.73269653]
[187.74708557 411.11798096]
[174.87855530 418.82519531]
[160.23178101 422.06121826]
[145.31398010 420.49307251]
[131.66026306 414.28210449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[16 78]
[17 77]
[18 76]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[31 64]
[32 63]
[33 58]
[34 57]
[35 56]
[36 55]
[38 53]
[39 52]
[40 50]
[41 49]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
