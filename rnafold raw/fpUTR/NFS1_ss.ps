%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGGGCAGCACUUCCGGGAGCCUGGGGCCCAGGACUGCAGCGGCUUCGGAAGGUGGGCUCUGCCAGCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[126.09228516 385.41659546]
[129.17257690 370.20834351]
[140.62652588 359.73995972]
[138.81848145 344.84933472]
[137.01043701 329.95870972]
[127.58294678 322.10586548]
[126.09838867 309.51889038]
[133.92350769 299.03924561]
[132.71650696 284.08789062]
[131.50952148 269.13653564]
[130.30252075 254.18516541]
[129.09552002 239.23381042]
[126.68934631 224.42805481]
[123.09961700 209.86393738]
[119.50988007 195.29980469]
[115.62759399 180.81091309]
[111.45433044 166.40313721]
[107.28106689 151.99537659]
[103.10781097 137.58760071]
[98.93454742 123.17983246]
[94.76128387 108.77205658]
[89.53759766 102.31690216]
[90.72264099 93.69964600]
[87.13290405 79.13551331]
[83.54317474 64.57138824]
[79.95343781 50.00726318]
[75.78017426 35.59949112]
[71.03015900 21.37144279]
[59.32097244 10.73163223]
[62.62976456 -3.79080439]
[57.87974548 -18.01885033]
[52.84417725 -32.14836121]
[39.80602646 -42.09514999]
[42.16920090 -58.32313538]
[57.50267029 -64.13835144]
[70.03267670 -53.55860901]
[66.86942291 -37.46743393]
[72.33655548 -32.18565369]
[72.10778809 -22.76887131]
[76.85781097 -8.54082394]
[88.22724152 1.08130169]
[85.25820160 16.62142372]
[90.00822449 30.84947014]
[94.05359650 33.84321976]
[96.09048462 39.52765656]
[94.51756287 46.41752625]
[98.10729980 60.98165512]
[101.69703674 75.54578400]
[105.28677368 90.10990906]
[109.16905212 104.59879303]
[113.34231567 119.00656891]
[117.51557922 133.41433716]
[121.68884277 147.82211304]
[125.86210632 162.22988892]
[130.03536987 176.63764954]
[135.57298279 184.25756836]
[134.07400513 191.71006775]
[137.66374207 206.27420044]
[141.25347900 220.83831787]
[144.88935852 224.27812195]
[146.84498596 228.33796692]
[147.14727783 232.34207153]
[146.06462097 235.70837402]
[144.04687500 238.02680969]
[145.25387573 252.97817993]
[146.46087646 267.92953491]
[147.66787720 282.88088989]
[148.87487793 297.83224487]
[159.70295715 312.56527710]
[151.90106201 328.15063477]
[153.70910645 343.04129028]
[155.51716614 357.93191528]
[169.14352417 365.35498047]
[175.77389526 379.38415527]
[172.85874939 394.62493896]
[161.51904297 405.21694946]
[146.11509705 407.08731079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 59]
[14 58]
[15 57]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 43]
[28 42]
[30 40]
[31 39]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
