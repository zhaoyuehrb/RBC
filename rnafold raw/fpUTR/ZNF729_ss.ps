%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUCGCCUUCACUGCUGUGUGUCCUCAGCCUCUGUGGCCCUGUAACCUGCGGCAUUGGAAGAUCCACAGCUAAC\
) } def
/len { sequence length } bind def

/coor [
[10.41158962 306.58352661]
[4.45998812 320.35226440]
[-1.49161327 334.12103271]
[-2.22612453 351.05905151]
[-18.70554161 355.04214478]
[-27.09494400 340.30938721]
[-15.26036167 328.16940308]
[-9.30876064 314.40066528]
[-3.35715961 300.63192749]
[-13.03031063 290.48406982]
[-18.07175446 277.35549927]
[-17.67444611 263.25415039]
[-11.86592388 250.35058594]
[-1.50925553 240.64399719]
[11.82505322 235.65234375]
[26.09715843 236.17509460]
[32.60541534 222.66056824]
[39.11367035 209.14602661]
[45.62192535 195.63150024]
[52.13018417 182.11695862]
[58.63843918 168.60243225]
[57.18952942 153.77845764]
[70.14826202 144.70202637]
[76.65652466 131.18750000]
[83.16477966 117.67296600]
[77.24166870 108.82137299]
[75.65180206 98.29016113]
[78.69789886 88.08451843]
[85.79997253 80.14760590]
[95.60576630 75.99064636]
[106.24823761 76.40512848]
[114.35784912 63.78632736]
[111.21178436 48.53050613]
[119.61584473 35.84877014]
[134.17932129 32.94350052]
[142.28894043 20.32469749]
[150.39855957 7.70589399]
[151.35046387 -8.08664989]
[164.74037170 -14.61041164]
[172.84999084 -27.22921562]
[165.74090576 -40.84378815]
[166.40759277 -56.18820572]
[174.67070007 -69.13489532]
[188.30747986 -76.20125580]
[203.64973450 -75.48648071]
[216.57046509 -67.18283844]
[223.59403992 -53.52396393]
[222.83117676 -38.18402863]
[214.48707581 -25.28939629]
[200.80625916 -18.30866051]
[185.46878052 -19.11960220]
[177.35917664 -6.50079966]
[176.98731995 8.38916302]
[163.01734924 15.81550598]
[154.90774536 28.43430901]
[146.79812622 41.05311203]
[150.20529175 55.50741577]
[142.16075134 68.42019653]
[126.97664642 71.89594269]
[118.86703491 84.51473999]
[124.25819397 102.70153809]
[114.99796295 119.25666809]
[96.67931366 124.18122101]
[90.17105103 137.69575500]
[83.66279602 151.21028137]
[84.64619446 167.00090027]
[72.15296936 175.11068726]
[65.64471436 188.62521362]
[59.13645935 202.13975525]
[52.62820435 215.65428162]
[46.11994934 229.16882324]
[39.61169052 242.68334961]
[49.80195618 255.19477844]
[53.56909943 270.82586670]
[50.22122955 286.49319458]
[40.46494293 299.12829590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[16 72]
[17 71]
[18 70]
[19 69]
[20 68]
[21 67]
[23 65]
[24 64]
[25 63]
[31 60]
[32 59]
[35 56]
[36 55]
[37 54]
[39 52]
[40 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
