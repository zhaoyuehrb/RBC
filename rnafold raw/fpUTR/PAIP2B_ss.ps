%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUGCAGUAAGAGAUAACCUGGCAAGUGGUAGUGGCGCUUCUCGGGUGCUGUGCUUCACGUUUUGGUACUAAAGGCCGAGACUGUUGUGGCGACGGCGACCUCUACGGCAACGGCUUAAGCUCUCGGAGGAGUGGCAGAGUACGAUCUGAAGGAGGGGCUUCUGGUUAGCCCAGGUUCCAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[82.45743561 123.80895233]
[76.81687164 118.36164856]
[72.80618286 111.62343597]
[70.70735931 104.06803894]
[70.66794586 96.22663116]
[56.76227188 90.60237122]
[42.85660172 84.97810364]
[27.16211891 86.97653961]
[18.26447678 75.03161621]
[4.35880661 69.40735626]
[-9.54686356 63.78309250]
[-18.69609070 63.46369553]
[-23.63663292 57.94691849]
[-37.44638062 52.09107971]
[-51.25613022 46.23524094]
[-62.57130814 56.15877914]
[-77.99035645 59.14687729]
[-93.43256378 53.73897552]
[-104.47238159 40.78807449]
[-118.07875061 47.10209656]
[-131.68511963 53.41611862]
[-145.29147339 59.73013687]
[-158.89784241 66.04415894]
[-172.50419617 72.35818481]
[-181.76531982 85.18558502]
[-196.56700134 83.52450562]
[-210.17337036 89.83852386]
[-223.77973938 96.15254974]
[-237.38609314 102.46656799]
[-250.99246216 108.78059387]
[-254.89285278 123.92393494]
[-267.64468384 132.97518921]
[-283.22689819 131.66061401]
[-294.28210449 120.60091400]
[-295.59030151 105.01815033]
[-286.53387451 92.27001953]
[-271.38894653 88.37580109]
[-257.30648804 95.17422485]
[-243.70011902 88.86020660]
[-230.09375000 82.54618073]
[-216.48739624 76.23216248]
[-202.88102722 69.91814423]
[-194.59313965 57.54235458]
[-178.81822205 58.75181961]
[-165.21186829 52.43779755]
[-151.60549927 46.12377548]
[-137.99913025 39.80975342]
[-124.39276886 33.49573135]
[-110.78640747 27.18171120]
[-107.18730927 12.61989403]
[-116.28555298 0.69420773]
[-125.38379669 -11.23147774]
[-134.48204041 -23.15716362]
[-143.58027649 -35.08285141]
[-152.77784729 -46.93210220]
[-162.07409668 -58.70409393]
[-171.37034607 -70.47608185]
[-185.99522400 -76.51126099]
[-187.81072998 -91.29480743]
[-197.10697937 -103.06679535]
[-206.50125122 -114.76070404]
[-216.08963013 -126.29600525]
[-225.77404785 -137.75077820]
[-235.45846558 -149.20556641]
[-245.14288330 -160.66035461]
[-254.82730103 -172.11512756]
[-264.51171875 -183.56991577]
[-274.19613647 -195.02470398]
[-283.88055420 -206.47947693]
[-299.51629639 -206.24049377]
[-311.61492920 -216.14793396]
[-314.46380615 -231.52381897]
[-306.71780396 -245.10812378]
[-292.03433228 -250.48675537]
[-277.34649658 -245.12008667]
[-269.58941650 -231.54209900]
[-272.42578125 -216.16389465]
[-262.74136353 -204.70912170]
[-253.05693054 -193.25433350]
[-243.37251282 -181.79954529]
[-233.68809509 -170.34477234]
[-224.00367737 -158.88998413]
[-214.31925964 -147.43519592]
[-204.63484192 -135.98042297]
[-197.90199280 -132.89617920]
[-194.88624573 -124.25236511]
[-188.20587158 -121.05605316]
[-185.33497620 -112.36304474]
[-176.03874207 -100.59105682]
[-162.07878113 -95.39788818]
[-159.59835815 -79.77233124]
[-150.30210876 -68.00034332]
[-141.00585938 -56.22835159]
[-134.37982178 -52.92085648]
[-131.65460205 -44.18109131]
[-122.55635071 -32.25540543]
[-113.45811462 -20.32972145]
[-104.35987091 -8.40403461]
[-95.26162720 3.52165103]
[-76.94386292 -3.17522144]
[-58.80665207 1.58203685]
[-47.11511612 15.26549244]
[-45.40029144 32.42549133]
[-31.59054184 38.28133011]
[-17.78079414 44.13716888]
[-3.92260027 49.87742233]
[9.98307037 55.50168610]
[23.88874054 61.12594604]
[38.58859634 58.72522736]
[48.48086548 71.07243347]
[62.38653564 76.69670105]
[76.29220581 82.32096100]
[100.24709320 70.42726135]
[123.99989319 82.71958160]
[137.99760437 77.32846832]
[151.94978333 71.82058716]
[165.85545349 66.19631958]
[179.76112366 60.57205963]
[193.66679382 54.94779587]
[199.41957092 43.38906860]
[211.13317871 38.99659348]
[222.32575989 43.61767197]
[236.32347107 38.22655487]
[250.32118225 32.83543777]
[264.27334595 27.32755661]
[278.17901611 21.70329285]
[292.08468628 16.07903099]
[301.74423218 2.82664895]
[318.01995850 4.83466864]
[324.16885376 20.03741074]
[313.86541748 32.79559708]
[297.70895386 29.98470116]
[283.80328369 35.60896301]
[269.89761353 41.23322678]
[264.86557007 46.66667938]
[255.71229553 46.83314896]
[241.71458435 52.22426605]
[227.71687317 57.61538315]
[217.45228577 71.83889008]
[199.29106140 68.85346222]
[185.38539124 74.47772980]
[171.47972107 80.10198975]
[157.57405090 85.72625732]
[152.54200745 91.15970612]
[143.38871765 91.32617950]
[129.39100647 96.71729279]
[129.49307251 102.18328094]
[128.58728027 107.57466888]
[126.70458221 112.70720673]
[123.90933228 117.40550232]
[133.40098572 129.02050781]
[142.89265442 140.63552856]
[157.61633301 146.42547607]
[159.67861938 161.17662048]
[169.17027283 172.79162598]
[178.66192627 184.40663147]
[188.15357971 196.02165222]
[197.93338013 207.39511108]
[207.99514771 218.51989746]
[218.05691528 229.64468384]
[228.11868286 240.76945496]
[238.18045044 251.89424133]
[253.79949951 251.13290405]
[266.22241211 260.63055420]
[269.58349609 275.90264893]
[262.29574585 289.73818970]
[247.80020142 295.60449219]
[232.94122314 290.73159790]
[224.73477173 277.42041016]
[227.05567932 261.95602417]
[216.99391174 250.83123779]
[206.93212891 239.70645142]
[196.87036133 228.58166504]
[186.80859375 217.45689392]
[183.30453491 216.92156982]
[179.88905334 214.65032959]
[177.38070679 210.70507812]
[176.53857422 205.51330566]
[167.04692078 193.89830017]
[157.55526733 182.28329468]
[148.06359863 170.66827393]
[134.01882935 165.70910645]
[131.27763367 150.12718201]
[121.78598022 138.51217651]
[112.29432678 126.89716339]
[104.79330444 129.18273926]
[96.95529175 129.41662598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[9 108]
[10 107]
[11 106]
[13 105]
[14 104]
[15 103]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 93]
[56 92]
[57 91]
[59 89]
[60 88]
[61 86]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[114 146]
[115 145]
[116 143]
[117 142]
[118 141]
[119 140]
[122 138]
[123 137]
[124 136]
[125 134]
[126 133]
[127 132]
[150 185]
[151 184]
[152 183]
[154 181]
[155 180]
[156 179]
[157 178]
[158 174]
[159 173]
[160 172]
[161 171]
[162 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
