%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUGCUGUGGUUGGUCAGUCCAGUAAGAAGCCAGCAGGGCUGGUGCUGGGGCUUCUUCUCCUGAAGGGGCUGCAAGAGGGAAGGCUUAGCC\
) } def
/len { sequence length } bind def

/coor [
[92.03144073 104.48426819]
[77.13179779 102.75199890]
[62.23216248 101.01972961]
[47.33252335 99.28746033]
[32.43288422 97.55519104]
[17.53324509 95.82292175]
[2.60700059 94.33723450]
[-12.34176636 93.09854889]
[-27.29053497 91.85985565]
[-41.68251419 98.43112183]
[-53.72737503 89.66923523]
[-68.67613983 88.43054962]
[-77.68918610 90.87388611]
[-84.09596252 86.89573669]
[-98.99560547 85.16346741]
[-113.89524078 83.43119812]
[-128.79487610 81.69892883]
[-143.69451904 79.96665955]
[-152.01866150 87.34999847]
[-162.82789612 88.78952789]
[-172.39622498 84.03926086]
[-177.56431580 74.94458008]
[-192.31689453 72.23136902]
[-205.18539429 81.40618896]
[-220.75834656 78.71199036]
[-229.79660034 65.74720764]
[-226.93791199 50.20361328]
[-213.87829590 41.30294037]
[-198.36579895 44.32580566]
[-189.60368347 57.47879410]
[-174.85112000 60.19200134]
[-157.35034180 52.25315094]
[-141.96224976 65.06701660]
[-127.06261444 66.79928589]
[-112.16297150 68.53155518]
[-97.26333618 70.26383209]
[-82.36369324 71.99610138]
[-67.43745422 73.48178101]
[-52.48868179 74.72047424]
[-39.16593933 68.06060791]
[-26.05184364 76.91108704]
[-11.10307693 78.14978027]
[3.84569073 79.38847351]
[10.91092873 76.75125885]
[19.26551437 80.92327881]
[34.16515350 82.65554810]
[49.06479263 84.38781738]
[63.96443176 86.12009430]
[78.86406708 87.85236359]
[93.76371002 89.58463287]
[108.46940613 86.62787628]
[116.70148468 73.11701202]
[131.58766174 73.61819458]
[144.65992737 66.26184082]
[157.73217773 58.90548706]
[170.80444336 51.54913330]
[183.87670898 44.19278336]
[196.94897461 36.83642960]
[210.02124023 29.48007774]
[223.09350586 22.12372398]
[236.16577148 14.76737213]
[244.05125427 0.38853103]
[260.45016479 0.29870981]
[268.49267578 14.59030819]
[259.90536499 28.56135559]
[243.52212524 27.83963585]
[230.44985962 35.19598770]
[217.37759399 42.55234146]
[204.30532837 49.90869141]
[191.23306274 57.26504517]
[178.16079712 64.62139893]
[165.08853149 71.97775269]
[152.01628113 79.33410645]
[138.94401550 86.69045258]
[131.64694214 99.67514801]
[115.82575989 99.70013428]
[130.82456970 99.51150513]
[145.58647156 96.84951019]
[159.25021362 103.03839874]
[166.98526001 115.89020538]
[166.05706787 130.86146545]
[156.79376221 142.65939331]
[142.47018433 147.11308289]
[128.15014648 142.64804077]
[118.89639282 130.84329224]
[107.82039642 120.72783661]
[112.69088745 134.91510010]
[117.56138611 149.10235596]
[128.42308044 162.12004089]
[118.92094421 176.16090393]
[102.79834747 170.91702271]
[103.37412262 153.97285461]
[98.50363159 139.78558350]
[93.63314056 125.59832764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 43]
[8 42]
[9 41]
[11 39]
[12 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[22 31]
[23 30]
[51 76]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
