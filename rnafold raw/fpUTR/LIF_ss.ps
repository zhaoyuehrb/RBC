%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUGGACUGGGGAUCCCGGCUAAAUAUAGCUGUUUCUGUCUUACAACACAGGCUCCAGUAUAUAAAUCAGGCAAAUUCCCCAUUUGAGCAUGAACCUCUGAAAACUGCCGGCAUCUGAGGUUUCCUCCAAGGCCCUCUGAAGUGCAGCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[137.92616272 181.09739685]
[128.48464966 166.73367310]
[122.66510773 150.55181885]
[120.79425812 133.44976807]
[122.97958374 116.37739563]
[108.88990784 111.23143005]
[95.08596039 113.45465088]
[85.96412659 102.85825348]
[71.87445068 97.71228027]
[56.25738907 100.24566650]
[46.95690536 88.61165619]
[32.86722946 83.46569061]
[18.77754974 78.31971741]
[4.68787289 73.17375183]
[-9.40180492 68.02777863]
[-23.49148178 62.88181305]
[-33.76205063 72.42273712]
[-47.08153534 76.57621765]
[-60.82354736 74.58317566]
[-72.30415344 66.89067841]
[-79.30608368 55.05326080]
[-80.50684357 41.41907883]
[-94.49073792 35.99222183]
[-108.47462463 30.56536484]
[-123.36441040 40.83035278]
[-141.28028870 40.15194702]
[-155.10755920 28.98696709]
[-159.46739197 11.91935349]
[-173.65721130 7.05633259]
[-187.84703064 2.19331217]
[-202.03684998 -2.66970849]
[-216.27461243 -7.39051771]
[-230.55889893 -11.96864319]
[-244.84318542 -16.54676819]
[-259.12747192 -21.12489510]
[-274.50210571 -12.83611584]
[-290.80255127 -18.10085869]
[-298.12966919 -33.21057129]
[-312.50271606 -37.50196838]
[-326.87573242 -41.79336548]
[-341.24874878 -46.08476257]
[-355.62179565 -50.37615967]
[-367.87054443 -40.85001373]
[-383.38040161 -40.37648773]
[-396.18746948 -49.13766479]
[-401.36721802 -63.76469421]
[-396.92788696 -78.63318634]
[-384.57650757 -88.02589417]
[-369.06243896 -88.33113861]
[-356.35113525 -79.43154907]
[-351.33038330 -64.74919128]
[-336.95736694 -60.45779037]
[-322.58435059 -56.16639328]
[-308.21130371 -51.87499619]
[-293.83828735 -47.58359909]
[-283.43881226 -55.24635315]
[-270.32876587 -55.50674057]
[-259.31036377 -48.04445267]
[-254.54934692 -35.40917969]
[-240.26506042 -30.83105278]
[-225.98077393 -26.25292778]
[-211.69648743 -21.67480087]
[-204.32568359 -22.63352203]
[-197.17382812 -16.85952950]
[-182.98400879 -11.99650955]
[-168.79418945 -7.13348866]
[-154.60437012 -2.27046800]
[-145.76319885 -10.68098640]
[-134.10935974 -14.53625870]
[-121.85298157 -13.04006195]
[-111.34633636 -6.41730928]
[-104.63241577 4.11725903]
[-103.04777527 16.58147240]
[-89.06388092 22.00832939]
[-75.07998657 27.43518448]
[-62.76181793 17.01675797]
[-46.78124237 14.19997597]
[-31.46748543 19.84370995]
[-21.01743698 32.50177765]
[-18.34551430 48.79213715]
[-4.25583601 53.93810654]
[9.83384132 59.08407211]
[23.92351913 64.23004150]
[38.01319504 69.37600708]
[52.10287476 74.52198029]
[66.71214294 71.62051392]
[77.02041626 83.62260437]
[91.11009216 88.76856995]
[104.91403961 86.54534912]
[114.03587341 97.14174652]
[128.12554932 102.28771973]
[134.86529541 91.14704895]
[143.47384644 81.38352203]
[153.67639160 73.30664062]
[165.14764404 67.17207336]
[177.52218628 63.17360306]
[190.40612793 61.43700027]
[203.38963318 62.01605606]
[216.05993652 64.89091492]
[228.01449585 69.96878052]
[238.87376404 77.08685303]
[248.29327393 86.01763153]
[255.97450256 96.47608948]
[261.67437744 108.12885284]
[265.21298218 120.60478210]
[266.47915649 133.50680542]
[265.43408203 146.42456055]
[262.11242676 158.94743347]
[275.61764526 165.47499084]
[289.12286377 172.00256348]
[302.62808228 178.53012085]
[309.32934570 178.42535400]
[314.30230713 181.31918335]
[316.53509521 185.59858704]
[329.76834106 192.66127014]
[345.58612061 192.33303833]
[353.17126465 205.15158081]
[366.40451050 212.21426392]
[382.22229004 211.88603210]
[389.80743408 224.70457458]
[403.04067993 231.76725769]
[416.27389526 238.82994080]
[429.50714111 245.89260864]
[439.78161621 242.11357117]
[450.21820068 244.59327698]
[457.39367676 252.26834106]
[459.09329224 262.41354370]
[472.03335571 270.00000000]
[484.97341919 277.58648682]
[501.69540405 280.38137817]
[503.63885498 297.22357178]
[487.99288940 303.75344849]
[477.38693237 290.52655029]
[464.44686890 282.94006348]
[451.50680542 275.35360718]
[432.25003052 276.69662476]
[422.44445801 259.12585449]
[409.21124268 252.06317139]
[395.97799683 245.00048828]
[382.74475098 237.93782043]
[367.87347412 238.77120972]
[359.34182739 225.44749451]
[346.10858154 218.38482666]
[331.23730469 219.21821594]
[322.70565796 205.89450073]
[309.47241211 198.83183289]
[296.10052490 192.03533936]
[282.59530640 185.50778198]
[269.09008789 178.98020935]
[255.58485413 172.45265198]
[244.94952393 185.87896729]
[231.46087646 196.44743347]
[215.86621094 203.56802368]
[199.03057861 206.84185791]
[181.88877869 206.08354187]
[165.39343262 201.33163452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 91]
[6 90]
[8 88]
[9 87]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[22 75]
[23 74]
[24 73]
[28 67]
[29 66]
[30 65]
[31 64]
[32 62]
[33 61]
[34 60]
[35 59]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[108 150]
[109 149]
[110 148]
[111 147]
[114 146]
[115 145]
[117 143]
[118 142]
[120 140]
[121 139]
[122 138]
[123 137]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
