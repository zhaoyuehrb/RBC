%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGCCUUGGCUACACCGUCUGUUAGGGCCGCGCACGAGAUCAGUAACUGAGACCUCACCGCGUUGACCCAGCACCAGGGCUCGCGGGGGUCCCGCGAGGGUCUCGGUAGCCGCGCGCCCAGAGACCCCCGCCGCGGCCCGAUUCUCUGAGCGCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[54.83126450 292.05807495]
[39.83714676 291.63809204]
[26.89367485 284.05740356]
[19.19244957 271.18530273]
[18.63217545 256.19696045]
[9.16585732 267.83261108]
[-0.30046201 279.46829224]
[-9.76678085 291.10394287]
[-19.23310089 302.73962402]
[-28.69941902 314.37530518]
[-38.16573715 326.01095581]
[-47.63205719 337.64663696]
[-42.08568192 351.96911621]
[-44.45947266 367.14346313]
[-54.11489105 379.08782959]
[-68.45468140 384.58929443]
[-83.62150574 382.16796875]
[-95.53557587 372.47512817]
[-100.99205780 358.11819458]
[-98.52318573 342.95901489]
[-88.79307556 331.07537842]
[-74.41907501 325.66394043]
[-59.26772690 328.18032837]
[-49.80140686 316.54464722]
[-40.33509064 304.90896606]
[-30.86877060 293.27331543]
[-21.40245056 281.63763428]
[-11.93613148 270.00195312]
[-2.46981215 258.36630249]
[6.99650717 246.73063660]
[8.40639687 236.54594421]
[18.13573647 230.27766418]
[25.42352104 217.16705322]
[32.71130371 204.05644226]
[39.99908829 190.94583130]
[39.41994476 176.06248474]
[52.88750458 167.75975037]
[60.04703140 154.57865906]
[67.07761383 141.32833862]
[74.10820007 128.07803345]
[81.13878632 114.82771301]
[75.16276550 101.06954193]
[60.68021393 97.16370392]
[46.19765854 93.25786591]
[31.71510124 89.35202026]
[14.84795856 91.06544495]
[8.53220844 75.33179474]
[21.90260506 64.90736389]
[35.62094116 74.86946869]
[50.10349655 78.77530670]
[64.58605194 82.68114471]
[79.06861115 86.58699036]
[84.39772034 81.30962372]
[73.56063843 70.93861389]
[60.39306259 63.75426483]
[62.92677689 48.96980286]
[77.73516083 46.57987595]
[84.79115295 59.81714249]
[95.05593109 70.75489044]
[100.38504028 65.47752380]
[96.62068176 50.95754623]
[92.85632324 36.43757629]
[89.09197235 21.91760254]
[85.32761383 7.39762926]
[74.60275269 0.17316629]
[71.78595734 -12.03578091]
[77.86040497 -22.53312111]
[72.80119324 -30.20059395]
[74.45745850 -37.44239044]
[71.26248169 -52.09817886]
[68.06749725 -66.75396729]
[54.13913727 -73.86274719]
[48.08645630 -88.28144836]
[52.76735306 -103.20201111]
[65.97164917 -111.57939911]
[81.46467590 -109.45806122]
[91.93110657 -97.83963776]
[92.42900848 -82.20998383]
[82.72328949 -69.94894409]
[85.91826630 -55.29315948]
[89.11324310 -40.63737106]
[92.45105743 -26.01345253]
[105.18244934 -13.96673489]
[99.84757996 3.63327146]
[103.61193848 18.15324402]
[107.37629700 32.67321777]
[111.14065552 47.19319153]
[114.90501404 61.71316147]
[127.72130585 69.50691986]
[142.34523010 66.16910553]
[156.96914673 62.83129501]
[171.59306335 59.49348068]
[186.21697998 56.15566635]
[200.80763245 52.67533493]
[212.33076477 41.83429718]
[226.54988098 46.26892853]
[241.10589600 42.64640808]
[255.66189575 39.02389145]
[267.18502808 28.18285561]
[281.40414429 32.61748505]
[295.96014404 28.99496841]
[310.51617432 25.37245178]
[325.07217407 21.74993324]
[339.62817383 18.12741661]
[354.18417358 14.50489998]
[368.74020386 10.88238335]
[383.26016235 7.11802530]
[397.74273682 3.21218467]
[405.65496826 -10.20549393]
[420.39797974 -13.96026230]
[433.14093018 -6.33445549]
[447.62347412 -10.24029636]
[461.34182739 -20.20240021]
[474.71221924 -9.77796555]
[468.39645386 5.95568085]
[451.52932739 4.24225950]
[437.04675293 8.14809990]
[429.86618042 21.14713669]
[415.23446655 25.31452370]
[401.64855957 17.69474030]
[387.16601562 21.60058022]
[381.49810791 26.40284920]
[372.36270142 25.43839073]
[357.80670166 29.06090927]
[343.25070190 32.68342590]
[328.69470215 36.30594254]
[314.13867188 39.92845917]
[299.58267212 43.55097580]
[285.02667236 47.17349243]
[274.54467773 57.75542450]
[259.28442383 53.57990265]
[244.72840881 57.20241928]
[230.17240906 60.82493591]
[219.69041443 71.40686798]
[204.43016052 67.23134613]
[198.66963196 71.92210388]
[189.55479431 70.77958679]
[174.93087769 74.11740112]
[160.30696106 77.45521545]
[145.68304443 80.79302979]
[131.05912781 84.13084412]
[131.63763428 103.21427155]
[122.42658234 117.94544220]
[108.12384796 124.32404327]
[94.38909912 121.85829926]
[87.35851288 135.10861206]
[80.32793427 148.35893250]
[73.29734802 161.60925293]
[72.02704620 170.70715332]
[65.99812317 175.04753113]
[66.05599213 190.86863708]
[53.10970306 198.23361206]
[45.82191849 211.34422302]
[38.53413391 224.45483398]
[31.24635124 237.56546021]
[45.37199402 232.51905823]
[60.18350601 234.88952637]
[72.02867126 244.09234619]
[77.98670959 257.85830688]
[76.58848572 272.79299927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[32 155]
[33 154]
[34 153]
[35 152]
[37 150]
[38 148]
[39 147]
[40 146]
[41 145]
[42 52]
[43 51]
[44 50]
[45 49]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[67 82]
[69 81]
[70 80]
[71 79]
[89 141]
[90 140]
[91 139]
[92 138]
[93 137]
[94 135]
[96 133]
[97 132]
[98 131]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[106 123]
[107 121]
[108 120]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
