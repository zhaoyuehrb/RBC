%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCCCACCCCUCCGGCCCAGACCGGAAAUGAGGUCAGAGAGGGAAGCCCCGGCGGUGAGAGUCGGCCCAAAAAGCGGCGGCCGUUGGAGGUGGCUGCGGCAGCUGAUGUGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[194.41337585 329.76620483]
[205.44793701 319.60556030]
[220.31112671 321.62814331]
[214.11294556 307.96862793]
[199.32702637 298.61877441]
[201.10803223 280.35083008]
[194.54841614 266.86114502]
[187.98881531 253.37145996]
[181.42919922 239.88179016]
[174.86958313 226.39210510]
[168.13099670 212.99093628]
[161.21461487 199.68064880]
[146.97950745 195.45010376]
[139.77569580 182.05010986]
[144.30960083 167.14772034]
[137.39321899 153.83743286]
[130.47682190 140.52716064]
[123.56044006 127.21687317]
[116.64405060 113.90659332]
[108.43992615 132.30625916]
[83.95961761 142.14245605]
[52.74116898 131.49737549]
[37.74116898 131.49737549]
[22.74116898 131.49737549]
[7.74116993 131.49737549]
[-1.27024806 144.12962341]
[-15.99634075 149.02062988]
[-30.77462387 144.28967285]
[-39.92254639 131.75590515]
[-39.92254639 116.23883057]
[-30.77462387 103.70507050]
[-15.99634075 98.97411346]
[-1.27024806 103.86511230]
[7.74116993 116.49736786]
[22.74116898 116.49736786]
[37.74116898 116.49736786]
[52.74116898 116.49736786]
[56.11046600 109.79678345]
[41.28288651 107.52900696]
[38.85788345 92.72632599]
[52.18679047 85.84589386]
[62.84906387 96.39561462]
[66.21836090 89.69503021]
[57.27285004 77.65435791]
[48.32733917 65.61368561]
[34.02793121 56.50526810]
[38.82191849 40.24322510]
[55.77553940 40.34807587]
[60.36801529 56.66817474]
[69.31352234 68.70884705]
[78.25903320 80.74951935]
[92.50000000 76.03836823]
[92.50000000 61.03837204]
[92.50000000 46.03837204]
[92.50000000 31.03837204]
[80.40541840 21.12600136]
[77.56279755 5.74895573]
[85.31433868 -7.83219433]
[100.00000000 -13.20484447]
[114.68566132 -7.83219433]
[122.43720245 5.74895573]
[119.59458160 21.12600136]
[107.50000000 31.03837204]
[107.50000000 46.03837204]
[107.50000000 61.03837204]
[107.50000000 76.03836823]
[121.39609528 81.68625641]
[131.86056519 70.93940735]
[142.32504272 60.19255447]
[139.56121826 44.92360306]
[146.33041382 30.96088219]
[160.02973938 23.67334557]
[175.39152527 25.86319923]
[186.50883484 36.68840027]
[189.10684204 51.98643875]
[182.18658447 65.87490082]
[168.40901184 73.01339722]
[153.07188416 70.65702820]
[142.60742188 81.40387726]
[132.14294434 92.15073395]
[129.95433044 106.99020386]
[136.87071228 120.30048370]
[143.78710938 133.61076355]
[150.70349121 146.92105103]
[157.61988831 160.23132324]
[172.42059326 165.08692932]
[179.24517822 178.68397522]
[174.52488708 192.76426697]
[181.44126892 206.07453918]
[188.26278687 212.34541321]
[188.35926819 219.83248901]
[194.91888428 233.32217407]
[201.47848511 246.81185913]
[208.03810120 260.30154419]
[214.59771729 273.79122925]
[226.58151245 278.78289795]
[231.73706055 290.25717163]
[227.77246094 301.77044678]
[233.97064209 315.42996216]
[241.06359863 328.64700317]
[249.01991272 341.36300659]
[256.97622681 354.07904053]
[270.85531616 361.67388916]
[271.04693604 376.56726074]
[279.00326538 389.28326416]
[293.73324585 396.49154663]
[294.58560181 412.86853027]
[280.68347168 421.56698608]
[266.32818604 413.63867188]
[266.28723145 397.23959351]
[258.33093262 384.52355957]
[245.02093506 377.83825684]
[244.26020813 362.03533936]
[236.30389404 349.31933594]
[228.34757996 336.60330200]
[221.81680298 350.10696411]
[207.24993896 353.68557739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 89]
[12 88]
[15 85]
[16 84]
[17 83]
[18 82]
[19 81]
[22 37]
[23 36]
[24 35]
[25 34]
[43 51]
[44 50]
[45 49]
[52 66]
[53 65]
[54 64]
[55 63]
[67 80]
[68 79]
[69 78]
[100 115]
[101 114]
[102 113]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
