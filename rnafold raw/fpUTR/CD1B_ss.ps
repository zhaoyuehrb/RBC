%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUUGGAAGAGAGAAGAAGUCACUACAGGGUACUGAGGAAAAGCUUUGCUGAAAUUGGAGAUCAAAUACCAGCUCUGCCAGUAAGAAGUUGCAUCUCCCAGUGAA\
) } def
/len { sequence length } bind def

/coor [
[142.96575928 158.35115051]
[132.74809265 147.36938477]
[122.53041840 136.38761902]
[112.31274414 125.40585327]
[102.09507751 114.42408752]
[107.40483093 128.45286560]
[105.31184387 143.30612183]
[96.33220673 155.32136536]
[82.68009949 161.53587341]
[67.72187042 160.41726685]
[55.14590073 152.24139404]
[48.05317688 139.02423096]
[48.19261551 124.02487946]
[55.52983475 110.94187164]
[68.25563049 103.00119781]
[83.23087311 102.16065216]
[69.04731750 97.27939606]
[54.86375427 92.39814758]
[40.68019485 87.51689148]
[27.03700638 97.39086151]
[10.36149597 97.24532318]
[-2.84297585 87.33308411]
[-7.54301548 71.67768097]
[-21.86135292 67.20719910]
[-31.14241600 67.62792206]
[-36.52455139 62.39607239]
[-50.70811081 57.51482010]
[-59.99744415 57.66790390]
[-65.22657013 52.28312302]
[-79.26357269 46.99515915]
[-93.30057526 41.70719528]
[-109.38469696 44.90611649]
[-119.99219513 32.39959717]
[-114.21098328 17.05327415]
[-97.98828125 14.65412617]
[-88.01261139 27.67019272]
[-73.97560883 32.95815659]
[-59.93860626 38.24612427]
[-45.82685852 43.33126068]
[-31.64329910 48.21250916]
[-17.39087105 52.88886261]
[-3.07253289 57.35934448]
[6.92542362 48.38552856]
[20.16620827 45.53878784]
[33.17620468 49.67639542]
[42.48733139 59.80870819]
[45.56144333 73.33333588]
[59.74500656 78.21458435]
[73.92856598 83.09584045]
[88.11212921 87.97708893]
[102.14913177 82.68912506]
[109.58663940 69.66286469]
[117.02415466 56.63660431]
[124.46166229 43.61034775]
[120.52082825 28.54025841]
[128.24908447 15.43572998]
[142.64039612 11.77161884]
[150.07791138 -1.25463951]
[157.51542664 -14.28089809]
[151.01351929 -28.37007332]
[154.06779480 -43.58358765]
[165.50382996 -54.07153320]
[180.92420959 -55.80108261]
[194.39950562 -48.10718918]
[200.74818420 -33.94830704]
[197.52905273 -18.76882172]
[185.97991943 -8.40555096]
[170.54168701 -6.84338570]
[163.10417175 6.18287277]
[155.66665649 19.20913124]
[159.82626343 33.46512604]
[152.46913147 46.78155518]
[137.48793030 51.04785919]
[130.05041504 64.07411957]
[122.61289978 77.10037994]
[115.17538452 90.12663269]
[115.78047943 97.89200592]
[113.07683563 104.20641327]
[123.29450989 115.18817902]
[133.51219177 126.16994476]
[143.72985840 137.15171814]
[153.94752502 148.13348389]
[163.08828735 150.92031860]
[167.57252502 158.15312195]
[181.10043335 164.63354492]
[194.62834167 171.11396790]
[208.15623474 177.59437561]
[224.45652771 175.79640198]
[233.94435120 189.17224121]
[226.85946655 203.96199036]
[210.49018860 204.95120239]
[201.67582703 191.12228394]
[188.14791870 184.64186096]
[174.62001038 178.16145325]
[161.09211731 171.68103027]
[167.73553467 185.12962341]
[168.90882874 200.08366394]
[164.44412231 214.40380859]
[154.98016357 226.04139709]
[141.87084961 233.33152771]
[126.99163818 235.23129272]
[112.47116089 231.46888733]
[100.38673401 222.58256531]
[92.46716309 209.84362793]
[89.84544373 195.07452393]
[92.89663696 180.38812256]
[101.18423462 167.88549805]
[113.52259827 159.35527039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 78]
[16 50]
[17 49]
[18 48]
[19 47]
[23 42]
[24 41]
[26 40]
[27 39]
[29 38]
[30 37]
[31 36]
[51 76]
[52 75]
[53 74]
[54 73]
[57 70]
[58 69]
[59 68]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
