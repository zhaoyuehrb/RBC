%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCCUCAUUUAUUUUUAAAAGCAACUUCUGAGAAGGGCUUAGAACAAAUUUUUUCCCGGAGUGCCAUUUCCCAAAGGUACUCACAGAACAAUCAGGUGUGACCAUA\
) } def
/len { sequence length } bind def

/coor [
[94.33248901 278.97753906]
[96.50501251 263.90435791]
[104.62600708 251.02145386]
[117.28845978 242.56083679]
[114.70739746 227.78457642]
[112.12632751 213.00830078]
[109.54526520 198.23204041]
[99.73337555 187.02597046]
[104.98065948 172.10026550]
[102.39958954 157.32398987]
[99.81852722 142.54772949]
[92.89819336 141.95123291]
[86.16712952 140.23672485]
[79.80472565 137.44987488]
[73.98052979 133.66494751]
[68.84977722 128.98284912]
[64.54919434 123.52832794]
[61.19339752 117.44676208]
[58.87182236 110.90023041]
[57.64634323 104.06320190]
[57.54961395 97.11788177]
[42.99750519 93.47973633]
[28.44539642 89.84158325]
[13.89328766 86.20343781]
[2.35424352 92.18550110]
[-9.76246834 88.74903870]
[-16.02781105 78.29035950]
[-30.46903229 74.23435974]
[-44.91025162 70.17835999]
[-59.35147476 66.12236023]
[-76.23549652 67.66056061]
[-82.38755035 51.86218643]
[-68.90963745 41.57713318]
[-55.29547119 51.68113708]
[-40.85425186 55.73714066]
[-26.41303062 59.79314041]
[-11.97181034 63.84914017]
[4.69025517 58.55242920]
[17.53143692 71.65132904]
[32.08354568 75.28947449]
[46.63565445 78.92762756]
[61.18776321 82.56577301]
[64.33386230 76.79939270]
[68.33004761 71.58598328]
[73.08108521 67.04982758]
[78.47373199 63.29902267]
[84.37944794 60.42298126]
[90.65747833 58.49024963]
[97.15818787 57.54689789]
[103.72663116 57.61540222]
[110.20625305 58.69413757]
[116.44260406 60.75738525]
[122.28705597 63.75597763]
[127.60029602 67.61843872]
[132.25569153 72.25270081]
[145.17341614 64.62825012]
[158.09114075 57.00379181]
[159.68493652 41.68171692]
[169.87611389 30.36831093]
[184.60073853 27.26192093]
[198.16864014 33.34877777]
[211.08636475 25.72432137]
[224.00410461 18.09986687]
[236.92182922 10.47541237]
[249.83955383 2.85095811]
[262.75729370 -4.77349663]
[275.67501831 -12.39795113]
[275.44723511 -27.75515366]
[282.94256592 -41.16095352]
[296.14483643 -49.00925064]
[311.50265503 -49.18889999]
[324.88491821 -41.65157318]
[332.69177246 -28.42477417]
[332.82330322 -13.06644535]
[325.24404907 0.29210085]
[311.99285889 8.05748177]
[296.63418579 8.14084816]
[283.29946899 0.51977658]
[270.38174438 8.14423084]
[257.46401978 15.76868629]
[244.54627991 23.39314079]
[231.62855530 31.01759529]
[218.71083069 38.64205170]
[205.79309082 46.26650620]
[204.56503296 61.08641815]
[194.72952271 72.47618866]
[179.89987183 75.93087769]
[165.71559143 69.92152405]
[152.79786682 77.54597473]
[139.88014221 85.17043304]
[138.63336182 117.82710266]
[114.59479523 139.96665955]
[117.17585754 154.74293518]
[119.75692749 169.51919556]
[129.75343323 181.78216553]
[124.32153320 195.65097046]
[126.90259552 210.42724609]
[129.48365784 225.20350647]
[132.06472778 239.97978210]
[146.84558105 243.64669800]
[158.85310364 253.01362610]
[166.00691223 266.45770264]
[167.06756592 281.64962769]
[161.85130310 295.95733643]
[151.26188660 306.90191650]
[137.13397217 312.58715820]
[121.91532135 312.02807617]
[108.24265289 305.32150269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[7 96]
[9 94]
[10 93]
[11 92]
[21 42]
[22 41]
[23 40]
[24 39]
[27 37]
[28 36]
[29 35]
[30 34]
[55 90]
[56 89]
[57 88]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
