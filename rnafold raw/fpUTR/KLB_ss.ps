%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCAGUCUCCCAGUUCAAGCUAAUCAUUGACAGAGCUUUACAAUCACAAGCUUUUACUGAAGCUUUGAUAAGACAGUCCAGCAGUUGGUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[97.88282776 224.85412598]
[84.77704620 217.55764771]
[76.79682159 204.85662842]
[75.90991211 189.88287354]
[82.33501434 176.32859802]
[94.48781586 167.53602600]
[109.37170410 165.67323303]
[123.31561279 171.19879150]
[117.24385834 157.48260498]
[111.17211151 143.76641846]
[105.10035706 130.05023193]
[92.38424683 129.51322937]
[80.99603271 123.83021545]
[72.92140198 113.99211884]
[69.56825256 101.71432495]
[54.84486771 98.84694672]
[40.12147903 95.97956085]
[25.39809227 93.11218262]
[10.67470551 90.24480438]
[-0.68456453 100.65024567]
[-15.81591606 102.35189056]
[-28.89315796 94.90543365]
[-35.00488663 81.34870911]
[-46.26489258 92.02540588]
[-61.65437698 94.01118469]
[-75.25577545 86.54247284]
[-81.83906555 72.49114227]
[-78.87284088 57.26021576]
[-67.49768066 46.70629501]
[-52.08755493 44.88757706]
[-38.56798172 52.50339890]
[-32.13750839 66.62532043]
[-21.38505363 56.35289383]
[-6.46912813 54.35810471]
[6.91780519 61.61368179]
[13.54208469 75.52141571]
[28.26547241 78.38879395]
[42.98886108 81.25617981]
[57.71224594 84.12355804]
[72.43563080 86.99093628]
[76.58359528 80.48841095]
[82.23097992 75.23526764]
[89.01615906 71.56788635]
[96.50466919 69.72108459]
[104.21698761 69.81313324]
[111.65928650 71.83812714]
[120.63094330 59.81692505]
[129.60260010 47.79571915]
[138.57426453 35.77451324]
[141.27362061 26.84670639]
[148.03117371 23.51796150]
[157.38351440 11.79049015]
[166.73587036 0.06301764]
[176.08821106 -11.66445446]
[185.44056702 -23.39192772]
[194.79290771 -35.11940002]
[204.14524841 -46.84687042]
[206.05305481 -63.13467026]
[221.21765137 -69.37700653]
[234.03901672 -59.15230942]
[231.32763672 -42.97886276]
[215.87272644 -37.49452591]
[206.52038574 -25.76705170]
[197.16802979 -14.03957939]
[187.81568909 -2.31210756]
[178.46333313 9.41536427]
[169.11099243 21.14283752]
[159.75865173 32.87030792]
[150.59545898 44.74617386]
[141.62380981 56.76737595]
[132.65214539 68.78858185]
[123.68048859 80.80978394]
[130.28834534 103.41267395]
[118.81655121 123.97847748]
[124.88829803 137.69467163]
[130.96005249 151.41085815]
[137.03179932 165.12704468]
[145.36036682 171.38012695]
[146.70802307 180.52667236]
[154.81132507 185.14497375]
[156.55291748 192.47381592]
[165.90525818 204.20127869]
[175.25761414 215.92875671]
[189.91114807 221.89404297]
[191.79719543 236.66874695]
[207.25210571 242.15309143]
[209.96350098 258.32653809]
[197.14212036 268.55123901]
[181.97752380 262.30889893]
[180.06973267 246.02110291]
[166.08514404 240.89463806]
[163.53013611 225.28111267]
[154.17779541 213.55363464]
[144.82543945 201.82615662]
[135.28633118 190.25009155]
[134.21427917 205.21173096]
[126.07756805 217.81307983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 77]
[9 76]
[10 75]
[11 74]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[23 32]
[46 72]
[47 71]
[48 70]
[49 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[79 95]
[81 94]
[82 93]
[83 92]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
