%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGGCGCGGCUAACCCGUUUCCAUGGCUGCGAGAACUGACGCUCCCCAACCGUCCCGCAACUGUCCUGUCCCAGACUUUGGCACCGUCGGGGUCCGUCGUCCCCGAAUGUGACAGCAUCCCCACCCCGGCUGCUGCCCAGGAUCCGCCGGACCCCGGCCUCGAU\
) } def
/len { sequence length } bind def

/coor [
[65.28324890 113.16458130]
[53.91367340 122.94889069]
[42.54409790 132.73320007]
[31.26650047 142.62339783]
[20.08186722 152.61859131]
[8.89723587 162.61378479]
[3.52360296 183.33039856]
[-16.79208374 186.84016418]
[-27.39868546 197.44677734]
[-38.00528717 208.05337524]
[-48.61188889 218.65997314]
[-59.21849060 229.26657104]
[-69.82508850 239.87318420]
[-80.43169403 250.47978210]
[-91.03829193 261.08639526]
[-86.42400360 275.67977905]
[-89.13155365 290.74389648]
[-98.53876495 302.81710815]
[-112.48393250 309.12512207]
[-127.76255798 308.21835327]
[-140.86372375 300.30520630]
[-148.77688599 287.20404053]
[-149.68363953 271.92541504]
[-143.37564087 257.98025513]
[-131.30239868 248.57304382]
[-116.23828125 245.86549377]
[-101.64489746 250.47978210]
[-91.03829193 239.87318420]
[-80.43169403 229.26657104]
[-69.82508850 218.65997314]
[-59.21849060 208.05337524]
[-48.61188889 197.44677734]
[-38.00528717 186.84016418]
[-27.39868546 176.23356628]
[-28.85189056 167.40113831]
[-26.01185417 158.76707458]
[-19.40153122 152.32936096]
[-10.43103695 149.63932800]
[-1.09796298 151.42915344]
[10.08666992 141.43395996]
[21.27130127 131.43876648]
[24.17553329 124.60848999]
[32.75978470 121.36363220]
[44.12936401 111.57931519]
[55.49893951 101.79500580]
[40.83034897 104.93068695]
[28.99298668 114.14354706]
[14.47236824 117.90541840]
[-0.34927160 115.59912109]
[-13.04031277 107.60302734]
[-21.51867867 95.22897339]
[-24.39342117 80.50701904]
[-21.19291115 65.85243988]
[-12.44222069 53.66944122]
[0.42302212 45.95675659]
[15.29216194 43.97971344]
[29.72578430 48.06266785]
[41.35593033 57.53577042]
[48.27515793 70.84695435]
[60.30034256 79.81327820]
[54.04593277 66.17941284]
[38.82733536 64.64918518]
[26.49939728 55.76556015]
[20.31439209 41.99559021]
[21.84204102 27.07841110]
[30.57245445 15.01004505]
[24.31804276 1.37617743]
[18.06363106 -12.25768948]
[2.82445335 -15.18123150]
[-7.76129436 -26.52678490]
[-9.62317657 -41.93175125]
[-2.04526138 -55.47261047]
[12.05858803 -61.94261932]
[27.26515388 -58.85393524]
[37.72719955 -47.39421463]
[39.42185974 -31.96995735]
[31.69749832 -18.51210213]
[37.95190811 -4.87823439]
[44.20632172 8.75563240]
[59.04854202 10.01027012]
[71.35180664 18.58264542]
[77.75465393 32.25268173]
[76.44683075 47.39158630]
[67.67980194 59.92499924]
[73.93421173 73.55886078]
[90.80012512 65.58477020]
[108.63345337 66.99200439]
[122.77006531 76.65180206]
[129.88861084 91.37639618]
[144.87812805 90.81552887]
[159.86764526 90.25466156]
[174.85714722 89.69379425]
[189.84666443 89.13292694]
[204.83616638 88.57205963]
[219.82568359 88.01119232]
[234.81518555 87.45032501]
[249.80470276 86.88945770]
[264.79421997 86.32859039]
[279.78372192 85.76772308]
[293.28494263 77.51982117]
[306.29260254 84.77582550]
[321.28213501 84.21495819]
[336.25854492 83.37390137]
[351.21658325 82.25295258]
[366.17465210 81.13199615]
[356.86859131 69.36775970]
[360.07705688 54.71492386]
[373.44778442 47.91613388]
[387.17810059 53.95589447]
[391.20166016 68.40618134]
[382.57019043 80.67198181]
[397.56756592 80.95246887]
[406.24795532 77.97437286]
[412.84204102 81.38102722]
[426.92187500 74.16514587]
[439.35092163 82.37292480]
[454.34045410 82.93379211]
[469.32995605 83.49465942]
[484.31945801 84.05552673]
[499.30899048 84.61639404]
[513.38879395 77.40050507]
[525.81787109 85.60828400]
[540.80737305 86.16915131]
[551.16503906 74.45366669]
[566.63763428 72.18799591]
[579.91943359 80.44193268]
[584.73919678 95.31821442]
[578.82122803 109.79271698]
[564.95971680 117.03102112]
[549.69970703 113.61542511]
[540.24652100 101.15866089]
[525.25701904 100.59779358]
[512.24932861 107.85379791]
[498.74810791 99.60590363]
[483.75860596 99.04503632]
[468.76907349 98.48416901]
[453.77957153 97.92330170]
[438.79006958 97.36243439]
[425.78237915 104.61843109]
[412.28115845 96.37053680]
[397.28707886 95.94984436]
[382.28970337 95.66936493]
[367.29559326 96.09005737]
[352.33752441 97.21100616]
[337.37948608 98.33196259]
[333.61740112 101.33517456]
[327.91815186 101.97926331]
[321.84298706 99.20446777]
[306.85348511 99.76533508]
[294.42440796 107.97311401]
[280.34460449 100.75723267]
[265.35507202 101.31809998]
[250.36557007 101.87896729]
[235.37605286 102.43983459]
[220.38655090 103.00070190]
[205.39703369 103.56156921]
[190.40753174 104.12243652]
[175.41801453 104.68330383]
[160.42851257 105.24417114]
[145.43899536 105.80503845]
[130.44949341 106.36590576]
[127.52596283 116.04400635]
[121.53981018 124.48776245]
[112.98729706 130.73439026]
[102.66451263 134.01417542]
[91.59407806 133.84271240]
[80.92391968 130.08569336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 41]
[5 40]
[6 39]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[60 85]
[61 84]
[66 79]
[67 78]
[68 77]
[89 161]
[90 160]
[91 159]
[92 158]
[93 157]
[94 156]
[95 155]
[96 154]
[97 153]
[98 152]
[99 151]
[101 149]
[102 148]
[103 145]
[104 144]
[105 143]
[111 142]
[112 141]
[114 140]
[116 138]
[117 137]
[118 136]
[119 135]
[120 134]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
