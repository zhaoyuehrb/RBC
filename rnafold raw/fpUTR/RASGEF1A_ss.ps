%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCUUGCUUGGCUCGCGGGCAGAGGAGCCGCCGCUCGCUGGACGCCGGACCGGGCAGGACGGCGCGGGGAGCCGGCGGCCAGA\
) } def
/len { sequence length } bind def

/coor [
[-42.87976074 257.72698975]
[-55.80793762 254.72612000]
[-66.87952423 247.46627808]
[-79.07887268 256.19415283]
[-91.27822113 264.92202759]
[-103.47756958 273.64993286]
[-115.67691040 282.37780762]
[-127.87625885 291.10568237]
[-140.07560730 299.83358765]
[-141.09989929 315.43759155]
[-151.95188904 326.69671631]
[-167.50759888 328.29479980]
[-180.42210388 319.47720337]
[-184.59756470 304.40737915]
[-178.06245422 290.20083618]
[-163.90245056 283.56542969]
[-148.80348206 287.63421631]
[-136.60414124 278.90634155]
[-124.40479279 270.17846680]
[-112.20545197 261.45059204]
[-100.00610352 252.72270203]
[-87.80675507 243.99481201]
[-75.60741425 235.26692200]
[-79.01203156 218.92533875]
[-75.03149414 202.65844727]
[-64.39697266 189.65127563]
[-49.14716339 182.47132874]
[-32.23754883 182.56187439]
[-16.96766472 189.95204163]
[-5.43795729 180.35694885]
[6.09174967 170.76185608]
[17.62145615 161.16676331]
[29.15116310 151.57165527]
[40.68087006 141.97656250]
[52.21057892 132.38146973]
[63.56311798 122.57740021]
[74.73470306 112.56761169]
[85.90628052 102.55783081]
[90.44136047 89.33192444]
[104.08393860 86.27058411]
[115.25551605 76.26080322]
[126.42710114 66.25102234]
[128.98498535 59.73630142]
[133.81069946 56.19601822]
[138.79898071 55.95505905]
[150.67143250 46.78745270]
[162.54388428 37.61985016]
[174.41632080 28.45224190]
[186.28877258 19.28463745]
[188.76510620 6.46945667]
[199.04089355 -0.90517747]
[211.17366028 0.74306345]
[223.37300110 -7.98482037]
[227.40631104 -23.51260185]
[242.11918640 -29.90876579]
[256.22515869 -22.26672173]
[258.90335083 -6.44879341]
[248.09927368 5.41085958]
[232.10089111 4.21452570]
[219.90155029 12.94240952]
[213.65869141 29.23430824]
[195.45637512 31.15708351]
[183.58393860 40.32469177]
[171.71148682 49.49229431]
[159.83903503 58.65990067]
[147.96658325 67.82750702]
[136.43688965 77.42259979]
[125.26529694 87.43238831]
[114.09371948 97.44216919]
[109.55863953 110.66807556]
[95.91606140 113.72941589]
[84.74448395 123.73919678]
[73.57289886 133.74897766]
[69.13303375 142.00862122]
[61.80567169 143.91117859]
[50.27596664 153.50627136]
[38.74625778 163.10136414]
[27.21655273 172.69647217]
[15.68684483 182.29156494]
[4.15713787 191.88665771]
[-7.37256908 201.48175049]
[-3.20116425 214.28527832]
[-3.70277667 227.70950317]
[-8.79348660 240.10618591]
[-17.82730293 249.96102905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 73]
[37 72]
[38 71]
[40 69]
[41 68]
[42 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
