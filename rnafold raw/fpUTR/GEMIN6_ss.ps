%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCAAAGCAUGCUGGUCUCAGGCGGUCUCCGCUCAACGAUCCUUCCUCAAAGCAUGGUUGCUGAGUACCCAGAGUUGCGAGGAGUUUUUUAACUGAUUUAGCCAGGUGGCAAUC\
) } def
/len { sequence length } bind def

/coor [
[60.04544449 104.38301849]
[61.68168259 92.71429443]
[66.54657745 82.36848450]
[54.92750549 72.88179779]
[43.30842972 63.39511871]
[31.68935394 53.90843964]
[20.07028008 44.42175674]
[4.55629683 45.81964111]
[-7.09195566 36.03327942]
[-8.32901478 21.23445129]
[-17.07757187 18.17388916]
[-20.12821007 11.33375168]
[-31.48839760 1.53854144]
[-38.10773849 -0.12084335]
[-42.19532013 -4.30415726]
[-43.17716599 -9.10028648]
[-53.99520111 -19.49115181]
[-64.81324005 -29.88201714]
[-75.76979828 -40.12671280]
[-86.86290741 -50.22338867]
[-97.95602417 -60.32006454]
[-109.04913330 -70.41674042]
[-120.14224243 -80.51342010]
[-134.16748047 -85.83249664]
[-149.16613770 -85.63111877]
[-164.16477966 -85.42974091]
[-179.16343689 -85.22836304]
[-194.91996765 -78.96991730]
[-205.29565430 -92.37817383]
[-195.28369141 -106.06015778]
[-179.36480713 -100.22700500]
[-164.36616516 -100.42838287]
[-149.36750793 -100.62976074]
[-134.36886597 -100.83113861]
[-126.86853790 -113.82210541]
[-119.36886597 -126.81190491]
[-126.69379425 -139.90180969]
[-134.01872253 -152.99169922]
[-141.34364319 -166.08160400]
[-154.83468628 -174.34611511]
[-154.29774475 -189.23103333]
[-161.62266541 -202.32093811]
[-175.11372375 -210.58544922]
[-174.57676697 -225.47038269]
[-181.90170288 -238.56027222]
[-189.22662354 -251.65017700]
[-204.21298218 -257.37631226]
[-208.94247437 -272.70639038]
[-199.78703308 -285.88049316]
[-183.76992798 -286.79260254]
[-173.17811584 -274.74298096]
[-176.13671875 -258.97509766]
[-168.81179810 -245.88520813]
[-161.48687744 -232.79530334]
[-148.51976013 -225.46707153]
[-148.53277588 -209.64585876]
[-141.20783997 -196.55596924]
[-128.24072266 -189.22772217]
[-128.25373840 -173.40652466]
[-120.92881775 -160.31663513]
[-113.60388947 -147.22673035]
[-106.27896881 -134.13682556]
[-110.04556274 -91.60652924]
[-98.95245361 -81.50985718]
[-87.85934448 -71.41317749]
[-76.76623535 -61.31650162]
[-65.67311859 -51.21982193]
[-58.51514435 -49.01591492]
[-54.42237091 -40.70005417]
[-43.60433578 -30.30918884]
[-32.78630066 -19.91832352]
[-21.69318771 -9.82164669]
[-10.33300018 -0.02643653]
[1.15766609 9.61537743]
[15.90486145 7.86729097]
[27.82339668 17.32261658]
[29.55696106 32.80268478]
[41.17603683 42.28936386]
[52.79510880 51.77604675]
[64.41418457 61.26272583]
[76.03325653 70.74940491]
[94.69390869 60.15752411]
[117.42332458 61.15545273]
[137.22389221 74.79950714]
[147.29095459 98.05599213]
[162.12767029 100.26317596]
[176.96440125 102.47035980]
[191.80111694 104.67754364]
[206.84817505 98.15696716]
[219.85568237 108.14379883]
[217.44262695 124.36444092]
[202.09135437 130.13249207]
[189.59393311 119.51426697]
[174.75721741 117.30708313]
[159.92048645 115.09989929]
[145.08377075 112.89271545]
[140.82327271 119.06509399]
[153.16804504 127.58606720]
[165.51264954 136.10723877]
[156.99127197 148.45172119]
[144.64706421 139.93083191]
[132.30230713 131.40985107]
[128.04182434 137.58222961]
[135.36674500 150.67213440]
[142.69168091 163.76203918]
[157.05152893 171.68205261]
[157.10195923 188.08111572]
[142.79107666 196.08927917]
[128.84069824 187.46842957]
[129.60177612 171.08695984]
[122.27684784 157.99705505]
[114.95192719 144.90716553]
[101.11884308 146.12788391]
[87.88403320 143.28840637]
[76.38199615 136.84225464]
[67.53658295 127.54264832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[10 74]
[12 73]
[13 72]
[16 71]
[17 70]
[18 69]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[24 34]
[25 33]
[26 32]
[27 31]
[36 62]
[37 61]
[38 60]
[39 59]
[41 57]
[42 56]
[44 54]
[45 53]
[46 52]
[85 96]
[86 95]
[87 94]
[88 93]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
