%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUGAGGGCGGAGAAAUGCAAGUUUCAUUACAAAAGUUAACGUAACAAAGAAUCUGGUAGAAGUGAGUUUUGGAUAGUAAAAUAAGUUUCGAACUCUGGCACCUUUCAAUUUUGUCGCACUCUCCUUGUUUUUGACA\
) } def
/len { sequence length } bind def

/coor [
[97.63762665 387.83453369]
[97.63762665 372.83453369]
[97.63762665 357.83453369]
[97.63762665 342.83453369]
[97.63762665 327.83453369]
[97.63762665 312.83453369]
[97.63762665 297.83453369]
[97.63762665 282.83453369]
[97.63762665 267.83453369]
[97.63762665 252.83454895]
[97.29863739 237.83837891]
[96.62082672 222.85369873]
[95.94301605 207.86901855]
[95.26520538 192.88433838]
[94.58739471 177.89965820]
[85.84284973 169.46531677]
[85.20304108 156.93038940]
[93.56131744 147.03471375]
[93.22232056 132.03854370]
[92.88333130 117.04236603]
[84.70929718 113.77468872]
[78.26437378 106.51820374]
[75.47705841 96.27909851]
[61.27538300 101.10738373]
[54.51771545 115.39407349]
[39.60917282 120.63915253]
[25.39472771 113.73081970]
[20.30755997 98.76765442]
[27.36579323 84.62704468]
[42.38190460 79.69835663]
[56.44710159 86.90570068]
[70.64878082 82.07742310]
[55.89212799 84.76836395]
[41.26901627 81.42701721]
[29.14555168 72.59403229]
[21.48338318 59.69863892]
[19.52229309 44.82738876]
[23.57959938 30.38653374]
[32.99880600 18.71269226]
[46.25582504 11.69476128]
[61.20560074 10.46828079]
[75.42916870 15.23170471]
[86.62506104 25.21428108]
[92.98173523 38.80077362]
[93.47062683 53.79280472]
[88.01123047 67.76675415]
[95.46224976 54.74821091]
[102.91326141 41.72967148]
[110.36427307 28.71113014]
[117.81528473 15.69258976]
[125.26630402 2.67404938]
[115.95642853 -10.62140751]
[113.36566162 -26.58546257]
[117.96002960 -42.03155518]
[128.77639771 -53.89872742]
[143.62391663 -59.85818481]
[159.52761841 -58.77022171]
[166.68251038 -71.95382690]
[173.83741760 -85.13742828]
[175.20187378 -94.25669098]
[181.30589294 -98.53545380]
[177.38069153 -113.60961914]
[185.12252808 -126.70613098]
[199.51763916 -130.35531616]
[201.08782959 -139.44142151]
[207.28700256 -143.58113098]
[215.03031921 -156.42796326]
[222.77365112 -169.27479553]
[230.51696777 -182.12161255]
[238.26029968 -194.96844482]
[246.00361633 -207.81527710]
[246.50091553 -223.62866211]
[259.69766235 -230.53483582]
[267.44097900 -243.38166809]
[275.18429565 -256.22848511]
[282.92761230 -269.07531738]
[275.42990112 -282.47979736]
[275.65499878 -297.83703613]
[283.54229736 -311.01602173]
[296.97021484 -318.47167969]
[312.32669067 -318.19845581]
[325.48089600 -310.26986694]
[332.89440918 -296.81866455]
[332.57305908 -281.46313477]
[324.60327148 -268.33383179]
[311.12890625 -260.96252441]
[295.77444458 -261.33200073]
[288.03112793 -248.48516846]
[280.28781128 -235.63833618]
[272.54449463 -222.79151917]
[272.60104370 -207.89701843]
[258.85043335 -200.07194519]
[251.10711670 -187.22512817]
[243.36380005 -174.37829590]
[235.62048340 -161.53146362]
[227.87715149 -148.68464661]
[220.13383484 -135.83781433]
[212.53617859 -122.90430450]
[216.68098450 -108.64400482]
[209.31005859 -95.33521271]
[194.32444763 -91.08444214]
[187.02101135 -77.98252869]
[179.86611938 -64.79892731]
[172.71122742 -51.61532211]
[181.39112854 -40.73675919]
[185.26643372 -27.32495499]
[183.71681213 -13.40707302]
[176.94459534 -1.10000658]
[165.94895935 7.71160316]
[152.37864685 11.66394901]
[138.28483582 10.12506294]
[130.83383179 23.14360237]
[123.38281250 36.16214371]
[115.93180084 49.18068314]
[108.48078918 62.19922638]
[101.02977753 75.21776581]
[121.20644379 95.70953369]
[107.87950134 116.70337677]
[108.21849060 131.69953918]
[108.55747986 146.69570923]
[118.49444580 162.15213013]
[109.57207489 177.22184753]
[110.24988556 192.20652771]
[110.92769623 207.19120789]
[111.60550690 222.17588806]
[112.28331757 237.16056824]
[115.58403778 243.04641724]
[115.38232422 248.83247375]
[112.63762665 252.83454895]
[112.63762665 267.83453369]
[112.63762665 282.83453369]
[112.63762665 297.83453369]
[112.63762665 312.83453369]
[112.63762665 327.83453369]
[112.63762665 342.83453369]
[112.63762665 357.83453369]
[112.63762665 372.83453369]
[112.63762665 387.83453369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[11 126]
[12 125]
[13 124]
[14 123]
[15 122]
[18 120]
[19 119]
[20 118]
[23 32]
[24 31]
[46 116]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
[57 104]
[58 103]
[59 102]
[61 101]
[64 98]
[66 97]
[67 96]
[68 95]
[69 94]
[70 93]
[71 92]
[73 90]
[74 89]
[75 88]
[76 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
