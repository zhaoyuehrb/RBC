%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGACGCGCGCGGCUGUGAGCCUGCGGGACAUGCCCCCCGCGCCGGCUCCUUGCUGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[87.13600922 210.07690430]
[70.90894318 207.70741272]
[65.09970093 192.37167358]
[75.68432617 179.84579468]
[77.85166168 165.00320435]
[75.61887360 157.66574097]
[80.49906158 149.50274658]
[78.62338257 142.06597900]
[83.89225006 134.14830017]
[87.48198700 119.58416748]
[91.07172394 105.02004242]
[89.77127838 96.73941803]
[95.20277405 89.84745789]
[99.49195862 75.47377014]
[103.78114319 61.10008240]
[108.07032776 46.72639465]
[98.82193756 34.40675735]
[98.60364532 19.18158722]
[107.28959656 6.89264297]
[121.37760925 2.13175321]
[125.66679382 -12.24193382]
[129.95597839 -26.61562157]
[134.24516296 -40.98930740]
[138.53434753 -55.36299515]
[142.12408447 -69.92712402]
[145.00598145 -84.64767456]
[147.88787842 -99.36822510]
[150.76979065 -114.08878326]
[153.65168762 -128.80932617]
[156.53358459 -143.52987671]
[145.86799622 -154.80041504]
[143.89739990 -170.19184875]
[151.37951660 -183.78587341]
[165.43733215 -190.35530090]
[180.66532898 -187.37405396]
[191.20802307 -175.98849487]
[193.01155090 -160.57658386]
[185.38240051 -147.06452942]
[171.25413513 -140.64797974]
[168.37223816 -125.92742920]
[165.49034119 -111.20687866]
[162.60842896 -96.48632812]
[159.72653198 -81.76577759]
[156.84463501 -67.04521942]
[158.94454956 -62.37962341]
[157.85888672 -56.32222366]
[152.90803528 -51.07381058]
[148.61885071 -36.70012283]
[144.32966614 -22.32643700]
[140.04048157 -7.95274925]
[135.75129700 6.42093849]
[144.92646790 18.12368393]
[145.45750427 33.16303253]
[136.93133545 45.77880096]
[122.44401550 51.01557922]
[118.15483093 65.38926697]
[113.86564636 79.76295471]
[109.57646179 94.13664246]
[105.63584900 108.60977173]
[102.04611206 123.17390442]
[98.45637512 137.73802185]
[95.21961212 152.38464355]
[92.69425964 167.17053223]
[90.52692413 182.01313782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[7 62]
[9 61]
[10 60]
[11 59]
[13 58]
[14 57]
[15 56]
[16 55]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
