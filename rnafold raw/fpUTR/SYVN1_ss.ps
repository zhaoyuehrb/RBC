%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUGGGGAGUGUUGUUAACCGGAGGGGCAGCCGCAGUCGCGCGGAUUGAGCGGGCUCGCGGCGCUGGGUUCCUGGUCUCCGGGCCAGGGCA\
) } def
/len { sequence length } bind def

/coor [
[214.38418579 233.42614746]
[217.62870789 218.47889709]
[206.59284973 208.31967163]
[191.98876953 205.39224243]
[187.07597351 190.35313416]
[176.04011536 180.19390869]
[161.43603516 177.26647949]
[156.52323914 162.22735596]
[141.91915894 159.29992676]
[137.00636292 144.26080322]
[125.97051239 134.10157776]
[114.93465424 123.94235992]
[103.89879608 113.78313446]
[90.29865265 110.53846741]
[85.94197845 97.25272369]
[70.37239838 97.72784424]
[59.32518768 87.26773834]
[58.96818161 72.42159271]
[47.93232346 62.26236725]
[36.89646530 52.10314178]
[25.86060524 41.94392014]
[14.65828228 31.96855164]
[3.29255962 22.17976570]
[-8.07316303 12.39097881]
[-21.09993553 12.54444313]
[-30.38499832 3.99125457]
[-31.24155235 -8.19935703]
[-46.63499832 -11.85344219]
[-50.75842667 -26.16590691]
[-61.79428482 -36.32513046]
[-72.83014679 -46.48435211]
[-88.31435394 -44.29954529]
[-101.55286407 -52.62275314]
[-106.29486847 -67.52400970]
[-100.30132294 -81.96739960]
[-86.40220642 -89.13319397]
[-71.16025543 -85.63792419]
[-61.77225113 -73.13195038]
[-62.67092133 -57.52021027]
[-51.63506317 -47.36098862]
[-40.59920502 -37.20176315]
[-25.99511528 -34.27433395]
[-21.08232880 -19.23521614]
[-3.84525037 -16.43191719]
[1.71562290 1.02525568]
[13.08134556 10.81404209]
[24.44706917 20.60282898]
[31.71308327 22.62211990]
[36.01982880 30.90806198]
[47.05568695 41.06728363]
[58.09154510 51.22650909]
[69.12740326 61.38573074]
[83.95232391 60.51553345]
[95.28897858 70.66122437]
[96.10120392 86.21686554]
[109.70134735 89.46153259]
[114.05802155 102.74727631]
[125.09387970 112.90650177]
[136.12973022 123.06571960]
[147.16558838 133.22494507]
[162.55903625 136.87902832]
[166.68246460 151.19149780]
[182.07591248 154.84558105]
[186.19934082 169.15805054]
[197.23519897 179.31727600]
[212.62864685 182.97135925]
[216.75207520 197.28381348]
[227.78793335 207.44303894]
[242.41619873 202.97525024]
[257.21896362 206.40670776]
[268.24337769 216.71827698]
[272.59710693 231.06753540]
[269.20669556 245.57170105]
[280.24255371 255.73092651]
[291.27841187 265.89013672]
[302.31427002 276.04937744]
[313.35012817 286.20858765]
[324.38598633 296.36782837]
[335.42184448 306.52703857]
[346.45770264 316.68624878]
[362.56954956 319.74249268]
[367.72250366 335.31103516]
[356.61566162 347.37628174]
[340.67480469 343.52655029]
[336.29849243 327.72210693]
[325.26263428 317.56289673]
[314.22677612 307.40368652]
[303.19091797 297.24444580]
[292.15505981 287.08523560]
[281.11920166 276.92599487]
[270.08334351 266.76678467]
[259.04748535 256.60754395]
[244.87283325 261.18414307]
[230.21305847 258.03024292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[5 65]
[6 64]
[8 62]
[10 60]
[11 59]
[12 58]
[13 57]
[15 55]
[18 52]
[19 51]
[20 50]
[21 49]
[22 47]
[23 46]
[24 45]
[27 43]
[29 41]
[30 40]
[31 39]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
