%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAACCAAGGCUUGCUUCUGUGGGCAGCCUUCCAUCCCAUCUCCACCAUAUAAUAGCCGCCACCAUUCAGCAGAAUCCCAGCAGACUGUGCAGUGGGGCAAGGAUUUCAUGAGCAUCCUCCUCUAAACGCGUGUCAAGACAAAAG\
) } def
/len { sequence length } bind def

/coor [
[110.26239014 230.87867737]
[95.26573181 231.19523621]
[81.23023987 225.90325928]
[70.17575073 215.76432800]
[63.69308853 202.23748779]
[62.71517181 187.26940918]
[67.38272858 173.01409912]
[77.02532959 161.52198792]
[83.24727631 147.87327576]
[89.46921539 134.22456360]
[77.46540070 143.21948242]
[65.46159363 152.21438599]
[53.45778656 161.20930481]
[41.45397568 170.20422363]
[29.45016479 179.19914246]
[24.41537094 186.90371704]
[17.09712219 188.25399780]
[4.90634203 196.99383545]
[-7.28443909 205.73367310]
[-19.47521973 214.47352600]
[-25.74339485 229.62747192]
[-42.03442001 231.50749207]
[-51.58948517 218.17961121]
[-44.57915878 203.35438538]
[-28.21506310 202.28274536]
[-16.02428246 193.54289246]
[-3.83350134 184.80305481]
[8.35727978 176.06321716]
[20.45524788 167.19534302]
[32.45905685 158.20042419]
[44.46286774 149.20550537]
[56.46667480 140.21058655]
[68.47048950 131.21566772]
[80.47429657 122.22074890]
[73.48775482 105.04768372]
[78.28880310 88.87326813]
[90.80199432 80.23089600]
[89.53842163 65.28421021]
[88.27484894 50.33752441]
[87.01127625 35.39083862]
[73.89864349 27.30598068]
[68.12837982 13.21493816]
[71.71939850 -1.39904702]
[83.09102631 -10.98153782]
[81.82745361 -25.92822266]
[80.56388092 -40.87490845]
[79.30030823 -55.82159424]
[78.03673553 -70.76828003]
[76.77316284 -85.71495819]
[65.97708130 -89.89909363]
[57.58236313 -97.79846954]
[52.79319763 -108.22677612]
[52.27650452 -119.63896942]
[56.06932831 -130.36018372]
[63.57909393 -138.83152771]
[73.67581177 -143.83673096]
[73.35957336 -158.83338928]
[73.04332733 -173.83006287]
[72.72708130 -188.82672119]
[72.25276184 -203.81922913]
[63.94057083 -217.28096008]
[71.13445282 -230.32308960]
[70.50210571 -245.30975342]
[56.99318314 -252.48306274]
[48.94171906 -265.36990356]
[48.42510605 -280.45629883]
[55.48200607 -293.68716431]
[68.12883759 -301.55630493]
[67.49649048 -316.54296875]
[66.86414337 -331.52963257]
[66.23178864 -346.51629639]
[56.98881149 -360.06250000]
[64.34152985 -374.72094727]
[80.72609711 -375.41226196]
[89.28747559 -361.42532349]
[81.21846008 -347.14865112]
[81.85080719 -332.16198730]
[82.48315430 -317.17532349]
[83.11550140 -302.18865967]
[96.38025665 -295.41284180]
[104.52662659 -282.82345581]
[105.28269196 -267.74716187]
[98.34541321 -254.22787476]
[85.48876953 -245.94210815]
[86.12111664 -230.95544434]
[94.38807678 -218.56565857]
[87.23942566 -204.45156860]
[90.68713379 -197.85662842]
[87.72374725 -189.14297485]
[88.03999329 -174.14630127]
[88.35623932 -159.14964294]
[88.67247772 -144.15296936]
[104.58209991 -134.47695923]
[111.57513428 -117.05848694]
[106.69641113 -98.77976227]
[91.71984863 -86.97853088]
[92.98342133 -72.03184509]
[94.24699402 -57.08516312]
[95.51056671 -42.13848114]
[96.77413940 -27.19179535]
[98.03771210 -12.24510956]
[110.85662842 -4.70765352]
[116.85004425 9.09607792]
[113.52723694 23.95583344]
[101.95796204 34.12726593]
[103.22153473 49.07395172]
[104.48510742 64.02063751]
[105.74868011 78.96732330]
[124.90541840 93.68973541]
[120.44509888 121.37786102]
[132.81742859 129.85873413]
[148.57472229 131.27935791]
[154.69786072 144.85714722]
[167.07019043 153.33802795]
[179.44252014 161.81890869]
[188.35557556 164.11387634]
[191.98371887 170.61131287]
[204.17449951 179.35115051]
[216.36528015 188.09098816]
[232.08912659 189.84350586]
[237.92463684 203.54737854]
[251.88259888 197.13871765]
[267.17337036 198.58361816]
[279.68380737 207.49340820]
[286.04870605 221.47138977]
[284.55587769 236.75755310]
[275.60693359 249.24002075]
[261.60906982 255.56103516]
[246.32763672 254.02030945]
[233.87329102 245.03227234]
[227.59617615 231.01466370]
[229.18478394 215.73815918]
[214.33291626 214.61077881]
[207.62544250 200.28178406]
[195.43466187 191.54193115]
[183.24388123 182.80209351]
[170.96163940 174.19125366]
[158.58930969 165.71037292]
[146.21696472 157.22947693]
[131.34461975 156.41548157]
[124.33654785 142.23107910]
[111.96421051 133.75018311]
[118.75600433 147.12448120]
[125.54779816 160.49876404]
[135.66543579 171.57275391]
[140.93038940 185.61840820]
[140.58496094 200.61442566]
[134.67887878 214.40277100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 28]
[18 27]
[19 26]
[20 25]
[37 108]
[38 107]
[39 106]
[40 105]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[56 92]
[57 91]
[58 90]
[59 89]
[60 87]
[62 85]
[63 84]
[68 79]
[69 78]
[70 77]
[71 76]
[110 142]
[111 141]
[113 139]
[114 138]
[115 137]
[117 136]
[118 135]
[119 134]
[121 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
