%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUUGAUGUCAAGCUGAACCAUCGUAGGAAGUUGAAAGCCUUAGAAAGAGGACUUGGUAAAGUUUUUGGAUUAUCUUGAAACUCUGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[124.96604919 129.68888855]
[117.58425903 134.57640076]
[109.28653717 137.66290283]
[100.50509644 138.78761292]
[91.69734955 137.89195251]
[83.32207489 135.02256775]
[75.81551361 130.32893372]
[69.56867981 124.05552673]
[64.90695190 116.52910614]
[62.07315063 108.14172363]
[47.07529068 108.39506531]
[32.07743073 108.64840698]
[17.07956886 108.90175629]
[8.34625340 112.23095703]
[1.57288504 108.90175629]
[-13.42497540 108.64840698]
[-20.98705101 116.82380676]
[-31.61206245 119.32018280]
[-41.60805893 115.52516174]
[-47.64291000 106.96939850]
[-62.58945084 105.70413208]
[-74.50443268 116.08723450]
[-90.26560974 114.92070007]
[-100.52215576 102.89660645]
[-99.18904877 87.14864349]
[-87.05718994 77.01979065]
[-71.32420349 78.51932526]
[-61.32418442 90.75759125]
[-46.37764359 92.02285767]
[-29.74042130 82.41456604]
[-13.17163277 93.65055084]
[1.82622719 93.90389252]
[16.82622719 93.90389252]
[31.82408714 93.65055084]
[46.82194901 93.39720917]
[61.81980896 93.14386749]
[65.39545441 82.47119141]
[71.88463593 73.27435303]
[80.74099731 66.32769012]
[91.21887207 62.21606827]
[90.71225739 47.22462845]
[90.20564270 32.23318481]
[89.69903564 17.24174309]
[79.00719452 5.28080130]
[81.83432770 -10.51118565]
[96.01170349 -18.01995850]
[110.66364288 -11.48542690]
[114.55044556 4.07967329]
[104.69047546 16.73513031]
[105.19709015 31.72657394]
[105.70369720 46.71801376]
[106.21031189 61.70945740]
[129.85545349 75.23339081]
[138.77876282 100.96982574]
[153.41862488 104.23703003]
[168.05848694 107.50423431]
[182.69833374 110.77143860]
[197.85246277 106.22576904]
[208.58886719 116.54947662]
[223.22872925 119.81668091]
[238.38284302 115.27101135]
[249.11926270 125.59471130]
[263.75912476 128.86192322]
[278.39895630 132.12911987]
[293.03881836 135.39633179]
[307.67868042 138.66352844]
[322.31854248 141.93072510]
[337.47265625 137.38507080]
[348.20907593 147.70877075]
[362.84890747 150.97596741]
[377.48876953 154.24317932]
[394.26458740 151.79197693]
[401.26400757 167.23364258]
[388.36343384 178.23417664]
[374.22158813 168.88302612]
[359.58172607 165.61582947]
[344.94186401 162.34861755]
[330.83486938 167.12797546]
[319.05133057 156.57058716]
[304.41146851 153.30339050]
[289.77160645 150.03617859]
[275.13177490 146.76898193]
[260.49191284 143.50177002]
[245.85205078 140.23457336]
[231.74507141 145.01393127]
[219.96151733 134.45652771]
[205.32167053 131.18933105]
[191.21467590 135.96868896]
[179.43113708 125.41129303]
[164.79127502 122.14408875]
[150.15142822 118.87688446]
[135.51156616 115.60968018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 36]
[11 35]
[12 34]
[13 33]
[15 32]
[16 31]
[20 29]
[21 28]
[40 52]
[41 51]
[42 50]
[43 49]
[54 92]
[55 91]
[56 90]
[57 89]
[59 87]
[60 86]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
