%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCAGAGCUGGGCCGAGCCGUCGCCGGCGCCACGCGAGUCCCGCAGCCGCCGCGCCCGGGCAAUGGGCCGGGGGCACUGAGGGCCGCCGGGGCCGAGCGCGGAGGGGGGACCGAGCCAGUGCCGUGCCCUCGGGCCGCGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[201.54920959 365.63385010]
[215.42785645 371.32797241]
[209.24932861 357.65954590]
[203.07081604 343.99111938]
[196.89230347 330.32269287]
[190.71377563 316.65426636]
[178.42095947 308.24380493]
[179.78709412 292.48168945]
[174.12673950 287.64871216]
[173.62593079 278.45697021]
[167.73892212 264.66046143]
[161.85191345 250.86398315]
[149.74037170 242.19450378]
[151.44075012 226.46495056]
[145.55374146 212.66845703]
[139.52064514 198.93522644]
[133.34211731 185.26679993]
[115.94908142 182.54270935]
[103.52639771 169.84843445]
[101.13732910 152.09065247]
[109.91517639 136.29118347]
[103.16212463 122.89730072]
[96.40906525 109.50341034]
[90.21437073 104.25220490]
[89.65822601 95.75279236]
[83.19097900 82.21858215]
[76.72373199 68.68437958]
[70.11321259 55.21957397]
[63.36015701 41.82568359]
[56.60710144 28.43179703]
[49.85404587 15.03790951]
[36.73231888 6.19874048]
[37.91128922 -8.64913177]
[31.15823364 -22.04301834]
[19.13657379 -26.84004021]
[13.80306530 -38.19109726]
[17.53766823 -49.74229050]
[11.07042408 -63.27649689]
[4.60317993 -76.81069946]
[-1.96592879 -83.25939178]
[-1.85427833 -90.70150757]
[-8.03279686 -104.36994171]
[-14.21131611 -118.03836823]
[-20.38983536 -131.70678711]
[-26.71307182 -145.30888367]
[-33.18031693 -158.84307861]
[-47.81030273 -164.19110107]
[-54.17620850 -178.00883484]
[-48.98752975 -191.92333984]
[-55.45477295 -205.45755005]
[-61.92201996 -218.99174500]
[-74.85317230 -228.10743713]
[-73.35931396 -242.92694092]
[-79.82656097 -256.46115112]
[-86.29380798 -269.99536133]
[-92.86291504 -276.44406128]
[-92.75126648 -283.88616943]
[-98.92977905 -297.55459595]
[-105.10829926 -311.22302246]
[-111.28681946 -324.89144897]
[-117.46533966 -338.55987549]
[-131.90702820 -345.54678345]
[-135.30802917 -361.22521973]
[-125.05935669 -373.56799316]
[-109.02293396 -373.10681152]
[-99.50052643 -360.19546509]
[-103.79691315 -344.73840332]
[-97.61839294 -331.06997681]
[-91.43987274 -317.40155029]
[-85.26135254 -303.73312378]
[-79.08283234 -290.06469727]
[-72.75959778 -276.46261597]
[-66.29235077 -262.92840576]
[-59.82510757 -249.39419556]
[-47.35653687 -241.24655151]
[-48.38780975 -225.45899963]
[-41.92056656 -211.92478943]
[-35.45332336 -198.39057922]
[-21.36771584 -193.68618774]
[-14.61620998 -180.05270386]
[-19.64611053 -165.31033325]
[-13.17886543 -151.77612305]
[-7.41720343 -147.06434631]
[-6.72140694 -137.88531494]
[-0.54288846 -124.21688080]
[5.63563013 -110.54845428]
[11.81414890 -96.88002777]
[18.13738632 -83.27794647]
[24.60463142 -69.74374390]
[31.07187462 -56.20953369]
[46.04723358 -47.11725998]
[44.55212021 -28.79607582]
[51.30517578 -15.40218735]
[63.94387817 -7.52103901]
[63.24793243 8.28485298]
[70.00099182 21.67874146]
[76.75404358 35.07262802]
[83.50710297 48.46651840]
[89.36747742 53.05493546]
[90.25794220 62.21713257]
[96.72518921 75.75134277]
[103.19242859 89.28554535]
[109.80295563 102.75035095]
[116.55600739 116.14424133]
[123.30906677 129.53813171]
[135.88317871 129.91270447]
[147.02763367 135.59002686]
[154.63441467 145.42675781]
[157.29440308 157.49954224]
[154.55818176 169.48098755]
[147.01054382 179.08827209]
[153.18907166 192.75669861]
[159.61982727 199.34336853]
[159.35023499 206.78144836]
[165.23724365 220.57792664]
[177.76986694 230.23422241]
[175.64839172 244.97697449]
[181.53540039 258.77346802]
[187.42240906 272.56994629]
[193.45552063 286.30319214]
[206.19027710 295.69128418]
[204.38220215 310.47573853]
[210.56072998 324.14416504]
[216.73924255 337.81259155]
[222.91777039 351.48101807]
[229.09628296 365.14944458]
[236.41171265 378.24465942]
[244.81132507 390.67230225]
[253.21095276 403.09994507]
[261.74200439 415.43774414]
[270.40350342 427.68432617]
[285.51696777 434.04949951]
[287.29251099 450.35226440]
[273.90362549 459.82168579]
[259.12365723 452.71646118]
[258.15695190 436.34582520]
[249.49543762 424.09927368]
[243.02035522 420.42898560]
[240.78330994 411.49957275]
[232.38368225 399.07192993]
[223.98405457 386.64428711]
[221.55671692 401.44659424]
[211.00825500 412.11099243]
[196.23336792 414.70001221]
[182.68728638 408.25769043]
[175.37149048 395.16268921]
[176.98713684 380.24993896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[8 120]
[10 119]
[11 118]
[12 117]
[14 115]
[15 114]
[16 112]
[17 111]
[21 105]
[22 104]
[23 103]
[25 102]
[26 101]
[27 100]
[28 98]
[29 97]
[30 96]
[31 95]
[33 93]
[34 92]
[37 90]
[38 89]
[39 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 82]
[46 81]
[49 78]
[50 77]
[51 76]
[53 74]
[54 73]
[55 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[127 141]
[128 140]
[129 139]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
