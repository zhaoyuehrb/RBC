%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCCCUGGGGACGCAGACGCCAAGGCCCCUCCGGCCAGGGCCGGGAGCCGGGCCGGCCUAGCCAGUUCUGAAAGCCCCAUGGCCCCAGCAGGCCUCUGAGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[70.57773590 382.23822021]
[58.92723083 392.09866333]
[44.15004730 395.91934204]
[29.18020439 392.94165039]
[16.98997879 383.75680542]
[9.99974728 370.18850708]
[9.59742451 354.93069458]
[15.86289120 341.01281738]
[27.55213737 331.19833374]
[42.34424973 327.43588257]
[45.27060699 312.72409058]
[48.19696045 298.01229858]
[51.12331390 283.30053711]
[54.04967117 268.58874512]
[52.24215317 261.31027222]
[57.26992416 253.50801086]
[52.55869675 239.37811279]
[63.17283630 227.64566040]
[66.51065063 213.02174377]
[69.84846497 198.39782715]
[73.18627930 183.77389526]
[68.47505188 169.64401245]
[79.08918762 157.91156006]
[82.42700195 143.28764343]
[85.76481628 128.66371155]
[75.65763092 120.77734375]
[69.45639801 109.55706024]
[68.15615845 96.80325317]
[53.99791336 91.84906769]
[39.83966064 86.89488220]
[25.68141174 81.94069672]
[10.66142273 87.57802582]
[-3.03637242 79.22638702]
[-4.90419769 63.29243469]
[6.49078274 51.99934006]
[22.40731430 54.01019669]
[30.63559723 67.78244781]
[44.79384613 72.73663330]
[58.95209885 77.69081879]
[73.11035156 82.64500427]
[89.00717163 69.94326782]
[109.34774017 69.39168549]
[116.96887207 56.47199631]
[124.59000397 43.55230713]
[132.21113586 30.63261795]
[139.83226013 17.71292877]
[147.08804321 4.58457708]
[153.97277832 -8.74210739]
[160.85749817 -22.06879234]
[162.04991150 -31.27380180]
[168.12678528 -35.66866684]
[175.38256836 -48.79701614]
[182.07972717 -62.21894836]
[188.20639038 -75.91069794]
[194.33305359 -89.60244751]
[200.45971680 -103.29419708]
[206.39375305 -117.07051849]
[204.52651978 -132.78115845]
[216.54536438 -141.57868958]
[222.28561401 -155.43687439]
[228.02586365 -169.29507446]
[228.50115967 -186.24235535]
[244.91770935 -190.47711182]
[253.53152466 -175.87443542]
[241.88406372 -163.55480957]
[236.14381409 -149.69662476]
[230.40356445 -135.83842468]
[232.68138123 -121.11902618]
[220.25195312 -111.33026886]
[220.60476685 -103.83901978]
[214.15145874 -97.16752625]
[208.02479553 -83.47578430]
[201.89813232 -69.78403473]
[195.77146912 -56.09228134]
[196.77856445 -52.57048416]
[196.03642273 -48.37234497]
[193.24105835 -44.37048721]
[188.51092529 -41.54123306]
[181.25514221 -28.41288376]
[174.18418884 -15.18406391]
[167.29945374 -1.85737956]
[160.41473389 11.46930504]
[161.03857422 16.33720779]
[158.50830078 21.62895775]
[152.75195312 25.33405876]
[145.13082886 38.25374985]
[137.50968933 51.17343903]
[129.88856506 64.09312439]
[122.26743317 77.01281738]
[129.37719727 87.30237579]
[132.00045776 99.53112793]
[129.73660278 111.83148193]
[122.93135071 122.32492828]
[112.62401581 129.40890503]
[100.38873291 132.00152588]
[97.05091858 146.62545776]
[93.71310425 161.24937439]
[98.18559265 176.42524719]
[87.81019592 187.11170959]
[84.47238159 201.73564148]
[81.13456726 216.35955811]
[77.79675293 230.98347473]
[82.26923370 246.15936279]
[71.89384460 256.84582520]
[68.76145172 271.51510620]
[65.83509827 286.22689819]
[62.90874100 300.93865967]
[59.98238373 315.65045166]
[57.05603027 330.36221313]
[69.28233337 339.49899292]
[76.32594299 353.03967285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 109]
[11 108]
[12 107]
[13 106]
[14 105]
[16 104]
[18 102]
[19 101]
[20 100]
[21 99]
[23 97]
[24 96]
[25 95]
[28 40]
[29 39]
[30 38]
[31 37]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 82]
[48 81]
[49 80]
[51 79]
[52 78]
[53 74]
[54 73]
[55 72]
[56 71]
[57 69]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
