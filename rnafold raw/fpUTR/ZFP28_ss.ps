%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGGGUGUGGCCAGGGGUGUGGGUCUGUGAGGGACCGGUCGGAAGGGCGUCGCGCGGCCUCGGGUGAC\
) } def
/len { sequence length } bind def

/coor [
[127.27731323 236.58309937]
[137.62670898 225.30708313]
[132.49641418 211.21170044]
[120.87274170 201.89828491]
[123.42349243 186.28404236]
[118.29319000 172.18865967]
[106.66952515 162.87524414]
[109.22026825 147.26101685]
[104.08996582 133.16563416]
[98.95966339 119.07023621]
[85.87239838 112.85173798]
[80.91669464 99.23604584]
[86.94494629 86.06006622]
[81.81464386 71.96467590]
[76.68434143 57.86928558]
[62.63653564 56.10971069]
[50.81119919 48.44736862]
[43.53462219 36.45888519]
[42.20802307 22.56487656]
[47.03804398 9.54127407]
[57.00709152 -0.03528137]
[52.49650192 -14.34103584]
[47.67491150 -28.54498672]
[35.68429184 -38.86659622]
[38.60198975 -53.47262955]
[33.47169113 -67.56802368]
[28.34138680 -81.66340637]
[23.21108437 -95.75879669]
[18.08078384 -109.85418701]
[4.20702505 -117.91014099]
[1.99790323 -133.80036926]
[13.14806652 -145.33525085]
[29.10406303 -143.66619873]
[37.62582016 -130.07359314]
[32.17617035 -114.98448944]
[37.30647278 -100.88909912]
[42.43677521 -86.79370880]
[47.56707764 -72.69832611]
[52.69738007 -58.60293198]
[64.32104492 -49.28952408]
[61.77030182 -33.67528915]
[67.18663025 -28.30125618]
[66.80226135 -18.85162354]
[71.31284332 -4.54586840]
[87.03617096 -1.51420736]
[99.21411133 9.02581501]
[104.53086853 24.32693863]
[101.47772217 40.32961273]
[90.77973175 52.73898315]
[95.91003418 66.83437347]
[101.04033661 80.92976379]
[114.12760162 87.14826202]
[119.08330536 100.76395416]
[113.05505371 113.93993378]
[118.18535614 128.03532410]
[123.31565857 142.13070679]
[135.30627441 152.45231628]
[132.38858032 167.05836487]
[137.51887512 181.15374756]
[149.50950623 191.47535706]
[146.59179688 206.08139038]
[151.72210693 220.17677307]
[166.89828491 222.16224670]
[179.40675354 230.98249817]
[186.37316895 244.61068726]
[186.19667053 259.91519165]
[178.91784668 273.37908936]
[166.20928955 281.90853882]
[150.99136353 283.54351807]
[136.76101685 277.90829468]
[126.78827667 266.29782104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[5 59]
[6 58]
[8 56]
[9 55]
[10 54]
[13 51]
[14 50]
[15 49]
[21 44]
[22 43]
[23 41]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
