%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGACCAAGAGUAGGCAGCAGCGGCGGCGGCGGAGGAGGAGGCGGUGGUGGAGGUGCGCGGCCUGAAGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[72.87404633 367.70089722]
[57.63006210 365.82568359]
[45.37566757 356.56686401]
[39.40723419 342.41506958]
[41.33024216 327.17703247]
[50.62740707 314.95172119]
[64.79784393 309.02767944]
[66.62925720 294.13992310]
[55.09560394 286.54934692]
[47.97578049 274.64151001]
[46.73627472 260.75595093]
[51.68151093 247.65043640]
[61.88180161 237.95312500]
[75.34751892 233.63558960]
[77.78466034 218.83489990]
[80.22180939 204.03421021]
[82.65895081 189.23352051]
[85.09609222 174.43284607]
[76.77449036 157.16990662]
[89.08497620 141.45175171]
[90.30761719 126.50166321]
[91.53025818 111.55157471]
[85.72371674 98.83246613]
[93.51965332 87.22578430]
[83.92657471 69.71632385]
[94.94240570 54.03483582]
[94.94240570 39.03483582]
[87.20510864 25.23466492]
[94.94240570 12.50739288]
[94.94240570 -2.49260664]
[87.20510864 -16.29277992]
[94.94240570 -29.02005005]
[94.94240570 -44.02005005]
[81.60128021 -51.62990570]
[73.86631012 -64.89888763]
[73.81816864 -80.25769806]
[81.46980286 -93.57491302]
[94.76296234 -101.26824951]
[110.12185669 -101.26824951]
[123.41501617 -93.57491302]
[131.06665039 -80.25769806]
[131.01850891 -64.89888763]
[123.28353882 -51.62990570]
[109.94240570 -44.02005005]
[109.94240570 -29.02005005]
[117.67971039 -16.29277992]
[109.94240570 -2.49260664]
[109.94240570 12.50739288]
[117.67971039 25.23466492]
[109.94240570 39.03483582]
[109.94240570 54.03483582]
[118.02132416 60.84028625]
[120.93075562 71.22692871]
[117.42059326 81.66194153]
[108.46974182 88.44842529]
[114.27628326 101.16753387]
[106.48034668 112.77421570]
[105.25770569 127.72430420]
[104.03506470 142.67439270]
[111.76434326 150.82499695]
[113.53241730 161.69168091]
[108.97406769 171.46759033]
[99.89677429 176.86997986]
[97.45963287 191.67066956]
[95.02249146 206.47135925]
[92.58535004 221.27204895]
[90.14820862 236.07272339]
[102.96384430 246.30456543]
[108.91418457 261.48632812]
[106.49188232 277.51763916]
[96.43761444 290.11840820]
[81.51703644 295.97131348]
[79.68562317 310.85910034]
[91.99781799 320.04089355]
[98.05484772 334.15499878]
[96.22740936 349.40478516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 73]
[8 72]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[20 59]
[21 58]
[22 57]
[24 55]
[26 51]
[27 50]
[29 48]
[30 47]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
