%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCACGCGGCCGCUCUGGCCCAGGGAAGUCCCUGUCCUUACCUUCAGCAGGAGCCGGUUCCCUGUGUGUGUGUCCGCUCGCCCUCUGCUCCGUCCUGCGGCUGCCCACUGCCCUCCUACGGUCCACC\
) } def
/len { sequence length } bind def

/coor [
[200.51884460 197.12089539]
[192.39788818 187.05674744]
[188.70730591 174.61354065]
[190.03736877 161.65568542]
[177.10781860 154.05128479]
[162.79951477 158.02722168]
[149.57879639 150.49946594]
[145.50547791 135.46464539]
[132.57594299 127.86025238]
[119.64639282 120.25585175]
[106.71685028 112.65145874]
[92.73833466 112.34680939]
[85.67875671 100.27809143]
[72.74920654 92.67369080]
[59.81966400 85.06929016]
[48.99886703 90.27792358]
[37.13103104 89.57521820]
[27.20386124 83.25543976]
[21.65942192 73.01213074]
[21.79376221 61.48584747]
[9.24671078 53.26565933]
[-6.53685856 52.17501450]
[-12.94270420 38.72828674]
[-25.48975563 30.50810051]
[-38.03680801 22.28791428]
[-50.58385849 14.06772614]
[-63.13091278 5.84753799]
[-75.67796326 -2.37264943]
[-88.22501373 -10.59283733]
[-101.06173706 -18.35290337]
[-114.17125702 -25.64265633]
[-129.99237061 -25.58715630]
[-137.35539246 -38.53455353]
[-150.46492004 -45.82430267]
[-163.57443237 -53.11405563]
[-176.68395996 -60.40380859]
[-189.79347229 -67.69355774]
[-202.56101990 -59.25267029]
[-217.78994751 -57.72354126]
[-231.98077393 -63.45755768]
[-241.87255859 -75.13708496]
[-245.19223022 -90.07824707]
[-241.17694092 -104.84767914]
[-230.74940491 -116.05147552]
[-216.30577087 -121.11508179]
[-201.16510010 -118.87491608]
[-188.80657959 -109.84576416]
[-182.07012939 -96.10244751]
[-182.50372314 -80.80307770]
[-169.39421082 -73.51332855]
[-156.28468323 -66.22357941]
[-143.17517090 -58.93382645]
[-130.06564331 -51.64407349]
[-115.18221283 -52.22098541]
[-106.88150787 -38.75217438]
[-93.77198792 -31.46242523]
[-90.21259308 -32.13392258]
[-86.14741516 -31.04921341]
[-82.43649292 -27.98878479]
[-80.00482941 -23.13988876]
[-67.45777893 -14.91970158]
[-54.91072464 -6.69951391]
[-42.36367416 1.52067375]
[-29.81661987 9.74086094]
[-17.26956940 17.96104813]
[-4.72251654 26.18123627]
[10.16360378 26.68391991]
[17.46689796 40.71860886]
[30.01395035 48.93879700]
[47.58846283 44.08634567]
[63.45314789 53.69708633]
[67.42406464 72.13974762]
[80.35360718 79.74414825]
[93.28314972 87.34854126]
[107.26166534 87.65319061]
[114.32124329 99.72190857]
[127.25079346 107.32630920]
[140.18032837 114.93070984]
[153.10987854 122.53510284]
[168.22940063 118.78837585]
[181.23345947 126.68450165]
[184.71221924 141.12174988]
[197.64176941 148.72613525]
[212.63056946 139.71929932]
[230.02740479 139.48348999]
[245.10095215 147.99392700]
[253.79650879 162.85919189]
[253.82653809 179.99259949]
[267.10836792 186.96343994]
[282.02923584 182.49061584]
[295.39959717 189.74925232]
[299.57180786 204.00155640]
[312.85363770 210.97241211]
[326.13546753 217.94325256]
[339.41732788 224.91410828]
[351.68869019 215.90438843]
[366.59423828 213.12739563]
[381.16772461 217.08129883]
[392.53262329 226.93014526]
[398.46984863 240.68000793]
[397.85095215 255.58244324]
[411.13281250 262.55328369]
[424.41464233 269.52413940]
[438.26437378 262.52664185]
[453.57662964 265.03942871]
[464.46356201 276.09631348]
[466.73892212 291.44564819]
[459.52777100 305.18533325]
[445.60296631 312.03216553]
[430.31884766 309.35342407]
[419.55252075 298.17910767]
[417.44378662 282.80596924]
[404.16195679 275.83514404]
[390.88012695 268.86428833]
[378.96722412 277.83917236]
[364.27859497 280.76373291]
[349.71713257 277.00540161]
[338.18444824 267.25772095]
[332.00253296 253.41317749]
[332.44647217 238.19593811]
[319.16464233 231.22509766]
[305.88278198 224.25424194]
[292.60095215 217.28340149]
[278.50143433 221.94598389]
[264.93246460 215.06575012]
[260.13754272 200.24528503]
[246.85568237 193.27442932]
[236.87145996 201.19454956]
[224.57850647 204.72946167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[8 79]
[9 78]
[10 77]
[11 76]
[13 74]
[14 73]
[15 72]
[20 69]
[21 68]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 56]
[31 55]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[88 127]
[89 126]
[92 123]
[93 122]
[94 121]
[95 120]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
