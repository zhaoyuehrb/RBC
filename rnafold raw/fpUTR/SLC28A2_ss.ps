%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCAGUCCUUCACUGAGGAGCCAGAGGGAAUCAAUUCCACAAGCUGGGUUGAGGAGAACAGGAG\
) } def
/len { sequence length } bind def

/coor [
[86.18692017 276.97750854]
[71.84976196 282.91262817]
[56.77008820 279.25433350]
[46.74634171 267.40933228]
[45.63285446 251.93226624]
[53.85778809 238.77436829]
[68.25848389 232.99513245]
[71.79486847 218.41796875]
[75.33125305 203.84078979]
[78.86763763 189.26362610]
[81.70640564 174.53468323]
[83.84112549 159.68736267]
[77.99385834 145.98851013]
[87.61637878 133.42993164]
[89.75109863 118.58261108]
[80.89195251 109.23233795]
[79.07229614 96.48083496]
[84.96248627 85.02580261]
[96.39255524 79.08732605]
[99.23132324 64.35839844]
[94.24555206 49.34331894]
[104.25167847 38.31034088]
[107.09044647 23.58140945]
[109.92921448 8.85247898]
[112.76798248 -5.87645149]
[100.55520630 -21.37546730]
[103.06993103 -40.65435410]
[118.38559723 -52.15332031]
[119.09932709 -67.13632965]
[119.81304932 -82.11933899]
[120.52677917 -97.10234833]
[112.53541565 -111.42262268]
[121.17263031 -125.36286926]
[137.55320740 -124.58256531]
[144.82620239 -109.88442230]
[135.50979614 -96.38862610]
[134.79606628 -81.40560913]
[134.08233643 -66.42259979]
[133.36860657 -51.43959427]
[142.55441284 -45.61584473]
[148.37223816 -36.32850647]
[149.62275696 -25.35770416]
[145.99021912 -14.84289932]
[138.11824036 -6.86566877]
[127.49691772 -3.03768301]
[124.65814972 11.69124794]
[121.81937408 26.42017746]
[118.98060608 41.14910889]
[124.16943359 55.11067581]
[113.96025848 67.19716644]
[111.12149048 81.92609406]
[120.66915894 95.18966675]
[117.95906830 111.30598450]
[104.59841919 120.71733856]
[102.46369934 135.56465149]
[108.15827179 150.32550049]
[98.68844604 161.82208252]
[96.55372620 176.66941833]
[98.84249115 183.49754333]
[97.29574585 189.44300842]
[93.44480896 192.80000305]
[89.90842438 207.37718201]
[86.37203979 221.95434570]
[82.83565521 236.53152466]
[92.98731232 248.26708984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 64]
[8 63]
[9 62]
[10 61]
[11 58]
[12 57]
[14 55]
[15 54]
[19 51]
[20 50]
[22 48]
[23 47]
[24 46]
[25 45]
[28 39]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
