%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAGCGGCCUCUAGGCGCCGGGCCCUCAGUCUCUCCCAGCGACCGCCGCGGGGGCAAGGCCUGGAGCUGUGGUUCGAAUUUGUGCAGGCAGCGGGUGCUGGCUUUUAGGGUCCGCCGCCUCUCUGCCUA\
) } def
/len { sequence length } bind def

/coor [
[53.72314453 566.98199463]
[40.95763397 575.42596436]
[25.72906876 576.95874023]
[11.53686333 571.22814941]
[1.64228344 559.55096436]
[-1.68097055 544.61059570]
[2.33076143 529.84020996]
[12.75561237 518.63391113]
[27.19802856 513.56683350]
[29.31680870 498.71725464]
[31.43558884 483.86764526]
[19.63351631 474.78045654]
[13.92660904 460.91369629]
[15.94014168 445.95333862]
[25.23259544 433.93057251]
[39.38759613 428.13546753]
[41.50637817 413.28585815]
[43.62515640 398.43627930]
[45.74393845 383.58666992]
[47.86271667 368.73706055]
[42.00074768 355.04449463]
[51.60977173 342.47558594]
[53.72855377 327.62597656]
[55.84733200 312.77636719]
[57.96611404 297.92675781]
[60.08489227 283.07714844]
[62.20367050 268.22756958]
[64.32244873 253.37796021]
[66.44123077 238.52835083]
[57.87587357 221.25527954]
[70.32299805 205.47903442]
[71.73815155 190.54594421]
[59.16180801 198.72125244]
[44.44449615 195.82283020]
[35.90711975 183.48941040]
[38.37654877 168.69407654]
[50.45661545 159.80183411]
[65.31747437 161.84019470]
[74.55668640 173.65538025]
[78.06697845 159.07189941]
[81.57727814 144.48843384]
[85.08757019 129.90495300]
[88.59786224 115.32147217]
[81.12412262 102.90819550]
[84.51495361 88.82101440]
[96.81866455 81.16823578]
[100.32895660 66.58475494]
[103.83924866 52.00127792]
[107.34954071 37.41780090]
[103.05660248 22.19015312]
[113.55747986 11.62697315]
[117.06777191 -2.95650530]
[109.08110809 -16.33002281]
[112.84879303 -31.06973839]
[125.64761353 -38.60138321]
[121.35467529 -53.82903290]
[131.85556030 -64.39221191]
[135.36584473 -78.97569275]
[138.87614441 -93.55916595]
[142.38642883 -108.14264679]
[145.89672852 -122.72612762]
[136.52777100 -131.16535950]
[131.69963074 -142.73527527]
[132.28393555 -155.18592834]
[138.10626221 -166.12474060]
[147.99157715 -173.47625732]
[160.00093079 -175.87585449]
[164.19599915 -190.27729797]
[168.39106750 -204.67872620]
[172.58615112 -219.08016968]
[168.16226196 -234.87133789]
[179.81779480 -246.40739441]
[195.56254578 -241.82101440]
[199.19966125 -225.83029175]
[186.98757935 -214.88508606]
[182.79251099 -200.48365784]
[178.59744263 -186.08221436]
[174.40235901 -171.68078613]
[185.83984375 -158.32467651]
[187.05308533 -140.62606812]
[177.37646484 -125.57166290]
[160.48020935 -119.21583557]
[156.96990967 -104.63235474]
[153.45962524 -90.04887390]
[149.94932556 -75.46540070]
[146.43904114 -60.88191986]
[150.98306274 -46.69738007]
[140.23109436 -35.09109116]
[148.20083618 -22.56037903]
[144.84864807 -7.72065306]
[131.65124512 0.55378765]
[128.14096069 15.13726616]
[132.68498230 29.32180595]
[121.93302155 40.92809296]
[118.42272186 55.51157379]
[114.91242981 70.09504700]
[111.40213776 84.67852783]
[118.87587738 97.09180450]
[115.48504639 111.17898560]
[103.18133545 118.83176422]
[99.67104340 133.41523743]
[96.16075134 147.99871826]
[92.65045929 162.58219910]
[89.14016724 177.16567993]
[86.67124939 191.96109009]
[85.25609589 206.89419556]
[92.73471069 214.95678711]
[94.45211792 225.59532166]
[90.07330322 235.19970703]
[81.29084015 240.64712524]
[79.17205811 255.49673462]
[77.05327606 270.34634399]
[74.93449402 285.19595337]
[72.81571960 300.04556274]
[70.69693756 314.89514160]
[68.57815552 329.74475098]
[66.45937347 344.59436035]
[72.16979980 359.34909058]
[62.71232224 370.85583496]
[60.59354401 385.70544434]
[58.47476196 400.55505371]
[56.35598373 415.40466309]
[54.23720169 430.25424194]
[66.20663452 439.77685547]
[71.76585388 453.91870117]
[69.51505280 468.84521484]
[60.15773773 480.56256104]
[46.28519440 485.98641968]
[44.16641235 500.83602905]
[42.04763412 515.68560791]
[54.49662018 524.58966064]
[61.37139511 538.26428223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 130]
[10 129]
[11 128]
[16 123]
[17 122]
[18 121]
[19 120]
[20 119]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[31 106]
[32 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[46 97]
[47 96]
[48 95]
[49 94]
[51 92]
[52 91]
[55 88]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
