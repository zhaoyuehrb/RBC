%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGUGCCCGGAUGGAGGCACGUCAUUGUCCCCCGCCGGGCGGCUGGGCUGUGUGCGGCGGCGGCGGCGGCGGCCGAGGGGGAUGGAGCGAGCGCCGAGCCGGGUCAGAGUUGAACA\
) } def
/len { sequence length } bind def

/coor [
[92.39153290 475.80404663]
[82.31468964 464.12240601]
[80.17570496 448.84405518]
[86.65712738 434.84423828]
[99.69075775 426.59027100]
[99.69075775 411.59027100]
[99.69075775 396.59027100]
[99.69075775 381.59027100]
[89.00988770 371.27258301]
[88.79620361 356.06045532]
[99.69075775 344.92733765]
[99.69075775 329.92733765]
[99.50074768 314.92852783]
[99.12075806 299.93334961]
[98.74076843 284.93817139]
[98.36077118 269.94296265]
[97.98078156 254.94778442]
[88.01426697 240.56294250]
[96.79758453 224.43887329]
[96.03784180 209.45812988]
[95.27810669 194.47738647]
[86.47771454 186.07426453]
[85.78620911 173.52299500]
[94.12681580 163.58697510]
[93.74682617 148.59178162]
[85.68959045 136.06460571]
[93.07481384 122.07285309]
[92.69482422 107.07766724]
[89.32644653 99.64511108]
[92.50000000 91.69887543]
[84.76270294 77.89870453]
[92.50000000 65.17143250]
[92.50000000 50.17143631]
[92.50000000 35.17143631]
[92.50000000 20.17143440]
[92.50000000 5.17143488]
[92.50000000 -9.82856560]
[92.50000000 -24.82856560]
[92.50000000 -39.82856369]
[92.50000000 -54.82856369]
[91.93009186 -69.81773376]
[90.79109192 -84.77442932]
[89.65209961 -99.73112488]
[88.51309967 -114.68781281]
[77.76306915 -129.57301331]
[85.83236694 -145.10174561]
[84.31484222 -160.02478027]
[75.22109985 -172.97137451]
[81.63110352 -186.41612244]
[80.11357880 -201.33915710]
[78.59605408 -216.26220703]
[77.07852936 -231.18524170]
[65.95487213 -245.79333496]
[73.62818909 -261.52148438]
[71.73311615 -276.40130615]
[69.83803558 -291.28112793]
[67.94295502 -306.16091919]
[57.58956146 -318.87860107]
[63.67875290 -334.10534668]
[79.94649506 -336.17718506]
[89.65792847 -322.96279907]
[82.82276154 -308.05599976]
[84.71784210 -293.17620850]
[86.61292267 -278.29638672]
[88.50800323 -263.41656494]
[97.92105865 -255.70596313]
[99.56362152 -243.24343872]
[92.00157166 -232.70277405]
[93.51909637 -217.77972412]
[95.03662109 -202.85668945]
[96.55414581 -187.93365479]
[105.53934479 -176.05444336]
[99.23788452 -161.54231262]
[100.75540924 -146.61926270]
[109.97011566 -138.67266846]
[111.29644012 -126.17253113]
[103.46979523 -115.82681274]
[104.60878754 -100.87011719]
[105.74778748 -85.91342163]
[106.88678741 -70.95673370]
[109.42088318 -68.35147095]
[110.75947571 -64.34501648]
[110.23775482 -59.54174423]
[107.50000000 -54.82856369]
[107.50000000 -39.82856369]
[107.50000000 -24.82856560]
[107.50000000 -9.82856560]
[107.50000000 5.17143488]
[107.50000000 20.17143440]
[107.50000000 35.17143631]
[107.50000000 50.17143631]
[107.50000000 65.17143250]
[115.23729706 77.89870453]
[107.50000000 91.69887543]
[107.69001007 106.69767761]
[108.06999969 121.69286346]
[116.15441132 135.29260254]
[108.74201202 148.21179199]
[109.12200165 163.20698547]
[119.10431671 178.61753845]
[110.25885773 193.71765137]
[111.01859283 208.69839478]
[111.77832794 223.67913818]
[120.84932709 232.95315552]
[121.11287689 245.52069092]
[112.97596741 254.56779480]
[113.35595703 269.56298828]
[113.73595428 284.55816650]
[114.11594391 299.55334473]
[114.49593353 314.54855347]
[117.87330627 323.16146851]
[114.69075775 329.92733765]
[114.69075775 344.92733765]
[125.58531189 356.06045532]
[125.37162781 371.27258301]
[114.69075775 381.59027100]
[114.69075775 396.59027100]
[114.69075775 411.59027100]
[114.69075775 426.59027100]
[127.72438812 434.84423828]
[134.20581055 448.84405518]
[132.06683350 464.12240601]
[121.98998260 475.80404663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 119]
[6 118]
[7 117]
[8 116]
[11 113]
[12 112]
[13 110]
[14 109]
[15 108]
[16 107]
[17 106]
[19 103]
[20 102]
[21 101]
[24 99]
[25 98]
[27 96]
[28 95]
[30 94]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[41 80]
[42 79]
[43 78]
[44 77]
[46 74]
[47 73]
[49 71]
[50 70]
[51 69]
[52 68]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
