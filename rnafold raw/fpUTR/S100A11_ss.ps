%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAAGGCUGGGCCGGGAAGGGCGUGGGUUGAGGAGAGGCUCCAGACCCGCACGCCGCGCGCACAGAGCUCUCAGCGCCGCUCCCAGCCACAGCCUCCCGCGCCUCGCUCAGCUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[212.04504395 321.34152222]
[204.60133362 308.31878662]
[197.15760803 295.29608154]
[192.75411987 293.17745972]
[189.69535828 288.20681763]
[189.68566895 281.39855957]
[182.92791748 268.00701904]
[176.17016602 254.61550903]
[169.41241455 241.22399902]
[162.65466309 227.83247375]
[155.89689636 214.44096375]
[148.96588135 201.13830566]
[141.86274719 187.92672729]
[134.75961304 174.71516418]
[121.91792297 167.16928101]
[122.19775391 151.35055542]
[115.09462738 138.13897705]
[107.99149323 124.92741394]
[100.88836670 111.71585083]
[93.38282776 113.04394531]
[85.13479614 109.24075317]
[79.62101746 100.22471619]
[66.31835175 93.29369354]
[53.01568604 86.36266327]
[39.71302414 79.43164062]
[26.41035843 72.50061035]
[12.93224430 65.91726685]
[-0.71223581 59.68603897]
[-14.35671616 53.45481491]
[-28.00119591 47.22359085]
[-41.64567566 40.99236298]
[-54.06151962 44.76770401]
[-65.33800507 39.20320129]
[-69.61135864 27.80574608]
[-83.08946991 21.22240067]
[-96.56758881 14.63905621]
[-110.04570007 8.05571175]
[-126.93148804 6.53696394]
[-130.14654541 -10.10934925]
[-115.04079437 -17.80691910]
[-103.46235657 -5.42240334]
[-89.98424530 1.16094160]
[-76.50612640 7.74428654]
[-63.02801514 14.32763100]
[-45.67040634 12.12193298]
[-35.41445160 27.34788513]
[-21.76996994 33.57910919]
[-8.12549019 39.81033707]
[5.51898956 46.04156113]
[19.16346931 52.27278519]
[23.97573280 51.42345047]
[29.36038589 53.67490005]
[33.34138489 59.19794464]
[46.64405060 66.12897491]
[59.94671249 73.05999756]
[73.24937439 79.99102783]
[86.55204010 86.92205048]
[100.88836670 82.50959015]
[107.99149323 69.29801941]
[115.09462738 56.08644867]
[122.02565002 42.78378677]
[128.78340149 29.39226913]
[135.54116821 16.00075150]
[130.83052063 1.15327334]
[137.87460327 -12.33136272]
[152.05844116 -16.73074341]
[158.81619263 -30.12226105]
[157.35443115 -46.45613098]
[170.92289734 -55.66637039]
[185.56353760 -48.27827454]
[186.21530151 -31.89208412]
[172.20771790 -23.36450577]
[165.44995117 -9.97298813]
[170.33720398 4.05022144]
[163.67465210 17.72739220]
[148.93267822 22.75850487]
[142.17492676 36.15002441]
[135.41717529 49.54154205]
[135.21032715 57.02089310]
[128.30619812 63.18957901]
[121.20306396 76.40114594]
[114.09992981 89.61271667]
[114.09992981 104.61271667]
[121.20306396 117.82428741]
[128.30619812 131.03585815]
[135.40931702 144.24742126]
[148.75907898 152.73828125]
[147.97117615 167.61203003]
[155.07431030 180.82360840]
[162.17744446 194.03517151]
[169.08157349 200.20385742]
[169.28842163 207.68321228]
[176.04617310 221.07472229]
[182.80392456 234.46624756]
[189.56167603 247.85775757]
[196.31944275 261.24926758]
[203.07719421 274.64080811]
[210.18032837 287.85235596]
[217.62403870 300.87509155]
[225.06776428 313.89779663]
[234.44183350 325.60791016]
[245.51925659 335.72180176]
[256.59667969 345.83569336]
[272.37057495 352.05020142]
[270.76559448 368.92800903]
[254.10307312 372.05798340]
[246.48277283 356.91311646]
[235.40534973 346.79922485]
[224.32794189 336.68530273]
[226.81272888 351.47808838]
[222.77688599 365.92492676]
[212.98519897 377.28817749]
[199.29324341 383.41436768]
[184.29571533 383.14263916]
[170.83467102 376.52444458]
[161.46107483 364.81393433]
[157.95123291 350.23034668]
[160.97029114 335.53732300]
[169.94612122 323.51922607]
[183.17774963 316.45355225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 90]
[13 89]
[14 88]
[16 86]
[17 85]
[18 84]
[19 83]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[34 44]
[35 43]
[36 42]
[37 41]
[58 82]
[59 81]
[60 80]
[61 78]
[62 77]
[63 76]
[66 73]
[67 72]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
