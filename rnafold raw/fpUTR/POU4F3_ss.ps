%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGAGCAGCGCUCACUUGGAGAGCGGCAAGCAAGCUAGACAAGCCUGAUUCCAUGUCACCCGCUGCCACCCUGCCAGGAGCGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[42.65126801 486.30233765]
[27.81174088 489.59732056]
[12.84174061 486.95770264]
[0.02408863 478.78604126]
[-8.68661785 466.32843018]
[-11.96205902 451.48455811]
[-9.30275440 436.51806641]
[-1.11422789 423.71115112]
[11.35482883 415.01684570]
[26.20297623 411.76092529]
[28.80769920 396.98883057]
[31.41242218 382.21670532]
[34.01714325 367.44458008]
[36.62186813 352.67248535]
[39.22658920 337.90036011]
[37.24414062 330.60830688]
[42.18862534 322.66198730]
[45.30730057 307.98977661]
[43.58055115 300.63296509]
[48.79934692 292.86407471]
[52.42817307 278.30963135]
[55.80244064 263.69409180]
[58.92111588 249.02188110]
[53.99904251 234.96405029]
[64.43648529 223.07412720]
[59.51440811 209.01629639]
[69.95185089 197.12637329]
[73.07052612 182.45414734]
[76.18920135 167.78193665]
[79.30787659 153.10972595]
[77.58112335 145.75291443]
[82.79991913 137.98402405]
[86.42874908 123.42958832]
[74.66160583 109.54411316]
[74.34395599 91.34600067]
[85.61933136 77.05831909]
[81.48477173 62.63939285]
[77.35021210 48.22046661]
[64.07220459 39.21635056]
[62.97690964 23.21073151]
[74.90454865 12.48174763]
[90.70524597 15.25975800]
[98.25807190 29.41371155]
[91.76913452 44.08590698]
[95.90369415 58.50482941]
[100.03826141 72.92375946]
[104.70174408 73.33507538]
[109.22467041 74.54357147]
[118.04145050 62.40831375]
[126.85823059 50.27305984]
[135.67500305 38.13780594]
[134.59558105 22.13110542]
[146.53385925 11.41395760]
[162.33180237 14.20763969]
[169.87057495 28.36907768]
[163.36709595 43.03482819]
[147.81025696 46.95458221]
[138.99348450 59.08983612]
[130.17669678 71.22509003]
[121.35992432 83.36035156]
[126.90438080 96.95388794]
[124.53943634 111.44292450]
[114.96034241 122.56795502]
[100.98318481 127.05841064]
[97.35435486 141.61285400]
[93.98008728 156.22839355]
[90.86141205 170.90061951]
[87.74273682 185.57283020]
[84.62406158 200.24504089]
[89.32306671 215.35232544]
[79.10869598 226.19279480]
[83.80770111 241.30007935]
[73.59333038 252.14054871]
[70.47465515 266.81277466]
[71.75962067 276.08316040]
[66.98261261 281.93847656]
[63.35378265 296.49291992]
[59.97951508 311.10845947]
[56.86083984 325.78067017]
[53.99870682 340.50509644]
[51.39398193 355.27719116]
[48.78926086 370.04931641]
[46.18453979 384.82144165]
[43.57981491 399.59353638]
[40.97509384 414.36566162]
[53.81420135 422.50357056]
[62.55765152 434.93823242]
[65.87213135 449.77340698]
[63.25221252 464.74688721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[17 79]
[18 78]
[20 77]
[21 76]
[22 74]
[23 73]
[25 71]
[27 69]
[28 68]
[29 67]
[30 66]
[32 65]
[33 64]
[36 46]
[37 45]
[38 44]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
