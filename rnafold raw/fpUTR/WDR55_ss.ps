%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGCCCCGCCCCCCGAGGCGGAAGCGGAGUGCCAGGCUACUCCUCCCGCAGUGUGGGUGGUUCCGAGGCUGACUACCCUGCGGCGGCGCGGCUCGCAGUCCUUCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[32.81410980 219.31799316]
[34.18342972 204.38180542]
[22.94532585 214.31684875]
[11.70721912 224.25187683]
[0.46911302 234.18692017]
[-10.76899338 244.12194824]
[-22.00709915 254.05699158]
[-26.44293594 262.20098877]
[-33.69052887 264.10479736]
[-45.19581604 273.72915649]
[-50.81637192 288.51834106]
[-65.54286957 290.74978638]
[-77.04815674 300.37417603]
[-79.89714050 316.16223145]
[-94.08488464 323.65136719]
[-108.72777557 317.09658813]
[-112.59303284 301.52612305]
[-102.71556854 288.88430786]
[-86.67252350 288.86886597]
[-75.16723633 279.24450684]
[-70.36961365 265.14373779]
[-54.82017899 262.22387695]
[-43.31489563 252.59950256]
[-31.94213676 242.81887817]
[-20.70403099 232.88385010]
[-9.46592426 222.94880676]
[1.77218175 213.01377869]
[13.01028824 203.07873535]
[24.24839401 193.14369202]
[27.02797699 183.92752075]
[36.71443176 179.04263306]
[45.19644928 166.67106628]
[53.67846680 154.29951477]
[54.49383163 139.42724609]
[68.67887878 132.42047119]
[77.16089630 120.04891205]
[85.64291382 107.67735291]
[84.20960236 96.03378296]
[90.97490692 86.44953156]
[102.42617798 83.90089417]
[111.24295807 71.76563263]
[120.05973816 59.63038254]
[128.87651062 47.49512482]
[130.72843933 31.78268051]
[144.46894836 26.03397179]
[146.32089233 10.32152748]
[160.06140137 4.57281971]
[168.87817383 -7.56243563]
[167.64479065 -20.49052429]
[175.35008240 -30.43983078]
[187.38049316 -32.35240173]
[196.52545166 -44.24229813]
[205.67041016 -56.13219833]
[214.81536865 -68.02209473]
[223.96032715 -79.91199493]
[233.10530090 -91.80189514]
[235.38571167 -107.45789337]
[249.27812195 -112.82913208]
[258.42309570 -124.71903229]
[267.56805420 -136.60893250]
[276.71301270 -148.49882507]
[274.86480713 -163.96563721]
[284.30847168 -175.89340210]
[299.06509399 -177.56007385]
[308.21005249 -189.44996643]
[317.35501099 -201.33987427]
[326.49996948 -213.22976685]
[328.12142944 -229.54855347]
[343.17407227 -236.05624390]
[356.17303467 -226.05827332]
[353.74609375 -209.83970642]
[338.38986206 -204.08480835]
[329.24490356 -192.19491577]
[320.09994507 -180.30500793]
[310.95498657 -168.41511536]
[313.13095093 -153.72496033]
[304.02606201 -141.53663635]
[288.60290527 -139.35386658]
[279.45794678 -127.46397400]
[270.31298828 -115.57407379]
[261.16802979 -103.68417358]
[259.54171753 -88.87862396]
[244.99519348 -82.65692902]
[235.85023499 -70.76703644]
[226.70527649 -58.87713623]
[217.56031799 -46.98723602]
[208.41534424 -35.09733963]
[199.27038574 -23.20744133]
[197.96887207 -5.76513052]
[181.01342773 1.25434339]
[172.19665527 13.38959789]
[170.97535706 28.23404884]
[156.60420227 34.85074997]
[155.38291931 49.69520187]
[141.01176453 56.31190491]
[132.19499207 68.44715881]
[123.37821198 80.58241272]
[114.56143188 92.71766663]
[113.30100250 109.38887024]
[98.01447296 116.15937042]
[89.53245544 128.53092957]
[81.05043793 140.90248108]
[79.62837982 156.65965271]
[66.05001831 162.78153992]
[57.56800461 175.15309143]
[49.08598709 187.52464294]
[63.74275970 184.33419800]
[78.12717438 188.58728027]
[88.69232178 199.23516846]
[92.83305359 213.65232849]
[89.52835083 228.28375244]
[79.59308624 239.52166748]
[65.47708893 244.59500122]
[50.66108704 242.25279236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[9 23]
[10 22]
[12 20]
[13 19]
[31 106]
[32 105]
[33 104]
[35 102]
[36 101]
[37 100]
[40 98]
[41 97]
[42 96]
[43 95]
[45 93]
[47 91]
[48 90]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[58 81]
[59 80]
[60 79]
[61 78]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
