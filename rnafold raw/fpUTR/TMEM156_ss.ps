%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGUGAACUGCAUUAACCUAAAGUGCUGCAGAGAUAAACUUAAAGCAGGAAGCAACAUACCAUGAAUGUACUGCAAGGGAACACAUUUGUGUCAUGUGAAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[94.28022766 154.84898376]
[85.10019684 153.09541321]
[76.34812164 149.81681824]
[68.27537537 145.10737610]
[58.05770111 156.08914185]
[47.84003067 167.07090759]
[37.62235641 178.05267334]
[42.75930023 192.47038269]
[40.59611130 207.62225342]
[31.62987900 220.02648926]
[17.92097282 226.83270264]
[2.61960149 226.47686768]
[-10.75809193 219.04074097]
[-19.13801193 206.23310852]
[-20.59451485 190.99705505]
[-14.79290485 176.83372498]
[-3.06635094 166.99774170]
[11.89047050 163.74934387]
[26.64059258 167.83499146]
[36.85826492 156.85322571]
[47.07593918 145.87145996]
[57.29360962 134.88969421]
[49.83465195 122.90337372]
[45.66340637 109.41602325]
[45.05324936 95.31156158]
[48.04416656 81.51437378]
[54.44014359 68.92868805]
[39.01407623 65.41485596]
[34.76055527 51.14051819]
[23.63268852 41.08215714]
[12.50482273 31.02379799]
[1.37695634 20.96543884]
[-18.42793846 17.79708672]
[-23.89962959 -0.65453017]
[-35.58849716 -10.05508518]
[-47.27735901 -19.45563889]
[-63.31771851 -19.16148758]
[-73.43729401 -31.61033249]
[-69.87321472 -47.25248337]
[-55.35954285 -54.08862305]
[-41.02991867 -46.87464905]
[-37.87680435 -31.14450455]
[-26.18794060 -21.74394989]
[-14.49907494 -12.34339523]
[-4.29352617 -14.36570263]
[5.51297188 -10.27505112]
[11.50103474 -1.23071384]
[11.43531609 9.83757210]
[22.56318283 19.89593124]
[33.69104767 29.95429039]
[44.81891251 40.01264954]
[59.44904327 42.80704117]
[64.49850464 57.80082321]
[83.47360229 47.38816833]
[104.99455261 45.08022690]
[125.74610138 51.23254013]
[142.53152466 64.89735413]
[152.76509094 83.96963501]
[167.57701111 81.60176849]
[182.38894653 79.23390961]
[197.20086670 76.86604309]
[206.47462463 64.35063934]
[221.52975464 62.16028595]
[233.40412903 71.07851410]
[248.21604919 68.71064758]
[263.02798462 66.34278870]
[277.83990479 63.97492218]
[292.65182495 61.60705566]
[307.46377563 59.23919296]
[322.27569580 56.87132645]
[337.08761597 54.50346375]
[351.89953613 52.13559723]
[366.78030396 38.68809891]
[384.58801270 45.98793793]
[399.23892212 42.77066040]
[409.06225586 30.08674240]
[425.10507202 30.00272179]
[435.06072998 42.58304977]
[431.29205322 58.17717361]
[416.69009399 64.82261658]
[402.45617676 57.42156982]
[387.80529785 60.63884354]
[382.98532104 69.85898590]
[373.65188599 74.93714905]
[362.85128784 73.93527222]
[354.26742554 66.94752502]
[339.45547485 69.31539154]
[324.64355469 71.68325806]
[309.83163452 74.05111694]
[295.01971436 76.41898346]
[280.20776367 78.78684998]
[265.39584351 81.15471649]
[250.58392334 83.52258301]
[235.77198792 85.89044189]
[227.26972961 98.06612396]
[212.28205872 100.67847443]
[199.56874084 91.67797089]
[184.75680542 94.04583740]
[169.94488525 96.41369629]
[155.13294983 98.78156281]
[154.54693604 108.10919189]
[152.39419556 117.20390320]
[148.73658752 125.80448151]
[143.67915344 133.66389465]
[137.36715698 140.55641174]
[129.98188782 146.28404236]
[121.73547363 150.68231201]
[112.86476135 153.62484741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[7 19]
[27 53]
[29 51]
[30 50]
[31 49]
[32 48]
[34 44]
[35 43]
[36 42]
[58 100]
[59 99]
[60 98]
[61 97]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
