%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGGCGCGAGAUCCGAACGUCGGCGGCCGCGGUUCUGGCGUUCCCUGAGGCGCCGGGAGCCUGCGCCGGCGUCCUGCCGGCUUCGUCUCCUCAGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[35.23927689 175.06362915]
[30.32957649 175.56855774]
[18.93850136 185.32783508]
[7.54742861 195.08711243]
[-3.84364533 204.84638977]
[-15.23471928 214.60565186]
[-26.62579346 224.36492920]
[-38.01686478 234.12420654]
[-49.10200119 244.22964478]
[-59.87067795 254.67164612]
[-61.55443954 270.62609863]
[-75.15490723 279.13531494]
[-90.23897552 273.67175293]
[-95.23542786 258.42660522]
[-86.31142426 245.09461975]
[-70.31269073 243.90296936]
[-59.54401016 233.46096802]
[-58.58821487 228.61878967]
[-54.46968842 224.38833618]
[-47.77614212 222.73313904]
[-36.38506699 212.97386169]
[-24.99399376 203.21458435]
[-13.60291958 193.45530701]
[-2.21184611 183.69602966]
[9.17922783 173.93676758]
[20.57030106 164.17749023]
[31.65543556 154.07205200]
[42.42411423 143.63003540]
[53.19279099 133.18803406]
[63.96147156 122.74602509]
[74.73014832 112.30401611]
[85.49883270 101.86200714]
[90.04611969 87.56787872]
[87.28987885 72.82328033]
[84.53363037 58.07868195]
[81.77738953 43.33408737]
[79.02114868 28.58949089]
[76.26490784 13.84489346]
[73.28192902 -0.85551018]
[70.07293701 -15.50823498]
[66.86393738 -30.16095924]
[63.65494537 -44.81368637]
[60.44594574 -59.46640778]
[57.23694992 -74.11913300]
[43.79605484 -82.43284607]
[40.25196075 -97.83463287]
[48.70731354 -111.18688202]
[64.14570618 -114.56793976]
[77.40781403 -105.97189331]
[80.62545776 -90.49861145]
[71.88967896 -77.32813263]
[75.09867096 -62.67540359]
[78.30767059 -48.02268219]
[81.51666260 -33.36995697]
[84.72566223 -18.71723175]
[87.93465424 -4.06450653]
[92.51971436 1.89909089]
[91.00949860 11.08865070]
[93.76574707 25.83324814]
[96.52198792 40.57784271]
[99.27822876 55.32244110]
[102.03446960 70.06703949]
[104.79071808 84.81163025]
[112.60019684 72.00491333]
[127.53934479 73.35462952]
[132.92698669 87.35367584]
[122.74610138 98.37091064]
[137.68211365 96.98688507]
[152.61813354 95.60285950]
[167.55413818 94.21883392]
[182.49015808 92.83480835]
[197.42616272 91.45078278]
[208.74017334 80.07656860]
[224.67066956 81.97366333]
[232.99713135 95.68678284]
[227.33221436 110.69638824]
[212.02156067 115.48840332]
[198.81019592 106.38679504]
[183.87417603 107.77082062]
[168.93817139 109.15484619]
[154.00215149 110.53887177]
[139.06614685 111.92289734]
[124.13012695 113.30692291]
[137.90124512 119.25303650]
[148.37066650 129.99507141]
[153.32737732 144.15243530]
[151.84495544 159.07901001]
[144.20045471 171.98487854]
[131.82270813 180.45785522]
[117.02520752 182.91427612]
[102.57372284 178.89500427]
[91.16934967 169.15127563]
[84.94365692 155.50427246]
[85.06027222 140.50471497]
[91.49659729 126.95719147]
[95.94084167 112.63068390]
[85.17215729 123.07269287]
[74.40348053 133.51470947]
[63.63480377 143.95671082]
[52.86612320 154.39872742]
[42.09744263 164.84072876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 17]
[10 16]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
