%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCUCAUAGGGAAACUCCAACCCUAAGAUAAAUGCAAAGACUGCUUUAAUCAAGGAGAGUCUCUGGACACUAUAAUUCCUGUGAGAACACGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[103.46094513 313.32305908]
[102.75518036 298.18112183]
[107.27378845 283.71191406]
[116.47111511 271.66265869]
[129.23654175 263.48831177]
[125.93189240 248.85687256]
[122.62722778 234.22543335]
[119.32257080 219.59397888]
[116.01791382 204.96253967]
[112.71325684 190.33108521]
[109.40859985 175.69964600]
[106.10394287 161.06819153]
[102.79928589 146.43675232]
[99.49462128 131.80529785]
[90.48632050 130.85078430]
[81.98239899 127.35958099]
[74.69250488 121.54212189]
[69.24720764 113.80581665]
[66.14378357 104.72711182]
[65.70158386 95.00874329]
[68.03078461 85.42536163]
[73.01769257 76.76179504]
[80.32804108 69.74884033]
[89.42861176 65.00178528]
[81.31900024 52.38298035]
[73.20938873 39.76417923]
[60.68628311 36.20819473]
[54.21744919 25.37818718]
[56.85059357 13.45388412]
[49.14543152 0.58413321]
[41.44026947 -12.28561783]
[27.71295929 -20.15146065]
[27.81372261 -35.04572678]
[20.10856247 -47.91547775]
[6.38124990 -55.78131866]
[6.48201323 -70.67558289]
[-1.22314763 -83.54533386]
[-8.92830849 -96.41508484]
[-24.07594872 -101.69982910]
[-29.25239372 -116.88482666]
[-20.48671913 -130.32144165]
[-4.50319910 -131.70223999]
[6.43697691 -119.96801758]
[3.94144273 -104.12024689]
[11.64660358 -91.25049591]
[19.35176468 -78.38074493]
[32.52795029 -71.43543243]
[32.97831345 -55.62063599]
[40.68347549 -42.75088501]
[53.85966110 -35.80557251]
[54.31002045 -19.99077797]
[62.01518250 -7.12102747]
[69.72034454 5.74872351]
[85.45954895 13.32992268]
[85.82818604 31.65456581]
[93.93780518 44.27336884]
[102.04741669 56.89217377]
[116.67886353 60.19683075]
[129.42474365 52.28844833]
[137.07179260 38.43806458]
[151.96578979 38.30250549]
[164.71166992 30.39412308]
[177.45755005 22.48574066]
[184.72123718 7.78298807]
[201.10130310 6.99230480]
[209.74736023 20.92707825]
[201.76506042 35.25240707]
[185.36593628 35.23162079]
[172.62005615 43.14000320]
[159.87416077 51.04838562]
[153.13877869 64.33310699]
[137.33312988 65.03433228]
[124.58724213 72.94271088]
[132.15063477 84.69001770]
[134.60601807 98.07194519]
[131.85655212 111.02246094]
[124.58816528 121.64723969]
[114.12606812 128.50064087]
[117.43073273 143.13208008]
[120.73538971 157.76353455]
[124.04004669 172.39497375]
[127.34470367 187.02642822]
[130.64936829 201.65786743]
[133.95402527 216.28932190]
[137.25868225 230.92076111]
[140.56333923 245.55221558]
[143.86799622 260.18365479]
[158.90751648 262.07797241]
[172.39074707 269.00460815]
[182.68951416 280.12716675]
[188.56018066 294.10253906]
[189.29383850 309.24313354]
[184.80191040 323.72064209]
[175.62680054 335.78683472]
[162.87646484 343.98468018]
[148.09054565 347.32421875]
[133.05453491 345.40222168]
[119.58409882 338.45074463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[24 57]
[25 56]
[26 55]
[29 53]
[30 52]
[31 51]
[33 49]
[34 48]
[36 46]
[37 45]
[38 44]
[58 73]
[59 72]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
