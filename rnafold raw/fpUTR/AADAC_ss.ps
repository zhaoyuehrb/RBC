%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACACUGCUUAUUAAAGUACACUAUUCAGGCAUAUCAUGUAGGUUUACUUUCUGUGUUUCUAGAGACCAAGAAGCGGGACGUUCACC\
) } def
/len { sequence length } bind def

/coor [
[80.34851074 118.79106140]
[73.37766266 132.07290649]
[66.40681458 145.35473633]
[59.43596649 158.63658142]
[52.46511841 171.91842651]
[50.45807648 188.75314331]
[33.72565079 191.48486328]
[26.46870041 176.16255188]
[39.18328094 164.94757080]
[46.15412521 151.66572571]
[53.12497330 138.38389587]
[60.09582138 125.10205078]
[67.06667328 111.82021332]
[54.58152008 120.13411713]
[46.91063309 133.02432251]
[35.72875214 143.02259827]
[22.06413078 149.20953369]
[7.17332840 151.01618958]
[-7.57434034 148.27642822]
[-20.82272339 141.24220276]
[-31.35353470 130.56034851]
[-38.19839478 117.21315002]
[-40.72787094 102.42796326]
[-38.70935440 87.56439209]
[-32.32846832 73.98925781]
[-22.17197800 62.95088577]
[-9.17384434 55.46432877]
[5.47066212 52.21803284]
[20.41487503 53.51051712]
[34.28456497 59.22293091]
[45.80432129 68.82997131]
[53.91363144 81.44554901]
[66.67830658 89.32356262]
[59.25317383 76.29024506]
[51.82804108 63.25692368]
[44.40290833 50.22360611]
[31.30880737 39.45416260]
[38.03256607 23.89050674]
[54.84931183 26.04305077]
[57.43622971 42.79847336]
[64.86135864 55.83179092]
[72.28649139 68.86511230]
[79.71162415 81.89842987]
[103.42793274 76.66912842]
[118.09824371 91.55188751]
[133.07814026 90.77546692]
[148.05802917 89.99904633]
[158.61230469 78.54283142]
[173.81510925 77.96882629]
[184.67181396 88.10131836]
[199.65171814 87.32489777]
[213.03289795 78.88365936]
[226.14360046 85.95180511]
[241.12348938 85.17538452]
[256.10339355 84.39896393]
[271.08328247 83.62254333]
[286.06317139 82.84612274]
[301.04306030 82.06970215]
[307.09277344 78.62342834]
[313.04382324 78.88146973]
[317.07614136 81.79292297]
[332.07391357 82.05183411]
[347.07168579 82.31073761]
[362.06945801 82.56964874]
[371.29757690 70.09481812]
[386.10589600 65.45873260]
[400.80029297 70.44406891]
[409.73052979 83.13385773]
[409.46270752 98.64862061]
[400.09979248 111.02261353]
[385.24206543 115.49777985]
[370.60256958 110.35333252]
[361.81054688 97.56741333]
[346.81277466 97.30850220]
[331.81500244 97.04959869]
[316.81723022 96.79068756]
[301.81948853 97.04959869]
[286.83959961 97.82601929]
[271.85968018 98.60243988]
[256.87979126 99.37885284]
[241.89990234 100.15527344]
[226.92001343 100.93169403]
[214.61030579 109.31740570]
[200.42813110 102.30479431]
[185.44824219 103.08121490]
[175.69725037 114.28182220]
[160.51657104 115.28262329]
[148.83444214 104.97893524]
[133.85455322 105.75535583]
[118.87466431 106.53177643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[33 43]
[34 42]
[35 41]
[36 40]
[45 90]
[46 89]
[47 88]
[50 85]
[51 84]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
