%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGCUCCUUCCUCAGCGGCGGGAAGCUGGCGGCAGCGGCGGUGGCGGUGGCUGAGCAGAGGACCCGGCGGGCGGCCUCGCGGGUCAGGACACA\
) } def
/len { sequence length } bind def

/coor [
[268.43569946 269.73715210]
[256.92770386 260.11602783]
[245.41972351 250.49490356]
[233.91172791 240.87377930]
[230.20297241 240.90701294]
[226.31039429 239.01918030]
[223.19853210 235.15411377]
[221.81352234 229.71752930]
[211.29313660 219.02539062]
[200.77276611 208.33325195]
[190.25239563 197.64112854]
[179.73202515 186.94898987]
[162.65206909 183.29328918]
[157.96873474 165.57687378]
[147.10765076 155.23101807]
[136.24655151 144.88516235]
[125.38546753 134.53930664]
[114.52438354 124.19344330]
[103.66329193 113.84758759]
[90.12043762 110.37157440]
[85.99085236 97.01350403]
[75.12976074 86.66764069]
[59.80083847 82.75170135]
[55.92196655 68.37103271]
[42.46799469 70.23973846]
[30.59586525 64.05313110]
[24.59807396 52.30387878]
[26.49415398 39.44709778]
[15.97378063 28.75496674]
[5.45340586 18.06283188]
[-5.06696892 7.37069893]
[-20.26105118 2.96043301]
[-23.67221260 -11.53829956]
[-34.19258499 -22.23043251]
[-50.13372421 -26.07908440]
[-54.51110077 -41.88321686]
[-42.82164001 -53.38489532]
[-27.09046364 -48.75217819]
[-23.50045204 -32.75080872]
[-12.98007870 -22.05867386]
[1.46151590 -18.41318130]
[5.62516451 -3.14967561]
[16.14553833 7.54245806]
[26.66591454 18.23459053]
[37.18628693 28.92672539]
[53.90513229 28.29057503]
[66.21711731 40.10869217]
[66.26782227 57.50994492]
[80.81989288 60.68588257]
[85.47561646 75.80655670]
[96.33670807 86.15241241]
[109.87956238 89.62842560]
[114.00914764 102.98649597]
[124.87023926 113.33235931]
[135.73132324 123.67821503]
[146.59240723 134.02406311]
[157.45350647 144.36991882]
[168.31459045 154.71578979]
[181.32789612 155.21386719]
[190.17243958 164.21517944]
[190.42414856 176.42861938]
[200.94453430 187.12075806]
[211.46490479 197.81288147]
[221.98527527 208.50502014]
[232.50564575 219.19715881]
[243.53285217 229.36578369]
[255.04084778 238.98690796]
[266.54882812 248.60801697]
[278.05682373 258.22915649]
[291.43295288 265.01736450]
[305.99258423 268.62521362]
[320.55224609 272.23309326]
[335.11187744 275.84097290]
[349.67150879 279.44885254]
[365.27038574 274.38851929]
[377.26940918 285.56686401]
[373.32501221 301.48458862]
[357.49484253 305.76687622]
[346.06365967 294.00848389]
[331.50399780 290.40063477]
[316.94436646 286.79275513]
[302.38470459 283.18487549]
[287.82507324 279.57699585]
[296.68316650 291.68212891]
[300.39419556 306.21582031]
[298.42388916 321.08584595]
[291.05590820 334.15155029]
[279.35092163 343.53204346]
[264.99398804 347.87689209]
[250.05183411 346.56060791]
[236.67556763 339.77273560]
[226.79077148 328.49041748]
[221.82046509 314.33782959]
[222.48013306 299.35232544]
[228.67485046 285.69125366]
[239.51280212 275.32116699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[21 51]
[22 50]
[24 48]
[28 45]
[29 44]
[30 43]
[31 42]
[33 40]
[34 39]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
