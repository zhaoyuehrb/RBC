%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAGGCCGCGAGGGAGGGAGCACGAGCGAGGAGGCACGCGCCCGCCGGUCCGCACCCGGCCCGCCGCAGCCGCCGCCGCCGUCGCCGUCGCCGCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[217.72227478 246.14323425]
[207.85319519 234.84715271]
[197.98411560 223.55108643]
[188.11503601 212.25500488]
[178.24595642 200.95893860]
[164.04545593 196.46505737]
[160.79252625 180.98187256]
[150.92344666 169.68580627]
[141.05436707 158.38973999]
[126.85385132 153.89585876]
[123.60092926 138.41267395]
[113.73184967 127.11660004]
[103.86276245 115.82052612]
[87.89768219 110.89697266]
[84.66990662 94.50469971]
[74.46731567 83.50891876]
[64.26472473 72.51314545]
[46.60207748 67.58351135]
[43.19818878 50.43966675]
[32.67122269 39.75402451]
[22.14425278 29.06838226]
[6.94745302 24.66749191]
[3.52734828 10.17086601]
[-6.99962044 -0.51477593]
[-19.97329903 -1.42107201]
[-28.52674294 -10.67608261]
[-28.41586113 -22.87479782]
[-38.61845398 -33.87057495]
[-53.67679596 -38.72411728]
[-56.66169739 -53.31657028]
[-66.86428833 -64.31234741]
[-82.42301178 -65.06332397]
[-92.61325073 -76.35994720]
[-91.80142212 -91.18818665]
[-100.07443237 -95.44281006]
[-102.13867188 -102.66886902]
[-112.00775146 -113.96493530]
[-121.87683868 -125.26100922]
[-137.56222534 -130.04644775]
[-140.99650574 -146.08195496]
[-128.64677429 -156.87159729]
[-113.21738434 -151.31590271]
[-110.58076477 -135.13009644]
[-100.71168518 -123.83402252]
[-90.84259796 -112.53794861]
[-80.80564117 -101.39077759]
[-65.95820618 -101.09221649]
[-55.45468521 -90.08627319]
[-55.86851120 -74.51493835]
[-45.66592026 -63.51916122]
[-31.33733368 -59.45211029]
[-27.62267494 -44.07316589]
[-17.42008400 -33.07738876]
[-0.44621763 -28.90777206]
[3.68602109 -11.04174423]
[14.21298981 -0.35610300]
[28.65682983 3.28048015]
[32.82989502 18.54141426]
[43.35686111 29.22705650]
[53.88383102 39.91269684]
[66.07524109 40.34922028]
[74.93717957 49.30927658]
[75.26050568 62.31055450]
[85.46309662 73.30632782]
[95.66568756 84.30210876]
[107.35659027 85.47103882]
[115.21833801 94.20240021]
[115.15883636 105.95144653]
[125.02791595 117.24752045]
[134.89700317 128.54359436]
[149.80340576 133.84544373]
[152.35043335 148.52064514]
[162.21951294 159.81672668]
[172.08859253 171.11279297]
[186.99499512 176.41464233]
[189.54202271 191.08985901]
[199.41110229 202.38592529]
[209.28018188 213.68200684]
[219.14927673 224.97807312]
[229.01835632 236.27413940]
[239.70399475 246.80111694]
[251.14643860 256.50012207]
[266.67654419 259.52105713]
[271.38235474 273.65274048]
[282.82479858 283.35174561]
[298.35491943 286.37268066]
[303.06072998 300.50436401]
[314.50317383 310.20336914]
[330.72659302 312.59756470]
[336.51248169 327.94210815]
[325.90881348 340.45187378]
[309.82369995 337.25787354]
[304.80416870 321.64581299]
[293.36172485 311.94680786]
[278.65005493 309.61959839]
[273.12579346 294.79418945]
[261.68334961 285.09518433]
[246.97167969 282.76797485]
[241.44743347 267.94256592]
[230.00500488 258.24356079]
[227.53213501 258.55599976]
[224.78749084 257.96325684]
[222.09107971 256.36248779]
[219.79257202 253.75952148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[7 74]
[8 73]
[9 72]
[11 70]
[12 69]
[13 68]
[15 65]
[16 64]
[17 63]
[19 60]
[20 59]
[21 58]
[23 56]
[24 55]
[27 53]
[28 52]
[30 50]
[31 49]
[34 46]
[36 45]
[37 44]
[38 43]
[81 100]
[82 99]
[84 97]
[85 96]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
