%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGCGGGAGCGGCUGCCGCCGCGCGGCCAGGACUGUCUGAGGGGAAGUUCGCGAGCGCUGGCU\
) } def
/len { sequence length } bind def

/coor [
[21.26712799 187.24525452]
[17.97190475 188.32191467]
[14.90558815 188.19250488]
[12.45007706 187.09951782]
[-0.88245487 193.97291565]
[-14.21498680 200.84631348]
[-27.54751778 207.71971130]
[-40.88005066 214.59310913]
[-45.45290375 229.72137451]
[-59.42296600 237.11143494]
[-74.50204468 232.37889099]
[-81.74398804 218.33148193]
[-76.85227966 203.30328369]
[-62.72908783 196.21025085]
[-47.75344849 201.26057434]
[-34.42091751 194.38717651]
[-21.08838463 187.51377869]
[-7.75585270 180.64038086]
[5.57667923 173.76698303]
[17.99891853 165.35937500]
[29.33516121 155.53646851]
[40.67140579 145.71354675]
[51.77067566 135.62364197]
[62.62668610 125.27246094]
[73.48269653 114.92127228]
[84.33870697 104.57009125]
[88.46392822 88.46392822]
[104.57009125 84.33870697]
[114.92127228 73.48269653]
[117.01760864 66.59304810]
[121.72625732 62.64722061]
[126.81038666 62.14645386]
[138.14662170 52.32354355]
[149.48286438 42.50063324]
[160.81912231 32.67771912]
[172.15536499 22.85480881]
[176.80413818 14.56734276]
[184.27267456 12.84990406]
[196.06347656 3.57751918]
[207.85427856 -5.69486570]
[213.44357300 -21.11211967]
[229.63508606 -23.71346855]
[239.77236938 -10.82286930]
[233.42704773 4.29893684]
[217.12666321 6.09593058]
[205.33586121 15.36831570]
[193.54505920 24.64070129]
[181.97827148 34.19105148]
[170.64202881 44.01396561]
[159.30578613 53.83687592]
[147.96954346 63.65978622]
[136.63330078 73.48269653]
[125.77728271 83.83388519]
[115.42610168 94.68989563]
[114.94216919 106.54930878]
[106.54930878 114.94216919]
[94.68989563 115.42610168]
[83.83388519 125.77728271]
[72.97787476 136.12846375]
[62.12186050 146.47966003]
[57.87268448 154.97892761]
[50.49431610 157.04978943]
[39.15807343 166.87271118]
[27.82182884 176.69561768]
[26.66424179 181.26681519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[20 64]
[21 63]
[22 62]
[23 60]
[24 59]
[25 58]
[26 57]
[28 54]
[29 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
