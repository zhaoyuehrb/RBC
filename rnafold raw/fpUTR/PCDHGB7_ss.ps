%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCCACACAGAGGCUCCCGGCUGCGCAGACCUUGCCCAGCACACCAGAUUGCCAGCUCCGAGACCCGGGACUCCUCCUGUCCUGGGCCGAAUGCUCUUUUAGCGCGGUAGAGUGCACUUUCUCCAACUGGAAAAGCGGGGACCCAGCGAGAACCCGAGCGAACG\
) } def
/len { sequence length } bind def

/coor [
[114.61569214 401.65072632]
[125.93570709 390.86224365]
[124.81475830 375.90417480]
[123.69380188 360.94610596]
[122.57285309 345.98806763]
[107.38165283 341.92410278]
[94.47418976 332.89477539]
[85.41740417 319.97381592]
[81.31840515 304.70877075]
[82.68917847 288.93563843]
[89.38267517 274.55798340]
[100.60839844 263.31726074]
[115.02565765 256.58184814]
[102.69404602 241.71971130]
[111.26731110 223.50538635]
[109.30941772 208.63371277]
[99.97706604 197.02525330]
[105.84688568 182.33322144]
[103.88899231 167.46154785]
[101.93110657 152.58987427]
[99.97321320 137.71820068]
[98.01531982 122.84652710]
[85.24039459 114.98514557]
[71.08214569 119.93933105]
[56.92389297 124.89351654]
[42.76564407 129.84770203]
[32.29536057 141.70870972]
[17.72683144 138.60916138]
[3.56858087 143.56333923]
[-10.58966923 148.51753235]
[-18.81795120 162.28977966]
[-34.73448563 164.30064392]
[-46.12946320 153.00755310]
[-44.26163864 137.07359314]
[-30.56384468 128.72195435]
[-15.54385471 134.35928345]
[-1.38560498 129.40509033]
[12.77264500 124.45091248]
[22.23023605 112.94425201]
[37.81145859 115.68945312]
[51.96970749 110.73526764]
[66.12796021 105.78108215]
[80.28620911 100.82688904]
[65.48600769 98.38677216]
[50.68581390 95.94665527]
[35.99554062 98.97912598]
[21.24773598 96.24009705]
[8.62595844 88.13511658]
[-0.00101402 75.86420441]
[-3.35587215 61.24418640]
[-0.94189590 46.43970490]
[6.88350153 33.64270782]
[18.96169281 24.74791527]
[33.50438309 21.07229424]
[48.35741806 23.15972137]
[58.50601959 34.20534897]
[68.65462494 45.25097275]
[65.04394531 30.69202614]
[61.43326187 16.13307762]
[46.29831314 7.40059280]
[42.22150040 -9.24365616]
[51.24544907 -23.41319656]
[47.36316299 -37.90208435]
[42.09841537 -45.41879654]
[43.54645538 -52.69824219]
[38.42318344 -60.31208420]
[40.00708389 -67.56317902]
[36.66926956 -82.18709564]
[33.33145523 -96.81101990]
[29.99364281 -111.43493652]
[26.65582848 -126.05885315]
[23.31801414 -140.68276978]
[19.98019981 -155.30668640]
[16.64238548 -169.93061829]
[2.64533043 -176.90315247]
[-3.54773355 -191.26213074]
[0.98737013 -206.22764587]
[14.10930347 -214.73345947]
[29.62229156 -212.76338196]
[40.20157623 -201.24761963]
[40.85194016 -185.62356567]
[31.26630592 -173.26841736]
[34.60411835 -158.64450073]
[37.94193268 -144.02058411]
[41.27974701 -129.39666748]
[44.61756134 -114.77275085]
[47.95537567 -100.14883423]
[51.29319000 -85.52490997]
[54.63100433 -70.90099335]
[58.10540390 -56.30892181]
[61.85205078 -41.78437042]
[65.73433685 -27.29548264]
[77.70517731 -22.46315193]
[84.80204010 -11.44699383]
[84.23687744 1.84008276]
[75.99221039 12.52239609]
[79.60289001 27.08134460]
[83.21356964 41.64029312]
[90.14266968 44.51041794]
[88.18468475 29.63875771]
[100.08486938 20.50719070]
[113.94316864 26.24718666]
[115.90142822 41.11881256]
[104.00086212 50.25067139]
[110.92995453 53.12079620]
[123.77782440 45.37920380]
[136.62570190 37.63760757]
[149.47355652 29.89601326]
[153.03410339 14.49802399]
[166.48387146 6.19866848]
[181.84335327 9.92180824]
[190.00004578 23.45856857]
[186.11473083 38.77783203]
[172.49249268 46.79095078]
[157.21516418 42.74388123]
[144.36729431 50.48547745]
[131.51942444 58.22706985]
[118.67155457 65.96866608]
[120.27201843 73.29590607]
[125.07342529 95.27764130]
[139.97911072 96.95710754]
[154.88479614 98.63657379]
[169.79048157 100.31604004]
[178.71101379 98.16139221]
[184.95823669 102.16880798]
[199.82989502 104.12670135]
[214.70156860 106.08459473]
[229.63710022 99.31243134]
[242.81036377 109.07958221]
[240.66984558 125.33843231]
[225.41752625 131.36328125]
[212.74368286 120.95626831]
[197.87200928 118.99837494]
[183.00033569 117.04048157]
[168.11100769 115.22172546]
[153.20532227 113.54225922]
[138.29963684 111.86279297]
[123.39395905 110.18331909]
[112.88699341 120.88863373]
[114.84488678 135.76029968]
[116.80277252 150.63197327]
[118.76066589 165.50364685]
[120.71855927 180.37532043]
[130.19094849 193.04751587]
[124.18109131 206.67582703]
[126.13898468 221.54750061]
[135.17750549 227.69216919]
[139.23677063 237.60232544]
[137.19151306 247.89019775]
[129.96014404 255.18139648]
[143.92288208 258.49017334]
[156.15965271 265.94345093]
[165.47776794 276.79925537]
[170.97378540 289.98464966]
[172.12120056 304.20193481]
[168.82075500 318.05627441]
[161.40892029 330.19256592]
[150.62365723 339.42791748]
[137.53091431 344.86709595]
[138.65185547 359.82516479]
[139.77281189 374.78323364]
[140.89376831 389.74127197]
[153.69528198 398.72210693]
[157.67907715 413.84371948]
[150.96412659 427.96615601]
[136.72103882 434.42126465]
[121.67494202 430.16110229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 162]
[3 161]
[4 160]
[5 159]
[13 150]
[15 146]
[16 145]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 43]
[24 42]
[25 41]
[26 40]
[28 38]
[29 37]
[30 36]
[57 98]
[58 97]
[59 96]
[62 92]
[63 91]
[65 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[105 118]
[106 117]
[107 116]
[108 115]
[120 138]
[121 137]
[122 136]
[123 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
