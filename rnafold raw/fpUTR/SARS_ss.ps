%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGGGCGGGUCAGCGCGCCGGCGCAGUGCGGCGGUCACAGGCUGAGUGCUGCGGCGCGAUCCUUGCUUCCCUGAGCGUUGGCCCGGGAGGAAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[151.28001404 172.56701660]
[166.24467468 173.59138489]
[155.39353943 163.23509216]
[144.54241943 152.87878418]
[133.69128418 142.52249146]
[122.84014893 132.16618347]
[108.29114532 128.97625732]
[103.64997101 113.85110474]
[90.11045837 110.36206818]
[85.99372864 97.00002289]
[75.14260101 86.64372253]
[64.29147339 76.28742218]
[53.44033813 65.93112183]
[42.58920670 55.57482529]
[37.16099930 54.27795029]
[33.26301575 51.24625778]
[31.31085777 47.40650177]
[31.26686287 43.71149063]
[21.42793465 32.38914871]
[11.58900547 21.06680298]
[1.75007665 9.74445915]
[-8.08885193 -1.57788539]
[-17.92778206 -12.90022945]
[-33.45377350 -14.15771866]
[-43.27055740 -25.78034401]
[-41.97605133 -40.57425690]
[-51.81497955 -51.89660263]
[-61.65391159 -63.21894455]
[-76.54612732 -68.56051636]
[-79.05401611 -83.24246979]
[-87.19499207 -87.77205658]
[-89.01618958 -95.07334137]
[-98.49823761 -106.69619751]
[-107.98027802 -118.31905365]
[-117.46232605 -129.94190979]
[-132.94697571 -128.93916321]
[-146.04568481 -137.25799561]
[-151.72177124 -151.69967651]
[-147.79263306 -166.71104431]
[-135.76911926 -176.51995850]
[-120.27450562 -177.35467529]
[-107.26679993 -168.89422607]
[-101.74771881 -154.39183044]
[-105.83946991 -139.42395020]
[-96.35742188 -127.80110168]
[-86.87538147 -116.17824554]
[-77.39333344 -104.55538940]
[-67.73167419 -93.08139801]
[-53.54320145 -88.54967499]
[-50.33156586 -73.05787659]
[-40.49263763 -61.73553085]
[-30.65370750 -50.41318512]
[-15.82387829 -49.63105392]
[-5.68451357 -38.28874588]
[-6.60543728 -22.73915863]
[3.23349166 -11.41681480]
[13.07242107 -0.09447028]
[22.91135025 11.22787380]
[32.75027847 22.55021858]
[42.58920670 33.87256241]
[52.94550705 44.72369385]
[63.79663849 55.07999420]
[74.64777374 65.43629456]
[85.49890137 75.79259491]
[96.35002899 86.14889526]
[109.88954163 89.63793182]
[114.00627136 102.99997711]
[129.33142090 106.93065643]
[133.19645691 121.31505585]
[144.04757690 131.67135620]
[154.89871216 142.02764893]
[165.74984741 152.38395691]
[176.60098267 162.74024963]
[189.31069946 170.70661926]
[203.36123657 175.95851135]
[217.41177368 181.21041870]
[233.04745483 178.79467773]
[242.26008606 190.49838257]
[256.31063843 195.75027466]
[272.38647461 192.51005554]
[283.02606201 204.98928833]
[277.28430176 220.35040283]
[261.06781006 222.79121399]
[251.05873108 209.80081177]
[237.00819397 204.54890442]
[222.37750244 207.34030151]
[212.15988159 195.26095581]
[198.10934448 190.00904846]
[184.05880737 184.75715637]
[191.50369263 197.77920532]
[193.17514038 212.68579102]
[188.79914856 227.03327942]
[179.09306335 238.46971130]
[165.64799500 245.12030029]
[150.66801453 245.89482117]
[136.60874939 240.66632080]
[125.77495575 230.29188538]
[119.94261169 216.47219849]
[120.06779480 201.47271729]
[126.12999725 187.75230408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 69]
[8 67]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[26 52]
[27 51]
[28 50]
[30 48]
[32 47]
[33 46]
[34 45]
[35 44]
[74 89]
[75 88]
[76 87]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
