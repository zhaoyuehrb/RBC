%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUGAGCAGCCAACCGCAGCCUCUGGCCACAAGGAGAGCGGAGCACAGGAGCAGGAAGCCGCCUACCACC\
) } def
/len { sequence length } bind def

/coor [
[72.01831055 117.26719666]
[57.79288483 122.02507019]
[43.56746292 126.78293610]
[36.46488953 140.64624023]
[21.97051048 145.26875305]
[8.79773808 138.41210938]
[1.38378131 144.27290344]
[-6.14317799 143.05432129]
[-20.56012535 147.19577026]
[-31.68763542 158.44250488]
[-46.05644226 154.51991272]
[-60.47338867 158.66137695]
[-69.47115326 171.94367981]
[-85.47624969 173.04663086]
[-96.21092987 161.12413025]
[-93.44047546 145.32209778]
[-79.29013824 137.76251221]
[-64.61484528 144.24443054]
[-50.19789505 140.10296631]
[-40.10158157 129.15246582]
[-24.70158005 132.77882385]
[-10.28463268 128.63737488]
[4.03986883 124.18667603]
[10.43688202 110.78466797]
[24.79570770 105.75686646]
[38.80959320 112.55751801]
[53.03501511 107.79964447]
[67.26043701 103.04177856]
[68.61437988 90.19826508]
[74.81025696 78.86689758]
[84.89221954 70.79578400]
[97.30490112 67.23007965]
[110.13336182 68.71987915]
[121.39852142 75.03533936]
[129.36247253 85.20216370]
[143.94425964 81.68479156]
[158.44697571 77.85449219]
[172.86392212 73.71303558]
[180.52314758 68.17663574]
[187.99072266 69.71791077]
[202.57249451 66.20053864]
[217.15426636 62.68317032]
[231.73603821 59.16579819]
[236.16275024 44.52505112]
[247.25016785 34.13439178]
[261.95217896 30.71129227]
[276.29760742 35.07754517]
[286.46298218 45.96472931]
[293.26290894 31.88299942]
[307.54464722 25.51385117]
[322.56478882 29.86460304]
[331.23132324 42.88096237]
[329.45211792 58.41699982]
[318.06732178 69.13707733]
[302.45242310 69.97949982]
[289.98037720 60.54650116]
[285.89645386 74.87085724]
[275.11920166 85.29712677]
[260.47338867 88.95321655]
[245.86811829 84.76007080]
[235.25340271 73.74757385]
[220.67163086 77.26493835]
[206.08985901 80.78231049]
[191.50808716 84.29968262]
[177.00537109 88.12998199]
[162.58842468 92.27143860]
[156.85575867 97.29901886]
[147.46162415 96.26656342]
[132.87985229 99.78393555]
[128.65637207 116.12275696]
[116.88415527 128.21447754]
[100.66426086 132.87385559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[6 23]
[8 22]
[9 21]
[11 19]
[12 18]
[35 69]
[36 68]
[37 66]
[38 65]
[40 64]
[41 63]
[42 62]
[43 61]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
