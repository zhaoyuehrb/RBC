%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACACUGUCCUUUGGCCUGGAUGACCUCAUAUAAAUCCCCUCCUGUUCUAAUUCACUGCCCACAGCCCUGCUGAUAAAAGCAAAGCUCAUCUCUGCCGUGCUGCAGGGAACCCUAUUUCCUUCCCCUGCAGCUCAGCCACCUCCUCCUCUCAGGUCUGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[39.67430115 410.23089600]
[43.31646729 424.94519043]
[41.70330811 440.01745605]
[35.02962494 453.62768555]
[24.10130119 464.13232422]
[10.23797894 470.26290894]
[-4.88627577 471.27914429]
[-19.44513512 467.05831909]
[-31.68054581 458.11010742]
[-40.11502457 445.51504517]
[-43.73006439 430.79406738]
[-42.08913422 415.72479248]
[-35.39038086 402.12689209]
[-24.44271660 391.64242554]
[-10.56812000 385.53738403]
[4.55798197 384.54901123]
[8.73471832 370.14227295]
[12.91145515 355.73550415]
[11.74875546 348.40411377]
[17.30463219 341.09838867]
[21.75163269 326.77273560]
[26.19863319 312.44708252]
[19.05678749 299.42672729]
[23.36260414 284.83514404]
[37.06797409 277.43240356]
[41.51497650 263.10675049]
[45.96197510 248.78111267]
[50.40897751 234.45545959]
[54.85597610 220.12980652]
[46.85488892 216.81074524]
[39.09592819 212.95950317]
[31.61444855 208.59361267]
[24.44453430 203.73295593]
[17.61885071 198.39970398]
[11.16849613 192.61813354]
[5.12285852 186.41459656]
[-0.49051809 179.81735229]
[-5.64605904 172.85646057]
[-10.32027626 165.56364441]
[-14.49187279 157.97210693]
[-18.14184380 150.11645508]
[-21.25356102 142.03247070]
[-23.81284523 133.75698853]
[-25.80803680 125.32770538]
[-27.23004532 116.78302765]
[-28.07239342 108.16188812]
[-28.33124352 99.50357056]
[-28.00541496 90.84750366]
[-27.09639359 82.23313904]
[-25.60832024 73.69972229]
[-23.54797363 65.28612518]
[-20.92474174 57.03069305]
[-17.75057602 48.97102356]
[-14.03993797 41.14384460]
[-9.80973244 33.58481216]
[-5.07923412 26.32836914]
[0.13000676 19.40757370]
[5.79425573 12.85395908]
[11.88770676 6.69738245]
[18.38259888 0.96589267]
[25.24934006 -4.31439686]
[32.45664597 -9.11942863]
[39.97167969 -13.42731285]
[47.76020050 -17.21842003]
[55.78672791 -20.47547913]
[64.01469421 -23.18365288]
[60.65723038 -37.80307388]
[57.29977036 -52.42249298]
[44.18969727 -60.83461380]
[40.99301147 -75.70861053]
[49.09347534 -88.15522003]
[45.73601532 -102.77464294]
[42.37855530 -117.39406586]
[39.02109146 -132.01348877]
[25.49655724 -140.19042969]
[21.79641533 -155.55548096]
[30.11589622 -168.99279785]
[45.51919937 -172.53028870]
[58.86781693 -164.06919861]
[62.24225235 -148.62936401]
[53.64051437 -135.37094116]
[56.99797440 -120.75152588]
[60.35543442 -106.13210297]
[63.71289825 -91.51268005]
[76.43218994 -83.84748840]
[80.04539490 -69.06914520]
[71.91918945 -55.77995300]
[75.27664948 -41.16053391]
[78.63410950 -26.54111481]
[101.10160828 -28.32747650]
[123.53513336 -26.15566635]
[145.24273682 -20.09267235]
[165.55484009 -10.32550430]
[183.84497070 2.84457731]
[199.54895020 19.01135063]
[212.18241882 37.67616272]
[221.35568237 58.26330948]
[235.80110168 54.22226715]
[247.00659180 43.05322647]
[261.34774780 47.07569504]
[272.55325317 35.90665436]
[286.89440918 39.92912292]
[301.33984375 35.88807678]
[315.78524780 31.84703255]
[330.23065186 27.80598831]
[344.67608643 23.76494408]
[359.12149048 19.72389984]
[373.56689453 15.68285561]
[388.01229858 11.64181137]
[402.45773315 7.60076666]
[403.89584351 -7.50870991]
[410.69848633 -21.07662010]
[421.94570923 -31.26801491]
[436.11639404 -36.70459366]
[451.29406738 -36.65110016]
[465.42605591 -31.11477280]
[476.60116577 -20.84435272]
[483.30801392 -7.22882938]
[484.63958740 7.89040852]
[480.41580200 22.46860886]
[471.20785522 34.53418732]
[458.26107788 42.45537949]
[443.32638550 45.16090393]
[428.42361450 42.28486252]
[415.56820679 34.21621323]
[406.49877930 22.04618073]
[392.05334473 26.08722496]
[377.60794067 30.12826920]
[363.16253662 34.16931152]
[348.71713257 38.21035767]
[334.27169800 42.25139999]
[319.82629395 46.29244614]
[305.38088989 50.33349228]
[290.93545532 54.37453461]
[280.76321411 65.25453186]
[265.38879395 61.52110672]
[255.21653748 72.40110779]
[239.84214783 68.66767883]
[225.39672852 72.70872498]
[227.93069458 89.85647583]
[228.13067627 107.18929291]
[225.99299622 124.39094543]
[221.55668640 141.14759827]
[214.90267944 157.15356445]
[206.15235901 172.11679077]
[195.46537781 185.76431274]
[183.03669739 197.84713745]
[169.09307861 208.14480591]
[153.88893127 216.46946716]
[137.70159912 222.66925049]
[120.82644653 226.63101196]
[103.57133484 228.28250122]
[86.25106049 227.59358215]
[69.18162537 224.57681274]
[64.73462677 238.90246582]
[60.28762436 253.22810364]
[55.84062195 267.55377197]
[51.39362335 281.87939453]
[58.49779129 295.74188232]
[53.78382492 310.20678711]
[40.52428055 316.89410400]
[36.07728195 331.21975708]
[31.63027954 345.54537964]
[27.31822014 359.91223145]
[23.14148331 374.31900024]
[18.96474648 388.72576904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 166]
[17 165]
[18 164]
[20 163]
[21 162]
[22 161]
[25 158]
[26 157]
[27 156]
[28 155]
[29 154]
[66 89]
[67 88]
[68 87]
[71 84]
[72 83]
[73 82]
[74 81]
[97 139]
[98 138]
[100 136]
[102 134]
[103 133]
[104 132]
[105 131]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
