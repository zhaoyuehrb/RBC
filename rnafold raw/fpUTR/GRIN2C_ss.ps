%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGCGAGUGUCCUUGAGCCGCGGGUGACGGUGGCUCUCGCUGCUCGCGCCCCCUCCUCCCGCGGGGGGAGCCUGAUGCCACGUUCCCUAUGAAUUAUUUAUCGCCGGCCUAAAAAUACCCCGAACUUCACAGCCCGAGUGACCCUCCGGUGGAC\
) } def
/len { sequence length } bind def

/coor [
[112.62641907 350.00366211]
[111.72650909 335.03067017]
[110.82659149 320.05767822]
[109.92667389 305.08471680]
[109.02675629 290.11172485]
[105.46629333 283.58709717]
[108.26168060 274.83071899]
[107.66153717 259.84274292]
[107.06139374 244.85475159]
[98.82107544 232.44723511]
[106.00003815 218.34854126]
[105.39989471 203.36054993]
[104.79975128 188.37255859]
[104.04968262 173.39132690]
[103.14977264 158.41835022]
[102.24985504 143.44535828]
[101.34993744 128.47238159]
[87.68051147 122.94277191]
[79.75110626 112.07888794]
[78.88539124 99.95142365]
[64.05400085 97.70872498]
[49.22260284 95.46602631]
[34.39120483 93.22332764]
[19.55981064 90.98062897]
[4.72841549 88.73792267]
[-10.10298061 86.49522400]
[-27.05374336 93.62263489]
[-40.35464859 82.21140289]
[-55.22794724 80.26590729]
[-69.91507721 86.14797974]
[-81.53132629 76.82530975]
[-96.40462494 74.87982178]
[-105.37688446 76.87647247]
[-111.55492401 72.74371338]
[-126.38632202 70.50101471]
[-141.21771240 68.25830841]
[-145.31463623 70.04618073]
[-149.35546875 70.36888885]
[-152.87667847 69.43056488]
[-155.53204346 67.56754303]
[-157.12617493 65.19721222]
[-171.73077393 61.77584457]
[-186.06654358 68.97759247]
[-200.57438660 62.12907028]
[-204.12510681 46.48388290]
[-193.99491882 34.04367828]
[-177.95481873 34.35151291]
[-168.30940247 47.17124557]
[-153.70480347 50.59261322]
[-138.97502136 53.42691803]
[-124.14361572 55.66961670]
[-109.31222534 57.91231918]
[-94.45912933 60.00651932]
[-79.58583069 61.95201111]
[-65.96253967 55.93078613]
[-53.28245544 65.39260864]
[-38.40915680 67.33810425]
[-28.59646988 60.20461655]
[-16.15788269 61.74128342]
[-7.86028004 71.66382599]
[6.97111559 73.90653229]
[21.80251122 76.14923096]
[36.63390732 78.39192963]
[51.46530151 80.63462830]
[66.29669952 82.87733459]
[81.12808990 85.12003326]
[92.50000000 75.33843231]
[92.50000000 60.33842850]
[92.50000000 45.33842850]
[92.50000000 30.33842850]
[92.50000000 15.33842945]
[92.50000000 0.33842897]
[92.50000000 -14.66157055]
[84.76270294 -28.46174240]
[92.50000000 -41.18901443]
[92.50000000 -56.18901443]
[83.83629608 -70.11281586]
[91.80042267 -84.44824982]
[108.19957733 -84.44824982]
[116.16370392 -70.11281586]
[107.50000000 -56.18901443]
[107.50000000 -41.18901443]
[115.23729706 -28.46174240]
[107.50000000 -14.66157055]
[107.50000000 0.33842897]
[107.50000000 15.33842945]
[107.50000000 30.33842850]
[107.50000000 45.33842850]
[107.50000000 60.33842850]
[107.50000000 75.33843231]
[113.03661346 80.39766693]
[120.22799683 67.23392487]
[127.41938019 54.07019043]
[134.61076355 40.90645218]
[136.80096436 26.06721115]
[146.32229614 14.47652054]
[160.45384216 9.44668007]
[175.15719604 12.41507912]
[186.23054504 22.53343010]
[190.50942993 36.91019058]
[186.77105713 51.43687439]
[176.08375549 61.96215820]
[161.50103760 65.47818756]
[149.03730774 73.82417297]
[136.57357788 82.17015839]
[124.10984802 90.51614380]
[129.64646912 95.57537842]
[144.58569336 94.22651672]
[159.52491760 92.87766266]
[169.63325500 81.02610779]
[184.80297852 79.87098694]
[196.03932190 89.58078003]
[210.97856140 88.23191833]
[224.06687927 78.35123444]
[239.06039429 84.99399567]
[240.53507996 101.32670593]
[226.97387695 110.54766846]
[212.32740784 103.17115021]
[197.38818359 104.52001190]
[188.07276917 116.08541870]
[172.94148254 117.66616821]
[160.87377930 107.81688690]
[145.93455505 109.16574860]
[130.99531555 110.51461029]
[144.75241089 116.49311829]
[158.50949097 122.47163391]
[173.27873230 125.09261322]
[184.73176575 134.77911377]
[189.76766968 148.90849304]
[187.02299500 163.65524292]
[177.24085999 175.02668762]
[163.06974792 179.94400024]
[148.34652710 177.07582092]
[137.05746460 167.19871521]
[132.25927734 152.98963928]
[124.29109955 140.28105164]
[116.32292175 127.57247162]
[117.22283173 142.54545593]
[118.12274933 157.51843262]
[119.02266693 172.49140930]
[122.67868805 180.92477417]
[119.78774261 187.77241516]
[120.38788605 202.76040649]
[120.98802948 217.74839783]
[129.27127075 231.22795105]
[122.04938507 244.25459290]
[122.64952850 259.24258423]
[123.24967194 274.23059082]
[123.99974060 289.21182251]
[124.89965820 304.18478394]
[125.79956818 319.15777588]
[126.69948578 334.13076782]
[127.59940338 349.10372925]
[137.08285522 362.48269653]
[129.99311829 377.27011108]
[113.62350464 378.25396729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[7 148]
[8 147]
[9 146]
[11 144]
[12 143]
[13 142]
[14 140]
[15 139]
[16 138]
[17 137]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[28 57]
[29 56]
[31 54]
[32 53]
[34 52]
[35 51]
[36 50]
[41 49]
[42 48]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[75 82]
[76 81]
[107 124]
[108 123]
[109 122]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
