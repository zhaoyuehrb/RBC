%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAGCUGCGCACGUGCGGCCGGAAGGGAAGUAACGUCAGCCUGAGAACUGAGUAGCUGUACUGUGUGGCGCCUUAUUCUAGGCACUUGUUGGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[98.89129639 167.96656799]
[97.47967529 153.03314209]
[96.06804657 138.09971619]
[87.16734314 126.15706635]
[93.57159424 111.68999481]
[87.61437988 97.92367554]
[77.69470215 86.67201233]
[67.77502441 75.42034149]
[57.85534286 64.16867828]
[47.93566513 52.91701126]
[38.01598740 41.66534805]
[28.09630966 30.41368103]
[18.17663193 19.16201401]
[10.00056553 14.68878841]
[8.12887859 7.39760685]
[-1.43248105 -4.16009140]
[-10.99384117 -15.71779060]
[-20.55520058 -27.27548981]
[-30.11655998 -38.83318710]
[-39.67792130 -50.39088440]
[-49.23928070 -61.94858551]
[-59.50748825 -72.88311768]
[-70.44201660 -83.15132141]
[-81.37654877 -93.41952515]
[-101.20572662 -91.54476166]
[-115.99081421 -104.44220734]
[-116.80004120 -123.74757385]
[-128.65235901 -132.94117737]
[-140.50468445 -142.13478088]
[-155.97892761 -140.34997559]
[-167.86790466 -149.84243774]
[-169.47409058 -164.60575867]
[-185.12037659 -162.37655640]
[-197.70993042 -171.93054199]
[-199.77359009 -187.59951782]
[-190.08703613 -200.08735657]
[-174.39710999 -201.98524475]
[-162.01239014 -192.16719055]
[-160.28048706 -176.45808411]
[-145.58154297 -178.57385254]
[-133.43063354 -169.41906738]
[-131.31108093 -153.98710632]
[-119.45875549 -144.79350281]
[-107.60643005 -135.59989929]
[-97.85043335 -139.67909241]
[-87.20323181 -139.24041748]
[-77.67068481 -134.29724121]
[-71.07794189 -125.71802521]
[-68.72011566 -115.07454681]
[-71.10833740 -104.35405731]
[-60.17380905 -94.08585358]
[-49.23928070 -83.81764221]
[-46.26266479 -83.88050079]
[-43.08374405 -82.65818024]
[-40.23598862 -80.06797028]
[-38.27165985 -76.23867798]
[-37.68158340 -71.50994110]
[-28.12022209 -59.95224762]
[-18.55886269 -48.39454651]
[-8.99750233 -36.83684921]
[0.56385779 -25.27915001]
[10.12521744 -13.72145176]
[19.68657684 -2.16375279]
[29.42829895 9.24233627]
[39.34797668 20.49400330]
[49.26765442 31.74566841]
[59.18733215 42.99733353]
[69.10700989 54.24900055]
[79.02668762 65.50066376]
[88.94636536 76.75233459]
[98.86604309 88.00399780]
[134.28050232 75.80026245]
[148.91925049 79.07241058]
[163.55801392 82.34455872]
[178.19676208 85.61670685]
[191.40478516 76.93779755]
[206.86404419 80.22213745]
[215.40283203 93.52118683]
[211.95523071 108.94485474]
[198.56665039 117.34255981]
[183.18029785 113.73207855]
[174.92460632 100.25546265]
[160.28585815 96.98331451]
[145.64710999 93.71116638]
[131.00836182 90.43901825]
[125.38252258 95.39885712]
[139.59901428 100.18334961]
[142.56365967 114.88745880]
[131.31178284 124.80689240]
[117.09539032 120.02208710]
[114.13085938 105.31853485]
[108.50502777 110.27837372]
[117.50669861 123.28915405]
[111.00148010 136.68807983]
[112.41310120 151.62152100]
[113.82472992 166.55494690]
[123.76033020 179.60162354]
[117.18062592 194.62292480]
[100.85425568 196.16622925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[5 92]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[15 63]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 52]
[23 51]
[24 50]
[27 44]
[28 43]
[29 42]
[32 39]
[72 85]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
