%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCCGGUGCCAGGGACCCUGCCCAGUUCCAGGCGUCGCCCUGACCCAGAAACGACUGGGCGCCGCCGUCCUGGAAAGGCCCCAGCGCACGGACAUCUGAGGAGCUGUUUCCGUUCCUCUGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[210.29138184 227.24723816]
[200.28160095 216.07565308]
[190.27182007 204.90406799]
[173.35496521 200.40551758]
[169.60284424 182.42671204]
[159.32398987 171.50218201]
[149.04513550 160.57766724]
[138.63401794 149.77911377]
[128.09219360 139.10813904]
[117.55036163 128.43714905]
[107.00852966 117.76616669]
[92.52029419 117.57299805]
[82.33722687 107.26517487]
[82.32048798 92.77565765]
[71.77865601 82.10467529]
[61.23682785 71.43370056]
[54.81353378 69.26522064]
[51.08123016 64.80743408]
[50.45737457 59.97712708]
[40.44759369 48.80554581]
[30.43781090 37.63396454]
[14.89450741 36.61246109]
[4.90230799 25.14029503]
[5.97194147 10.32842636]
[-4.03784084 -0.84315681]
[-14.04762268 -12.01473999]
[-24.05740547 -23.18632317]
[-36.33351898 -20.26663017]
[-48.60650635 -22.86953545]
[-58.52524567 -30.43287849]
[-64.21687317 -41.45040131]
[-64.64026642 -53.77137375]
[-59.77598572 -65.02038574]
[-69.22998047 -76.66607666]
[-78.68397522 -88.31175995]
[-88.13796234 -99.95745087]
[-102.84282684 -105.79505157]
[-104.85731506 -120.55280304]
[-114.31130981 -132.19848633]
[-123.76530457 -143.84417725]
[-133.21929932 -155.48985291]
[-142.67329407 -167.13554382]
[-156.99165344 -162.15956116]
[-172.14834595 -162.38392639]
[-186.31314087 -167.78155518]
[-197.77555847 -177.70066833]
[-205.15145874 -190.94346619]
[-207.55017090 -205.91084290]
[-204.68203735 -220.79537964]
[-196.89340210 -233.79971313]
[-185.12477112 -243.35351562]
[-170.79727173 -248.30311584]
[-155.64100647 -248.05081177]
[-141.48619080 -242.62709045]
[-130.04206848 -232.68687439]
[-122.69057465 -219.43049622]
[-120.31945038 -204.45874023]
[-123.21501160 -189.57949829]
[-131.02760315 -176.58953857]
[-121.57361603 -164.94384766]
[-112.11962128 -153.29817200]
[-102.66562653 -141.65248108]
[-93.21163177 -130.00679016]
[-79.18298340 -125.00216675]
[-76.49227905 -109.41143799]
[-67.03828430 -97.76575470]
[-57.58429337 -86.12007141]
[-48.13029861 -74.47438049]
[-30.64564323 -76.28063965]
[-15.40301418 -67.21736145]
[-8.51934147 -50.70526123]
[-12.88582230 -33.19610596]
[-2.87603998 -22.02452087]
[7.13374186 -10.85293865]
[17.14352417 0.31864372]
[31.98352432 0.87541890]
[42.29401016 12.06239891]
[41.60939407 27.62418175]
[51.61917496 38.79576492]
[61.62895966 49.96734619]
[71.90781403 60.89186859]
[82.44963837 71.56285095]
[92.99147034 82.23383331]
[107.47970581 82.42700195]
[117.66277313 92.73482513]
[117.67951202 107.22434235]
[128.22134399 117.89532471]
[138.76316833 128.56629944]
[149.30499268 139.23728943]
[157.65345764 143.19818115]
[159.96965027 150.29881287]
[170.24850464 161.22332764]
[180.52735901 172.14785767]
[193.43812561 173.33987427]
[201.77619934 182.73759460]
[201.44340515 194.89428711]
[211.45318604 206.06587219]
[221.46296692 217.23745728]
[232.16323853 221.09445190]
[235.88705444 230.48164368]
[247.87023926 239.50401306]
[259.85345459 248.52636719]
[271.83663940 257.54873657]
[283.81982422 266.57110596]
[295.80303955 275.59347534]
[307.78622437 284.61581421]
[322.97979736 280.91589355]
[336.97402954 287.89413452]
[343.16122437 302.25564575]
[338.62005615 317.21929932]
[325.49465942 325.71978760]
[309.98248291 323.74340820]
[299.40786743 312.22332764]
[298.76385498 296.59902954]
[286.78067017 287.57666016]
[274.79745483 278.55429077]
[262.81427002 269.53192139]
[250.83108521 260.50958252]
[238.84788513 251.48721313]
[226.86468506 242.46484375]
[228.95353699 257.31869507]
[223.03671265 271.10241699]
[210.82974243 279.81964111]
[195.87185669 280.94287109]
[182.49989319 274.14648438]
[174.59089661 261.40100098]
[174.43795776 246.40176392]
[182.08543396 233.49765015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[5 93]
[6 92]
[7 91]
[8 89]
[9 88]
[10 87]
[11 86]
[14 83]
[15 82]
[16 81]
[19 80]
[20 79]
[21 78]
[24 75]
[25 74]
[26 73]
[27 72]
[33 68]
[34 67]
[35 66]
[36 65]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
