%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAGGGCUUCCGCCCGGGUGAGCGCGGGGCUGCUGGGUGACCCGGCUCCUGCUUGCCCCGCAGCCCCGGCCCCCUGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[115.94595337 221.92472839]
[101.14078522 219.51499939]
[88.28752136 211.78234863]
[79.22237396 199.83149719]
[75.24037170 185.36968994]
[76.90975952 170.46493530]
[65.63977814 180.36381531]
[54.36980057 190.26268005]
[43.09982300 200.16154480]
[38.35581589 215.85951233]
[22.32942200 219.33612061]
[11.50722313 207.01492310]
[17.02216911 191.57090759]
[33.20095444 188.89157104]
[44.47093201 178.99269104]
[55.74091339 169.09382629]
[67.01088715 159.19496155]
[75.37322998 146.74220276]
[80.27131653 132.56443787]
[85.16939545 118.38668823]
[84.35746765 110.85639954]
[90.51930237 103.78131866]
[90.27779388 95.51291656]
[96.40524292 89.38360596]
[102.33701324 75.60630035]
[102.89627075 66.24082184]
[108.75095367 61.43592453]
[115.18776703 47.88721466]
[121.62457275 34.33850861]
[128.06138611 20.78979874]
[134.49818420 7.24109077]
[140.93499756 -6.30761719]
[147.37181091 -19.85632515]
[153.80862427 -33.40503311]
[160.24542236 -46.95373917]
[159.17866516 -62.73894119]
[171.62890625 -70.91458130]
[178.06570435 -84.46328735]
[184.50251770 -98.01199341]
[190.93933105 -111.56070709]
[197.37614441 -125.10941315]
[196.75738525 -129.98464966]
[197.77819824 -134.29501343]
[200.01174927 -137.55615234]
[202.90989685 -139.49494934]
[205.89192200 -140.07127380]
[214.25425720 -152.52403259]
[222.61660767 -164.97680664]
[223.18650818 -181.36604309]
[237.79005432 -188.82717896]
[251.40437317 -179.68481445]
[250.02420044 -163.34385681]
[235.06936646 -156.61445618]
[226.70703125 -144.16169739]
[218.34468079 -131.70893860]
[210.92485046 -118.67259979]
[204.48803711 -105.12389374]
[198.05122375 -91.57518768]
[191.61442566 -78.02648163]
[185.17761230 -64.47776794]
[186.70477295 -49.66166306]
[173.79414368 -40.51693344]
[167.35733032 -26.96822357]
[160.92051697 -13.41951561]
[154.48370361 0.12919210]
[148.04690552 13.67790031]
[141.61009216 27.22660828]
[135.17327881 40.77531433]
[128.73646545 54.32402420]
[122.29965973 67.87273407]
[116.11431885 81.53807068]
[110.18254852 95.31537628]
[104.50638580 109.19994354]
[99.34715271 123.28476715]
[94.44907379 137.46252441]
[89.55098724 151.64028931]
[102.71765900 144.45426941]
[117.61097717 142.66844177]
[132.10328674 146.53790283]
[144.12425232 155.50988770]
[151.95657349 168.30265808]
[154.48132324 183.08865356]
[151.33782959 197.75556946]
[142.97515869 210.20809937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[18 76]
[19 75]
[20 74]
[22 73]
[24 72]
[25 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
