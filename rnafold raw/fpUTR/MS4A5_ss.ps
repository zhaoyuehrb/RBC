%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCAGCCUCAGCACAAGAAAAGAACAUGGUCUAGACUGAAGUACCAACUAAAUCAUCUCCUUUCAAAUUAUCACCGACACCAUC\
) } def
/len { sequence length } bind def

/coor [
[122.01351166 326.47033691]
[113.59741211 327.24945068]
[105.15457153 326.90222168]
[96.83501434 325.43545532]
[88.78649902 322.87573242]
[81.15189362 319.26907349]
[74.06663513 314.68008423]
[63.75114059 325.57000732]
[60.46555710 341.63665771]
[44.82516479 346.56719971]
[32.91946030 335.28952026]
[36.99600983 319.40512085]
[52.86120987 315.25451660]
[63.17670059 304.36459351]
[50.90284729 281.33258057]
[48.95146179 255.27078247]
[57.68295670 230.59906006]
[75.64352417 211.51344299]
[99.80709076 201.27244568]
[98.72472382 186.31153870]
[97.64235687 171.35064697]
[96.55998993 156.38973999]
[87.92448425 144.25395203]
[94.64582825 129.93145752]
[93.56346130 114.97055054]
[85.14977264 106.70948029]
[84.51139832 94.93544006]
[91.98258972 85.81311798]
[91.44105530 70.82289124]
[90.89952087 55.83267212]
[90.35798645 40.84245300]
[89.81644440 25.85223007]
[81.58597565 12.34039021]
[88.85874176 -0.65792042]
[88.31720734 -15.64814186]
[87.77567291 -30.63836288]
[78.79965210 -40.11013031]
[78.78378296 -52.75542068]
[87.18247223 -61.66119003]
[87.18247223 -76.66118622]
[75.83132935 -87.65788269]
[75.66423798 -103.46128082]
[86.78032684 -114.69552612]
[102.58461761 -114.69552612]
[113.70069885 -103.46128082]
[113.53360748 -87.65788269]
[102.18247223 -76.66118622]
[102.18247223 -61.66119003]
[111.79936218 -47.10149765]
[102.76589203 -31.17989922]
[103.30742645 -16.18967819]
[103.84896088 -1.19945657]
[112.04070282 11.24018288]
[104.80667114 25.31069374]
[105.34820557 40.30091476]
[105.88973999 55.29113770]
[106.43127441 70.28135681]
[106.97281647 85.27158356]
[116.27169800 99.11777496]
[108.52436066 113.88819122]
[109.60672760 128.84909058]
[118.31964874 142.05497742]
[111.52088928 155.30737305]
[112.60325623 170.26828003]
[113.68562317 185.22917175]
[114.76799011 200.19007874]
[123.21103668 201.15890503]
[131.44813538 203.24165344]
[139.33306885 206.40077209]
[146.72587585 210.57960510]
[153.49545288 215.70336914]
[159.52185059 221.68060303]
[164.69834900 228.40463257]
[168.93339539 235.75566101]
[172.15222168 243.60273743]
[174.29812622 251.80618286]
[175.33351135 260.22009277]
[175.24053955 268.69485474]
[174.02143860 277.07983398]
[171.69841003 285.22613525]
[168.31327820 292.98913574]
[163.92674255 300.23104858]
[158.61720276 306.82351685]
[152.47947693 312.64968872]
[145.62303162 317.60644531]
[138.17004395 321.60614014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 14]
[8 13]
[19 66]
[20 65]
[21 64]
[22 63]
[24 61]
[25 60]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[34 52]
[35 51]
[36 50]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
