%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGUCAGGAGGUGGUGCGCCUCGCGCGGCAGAUUCGAAGCUAGGGCGGGGCCCGCGGGCUGAGGCAGCGGCUGUGGCGGCGACGCUGGGCGUGAGGUGGCGGCGGCCGCGCCCUGGUUGGGUCCCCACUGCUCUCGGGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[94.14194489 115.77180481]
[83.19857788 126.03059387]
[72.25521851 136.28938293]
[61.31185150 146.54817200]
[50.36848831 156.80697632]
[39.42512512 167.06576538]
[40.73533249 175.47332764]
[38.59649277 183.61151123]
[33.43896103 190.14012146]
[26.18355751 194.01545715]
[18.07787895 194.65682983]
[10.48196793 192.03240967]
[-1.30278003 201.31248474]
[-7.35803699 215.92906189]
[-22.14406204 217.72425842]
[-33.92881012 227.00431824]
[-45.71355820 236.28439331]
[-57.49830627 245.56446838]
[-69.28305054 254.84454346]
[-77.98636627 269.39407349]
[-94.37660980 265.05859375]
[-94.74783325 248.10870361]
[-78.56312561 243.05978394]
[-66.77837372 233.77972412]
[-54.99362946 224.49964905]
[-43.20888138 215.21957397]
[-31.42413330 205.93949890]
[-26.21180153 191.98669434]
[-10.58285141 189.52774048]
[1.20189667 180.24766541]
[7.04118443 159.43353271]
[29.16633415 156.12239075]
[40.10969925 145.86360168]
[51.05306244 135.60481262]
[61.99642563 125.34602356]
[72.93978882 115.08723450]
[83.88314819 104.82843781]
[89.52606201 83.81423950]
[114.21928406 83.56349945]
[118.04958344 69.06078339]
[121.87988281 54.55806732]
[125.71018219 40.05534744]
[129.54048157 25.55263138]
[133.37078857 11.04991436]
[137.20108032 -3.45280313]
[141.03138733 -17.95552063]
[144.86167908 -32.45823669]
[148.69198608 -46.96095276]
[144.73510742 -62.27936554]
[155.46585083 -72.60895538]
[159.29614258 -87.11167145]
[163.12644958 -101.61438751]
[166.95674133 -116.11711121]
[170.47412109 -130.69888306]
[173.67692566 -145.35295105]
[176.87974548 -160.00703430]
[172.26750183 -175.14103699]
[182.54391479 -185.92271423]
[177.93167114 -201.05671692]
[188.20806885 -211.83839417]
[191.41088867 -226.49247742]
[186.79864502 -241.62646484]
[197.07505798 -252.40815735]
[192.46281433 -267.54214478]
[202.73921204 -278.32385254]
[205.94203186 -292.97790527]
[208.82881165 -307.69750977]
[211.39820862 -322.47579956]
[213.96760559 -337.25411987]
[216.53700256 -352.03240967]
[218.78782654 -366.86257935]
[220.71905518 -381.73773193]
[222.65026855 -396.61291504]
[224.58149719 -411.48806763]
[220.62474060 -427.97381592]
[235.37089539 -436.33966064]
[247.49192810 -424.48568726]
[239.45664978 -409.55682373]
[237.52543640 -394.68167114]
[235.59420776 -379.80651855]
[233.66299438 -364.93136597]
[235.86193848 -360.61752319]
[235.32304382 -354.86819458]
[231.31529236 -349.46301270]
[228.74589539 -334.68472290]
[226.17649841 -319.90640259]
[223.60710144 -305.12811279]
[225.61842346 -300.72366333]
[224.83268738 -295.00283813]
[220.59611511 -289.77511597]
[217.39329529 -275.12103271]
[222.23461914 -261.03518677]
[211.72912598 -249.20533752]
[216.57046509 -235.11950684]
[206.06497192 -223.28965759]
[202.86215210 -208.63558960]
[207.70347595 -194.54974365]
[197.19798279 -182.71990967]
[202.03932190 -168.63406372]
[191.53382874 -156.80421448]
[188.33100891 -142.15014648]
[185.12820435 -127.49606323]
[186.94816589 -123.00917053]
[185.91703796 -117.32743835]
[181.45947266 -112.28681183]
[177.62916565 -97.78408813]
[173.79887390 -83.28137207]
[169.96856689 -68.77865601]
[174.19940186 -54.49757767]
[163.19470215 -43.13065338]
[159.36439514 -28.62793732]
[155.53410339 -14.12522125]
[151.70379639 0.37749639]
[147.87350464 14.88021374]
[144.04319763 29.38293076]
[140.21290588 43.88564682]
[136.38259888 58.38836670]
[132.55230713 72.89108276]
[128.72200012 87.39379883]
[131.29139709 102.17210388]
[145.48692322 109.15763855]
[146.32455444 124.02867126]
[154.82507324 136.38751221]
[163.32560730 148.74636841]
[171.82612610 161.10520935]
[180.32666016 173.46405029]
[188.82717896 185.82289124]
[204.24342346 185.23735046]
[217.51733398 193.09909058]
[224.41325378 206.89944458]
[222.73071289 222.23478699]
[213.00662231 234.21165466]
[198.34387207 239.00827026]
[183.42132568 235.09407043]
[173.00068665 223.71804810]
[170.40716553 208.51023865]
[176.46833801 194.32342529]
[167.96780396 181.96458435]
[159.46728516 169.60572815]
[150.96675110 157.24688721]
[142.46623230 144.88804626]
[133.96569824 132.52920532]
[120.37819672 126.42765045]
[118.93255615 110.67263031]
[111.12184143 116.73925781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[12 30]
[13 29]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[50 108]
[51 107]
[52 106]
[53 105]
[54 102]
[55 101]
[56 100]
[58 98]
[60 96]
[61 95]
[63 93]
[65 91]
[66 90]
[67 87]
[68 86]
[69 85]
[70 84]
[71 81]
[72 80]
[73 79]
[74 78]
[120 144]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
