%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGGUAAGGAGGCCCCGUGAUCAGCUCCAGCCAUUUGCAGUCCUGGCUAUCCCAGGAGCUUACAUAAAGGGACAAUUGGAGCCUGAGAGGUGACAGUGCUGACACUACAAGGCUCGGAGCUCCGGGCACUCAGACAUC\
) } def
/len { sequence length } bind def

/coor [
[116.04564667 190.83576965]
[111.15863800 205.01734924]
[106.27162933 219.19892883]
[101.38462067 233.38050842]
[96.49761200 247.56208801]
[100.15222931 263.54882812]
[87.95214081 274.50738525]
[72.44775391 269.16452026]
[69.58865356 253.01654053]
[82.31603241 242.67507935]
[87.20304108 228.49349976]
[92.09004974 214.31192017]
[96.97705841 200.13034058]
[101.86406708 185.94876099]
[104.83110046 171.24513245]
[105.82594299 156.27816772]
[106.82078552 141.31118774]
[107.81562805 126.34421539]
[85.18444824 120.05307770]
[77.61531067 100.21900177]
[63.43373489 95.33199310]
[49.25215912 90.44498444]
[43.97374344 91.48017120]
[39.31559372 90.44000244]
[35.97795486 87.92641449]
[34.31073380 84.73478699]
[20.48450089 78.91796875]
[6.65826941 73.10115814]
[-7.16796255 67.28434753]
[-20.99419403 61.46753311]
[-34.82042694 55.65071869]
[-49.00200272 50.76371002]
[-63.47647858 46.82802582]
[-77.95095062 42.89234161]
[-92.42542267 38.95665741]
[-106.89990234 35.02097321]
[-117.74356842 45.89802933]
[-132.57716370 49.88050461]
[-147.41052246 45.89712906]
[-158.25352478 35.01941681]
[-162.18948364 20.17341232]
[-158.15963745 5.35261965]
[-147.24798584 -5.45624304]
[-132.38972473 -9.34564590]
[-117.58163452 -5.26936007]
[-106.80702209 5.67611504]
[-102.96421814 20.54650116]
[-88.48973846 24.48218536]
[-74.01526642 28.41786957]
[-59.54079437 32.35355377]
[-45.06631851 36.28923798]
[-51.08184814 22.54829788]
[-45.81000137 8.50523376]
[-32.23807144 2.11753488]
[-18.05657768 7.00478506]
[-11.30145073 20.39762878]
[-15.80047703 34.70702362]
[-29.00361443 41.82448959]
[-15.17738152 47.64130020]
[-1.35114980 53.45811462]
[12.47508240 59.27492523]
[26.30131340 65.09173584]
[40.12754440 70.90855408]
[54.13916397 76.26341248]
[68.32074738 81.15042114]
[82.50231934 86.03742981]
[88.15074921 80.15501404]
[95.74914551 76.54102325]
[104.39271545 75.82725525]
[112.97921753 78.28732300]
[120.34952545 83.77845001]
[125.44367218 91.73790741]
[127.45124817 101.23722076]
[141.73747253 96.66513824]
[156.02368164 92.09304810]
[160.79742432 79.44783020]
[171.83593750 71.99087524]
[184.95901489 72.27427673]
[195.35166931 79.96877289]
[209.73553467 75.71385193]
[220.77407837 64.37978363]
[235.17333984 68.18902588]
[249.55720520 63.93410110]
[263.94107056 59.67917633]
[278.32495117 55.42424774]
[292.70880127 51.16932297]
[307.09268188 46.91439438]
[312.36395264 32.43959427]
[325.00000000 23.94349861]
[340.03805542 24.51037598]
[351.71890259 33.71340179]
[366.10275269 29.45847702]
[380.43869019 25.04469872]
[394.72488403 20.47261238]
[405.51000977 8.89712334]
[419.99002075 12.38689518]
[427.00354004 -1.77594924]
[442.00399780 -6.75205946]
[456.09188843 0.41080153]
[460.90914917 15.46303558]
[453.59771729 29.47442055]
[438.49542236 34.13224792]
[424.56210327 26.67311287]
[414.79882812 37.92157745]
[399.29699707 34.75883102]
[385.01077271 39.33091736]
[379.55587769 44.40559006]
[370.35769653 43.84234238]
[355.97381592 48.09726715]
[351.17938232 62.17389297]
[338.86978149 70.83054352]
[323.64517212 70.57597351]
[311.34759521 61.29825974]
[296.96374512 65.55318451]
[282.57986450 69.80811310]
[268.19601440 74.06304169]
[253.81213379 78.31797028]
[239.42826843 82.57289124]
[229.41856384 93.60262299]
[213.99046326 90.09771729]
[199.60659790 94.35264587]
[192.25193787 109.43733215]
[175.95405579 114.67496490]
[160.59577942 106.37926483]
[146.30955505 110.95135498]
[132.02333069 115.52344513]
[122.78260803 127.33905792]
[121.78775787 142.30603027]
[120.79291534 157.27301025]
[119.79807281 172.23997498]
[129.45051575 160.75823975]
[143.07583618 154.48522949]
[158.07525635 154.61743164]
[171.58789062 161.12960815]
[181.03646851 172.77969360]
[184.61883545 187.34562683]
[181.65170288 202.04924011]
[172.70101929 214.08607483]
[159.47396851 221.16030884]
[144.49334717 221.92268372]
[130.61647034 216.22776794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[15 130]
[16 129]
[17 128]
[18 127]
[20 66]
[21 65]
[22 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[73 126]
[74 125]
[75 124]
[79 121]
[80 120]
[82 118]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[91 109]
[92 108]
[93 106]
[94 105]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
