%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAAGUUCGAAACCAACAGAACGAAAAGCAACGAAGCACACUUAAAGUGAGGAACCCGGCAAGCGGCGAAAUUCUUGCUGAAGAGAAGAAAAAGCGAAAGGUUUUCCGCUGCAACCAAUCAG\
) } def
/len { sequence length } bind def

/coor [
[147.50021362 110.98333740]
[142.68928528 100.56465149]
[127.88899994 103.00421143]
[127.98123169 120.21145630]
[116.97346497 137.30456543]
[95.67640686 147.25419617]
[69.13444519 144.21017456]
[58.59469986 154.88320923]
[48.05495071 165.55624390]
[37.51520157 176.22927856]
[41.66082382 191.01809692]
[37.84108353 205.89443970]
[27.08346748 216.85661316]
[12.28171921 220.95585632]
[-2.58256269 217.08950806]
[-13.51096249 206.29757690]
[-17.56379509 191.48304749]
[-13.65086937 176.63096619]
[-2.82474160 165.73645020]
[12.00241280 161.73007202]
[26.84216499 165.68952942]
[37.38191605 155.01649475]
[47.92166519 144.34346008]
[58.46141434 133.67042542]
[56.14378738 126.53749847]
[44.00842285 135.35412598]
[31.87338638 126.53704834]
[36.50917435 112.27136993]
[51.50852966 112.27165222]
[49.19090271 105.13872528]
[34.39061356 102.69917297]
[21.69421768 112.11071014]
[6.07404470 109.70535278]
[-3.20273399 96.91016388]
[-0.63236928 81.31629181]
[12.26018715 72.17531586]
[27.82600975 74.91040039]
[36.83017349 87.89888000]
[51.63046265 90.33843994]
[54.90882874 83.59290314]
[64.74393463 63.35628128]
[53.68123627 53.22628784]
[42.61854172 43.09629822]
[31.55584335 32.96630478]
[15.79098511 26.72887421]
[17.42050743 9.85341835]
[34.08755875 6.74766779]
[41.68583679 21.90360832]
[52.74853134 32.03359985]
[63.81122971 42.16359329]
[74.87392426 52.29358292]
[113.12554169 61.17411804]
[125.44944000 88.20391846]
[140.24972534 85.76436615]
[143.72700500 67.00418854]
[153.96302795 50.93918610]
[169.44721985 39.89714050]
[187.91058350 35.46774292]
[206.65817261 38.27376938]
[222.96243286 47.88362503]
[234.46005249 62.87753677]
[248.72589111 58.24228287]
[262.99172974 53.60702515]
[270.28402710 47.91758347]
[277.67468262 49.03942490]
[292.05249023 44.76413345]
[306.43032837 40.48884583]
[320.80816650 36.21355820]
[328.24111938 30.70916557]
[335.60122681 32.01638031]
[350.08197021 28.10375786]
[364.56268311 24.19113541]
[379.04342651 20.27851295]
[393.52413940 16.36589050]
[408.00485229 12.45326710]
[420.62155151 -0.88799226]
[437.38439941 4.14145088]
[451.76223755 -0.13383813]
[466.14007568 -4.40912724]
[480.51788330 -8.68441582]
[494.89572144 -12.95970535]
[496.82583618 -28.06581497]
[504.73883057 -41.07751465]
[517.26373291 -49.74045181]
[532.23052979 -52.55371475]
[547.04614258 -49.02989197]
[559.14367676 -39.77950668]
[566.42718506 -26.40524292]
[567.63470459 -11.22427464]
[562.55700684 3.13320470]
[552.07391357 14.17967510]
[538.00164795 20.00126839]
[522.77832031 19.58935928]
[509.04141235 13.01531315]
[499.17098999 1.41812193]
[484.79318237 5.69341087]
[470.41534424 9.96869946]
[456.03753662 14.24398899]
[441.65969849 18.51927757]
[435.57299805 29.05387688]
[423.54159546 32.69011307]
[411.91748047 26.93399239]
[397.43676758 30.84661484]
[382.95602417 34.75923538]
[368.47531128 38.67185974]
[353.99459839 42.58448410]
[339.51385498 46.49710464]
[325.08343506 50.59138489]
[310.70562744 54.86667252]
[296.32778931 59.14196014]
[281.94995117 63.41725159]
[267.62698364 67.87287140]
[253.36114502 72.50813293]
[239.09530640 77.14338684]
[239.67158508 88.48480225]
[237.64552307 99.66880035]
[233.11935425 110.10562897]
[226.32722473 119.24389648]
[217.62316895 126.59967041]
[207.46257019 131.78213501]
[196.37841797 134.51434326]
[184.95329285 134.64799500]
[173.78877258 132.17150879]
[163.47373962 127.21086121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[7 24]
[8 23]
[9 22]
[10 21]
[30 39]
[31 38]
[41 51]
[42 50]
[43 49]
[44 48]
[61 114]
[62 113]
[63 112]
[65 111]
[66 110]
[67 109]
[68 108]
[70 107]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
