%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUGCCGCGCGGGGCGGGGAGCGGGGUCGGCUCAGUGGCCCUGAGACCCUAGCUCUGCUCUCGGUCCGCUCGCUGUCCGCUAGCCCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[110.77574158 312.24795532]
[110.68287659 296.94271851]
[117.72363281 283.35278320]
[130.28010559 274.60101318]
[128.34228516 259.72671509]
[126.40446472 244.85240173]
[124.46664429 229.97810364]
[122.28821564 215.13713074]
[119.86975098 200.33338928]
[104.31560516 185.39486694]
[111.45160675 164.26576233]
[107.14094543 149.89849854]
[102.83027649 135.53125000]
[91.76182556 125.56436920]
[95.20687866 110.12279510]
[90.66413116 95.82722473]
[85.89048767 81.60708618]
[81.11683655 67.38694763]
[76.34319305 53.16681290]
[64.61635590 42.54646301]
[67.90102386 28.01855278]
[63.12737656 13.79841423]
[58.35373306 -0.42172354]
[53.58008957 -14.64186096]
[48.80644226 -28.86199951]
[44.03279877 -43.08213806]
[39.25915527 -57.30227280]
[34.48550797 -71.52241516]
[29.71186447 -85.74254608]
[24.93821907 -99.96268463]
[20.16457558 -114.18282318]
[4.44808626 -126.60006714]
[8.61827374 -145.36410522]
[2.93417311 -159.24543762]
[-2.97396326 -173.03288269]
[-9.10458660 -186.72286987]
[-15.23520947 -200.41284180]
[-21.36583138 -214.10281372]
[-27.49645424 -227.79278564]
[-41.91360092 -234.83023071]
[-45.25967407 -250.52046204]
[-34.96785355 -262.82727051]
[-18.93314171 -262.30996704]
[-9.45599937 -249.36534119]
[-13.80647850 -233.92341614]
[-7.67585516 -220.23344421]
[-1.54523242 -206.54345703]
[4.58539057 -192.85348511]
[10.71601391 -179.16351318]
[16.43149948 -174.25230408]
[16.81549072 -164.92953491]
[22.49959183 -151.04821777]
[32.45331192 -147.86132812]
[39.06538391 -139.48263550]
[39.88475418 -128.61807251]
[34.38471222 -118.95646667]
[39.15835953 -104.73633575]
[43.93200302 -90.51619720]
[48.70564651 -76.29605865]
[53.47929001 -62.07592010]
[58.25293732 -47.85578156]
[63.02658081 -33.63564301]
[67.80022430 -19.41550636]
[72.57386780 -5.19536829]
[77.34751892 9.02476978]
[82.12116241 23.24490738]
[93.50655365 32.84813690]
[90.56333160 48.39316940]
[95.33697510 62.61330414]
[100.11062622 76.83344269]
[104.88426971 91.05358124]
[110.32947540 97.22185516]
[109.57414246 105.81213379]
[120.95092010 116.80664825]
[117.19754028 131.22058105]
[121.50820160 145.58784485]
[125.81887054 159.95509338]
[134.18539429 162.60208130]
[140.67257690 168.36889648]
[144.20306396 176.19367981]
[144.23335266 184.68257141]
[140.83599854 192.35780334]
[134.67349243 197.91491699]
[137.09196472 212.71867371]
[141.64228821 220.86460876]
[139.34094238 228.04028320]
[141.27876282 242.91458130]
[143.21658325 257.78887939]
[145.15440369 272.66317749]
[159.53405762 277.90573120]
[169.82170105 289.23812866]
[173.65328979 304.05627441]
[170.14837646 318.95507812]
[160.11236572 330.51086426]
[145.85144043 336.06826782]
[130.64265442 334.35018921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 89]
[5 88]
[6 87]
[7 86]
[8 84]
[9 83]
[11 77]
[12 76]
[13 75]
[15 73]
[16 71]
[17 70]
[18 69]
[19 68]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[33 52]
[34 51]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
