%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAAAAGUCCAGGACAGUGGGCCACUUUCAGUCUUCAAAGAGAAAGAUAAGAAAUUCUGGAUUUUCAAAAUCCUUUUGAAGCCUUUUAAGCCAUUGAUUAUUAUUAUUCCUAAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[134.83129883 575.93780518]
[119.90892029 578.28283691]
[104.93050385 576.32739258]
[91.11029816 570.22991943]
[79.56864166 560.48486328]
[71.24115753 547.88208008]
[66.80292511 533.44329834]
[66.61373138 518.33898926]
[70.68891144 503.79351807]
[78.69811249 490.98614502]
[89.99205780 480.95501709]
[103.65520477 474.51333618]
[118.57993317 472.18331909]
[120.52173615 457.30953979]
[122.46353912 442.43576050]
[124.40534973 427.56198120]
[124.21062469 412.56323242]
[121.88333893 397.74487305]
[119.55606079 382.92651367]
[117.22877502 368.10815430]
[114.90149689 353.28979492]
[112.57421112 338.47143555]
[110.25521851 336.69836426]
[108.54424286 333.84432983]
[107.87842560 330.15371704]
[108.59141541 326.03216553]
[110.85777283 322.00354004]
[110.07921600 307.02374268]
[109.30065918 292.04397583]
[96.35715485 281.39199829]
[95.03813171 264.34378052]
[106.63610077 251.32542419]
[105.46891785 236.37089539]
[96.76474762 224.28427124]
[103.40476990 209.92388916]
[102.23758698 194.96936035]
[101.07040405 180.01484680]
[99.90322876 165.06031799]
[98.73604584 150.10580444]
[97.56887054 135.15129089]
[96.40168762 120.19676208]
[95.23450470 105.24224091]
[89.93904877 106.81207275]
[83.87178040 106.02204895]
[77.87753296 102.65700531]
[72.84402466 96.77262878]
[69.62090302 88.69981384]
[64.28782654 74.67988586]
[58.95474625 60.65996170]
[43.94395447 56.72858810]
[34.13683701 44.70361328]
[33.30443192 29.20887947]
[41.76681900 16.20243263]
[56.27003479 10.68551636]
[71.23729706 14.77949715]
[80.91339111 26.91015625]
[81.57765198 42.41300583]
[72.97467041 55.32688522]
[78.30774689 69.34680939]
[83.64082336 83.36673737]
[98.63956451 83.56145477]
[104.33480835 69.68470764]
[110.03005219 55.80796051]
[115.72529602 41.93120956]
[121.42053986 28.05445862]
[127.11579132 14.17770958]
[127.53606415 -2.77102780]
[143.93878174 -7.05904961]
[152.59996033 7.51560259]
[140.99253845 19.87295532]
[135.29728699 33.74970627]
[129.60205078 47.62645340]
[123.90679932 61.50320435]
[118.21155548 75.37995148]
[112.51631165 89.25670624]
[110.18902588 104.07506561]
[111.35620880 119.02957916]
[112.52339172 133.98410034]
[113.69056702 148.93862915]
[114.85774994 163.89314270]
[116.02492523 178.84767151]
[117.19210815 193.80218506]
[118.35929108 208.75671387]
[127.14694977 221.91297913]
[120.42343903 235.20372009]
[121.59062195 250.15824890]
[132.81866455 257.72784424]
[137.53141785 270.21405029]
[134.20384216 282.93673706]
[124.28044128 291.26541138]
[125.05899811 306.24520874]
[125.83755493 321.22497559]
[127.39257050 336.14416504]
[129.71984863 350.96252441]
[132.04713440 365.78088379]
[134.37442017 380.59924316]
[136.70170593 395.41760254]
[139.02897644 410.23596191]
[146.59748840 397.28536987]
[159.23217773 389.20053101]
[174.16232300 387.75445557]
[188.11373901 393.26422119]
[198.02694702 404.52160645]
[201.72799683 419.05783081]
[198.40524292 433.68518066]
[188.78738403 445.19592285]
[174.98356628 451.06573486]
[160.02095032 450.00738525]
[147.18078613 442.25302124]
[139.27912903 429.50378418]
[137.33732605 444.37756348]
[135.39552307 459.25134277]
[133.45372009 474.12512207]
[147.28004456 480.20864868]
[158.83148193 489.94213867]
[167.17163086 502.53652954]
[171.62435913 516.97088623]
[171.82873535 532.07501221]
[167.76815796 546.62451172]
[159.77183533 559.43994141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 113]
[14 112]
[15 111]
[16 110]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[22 93]
[27 92]
[28 91]
[29 90]
[32 86]
[33 85]
[35 83]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[41 77]
[42 76]
[47 60]
[48 59]
[49 58]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
