%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUUUCGGCCGUGGGGGAGGGGGCUCGUGUCCCCCCCAACCCAGCCCGGAGGCCGCGUCCGCCCGCGCCCGCUCUGGCCCCCGCGGAGCCGCGCAACUUCCCGGGAGCCCGGGCCAAAGUGAGCGCAAAGUGCUGCCCAAGUUGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[104.37052155 138.25894165]
[90.15917969 137.22911072]
[77.29518890 131.10208130]
[67.53980255 120.71675110]
[53.56593704 126.16937256]
[39.59207153 131.62199402]
[25.61820412 137.07461548]
[11.64433765 142.52722168]
[-2.32952905 147.97984314]
[-16.30339622 153.43246460]
[-26.34694290 165.65693665]
[-41.01612473 163.07540894]
[-47.92610931 169.14794922]
[-55.33555603 168.49302673]
[-69.41912842 173.65568542]
[-83.50269318 178.81834412]
[-97.58626556 183.98100281]
[-111.56013489 189.43362427]
[-125.41832733 195.17387390]
[-135.20709229 207.60330200]
[-149.92648315 205.32548523]
[-163.78468323 211.06575012]
[-177.64286804 216.80599976]
[-191.50106812 222.54624939]
[-205.35925293 228.28649902]
[-219.21745300 234.02674866]
[-228.76591492 247.35937500]
[-245.05787659 245.48741150]
[-251.33355713 230.33657837]
[-241.13706970 217.49275208]
[-224.95770264 220.16856384]
[-211.09951782 214.42829895]
[-197.24131775 208.68804932]
[-183.38313293 202.94779968]
[-169.52493286 197.20755005]
[-155.66673279 191.46730042]
[-146.86921692 179.44845581]
[-131.15856934 181.31568909]
[-117.30038452 175.57543945]
[-114.65934753 171.52732849]
[-109.41873932 169.13035583]
[-102.74892426 169.89743042]
[-88.66535187 164.73477173]
[-74.58178711 159.57211304]
[-60.49821472 154.40945435]
[-46.46874619 149.10153198]
[-37.42470169 137.26707458]
[-21.75601578 139.45860291]
[-7.78214836 134.00598145]
[6.19171762 128.55335999]
[20.16558456 123.10074615]
[34.13945007 117.64812469]
[48.11331558 112.19550323]
[62.08718491 106.74288177]
[63.79798889 86.87511444]
[75.21707916 70.52704620]
[93.28219604 62.08272934]
[93.59220123 47.08593369]
[93.90220642 32.08913803]
[94.21221161 17.09234238]
[85.84155273 7.22518921]
[86.44490051 -5.29802799]
[95.14990234 -13.75424767]
[95.76977539 -28.74143410]
[96.23474121 -43.73422623]
[96.54473877 -58.73102188]
[96.85474396 -73.72782135]
[97.16474915 -88.72461700]
[97.47475433 -103.72141266]
[85.28174591 -113.13611603]
[81.02019501 -127.75434875]
[86.12317657 -141.91145325]
[98.43654633 -150.24925232]
[98.74654388 -165.24604797]
[90.37245941 -179.34593201]
[98.63115692 -193.51371765]
[115.02680206 -193.17478943]
[122.69295502 -178.67782593]
[113.74333954 -164.93605042]
[113.43334198 -149.93925476]
[125.39162445 -141.09971619]
[129.90521240 -126.74382782]
[125.04320526 -112.31419373]
[112.47154999 -103.41140747]
[112.16154480 -88.41461182]
[111.85153961 -73.41781616]
[111.54153442 -58.42102051]
[111.23153687 -43.42422104]
[114.25680542 -36.62889099]
[110.75695801 -28.12155914]
[110.13708496 -13.13437366]
[119.11376953 1.91360331]
[109.20900726 17.40234566]
[108.89900208 32.39914322]
[108.58899689 47.39593887]
[108.27899170 62.39273453]
[118.32020569 66.12938690]
[126.94322968 72.48799133]
[133.48056030 80.97632599]
[137.42613220 90.93729401]
[138.47451782 101.59981537]
[136.54457092 112.13849640]
[149.58630371 119.54882050]
[162.62805176 126.95914459]
[175.66979980 134.36947632]
[188.71153259 141.77980042]
[204.53248596 141.87019348]
[211.77581787 154.88493347]
[224.81755066 162.29525757]
[237.85929871 169.70558167]
[252.92112732 165.73332214]
[266.04174805 173.43423462]
[269.73587036 187.81787109]
[282.77761841 195.22819519]
[295.81936646 202.63851929]
[308.86111450 210.04885864]
[305.25128174 195.48968506]
[311.68771362 181.94079590]
[325.25402832 175.54119873]
[339.80331421 179.19056702]
[348.74328613 191.23536682]
[348.02319336 206.21806335]
[337.96932983 217.35000610]
[323.13601685 219.58703613]
[334.97311401 228.80023193]
[346.81024170 238.01342773]
[358.64733887 247.22660828]
[370.48443604 256.43978882]
[386.69747925 261.39700317]
[386.42224121 278.34869385]
[370.05682373 282.77691650]
[361.27124023 268.27691650]
[349.43414307 259.06372070]
[337.59704590 249.85052490]
[325.75991821 240.63734436]
[313.92282104 231.42414856]
[301.45077515 223.09059143]
[288.40902710 215.68026733]
[275.36727905 208.26994324]
[262.32556152 200.85961914]
[248.07826233 205.04893494]
[234.74652100 197.71960449]
[230.44897461 182.74732971]
[217.40722656 175.33700562]
[204.36547852 167.92668152]
[189.47737122 168.36631775]
[181.30120850 154.82154846]
[168.25946045 147.41120911]
[155.21772766 140.00088501]
[142.17597961 132.59056091]
[129.13423157 125.18023682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[12 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 39]
[19 38]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[57 96]
[58 95]
[59 94]
[60 93]
[63 91]
[64 90]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[73 80]
[74 79]
[102 151]
[103 150]
[104 149]
[105 148]
[106 147]
[108 145]
[109 144]
[110 143]
[113 140]
[114 139]
[115 138]
[116 137]
[124 136]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
