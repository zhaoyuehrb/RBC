%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUGACUGCGGACGAAUCGGCGUUUGCCGAGGCUGGCAUAGAUUUGGCUGUCUCCGCUCAUAGCUGCUUUUGGCGCGAAAG\
) } def
/len { sequence length } bind def

/coor [
[175.20567322 330.86184692]
[170.93246460 316.48342896]
[166.65925598 302.10498047]
[162.38604736 287.72653198]
[158.11282349 273.34808350]
[153.83961487 258.96963501]
[149.56640625 244.59120178]
[145.29319763 230.21275330]
[141.01997375 215.83430481]
[129.97753906 205.83862305]
[133.46281433 190.40608215]
[129.18960571 176.02763367]
[123.89002228 161.99502563]
[117.59168243 148.38139343]
[111.29334259 134.76776123]
[104.99501038 121.15412140]
[98.69667053 107.54049683]
[95.38936615 110.06475067]
[90.79990387 111.19302368]
[85.47174835 110.46865082]
[80.08702850 107.63167572]
[75.39945221 102.65654755]
[62.14677048 95.63042450]
[48.89409256 88.60429382]
[35.64141083 81.57817078]
[22.38872910 74.55204010]
[6.02873039 75.68450165]
[-2.90633345 61.93325806]
[4.77516556 47.44441223]
[21.17115974 47.12284851]
[29.41485596 61.29936218]
[42.66753769 68.32548523]
[55.92021942 75.35161591]
[69.17289734 82.37773895]
[82.42557526 89.40386963]
[96.03920746 83.10552979]
[99.26376343 68.45622253]
[102.48832703 53.80691528]
[97.89854431 38.66609192]
[108.19094086 27.89966774]
[103.60116577 12.75884438]
[113.89355469 1.99241996]
[117.11811066 -12.65688801]
[108.39632416 -25.83664131]
[111.63040161 -41.30649185]
[124.90162659 -49.88845062]
[140.33642578 -46.49099731]
[148.77758789 -33.12977600]
[145.21713257 -17.73176575]
[131.76742554 -9.43233204]
[128.54286194 5.21697664]
[133.36328125 19.30998230]
[122.84024811 31.12422371]
[127.66066742 45.21723175]
[117.13763428 57.03147125]
[113.91307831 71.68077850]
[110.68852234 86.33008575]
[112.31030273 101.24215698]
[118.60864258 114.85578918]
[124.90697479 128.46942139]
[131.20530701 142.08305359]
[137.50364685 155.69668579]
[141.62654114 158.32850647]
[144.27879333 161.85195923]
[145.36180115 165.63679504]
[145.01324463 169.09359741]
[143.56805420 171.75442505]
[147.84126282 186.13287354]
[159.18936157 197.15699768]
[155.39842224 211.56109619]
[159.67163086 225.93954468]
[163.94485474 240.31797791]
[168.21806335 254.69642639]
[172.49127197 269.07485962]
[176.76448059 283.45330811]
[181.03770447 297.83175659]
[185.31091309 312.21020508]
[189.58412170 326.58865356]
[204.42907715 330.78756714]
[214.63020325 342.36083984]
[216.93235779 357.61544800]
[210.60095215 371.68374634]
[197.65628052 380.07656860]
[182.22897339 380.11578369]
[169.24180603 371.78887939]
[162.83894348 357.75299072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[11 68]
[12 67]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[36 57]
[37 56]
[38 55]
[40 53]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
