%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGACACAGAGUAAACUUUUGCUGGGCUCCAAGUGACCGCCCAUAGUUUAUUAUAAAGGUGACUGCACCCUGCAGCCACCAGCACUGCCUGGCUCCACGUGCCUCCUGGUCUCAGU\
) } def
/len { sequence length } bind def

/coor [
[72.02885437 235.31874084]
[82.45832062 223.44432068]
[81.25131989 208.49296570]
[80.04431915 193.54159546]
[78.83732605 178.59024048]
[75.11408997 172.09167480]
[77.80413818 163.22216797]
[76.99899292 148.24380493]
[76.19384003 133.26542664]
[65.80297852 122.44738770]
[50.86917114 121.03977203]
[35.93535995 119.63215637]
[21.00155449 118.22454071]
[6.06774569 116.81692505]
[-8.86606216 115.40930939]
[-23.79986954 114.00170135]
[-38.73367691 112.59408569]
[-44.24750900 119.24519348]
[-51.89328384 123.05960083]
[-60.33347321 123.45571899]
[-68.12572479 120.44262695]
[-73.96932983 114.60547638]
[-76.92228699 106.99362183]
[-91.61914825 103.99323273]
[-106.31600952 100.99284363]
[-121.01286316 97.99246216]
[-135.70973206 94.99207306]
[-145.34013367 106.88803101]
[-159.40034485 112.93525696]
[-174.65943909 111.74413300]
[-187.61097717 103.58838654]
[-195.27879333 90.34213257]
[-195.90087891 75.04927063]
[-189.33427429 61.22398758]
[-177.08795166 52.04323578]
[-161.97602844 49.61668015]
[-147.47109985 54.50192642]
[-136.90629578 65.57637787]
[-132.70933533 80.29521942]
[-118.01248169 83.29560089]
[-103.31562042 86.29598999]
[-88.61875916 89.29637146]
[-73.92189789 92.29676056]
[-54.34309769 83.18829346]
[-37.32606506 97.66027832]
[-22.39225578 99.06788635]
[-7.45844746 100.47550201]
[7.47536087 101.88311768]
[22.40916824 103.29073334]
[37.34297562 104.69834900]
[52.27678299 106.10596466]
[67.21059418 107.51358032]
[67.41164398 95.93035889]
[71.48519135 85.38133240]
[78.75717163 77.08600616]
[88.19692230 71.93260193]
[98.56012726 70.38457489]
[108.55172729 72.44382477]
[116.56871033 59.76597214]
[124.58570099 47.08812332]
[132.60269165 34.41027069]
[133.43891907 18.61117935]
[146.78070068 11.98953819]
[154.79768372 -0.68831348]
[162.81468201 -13.36616516]
[170.83166504 -26.04401588]
[178.84864807 -38.72186661]
[182.20381165 -55.34050751]
[199.10179138 -56.71695709]
[205.10227966 -40.86039734]
[191.52650452 -30.70487976]
[183.50952148 -18.02702904]
[175.49252319 -5.34917736]
[167.47554016 7.32867384]
[159.45855713 20.00652504]
[159.19575500 34.89881134]
[145.28053284 42.42725754]
[137.26354980 55.10511017]
[129.24656677 67.78295898]
[121.22957611 80.46081543]
[126.69327545 89.04810333]
[128.83525085 98.99825287]
[143.44625854 102.39214325]
[158.05726624 105.78602600]
[172.66827393 109.17990875]
[187.32351685 112.37733459]
[202.02038574 115.37771606]
[213.37646484 104.80326843]
[228.78327942 102.95671082]
[242.31658936 110.54809570]
[248.77256775 124.65837860]
[245.66874695 139.86186218]
[234.19862366 150.31250000]
[218.77268982 151.99180603]
[205.32252502 144.25405884]
[199.01998901 130.07458496]
[184.32313538 127.07419586]
[177.04527283 128.84240723]
[169.27438354 123.79091644]
[154.66337585 120.39703369]
[140.05236816 117.00315094]
[125.44136047 113.60926056]
[120.33534241 122.12315369]
[112.36982727 128.69314575]
[102.29336548 132.36143494]
[91.17221832 132.46028137]
[91.97737122 147.43864441]
[92.78251648 162.41702271]
[93.78868103 177.38323975]
[94.99568176 192.33459473]
[96.20268250 207.28596497]
[97.40967560 222.23731995]
[109.60887146 232.28495789]
[111.04707336 248.02368164]
[100.87100983 260.11596680]
[85.11797333 261.38769531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[4 110]
[5 109]
[7 108]
[8 107]
[9 106]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[58 80]
[59 79]
[60 78]
[61 77]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
[82 102]
[83 101]
[84 100]
[85 99]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
