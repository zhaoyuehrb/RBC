%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCGGGCUCGCCGGGUUGGGGAAAGGGAGGUGGAGUUUCCAACAGGGAACUUGACCCGUUAGCAGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[38.62924194 205.04603577]
[35.83386993 206.88462830]
[32.94253922 207.58103943]
[30.34633636 207.25074768]
[19.31047821 217.40997314]
[8.27461910 227.56919861]
[-2.76123977 237.72842407]
[-4.85819292 253.63385010]
[-18.67476654 261.78747559]
[-33.61206818 255.93457031]
[-38.21147537 240.56495667]
[-28.94472122 227.46890259]
[-12.92046356 226.69256592]
[-1.88460469 216.53334045]
[9.15125370 206.37411499]
[20.18711281 196.21488953]
[30.11608887 184.97143555]
[38.83224106 172.76370239]
[47.54839325 160.55596924]
[56.26454544 148.34823608]
[57.36307526 133.49420166]
[71.67903137 126.75891876]
[80.39517975 114.55118561]
[75.89385223 96.12966919]
[85.93558502 80.04309082]
[104.46228790 75.99637604]
[111.60149384 62.80427170]
[111.36489868 46.98483276]
[124.22716522 39.47407913]
[125.63351440 30.14799881]
[131.94378662 25.89327049]
[139.62205505 13.00746155]
[147.30033875 0.12165234]
[147.71768188 -15.69404888]
[160.87933350 -22.66685295]
[168.55761719 -35.55266190]
[176.23588562 -48.43847275]
[183.91416931 -61.32427979]
[191.59243774 -74.21009064]
[199.27072144 -87.09590149]
[206.94898987 -99.98171234]
[214.62727356 -112.86751556]
[214.31207275 -129.26364136]
[228.49177551 -137.50183105]
[242.57952881 -129.10734558]
[242.08305359 -112.71572113]
[227.51307678 -105.18923950]
[219.83480835 -92.30343628]
[212.15652466 -79.41762543]
[204.47825623 -66.53181458]
[196.79997253 -53.64600754]
[189.12170410 -40.76019669]
[181.44342041 -27.87438774]
[173.76515198 -14.98857784]
[173.89700317 -0.09455618]
[160.18614197 7.79992819]
[152.50787354 20.68573761]
[144.82958984 33.57154846]
[137.41926575 46.61328888]
[138.16650391 61.48913956]
[124.79360199 69.94348145]
[117.65438843 83.13558960]
[123.15750885 92.26593781]
[124.24549866 102.87084198]
[120.71092224 112.92839813]
[113.22767639 120.52107239]
[103.22248840 124.20127106]
[92.60291290 123.26734161]
[83.88675690 135.47506714]
[82.16479492 151.20228577]
[68.47227478 157.06439209]
[59.75612640 169.27212524]
[51.03997421 181.47985840]
[42.32381821 193.68759155]
[42.24937057 198.20033264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 74]
[18 73]
[19 72]
[20 71]
[22 69]
[23 68]
[26 62]
[27 61]
[29 59]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
