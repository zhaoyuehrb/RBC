%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCUCCAACCGCCACAAGCAGCAAAGGGCAUAGAUGACCACAGGAGAGCCCUAGGGGGAGGCCGGCUCCACCAGCAGCCCCAUAC\
) } def
/len { sequence length } bind def

/coor [
[178.13833618 191.97926331]
[181.52764893 182.03773499]
[170.28648376 172.10614014]
[159.04533386 162.17456055]
[147.80418396 152.24296570]
[136.56301880 142.31138611]
[125.32186890 132.37979126]
[114.08071136 122.44821167]
[107.45623779 125.42819214]
[100.27148438 126.49745178]
[93.06632996 125.57563019]
[86.38219452 122.73200226]
[80.72132111 118.18023682]
[76.50909424 112.26237488]
[61.79089355 115.15626526]
[55.38586426 129.28974915]
[41.88002777 136.92990112]
[26.46665382 135.13894653]
[15.07250023 124.60552216]
[12.07885170 109.37995911]
[18.63682747 95.31679535]
[32.22475052 87.82360077]
[47.61779022 89.78166962]
[58.89700317 100.43807220]
[73.61520386 97.54418182]
[75.79581451 89.21361542]
[80.53247070 82.02213287]
[87.32495117 76.72916412]
[84.17176056 62.06433105]
[81.01856232 47.39949799]
[77.86537170 32.73466110]
[74.71217346 18.06982803]
[59.93340683 14.41615391]
[48.25413132 4.74757195]
[41.95670319 -8.97695446]
[42.24150848 -24.01290703]
[48.99849319 -37.37900543]
[60.83965683 -46.44831467]
[57.68646240 -61.11315155]
[46.28937912 -72.90460968]
[51.06206131 -88.59389496]
[67.09477997 -92.04120636]
[77.89444733 -79.70024872]
[72.35129547 -64.26634216]
[75.50448608 -49.60150909]
[90.02691650 -46.20082855]
[101.68061829 -36.79335022]
[108.12050629 -23.20331955]
[108.02085114 -8.10331154]
[101.34786987 5.51132441]
[89.37701416 14.91663361]
[92.53020477 29.58146858]
[95.68340302 44.24630356]
[98.83659363 58.91113663]
[101.98978424 73.57597351]
[122.87032318 86.61579895]
[124.01229858 111.20705414]
[135.25344849 121.13864136]
[146.49461365 131.07023621]
[157.73576355 141.00181580]
[168.97691345 150.93341064]
[180.21807861 160.86499023]
[191.45922852 170.79658508]
[210.99200439 164.82298279]
[230.19534302 171.38619995]
[241.83374023 187.85003662]
[241.61790466 207.87913513]
[254.42820740 215.68272400]
[267.23852539 223.48631287]
[280.04882812 231.28990173]
[295.85968018 231.86149597]
[302.70379639 245.09053040]
[319.10220337 244.93525696]
[327.20172119 259.19464111]
[318.67022705 273.19985962]
[302.28421021 272.54351807]
[294.90020752 257.90084839]
[280.00561523 257.88742065]
[272.24523926 244.10021973]
[259.43490601 236.29661560]
[246.62461853 228.49302673]
[233.81430054 220.68943787]
[225.58619690 226.82316589]
[215.82592773 230.09118652]
[205.50315857 230.14900208]
[195.64964294 226.97206116]
[187.25608826 220.86004639]
[181.17253113 212.40875244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[14 25]
[15 24]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[38 45]
[39 44]
[67 82]
[68 81]
[69 80]
[70 79]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
