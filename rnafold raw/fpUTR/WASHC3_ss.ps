%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCCGCCGAGUGAUUAGUGAGCGGAGAAGCUUUCUUCCGGCGGGAAGGGCCCCGGAGGCGGGCACUUGGGGGGAAAGUUGAGACGUGAUUACCGGGUUGGGCGGGCCCCAUCUGGGAGGGGUUUGUGGGUGAACUCGGGGUCCACCGCCCGCUGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[137.02426147 153.88087463]
[123.00381470 159.21258545]
[108.25099182 156.50068665]
[97.04319000 146.53147888]
[92.62995911 132.19538879]
[96.28964233 117.65110779]
[87.37957001 129.71803284]
[78.46949768 141.78495789]
[69.55942535 153.85188293]
[71.71054077 169.27946472]
[62.50256348 181.39010620]
[47.78146362 183.34579468]
[52.59080124 198.09875488]
[47.77804947 212.85061646]
[35.19380569 221.92895508]
[19.67696953 221.84300232]
[7.19407988 212.62577820]
[2.54506326 197.82151794]
[7.51756144 183.12274170]
[20.19954872 174.18144226]
[35.71453857 174.43572998]
[33.25094223 159.79106140]
[42.11512375 147.42655945]
[57.49250031 144.94180298]
[66.40257263 132.87487793]
[75.31264496 120.80796051]
[84.22271729 108.74103546]
[81.94637299 101.59483337]
[67.65388489 106.14728546]
[63.10166550 91.85472107]
[77.39367676 87.30242157]
[75.11733246 80.15621185]
[60.86945724 75.46600342]
[46.62158585 70.77579498]
[32.37371063 66.08557892]
[16.84619713 69.11987305]
[7.17639732 57.79096222]
[-7.07147694 53.10074997]
[-21.31935120 48.41053772]
[-35.56722641 43.72032928]
[-49.81509781 39.03011703]
[-64.06297302 34.33990479]
[-78.31084442 29.64969444]
[-87.48989105 29.93537140]
[-92.78658295 24.72936249]
[-106.94142151 19.76543236]
[-121.07492828 26.83787918]
[-136.04319763 21.76575661]
[-142.96582031 7.55826378]
[-137.73573303 -7.35554457]
[-123.45584106 -14.12757111]
[-108.59815979 -8.74009323]
[-101.97748566 5.61059523]
[-87.82265472 10.57452583]
[-73.62063599 15.40182018]
[-59.37276077 20.09203148]
[-45.12488937 24.78224182]
[-30.87701416 29.47245407]
[-16.62913895 34.16266632]
[-2.38126564 38.85287476]
[11.86660862 43.54308701]
[26.37501717 40.17332077]
[37.06392288 51.83770752]
[51.31179428 56.52791977]
[65.55966949 61.21813202]
[79.80754089 65.90834045]
[103.02609253 73.53741455]
[109.42609406 90.13116455]
[123.58092499 85.16723633]
[137.73576355 80.20330048]
[151.89059448 75.23937225]
[166.04544067 70.27544403]
[176.50755310 58.40722275]
[191.07821655 61.49674988]
[205.23304749 56.53281784]
[219.38789368 51.56888962]
[219.67445374 44.50335693]
[221.58628845 37.71438599]
[225.01101685 31.56960678]
[229.75462341 26.39970207]
[235.55238342 22.48063660]
[242.08361816 20.01892281]
[248.98944092 19.14074898]
[255.89250183 19.88554764]
[262.41757202 22.20428658]
[268.21191406 25.96262169]
[272.96447754 30.94863510]
[276.42236328 36.88478470]
[291.22152710 34.43838120]
[306.02069092 31.99197769]
[311.50158691 17.71237373]
[323.31607056 8.15651512]
[338.22827148 5.81288671]
[352.21777344 11.21197796]
[361.56350708 22.81036377]
[376.36267090 20.36396027]
[391.16183472 17.91755676]
[405.96099854 15.47115421]
[420.76016235 13.02475071]
[435.55932617 10.57834721]
[450.35845947 8.13194370]
[461.10769653 -8.78956890]
[480.52368164 -12.37210083]
[496.11737061 -0.76308686]
[510.75042725 -4.06062317]
[525.38348389 -7.35815954]
[540.01654053 -10.65569592]
[554.64959717 -13.95323277]
[569.28265381 -17.25076866]
[583.91571045 -20.54830551]
[598.54876709 -23.84584236]
[613.18182373 -27.14337730]
[619.19573975 -41.44764328]
[632.48638916 -49.45631409]
[647.94317627 -48.08988571]
[659.62268066 -37.87377930]
[663.03387451 -22.73630142]
[656.86511230 -8.49811554]
[643.48840332 -0.63409728]
[628.04730225 -2.16812134]
[616.47930908 -12.51032448]
[601.84625244 -9.21278763]
[587.21325684 -5.91525173]
[572.58020020 -2.61771536]
[557.94714355 0.67982113]
[543.31408691 3.97735739]
[528.68103027 7.27489376]
[514.04797363 10.57243061]
[499.41491699 13.86996651]
[496.43991089 23.78027344]
[489.54711914 31.60571289]
[479.94351196 35.87369537]
[469.35403442 35.74366760]
[459.71170044 31.17176247]
[452.80487061 22.93110275]
[438.00570679 25.37750626]
[423.20654297 27.82390976]
[408.40740967 30.27031326]
[393.60824585 32.71671677]
[378.80908203 35.16312027]
[364.00991821 37.60952377]
[358.89395142 51.59853363]
[347.38623047 61.21249008]
[332.51309204 63.79257965]
[318.25186157 58.54722214]
[308.46710205 46.79113770]
[293.66793823 49.23754120]
[278.86877441 51.68394470]
[267.73800659 72.45082092]
[244.71746826 78.53918457]
[224.35182190 65.72372437]
[210.19697571 70.68765259]
[196.04214478 75.65158844]
[186.59246826 87.16475677]
[171.00936890 84.43028259]
[156.85453796 89.39421082]
[142.69969177 94.35813904]
[128.54486084 99.32206726]
[114.39002228 104.28600311]
[129.36952209 105.06981659]
[141.77101135 113.50801849]
[147.99882507 127.15406036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 27]
[7 26]
[8 25]
[9 24]
[12 21]
[32 66]
[33 65]
[34 64]
[35 63]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[68 159]
[69 158]
[70 157]
[71 156]
[72 155]
[74 153]
[75 152]
[76 151]
[88 148]
[89 147]
[90 146]
[95 141]
[96 140]
[97 139]
[98 138]
[99 137]
[100 136]
[101 135]
[104 129]
[105 128]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
