%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUAUAUACAGAGCCUCCCUGGCCCUCCUGGAAAGAGUCCUGGAAAGACAACCUUCAGGUCCAGCCCUGGAGCUGGAGGAGUGGAGCCCCACUCUGAAGACGCAGCCUUUCUCCAGGUUCUGUCUCUCCCAUUCUGAUUCUUGACACCAGAUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[163.23652649 224.77462769]
[149.20761108 230.08401489]
[134.28712463 228.54162598]
[121.64096069 220.47474670]
[113.95244598 207.59504700]
[112.85297394 192.63539124]
[118.57582855 178.77000427]
[129.90670776 168.94090271]
[144.44137573 165.23368835]
[159.09561157 168.43487549]
[146.25595093 160.67968750]
[133.41627502 152.92449951]
[120.57661438 145.16931152]
[105.71985626 147.23733521]
[95.48626709 158.20426941]
[85.25267792 169.17121887]
[84.36804962 185.18984985]
[71.20965576 194.36787415]
[55.87148285 189.66468811]
[50.11967087 174.68815613]
[58.36651611 160.92701721]
[74.28574371 158.93762207]
[84.51933289 147.97068787]
[94.75292206 137.00375366]
[91.26245117 130.36547852]
[84.28150940 117.08894348]
[80.79103851 110.45067596]
[65.95543671 112.66537476]
[51.11983490 114.88007355]
[38.61329651 124.57012177]
[24.88312721 118.79676056]
[10.04752541 121.01145172]
[-4.78807783 123.22615051]
[-15.45026302 135.21353149]
[-31.46175194 134.20767212]
[-40.53990173 120.98017120]
[-35.72072983 105.67803955]
[-20.70109749 100.03977203]
[-7.00277615 108.39054871]
[7.83282661 106.17584991]
[22.66843033 103.96115112]
[34.11382675 94.42951202]
[48.90513611 100.04447174]
[63.74074173 97.82977295]
[78.57634735 95.61507416]
[81.86856842 88.87628174]
[67.78731537 83.70729828]
[53.17876434 80.30285645]
[51.02154922 65.45878601]
[64.05678558 58.03701782]
[75.72094727 67.46809387]
[88.45301056 75.39870453]
[91.74523163 68.65991974]
[84.37393188 55.59607697]
[77.00263214 42.53223801]
[69.63133240 29.46839714]
[62.26002884 16.40455627]
[54.88872910 3.34071684]
[47.51742554 -9.72312355]
[33.99715424 -17.93974113]
[34.48130798 -32.82647705]
[27.11000633 -45.89031601]
[19.73870468 -58.95415497]
[12.36740398 -72.01799774]
[-2.02044749 -79.88703156]
[-2.12902761 -96.28582001]
[12.15336132 -104.34469604]
[26.13422203 -95.77336884]
[25.43124390 -79.38929749]
[32.80254364 -66.32545471]
[40.17384720 -53.26161575]
[47.54514694 -40.19777679]
[60.53817368 -32.91557312]
[60.58126831 -17.09442520]
[67.95256805 -4.03058434]
[75.32386780 9.03325558]
[82.69516754 22.09709549]
[90.06647491 35.16093445]
[97.43777466 48.22477722]
[104.80907440 61.28861618]
[112.27250671 60.54887772]
[134.66279602 58.32966614]
[139.32623291 44.07300568]
[143.98965454 29.81634521]
[148.65309143 15.55968380]
[144.74757385 -0.36761886]
[156.77386475 -11.51663589]
[172.36033630 -6.41821432]
[175.47296143 9.68282700]
[162.90975952 20.22311783]
[158.24632263 34.47977829]
[153.58288574 48.73643875]
[148.91944885 62.99309921]
[128.33180237 132.32965088]
[141.17146301 140.08483887]
[154.01113892 147.84002686]
[166.85079956 155.59521484]
[175.51271057 141.67497253]
[195.42697144 135.05000305]
[209.89649963 131.09620667]
[224.36602783 127.14239502]
[238.83557129 123.18859100]
[253.30509949 119.23477936]
[264.57778931 108.13356018]
[278.89440918 112.24248505]
[293.36395264 108.28868103]
[307.83349609 104.33486938]
[322.30300903 100.38106537]
[336.77255249 96.42725372]
[344.38833618 82.57895660]
[359.58883667 78.25219727]
[373.35583496 86.01396942]
[377.52163696 101.25934601]
[369.61474609 114.94352722]
[354.32617188 118.94791412]
[340.72634888 110.89678955]
[326.25683594 114.85059357]
[311.78729248 118.80440521]
[297.31774902 122.75820923]
[282.84823608 126.71202087]
[272.61050415 137.53044128]
[257.25891113 133.70431519]
[242.78938293 137.65812683]
[228.31983948 141.61192322]
[213.85031128 145.56573486]
[199.38076782 149.51954651]
[196.49354553 156.44152832]
[211.08731079 159.90879822]
[226.08702087 159.81512451]
[234.44384766 172.27159119]
[228.66883850 186.11532593]
[213.93725586 188.94029236]
[203.45114136 178.21611023]
[190.71908569 170.28550720]
[187.83184814 177.20748901]
[195.20315552 190.27133179]
[202.57444763 203.33517456]
[217.53381348 207.67745972]
[224.82325745 221.03105164]
[220.59135437 235.26576233]
[227.96266174 248.32958984]
[235.33396912 261.39343262]
[242.31439209 267.36920166]
[242.71893311 274.78900146]
[256.94851685 282.94076538]
[256.73306274 299.33850098]
[242.29425049 307.11361694]
[228.48545837 298.26776123]
[229.51200867 281.90075684]
[222.27012634 268.76473999]
[214.89881897 255.70089722]
[207.52752686 242.63705444]
[193.15498352 238.89994812]
[185.49334717 225.75636292]
[189.51062012 210.70646667]
[182.13931274 197.64263916]
[174.76800537 184.57879639]
[177.53353882 199.32165527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 97]
[11 96]
[12 95]
[13 94]
[14 24]
[15 23]
[16 22]
[27 45]
[28 44]
[29 43]
[31 41]
[32 40]
[33 39]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[61 72]
[62 71]
[63 70]
[64 69]
[82 93]
[83 92]
[84 91]
[85 90]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[135 157]
[136 156]
[137 155]
[140 152]
[141 151]
[142 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
