%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAGGUGACUUCACAGGGUAGUGAUGACCUCACAAGCUUCCAAAGUUUCCAUGGCAGCGUGACUACACACCUGCGUCCUAGAGAAGCCUCCCUACCAUUUCUCUGUAAGAUACCAAUCUGUUUGGUUGGCUGAGAGAGA\
) } def
/len { sequence length } bind def

/coor [
[62.03664780 431.04849243]
[73.20784760 420.10598755]
[71.88214111 405.16470337]
[70.55644226 390.22338867]
[69.23074341 375.28207397]
[67.90503693 360.34078979]
[59.07318115 348.34713745]
[65.56053925 333.91714478]
[64.23484039 318.97583008]
[62.90913773 304.03454590]
[61.58343887 289.09323120]
[60.25773621 274.15194702]
[48.70678329 264.81860352]
[47.14948654 249.68489075]
[57.01745987 237.63246155]
[55.69176102 222.69116211]
[54.36605835 207.74986267]
[53.04035568 192.80856323]
[51.21963501 177.91946411]
[48.90590286 163.09898376]
[46.59216690 148.27850342]
[44.27843475 133.45802307]
[31.60285759 125.43744659]
[17.21899223 129.69236755]
[2.83512545 133.94729614]
[-11.54874039 138.20222473]
[-20.44156647 151.55502319]
[-36.43747330 152.78405762]
[-47.26576996 140.94650269]
[-44.61991501 125.12313843]
[-30.52958298 117.45227814]
[-15.80366707 123.81835938]
[-1.41980124 119.56343079]
[12.96406460 115.30850983]
[27.34793091 111.05358124]
[27.67976189 96.05725098]
[13.49818420 91.17024231]
[-0.68339354 86.28323364]
[-14.86497116 81.39622498]
[-29.04654884 76.50921631]
[-43.22812653 71.62220764]
[-60.17295456 72.17825317]
[-65.39806366 56.04956436]
[-51.34614182 46.56378937]
[-38.34111786 57.44063187]
[-24.15954018 62.32764053]
[-9.97796249 67.21464539]
[4.20361519 72.10165405]
[18.38519287 76.98866272]
[32.56676865 81.87567139]
[38.15513611 76.87365723]
[25.18702888 69.33520508]
[28.34933853 54.67233658]
[43.27178192 53.14897919]
[49.33186722 66.86962128]
[54.92023468 61.86760712]
[51.62865448 47.23321152]
[48.33707809 32.59881592]
[45.04550171 17.96442223]
[40.07250214 10.20598984]
[41.84677124 2.96996379]
[38.87974167 -11.73366642]
[35.91271210 -26.43729591]
[22.61068344 -34.97143555]
[19.32094765 -50.42954636]
[27.99524879 -63.64060593]
[43.48727798 -66.76672363]
[56.60588455 -57.95323181]
[59.56803894 -42.42901993]
[50.61634445 -29.40432549]
[53.58337021 -14.70069504]
[56.55039978 0.00293501]
[59.67989349 14.67284489]
[62.97147369 29.30723953]
[66.26305389 43.94163513]
[69.55462646 58.57603073]
[83.63335419 54.51988220]
[97.41886139 54.81172943]
[109.67222595 58.93521500]
[119.42520142 66.04932404]
[126.05656433 75.09915161]
[138.82008362 67.21926880]
[151.58361816 59.33938980]
[164.34713745 51.45951080]
[177.11065674 43.57963181]
[189.87417603 35.69975662]
[202.63771057 27.81987572]
[215.40122986 19.93999672]
[214.27052307 4.67631197]
[220.37336731 -9.35985279]
[232.30735779 -18.94308662]
[247.33016968 -21.87123489]
[261.98965454 -17.47142982]
[272.91714478 -6.75471354]
[277.60165405 7.81629038]
[274.96664429 22.89327240]
[265.61767578 35.01165009]
[251.70303345 41.38671112]
[236.42021179 40.55351639]
[223.28111267 32.70352173]
[210.51757812 40.58340073]
[197.75405884 48.46327591]
[184.99053955 56.34315491]
[172.22702026 64.22303772]
[159.46348572 72.10291290]
[146.69996643 79.98279572]
[133.93644714 87.86267090]
[138.28251648 104.96237946]
[133.94421387 123.28659821]
[120.85284424 138.43244934]
[101.14561462 146.27223206]
[78.85746002 144.03500366]
[59.09891510 131.14430237]
[61.41264725 145.96478271]
[63.72638321 160.78526306]
[66.04011536 175.60574341]
[69.42398071 179.78697205]
[70.68338013 184.39068604]
[70.02282715 188.51641846]
[67.98165894 191.48286438]
[69.30735779 206.42416382]
[70.63306427 221.36546326]
[71.95876312 236.30676270]
[83.79463196 246.43345642]
[84.92623901 261.60494995]
[75.19903564 272.82623291]
[76.52474213 287.76754761]
[77.85044098 302.70883179]
[79.17613983 317.65014648]
[80.50184631 332.59143066]
[89.42852783 345.65377808]
[82.84634399 359.01507568]
[84.17204285 373.95639038]
[85.49774933 388.89767456]
[86.82344818 403.83898926]
[88.14914703 418.78030396]
[101.07245636 427.58496094]
[105.26297760 442.65060425]
[98.74207306 456.86367798]
[84.58871460 463.51321411]
[69.48568726 459.45953369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 136]
[3 135]
[4 134]
[5 133]
[6 132]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[15 123]
[16 122]
[17 121]
[18 120]
[19 116]
[20 115]
[21 114]
[22 113]
[23 35]
[24 34]
[25 33]
[26 32]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[56 76]
[57 75]
[58 74]
[59 73]
[61 72]
[62 71]
[63 70]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
