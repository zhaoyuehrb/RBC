%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCCACGGCCGGCCGCGGAGCCGAGUGCUGACCCGGGUGAGAGGUUCCCGCGGCUCAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[83.96096039 279.85403442]
[71.86976624 270.12869263]
[67.83670044 255.14488220]
[73.41255951 240.66423035]
[86.45332336 232.25482178]
[87.15641022 217.27130127]
[87.85948944 202.28779602]
[77.67397308 191.48081970]
[78.17355347 176.27539062]
[89.57796478 165.66514587]
[90.28105164 150.68164062]
[90.98413086 135.69812012]
[91.68721771 120.71461487]
[92.39030457 105.73110199]
[89.60941315 100.83437347]
[89.98532867 94.71932220]
[93.92659760 89.39701843]
[96.02967072 74.54518127]
[94.09683228 65.24977112]
[98.59523010 59.05289841]
[101.39213562 44.31595993]
[104.18903351 29.57902336]
[106.98593140 14.84208488]
[109.78283691 0.10514670]
[112.57973480 -14.63179111]
[102.12006378 -25.94114494]
[100.34604645 -41.06418228]
[107.72985077 -54.17690277]
[121.25717163 -60.35342407]
[124.05407715 -75.09036255]
[126.85097504 -89.82730103]
[129.64787292 -104.56423950]
[120.54624939 -117.48461151]
[123.32879639 -133.04202271]
[136.34466553 -142.00653076]
[151.87179565 -139.05966187]
[160.69819641 -125.94973755]
[157.58732605 -110.45464325]
[144.38481140 -101.76734161]
[141.58792114 -87.03040314]
[138.79101562 -72.29346466]
[135.99411011 -57.55652237]
[146.31787109 -46.85334396]
[148.38400269 -31.94713211]
[141.19255066 -18.52563667]
[127.31667328 -11.83489037]
[124.51977539 2.90204740]
[121.72286987 17.63898659]
[118.92597198 32.37592316]
[116.12907410 47.11286163]
[113.33216858 61.84980011]
[110.88150787 76.64825439]
[108.77843475 91.50009155]
[107.37381744 106.43418121]
[106.67073059 121.41769409]
[105.96764374 136.40121460]
[105.26456451 151.38471985]
[104.56147766 166.36824036]
[114.92222595 177.99977112]
[113.99575043 193.18518066]
[102.84300232 202.99087524]
[102.13992310 217.97439575]
[101.43683624 232.95790100]
[113.63282776 242.55152893]
[117.82820129 257.49069214]
[112.40975189 272.03097534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[17 53]
[18 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[29 42]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
