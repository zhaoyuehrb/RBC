%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUCCGCCGGAAGCGGCUCCUGUCAGUUGUUCUCAGGUGUUUGGGCUUGUUGUUCCGUAUACUCAGUGGGUUCGCGGCCGCCGGCCCAGUGAGGCUGGGUUCGAGGAGCUGGAGCGGGAAACUGGAGCUUAAAUUCUGGCGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[77.03726196 599.19653320]
[63.93274307 588.43981934]
[70.64142609 572.86962891]
[71.27378082 557.88299561]
[71.90612793 542.89630127]
[72.38044739 527.90380859]
[72.69669342 512.90716553]
[73.01293945 497.91049194]
[73.32917786 482.91381836]
[73.64542389 467.91714478]
[73.96166992 452.92047119]
[74.27791595 437.92382812]
[74.59416199 422.92715454]
[74.91040039 407.93048096]
[61.47442627 395.56964111]
[61.26807785 376.99630737]
[74.88366699 363.89959717]
[74.56742096 348.90295410]
[74.25117493 333.90628052]
[73.93493652 318.90960693]
[73.61869049 303.91293335]
[73.30244446 288.91629028]
[65.29853821 276.35494995]
[72.74317169 262.39474487]
[72.42692566 247.39807129]
[60.99536133 257.10989380]
[46.03020096 256.08813477]
[36.02471161 244.91270447]
[36.65737534 229.92605591]
[47.56912994 219.63365173]
[62.56715775 219.87680054]
[73.13921356 230.51673889]
[74.71762848 215.60002136]
[76.29603577 200.68330383]
[77.87445068 185.76657104]
[79.45285797 170.84985352]
[77.72732544 168.55929565]
[76.83705902 165.42451477]
[77.11701202 161.77215576]
[78.77321625 158.04698181]
[81.84468842 154.76197815]
[84.67404175 140.03125000]
[87.50340271 125.30049896]
[90.33275604 110.56976318]
[85.93318176 97.29816437]
[94.93650055 86.60088348]
[97.76585388 71.87014008]
[100.59521484 57.13940048]
[103.42457581 42.40865707]
[106.25392914 27.67791748]
[101.25856018 12.66602707]
[111.25763702 1.62665594]
[114.08699799 -13.10408497]
[116.91635132 -27.83482552]
[108.31733704 -40.82307816]
[111.39655304 -55.72183990]
[123.83185577 -63.83964539]
[126.66121674 -78.57038879]
[115.59788513 -87.18984985]
[109.37060547 -99.68216705]
[109.14906311 -113.57250977]
[114.91946411 -126.13655853]
[125.49840546 -134.93486023]
[138.77511597 -138.28637695]
[141.91441345 -152.95419312]
[145.05371094 -167.62200928]
[148.19300842 -182.28982544]
[143.51524353 -197.40368652]
[153.74484253 -208.22979736]
[156.88414001 -222.89761353]
[160.02343750 -237.56542969]
[163.16273499 -252.23324585]
[166.30203247 -266.90106201]
[169.44131470 -281.56887817]
[164.76354980 -296.68273926]
[174.99314880 -307.50885010]
[178.13244629 -322.17666626]
[172.57467651 -337.60531616]
[183.36264038 -349.95651245]
[199.39862061 -346.52438354]
[204.18617249 -330.83963013]
[192.80026245 -319.03738403]
[189.66096497 -304.36956787]
[194.56327820 -290.30484009]
[184.10913086 -278.42959595]
[180.96984863 -263.76177979]
[177.83055115 -249.09394836]
[174.69125366 -234.42613220]
[171.55195618 -219.75831604]
[168.41265869 -205.09049988]
[173.31497192 -191.02577209]
[162.86082458 -179.15052795]
[159.72152710 -164.48271179]
[156.58222961 -149.81489563]
[153.44293213 -135.14707947]
[165.68106079 -124.64305115]
[171.00106812 -109.31877899]
[167.86837769 -93.30722809]
[157.04167175 -80.97714996]
[141.39195251 -75.74102783]
[138.56259155 -61.01028824]
[147.10557556 -48.86314774]
[144.44606018 -33.88377380]
[131.64709473 -25.00546837]
[128.81773376 -10.27472782]
[125.98838043 4.45601320]
[131.18612671 18.41426277]
[120.98467255 30.50727463]
[118.15531158 45.23801422]
[115.32595825 59.96875763]
[112.49659729 74.69950104]
[109.66724396 89.43023682]
[114.06681824 102.70183563]
[105.06349945 113.39911652]
[102.23414612 128.12985229]
[99.40478516 142.86059570]
[96.57542419 157.59133911]
[94.36958313 172.42826843]
[92.79116821 187.34498596]
[91.21276093 202.26170349]
[89.63434601 217.17843628]
[88.05593872 232.09515381]
[87.42359161 247.08181763]
[87.73983765 262.07849121]
[95.76636505 275.71246338]
[88.29911041 288.60003662]
[88.61535645 303.59671021]
[88.93160248 318.59335327]
[89.24784088 333.59002686]
[89.56408691 348.58670044]
[89.88033295 363.58337402]
[99.96297455 370.03317261]
[105.59440613 380.45822144]
[105.46362305 392.18600464]
[99.72009277 402.27374268]
[89.90706635 408.24673462]
[89.59082794 423.24340820]
[89.27458191 438.24005127]
[88.95833588 453.23672485]
[88.64208984 468.23339844]
[88.32584381 483.23007202]
[88.00960541 498.22671509]
[87.69335938 513.22338867]
[87.37711334 528.22003174]
[90.34049988 536.93371582]
[86.89279175 543.52868652]
[86.26044464 558.51531982]
[85.62809753 573.50201416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[5 146]
[6 144]
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[24 124]
[25 123]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[41 117]
[42 116]
[43 115]
[44 114]
[46 112]
[47 111]
[48 110]
[49 109]
[50 108]
[52 106]
[53 105]
[54 104]
[57 101]
[58 100]
[64 95]
[65 94]
[66 93]
[67 92]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
