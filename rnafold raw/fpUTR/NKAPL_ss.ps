%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCCUGCGUGGCCGCGAAUCACCAGCCAGCCUCUGGGUCUGUAGCAACCGCCCAGCGUUGAGGCGCGGCUC\
) } def
/len { sequence length } bind def

/coor [
[-57.56951141 221.94815063]
[-76.38580322 215.36486816]
[-87.83206177 225.05935669]
[-99.27832794 234.75384521]
[-103.97857666 242.93072510]
[-111.40379333 244.60055542]
[-123.24090576 253.81375122]
[-135.07801819 263.02694702]
[-138.48126221 278.70486450]
[-152.92396545 285.68969727]
[-167.32691956 278.62326050]
[-170.64140320 262.92633057]
[-160.32484436 250.64024353]
[-144.29119873 251.18983459]
[-132.45410156 241.97663879]
[-120.61698914 232.76344299]
[-108.97281647 223.30758667]
[-97.52655029 213.61309814]
[-86.08029175 203.91860962]
[-89.35509491 194.00395203]
[-89.33277893 183.53224182]
[-85.99652100 173.57427979]
[-79.66937256 165.15435791]
[-70.98302460 159.14491272]
[-60.81482697 156.17613220]
[-50.19915390 156.56991577]
[-40.22219086 160.30506897]
[-31.91080666 167.01756287]
[-18.71870041 159.87834167]
[-5.52659464 152.73913574]
[7.66551161 145.59992981]
[15.85791302 130.22201538]
[34.13415909 130.51698303]
[47.01996994 122.83871460]
[59.90578079 115.16043854]
[72.79158783 107.48216248]
[85.67739868 99.80388641]
[92.66778564 87.69496155]
[106.64432526 87.31030273]
[114.53881073 73.59944916]
[129.43283081 73.73130798]
[135.41484070 66.43959045]
[143.01364136 66.01467896]
[156.20574951 58.87546921]
[169.39785767 51.73625946]
[173.92123413 39.45657730]
[185.29199219 33.84155273]
[197.01844788 37.47626114]
[210.49432373 30.88831329]
[219.19827271 16.98963356]
[235.57492065 17.84846115]
[242.77735901 32.58130646]
[233.39636230 46.03228378]
[217.08227539 44.36417770]
[203.60639954 50.95212555]
[194.78550720 65.97834778]
[176.53706360 64.92836761]
[163.34495544 72.06757355]
[150.15284729 79.20678711]
[137.11111450 86.61711121]
[130.13830566 99.77877045]
[114.32260132 100.19611359]
[107.33221436 112.30503845]
[93.35567474 112.68969727]
[80.46986389 120.36796570]
[67.58405304 128.04624939]
[54.69824600 135.72451782]
[41.81243515 143.40280151]
[37.80037308 155.85891724]
[26.67137909 161.93904114]
[14.80472279 158.79203796]
[1.61261642 165.93124390]
[-11.57948971 173.07044983]
[-24.77159691 180.20967102]
[-25.77937317 200.50845337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[6 16]
[7 15]
[8 14]
[28 74]
[29 73]
[30 72]
[31 71]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[39 62]
[41 60]
[43 59]
[44 58]
[45 57]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
