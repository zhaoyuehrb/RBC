%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUACUUCCGCCUCGGGGGAGCUGGGAGCCCGACGUUUCCGGGAGCGCCGCGUGGUUAGCGUCGGCGGCUUUUGGC\
) } def
/len { sequence length } bind def

/coor [
[22.51282501 213.95819092]
[25.62117004 228.63259888]
[19.79239273 242.45378113]
[7.11449575 250.47070312]
[-7.87101221 249.81149292]
[-19.79598045 240.71231079]
[-24.38861656 226.43267822]
[-20.00389481 212.08813477]
[-33.80358505 217.96763611]
[-47.60327911 223.84713745]
[-57.26638794 236.37451172]
[-72.00798035 234.24501038]
[-81.42171478 247.67311096]
[-97.73168945 245.96528625]
[-104.15960693 230.87840271]
[-94.09297943 217.93255615]
[-77.88748169 220.44532776]
[-69.21141815 208.33850098]
[-53.48277664 210.04745483]
[-39.68308640 204.16795349]
[-25.88339424 198.28845215]
[-13.20554256 190.27146912]
[-1.97788167 180.32463074]
[9.24977970 170.37777710]
[20.47743988 160.43093872]
[31.70510292 150.48410034]
[42.93276215 140.53726196]
[54.16042328 130.59042358]
[65.38808441 120.64358521]
[76.61574554 110.69674683]
[87.84340668 100.74990082]
[98.66144562 90.35903931]
[109.05230713 79.54100037]
[119.44317627 68.72296906]
[129.83404541 57.90493011]
[140.22489929 47.08689117]
[150.61576843 36.26885605]
[161.00663757 25.45081902]
[164.85412598 7.57606649]
[181.69354248 3.08086634]
[191.64038086 -8.14679432]
[201.58721924 -19.37445641]
[204.94697571 -34.83481216]
[219.17817688 -39.23053360]
[216.69836426 -54.67024231]
[224.76750183 -68.06513214]
[239.57557678 -73.09054565]
[254.13069153 -67.37363434]
[261.56033325 -53.61375427]
[258.35647583 -38.30789566]
[246.03187561 -28.68301773]
[230.40583801 -29.28369331]
[227.75755310 -14.62641430]
[212.81488037 -9.42761612]
[202.86804199 1.80004513]
[192.92120361 13.02770615]
[193.29484558 25.29167747]
[184.85780334 34.74959564]
[171.82467651 35.84168243]
[161.43380737 46.65972137]
[151.04293823 57.47775650]
[140.65208435 68.29579163]
[130.26121521 79.11383057]
[119.87034607 89.93186951]
[109.47948456 100.74990082]
[108.35957336 106.18570709]
[104.14194489 110.50224304]
[97.79024506 111.97756195]
[86.56258392 121.92440796]
[75.33492279 131.87124634]
[64.10726166 141.81808472]
[52.87960434 151.76492310]
[41.65194321 161.71176147]
[30.42428017 171.65859985]
[19.19661903 181.60543823]
[7.96895838 191.55229187]
[-3.25870299 201.49913025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 21]
[9 20]
[10 19]
[12 17]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[40 56]
[41 55]
[42 54]
[44 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
