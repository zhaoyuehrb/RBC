%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUACCUAGAAACCUUUCUAGCCUCUCCUCAUCUCUUGACUGUCUUGGCCUUGGCAAGAAGAAUACACGUCCCUACCCAGCUAUCUUCAGCUCCUGUCCUUCCUCCCAGCUGCCAGAGAAUUGUCAGCAGGAGGA\
) } def
/len { sequence length } bind def

/coor [
[-41.86545181 325.95336914]
[-41.65469742 336.75012207]
[-44.48755264 347.14877319]
[-50.12317276 356.31066895]
[-58.09519196 363.50039673]
[-67.75025940 368.14480591]
[-78.30161285 369.87866211]
[-88.89316559 368.57339478]
[-98.66897583 364.34649658]
[-108.84787750 375.36419678]
[-119.02677155 386.38192749]
[-129.20567322 397.39962769]
[-139.38456726 408.41735840]
[-149.56347656 419.43505859]
[-152.64845276 435.54141235]
[-168.22615051 440.66659546]
[-180.27156067 429.53823853]
[-176.39340210 413.60424805]
[-160.58117676 409.25616455]
[-150.40228271 398.23843384]
[-140.22338867 387.22073364]
[-130.04449463 376.20300293]
[-119.86558533 365.18530273]
[-109.68669128 354.16760254]
[-116.68441772 335.99337769]
[-113.60342407 316.68539429]
[-101.19927979 301.47158813]
[-82.76251221 294.51074219]
[-63.24601364 297.75588989]
[-54.37446976 285.66061401]
[-45.50292969 273.56533813]
[-36.63138580 261.47003174]
[-27.75984192 249.37477112]
[-27.60606194 244.52438354]
[-24.34663010 239.73948669]
[-18.20398140 236.94558716]
[-8.79494572 225.26354980]
[-6.83735228 210.49813843]
[7.84489775 204.60389709]
[17.25393295 192.92185974]
[26.66296768 181.23982239]
[36.07200241 169.55778503]
[45.48103714 157.87573242]
[42.94709015 141.28843689]
[53.36641693 127.70875549]
[70.71339417 125.78771973]
[79.85601807 113.89601898]
[88.99864197 102.00432587]
[98.00630188 90.01007080]
[106.87784576 77.91479492]
[115.74938965 65.81951904]
[124.62093353 53.72424316]
[126.16392517 35.41404724]
[142.42251587 28.90534019]
[151.01844788 16.61265945]
[159.61437988 4.31998014]
[168.21031189 -7.97269964]
[163.31033325 -22.57736778]
[167.89599609 -37.09718323]
[180.00888062 -46.02701569]
[194.87934875 -46.11097336]
[203.47528076 -58.40365219]
[212.07121277 -70.69633484]
[220.66714478 -82.98901367]
[218.13981628 -93.67730713]
[221.88084412 -103.76858521]
[230.40786743 -109.96684265]
[240.72018433 -110.39283752]
[249.86280823 -122.28453064]
[259.00543213 -134.17622375]
[261.28277588 -149.83267212]
[275.17413330 -155.20664978]
[260.45608521 -152.31193542]
[246.45108032 -157.68403625]
[237.44450378 -169.67910767]
[236.19233704 -184.62673950]
[243.07771301 -197.95309448]
[255.99375916 -205.58038330]
[270.98828125 -205.17471313]
[283.47305298 -196.86022949]
[289.62780762 -183.18107605]
[287.56896973 -168.32240295]
[298.92538452 -178.12200928]
[310.28179932 -187.92160034]
[321.63818359 -197.72120667]
[322.54794312 -213.49928284]
[334.40344238 -223.95025635]
[350.17102051 -222.87374878]
[360.49606323 -210.90841675]
[359.25289917 -195.15309143]
[347.17907715 -184.95513916]
[331.43780518 -186.36479187]
[320.08139038 -176.56520081]
[308.72497559 -166.76560974]
[297.36859131 -156.96600342]
[287.06582642 -146.06402588]
[285.44241333 -131.25814819]
[270.89712524 -125.03359985]
[261.75451660 -113.14190674]
[252.61187744 -101.25020599]
[251.57124329 -81.99150848]
[232.95982361 -74.39308167]
[224.36389160 -62.10040283]
[215.76795959 -49.80772400]
[207.17202759 -37.51504517]
[212.19671631 -23.51895332]
[207.96640015 -9.07705498]
[195.90228271 0.21328343]
[180.50299072 0.62323111]
[171.90705872 12.91591072]
[163.31112671 25.20859146]
[154.71519470 37.50127029]
[156.50688171 49.51772690]
[149.37397766 59.84512329]
[136.71620178 62.59578705]
[127.84466553 74.69106293]
[118.97312164 86.78633881]
[110.10157776 98.88161469]
[108.22859955 106.79708862]
[100.89033508 111.14694977]
[91.74771118 123.03864288]
[82.60508728 134.93034363]
[85.87911224 148.04731750]
[81.04563141 160.46401978]
[70.09049225 167.70008850]
[57.16307831 167.28477478]
[47.75404358 178.96681213]
[38.34500885 190.64884949]
[28.93597221 202.33088684]
[19.52693748 214.01293945]
[16.89634705 229.61390686]
[2.88709450 234.67257690]
[-6.52194071 246.35461426]
[-15.66456509 258.24630737]
[-24.53610802 270.34158325]
[-33.40764999 282.43685913]
[-42.27919388 294.53213501]
[-51.15073776 306.62741089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[29 138]
[30 137]
[31 136]
[32 135]
[33 134]
[36 133]
[37 132]
[39 130]
[40 129]
[41 128]
[42 127]
[43 126]
[46 122]
[47 121]
[48 120]
[49 118]
[50 117]
[51 116]
[52 115]
[54 112]
[55 111]
[56 110]
[57 109]
[61 105]
[62 104]
[63 103]
[64 102]
[68 100]
[69 99]
[70 98]
[72 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
