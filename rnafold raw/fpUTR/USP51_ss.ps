%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCAUGAUCUGAUCGCCUUUGAAGCAGUCGCAGCUGUUUUCCAGACGCCUUGCUCCUCAGGUCGGGGAGUGAUCUG\
) } def
/len { sequence length } bind def

/coor [
[111.68211365 126.26860046]
[101.51685333 128.70906067]
[91.15101624 127.35336304]
[81.95526886 122.38077545]
[69.82001495 131.19755554]
[57.68476105 140.01432800]
[45.72495270 149.06767273]
[33.94519806 158.35408020]
[32.33673096 174.07630920]
[20.02949715 183.99131775]
[4.32515526 182.21672058]
[-5.45918417 169.80534363]
[-3.51864696 154.12063599]
[8.99548149 144.46806335]
[24.65878868 146.57432556]
[36.43854523 137.28791809]
[39.83058548 130.49436951]
[48.86798477 127.87907410]
[61.00323868 119.06229401]
[73.13849640 110.24551392]
[71.33000183 102.13126373]
[71.91885376 93.83880615]
[74.85581207 86.06153107]
[79.89529419 79.44977570]
[72.56597137 66.36233521]
[65.23665619 53.27489090]
[57.90733719 40.18745041]
[50.57801819 27.10001183]
[43.24869919 14.01257133]
[35.91938019 0.92513168]
[28.59006119 -12.16230869]
[14.22754955 -20.07750130]
[14.17162228 -36.47655487]
[28.47981262 -44.48952484]
[42.43308258 -35.87335968]
[41.67750168 -19.49162674]
[49.00682068 -6.40418673]
[56.33613968 6.68325329]
[63.66545868 19.77069283]
[70.99477386 32.85813522]
[78.32409668 45.94557190]
[85.65341187 59.03301239]
[92.98273468 72.12045288]
[116.43839264 76.41419220]
[128.58514404 96.93395233]
[143.40046692 99.28047180]
[158.21578979 101.62699127]
[173.03112793 103.97350311]
[177.58839417 101.97187042]
[182.06539917 101.74201965]
[185.85816956 103.00125122]
[188.53919983 105.28384399]
[189.90541077 108.02466583]
[204.17124939 112.65991974]
[218.43710327 117.29517365]
[232.70295715 121.93042755]
[246.96879578 126.56568146]
[261.23464966 131.20094299]
[275.50048828 135.83619690]
[289.76632690 140.47145081]
[304.03219604 145.10670471]
[318.92190552 139.13377380]
[332.80364990 147.17596436]
[335.02853394 163.06399536]
[323.88980103 174.60992432]
[307.93215942 172.95671082]
[299.39694214 159.37254333]
[285.13107300 154.73728943]
[270.86523438 150.10203552]
[256.59939575 145.46678162]
[242.33354187 140.83152771]
[228.06768799 136.19627380]
[213.80184937 131.56101990]
[199.53599548 126.92576599]
[185.27015686 122.29051208]
[170.68460083 118.78882599]
[155.86927795 116.44231415]
[141.05395508 114.09579468]
[126.23862457 111.74927521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 16]
[8 15]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[45 79]
[46 78]
[47 77]
[48 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
