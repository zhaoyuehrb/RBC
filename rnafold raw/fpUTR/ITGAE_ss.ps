%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCUCCUGGCCUCCUGGCUGAGGGGAAGCUGAGUGGGCCACGGCCCAUGUGUCGCACUCGCCUCGGCUCCCACACAGCCGCCUCUGCUCCAGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[87.51573181 130.65299988]
[79.41184998 118.03018951]
[71.92017365 118.38349152]
[65.11032104 131.74858093]
[58.30046082 145.11369324]
[59.69860458 161.45312500]
[46.09436035 170.61045837]
[31.48261452 163.16539001]
[30.89467430 146.77679443]
[44.93536377 138.30383301]
[51.74522018 124.93872833]
[58.55508041 111.57363129]
[64.25432587 102.11534882]
[71.75289154 95.61238098]
[80.06150055 92.32833099]
[88.17546082 92.24426270]
[95.14859009 95.06716156]
[94.67742920 80.07456207]
[94.20626831 65.08196259]
[93.73510742 50.08936691]
[93.26394653 35.09676743]
[92.79278564 20.10416985]
[84.62582397 6.55384111]
[91.95953369 -6.41018534]
[91.25293732 -21.39353371]
[90.31108093 -36.36393356]
[89.36922455 -51.33433533]
[88.42736816 -66.30473328]
[84.70867920 -74.85044861]
[87.69857025 -81.75878143]
[87.22740936 -96.75138092]
[86.75624847 -111.74398041]
[86.28508759 -126.73657227]
[85.81392670 -141.72917175]
[85.34276581 -156.72177124]
[48.80812073 -175.10244751]
[41.99826431 -188.46754456]
[35.18840408 -201.83264160]
[28.37854767 -215.19773865]
[21.56868935 -228.56283569]
[7.52800035 -237.03579712]
[8.11594009 -253.42440796]
[22.72768784 -260.86947632]
[36.33192825 -251.71212769]
[34.93378830 -235.37269592]
[41.74364471 -222.00759888]
[48.55350494 -208.64250183]
[55.36336136 -195.27740479]
[62.17321777 -181.91230774]
[69.65841675 -181.44137573]
[62.98880768 -194.87701416]
[71.28952789 -207.37092590]
[86.25994873 -206.42935181]
[92.92980194 -192.99383545]
[84.62882233 -180.49951172]
[92.11402130 -180.02859497]
[100.54527283 -192.43479919]
[101.20603180 -208.82063293]
[115.85071564 -216.20068359]
[129.41412354 -206.98300171]
[127.94339752 -190.64993286]
[112.95147705 -184.00355530]
[104.52022552 -171.59733582]
[100.33536530 -157.19293213]
[100.80652618 -142.20033264]
[101.27768707 -127.20774078]
[101.74884796 -112.21514130]
[102.22000885 -97.22254181]
[102.69116974 -82.22994232]
[103.39776611 -67.24659729]
[104.33962250 -52.27619171]
[105.28147888 -37.30579376]
[106.22333527 -22.33539200]
[109.85009766 -15.73909092]
[106.95213318 -6.88134670]
[115.08538818 5.59661055]
[107.78537750 19.63300705]
[108.25653839 34.62560654]
[108.72770691 49.61820602]
[109.19886780 64.61080170]
[109.67002869 79.60340118]
[110.14118958 94.59600067]
[114.55179596 108.93289185]
[122.58919525 121.59781647]
[130.62660217 134.26272583]
[138.00222778 139.95989990]
[138.71028137 147.45411682]
[146.34590149 160.36524963]
[153.98152161 173.27638245]
[168.52653503 180.85099792]
[168.96881104 197.24417114]
[154.85336304 205.59202576]
[140.70097351 197.30699158]
[141.07040405 180.91200256]
[133.43478394 168.00086975]
[125.79915619 155.08973694]
[117.96167755 142.30014038]
[109.92427826 129.63522339]
[101.88687134 116.97029877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[24 75]
[25 73]
[26 72]
[27 71]
[28 70]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[56 63]
[57 62]
[83 99]
[84 98]
[85 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
