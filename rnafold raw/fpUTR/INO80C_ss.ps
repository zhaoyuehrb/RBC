%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCUUGGAGUCCAGGCCGGGUUUUCAAGCAUCAAGACGGAAGUAACAGCGGAAAGGAAGUUCCAAGGCCCGCGCUGGGAAAAAGGUGGGGGGACCAGGGGAAGACUCGGAGUGCG\
) } def
/len { sequence length } bind def

/coor [
[85.25768280 427.44580078]
[77.50614166 413.86465454]
[80.34876251 398.48760986]
[92.44334412 388.57522583]
[92.44334412 373.57522583]
[92.44334412 358.57522583]
[92.44334412 343.57522583]
[84.70604706 330.84796143]
[92.44334412 317.04779053]
[92.44334412 302.04779053]
[92.44334412 287.04779053]
[92.44334412 272.04779053]
[92.44334412 257.04779053]
[79.47602844 249.71879578]
[71.86763000 236.79718018]
[71.74779510 221.70240784]
[79.24883270 208.48759460]
[92.44334412 200.75117493]
[92.44334412 185.75117493]
[84.70604706 173.02391052]
[92.44334412 159.22373962]
[92.44334412 144.22373962]
[92.44334412 129.22373962]
[92.44334412 114.22373962]
[91.98886871 129.21685791]
[86.64775848 143.23371887]
[77.00949097 154.72735596]
[64.13780212 162.42929077]
[49.45327759 165.48945618]
[34.57657623 163.57014465]
[21.14957047 156.88317871]
[10.65413952 146.16656494]
[4.24861383 132.60302734]
[2.63994074 117.68954468]
[6.00566196 103.07202148]
[13.97431946 90.36373901]
[25.66644859 80.96723938]
[39.79164505 75.91958618]
[54.79097366 75.77784729]
[69.00904846 80.55769348]
[63.92046356 66.44718933]
[58.83187866 52.33668137]
[53.74329758 38.22617722]
[41.78326035 27.86914444]
[44.74415588 13.27180386]
[30.71885872 6.49472666]
[25.75932312 -7.88781977]
[32.30666351 -21.21703339]
[17.36647034 -25.40872192]
[7.76984739 -37.60234451]
[7.20689201 -53.10920715]
[15.89407158 -65.96659851]
[30.49098778 -71.23059082]
[45.38483047 -66.87707520]
[54.84860992 -54.58006668]
[55.24331284 -39.06801224]
[46.41716766 -26.30561638]
[59.96482468 -20.22313690]
[65.32637787 -5.98556805]
[58.85466003 8.18322086]
[70.45072937 17.53097725]
[67.85379791 33.13759613]
[72.94238281 47.24810028]
[78.03096771 61.35860443]
[83.11955261 75.46910858]
[89.94931030 78.56819916]
[96.14772034 64.90878296]
[109.80703735 71.10741425]
[103.60883331 84.76638031]
[110.43859100 87.86547089]
[124.40863800 82.40306091]
[138.37867737 76.94065857]
[148.41366577 64.70915222]
[163.08464050 67.28040314]
[177.05468750 61.81799698]
[191.02473450 56.35558701]
[204.99478149 50.89318085]
[208.78726196 35.84669876]
[220.72109985 25.92887497]
[236.20747375 24.95331764]
[249.29156494 33.29514694]
[254.94227600 47.74676132]
[250.98678589 62.75121689]
[238.94606018 72.53900146]
[223.45001221 73.34649658]
[210.45718384 64.86322021]
[196.48713684 70.32563019]
[182.51710510 75.78804016]
[168.54705811 81.25045013]
[159.51130676 93.09124756]
[143.84109497 90.91069794]
[129.87104797 96.37310791]
[115.90100098 101.83551788]
[107.44334412 114.22373962]
[107.44334412 129.22373962]
[107.44334412 144.22373962]
[107.44334412 159.22373962]
[115.18064880 173.02391052]
[107.44334412 185.75117493]
[107.44334412 200.75117493]
[120.63785553 208.48759460]
[128.13890076 221.70240784]
[128.01905823 236.79718018]
[120.41066742 249.71879578]
[107.44334412 257.04779053]
[107.44334412 272.04779053]
[107.44334412 287.04779053]
[107.44334412 302.04779053]
[107.44334412 317.04779053]
[115.18064880 330.84796143]
[107.44334412 343.57522583]
[107.44334412 358.57522583]
[107.44334412 373.57522583]
[107.44334412 388.57522583]
[119.53792572 398.48760986]
[122.38054657 413.86465454]
[114.62900543 427.44580078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[6 112]
[7 111]
[9 109]
[10 108]
[11 107]
[12 106]
[13 105]
[18 100]
[19 99]
[21 97]
[22 96]
[23 95]
[24 94]
[40 65]
[41 64]
[42 63]
[43 62]
[45 60]
[48 57]
[70 93]
[71 92]
[72 91]
[74 89]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
