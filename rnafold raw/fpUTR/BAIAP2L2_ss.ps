%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCCUCCAUCUCCAGGUCCCUCUCCGAGGCUUCCUCGCUGCCAGCUGAGUCGUGGGCACCUGAGGGACUACCUACCACUGCUCCCGGCUGUGCCAUCGCCACCAGCUCCCAGCCUCCUGCUCAGACCCGGGACAGCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[95.49660492 348.41238403]
[99.42076874 333.39971924]
[111.44104004 323.58682251]
[110.46674347 308.61849976]
[109.49245453 293.65017700]
[100.12876129 289.14288330]
[93.45924377 281.06790161]
[90.76065063 270.86434937]
[92.59404755 260.38800049]
[98.68976593 251.57382202]
[107.98466492 246.07844543]
[107.98466492 231.07844543]
[104.81586456 224.33972168]
[108.15068054 215.75434875]
[108.47564697 200.75787354]
[101.01589203 187.86596680]
[109.05034637 174.23666382]
[109.37531281 159.24017334]
[109.70027924 144.24369812]
[110.02525330 129.24722290]
[104.41556549 124.26912689]
[103.62681580 139.24836731]
[91.42388153 147.97123718]
[76.99562073 143.86935425]
[71.20658875 130.03147888]
[78.41593933 116.87757111]
[93.19619751 114.31293488]
[87.58650970 109.33483887]
[72.73501587 111.44030762]
[57.88351822 113.54578400]
[43.03202057 115.65126038]
[28.19839287 123.86100006]
[16.20313644 111.87975311]
[24.39552879 97.03653717]
[40.92654419 100.79975891]
[55.77804184 98.69429016]
[70.62953949 96.58881378]
[85.48104095 94.48333740]
[96.37097168 84.16784668]
[99.27740479 69.45211792]
[102.18383026 54.73638916]
[105.09026337 40.02066040]
[96.55935669 26.98757362]
[99.71651459 12.10513592]
[112.19414520 4.05253649]
[115.10057831 -10.66319180]
[118.00701141 -25.37891960]
[120.91343689 -40.09465027]
[123.81987000 -54.81037521]
[122.40862274 -63.91190720]
[126.95196533 -69.81188202]
[130.17651367 -84.46118927]
[125.58673859 -99.60201263]
[135.87913513 -110.36843872]
[139.10369873 -125.01774597]
[142.32824707 -139.66705322]
[145.23468018 -154.38278198]
[147.82162476 -169.15802002]
[150.40855408 -183.93325806]
[152.99549866 -198.70851135]
[155.58244324 -213.48374939]
[143.91987610 -223.37980652]
[138.81028748 -237.69024658]
[141.53161621 -252.53817749]
[151.25450134 -263.95401001]
[165.29150391 -268.93679810]
[167.87844849 -283.71203613]
[170.46537781 -298.48730469]
[173.05232239 -313.26254272]
[175.47904968 -328.06494141]
[163.11915588 -337.09219360]
[156.38061523 -350.83450317]
[156.81187439 -366.13391113]
[164.31384277 -379.47479248]
[177.16262817 -387.79147339]
[192.40568542 -389.17285156]
[206.54023743 -383.30151367]
[216.31829834 -371.52661133]
[219.49291992 -356.55395508]
[215.33460999 -341.82415771]
[204.79891968 -330.72201538]
[190.30686951 -325.79870605]
[192.42118835 -318.65856934]
[187.82756042 -310.67559814]
[185.24061584 -295.90036011]
[182.65368652 -281.12512207]
[180.06674194 -266.34988403]
[191.57579041 -256.89431763]
[196.84167480 -242.85414124]
[194.35643005 -227.96488953]
[184.68872070 -216.24174500]
[170.35768127 -210.89680481]
[167.77073669 -196.12156677]
[165.18380737 -181.34632874]
[162.59686279 -166.57109070]
[160.00991821 -151.79583740]
[162.01699829 -147.38783264]
[161.22357178 -141.66598511]
[156.97755432 -136.44250488]
[153.75300598 -121.79319000]
[150.52844238 -107.14388275]
[155.34886169 -93.05087280]
[144.82582092 -81.23663330]
[141.60127258 -66.58732605]
[138.53559875 -51.90394592]
[135.62916565 -37.18821716]
[132.72273254 -22.47249031]
[129.81629944 -7.75676155]
[126.90987396 6.95896721]
[135.38916016 19.15066147]
[132.65126038 34.11590576]
[119.80599213 42.92708969]
[116.89955902 57.64281845]
[113.99312592 72.35855103]
[111.08670044 87.07427979]
[119.75212097 74.83048248]
[132.82034302 67.46694183]
[147.78216553 66.39749908]
[161.76483154 71.82749176]
[172.08360291 82.71432495]
[176.75717163 96.96766663]
[174.88819885 111.85077667]
[166.83555603 124.50600433]
[154.14537048 132.50346375]
[139.25427246 134.30760193]
[125.02172852 129.57218933]
[124.69676208 144.56866455]
[124.37179565 159.56513977]
[124.04682922 174.56163025]
[131.48333740 188.52618408]
[123.47212219 201.08283997]
[123.14715576 216.07933044]
[122.98466492 231.07844543]
[122.98466492 246.07844543]
[137.92695618 259.40567017]
[138.36450195 279.12081909]
[124.46077728 292.67587280]
[125.43507385 307.64419556]
[126.40936279 322.61251831]
[139.60026550 330.78442383]
[145.43742371 345.16171265]
[141.67634583 360.21609497]
[129.76324463 370.15881348]
[114.27893066 371.16668701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 139]
[4 138]
[5 137]
[11 134]
[12 133]
[14 132]
[15 131]
[17 129]
[18 128]
[19 127]
[20 126]
[28 38]
[29 37]
[30 36]
[31 35]
[39 115]
[40 114]
[41 113]
[42 112]
[45 109]
[46 108]
[47 107]
[48 106]
[49 105]
[51 104]
[52 103]
[54 101]
[55 100]
[56 99]
[57 96]
[58 95]
[59 94]
[60 93]
[61 92]
[66 87]
[67 86]
[68 85]
[69 84]
[70 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
