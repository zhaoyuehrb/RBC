%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCGCUCUGUGACCCACCUCUGAAUCCCACAAAACUGCACCAGAGAGCCGGGCGCAAGAUGAACCAGCACCCUGUCGGCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[100.43039703 199.75759888]
[98.82697296 184.84353638]
[94.89237213 178.38417053]
[97.44227600 169.36990356]
[96.37218475 154.40812683]
[95.30210114 139.44633484]
[94.23200989 124.48455811]
[76.27807617 108.36861420]
[80.14550018 84.55453491]
[71.59066010 72.23322296]
[63.03582382 59.91191483]
[54.26242447 47.74526215]
[45.27325821 35.73714066]
[36.28409195 23.72902298]
[28.45391846 18.58633614]
[27.19750023 11.12804508]
[18.64266014 -1.19326651]
[10.08782101 -13.51457787]
[-6.68949413 -20.84262657]
[-7.71828175 -38.26327896]
[-16.92034721 -50.10903931]
[-26.33238220 -61.78866196]
[-35.74441910 -73.46828461]
[-45.15645218 -85.14791107]
[-54.56848907 -96.82752991]
[-68.69801331 -91.42273712]
[-83.80625916 -90.65075684]
[-98.41308594 -94.58722687]
[-111.08746338 -102.84648895]
[-120.58767700 -114.61938477]
[-125.98300171 -128.75253296]
[-126.74485779 -143.86129761]
[-122.79859924 -158.46548462]
[-114.53084564 -171.13432312]
[-102.75158691 -180.62664795]
[-88.61483765 -186.01249695]
[-73.50556946 -186.76422119]
[-58.90402985 -182.80818176]
[-46.24073410 -174.53193665]
[-36.75630188 -162.74632263]
[-31.37992287 -148.60597229]
[-30.63831711 -133.49620056]
[-34.60414124 -118.89731598]
[-42.88886642 -106.23956299]
[-33.47682953 -94.55994415]
[-24.06479454 -82.88031769]
[-14.65275955 -71.20069885]
[-5.24072504 -59.52107239]
[1.56147909 -56.21430588]
[4.28983688 -47.25244522]
[16.34775162 -45.15742111]
[23.91354561 -35.02873993]
[22.40913200 -22.06941795]
[30.96397209 -9.74810600]
[39.51881027 2.57320547]
[48.29221344 14.73985863]
[57.28137589 26.74797821]
[66.27053833 38.75609589]
[72.95038605 42.30354309]
[75.35713196 51.35707474]
[83.91197205 63.67838669]
[92.46681213 75.99969482]
[100.88624573 74.86083221]
[109.20458221 76.58976746]
[116.47288513 80.98928070]
[121.86199951 87.55747986]
[124.75716400 95.54509735]
[124.82809448 104.04090881]
[138.24147034 110.75516510]
[151.65486145 117.46942902]
[167.98390198 115.95465851]
[177.23812866 129.49316406]
[169.89758301 144.15769958]
[153.51359558 144.86264038]
[144.94059753 130.88281250]
[131.52722168 124.16854858]
[118.11383820 117.45429230]
[113.97525024 120.91544342]
[109.19379425 123.41447449]
[110.26388550 138.37625122]
[111.33396912 153.33804321]
[112.40406036 168.29981995]
[113.74102783 183.24011230]
[115.34445190 198.15417480]
[125.44690704 211.07208252]
[119.06079102 226.17671204]
[102.75560760 227.92970276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[4 82]
[5 81]
[6 80]
[7 79]
[9 62]
[10 61]
[11 60]
[12 58]
[13 57]
[14 56]
[16 55]
[17 54]
[18 53]
[20 50]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
