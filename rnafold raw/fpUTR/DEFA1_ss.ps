%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCUCCUUGCUAUAGAAGACCUGGGACAGAGGACUGCUGUCUGCCCUCUCUGGUCACCCUGCCUAGCUAGAGGAUCUGUGACCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[162.30426025 353.15386963]
[162.30426025 338.15386963]
[162.30426025 323.15386963]
[162.30426025 308.15386963]
[162.30426025 293.15386963]
[157.45927429 285.43942261]
[159.58505249 275.40377808]
[155.09460449 261.09170532]
[150.60415649 246.77961731]
[146.11370850 232.46751404]
[141.62326050 218.15542603]
[136.65199280 204.00317383]
[131.20559692 190.02688599]
[125.75918579 176.05059814]
[120.31277466 162.07431030]
[114.39743805 148.28993225]
[108.01992035 134.71322632]
[101.64240265 121.13650513]
[86.06362152 115.97580719]
[78.83617401 101.24166107]
[84.29109192 85.76345062]
[77.45867157 72.40987396]
[70.62625122 59.05629730]
[63.79382706 45.70272064]
[50.61987686 36.94157410]
[51.71071243 22.08696747]
[44.87829208 8.73339176]
[38.04586792 -4.62018538]
[31.21344757 -17.97376251]
[16.44361687 -22.92248535]
[9.70479679 -36.56224060]
[14.51366997 -50.61252213]
[1.33972132 -59.37366486]
[2.43055749 -74.22827148]
[-4.40186453 -87.58184814]
[-11.23428631 -100.93542480]
[-18.06670761 -114.28900146]
[-32.12168884 -122.73823547]
[-31.56142998 -139.12780762]
[-16.96227837 -146.59753418]
[-3.34258962 -137.46319580]
[-4.71313095 -121.12142181]
[2.11929059 -107.76784515]
[8.95171261 -94.41426849]
[15.78413391 -81.06069183]
[28.46938324 -73.25468445]
[27.86724663 -57.44494247]
[42.07542038 -53.12482834]
[49.19469452 -39.67973328]
[44.56702423 -24.80618477]
[51.39944458 -11.45260715]
[58.23186874 1.90096962]
[65.06429291 15.25454617]
[77.74953461 23.06055260]
[77.14739990 38.87029648]
[83.97982788 52.22387314]
[90.81224823 65.57745361]
[97.64466858 78.93103027]
[110.19581604 81.41251373]
[119.03365326 90.66355133]
[120.93945312 103.31491089]
[115.21911621 114.75897980]
[121.59663391 128.33570862]
[127.97415924 141.91241455]
[133.43974304 146.20382690]
[135.45053101 151.79966736]
[134.28906250 156.62789917]
[139.73547363 170.60418701]
[145.18188477 184.58047485]
[150.62829590 198.55676270]
[155.79168701 203.20735168]
[157.42012024 208.92619324]
[155.93534851 213.66497803]
[160.42579651 227.97708130]
[164.91624451 242.28916931]
[169.40669250 256.60125732]
[173.89714050 270.91333008]
[180.83070374 257.61199951]
[193.30763245 249.28576660]
[208.25135803 247.98770142]
[221.97708130 254.03788757]
[231.10029602 265.94448853]
[233.37141418 280.77154541]
[228.23042297 294.86303711]
[216.94497681 304.74429321]
[202.29786682 307.97875977]
[187.90074158 303.76892090]
[177.30426025 293.15386963]
[177.30426025 308.15386963]
[177.30426025 323.15386963]
[177.30426025 338.15386963]
[177.30426025 353.15386963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 70]
[13 69]
[14 68]
[15 67]
[16 64]
[17 63]
[18 62]
[21 58]
[22 57]
[23 56]
[24 55]
[26 53]
[27 52]
[28 51]
[29 50]
[32 47]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
