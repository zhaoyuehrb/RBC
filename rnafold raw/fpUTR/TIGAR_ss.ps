%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGGUGUGGGGGAGGUAGCCCGCAGUGCAGGGGCAGCGCGGCGCGGGGCCACCGACGGGACGCGGCUCCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[144.33415222 353.72055054]
[140.83247375 339.13500977]
[137.33079529 324.54946899]
[132.58139038 318.62481689]
[133.98992920 309.32263184]
[131.06356812 294.61087036]
[120.99197388 283.63760376]
[125.88832855 268.59313965]
[122.96196747 253.88136292]
[120.03561401 239.16957092]
[117.10926056 224.45779419]
[103.52815247 218.40043640]
[96.02935791 205.35314941]
[97.67034912 190.21508789]
[108.03018951 178.81422424]
[95.54166412 170.77851868]
[92.36434937 155.90037537]
[100.87760162 142.85574341]
[97.95124817 128.14396667]
[95.02489471 113.43218994]
[85.95128632 102.79446411]
[90.26332855 89.49416351]
[87.33696747 74.78238678]
[84.41061401 60.07060623]
[81.48426056 45.35882568]
[76.62316132 37.30376816]
[78.74377441 30.01259041]
[74.20265961 21.77289391]
[76.60788727 14.57059479]
[74.84482574 -0.32543209]
[73.08176422 -15.22145939]
[71.31870270 -30.11748505]
[62.01299667 -42.91257858]
[68.20073700 -56.46105576]
[58.89503098 -69.25614929]
[65.08277130 -82.80461884]
[54.84255219 -95.61360168]
[61.06652451 -110.78575134]
[77.35200500 -112.71326447]
[86.94587708 -99.41328430]
[79.97879791 -84.56768036]
[89.15839386 -72.83805084]
[83.09676361 -58.22411346]
[92.27635956 -46.49448395]
[86.21472931 -31.88054657]
[87.97779083 -16.98451996]
[89.74085236 -2.08849311]
[91.50391388 12.80753422]
[93.55909729 27.66607475]
[96.19603729 42.43247223]
[99.12239838 57.14425278]
[102.04875183 71.85603333]
[104.97510529 86.56781006]
[114.04871368 97.20553589]
[109.73667145 110.50583649]
[112.66303253 125.21761322]
[115.58938599 139.92939758]
[128.44656372 148.72317505]
[131.20472717 163.68469238]
[122.74196625 175.88786316]
[136.67613220 182.45635986]
[143.98530579 195.81411743]
[142.05029297 210.73791504]
[131.82104492 221.53144836]
[134.74739075 236.24322510]
[137.67375183 250.95500183]
[140.60009766 265.66677856]
[150.88101196 277.69232178]
[145.77536011 291.68450928]
[148.70170593 306.39627075]
[151.91635132 321.04776001]
[155.41802979 335.63333130]
[158.91970825 350.21887207]
[172.99411011 357.03393555]
[179.34788513 371.32250977]
[174.98097229 386.33798218]
[161.95530701 394.99047852]
[146.42118835 393.19458008]
[135.71336365 381.79824829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[5 70]
[6 69]
[8 67]
[9 66]
[10 65]
[11 64]
[15 60]
[18 57]
[19 56]
[20 55]
[22 53]
[23 52]
[24 51]
[25 50]
[27 49]
[29 48]
[30 47]
[31 46]
[32 45]
[34 43]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
