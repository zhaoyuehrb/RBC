%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGAGGAGACCCAGGGGUCCCAGAGCUGGGCUGGCGGGAGGCGUAAUCCGGCGGGGUGAGGGUUGAUCGAAGAGCCCCGCGCGCAGCUGCCGCUCACAGCCCCUUCCCGAGUGCAGAGCGGGCAGAGAAGUCCACUGCUUUUAAGGCCCUGCACUGAAA\
) } def
/len { sequence length } bind def

/coor [
[98.50028229 115.92876434]
[90.25764465 128.46107483]
[82.01500702 140.99339294]
[87.32862091 155.45271301]
[83.15800476 170.09713745]
[71.30413818 179.36805725]
[56.44207764 179.87515259]
[48.19944382 192.40747070]
[46.08168793 201.34480286]
[39.67348862 205.10073853]
[31.18938637 217.47087097]
[22.70528221 229.84098816]
[14.22117996 242.21112061]
[13.49051952 258.59399414]
[-1.18551850 265.91149902]
[-14.70948505 256.63601685]
[-13.16908360 240.30937195]
[1.85105467 233.72702026]
[10.33515739 221.35688782]
[18.81926155 208.98677063]
[27.30336380 196.61663818]
[35.66712570 184.16484070]
[43.90975952 171.63252258]
[38.48882294 157.78507996]
[42.30644608 143.22865295]
[54.10130692 133.59877014]
[69.48269653 132.75076294]
[77.72532654 120.21844482]
[85.96796417 107.68612671]
[86.25883484 92.68894958]
[78.50833893 79.84644318]
[70.75785065 67.00394440]
[63.00736237 54.16143799]
[55.25687027 41.31893539]
[47.50637817 28.47643089]
[39.38564682 15.86478138]
[30.90154457 3.49465656]
[22.41744041 -8.87546825]
[13.93333817 -21.24559402]
[-0.25289282 -28.24998093]
[-1.07076716 -43.12211227]
[-9.55487061 -55.49223709]
[-18.27725220 -67.69551849]
[-27.23463058 -79.72737122]
[-36.19200897 -91.75921631]
[-45.14938736 -103.79106140]
[-48.70755768 -89.21919250]
[-61.43331909 -81.27847290]
[-76.08617401 -84.48688507]
[-84.32917023 -97.01896667]
[-81.47234344 -111.74440765]
[-69.14112854 -120.28496552]
[-54.35055542 -117.78076172]
[-61.85055542 -130.77113342]
[-69.35055542 -143.76152039]
[-76.85055542 -156.75190735]
[-84.35055542 -169.74227905]
[-91.85055542 -182.73266602]
[-99.35055542 -195.72305298]
[-118.97217560 -199.82498169]
[-129.16336060 -216.73382568]
[-123.79312897 -235.41670227]
[-132.03576660 -247.94902039]
[-147.39338684 -252.58830261]
[-153.20748901 -267.54074097]
[-145.01802063 -281.33612061]
[-129.10720825 -283.39175415]
[-117.68048096 -272.13079834]
[-119.50344849 -256.19165039]
[-111.26081085 -243.65933228]
[-100.93562317 -244.36750793]
[-91.18140411 -240.67292786]
[-83.80248260 -233.18672180]
[-80.19384003 -223.22782898]
[-81.07772064 -212.59092712]
[-86.36017609 -203.22305298]
[-78.86017609 -190.23266602]
[-71.36017609 -177.24227905]
[-63.86017609 -164.25190735]
[-56.36017609 -151.26152039]
[-48.86017609 -138.27113342]
[-41.36017609 -125.28076172]
[-33.11753845 -112.74844360]
[-24.16016197 -100.71659088]
[-15.20278263 -88.68474579]
[-6.24540329 -76.65290070]
[-1.68724048 -75.08371735]
[1.91261613 -70.60630035]
[2.81525469 -63.97634125]
[11.29935837 -51.60621643]
[24.87874794 -45.48662567]
[26.30346298 -29.72969627]
[34.78756714 -17.35957146]
[43.27166748 -4.98944664]
[51.75577164 7.38067865]
[55.18700409 8.37523174]
[58.29458618 11.10992050]
[60.25274277 15.40828609]
[60.34888458 20.72594070]
[68.09937286 33.56844330]
[75.84986115 46.41094589]
[83.60035706 59.25345230]
[91.35084534 72.09595490]
[99.10133362 84.93846130]
[96.53737640 70.15921021]
[102.97890472 56.61275101]
[116.06064606 49.27325821]
[130.97904968 50.83575439]
[142.25614929 60.72649765]
[145.75108337 75.31366730]
[140.18051147 89.24092865]
[127.58913422 97.39449310]
[140.72250366 104.64118195]
[153.85588074 111.88787079]
[166.98925781 119.13455963]
[180.12263489 126.38124847]
[193.25601196 133.62794495]
[206.38937378 140.87463379]
[222.21022034 140.76721191]
[229.61570740 153.69036865]
[242.74906921 160.93705750]
[256.21820068 167.53875732]
[269.99145508 173.47994995]
[283.76467896 179.42115784]
[297.53793335 185.36235046]
[311.31118774 191.30354309]
[325.08441162 197.24473572]
[340.82055664 195.60620117]
[349.44235229 207.75172424]
[364.82278442 203.18864441]
[377.89691162 212.48632812]
[378.63537598 228.51237488]
[366.47167969 238.97297668]
[350.73678589 235.84365845]
[343.50115967 221.52496338]
[328.75018311 223.58847046]
[319.14321899 211.01799011]
[305.36996460 205.07678223]
[291.59674072 199.13558960]
[277.82348633 193.19439697]
[264.05026245 187.25320435]
[250.27700806 181.31199646]
[253.02610779 196.05793762]
[243.36251831 207.53028870]
[228.36390686 207.32669067]
[219.01528931 195.59623718]
[222.16365051 180.93035889]
[235.50238037 174.07043457]
[222.36901855 166.82374573]
[207.48754883 167.44949341]
[199.14268494 154.00799561]
[186.00930786 146.76130676]
[172.87594604 139.51461792]
[159.74256897 132.26792908]
[146.60919189 125.02124786]
[133.47581482 117.77455902]
[120.34244537 110.52787018]
[130.54466248 121.52399445]
[129.30732727 136.47288513]
[117.43603516 145.64196777]
[102.65962982 143.06169128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[7 23]
[8 22]
[10 21]
[11 20]
[12 19]
[13 18]
[30 104]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[36 95]
[37 94]
[38 93]
[39 92]
[41 90]
[42 89]
[43 86]
[44 85]
[45 84]
[46 83]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[62 70]
[63 69]
[112 157]
[113 156]
[114 155]
[115 154]
[116 153]
[117 152]
[118 151]
[120 149]
[121 148]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
