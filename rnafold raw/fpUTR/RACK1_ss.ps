%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUUUCACUGCAAGGCGGCGGCAGGAGAGGUUGUGGUGCUAGUUUCUCUAAGCCAUCCAGUGCCAUCCUCGUCGCUGCAGCGACACACGCUCUCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[30.34183693 301.26440430]
[32.00431061 316.31481934]
[28.68741035 331.08901978]
[20.75093269 343.98440552]
[9.05576515 353.60220337]
[-5.12948895 358.89910889]
[-20.26611710 359.30056763]
[-34.71221542 354.76306152]
[-46.90077209 345.77874756]
[-55.50967026 333.32220459]
[-59.60507965 318.74459839]
[-58.74275589 303.62722778]
[-53.01624298 289.60989380]
[-43.04671097 278.21310425]
[-29.91557503 270.67306519]
[-15.04720688 267.80770874]
[-0.05441300 269.92779541]
[6.73581696 256.55273438]
[13.52604675 243.17764282]
[20.31627655 229.80256653]
[27.10650635 216.42749023]
[33.89673615 203.05239868]
[40.68696594 189.67732239]
[47.47719574 176.30224609]
[54.26742554 162.92716980]
[53.12969589 148.07608032]
[66.27592468 139.27337646]
[73.06615448 125.89830017]
[79.85638428 112.52322388]
[86.67929077 84.39556885]
[84.92169189 69.49890137]
[83.16410065 54.60222626]
[81.40650940 39.70555115]
[77.62246704 33.97253799]
[77.45269775 28.09104347]
[80.00951385 23.88642311]
[79.12919617 8.91227722]
[78.24888611 -6.06186867]
[77.36856842 -21.03601456]
[76.48825836 -36.01016235]
[75.60794067 -50.98430634]
[74.72762299 -65.95845032]
[73.84731293 -80.93260193]
[65.31344604 -94.25489807]
[72.29048157 -107.41432190]
[57.91802597 -112.36416626]
[46.53714752 -122.44107056]
[39.88334656 -136.10838318]
[38.97127914 -151.28193665]
[43.94002533 -165.64785767]
[54.03189468 -177.01547241]
[67.70794678 -183.65129089]
[82.88268280 -184.54339600]
[97.24206543 -179.55575562]
[108.59638977 -169.44894409]
[115.21421051 -155.76417542]
[116.08635712 -140.58827209]
[111.07982635 -126.23547363]
[100.95808411 -114.89444733]
[87.26462555 -108.29463196]
[95.73551941 -96.04338074]
[88.82145691 -81.81291199]
[89.70177460 -66.83876801]
[90.58208466 -51.86462021]
[91.46240234 -36.89047623]
[92.34271240 -21.91632843]
[93.22303009 -6.94218302]
[94.10334015 8.03196335]
[94.98365784 23.00610924]
[96.30317688 37.94795990]
[98.06077576 52.84463120]
[99.81836700 67.74130249]
[101.57596588 82.63797760]
[112.71330261 92.68584442]
[127.71169281 92.90603638]
[142.71006775 93.12623596]
[157.70845032 93.34643555]
[172.70684814 93.56662750]
[186.75633240 85.10826111]
[200.97329712 93.28197479]
[200.73257446 109.67935181]
[186.28176880 117.43218231]
[172.48664856 108.56501007]
[157.48826599 108.34481812]
[142.48988342 108.12461853]
[127.49149323 107.90441895]
[112.49311066 107.68422699]
[126.34697723 113.43491364]
[132.76823425 126.99099731]
[128.44155884 141.35343933]
[115.60084534 149.10690308]
[100.87577057 146.24821472]
[91.86891937 134.25335693]
[93.23146057 119.31345367]
[86.44123077 132.68853760]
[79.65100098 146.06361389]
[80.30304718 161.87138367]
[67.64250183 169.71739197]
[60.85227585 183.09246826]
[54.06204605 196.46755981]
[47.27181625 209.84263611]
[40.48158646 223.21771240]
[33.69135666 236.59278870]
[26.90112686 249.96788025]
[20.11089706 263.34295654]
[13.32066727 276.71804810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 106]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[25 98]
[27 96]
[28 95]
[29 94]
[30 73]
[31 72]
[32 71]
[33 70]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[45 60]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
