%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACCCGGGUUGAGGCAGGAGGCGGCUAGACCGGUGGCGGCGGCAUCUGGAGUAGCACUGAGAUCUUCCGGUGGCGGGAACUGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[100.22712708 386.44680786]
[95.08167267 372.18847656]
[95.12626648 357.03018188]
[100.35552216 342.80236816]
[110.13798523 331.22311401]
[123.29238129 323.69067383]
[120.71599579 308.91357422]
[118.13961029 294.13650513]
[115.56322479 279.35940552]
[101.94176483 276.19442749]
[90.54272461 268.01858521]
[83.13150024 256.05691528]
[80.87163544 242.12390137]
[84.14228058 228.34814453]
[92.47505188 216.84729004]
[104.62080383 209.40245056]
[102.55599976 194.54524231]
[98.42874146 188.21897888]
[100.68553925 179.14056396]
[99.13477325 164.22094727]
[97.58401489 149.30131531]
[96.03325653 134.38169861]
[79.46757507 127.86135864]
[68.33458710 113.96916199]
[65.57997894 96.38084412]
[71.93260956 79.75012207]
[85.71161652 68.47734070]
[82.62671661 53.79798889]
[79.54181671 39.11863327]
[76.45692444 24.43928146]
[63.50561905 15.78471661]
[60.58620453 0.85381949]
[68.91682434 -11.43993378]
[65.83192444 -26.11928558]
[62.74702835 -40.79864120]
[59.66212845 -55.47799301]
[46.71082687 -64.13256073]
[43.79141235 -79.06345367]
[52.12203217 -91.35720825]
[49.03713608 -106.03656006]
[37.69506454 -117.88094330]
[42.54072189 -133.54783630]
[58.58931351 -136.92048645]
[69.33142090 -124.52939606]
[63.71648788 -109.12145996]
[66.80138397 -94.44210815]
[79.37586975 -86.54161072]
[82.71350861 -71.69860077]
[74.34148407 -58.56288910]
[77.42638397 -43.88353729]
[80.51127625 -29.20418549]
[83.59617615 -14.52483177]
[96.17066193 -6.62433338]
[99.50830078 8.21867275]
[91.13627625 21.35438347]
[94.22117615 36.03373718]
[97.30606842 50.71308899]
[100.39096832 65.39244080]
[112.26767731 67.63736725]
[122.64813232 73.82944489]
[130.26628113 83.21344757]
[134.19296265 94.64485168]
[133.94924927 106.72940826]
[129.56486511 117.99319458]
[121.57455444 127.06241608]
[110.95288086 132.83093262]
[112.50363922 147.75056458]
[114.05439758 162.67018127]
[115.60515594 177.58979797]
[117.41320801 192.48043823]
[119.47801208 207.33764648]
[134.92034912 212.13055420]
[146.71989441 223.10072327]
[152.58143616 238.04592896]
[151.39439392 253.99765015]
[143.44302368 267.81060791]
[130.34030151 276.78302002]
[132.91668701 291.56011963]
[135.49307251 306.33718872]
[138.06945801 321.11428833]
[152.99679565 323.75067139]
[166.12063599 331.33621216]
[175.85624695 342.95492554]
[181.02796936 357.20373535]
[181.01130676 372.36209106]
[175.80827332 386.59951782]
[166.04716492 398.19677734]
[152.90667725 405.75344849]
[137.97358704 408.35705566]
[123.05114746 405.69314575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 80]
[7 79]
[8 78]
[9 77]
[16 71]
[17 70]
[19 69]
[20 68]
[21 67]
[22 66]
[27 58]
[28 57]
[29 56]
[30 55]
[33 52]
[34 51]
[35 50]
[36 49]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
