%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAGCACGAGGCAGAGGAACGGAGACAGGUCCUCGGAAGCCUCUUUCCAGAAAAUCUAAUUUCAUCAUUGAGAAAUCUUCUGUCUUAAACAGCCUCCACCACCGCCAUAAAUUUACAUAUUCUAUAUGCCGCCGGAACGGAGUGGGCCCUAUUUGCAUA\
) } def
/len { sequence length } bind def

/coor [
[100.66815186 221.34608459]
[85.33493042 220.45851135]
[72.50856781 212.00984192]
[65.63930511 198.27270508]
[66.57492828 182.94233704]
[75.06376648 170.14251709]
[88.82236481 163.31634521]
[89.68919373 148.34141541]
[90.55601501 133.36648560]
[70.95975494 118.95192719]
[65.65509796 95.21054077]
[51.59855652 89.97473145]
[37.54201889 84.73892975]
[23.48547554 79.50312042]
[9.42893600 74.26731873]
[-4.62760496 69.03150940]
[-18.68414497 63.79570389]
[-32.74068451 58.55989838]
[-46.79722595 53.32409286]
[-60.85376740 48.08828735]
[-74.91030884 42.85248184]
[-90.17400360 56.52007294]
[-113.16006470 56.22141266]
[-131.76527405 38.79284286]
[-146.64772034 40.66710663]
[-161.53015137 42.54136658]
[-176.41259766 44.41563034]
[-191.29504395 46.28989029]
[-204.02027893 55.69089508]
[-217.61459351 49.60451508]
[-232.49703979 51.47877884]
[-247.37948608 53.35303879]
[-262.26193237 55.22730255]
[-269.62429810 68.88654327]
[-283.62387085 75.57924652]
[-298.87747192 72.73192596]
[-309.51980591 61.43943405]
[-311.45867920 46.04396439]
[-303.94854736 32.46539307]
[-289.87719727 25.92495537]
[-274.65539551 28.93758202]
[-264.13619995 40.34485626]
[-249.25373840 38.47059631]
[-234.37129211 36.59633255]
[-219.48886108 34.72207260]
[-207.82810974 25.45512772]
[-193.16931152 31.40744781]
[-178.28686523 29.53318596]
[-163.40441895 27.65892410]
[-148.52197266 25.78466225]
[-133.63952637 23.91040039]
[-130.10006714 17.29812050]
[-144.05921936 11.80791664]
[-158.01835632 6.31771231]
[-173.01356506 6.69656277]
[-183.35864258 -4.16527605]
[-182.24986267 -19.12424088]
[-170.41645813 -28.34218979]
[-155.64097595 -25.75670433]
[-147.64096069 -13.06892395]
[-135.33105469 -4.49768066]
[-123.02115631 4.07356262]
[-119.48169708 -2.53871608]
[-126.17538452 -15.96237278]
[-132.86906433 -29.38603020]
[-139.56275940 -42.80968857]
[-146.25643921 -56.23334503]
[-160.22311401 -64.82775879]
[-159.49305725 -81.21064758]
[-144.81729126 -88.52870178]
[-131.29298401 -79.25373077]
[-132.83277893 -62.92702866]
[-126.13909912 -49.50337219]
[-119.44541168 -36.07971573]
[-112.75172424 -22.65605927]
[-106.05803680 -9.23240185]
[-84.01909637 -4.64731264]
[-70.72156525 10.70664597]
[-69.67449951 28.79594040]
[-55.61796188 34.03174591]
[-41.56142044 39.26755142]
[-27.50488091 44.50335693]
[-13.44833946 49.73916245]
[0.60820091 54.97496796]
[14.66474152 60.21077728]
[28.72128296 65.44657898]
[42.77782440 70.68238831]
[56.83436203 75.91819000]
[70.89090729 81.15399933]
[80.33049774 71.44090271]
[92.77079773 66.08466339]
[106.31394958 65.90241241]
[118.89387512 70.92195129]
[128.59141541 80.37751770]
[133.92718506 92.82661438]
[148.92648315 92.97116089]
[163.92579651 93.11570740]
[178.92509460 93.26026154]
[192.79917908 85.65630341]
[205.45130920 93.51589203]
[219.32539368 85.91194153]
[231.97752380 93.77153015]
[246.97682190 93.91607666]
[264.01345825 83.19934845]
[280.26345825 93.62757874]
[295.25717163 93.19397736]
[310.25091553 92.76038361]
[325.23977661 92.18231964]
[340.20565796 91.17122650]
[355.14926147 89.87188721]
[370.09289551 88.57255554]
[385.03649902 87.27321625]
[389.24459839 72.69047546]
[398.43954468 60.61498642]
[411.37780762 52.67985916]
[426.30953979 49.95825195]
[441.21542358 52.81824493]
[454.07949829 60.87304306]
[463.16204834 73.03330231]
[467.23471069 87.65444946]
[465.74667358 102.75908661]
[458.89923096 116.30445099]
[447.61840820 126.45863342]
[433.42984009 131.84835815]
[418.25244141 131.74472046]
[404.13879395 126.16172791]
[392.99768066 115.85444641]
[386.33584595 102.21683502]
[371.39224243 103.51617432]
[356.44860840 104.81550598]
[341.50500488 106.11484528]
[337.77557373 109.16758728]
[332.07626343 109.87818909]
[325.96224976 107.16490936]
[319.40118408 110.64482117]
[310.68450928 107.75411987]
[295.69076538 108.18771362]
[280.69705200 108.62130737]
[274.33779907 116.69421387]
[264.36788940 119.97847748]
[254.03085327 117.14974976]
[246.83227539 108.91538239]
[231.83296204 108.77083588]
[219.03172302 116.38512421]
[205.30676270 108.51519775]
[192.50550842 116.12949371]
[178.78054810 108.25955963]
[163.78123474 108.11501312]
[148.78193665 107.97046661]
[133.78263855 107.82591248]
[131.98510742 113.39643097]
[129.27626038 118.58525848]
[125.73327637 123.24456024]
[121.45710754 127.24157715]
[116.56958771 130.46243286]
[111.20996094 132.81535339]
[105.53095245 134.23330688]
[104.66412354 149.20825195]
[103.79729462 164.18318176]
[116.67636871 172.55128479]
[123.63161469 186.24507141]
[122.79211426 201.58100891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 159]
[8 158]
[9 157]
[11 89]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[30 45]
[31 44]
[32 43]
[33 42]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[95 150]
[96 149]
[97 148]
[98 147]
[100 145]
[102 143]
[103 142]
[105 138]
[106 137]
[107 136]
[108 134]
[109 131]
[110 130]
[111 129]
[112 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
