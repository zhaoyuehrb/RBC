%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGAGAGGAGACUUCCGGCCACUGCGUUGUAGUCGGCCCGGCUGCAAAGCGUUUUUCUGCAGGCUGUUUUCCCAGGUUCCCUCGGCCUGUACCUCGCGCACUCCUCUUGCUCCAGGUCCUUCAGUCUCCGCUCGUCUCACCGUAGGCUGUGACGAC\
) } def
/len { sequence length } bind def

/coor [
[212.64100647 234.80345154]
[211.21427917 220.75788879]
[215.27082825 207.19009399]
[203.81196594 197.51049805]
[192.35311890 187.83090210]
[180.89425659 178.15129089]
[169.43540955 168.47169495]
[157.97656250 158.79209900]
[146.51770020 149.11248779]
[135.05885315 139.43289185]
[123.59999847 129.75329590]
[112.14114380 120.07368469]
[96.30719757 123.16729736]
[82.21970367 115.30429077]
[75.99722290 129.58428955]
[61.81999207 135.10342407]
[48.24453735 129.08323669]
[34.34419250 134.72064209]
[20.44384956 140.35806274]
[6.54350471 145.99546814]
[-7.30046892 151.76994324]
[-21.08672142 157.68087769]
[-34.81390381 163.72773743]
[-48.48068237 169.90989685]
[-62.14746094 176.09207153]
[-75.81423950 182.27423096]
[-89.48101044 188.45640564]
[-101.42037201 200.49334717]
[-116.29205322 192.35273743]
[-112.58647156 175.80870056]
[-95.66318512 174.78962708]
[-81.99640656 168.60745239]
[-68.32962799 162.42529297]
[-54.66284943 156.24311829]
[-40.99607468 150.06095886]
[-36.17218781 144.40878296]
[-26.99766541 143.89462280]
[-13.21141338 137.98368835]
[-8.27679920 132.42791748]
[0.90609080 132.09513855]
[14.80643463 126.45771790]
[28.70677948 120.82030487]
[42.60712433 115.18289185]
[48.15424347 101.40736389]
[62.17086411 95.49221039]
[76.58229065 101.40394592]
[76.89249420 95.94986725]
[78.45571136 90.71540070]
[81.18715668 85.98439789]
[84.93872833 82.01338196]
[89.50699615 79.01769257]
[87.43896484 64.16093445]
[85.37094116 49.30417633]
[83.30290985 34.44741821]
[70.05931091 29.85623360]
[60.14136887 20.04537010]
[55.45147324 6.97713232]
[56.85439301 -6.76949978]
[64.01843262 -18.50779152]
[75.49155426 -25.96836853]
[73.71746063 -40.86308670]
[71.94335938 -55.75780106]
[70.16925812 -70.65251923]
[68.39516449 -85.54723358]
[66.62106323 -100.44194794]
[64.84696960 -115.33666992]
[63.07287216 -130.23138428]
[61.29877472 -145.12609863]
[51.77906418 -133.53407288]
[37.06683350 -130.60997009]
[23.83785629 -137.68061829]
[18.09485817 -151.53767395]
[22.44375992 -165.89341736]
[34.91122055 -174.23382568]
[49.84005356 -172.77438354]
[60.45577621 -162.17825317]
[60.75213623 -177.17533875]
[61.04849243 -192.17240906]
[55.31626892 -208.12789917]
[69.06138611 -218.05302429]
[82.40366364 -207.59263611]
[76.04556274 -191.87605286]
[75.74920654 -176.87896729]
[75.45285034 -161.88189697]
[76.19348907 -146.90019226]
[77.96759033 -132.00547791]
[79.74168396 -117.11076355]
[81.51578522 -102.21604919]
[83.28987885 -87.32133484]
[85.06398010 -72.42661285]
[86.83807373 -57.53189850]
[88.61217499 -42.63718414]
[90.38626862 -27.74246788]
[105.36950684 -21.75711823]
[115.35939026 -8.96818352]
[117.56451416 7.20408678]
[111.29164124 22.37391853]
[98.15966797 32.37939072]
[100.22769928 47.23614883]
[102.29572296 62.09290695]
[104.36375427 76.94966888]
[120.54453278 88.67381287]
[121.82074738 108.61483765]
[133.27960205 118.29443359]
[144.73844910 127.97403717]
[156.19731140 137.65364075]
[167.65615845 147.33323669]
[179.11500549 157.01284790]
[190.57386780 166.69244385]
[202.03271484 176.37203979]
[213.49157715 186.05165100]
[224.95042419 195.73124695]
[239.72363281 188.97314453]
[255.90742493 189.31993103]
[270.27413940 196.65182495]
[279.98043823 209.46104431]
[283.13021851 225.16149902]
[279.14459229 240.61088562]
[290.79244995 250.06219482]
[302.44030762 259.51351929]
[313.24264526 257.75848389]
[323.01446533 262.17541504]
[328.59967041 271.07080078]
[328.34289551 281.35083008]
[339.60827637 291.25491333]
[350.87365723 301.15902710]
[362.13903809 311.06314087]
[373.40438843 320.96725464]
[384.66976929 330.87133789]
[400.14279175 334.17233276]
[404.59255981 348.38671875]
[415.85794067 358.29083252]
[430.38192749 353.29589844]
[445.45443726 356.24789429]
[457.02108765 366.35278320]
[461.97045898 380.89233398]
[458.97125244 395.95553589]
[448.83016968 407.49044800]
[434.27514648 412.39425659]
[419.22143555 409.34780884]
[407.71835327 399.17062378]
[402.86019897 384.60031128]
[405.95382690 369.55621338]
[394.68844604 359.65209961]
[380.02120972 357.05950928]
[374.76568604 342.13671875]
[363.50030518 332.23260498]
[352.23492432 322.32852173]
[340.96954346 312.42440796]
[329.70416260 302.52029419]
[318.43878174 292.61618042]
[299.27578735 290.27761841]
[292.98898315 271.16137695]
[281.34112549 261.71005249]
[269.69326782 252.25874329]
[257.42285156 258.79116821]
[243.54470825 260.14794922]
[230.15841675 256.09054565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[14 46]
[17 43]
[18 42]
[19 41]
[20 40]
[21 38]
[22 37]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[51 101]
[52 100]
[53 99]
[54 98]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[76 84]
[77 83]
[78 82]
[118 155]
[119 154]
[120 153]
[124 151]
[125 150]
[126 149]
[127 148]
[128 147]
[129 146]
[131 144]
[132 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
