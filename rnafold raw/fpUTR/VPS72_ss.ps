%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCCACCCGCAGGUAGUGAUGUCGAGCGUCGAGCUCCCAAAACCGAGCUGGUGAGGGGCUGCAGGUGGCGGCGCAGUCUCGGUAGGCGGU\
) } def
/len { sequence length } bind def

/coor [
[208.27940369 268.69793701]
[199.71038818 256.38650513]
[186.08920288 250.36048889]
[184.55609131 234.61373901]
[175.98707581 222.30229187]
[167.41804504 209.99084473]
[158.84902954 197.67938232]
[150.27999878 185.36793518]
[141.71098328 173.05648804]
[128.08979797 167.03048706]
[126.55669403 151.28372192]
[117.98767090 138.97227478]
[109.41864777 126.66082764]
[100.84962463 114.34937286]
[88.11996460 106.41491699]
[73.29293823 104.14350128]
[62.32543945 111.18380737]
[49.91358566 108.85137939]
[42.72552872 98.96224976]
[27.98367691 96.19136047]
[13.24182701 93.42047119]
[-1.50002408 90.64957428]
[-16.24187469 87.87868500]
[-30.98372650 85.10779572]
[-47.66718292 88.12417603]
[-55.18412399 72.92773438]
[-42.66246033 61.49776077]
[-28.21283531 70.36594391]
[-13.47098446 73.13683319]
[1.27086675 75.90772247]
[16.01271820 78.67861938]
[30.75456810 81.44950867]
[45.49641800 84.22039795]
[61.59688568 77.46524048]
[75.56435394 89.31647491]
[90.39138031 91.58789062]
[92.60057068 89.82702637]
[95.10733032 88.61898041]
[97.62883759 73.83243561]
[100.15035248 59.04588699]
[89.48153687 47.93361664]
[87.42572784 32.84630203]
[94.56363678 19.59812546]
[107.97339630 13.17034245]
[110.49491119 -1.61620450]
[113.01642609 -16.40275192]
[104.95116425 -30.27110291]
[110.89933014 -45.17073059]
[126.29799652 -49.67191315]
[139.33462524 -40.32172775]
[140.00863647 -24.29284096]
[127.80297089 -13.88123798]
[125.28145599 0.90530890]
[122.75994110 15.69185543]
[133.28155518 26.20059776]
[135.62538147 41.06567383]
[128.68556213 54.61898041]
[114.93689728 61.56740189]
[112.41539001 76.35395050]
[109.89387512 91.14049530]
[113.16107941 105.78034973]
[121.73010254 118.09180450]
[130.29911804 130.40325928]
[138.86814880 142.71470642]
[153.10223389 149.62130737]
[154.02243042 164.48745728]
[162.59146118 176.79891968]
[171.16047668 189.11036682]
[179.72950745 201.42181396]
[188.29852295 213.73327637]
[196.86755371 226.04472351]
[211.10163879 232.95132446]
[212.02183533 247.81747437]
[220.59085083 260.12893677]
[229.36659241 272.29388428]
[238.34654236 284.30889893]
[252.80577087 290.73083496]
[254.22753906 305.55743408]
[263.20748901 317.57244873]
[272.18740845 329.58746338]
[281.16735840 341.60247803]
[296.44265747 347.56881714]
[298.64547729 363.81933594]
[285.50973511 373.63690186]
[270.54837036 366.92202759]
[269.15234375 350.58242798]
[260.17239380 338.56741333]
[251.19245911 326.55239868]
[242.21250916 314.53738403]
[228.39558411 308.97485352]
[226.33151245 293.28884888]
[217.35157776 281.27383423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[11 64]
[12 63]
[13 62]
[14 61]
[15 36]
[16 35]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[38 60]
[39 59]
[40 58]
[44 54]
[45 53]
[46 52]
[75 92]
[76 91]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
