%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUCUGAUAGCAAUUUCAUGAGUCAGCUGACCUAAGAUACAUACUUCAAUUCUCAUGGGAUUUCUUGAGCUAGGAAAGGUGGUUGGCUUACGGCACAGUAGAGAGCUUCCAGGGCUGGCUGGCGUGGGAUACCCGUACCACAGAA\
) } def
/len { sequence length } bind def

/coor [
[3.23571444 111.69538116]
[14.62616539 101.93656921]
[-0.13358477 99.26265717]
[-14.89333439 96.58875275]
[-29.65308380 93.91484070]
[-44.41283417 91.24093628]
[-59.17258453 88.56703186]
[-73.93233490 85.89311981]
[-88.69208527 83.21921539]
[-104.47852325 95.54473114]
[-123.95896149 92.44309998]
[-134.79925537 76.32617188]
[-149.69851685 74.59059143]
[-164.30123901 80.67917633]
[-176.04779053 71.52123260]
[-190.94705200 69.78565979]
[-205.84629822 68.05007935]
[-220.74555969 66.31450653]
[-235.64480591 64.57892609]
[-250.54406738 62.84334946]
[-265.44332886 61.10777283]
[-280.34255981 59.37219620]
[-295.24182129 57.63661957]
[-310.14108276 55.90104675]
[-325.04034424 54.16547012]
[-332.27386475 64.45526886]
[-343.14654541 70.63357544]
[-355.54425049 71.57022095]
[-367.08648682 67.14739227]
[-375.58349609 58.27045441]
[-379.45159912 46.68331909]
[-394.26443481 44.32118225]
[-409.07727051 41.95904922]
[-416.69509888 55.08663559]
[-428.54315186 64.57283020]
[-443.01913452 69.13469696]
[-458.16525269 68.15528107]
[-471.93313599 61.76704407]
[-482.46081543 50.83394241]
[-488.32446289 36.83458328]
[-488.73107910 21.66227150]
[-483.62570190 7.36893272]
[-473.69876099 -4.11237383]
[-460.29281616 -11.22889614]
[-445.22088623 -13.01818371]
[-430.52136230 -9.23824978]
[-418.18218994 -0.40029848]
[-409.87216187 12.30040836]
[-406.71514893 27.14620590]
[-391.90231323 29.50834084]
[-377.08947754 31.87047386]
[-365.24282837 18.84592247]
[-347.80584717 15.45985794]
[-331.66381836 23.23977661]
[-323.30474854 39.26621628]
[-308.40551758 41.00178909]
[-293.50625610 42.73736572]
[-278.60699463 44.47294235]
[-263.70773315 46.20851898]
[-248.80848694 47.94409561]
[-233.90922546 49.67967224]
[-219.00997925 51.41524887]
[-204.11071777 53.15082550]
[-189.21147156 54.88640213]
[-174.31221008 56.62197876]
[-160.77517700 50.40925598]
[-147.96293640 59.69133759]
[-133.06369019 61.42691422]
[-126.95185852 53.03563309]
[-117.81997681 47.92995834]
[-107.30889130 47.10503006]
[-97.34005737 50.77969742]
[-89.76428223 58.34403229]
[-86.01817322 68.45946503]
[-71.25842285 71.13336945]
[-56.49867630 73.80728149]
[-41.73892593 76.48118591]
[-26.97917747 79.15509796]
[-12.21942711 81.82900238]
[2.54032302 84.50290680]
[17.30007362 87.17681885]
[32.19932556 88.91239166]
[47.17849350 89.70269775]
[62.15766144 90.49300385]
[77.13682556 91.28330231]
[92.11598969 92.07360840]
[107.10265350 92.70595551]
[122.09515381 93.18027496]
[137.08766174 93.65460205]
[152.08682251 93.49646759]
[167.06599426 92.70616913]
[182.04515076 91.91586304]
[197.02432251 91.12555695]
[212.00347900 90.33525848]
[226.98265076 89.54495239]
[235.45410156 85.94718933]
[242.28529358 88.89926910]
[250.83071899 85.48091125]
[257.59814453 88.57636261]
[272.59732056 88.41822815]
[287.59649658 88.26010132]
[302.59564209 88.10196686]
[308.31057739 80.45126343]
[316.79824829 76.38539124]
[326.06533813 76.71709442]
[334.00036621 81.24251556]
[338.85479736 88.81690216]
[353.83398438 89.60720825]
[368.81314087 90.39751434]
[383.79229736 91.18781281]
[398.77148438 91.97811890]
[414.90716553 86.77468872]
[424.37405396 100.83934784]
[413.47973633 113.82974243]
[397.98117065 106.95728302]
[383.00201416 106.16698456]
[368.02282715 105.37667847]
[353.04367065 104.58637238]
[338.06451416 103.79607391]
[320.65090942 114.80602264]
[302.75378418 103.10113525]
[287.75460815 103.25926208]
[272.75546265 103.41739655]
[257.75628662 103.57552338]
[242.75962830 103.89176941]
[227.77294922 104.52411652]
[212.79379272 105.31442261]
[197.81462097 106.10472870]
[182.83546448 106.89502716]
[167.85629272 107.68533325]
[152.87712097 108.47563171]
[150.88688660 110.54034424]
[147.93139648 111.91315460]
[144.28053284 112.21185303]
[140.34103394 111.16293335]
[136.61332703 108.64710236]
[121.62083435 108.17277527]
[106.62833405 107.69845581]
[99.05542755 110.62734222]
[91.32569122 107.05277252]
[76.34651947 106.26246643]
[61.36735535 105.47216797]
[46.38819122 104.68186188]
[31.40902328 103.89156342]
[40.25157166 116.00804901]
[38.12924576 130.85714722]
[26.24653816 140.01145935]
[11.34732056 138.27555847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[12 68]
[13 67]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 55]
[31 51]
[32 50]
[33 49]
[82 144]
[83 143]
[84 142]
[85 141]
[86 140]
[87 138]
[88 137]
[89 136]
[90 131]
[91 130]
[92 129]
[93 128]
[94 127]
[95 126]
[97 125]
[99 124]
[100 123]
[101 122]
[102 121]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
