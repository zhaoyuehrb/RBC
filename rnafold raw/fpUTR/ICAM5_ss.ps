%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCCUCUAGCCCAGCUCCUCGGCUCGCGCUCUCCUCGCCUCCUGUGCUUUCCCCGCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[126.47085571 134.42803955]
[116.10006714 140.33340454]
[104.51343536 143.19288635]
[92.58595276 142.79051208]
[81.21836853 139.15669250]
[71.26913452 132.56582642]
[63.48960114 123.51567078]
[58.46725464 112.68964386]
[56.58138275 100.90532684]
[57.97439575 89.05264282]
[44.32991791 82.82141876]
[30.68543625 76.59019470]
[16.89653206 70.68544006]
[1.20923102 72.73949432]
[-7.73069620 60.82618332]
[-21.65621567 55.25124741]
[-35.58173370 49.67631149]
[-49.50725174 44.10137177]
[-65.65364075 46.96952057]
[-76.00222778 34.24793625]
[-69.90727997 19.02349472]
[-53.63875580 16.95779610]
[-43.93231583 30.17585373]
[-30.00679779 35.75078964]
[-16.08127785 41.32572937]
[-2.15575933 46.90066528]
[12.53549576 44.44785309]
[22.47146988 56.75991821]
[30.12134743 56.30365753]
[36.91666412 62.94571304]
[50.56114197 69.17694092]
[64.20561981 75.40816498]
[77.56964874 62.81296921]
[94.94445801 56.86721039]
[113.22325897 58.63405609]
[129.13758850 67.79756927]
[139.84181213 82.71921539]
[143.42190552 100.73085785]
[158.15083313 103.56962585]
[172.87976074 106.40839386]
[187.60868835 109.24716187]
[196.62969971 102.39916992]
[207.71867371 101.86795044]
[216.97160339 107.58688354]
[221.27383423 117.33310699]
[235.66622925 121.55909729]
[245.15141296 120.98934937]
[250.63401794 126.34377289]
[264.80902100 131.24980164]
[278.13195801 123.06242371]
[293.59301758 125.40548706]
[303.89193726 137.17265320]
[304.16589355 152.80784607]
[294.28552246 164.92857361]
[278.91604614 167.81182861]
[265.31445312 160.09622192]
[259.90301514 145.42480469]
[245.72799683 140.51878357]
[231.44024658 135.95149231]
[217.04785156 131.72550964]
[198.96884155 137.93530273]
[184.76992798 123.97609711]
[170.04100037 121.13732147]
[155.31207275 118.29855347]
[140.58312988 115.45978546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 32]
[11 31]
[12 30]
[13 28]
[15 26]
[16 25]
[17 24]
[18 23]
[38 65]
[39 64]
[40 63]
[41 62]
[45 60]
[46 59]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
