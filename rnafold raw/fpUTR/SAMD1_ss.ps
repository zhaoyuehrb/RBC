%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAGCAGCGCCGCCGCCGCUCCGCCGAGGCGCUGCGCCCCCCGGGGGGGGAGGCGGAGGAGGCGGGCAGCGGCGGAGGGAGGGGAGCCGGGGAGGGGGGCGCCGCGCUGGGAGGGAGGCAGCGCGCACGGUGCAGCCGGGCCGGGCGGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[166.13281250 180.69361877]
[155.33554077 178.33651733]
[145.09568787 174.16830444]
[135.71470642 168.31011963]
[127.46908569 160.93296814]
[120.60208893 152.25259399]
[115.31664276 142.52320862]
[111.76934052 132.03009033]
[110.06578064 121.08117676]
[110.25743103 109.99802399]
[96.85281372 113.97392273]
[86.44683838 104.63543701]
[71.81337738 101.33970642]
[57.17992020 98.04397583]
[42.54645920 94.74825287]
[27.91299820 91.45252228]
[13.27953625 88.15679169]
[-1.35392404 84.86106873]
[-16.51687813 89.37718964]
[-27.23314476 79.03258514]
[-41.86660767 75.73685455]
[-50.98516083 76.90576935]
[-56.76014709 72.22460938]
[-71.32427216 68.63488007]
[-85.88839722 65.04514313]
[-100.45252991 61.45541000]
[-115.01665497 57.86567307]
[-121.59931183 65.16761017]
[-130.35206604 69.51488495]
[-140.03189087 70.33781433]
[-149.28147888 67.56388092]
[-156.81958008 61.62192535]
[-161.61845398 53.37647247]
[-163.04391479 44.00211716]
[-177.27195740 39.25209808]
[-192.81208801 42.22113800]
[-202.43420410 30.85170555]
[-216.66226196 26.10168648]
[-230.89030457 21.35166740]
[-245.11834717 16.60164642]
[-259.39349365 11.99513054]
[-273.71432495 7.53258467]
[-288.03512573 3.07003880]
[-302.35592651 -1.39250708]
[-318.22677612 2.73653674]
[-329.54376221 -9.13181877]
[-324.66494751 -24.78842735]
[-308.60925293 -28.12711143]
[-297.89340210 -15.71331978]
[-283.57257080 -11.25077438]
[-269.25177002 -6.78822851]
[-254.93095398 -2.32568264]
[-247.56709290 -3.34411001]
[-240.36833191 2.37360024]
[-226.14027405 7.12362003]
[-211.91223145 11.87364006]
[-197.68418884 16.62365913]
[-183.16175842 13.31486797]
[-172.52194214 25.02405167]
[-158.29389954 29.77407265]
[-140.92907715 19.08478546]
[-121.00910950 24.64619064]
[-111.42691803 43.30154419]
[-96.86279297 46.89128113]
[-82.29866791 50.48101425]
[-67.73453522 54.07075119]
[-53.17041016 57.66048431]
[-38.57087708 61.10339355]
[-23.93741608 64.39912415]
[-9.82114506 59.64726257]
[1.94180441 70.22760773]
[16.57526588 73.52333069]
[31.20872498 76.81906128]
[45.84218597 80.11479187]
[60.47564697 83.41051483]
[75.10910797 86.70624542]
[89.74256897 90.00197601]
[103.14718628 86.02607727]
[113.55316162 95.36456299]
[122.76650238 78.16245270]
[136.68269348 64.50351715]
[154.02764893 55.62606049]
[173.21697998 52.33118820]
[192.50076294 54.91050720]
[210.12307739 63.12033844]
[224.48196411 76.20472717]
[234.27497864 92.96501923]
[238.61735535 111.86968231]
[253.60517883 112.47367096]
[268.59301758 113.07765961]
[282.69354248 105.90231323]
[295.09893799 114.14581299]
[310.08679199 114.74980164]
[319.73876953 102.74372864]
[334.43774414 98.76962280]
[348.49206543 104.14920807]
[356.58682251 116.62368774]
[371.57467651 117.22767639]
[383.13745117 106.79024506]
[398.32864380 107.61628723]
[408.20788574 118.70394135]
[423.19570923 119.30793762]
[438.18353271 119.91192627]
[453.17138672 120.51591492]
[468.15921021 121.11990356]
[483.15921021 121.11990356]
[498.14703369 120.51591492]
[513.13488770 119.91192627]
[528.12274170 119.30793762]
[543.11053467 118.70394135]
[558.09838867 118.09995270]
[565.82086182 104.74454498]
[579.54833984 97.70465851]
[594.90045166 99.22671509]
[606.97833252 108.82501221]
[611.92810059 123.43678284]
[608.17016602 138.39945984]
[596.90374756 148.93850708]
[581.72387695 151.69094849]
[567.47448730 145.77848816]
[558.70239258 133.08778381]
[543.71453857 133.69177246]
[528.72668457 134.29577637]
[513.73889160 134.89976501]
[498.75103760 135.50375366]
[483.76321411 136.10774231]
[481.75006104 138.13619995]
[478.78930664 139.46557617]
[475.15197754 139.72213745]
[471.24240112 138.64051819]
[467.55523682 136.10774231]
[452.56738281 135.50375366]
[437.57955933 134.89976501]
[422.59170532 134.29577637]
[407.60388184 133.69177246]
[396.86450195 143.94853210]
[381.65609741 143.54951477]
[370.97067261 132.21551514]
[355.98284912 131.61152649]
[346.91052246 143.39419556]
[332.46890259 147.62542725]
[318.13739014 142.48143005]
[309.48278809 129.73764038]
[294.49496460 129.13365173]
[281.46646118 136.35220337]
[267.98904419 128.06549072]
[253.00119019 127.46150208]
[238.01336670 126.85751343]
[235.38531494 137.55354309]
[230.96730042 147.64732361]
[224.88787842 156.84164429]
[217.32452393 164.86549377]
[208.49850464 171.48208618]
[198.66833496 176.49583435]
[188.12228394 179.75811768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 79]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[20 69]
[21 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[34 60]
[35 59]
[37 57]
[38 56]
[39 55]
[40 54]
[41 52]
[42 51]
[43 50]
[44 49]
[88 148]
[89 147]
[90 146]
[92 144]
[93 143]
[97 139]
[98 138]
[101 135]
[102 134]
[103 133]
[104 132]
[105 131]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
