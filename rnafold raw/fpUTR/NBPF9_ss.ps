%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUGCUGUGGGGAGUGAUCACAUUUUUCACAACAGUAAGUCCCUGACUCCACCUCUUCUGCCACAAACGUCAGC\
) } def
/len { sequence length } bind def

/coor [
[131.64799500 135.24792480]
[118.00080872 124.71405792]
[111.37639618 108.70361328]
[98.54149628 114.24949646]
[87.09625244 106.21842194]
[72.17421722 104.69107819]
[57.65793610 110.98298645]
[45.78464890 101.98997498]
[30.86260986 100.46263123]
[15.94057274 98.93528748]
[1.01853478 97.40793610]
[-13.90350342 95.88059235]
[-28.82554054 94.35324860]
[-43.74757767 92.82590485]
[-58.66961670 91.29856110]
[-73.59165192 89.77121735]
[-88.51369476 88.24387360]
[-103.43572998 86.71652222]
[-118.16932678 93.91743469]
[-131.61932373 84.53502655]
[-129.94950867 68.22110748]
[-114.87765503 61.75805283]
[-101.90838623 71.79448700]
[-86.98635101 73.32183075]
[-72.06430817 74.84917450]
[-57.14227295 76.37652588]
[-42.22023392 77.90386963]
[-27.29819679 79.43121338]
[-12.37615871 80.95855713]
[2.54587960 82.48590088]
[17.46791840 84.01324463]
[32.38995743 85.54058838]
[47.31199265 87.06793213]
[60.76095200 80.66677856]
[73.70156097 89.76904297]
[88.62360382 91.29638672]
[101.45850372 85.75050354]
[112.90374756 93.78157806]
[119.62387085 82.39193726]
[130.17575073 74.49954987]
[142.90794373 71.29399109]
[155.84527588 73.23487091]
[166.99519348 79.98630524]
[174.65473938 90.47441101]
[177.67053223 103.05790710]
[192.41842651 105.79644775]
[207.16632080 108.53499603]
[221.91421509 111.27354431]
[236.66210938 114.01209259]
[243.30970764 100.45805359]
[253.36848450 89.20090485]
[266.09204102 81.07599640]
[280.53616333 76.68625641]
[295.62902832 76.35742950]
[310.25061035 80.11392212]
[323.31594849 87.67697144]
[333.85546875 98.48535156]
[341.08706665 111.73700714]
[344.47415161 126.44858551]
[343.76531982 141.52838135]
[339.01321411 155.85736084]
[330.57043457 168.37225342]
[319.06353760 178.14433289]
[305.34637451 184.44848633]
[290.43685913 186.81686401]
[275.44140625 185.07373047]
[261.47274780 179.34844971]
[249.56742859 170.06587219]
[240.60894775 157.91481018]
[235.26206970 143.79696655]
[233.92355347 128.75997925]
[219.17565918 126.02143860]
[204.42776489 123.28289032]
[189.67987061 120.54434204]
[174.93199158 117.80579376]
[164.45869446 131.16926575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[5 36]
[6 35]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
