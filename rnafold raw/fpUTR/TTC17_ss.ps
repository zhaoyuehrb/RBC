%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCAAGAUGGCGGGCGCCGGAGACUAGCUUCCGCUUCCGGUGUGAGCGGCCCGGCCGGGGGGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[91.39395905 211.42974854]
[76.52732086 213.42555237]
[61.84449768 210.35720825]
[49.02123642 202.57492065]
[39.52104950 190.96688843]
[34.42819214 176.85792542]
[34.32391739 161.85829163]
[39.22011948 147.67988586]
[48.55799866 135.94088745]
[61.27182388 127.98107910]
[75.91056824 124.70890045]
[90.80351257 126.49780273]
[104.25297546 133.14511108]
[99.05343628 119.07511902]
[85.93575287 112.92104340]
[80.91316986 99.32987213]
[86.87657166 86.12442017]
[81.67703247 72.05442047]
[76.47749329 57.98442459]
[71.27795410 43.91442871]
[66.07841492 29.84443092]
[60.87887573 15.77443504]
[55.67933655 1.70443881]
[50.47979736 -12.36555767]
[46.38675308 -15.43424225]
[43.95632553 -19.33923912]
[43.23805237 -23.36750221]
[44.01258469 -26.87897682]
[45.84844208 -29.39854240]
[43.20741272 -44.16421127]
[40.56638718 -58.92987823]
[29.58648491 -71.11075592]
[34.90217972 -86.62447357]
[51.04513550 -89.51184845]
[61.40886688 -76.80259705]
[55.33205414 -61.57090759]
[57.97308350 -46.80524063]
[60.61410904 -32.03956985]
[64.54979706 -17.56509590]
[69.74933624 -3.49510002]
[74.94886780 10.57489681]
[80.14840698 24.64489365]
[85.34794617 38.71488953]
[90.54748535 52.78488541]
[95.74702454 66.85488129]
[100.94656372 80.92488098]
[114.06424713 87.07895660]
[119.08683014 100.67012787]
[113.12342834 113.87557983]
[118.32296753 127.94557953]
[123.87251282 132.02293396]
[126.38263702 137.79405212]
[139.14616394 145.67393494]
[151.90968323 153.55380249]
[164.67320251 161.43368530]
[178.97708130 155.41880798]
[194.07690430 158.99304199]
[204.16647339 170.78202820]
[205.36614990 186.25265503]
[197.21464539 199.45614624]
[182.84635925 205.31550598]
[167.78620911 201.57768250]
[157.82511902 189.67994690]
[156.79333496 174.19720459]
[144.02980042 166.31733704]
[131.26628113 158.43745422]
[118.50276184 150.55757141]
[122.35817719 165.05363464]
[121.16674042 180.00624084]
[115.06441498 193.70886230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 50]
[14 49]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[29 38]
[30 37]
[31 36]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
