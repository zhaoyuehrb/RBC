%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGUCGCGCCGGAGGGGGGCGGAGGCGGAAGUGGCGGUGCCGGGCCCGGGGAGUAGGAAGGAGCCGGGGCUGUAGCCGGAGUGGAGCGGCUGCCAGCCGAGGAGCAGGCGCGGCCGCGGCGCCAUAUUGCGGCCCUCAGCGGCCGCGACCGAGUC\
) } def
/len { sequence length } bind def

/coor [
[124.54736328 736.17559814]
[121.80265808 720.99438477]
[127.72237396 706.74792480]
[140.41754150 697.98229980]
[139.82119751 682.99420166]
[139.22485352 668.00604248]
[138.62850952 653.01788330]
[138.03215027 638.02972412]
[137.43580627 623.04162598]
[136.83946228 608.05346680]
[136.09413147 593.07202148]
[135.19990540 578.09869385]
[134.30567932 563.12536621]
[123.02871704 553.46276855]
[121.90854645 538.29040527]
[132.12002563 526.52764893]
[131.22578430 511.55429077]
[130.33155823 496.58099365]
[129.43733215 481.60766602]
[128.54310608 466.63433838]
[120.06083679 454.39096069]
[126.96166992 440.15408325]
[126.06744385 425.18075562]
[117.58516693 412.93737793]
[124.48600769 398.70050049]
[122.99720001 383.77456665]
[120.91616821 368.91961670]
[118.83513641 354.06466675]
[116.75410461 339.20971680]
[105.45848083 332.94436646]
[99.76428223 321.13351440]
[101.96156311 308.00942993]
[111.46659088 298.42041016]
[109.68132019 283.52703857]
[107.89604187 268.63363647]
[106.11077118 253.74026489]
[104.32550049 238.84687805]
[95.12841797 227.13095093]
[101.16825104 212.50799561]
[99.38298035 197.61460876]
[97.59770203 182.72123718]
[95.81243134 167.82785034]
[94.02716064 152.93447876]
[84.69315338 145.18652344]
[83.11185455 132.75442505]
[90.67800903 122.26456451]
[89.18920135 107.33863068]
[82.56601715 93.88005066]
[71.64783478 83.59445953]
[60.72965622 73.30887604]
[49.81147385 63.02328873]
[35.96174240 69.28854370]
[20.76849174 69.77182770]
[6.54858017 64.39944458]
[-4.52956057 53.99063873]
[-10.77659416 40.13268280]
[-11.23989201 24.93880844]
[-5.84880543 10.72597504]
[4.57456446 -0.33846420]
[18.44072914 -6.56726217]
[33.63520050 -7.01057291]
[47.84092712 -1.60079455]
[58.89164734 8.83712101]
[65.10219574 22.71146774]
[65.52552032 37.90650558]
[60.09706116 52.10510635]
[71.01524353 62.39069366]
[81.93342590 72.67628479]
[92.85160828 82.96186829]
[107.23249054 78.69686890]
[110.77765656 64.12183380]
[114.32282257 49.54679108]
[117.86798859 34.97175217]
[121.41315460 20.39671135]
[124.81324768 5.78714705]
[128.06793213 -8.85549736]
[131.32261658 -23.49814224]
[134.57730103 -38.14078522]
[137.83197021 -52.78343201]
[141.08665466 -67.42607880]
[130.71063232 -78.96374512]
[129.13140869 -94.40024567]
[136.95623779 -107.79994202]
[151.17630005 -114.01036835]
[166.32369995 -110.64348602]
[176.57394409 -98.99394226]
[177.98562622 -83.54121399]
[170.01589966 -70.22719574]
[155.72930908 -64.17139435]
[152.47462463 -49.52875137]
[149.21994019 -34.88610458]
[145.96525574 -20.24345970]
[142.71057129 -5.60081530]
[139.45588684 9.04182911]
[141.08338928 16.29328346]
[135.98818970 23.94187737]
[132.44302368 38.51691818]
[128.89785767 53.09195709]
[125.35269928 67.66699982]
[121.80753326 82.24203491]
[122.58808899 90.18582153]
[120.93672943 97.12741852]
[117.47203827 102.41185760]
[112.96649933 105.64643097]
[108.25077820 106.72993469]
[104.11513519 105.84982300]
[105.60394287 120.77575684]
[116.69595337 135.44270325]
[108.92053986 151.14920044]
[110.70581055 166.04258728]
[112.49108887 180.93595886]
[114.27635956 195.82934570]
[116.06163025 210.72271729]
[125.38640594 223.50392151]
[119.21887970 237.06161499]
[121.00415039 251.95498657]
[122.78942871 266.84838867]
[124.57469940 281.74176025]
[126.35997009 296.63513184]
[140.29801941 307.16305542]
[142.29753113 324.17620850]
[131.60903931 337.12869263]
[133.69007874 351.98364258]
[135.77111816 366.83859253]
[137.85214233 381.69351196]
[140.73208618 385.10797119]
[142.19355774 388.88616943]
[142.29980469 392.52645874]
[141.27388000 395.60180664]
[139.45933533 397.80627441]
[148.00556946 411.12063599]
[141.04077148 424.28652954]
[141.93499756 439.25985718]
[150.48123169 452.57421875]
[143.51643372 465.74011230]
[144.41065979 480.71343994]
[145.30488586 495.68676758]
[146.19911194 510.66006470]
[147.09333801 525.63342285]
[158.63221741 536.09722900]
[159.32579041 551.29504395]
[149.27900696 562.23114014]
[150.17323303 577.20446777]
[151.06745911 592.17779541]
[154.71984863 600.61114502]
[151.82760620 607.45709229]
[152.42395020 622.44525146]
[153.02029419 637.43341064]
[153.61665344 652.42156982]
[154.21299744 667.40966797]
[154.80934143 682.39782715]
[155.40568542 697.38598633]
[168.75715637 705.11523438]
[175.79003906 718.84631348]
[174.26016235 734.19763184]
[164.65571594 746.27062988]
[150.04142761 751.21295166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 146]
[11 144]
[12 143]
[13 142]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[22 133]
[23 132]
[25 130]
[26 125]
[27 124]
[28 123]
[29 122]
[33 119]
[34 118]
[35 117]
[36 116]
[37 115]
[39 113]
[40 112]
[41 111]
[42 110]
[43 109]
[46 107]
[47 106]
[48 69]
[49 68]
[50 67]
[51 66]
[70 100]
[71 99]
[72 98]
[73 97]
[74 96]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
