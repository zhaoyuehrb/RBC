%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAAGGAGAGGAGGGAGGAGGCGCGCCGCGCCAUGGUGUCCUGCGCGGGGCCAGGGCCAGGGCCGGGGCCGGGCCAGGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[131.02294922 136.89862061]
[120.90190125 143.44009399]
[109.47466278 147.26692200]
[97.45533752 148.13996887]
[85.59503937 146.00465393]
[74.63492584 140.99444580]
[65.25991821 133.42242432]
[58.05587387 123.76177216]
[53.47298813 112.61621094]
[51.79765320 100.68224335]
[53.13456345 88.70564270]
[39.27637100 82.96539307]
[25.41817665 77.22513580]
[11.55998421 71.48488617]
[-4.15064907 73.35212708]
[-12.94817829 61.33327484]
[-23.69547462 70.47743225]
[-37.28215790 74.03359985]
[-51.00042725 71.35280609]
[-62.14212036 63.02320480]
[-68.53334045 50.74221039]
[-68.95849609 36.97087479]
[-82.60298157 30.73965073]
[-96.24745941 24.50842476]
[-109.89193726 18.27719879]
[-123.53641510 12.04597473]
[-140.45593262 10.96610546]
[-144.10206604 -5.59113312]
[-129.20123291 -13.67826271]
[-117.30519104 -1.59850538]
[-103.66071320 4.63271999]
[-90.01623535 10.86394501]
[-76.37174988 17.09517097]
[-62.72727203 23.32639503]
[-49.90460587 13.66733742]
[-33.87614441 11.71681213]
[-18.93991089 18.09177399]
[-9.14812088 31.16406059]
[-7.20792675 47.47508240]
[7.51147604 45.19726562]
[17.30023575 57.62669373]
[31.15842819 63.36694717]
[45.01662064 69.10720062]
[58.87481308 74.84745026]
[71.08663177 61.42605972]
[87.39499664 53.46995163]
[105.48927307 52.10637283]
[122.80581665 57.52852249]
[136.89115906 68.96817017]
[145.74963379 84.80451202]
[148.12614441 102.79379272]
[162.78335571 105.98227692]
[177.44055176 109.17075348]
[192.09776306 112.35923767]
[203.49490356 106.01001740]
[215.74787903 109.12382507]
[222.29780579 119.46215057]
[236.83186340 123.17175293]
[251.36592102 126.88134766]
[265.89996338 130.59094238]
[281.18496704 126.50685883]
[291.60339355 137.15135193]
[306.13748169 140.86094666]
[321.42245483 136.77687073]
[331.84091187 147.42135620]
[346.37496948 151.13096619]
[360.90902710 154.84056091]
[376.54290771 149.88941956]
[388.46343994 161.15141296]
[384.40783691 177.04115295]
[368.54812622 181.21264648]
[357.19943237 169.37461853]
[342.66534424 165.66502380]
[328.13128662 161.95542908]
[313.88589478 166.30484009]
[302.42785645 155.39501953]
[287.89379883 151.68540955]
[273.64840698 156.03483582]
[262.19036865 145.12500000]
[247.65632629 141.41540527]
[233.12225342 137.70581055]
[218.58819580 133.99621582]
[202.09991455 139.71232605]
[188.90928650 127.01643372]
[174.25207520 123.82795715]
[159.59487915 120.63948059]
[144.93766785 117.45099640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 44]
[12 43]
[13 42]
[14 41]
[16 39]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[51 87]
[52 86]
[53 85]
[54 84]
[57 82]
[58 81]
[59 80]
[60 79]
[62 77]
[63 76]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
