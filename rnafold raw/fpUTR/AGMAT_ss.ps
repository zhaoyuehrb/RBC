%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAUCCUAGGGCGCCCCUGACCUUUGAGCCGGCUCGGGUUCCGGCUCUGGCGCGUGCACACUCGCCUCGCCGUUCGGGACCAGCCAGAUCGCGGCGGCCUCGCGGGCGGUUUGGUCGGUGAGGUCUUGGCCGCGCGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[140.67864990 104.12251282]
[152.51400757 113.33795929]
[158.72526550 126.99153900]
[157.89550781 141.96856689]
[150.21401978 154.85246277]
[137.43310547 162.70411682]
[122.46839905 163.73239136]
[108.73370361 157.70274353]
[111.04196930 142.88140869]
[101.91055298 154.78170776]
[92.77912903 166.68202209]
[83.64770508 178.58232117]
[74.51628876 190.48262024]
[69.67092133 206.72941589]
[52.71771240 206.57096863]
[48.17684937 190.23645020]
[62.61598587 181.35119629]
[71.74740601 169.45089722]
[80.87882996 157.55059814]
[90.01025391 145.65029907]
[99.14167023 133.75000000]
[96.19613647 126.85261536]
[82.47724915 132.91827393]
[68.60887146 138.63388062]
[62.71768951 124.83916473]
[76.43666077 118.77340698]
[90.30506134 113.05786133]
[87.35951996 106.16048431]
[72.44867706 104.52748108]
[57.53783035 102.89447784]
[42.62698364 101.26147461]
[27.71613884 99.62847137]
[12.80529499 97.99546814]
[-2.10555053 96.36246490]
[-12.43864250 107.93859863]
[-27.60967445 111.19734192]
[-41.78507614 104.88563538]
[-49.51411819 91.43046570]
[-47.82482147 76.00562286]
[-37.36676025 64.54226685]
[-22.16126823 61.44829178]
[-8.05517006 67.91339874]
[-0.47254729 81.45162201]
[14.43829823 83.08462524]
[29.34914207 84.71762848]
[44.25998688 86.35063171]
[59.17083359 87.98363495]
[74.08168030 89.61663818]
[88.99252319 91.24964142]
[103.70429993 88.32328796]
[116.85520172 81.10845184]
[125.23262787 67.68722534]
[140.11251831 68.34905243]
[153.26342773 61.13422012]
[166.41432190 53.91938782]
[179.56523132 46.70455933]
[192.71612549 39.48972702]
[205.86703491 32.27489471]
[219.01792908 25.06006241]
[228.15724182 9.11440945]
[245.64651489 10.09385586]
[245.74919128 -5.20113325]
[253.44303894 -18.30463219]
[266.57540894 -25.74823570]
[281.57006836 -25.61997986]
[294.40081787 -18.05444717]
[307.39120483 -25.55444717]
[320.38156128 -33.05444717]
[333.37194824 -40.55444717]
[346.36233521 -48.05444717]
[359.35272217 -55.55444717]
[372.34310913 -63.05444717]
[385.33346558 -70.55445099]
[398.32385254 -78.05445099]
[383.50869751 -80.40205383]
[371.76193237 -89.73015594]
[366.11904907 -103.62827301]
[368.03817749 -118.50499725]
[377.02346802 -130.51603699]
[390.75296021 -136.55760193]
[405.67886353 -135.06851196]
[417.94415283 -126.43356323]
[424.37939453 -112.88409424]
[423.32159424 -97.92144012]
[415.04293823 -85.41101837]
[429.34869385 -89.92160797]
[443.65444946 -94.43219757]
[457.96020508 -98.94277954]
[472.26596069 -103.45336914]
[486.57171631 -107.96395874]
[500.87747192 -112.47454071]
[515.18322754 -116.98513031]
[529.48895264 -121.49571991]
[543.79473877 -126.00630188]
[555.86926270 -139.86257935]
[572.83142090 -135.48995972]
[587.03540039 -140.31155396]
[601.23931885 -145.13314819]
[611.63934326 -157.81272888]
[627.77398682 -154.87922668]
[633.04528809 -139.35037231]
[622.03063965 -127.20092773]
[606.06091309 -130.92919922]
[591.85693359 -126.10759735]
[577.65301514 -121.28601074]
[571.98956299 -110.54354858]
[560.13482666 -106.43721008]
[548.30529785 -111.70054626]
[533.99957275 -107.18996429]
[519.69378662 -102.67937469]
[505.38806152 -98.16878510]
[491.08230591 -93.65820312]
[476.77655029 -89.14761353]
[462.47079468 -84.63703156]
[448.16503906 -80.12644196]
[433.85928345 -75.61585236]
[419.55352783 -71.10527039]
[405.82385254 -65.06406403]
[392.83346558 -57.56406784]
[379.84310913 -50.06406784]
[366.85272217 -42.56406784]
[353.86233521 -35.06406784]
[340.87194824 -27.56406593]
[327.88156128 -20.06406593]
[314.89120483 -12.56406689]
[301.90081787 -5.06406641]
[302.03738403 9.83046055]
[294.65112305 22.88033485]
[281.63858032 30.53149986]
[266.44369507 30.64280891]
[253.14651489 23.08423805]
[249.68763733 34.72516632]
[238.86181641 41.06534195]
[226.23275757 38.21096420]
[213.08186340 45.42579651]
[199.93095398 52.64062881]
[186.78005981 59.85545731]
[173.62916565 67.07028961]
[160.47825623 74.28511810]
[147.32736206 81.49995422]
[139.89056396 94.40512848]
[124.07003784 94.25935364]
[110.91913605 101.47418976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[50 143]
[51 142]
[53 140]
[54 139]
[55 138]
[56 137]
[57 136]
[58 135]
[59 134]
[61 131]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[71 121]
[72 120]
[73 119]
[74 118]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
