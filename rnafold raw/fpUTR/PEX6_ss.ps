%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGGAAGCGGCCCUCGCGCACACUAGUCGUCUGGCUCUCUGGCUCCGGAAGCUGCGCUCCUUCACCCUCCUCGUUGGUGUCCUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[88.16623688 103.71636963]
[73.30007172 101.71706390]
[58.43391037 99.71775818]
[45.94802094 109.03120422]
[30.90009689 106.79184723]
[22.09809685 94.83106232]
[7.23193407 92.83176422]
[-7.63422823 90.83245850]
[-22.50039101 88.83315277]
[-30.95959282 96.06877899]
[-41.79796600 97.31210327]
[-51.28156281 92.38459778]
[-56.28202438 83.19135284]
[-70.98145294 80.20355988]
[-85.68087769 77.21576691]
[-100.38030243 74.22798157]
[-110.78755188 82.96714783]
[-124.13891602 84.03517151]
[-135.46684265 77.26244354]
[-140.68838501 65.35460663]
[-155.27976990 61.87730408]
[-169.87115479 58.40000153]
[-179.15345764 59.45722580]
[-184.88801575 54.55502319]
[-199.35505676 50.59209061]
[-215.07304382 55.26935959]
[-226.79504395 43.80084610]
[-222.46246338 27.98437500]
[-206.53228760 24.09057426]
[-195.39212036 36.12505341]
[-180.92509460 40.08798218]
[-166.39384460 43.80862045]
[-151.80247498 47.28592300]
[-137.21109009 50.76322556]
[-123.38577271 41.34984970]
[-106.68173218 44.82054901]
[-97.39250946 59.52855682]
[-82.69308472 62.51634598]
[-67.99365997 65.50413513]
[-53.29423523 68.49192810]
[-35.65229416 60.87796783]
[-20.50108528 73.96698761]
[-5.63492393 75.96629333]
[9.23123837 77.96559906]
[24.09740067 79.96490479]
[35.74664307 70.75454712]
[50.85152817 72.57035065]
[60.43321609 84.85159302]
[75.29937744 86.85089874]
[90.16554260 88.85020447]
[104.16324615 83.45908356]
[113.84766388 72.00430298]
[123.53208160 60.54952240]
[126.77490234 51.78807449]
[133.73655701 48.88080978]
[143.79832458 37.75602722]
[149.93869019 21.95310974]
[166.82385254 23.47882652]
[170.03204346 40.12646484]
[154.92311096 47.81779861]
[144.86134338 58.94258118]
[134.98686218 70.23394012]
[125.30245209 81.68872070]
[115.61803436 93.14350128]
[129.60862732 87.73394775]
[139.98431396 76.90135193]
[153.64552307 70.70687866]
[168.63069153 70.03995514]
[182.78816223 74.99634552]
[194.08514404 84.86437988]
[200.89956665 98.22715759]
[202.25294495 113.16597748]
[197.95097351 127.53584290]
[188.61135864 139.27345276]
[175.57511902 146.69346619]
[160.71408081 148.73046875]
[146.16206360 145.09196472]
[134.00851440 136.30041504]
[125.99861145 123.61840057]
[113.36587524 115.53050232]
[120.57460785 128.68475342]
[127.78333282 141.83900452]
[134.99205017 154.99325562]
[150.23124695 159.18165588]
[157.97261047 172.96014404]
[153.62332153 188.15420532]
[139.76376343 195.74945068]
[124.61653137 191.23977661]
[117.16823578 177.30067444]
[121.83780670 162.20198059]
[114.62908173 149.04772949]
[107.42035675 135.89347839]
[100.21163177 122.73923492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[6 45]
[7 44]
[8 43]
[9 42]
[13 40]
[14 39]
[15 38]
[16 37]
[20 34]
[21 33]
[22 32]
[24 31]
[25 30]
[51 64]
[52 63]
[53 62]
[55 61]
[56 60]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
