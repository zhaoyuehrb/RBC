%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUAGCAGGGAGAGGGGCGGAGAGGCAGCGAACCUCUCAAUGUGCAGCAGGCCGCGAGGGCUAUAUAAAGCUCGGGUCUCGGACCUACUGGAACUGGUCAAGAUUGCCCGCGAGCUGGCAGCGGCCUUCCGCCCAGCUCUGCGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[77.66500092 116.17544556]
[63.58142853 121.33810425]
[49.49785614 126.50076294]
[35.41428757 131.66342163]
[21.33071518 136.82608032]
[7.24714470 141.98873901]
[-5.35438967 159.27001953]
[-25.53705788 155.12065125]
[-39.27365875 161.14608765]
[-53.01025772 167.17150879]
[-59.16329193 185.03723145]
[-76.10431671 192.66227722]
[-92.97066498 185.66485596]
[-106.44652557 192.25280762]
[-119.92239380 198.84075928]
[-133.39825439 205.42871094]
[-146.87413025 212.01666260]
[-160.34999084 218.60461426]
[-165.56703186 233.28179932]
[-179.32733154 239.77095032]
[-193.28764343 234.70684814]
[-206.76350403 241.29479980]
[-208.45448303 256.62921143]
[-218.18516541 268.60073853]
[-232.85054016 273.38928223]
[-247.77093506 269.46688843]
[-258.18530273 258.08511353]
[-260.77047729 242.87590027]
[-254.70150757 228.69241333]
[-241.91499329 220.06056213]
[-226.49107361 219.73475647]
[-213.35145569 227.81892395]
[-199.87559509 221.23098755]
[-195.29728699 207.10389709]
[-181.72468567 200.23080444]
[-166.93794250 205.12873840]
[-153.46206665 198.54078674]
[-139.98620605 191.95285034]
[-126.51034546 185.36489868]
[-113.03447723 178.77694702]
[-99.55861664 172.18899536]
[-98.26276398 160.77973938]
[-91.52722168 151.33201599]
[-80.94676208 146.28359985]
[-69.12538910 147.00619507]
[-59.03568649 153.43490601]
[-45.29908752 147.40948486]
[-31.56248856 141.38404846]
[-29.69541550 132.59150696]
[-23.87542343 125.56112671]
[-15.33128643 121.97808075]
[-5.96212053 122.77767944]
[2.08448648 127.90516663]
[16.16805649 122.74250793]
[30.25162697 117.57984924]
[44.33519745 112.41719055]
[58.41876984 107.25453186]
[72.50234222 102.09187317]
[73.48036194 92.43652344]
[77.74266052 83.71786499]
[84.76136780 77.01562500]
[80.18511963 62.73073959]
[75.60887909 48.44585419]
[71.03263092 34.16096878]
[66.45639038 19.87608147]
[52.29150391 12.86668968]
[47.31102753 -2.13232374]
[54.46978378 -16.22230911]
[69.52061462 -21.04393005]
[83.53412628 -13.73660183]
[88.19635010 1.36436522]
[80.74127197 15.29983616]
[85.31752014 29.58472252]
[89.89376068 43.86960983]
[94.47000885 58.15449524]
[99.04625702 72.43938446]
[112.29309082 72.22594452]
[125.30855560 78.56055450]
[135.00305176 67.11429596]
[144.69754028 55.66803741]
[154.39202881 44.22177505]
[164.08651733 32.77551270]
[163.80871582 19.83907509]
[172.17160034 10.49792385]
[184.25982666 9.42109394]
[194.18879700 -1.82236779]
[204.11776733 -13.06582928]
[214.04675293 -24.30928993]
[209.08392334 -38.84428024]
[212.06922913 -53.91025162]
[222.19963074 -65.45453644]
[236.75010681 -70.37178040]
[251.80664062 -67.33926392]
[263.31912231 -57.17272568]
[268.19073486 -42.60691071]
[265.11102295 -27.55994797]
[254.90846252 -16.07939911]
[240.32743835 -11.25346947]
[225.29020691 -14.38031387]
[215.36123657 -3.13685226]
[205.43225098 8.10660934]
[195.50328064 19.35007095]
[192.98558044 36.69029999]
[175.53277588 42.47000122]
[165.83828735 53.91626358]
[156.14379883 65.36252594]
[146.44931030 76.80878448]
[136.75482178 88.25504303]
[138.45628357 103.15823364]
[150.48127747 112.12481689]
[162.59828186 120.96665955]
[174.80601501 129.68281555]
[187.01374817 138.39897156]
[199.22146606 147.11511230]
[211.51863098 155.70465088]
[223.90388489 164.16664124]
[236.28913879 172.62864685]
[248.67440796 181.09063721]
[261.05966187 189.55262756]
[273.44491577 198.01461792]
[285.83016968 206.47662354]
[292.48422241 207.37034607]
[296.97604370 210.98046875]
[298.54251099 215.55303955]
[310.56750488 224.51962280]
[322.59246826 233.48622131]
[334.61746216 242.45280457]
[350.95861816 243.83067322]
[357.69012451 258.78457642]
[347.88714600 271.93121338]
[331.63418579 269.74645996]
[325.65087891 254.47778320]
[313.62588501 245.51119995]
[301.60089111 236.54461670]
[289.57592773 227.57803345]
[277.36819458 218.86187744]
[264.98294067 210.39988708]
[252.59767151 201.93788147]
[240.21240234 193.47589111]
[227.82714844 185.01390076]
[215.44189453 176.55191040]
[203.05662537 168.08990479]
[195.71313477 166.90586853]
[190.50532532 159.32284546]
[178.29759216 150.60670471]
[166.08985901 141.89054871]
[153.88212585 133.17439270]
[146.56468201 131.83883667]
[141.51469421 124.14981079]
[129.48970032 115.18321991]
[112.63763428 128.64070129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[6 53]
[8 48]
[9 47]
[10 46]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[21 33]
[22 32]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[85 102]
[86 101]
[87 100]
[88 99]
[109 150]
[110 149]
[111 147]
[112 146]
[113 145]
[114 144]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
