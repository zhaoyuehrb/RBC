%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCAGCCUCAUCCGCCAUCACUCCGGGAACCGAGCACCCCGCUGCCUCGGCGCCCAGGCUGCUCUCUCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[83.68288422 304.99545288]
[85.33264160 289.88430786]
[92.64398193 276.55715942]
[104.50199127 267.04632568]
[100.27600098 252.65393066]
[96.05001068 238.26153564]
[91.82402802 223.86914062]
[87.59803772 209.47674561]
[83.37204742 195.08435059]
[79.14605713 180.69195557]
[74.92007446 166.29956055]
[67.88863373 179.54943848]
[56.87350464 189.73112488]
[43.11245728 195.70051575]
[28.15184212 196.78680420]
[13.67280674 192.86793518]
[1.30237758 184.38427734]
[-7.56936264 172.28913879]
[-11.94548512 157.94168091]
[-11.33423805 142.95414734]
[-5.80430889 129.01069641]
[4.02289677 117.67816925]
[17.04308319 110.23003387]
[31.79315376 107.50323486]
[46.61562347 109.80419159]
[59.84487152 116.87434387]
[69.99430847 127.91919708]
[75.92424774 141.70101929]
[81.30928802 127.70097351]
[86.69432831 113.70092773]
[80.90597534 100.41780853]
[86.10775757 86.89421082]
[99.30562592 80.91403198]
[104.69066620 66.91398621]
[110.07570648 52.91393661]
[115.46074677 38.91389084]
[120.84578705 24.91384315]
[125.94412231 10.80686092]
[130.75364685 -3.40118432]
[123.52772522 -17.45684814]
[128.43656921 -32.47945786]
[142.56785583 -39.55636215]
[157.53771973 -34.48896408]
[164.46482849 -20.28365707]
[159.23944092 -5.36819935]
[144.96168518 1.40833259]
[140.15217590 15.61637783]
[141.01562500 23.17336273]
[134.84584045 30.29888344]
[129.46080017 44.29893112]
[124.07575226 58.29897690]
[118.69071198 72.29902649]
[113.30567169 86.29907227]
[119.09402466 99.58219147]
[113.89224243 113.10578918]
[100.69437408 119.08596802]
[95.30933380 133.08601379]
[89.92429352 147.08605957]
[89.31246948 162.07357788]
[93.53845215 176.46597290]
[97.76444244 190.85836792]
[101.99043274 205.25076294]
[106.21642303 219.64315796]
[110.44240570 234.03555298]
[114.66839600 248.42794800]
[118.89438629 262.82034302]
[134.01191711 264.41046143]
[147.36781311 271.66912842]
[156.92538452 283.48953247]
[161.22715759 298.06906128]
[159.61717224 313.18450928]
[152.34091187 326.53082275]
[140.50796509 336.07284546]
[125.92277527 340.35543823]
[110.80947113 338.72555542]
[97.47272491 331.43176270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[28 58]
[29 57]
[30 56]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
