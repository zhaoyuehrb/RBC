%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACUUUAGAUAAGGACAAUUAGUCACUAGCGAGACCCAGUAGGAAGAGAGGUUUAAAUCAGAGGGAUUGA\
) } def
/len { sequence length } bind def

/coor [
[89.11871338 371.46594238]
[80.42653656 358.96130371]
[77.57830811 344.00109863]
[81.06750488 329.17730713]
[90.28959656 317.05819702]
[103.64680481 309.74346924]
[102.37471008 294.79751587]
[101.10262299 279.85156250]
[99.83053589 264.90560913]
[96.01044464 258.31225586]
[98.83544159 249.30052185]
[98.19882965 234.31404114]
[97.56221008 219.32756042]
[86.45306396 209.47248840]
[85.59395599 194.28312683]
[96.00618744 182.69764709]
[95.36956787 167.71116638]
[94.73295593 152.72468567]
[94.09633636 137.73820496]
[80.11590576 132.61361694]
[69.15706635 122.53305054]
[62.88512802 109.02836609]
[62.25317764 94.15172577]
[67.35723877 80.16378784]
[77.42170715 69.19016266]
[90.91718292 62.89841843]
[90.28056335 47.91193390]
[86.70149231 39.17226028]
[89.94866943 32.27869415]
[89.94866943 17.27869415]
[89.94866943 2.27869415]
[86.74374390 -6.60500288]
[90.28056335 -13.35454464]
[78.04213715 -22.89397049]
[73.78054810 -37.81437302]
[79.13444519 -52.37855530]
[92.04516602 -60.98628998]
[107.54825592 -60.32772446]
[119.68247223 -50.65609741]
[123.78195953 -35.69034195]
[118.27037811 -21.18509674]
[105.26704407 -12.71792698]
[104.94866943 2.27869415]
[104.94866943 17.27869415]
[104.94866943 32.27869415]
[105.26704407 47.27531433]
[105.90366364 62.26179886]
[119.88409424 67.38638306]
[130.84294128 77.46694946]
[137.11486816 90.97163391]
[137.74682617 105.84827423]
[132.64276123 119.83621216]
[122.57829285 130.80982971]
[109.08281708 137.10157776]
[109.71943665 152.08807373]
[110.35605621 167.07455444]
[110.99267578 182.06103516]
[122.34991455 192.72175598]
[122.78204346 207.92924500]
[112.54869080 218.69094849]
[113.18531036 233.67742920]
[113.82192993 248.66390991]
[114.77649689 263.63351440]
[116.04858398 278.57946777]
[117.32067871 293.52542114]
[118.59276581 308.47140503]
[132.99403381 313.42349243]
[144.13160706 323.80975342]
[150.07585144 337.83065796]
[149.79687500 353.05703735]
[143.34301758 366.85076904]
[131.83245850 376.82208252]
[117.25945282 381.24331665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 66]
[7 65]
[8 64]
[9 63]
[11 62]
[12 61]
[13 60]
[16 57]
[17 56]
[18 55]
[19 54]
[26 47]
[27 46]
[29 45]
[30 44]
[31 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
