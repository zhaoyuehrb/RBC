%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGAGAGGGGGGUCCAGUCUCCCCUGGCCGAGCAUUUUUUUUUUUUUUUGGAAGUCCUAGGACUGAUCUCCAGGACCAGCACUCUUCUCCCAGCCCUUAGGGUCCUGCUCGGCCAAGGCCUUCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[127.42542267 202.03710938]
[126.01026917 187.10401917]
[124.59511566 172.17092896]
[123.17996979 157.23782349]
[121.76481628 142.30473328]
[120.34966278 127.37163544]
[113.41212463 124.52198029]
[99.53704071 118.82267761]
[92.59950256 115.97302246]
[81.09619141 125.59974670]
[69.59288025 135.22647095]
[58.08957291 144.85319519]
[46.58626175 154.47993469]
[35.08295059 164.10665894]
[23.57964325 173.73338318]
[22.43137550 189.49589539]
[10.41918087 199.76638794]
[-5.33031797 198.45152283]
[-15.47322273 186.33142090]
[-13.99192810 170.59669495]
[-1.76526034 160.58250427]
[13.95291615 162.23007202]
[25.45622444 152.60334778]
[36.95953369 142.97662354]
[48.46284485 133.34988403]
[59.96615219 123.72316742]
[71.46945953 114.09643555]
[82.97277069 104.46971130]
[91.32472992 92.00998688]
[95.85877991 77.71164703]
[100.39282227 63.41331100]
[104.92687225 49.11497498]
[109.46092224 34.81663895]
[113.99496460 20.51830292]
[118.52901459 6.21996641]
[123.06306458 -8.07836914]
[127.59710693 -22.37670517]
[118.70473480 -27.55337334]
[110.86347961 -34.20693588]
[104.31554413 -42.12924957]
[99.26274872 -51.07301712]
[95.86026764 -60.75951385]
[94.21188354 -70.88726044]
[94.36681366 -81.14142609]
[96.31825256 -91.20359039]
[100.00364685 -100.76167297]
[105.30667877 -109.51954651]
[112.06096649 -117.20629120]
[120.05525208 -123.58448792]
[129.04003906 -128.45764160]
[138.73533630 -131.67616272]
[148.83946228 -133.14199829]
[149.90150452 -148.10435486]
[138.19622803 -158.11897278]
[134.67349243 -172.93261719]
[140.48036194 -186.81584167]
[153.19656372 -194.52534485]
[154.25860596 -209.48770142]
[155.32066345 -224.45005798]
[156.38272095 -239.41241455]
[157.44477844 -254.37477112]
[154.91365051 -263.25323486]
[158.71272278 -269.67663574]
[160.12788391 -284.60971069]
[161.54302979 -299.54281616]
[151.27998352 -311.56137085]
[152.60458374 -327.31005859]
[164.73097229 -337.44546509]
[180.46476746 -335.95440674]
[190.47140503 -323.72155762]
[188.81410217 -308.00439453]
[176.47613525 -298.12765503]
[175.06097412 -283.19458008]
[173.64582825 -268.26147461]
[172.40713501 -253.31271362]
[171.34507751 -238.35035706]
[170.28302002 -223.38800049]
[169.22096252 -208.42564392]
[168.15890503 -193.46328735]
[179.65863037 -184.03489685]
[183.44624329 -169.47062683]
[177.86636353 -155.30311584]
[164.86386108 -147.04229736]
[163.80180359 -132.07995605]
[169.86763000 -130.49971008]
[175.72717285 -128.27323914]
[181.31179810 -125.42660522]
[186.55610657 -121.99316406]
[191.39869690 -118.01310730]
[195.78282166 -113.53305817]
[199.65715027 -108.60548401]
[202.97630310 -103.28810120]
[205.70141602 -97.64318085]
[207.80056763 -91.73683167]
[209.24916077 -85.63822937]
[210.03025818 -79.41880798]
[225.00410461 -78.53353119]
[239.97796631 -77.64826202]
[254.95181274 -76.76298523]
[271.12017822 -81.86399078]
[280.49768066 -67.73958588]
[269.52124023 -54.81853867]
[254.06654358 -61.78913498]
[239.09269714 -62.67440796]
[224.11883545 -63.55968094]
[209.14498901 -64.44495392]
[196.34063721 -37.50686646]
[171.77433777 -20.44638443]
[141.89544678 -17.84265900]
[137.36140442 -3.54432225]
[132.82734680 10.75401402]
[128.29330444 25.05234909]
[123.75925446 39.35068512]
[119.22520447 53.64902115]
[114.69116211 67.94735718]
[110.15711212 82.24569702]
[105.62306976 96.54402924]
[112.00885773 95.56831360]
[118.77014160 97.04843140]
[125.17929077 101.04777527]
[130.50769043 107.43820190]
[134.07272339 115.90393829]
[135.28276062 125.95648193]
[136.69790649 140.88958740]
[138.11306763 155.82267761]
[139.52821350 170.75576782]
[140.94335938 185.68887329]
[142.35852051 200.62196350]
[153.75628662 211.91224670]
[151.89239502 227.84664917]
[138.19667053 236.20167542]
[123.17528534 230.56806946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[29 117]
[30 116]
[31 115]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[37 109]
[52 84]
[53 83]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[63 74]
[64 73]
[65 72]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
