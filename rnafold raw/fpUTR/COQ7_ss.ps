%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGUCCGAGCCAAGGGCACUAUUGGCCAGUUCCGUUCAACGAAGUGGUUGCUUUUUUUAGUUCCGGCA\
) } def
/len { sequence length } bind def

/coor [
[87.05292511 256.66577148]
[71.38767242 254.57402039]
[61.85627365 241.96736145]
[64.11354065 226.32508850]
[76.82026672 216.92752075]
[78.80558014 202.05947876]
[80.79088593 187.19143677]
[74.80615997 173.55207825]
[84.30189514 160.89736938]
[86.28720093 146.02932739]
[88.27251434 131.16128540]
[90.25782013 116.29325104]
[81.05811310 98.74094391]
[92.50000000 82.56066895]
[92.50000000 67.56066895]
[92.50000000 52.56066895]
[92.50000000 37.56066895]
[92.50000000 22.56067085]
[92.50000000 7.56066990]
[92.50000000 -7.43933010]
[79.88481903 0.67591512]
[65.14562225 -2.10907030]
[56.36122894 -14.26778698]
[58.34651184 -29.13582802]
[70.01330566 -38.56375885]
[84.96683502 -37.38396454]
[95.01083374 -26.24305153]
[98.94651794 -40.71752548]
[102.88220215 -55.19200134]
[106.81788635 -69.66647339]
[102.97254181 -85.01325989]
[113.77812958 -95.26452637]
[117.71381378 -109.73899841]
[121.64949799 -124.21347046]
[111.82421875 -136.22361755]
[110.96839905 -151.71707153]
[119.41111755 -164.73629761]
[133.90597534 -170.27513123]
[148.87940979 -166.20376587]
[158.57382202 -154.08775330]
[159.26152039 -138.58592224]
[150.67807007 -125.65904999]
[136.12397766 -120.27778625]
[132.18829346 -105.80331421]
[128.25260925 -91.32884216]
[132.37945557 -77.01736450]
[121.29235840 -65.73078918]
[117.35667419 -51.25631714]
[113.42098999 -36.78184128]
[109.48530579 -22.30736732]
[107.50000000 -7.43933010]
[107.50000000 7.56066990]
[107.50000000 22.56067085]
[107.50000000 37.56066895]
[107.50000000 52.56066895]
[107.50000000 67.56066895]
[107.50000000 82.56066895]
[114.85339355 88.17811584]
[118.67755127 96.60449982]
[118.06382751 105.83766937]
[113.15805054 113.68378448]
[105.12585449 118.27856445]
[103.14054871 133.14660645]
[101.15524292 148.01463318]
[99.16992950 162.88267517]
[105.01265717 177.58551025]
[95.65892029 189.17674255]
[93.67361450 204.04478455]
[91.68830872 218.91282654]
[101.48413086 231.31513977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[9 65]
[10 64]
[11 63]
[12 62]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[27 50]
[28 49]
[29 48]
[30 47]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
