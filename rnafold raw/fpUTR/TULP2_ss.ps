%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGGAAGUGGAGAGUGGAGGGUCAGAAGGGAGUGGACCAGUUCAGGUCCCAGAGGGAAUCCUCCCUCCCUCUGAGCCGUCUUUCUUCUCCUCCCUAUUUCGCAGAUAUCCCGAGAUUAGGUCCCCAGCUUCCAAAGAGAGGAUCAGA\
) } def
/len { sequence length } bind def

/coor [
[82.86151123 267.01489258]
[84.80683136 252.01252747]
[91.29475403 238.34643555]
[101.68966675 227.35548401]
[114.97317505 220.11643982]
[112.19900513 205.37521362]
[109.42484283 190.63397217]
[106.65067291 175.89274597]
[103.87650299 161.15150452]
[101.10234070 146.41027832]
[98.32817078 131.66903687]
[95.55400848 116.92780304]
[87.61106110 104.20343018]
[75.58607483 95.23684692]
[63.56108475 86.27026367]
[51.53609848 77.30367279]
[39.51110840 68.33708954]
[27.48612213 59.37049866]
[7.41688204 57.98706055]
[0.41782567 40.00159836]
[-11.96743393 31.53960228]
[-24.35269356 23.07760811]
[-40.11214066 21.68103981]
[-46.25597763 8.11260223]
[-58.64123535 -0.34939253]
[-71.11328125 -8.68294621]
[-83.67077637 -16.88716888]
[-96.22827911 -25.09139061]
[-108.78577423 -33.29561234]
[-121.34326935 -41.49983597]
[-130.30062866 -43.59490204]
[-134.07308960 -50.00562668]
[-146.45834351 -58.46762085]
[-158.84359741 -66.92961884]
[-171.22886658 -75.39160919]
[-183.61412048 -83.85360718]
[-201.75326538 -74.63433838]
[-225.15762329 -86.87300873]
[-239.44250488 -91.44924927]
[-253.72738647 -96.02549744]
[-268.01226807 -100.60173798]
[-282.29714966 -105.17798615]
[-296.23263550 -97.72290802]
[-311.33358765 -102.38513184]
[-318.64093018 -116.39864349]
[-313.81930542 -131.44947815]
[-299.72930908 -138.60823059]
[-284.73031616 -133.62776184]
[-277.72091675 -119.46287537]
[-263.43603516 -114.88662720]
[-249.15113831 -110.31037903]
[-234.86625671 -105.73413849]
[-220.58137512 -101.15789032]
[-216.09808350 -107.17038727]
[-207.13148499 -119.19537354]
[-202.64819336 -125.20787048]
[-211.11019897 -137.59312439]
[-219.57218933 -149.97837830]
[-228.03417969 -162.36364746]
[-243.04254150 -168.97282410]
[-244.55377197 -185.30218506]
[-231.01325989 -194.55349731]
[-216.35032654 -187.20977783]
[-215.64892578 -170.82563782]
[-207.18693542 -158.44038391]
[-198.72492981 -146.05511475]
[-190.26293945 -133.66986084]
[-172.48794556 -115.62297058]
[-175.15213013 -96.23886108]
[-162.76687622 -87.77687073]
[-150.38160706 -79.31487274]
[-137.99635315 -70.85288239]
[-125.61109161 -62.39088440]
[-113.13904572 -54.05733109]
[-100.58155060 -45.85311127]
[-88.02405548 -37.64888763]
[-75.46655273 -29.44466591]
[-62.90905762 -21.24044228]
[-55.54266357 -20.20842743]
[-50.17924118 -12.73465157]
[-37.79398346 -4.27265692]
[-22.92041206 -3.48134804]
[-15.89069843 10.69234848]
[-3.50543904 19.15434265]
[8.87981987 27.61633873]
[18.78821945 24.82028198]
[28.79908752 28.03941917]
[35.49584198 36.43090820]
[36.45270920 47.34551239]
[48.47769547 56.31209946]
[60.50268555 65.27868652]
[72.52767181 74.24526978]
[84.55265808 83.21186066]
[96.57764435 92.17844391]
[99.82106781 82.36569214]
[110.21700287 75.29653168]
[125.56492615 74.89488983]
[140.40821838 72.73227692]
[155.25149536 70.56965637]
[170.09478760 68.40704346]
[184.91493225 66.09114838]
[199.71034241 63.62223434]
[214.50576782 61.15331268]
[229.30117798 58.68439484]
[244.09660339 56.21547699]
[250.09274292 42.00104904]
[262.83480835 33.30373383]
[278.25683594 32.89880753]
[291.43777466 40.91548157]
[298.17156982 54.79566574]
[296.30950928 70.11024475]
[286.44577026 81.97238922]
[271.72787476 86.59693909]
[256.85217285 82.50820160]
[246.56552124 71.01089478]
[231.77009583 73.47981262]
[216.97468567 75.94873047]
[202.17926025 78.41765594]
[187.38385010 80.88657379]
[181.26524353 85.11641693]
[172.25740051 83.25032806]
[157.41410828 85.41294098]
[142.57083130 87.57556152]
[127.72754669 89.73817444]
[123.36946869 95.84204102]
[138.29975891 97.28649139]
[144.51405334 110.93869019]
[135.79812622 123.14658356]
[120.86781311 121.70240784]
[114.65331268 108.04977417]
[110.29524231 114.15364075]
[113.06940460 128.89486694]
[115.84357452 143.63610840]
[118.61774445 158.37733459]
[121.39190674 173.11857605]
[124.16607666 187.85981750]
[126.94023895 202.60104370]
[129.71441650 217.34228516]
[144.72065735 219.25743103]
[158.39976501 225.71788025]
[169.41159058 236.09066772]
[176.67730713 249.35960388]
[179.48509216 264.22470093]
[177.55989075 279.22967529]
[171.09028625 292.90444946]
[160.71011353 303.90930176]
[147.43630981 311.16613770]
[132.56932068 313.96395874]
[117.56566620 312.02871704]
[103.89522552 305.54992676]
[92.89731598 295.16238403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 138]
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[12 131]
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[20 85]
[21 84]
[22 83]
[24 81]
[25 80]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[56 67]
[57 66]
[58 65]
[59 64]
[97 124]
[98 123]
[99 122]
[100 121]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
