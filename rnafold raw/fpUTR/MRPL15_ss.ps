%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGAGACCACGUGGCCUCCGAGCAGCUCAGGGCGCCCUUGAAAGUUCUUGGAUCUGCGGGUU\
) } def
/len { sequence length } bind def

/coor [
[75.27979279 260.36431885]
[61.76714325 268.56088257]
[46.43648911 264.72076416]
[38.38323593 251.12220764]
[42.38523483 235.83300781]
[56.06817245 227.92396545]
[59.71287537 213.37350464]
[63.35757828 198.82302856]
[67.00228119 184.27256775]
[65.51507568 176.74195862]
[71.19933319 169.10635376]
[75.55360413 154.75225830]
[79.90787506 140.39814758]
[84.26214600 126.04404449]
[88.61641693 111.68993378]
[83.70647430 100.87274933]
[87.43281555 89.59296417]
[97.82030487 83.82936096]
[102.87365723 69.70619965]
[107.92700195 55.58304214]
[112.98035431 41.45988083]
[118.03369904 27.33671761]
[123.08704376 13.21355724]
[123.06993103 3.69447398]
[128.75044250 -1.46823835]
[134.49069214 -15.32643127]
[140.23094177 -29.18462372]
[145.28428650 -43.30778503]
[149.63856506 -57.66189194]
[153.99282837 -72.01599884]
[158.34710693 -86.37010193]
[162.70137024 -100.72420502]
[167.05564880 -115.07830811]
[165.86750793 -131.99057007]
[181.78993225 -137.81405640]
[191.79359436 -124.12598419]
[181.40974426 -110.72403717]
[177.05548096 -96.36993408]
[172.70120239 -82.01583099]
[168.34693909 -67.66172791]
[163.99266052 -53.30762100]
[159.63839722 -38.95351410]
[161.26092529 -34.09286499]
[159.56260681 -28.16657829]
[154.08914185 -23.44437218]
[148.34889221 -9.58617973]
[142.60862732 4.27201319]
[137.21020508 18.26690483]
[132.15686035 32.39006424]
[127.10351562 46.51322556]
[122.05016327 60.63638687]
[116.99681854 74.75955200]
[111.94346619 88.88271332]
[115.49333954 105.11830902]
[102.97052002 116.04420471]
[98.61624908 130.39831543]
[94.26197815 144.75241089]
[89.90771484 159.10652161]
[85.55344391 173.46063232]
[81.55274963 187.91726685]
[77.90805054 202.46774292]
[74.26334381 217.01820374]
[70.61864471 231.56867981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[9 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[25 47]
[26 46]
[27 45]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
