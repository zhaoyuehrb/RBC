%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCCUUGGCAACGCACUUAGCAGUGCCAGUGGCAGCAGCAGCCAUGGGGAAGCCGGGCGUGGAGGCAGCACCGGGCUCGGAGCUGGCCAGGGUUCCCUAGCCU\
) } def
/len { sequence length } bind def

/coor [
[94.86782074 187.29837036]
[81.94313812 176.32618713]
[88.90861511 160.86920166]
[89.78893280 145.89505005]
[90.66924286 130.92089844]
[91.54956055 115.94675446]
[85.43058014 111.60993195]
[67.07363129 98.59944916]
[53.23659897 104.39052582]
[39.39956665 110.18159485]
[25.56253624 115.97267151]
[11.72550297 121.76374054]
[-2.11152959 127.55481720]
[-8.17541313 141.90287781]
[-22.29062843 147.57875061]
[-35.93194962 141.70933533]
[-49.76898193 147.50041199]
[-57.15989304 161.73957825]
[-72.92788696 164.69761658]
[-84.97710419 154.10534668]
[-84.06442261 138.08828735]
[-70.88996124 128.93331909]
[-55.56005478 133.66337585]
[-41.72302246 127.87229919]
[-36.32886505 114.03617096]
[-22.37864113 107.96607971]
[-7.90260315 113.71778107]
[5.93442965 107.92671204]
[19.77146149 102.13563538]
[33.60849380 96.34456635]
[47.44552612 90.55348969]
[61.28255844 84.76242065]
[64.12788391 70.03475189]
[53.44371033 59.50628662]
[42.75954056 48.97782516]
[32.07537079 38.44936371]
[16.52585220 40.10660172]
[3.57789278 31.33822632]
[-0.65487361 16.28439903]
[5.82613468 2.05307627]
[19.96078300 -4.63614702]
[35.07512665 -0.62482381]
[44.03262711 12.19302177]
[42.60383224 27.76519394]
[53.28800201 38.29365540]
[63.97217178 48.82212067]
[74.65634155 59.35058212]
[111.17633820 90.69003296]
[125.46916199 86.13862610]
[139.76197815 81.58721924]
[154.05480957 77.03581238]
[168.34762573 72.48441315]
[182.64044189 67.93300629]
[196.93325806 63.38160324]
[207.73512268 51.82173538]
[222.21006775 55.33245850]
[236.50288391 50.78105545]
[247.30473328 39.22118759]
[261.77969360 42.73191452]
[276.07250977 38.18050766]
[290.36532593 33.62910461]
[277.57748413 25.78873825]
[272.58837891 11.64276028]
[277.62823486 -2.48522305]
[290.44409180 -10.27965355]
[305.30700684 -8.25622654]
[315.57284546 2.68053460]
[316.65249634 17.64162827]
[308.06231689 29.93984222]
[322.98318481 28.40111923]
[337.90405273 26.86239433]
[352.82492065 25.32367134]
[365.75857544 16.21154404]
[379.21243286 22.60244370]
[394.13330078 21.06371880]
[409.05416870 19.52499390]
[422.01577759 9.47867012]
[437.09255981 15.93023300]
[438.77481079 32.24287033]
[425.33197021 41.63553619]
[410.59289551 34.44586182]
[395.67202759 35.98458862]
[380.75115967 37.52331161]
[368.88473511 46.52537918]
[354.36364746 40.24454117]
[339.44277954 41.78326416]
[324.52191162 43.32198715]
[309.60104370 44.86071014]
[294.91671753 47.92192459]
[280.62390137 52.47333145]
[266.33108521 57.02473450]
[256.55154419 68.25905609]
[241.05429077 65.07387543]
[226.76147461 69.62528229]
[216.98193359 80.85960388]
[201.48466492 77.67442322]
[187.19184875 82.22583008]
[172.89903259 86.77722931]
[158.60620117 91.32863617]
[144.31338501 95.88004303]
[130.02056885 100.43144226]
[115.72774506 104.98284912]
[106.52370453 116.82707214]
[105.64338684 131.80122375]
[104.76307678 146.77536011]
[103.88275909 161.74951172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 106]
[4 105]
[5 104]
[6 103]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[16 24]
[17 23]
[33 47]
[34 46]
[35 45]
[36 44]
[48 102]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[54 96]
[56 94]
[57 93]
[59 91]
[60 90]
[61 89]
[69 88]
[70 87]
[71 86]
[72 85]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
