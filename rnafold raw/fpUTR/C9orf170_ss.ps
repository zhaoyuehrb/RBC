%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGCCAGCGAGAGGGGAGAAACAGAUUCACACCCAGGGGCCUCCGGGCAGGGCCCACGGGACUCAGGCCGUGUCCCGCUUGGA\
) } def
/len { sequence length } bind def

/coor [
[152.28088379 118.47437286]
[147.39836121 117.28932190]
[142.94635010 113.75187683]
[128.09902954 111.61715698]
[113.25170898 109.48242950]
[103.38835144 115.93873596]
[91.75160217 114.05304718]
[84.43188477 104.81229401]
[69.67021942 102.14899445]
[64.81247711 107.90254211]
[58.38531876 111.72396088]
[51.11330032 113.22246552]
[43.80327988 112.26689148]
[37.25491714 108.99646759]
[32.17318344 103.80170441]
[29.09250641 97.27811432]
[28.32068443 90.15799713]
[14.46249104 84.41774750]
[0.60429770 78.67749786]
[-13.35414505 73.18551636]
[-28.98812294 75.61231232]
[-38.20902634 63.91512299]
[-52.26327133 58.67316055]
[-66.31752014 53.43119812]
[-81.44937897 58.76096725]
[-94.97396088 50.13164520]
[-96.51636505 34.16291046]
[-84.89339447 23.10460663]
[-69.02119446 25.43972015]
[-61.07555771 39.37695312]
[-47.02130890 44.61891556]
[-32.96706390 49.86087799]
[-18.33834076 47.05913925]
[-8.11218262 59.13126755]
[-0.57484591 58.50417328]
[6.34454918 64.81930542]
[20.20274162 70.55955505]
[34.06093597 76.29980469]
[56.28537369 69.75678253]
[72.33351898 87.38732910]
[87.09518433 90.05062866]
[102.60652924 83.91490173]
[115.38642883 94.63510895]
[130.23374939 96.76983643]
[145.08106995 98.90455627]
[160.02137756 100.24152374]
[175.01181030 100.77690887]
[190.00225830 101.31229401]
[204.99270630 101.84767914]
[219.98313904 102.38306427]
[234.97358704 102.91844940]
[249.96401978 103.45383453]
[258.88153076 100.58381653]
[265.47723389 104.28536224]
[280.43899536 105.35544586]
[295.40078735 106.42553711]
[305.77835083 98.51896667]
[318.34973145 99.85729218]
[326.30429077 109.15824127]
[341.21835327 110.76167297]
[356.13238525 112.36509705]
[371.04644775 113.96852875]
[385.96051025 115.57195282]
[396.27062988 103.97534943]
[411.43515015 100.68652344]
[425.62304688 106.97010040]
[433.37875366 120.40991211]
[431.72006226 135.83808899]
[421.28475952 147.32215881]
[406.08541870 150.44628906]
[391.96652222 144.00917053]
[384.35708618 130.48600769]
[369.44302368 128.88258362]
[354.52896118 127.27915192]
[339.61492920 125.67572784]
[324.70086670 124.07229614]
[309.19387817 132.07676697]
[294.33068848 121.38732147]
[279.36892700 120.31723022]
[264.40713501 119.24713898]
[249.42863464 118.44427490]
[234.43820190 117.90888977]
[219.44775391 117.37350464]
[204.45732117 116.83812714]
[189.46687317 116.30274200]
[174.47642517 115.76735687]
[159.48599243 115.23197174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[8 41]
[9 40]
[17 38]
[18 37]
[19 36]
[20 34]
[22 32]
[23 31]
[24 30]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[54 80]
[55 79]
[56 78]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
