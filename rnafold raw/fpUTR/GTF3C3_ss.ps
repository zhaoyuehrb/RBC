%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUGAGUGCUGCAGCUGCGGCGCAGACCGGGCGAGUUUCCCAGAAGGACGCCGGUUCCUUGCUCUUGCUGGCCCCGGCGAGGUAGCUUCUGGAAGGCGCUGCUCUUCCGGUUCUCUGUCCCGGUUCCUGGGGUUGCACAGACAGACCCUGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[149.90257263 701.89147949]
[154.45091248 687.41125488]
[163.92602539 675.55432129]
[177.04649353 667.92425537]
[174.67053223 653.11364746]
[172.29455566 638.30297852]
[160.11422729 629.80743408]
[157.49366760 614.82116699]
[166.48721313 602.10290527]
[164.11125183 587.29229736]
[159.92372131 581.15252686]
[161.83833313 572.16381836]
[159.75729370 557.30889893]
[157.67625427 542.45397949]
[155.59523010 527.59899902]
[153.51419067 512.74407959]
[151.43316650 497.88912964]
[149.35212708 483.03417969]
[139.92391968 471.50341797]
[145.67182922 456.76327515]
[143.59078979 441.90832520]
[141.50976562 427.05337524]
[137.44512939 420.83157349]
[139.53807068 411.88272095]
[136.36021423 408.25125122]
[135.46565247 402.56933594]
[137.99006653 396.36328125]
[136.79830933 381.41070557]
[135.60656738 366.45812988]
[134.41481018 351.50552368]
[133.22305298 336.55294800]
[132.03131104 321.60037231]
[130.83955383 306.64779663]
[129.49920654 291.70779419]
[127.86208344 276.79739380]
[126.07681274 261.90402222]
[124.29154205 247.01063538]
[113.95295715 242.03720093]
[107.25012970 232.57853699]
[105.95736694 220.93702698]
[110.51431274 210.01635742]
[119.88681793 202.59729004]
[118.69506836 187.64471436]
[109.97103882 175.57240295]
[116.58745575 161.20112610]
[115.39570618 146.24855042]
[114.20394897 131.29595947]
[113.01219940 116.34337616]
[94.75905609 118.79602051]
[82.99261475 106.29582214]
[86.07352448 90.67966461]
[78.65978241 77.63985443]
[71.24604797 64.60005188]
[63.83230972 51.56024933]
[56.41857147 38.52044678]
[49.00483322 25.48064232]
[34.03144073 21.18701363]
[26.69861221 7.85718727]
[30.88420486 -6.39119530]
[23.47046661 -19.43099976]
[11.23259830 -23.61648941]
[5.33599710 -34.67486572]
[8.47325134 -46.39288712]
[1.32023871 -59.57751846]
[-12.93475056 -67.68475342]
[-12.77058125 -84.08308411]
[1.64386249 -91.90330505]
[15.48023701 -83.10064697]
[14.50486660 -66.73052979]
[21.65787888 -53.54590225]
[37.08219147 -45.22475052]
[36.51027298 -26.84473610]
[43.92400742 -13.80493259]
[58.30861282 -10.11457539]
[66.01295471 3.00402856]
[62.04463577 18.06690407]
[69.45837402 31.10670853]
[76.87211609 44.14651108]
[84.28585052 57.18631744]
[91.69958496 70.22612000]
[99.11332703 83.26592255]
[110.12988281 84.13386536]
[119.38947296 92.22364044]
[127.81578827 79.81407928]
[136.24209595 67.40451813]
[144.66842651 54.99495697]
[153.09474182 42.58539581]
[161.52105713 30.17583466]
[162.87225342 14.41243362]
[176.42295837 8.22957325]
[184.84927368 -4.17998743]
[193.27558899 -16.58954811]
[197.17114258 -33.08988571]
[214.10502625 -33.91432953]
[219.58502197 -17.87045097]
[205.68515015 -8.16323090]
[197.25883484 4.24632931]
[188.83251953 16.65588951]
[188.08401489 31.53167534]
[173.93061829 38.60214996]
[165.50430298 51.01171112]
[157.07797241 63.42127228]
[148.65165710 75.83083344]
[140.22534180 88.24039459]
[131.79902649 100.64995575]
[127.96478271 115.15162659]
[129.15653992 130.10420227]
[130.34828186 145.05679321]
[131.54003906 160.00936890]
[140.34930420 173.15119934]
[133.64764404 186.45295715]
[134.83940125 201.40554810]
[149.70451355 213.08148193]
[151.34384155 231.59350586]
[139.18492126 245.22535706]
[140.97019958 260.11874390]
[142.75546265 275.01211548]
[146.90411377 283.21276855]
[144.42514038 290.21899414]
[148.40992737 298.50048828]
[145.79212952 305.45602417]
[146.98388672 320.40859985]
[148.17564392 335.36120605]
[149.36738586 350.31378174]
[150.55914307 365.26635742]
[151.75090027 380.21893311]
[152.94264221 395.17153931]
[154.43145752 410.09747314]
[156.36470032 424.97235107]
[158.44573975 439.82730103]
[160.52676392 454.68225098]
[170.10382080 467.27551270]
[164.20707703 480.95315552]
[166.28810120 495.80810547]
[168.36914062 510.66302490]
[170.45016479 525.51800537]
[172.53120422 540.37292480]
[174.61222839 555.22784424]
[176.69326782 570.08282471]
[178.92187500 584.91632080]
[181.29785156 599.72692871]
[193.81832886 608.99383545]
[196.01692200 624.04779053]
[187.10519409 635.92706299]
[189.48115540 650.73767090]
[191.85713196 665.54827881]
[206.70587158 668.69146729]
[219.41433716 676.98962402]
[228.26380920 689.32049561]
[232.05746460 704.01647949]
[230.28225708 719.09008789]
[223.17826843 732.50268555]
[211.70623779 742.44036865]
[197.41767883 747.55908203]
[182.24497986 747.16662598]
[168.24015808 741.31604004]
[157.29722595 730.79858398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 146]
[5 145]
[6 144]
[9 141]
[10 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[20 131]
[21 130]
[22 129]
[24 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[34 119]
[35 117]
[36 116]
[37 115]
[42 112]
[43 111]
[45 109]
[46 108]
[47 107]
[48 106]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[59 73]
[60 72]
[63 70]
[64 69]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
