%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUCUGCACCCUCCUUCAGCCCAGGCAAGGCCUGGGGCCCUGGGCAGCCUCCAGGUGCAGUGCCCUCCCGUGGGCCGCACCCUUGCCACUGCCCCAGGGC\
) } def
/len { sequence length } bind def

/coor [
[-42.62600327 196.39739990]
[-31.88670349 206.86962891]
[-24.13270760 219.71000671]
[-19.86441422 234.08992004]
[-19.35727119 249.08134460]
[-22.64400864 263.71682739]
[-29.51251984 277.05187988]
[-39.51955032 288.22592163]
[-52.01930237 296.51785278]
[-66.20510864 301.39257812]
[-81.16150665 302.53546143]
[-95.92328644 299.87280273]
[-109.53781128 293.57638550]
[-121.12648010 284.05258179]
[-129.94142151 271.91598511]
[-135.41375732 257.94982910]
[-137.19035339 243.05541992]
[-135.15655518 228.19393921]
[-129.44360352 214.32447815]
[-120.42018127 202.34207153]
[-108.66861725 193.02001953]
[-94.94559479 186.95939636]
[-109.44429779 183.11395264]
[-123.94300842 179.26850891]
[-138.44171143 175.42306519]
[-152.94042969 171.57762146]
[-167.43913269 167.73216248]
[-181.93783569 163.88671875]
[-198.79769897 165.67042542]
[-205.17897034 149.96324158]
[-191.85214233 139.48316956]
[-178.09239197 149.38801575]
[-163.59368896 153.23345947]
[-149.09498596 157.07890320]
[-134.59626770 160.92434692]
[-120.09756470 164.76979065]
[-105.59885406 168.61524963]
[-91.10014343 172.46069336]
[-76.14373016 171.31800842]
[-62.39748001 165.31463623]
[-48.65122604 159.31126404]
[-34.90496826 153.30789185]
[-21.15871429 147.30451965]
[-7.41245937 141.30114746]
[6.33379555 135.29777527]
[20.08004951 129.29440308]
[33.73315430 123.08210754]
[47.28993607 116.66232300]
[60.84671783 110.24253082]
[59.89912796 94.54023743]
[65.01016998 79.66282654]
[75.40763855 67.85805511]
[89.52063751 60.90944290]
[105.21690369 59.86681366]
[120.12498474 64.88769531]
[131.99247742 75.21350861]
[145.34718323 68.38327789]
[158.70187378 61.55304718]
[172.05656433 54.72281265]
[185.41127014 47.89258194]
[191.75907898 41.08292770]
[199.27902222 41.06471634]
[205.83154297 34.45181274]
[213.34854126 34.66294098]
[227.09478760 28.65956879]
[240.84104919 22.65619659]
[254.58729553 16.65282440]
[260.12185669 1.84930062]
[274.53747559 -4.62874079]
[289.28167725 1.06200826]
[295.60693359 15.54532719]
[289.76062012 30.22851944]
[275.21124268 36.40030670]
[260.59066772 30.39908028]
[246.84442139 36.40245056]
[233.09815979 42.40582275]
[219.35191345 48.40919495]
[205.69880676 54.62149811]
[192.24150085 61.24728012]
[178.88681030 68.07751465]
[165.53210449 74.90774536]
[152.17741394 81.73797607]
[138.82270813 88.56820679]
[140.38916016 102.56998444]
[137.06065369 116.26028442]
[129.24058533 127.97993469]
[117.87672424 136.30856323]
[104.34629822 140.23678589]
[90.28912354 139.28851318]
[77.40885162 133.57868958]
[67.26651001 123.79931641]
[53.70972443 130.21910095]
[40.15294266 136.63888550]
[33.60041428 143.25178528]
[26.08342171 143.04066467]
[12.33716774 149.04403687]
[-1.40908742 155.04740906]
[-15.15534210 161.05078125]
[-28.90159798 167.05415344]
[-42.64785385 173.05752563]
[-56.39410782 179.06089783]
[-70.14036560 185.06427002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[39 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 93]
[48 92]
[49 91]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[62 78]
[64 77]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
