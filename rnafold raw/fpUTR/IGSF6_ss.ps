%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCUGAAAAAAGAAAGCCAACUUUCCUUUCAAAUACACACCCCAACCCGCCCCGGCAUACACAGAA\
) } def
/len { sequence length } bind def

/coor [
[36.11899948 157.39158630]
[27.33591270 145.76579285]
[20.64470482 132.82246399]
[16.23800468 118.93423462]
[14.24267483 104.50092316]
[14.71615696 89.93803406]
[0.02989546 86.88619232]
[-14.65636539 83.83435059]
[-29.34262657 80.78251648]
[-44.02888870 77.73067474]
[-53.12378693 84.43260193]
[-64.19076538 84.81777954]
[-73.35153198 79.00397491]
[-77.53813171 69.23738098]
[-91.88602448 64.86269379]
[-106.23392487 60.48800659]
[-120.58181763 56.11331558]
[-134.92971802 51.73862839]
[-150.77493286 55.96486664]
[-162.16444397 44.16609573]
[-157.38169861 28.47987938]
[-141.34677124 25.04285240]
[-130.55502319 37.39073181]
[-116.20713043 41.76542282]
[-101.85923004 46.14011002]
[-87.51133728 50.51480103]
[-73.16344452 54.88948822]
[-54.99964523 48.88491821]
[-40.97704697 63.04441071]
[-26.29078674 66.09625244]
[-11.60452557 69.14809418]
[3.08173561 72.19993591]
[17.76799774 75.25177002]
[23.51657677 60.95050430]
[31.72907448 47.90721893]
[42.14092636 36.54210663]
[54.41670609 27.22129059]
[68.16095734 20.24504662]
[82.93090820 15.83811378]
[98.25074005 14.14245987]
[113.62692261 15.21271229]
[128.56411743 19.01439285]
[142.58110046 25.42502785]
[155.22634888 34.23810196]
[166.09246826 45.16969681]
[174.82942200 57.86765671]
[181.15574646 71.92291260]
[184.86761475 86.88266754]
[185.84548950 102.26499939]
[200.74841309 103.96870422]
[215.65135193 105.67240906]
[232.07472229 101.46421051]
[240.66491699 116.08081055]
[228.99752808 128.38156128]
[213.94764709 120.57534027]
[199.04470825 118.87163544]
[184.14178467 117.16793823]
[180.02822876 131.14579773]
[173.61079407 144.22702026]
[165.07421875 156.03501892]
[154.66426086 166.22985840]
[142.68061829 174.51806641]
[129.46827698 180.66101074]
[115.40758514 184.48185730]
[100.90333557 185.87060547]
[86.37307739 184.78729248]
[72.23512268 181.26307678]
[58.89646530 175.39944458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
