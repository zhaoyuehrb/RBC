%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCCAGUCUAGCCCACUCCUUCAUAAAGCCCUCGCAUCCCAGGAGCGAGCAGAGCCAGAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[95.13104248 250.27391052]
[87.37950134 236.69274902]
[90.22212219 221.31570435]
[102.31670380 211.40333557]
[102.31670380 196.40333557]
[101.96506500 181.40745544]
[87.77171326 170.26902771]
[85.84394073 152.01875305]
[97.79345703 137.68476868]
[95.69038391 122.83293915]
[93.58731079 107.98110199]
[89.29734039 100.79632568]
[91.75072479 92.38558960]
[90.34610748 77.45149994]
[81.35053253 64.43650055]
[87.86203766 51.04061890]
[78.86646271 38.02561951]
[85.37796783 24.62973785]
[83.97334290 9.69564819]
[82.56872559 -5.23844194]
[81.16410065 -20.17253113]
[79.75947571 -35.10662079]
[66.72737885 -38.94347000]
[55.86730957 -47.05105972]
[48.51981354 -58.40040207]
[45.58200073 -71.56413269]
[47.39810562 -84.89604187]
[53.71927261 -96.73691559]
[63.73741531 -105.62105560]
[76.18843842 -110.45767975]
[76.18843842 -125.45767975]
[67.52473450 -139.38148499]
[75.48886108 -153.71691895]
[91.88800812 -153.71691895]
[99.85214233 -139.38148499]
[91.18843842 -125.45767975]
[91.18843842 -110.45767975]
[106.38153076 -103.78905487]
[117.29700470 -91.22151184]
[121.80180359 -75.14065552]
[118.98560333 -58.62527466]
[109.34432983 -44.85782623]
[94.69356537 -36.51124191]
[96.09819031 -21.57715416]
[97.50281525 -6.64306402]
[98.90743256 8.29102516]
[100.31205750 23.22511482]
[109.20716095 35.17193222]
[102.79612732 49.63599777]
[111.69123077 61.58281326]
[105.28019714 76.04688263]
[106.68481445 90.98097229]
[108.43914795 105.87802887]
[110.54222107 120.72986603]
[112.64529419 135.58169556]
[123.71011353 140.96002197]
[130.59535217 151.00790405]
[131.59686279 163.02470398]
[126.57263947 173.85214233]
[116.94857788 180.70437622]
[120.58074951 189.47637939]
[117.31670380 196.40333557]
[117.31670380 211.40333557]
[129.41128540 221.31570435]
[132.25390625 236.69274902]
[124.50236511 250.27391052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 60]
[9 55]
[10 54]
[11 53]
[13 52]
[14 51]
[16 49]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
