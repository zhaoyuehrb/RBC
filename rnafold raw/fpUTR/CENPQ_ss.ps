%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGUUUACGAAUGUUUGGGCGCGAAUUACUCUAAGCGCGGCUCUCAGAAGGGUGCAAGAAGAAUCAGUGCACUGUGUUUAGAUCAAG\
) } def
/len { sequence length } bind def

/coor [
[-71.84922791 256.62771606]
[-82.69970703 249.07380676]
[-95.13526917 257.46170044]
[-107.42255402 266.06533813]
[-119.55780792 274.88211060]
[-131.69306946 283.69891357]
[-143.82832336 292.51568604]
[-155.96357727 301.33245850]
[-168.09883118 310.14923096]
[-167.96415710 325.66574097]
[-177.00296021 338.27841187]
[-191.73963928 343.13745117]
[-206.50761414 338.37442017]
[-215.62832642 325.82086182]
[-215.59466553 310.30380249]
[-206.41957092 297.78991699]
[-191.63105774 293.09106445]
[-176.91560364 298.01397705]
[-164.78034973 289.19720459]
[-152.64509583 280.38043213]
[-140.50984192 271.56365967]
[-128.37458801 262.74685669]
[-116.23933411 253.93008423]
[-112.59989166 247.30749512]
[-103.52316284 245.02613831]
[-91.08760071 236.63824463]
[-94.03750610 220.19268799]
[-89.59183502 204.03053284]
[-78.57476807 191.32498169]
[-63.10539627 184.59156799]
[-46.19028854 185.19018555]
[-31.13912201 193.05062866]
[-19.31896019 183.81570435]
[-7.49879885 174.58079529]
[4.32136250 165.34587097]
[16.14152336 156.11094666]
[27.96168518 146.87602234]
[39.78184509 137.64109802]
[51.60200882 128.40617371]
[63.42216873 119.17125702]
[75.24233246 109.93633270]
[87.06249237 100.70140839]
[95.23207855 88.12135315]
[98.86090851 73.56691742]
[102.48973083 59.01248169]
[106.11856079 44.45804596]
[101.08068085 28.85189819]
[112.27629852 16.86898422]
[128.18832397 20.83629799]
[132.44783020 36.67260742]
[120.67299652 48.08687210]
[117.04416656 62.64130783]
[113.41534424 77.19574738]
[109.78651428 91.75018311]
[120.39311218 102.35678101]
[134.94755554 98.72795105]
[149.50198364 95.09912872]
[164.05642700 91.47029877]
[176.86387634 78.38221741]
[193.51765442 83.60923004]
[207.93658447 79.47466278]
[218.93295288 67.30866241]
[234.90827942 71.01289368]
[239.42849731 86.77676392]
[227.84359741 98.38375854]
[212.07113647 93.89359283]
[197.65220642 98.02815247]
[191.41262817 108.55040741]
[179.26304626 112.02600098]
[167.68525696 106.02473450]
[153.13081360 109.65356445]
[138.57638550 113.28238678]
[124.02194214 116.91121674]
[96.29741669 112.52157593]
[84.47724915 121.75649261]
[72.65708923 130.99140930]
[60.83692932 140.22633362]
[49.01676941 149.46125793]
[37.19660568 158.69618225]
[25.37644577 167.93110657]
[13.55628490 177.16603088]
[1.73612332 186.40095520]
[-10.08403778 195.63586426]
[-21.90419960 204.87078857]
[-18.13296127 217.77828979]
[-19.03946304 231.16246033]
[-24.49038887 243.38455200]
[-33.79737473 252.95576477]
[-45.80385590 258.71868896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[43 54]
[44 53]
[45 52]
[46 51]
[55 73]
[56 72]
[57 71]
[58 70]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
