%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAAAGAGGCAGCUGCAGUGGAGAAUCAUGUUAAGCUCGGCUACUGCGGAGAGCCCAAGGUAGCCCAAUA\
) } def
/len { sequence length } bind def

/coor [
[94.37063599 125.10298157]
[86.96399689 138.14682007]
[79.55736542 151.19065857]
[72.15073395 164.23449707]
[69.58759308 180.99357605]
[52.77391434 183.16998291]
[46.02808380 167.61587524]
[59.10689163 156.82786560]
[66.51352692 143.78402710]
[73.92015839 130.74018860]
[81.32678986 117.69635010]
[74.75448608 104.95109558]
[76.02596283 90.66753387]
[64.24121857 81.38745880]
[52.45646667 72.10739136]
[40.67171860 62.82732010]
[24.61908340 67.66570282]
[8.96229744 62.14464188]
[-0.31919393 48.57832718]
[0.19748777 32.31327057]
[-11.97559834 23.54879951]
[-24.14868355 14.78432655]
[-39.70537567 17.57087326]
[-52.62808990 8.47257423]
[-55.25000763 -7.11271048]
[-46.01559067 -19.93850899]
[-30.40345383 -22.39550018]
[-17.67600632 -13.02599716]
[-15.38421154 2.61124086]
[-3.21112561 11.37571335]
[8.96196079 20.14018631]
[21.36782265 14.76668262]
[34.90842056 16.31539536]
[45.95632172 24.48120117]
[51.49718475 37.17172623]
[49.95178986 51.04257202]
[61.73653793 60.32264328]
[73.52128601 69.60271454]
[85.30603027 78.88278198]
[107.63336182 75.43211365]
[124.07386017 90.92813873]
[139.04261780 89.96051025]
[154.01136780 88.99288177]
[168.98013306 88.02526093]
[183.94888306 87.05763245]
[198.91764832 86.09000397]
[213.88639832 85.12237549]
[224.29354858 73.53233337]
[239.48777771 72.76425934]
[250.47297668 82.75730896]
[265.44174194 81.78968048]
[277.06805420 70.73489380]
[292.93954468 73.07479858]
[300.88098145 87.01443481]
[294.80035400 101.86049652]
[279.36221313 106.22435760]
[266.40936279 96.75843811]
[251.44061279 97.72606659]
[241.83341980 109.05027008]
[226.66676331 110.24481201]
[214.85403442 100.09113312]
[199.88526917 101.05876160]
[184.91651917 102.02639008]
[169.94775391 102.99401093]
[154.97900391 103.96163940]
[140.01023865 104.92926788]
[125.04148865 105.89689636]
[123.11869049 111.28607178]
[120.05226135 116.11695862]
[115.99388123 120.15055847]
[111.14431763 123.18735504]
[105.74346924 125.07711792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[13 39]
[14 38]
[15 37]
[16 36]
[20 31]
[21 30]
[22 29]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
