%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGGAGGGUCGGGGACGGAAGCGCAGAGCACGGACCCCGCCCCCUCGCGGCCCCGCUCGUGACGUCGCGGGGGGCGCCGGCCUCCGCCCGGCCCCGAGGGCAGGCUCUCCCCGGAGGCUCAGCCCCCUCUGCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 255.26223755]
[82.21823120 239.57475281]
[92.50000000 227.25952148]
[92.50000000 212.25952148]
[92.50000000 197.25952148]
[92.50000000 182.25952148]
[84.76270294 169.53224182]
[92.50000000 155.73207092]
[92.50000000 140.73207092]
[92.50000000 125.73207855]
[92.50000000 110.73207855]
[87.73778534 96.50810242]
[78.70611572 84.53192902]
[69.67444611 72.55574799]
[60.64276886 60.57956696]
[51.61109543 48.60338593]
[42.57942200 36.62720871]
[28.09262657 30.26770401]
[26.60694122 15.44737911]
[17.57526779 3.47119927]
[8.54359531 -8.50498009]
[2.49830770 -11.49085522]
[-0.60644549 -16.37226677]
[-0.60946316 -21.22187042]
[-9.09867001 -33.58849335]
[-17.58787537 -45.95511627]
[-31.77699471 -52.95365143]
[-32.60100555 -67.82544708]
[-41.09021378 -80.19207001]
[-48.58938217 -85.55106354]
[-49.62718582 -92.93011475]
[-57.83877182 -105.48280334]
[-65.21669006 -111.00754547]
[-66.08983612 -118.40788269]
[-74.01972198 -131.14039612]
[-81.94960785 -143.87290955]
[-86.02425385 -145.84701538]
[-88.92199707 -148.75114441]
[-90.49298096 -152.08370972]
[-90.77191925 -155.34735107]
[-89.95969391 -158.11077881]
[-96.72484589 -171.49855042]
[-103.48999786 -184.88633728]
[-110.25514984 -198.27412415]
[-117.02030182 -211.66191101]
[-123.78545380 -225.04968262]
[-130.55059814 -238.43746948]
[-137.26858521 -244.74818420]
[-137.31359863 -252.19973755]
[-143.77879333 -265.73492432]
[-150.24400330 -279.27008057]
[-156.70921326 -292.80526733]
[-163.17442322 -306.34045410]
[-169.63963318 -319.87564087]
[-184.90274048 -319.87268066]
[-198.65188599 -326.50021362]
[-208.15715027 -338.44226074]
[-211.53126526 -353.32775879]
[-208.10427856 -368.20117188]
[-198.55664062 -380.10937500]
[-184.78404236 -386.68798828]
[-169.52102661 -386.63082886]
[-155.79809570 -379.94921875]
[-146.33993530 -367.96984863]
[-143.02447510 -353.07116699]
[-146.50999451 -338.21136475]
[-156.10444641 -326.34085083]
[-149.63923645 -312.80566406]
[-143.17402649 -299.27047729]
[-136.70883179 -285.73529053]
[-130.24362183 -272.20010376]
[-123.77841187 -258.66494751]
[-117.16281891 -245.20262146]
[-110.39766693 -231.81483459]
[-103.63251495 -218.42706299]
[-96.86736298 -205.03927612]
[-90.10221100 -191.65148926]
[-83.33706665 -178.26370239]
[-76.57191467 -164.87593079]
[-69.21709442 -151.80279541]
[-61.28720474 -139.07028198]
[-53.35732269 -126.33776855]
[-45.28608704 -113.69438934]
[-37.07450104 -101.14170074]
[-28.72358894 -88.68127441]
[-20.23438263 -76.31465149]
[-6.65246820 -70.20066071]
[-5.22125244 -54.44432449]
[3.26795387 -42.07770157]
[11.75716019 -29.71107674]
[20.51977539 -17.53665352]
[29.55144882 -5.56047392]
[38.58312225 6.41570568]
[52.42391205 11.91859436]
[54.55560303 27.59553528]
[63.58727646 39.57171249]
[72.61894989 51.54789352]
[81.65061951 63.52407455]
[90.68229675 75.50025177]
[99.71396637 87.47643280]
[138.12248230 80.15612030]
[151.99661255 85.85775757]
[165.87074280 91.55938721]
[179.74487305 97.26102448]
[193.74256897 102.65213776]
[207.85691833 107.73006439]
[223.46157837 105.12135315]
[232.81808472 116.71035004]
[246.93241882 121.78827667]
[261.04678345 126.86620331]
[275.16110229 131.94412231]
[291.19570923 128.50555420]
[301.98864746 140.85240173]
[296.43707275 156.28329468]
[280.25198364 158.92424011]
[270.08319092 146.05847168]
[255.96884155 140.98054504]
[241.85450745 135.90261841]
[227.74015808 130.82469177]
[213.14506531 133.79661560]
[202.77899170 121.84440613]
[188.66465759 116.76647949]
[183.97261047 117.99262238]
[178.46371460 116.22634888]
[174.04322815 111.13514709]
[160.16911316 105.43351746]
[146.29498291 99.73188019]
[132.42085266 94.03025055]
[119.95987701 102.38153839]
[107.50000000 110.73207855]
[107.50000000 125.73207855]
[107.50000000 140.73207092]
[107.50000000 155.73207092]
[115.23729706 169.53224182]
[107.50000000 182.25952148]
[107.50000000 197.25952148]
[107.50000000 212.25952148]
[107.50000000 227.25952148]
[117.78176880 239.57475281]
[114.42288971 255.26223755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 138]
[4 137]
[5 136]
[6 135]
[8 133]
[9 132]
[10 131]
[11 130]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[19 93]
[20 92]
[21 91]
[24 90]
[25 89]
[26 88]
[28 86]
[29 85]
[31 84]
[32 83]
[34 82]
[35 81]
[36 80]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[101 128]
[102 127]
[103 126]
[104 125]
[105 122]
[106 121]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
