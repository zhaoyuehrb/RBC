%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACGGCUGCUCACGACGCCGCGGAUCCCGAAGCCUGUGUAGCAGUGAGACAUCAGUGAGGCUGCAGGACGAGCAGGAUUGGAAGCGCCCCGGCCAGAAAGUGACCCCCCACCCCUUUCAGGACCCUGUGAACGGGAACAGCCAUCCAGAGGGUUCAGGAAGGCGUCCGCGCCCUCACCUCUUCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[-67.51493835 409.84640503]
[-80.65172577 417.08691406]
[-95.62509918 416.19360352]
[-107.80781555 407.44250488]
[-113.43502808 393.53802490]
[-110.76776123 378.77709961]
[-122.13348389 388.56588745]
[-133.49920654 398.35467529]
[-144.86492920 408.14346313]
[-156.23065186 417.93225098]
[-167.59637451 427.72103882]
[-178.88078308 437.60345459]
[-190.08311462 447.57882690]
[-201.28543091 457.55419922]
[-212.48774719 467.52957153]
[-214.01531982 480.34878540]
[-223.56625366 488.42660522]
[-235.66000366 487.84298706]
[-247.02572632 497.63177490]
[-248.35182190 513.15203857]
[-260.01773071 522.91735840]
[-274.80578613 521.55749512]
[-286.17150879 531.34625244]
[-297.53723145 541.13507080]
[-305.59301758 556.05285645]
[-322.15786743 552.44152832]
[-323.27331543 535.52435303]
[-307.32601929 529.76934814]
[-295.96029663 519.98052979]
[-284.59457397 510.19177246]
[-283.74688721 495.36553955]
[-272.35986328 485.27642822]
[-256.81451416 486.26605225]
[-245.44879150 476.47726440]
[-240.57061768 459.62786865]
[-222.46311951 456.32723999]
[-211.26080322 446.35186768]
[-200.05847168 436.37649536]
[-188.85615540 426.40115356]
[-185.94635010 419.59265137]
[-177.38516235 416.35531616]
[-166.01943970 406.56652832]
[-154.65371704 396.77774048]
[-143.28799438 386.98895264]
[-131.92227173 377.20016479]
[-120.55654907 367.41137695]
[-109.94995117 356.80477905]
[-100.16116333 345.43905640]
[-90.37237549 334.07333374]
[-80.58358765 322.70761108]
[-85.93138885 310.13064575]
[-85.33184814 296.41082764]
[-78.84510040 284.23141479]
[-67.68824768 275.99905396]
[-54.00738144 273.36822510]
[-40.46488571 276.90899658]
[-30.48951912 265.70666504]
[-20.51415062 254.50434875]
[-10.53878117 243.30203247]
[-0.56341296 232.09971619]
[9.41195583 220.89738464]
[12.09752178 206.24688721]
[27.05335808 201.08612061]
[37.02872467 189.88380432]
[47.00409317 178.68147278]
[49.10815048 171.58251953]
[57.23819733 167.37815857]
[67.39742279 156.34230042]
[77.55664825 145.30644226]
[87.71586609 134.27056885]
[97.87509155 123.23471832]
[87.40579987 122.38765717]
[77.45960236 116.68233490]
[70.30820465 106.51233673]
[67.93502808 93.32246399]
[71.56028748 79.41436768]
[66.92503357 65.14852142]
[61.28707123 57.93827057]
[62.33319092 50.60833359]
[57.93444061 36.26779938]
[53.53568649 21.92726135]
[49.13693619 7.58672428]
[34.66728210 1.65688026]
[27.44031525 -12.21052742]
[30.86839294 -27.46773148]
[43.33288193 -36.91074753]
[58.94842911 -36.08087158]
[70.34185028 -25.36994743]
[72.13352203 -9.83534336]
[63.47747421 3.18797398]
[67.87622833 17.52851105]
[72.27497864 31.86904716]
[76.67372894 46.20958328]
[81.19087982 60.51326370]
[85.82614136 74.77911377]
[93.32203674 75.02708435]
[89.16101837 60.61577606]
[101.58117676 52.20508957]
[113.41824341 61.41833878]
[108.31383514 75.52304077]
[115.80973816 75.77101135]
[121.37769318 61.84270477]
[126.94565582 47.91439438]
[120.48744965 33.48986053]
[126.19847870 18.75351906]
[140.69047546 12.44818115]
[155.36561584 18.31468964]
[161.51737976 32.87255096]
[155.49604797 47.48484039]
[140.87396240 53.48235321]
[135.30599976 67.41065979]
[129.73805237 81.33897400]
[129.21414185 99.41825104]
[120.24091339 111.60486603]
[135.10987854 109.62648010]
[149.97883606 107.64809418]
[164.84779358 105.66971588]
[179.71675110 103.69132996]
[194.58572388 101.71295166]
[207.24484253 92.22310638]
[220.88142395 98.21418762]
[235.75038147 96.23580170]
[250.61933899 94.25742340]
[265.48831177 92.27903748]
[280.35726929 90.30065918]
[295.22622681 88.32227325]
[310.09518433 86.34389496]
[322.75430298 76.85404968]
[336.39089966 82.84513092]
[351.25985718 80.86674500]
[358.70703125 67.38173676]
[372.50537109 60.94284439]
[387.27465820 63.82942200]
[397.39108276 74.72877502]
[412.26004028 72.75039673]
[421.66354370 60.04804230]
[437.30685425 57.79806519]
[449.90908813 67.33533478]
[451.99353027 83.00155640]
[442.32357788 95.50224304]
[426.63616943 97.42095184]
[414.23843384 87.61935425]
[399.36947632 89.59774017]
[392.45495605 102.76313782]
[378.95431519 109.41115570]
[363.95239258 106.80426788]
[353.23822021 95.73571014]
[338.36926270 97.71408844]
[326.77368164 107.06242371]
[312.07357788 101.21285248]
[297.20462036 103.19123840]
[282.33563232 105.16961670]
[267.46667480 107.14800262]
[252.59771729 109.12638092]
[237.72875977 111.10476685]
[222.85980225 113.08314514]
[211.26420593 122.43148041]
[196.56410217 116.58190918]
[181.69514465 118.56029510]
[166.82617188 120.53867340]
[151.95721436 122.51705933]
[137.08825684 124.49543762]
[122.21929169 126.47382355]
[108.91094971 133.39393616]
[98.75173187 144.42979431]
[88.59250641 155.46565247]
[78.43328094 166.50151062]
[68.27405548 177.53736877]
[58.20641708 188.65684509]
[48.23104858 199.85916138]
[38.25568008 211.06149292]
[34.85660934 226.51324463]
[20.61427689 230.87275696]
[10.63890934 242.07507324]
[0.66354060 253.27740479]
[-9.31182766 264.47973633]
[-19.28719711 275.68203735]
[-29.26256561 286.88436890]
[-23.90502739 302.51788330]
[-27.13884544 318.62875366]
[-37.98971176 330.84356689]
[-53.42882538 335.89520264]
[-69.21786499 332.49639893]
[-79.00665283 343.86212158]
[-88.79544067 355.22784424]
[-98.58422089 366.59356689]
[-83.82327271 363.92630005]
[-69.91880035 369.55352783]
[-61.16773224 381.73626709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 39]
[13 38]
[14 37]
[15 36]
[18 34]
[19 33]
[22 30]
[23 29]
[24 28]
[47 186]
[48 185]
[49 184]
[50 183]
[56 178]
[57 177]
[58 176]
[59 175]
[60 174]
[61 173]
[63 171]
[64 170]
[65 169]
[67 168]
[68 167]
[69 166]
[70 165]
[71 164]
[76 95]
[77 94]
[79 93]
[80 92]
[81 91]
[82 90]
[101 112]
[102 111]
[103 110]
[114 163]
[115 162]
[116 161]
[117 160]
[118 159]
[119 158]
[121 156]
[122 155]
[123 154]
[124 153]
[125 152]
[126 151]
[127 150]
[129 148]
[130 147]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
