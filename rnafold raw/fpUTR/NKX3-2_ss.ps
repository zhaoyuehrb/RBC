%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUCUCUGUCCCGCUCGGAGCUGCUCGGCGCCCCAGCUGCCCGCCCCGCCGGCCGCUCCUGCCCGCGGCGCAG\
) } def
/len { sequence length } bind def

/coor [
[69.60279846 280.68789673]
[62.67797852 294.47378540]
[49.38762665 302.30767822]
[33.97263718 301.68981934]
[21.35188675 292.81738281]
[15.55260468 278.52151489]
[18.42532349 263.36398315]
[29.05336761 252.18148804]
[44.04536819 248.54232788]
[48.85488510 234.33428955]
[53.66440201 220.12623596]
[58.47391891 205.91819763]
[55.22592545 191.38203430]
[66.97953033 180.79132080]
[71.78904724 166.58328247]
[76.59856415 152.37522888]
[81.40808105 138.16719055]
[76.00187683 119.78157806]
[90.70260620 106.27243805]
[94.04042053 91.64851379]
[97.07923889 76.95955658]
[100.11804962 62.27059174]
[103.15686035 47.58163071]
[106.19567108 32.89266586]
[101.41455841 17.81117249]
[111.56980133 6.91529179]
[114.60861969 -7.77367067]
[113.27060699 -17.10368156]
[118.08260345 -22.99420166]
[121.71803284 -37.54699326]
[125.35345459 -52.09978104]
[128.98887634 -66.65257263]
[132.62431335 -81.20536041]
[124.69313049 -89.05850983]
[120.91539001 -99.47354889]
[121.95216370 -110.42124176]
[127.53366852 -119.80045319]
[136.52473450 -125.84141541]
[147.15495300 -127.43952942]
[152.53999329 -141.43957520]
[147.36483765 -156.62500000]
[156.13166809 -170.06086731]
[172.11529541 -171.44032288]
[183.05447388 -159.70515442]
[180.55758667 -143.85760498]
[166.54003906 -136.05453491]
[161.15499878 -122.05448914]
[170.50321960 -105.25497437]
[164.82092285 -86.58171844]
[147.17709351 -77.56993103]
[143.54167175 -63.01714325]
[139.90625000 -48.46435547]
[136.27081299 -33.91156769]
[132.63539124 -19.35877609]
[129.29757690 -4.73485804]
[126.25876617 9.95410442]
[131.25724792 23.98494720]
[120.88463593 35.93148041]
[117.84582520 50.62044144]
[114.80701447 65.30940247]
[111.76819611 79.99836731]
[108.72938538 94.68733215]
[110.33403778 102.83994293]
[105.25540161 109.90785980]
[111.55769348 119.20599365]
[111.53669739 130.21554565]
[105.45056152 139.12094116]
[95.61612701 142.97669983]
[90.80661011 157.18475342]
[85.99709320 171.39279175]
[81.18757629 185.60084534]
[84.09156036 201.15324402]
[72.68196106 210.72770691]
[67.87244415 224.93576050]
[63.06293106 239.14379883]
[58.25341415 253.35185242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 76]
[10 75]
[11 74]
[12 73]
[14 71]
[15 70]
[16 69]
[17 68]
[19 64]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[26 56]
[27 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
