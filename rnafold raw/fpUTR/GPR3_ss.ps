%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCGGGGGCUUCUCGGGGUCCACGCACGCCCUGCGCCGCCAGGACCCGAGCGGAGCCUCCCCGCGGCCCGGCCGCGCCUGGUCCUGAGCGGUACC\
) } def
/len { sequence length } bind def

/coor [
[258.12728882 264.85711670]
[260.51550293 254.13662720]
[249.58097839 243.86842346]
[238.64643860 233.60021973]
[227.71191406 223.33201599]
[216.77738953 213.06379700]
[205.84284973 202.79559326]
[194.90832520 192.52738953]
[183.97380066 182.25918579]
[173.03926086 171.99098206]
[162.10473633 161.72276306]
[150.85307312 151.80308533]
[139.29537964 142.24172974]
[127.73767853 132.68037415]
[116.17997742 123.11901093]
[104.62227631 113.55765533]
[90.86957550 111.03678894]
[85.81636047 98.00004578]
[67.66609192 95.43956757]
[62.02601242 78.90356445]
[50.17368698 69.70995331]
[38.32136154 60.51634979]
[26.46903801 51.32274246]
[14.61671257 42.12913895]
[2.76438761 32.93553162]
[-12.70985508 34.72034836]
[-24.59883118 25.22788239]
[-26.20501709 10.46455765]
[-38.05734253 1.27095222]
[-56.27908325 -0.71815258]
[-62.43578720 -17.06883621]
[-74.57104492 -25.88561630]
[-86.70629883 -34.70239258]
[-103.07437134 -39.12081146]
[-103.35976410 -56.07235718]
[-87.14969635 -61.03924942]
[-77.88951874 -46.83765030]
[-65.75426483 -38.02087021]
[-53.61900711 -29.20409203]
[-41.51031113 -30.76906395]
[-31.29761124 -23.36771965]
[-28.86373711 -10.58137321]
[-17.01141167 -1.38776720]
[-2.31246209 -3.50353217]
[9.83844757 5.65125036]
[11.95799351 21.08320618]
[23.81031799 30.27681351]
[35.66264343 39.47041702]
[47.51496887 48.66402435]
[59.36729431 57.85763168]
[71.21961975 67.05123901]
[83.37149811 65.86737823]
[93.34667969 73.58586121]
[95.37772369 86.44234467]
[109.13042450 88.96321106]
[114.18363953 101.99995422]
[125.74133301 111.56131744]
[137.29904175 121.12267303]
[148.85673523 130.68403625]
[160.41442871 140.24539185]
[167.14637756 141.78733826]
[171.34014893 145.95550537]
[172.37294006 150.78823853]
[183.30747986 161.05644226]
[194.24200439 171.32466125]
[205.17652893 181.59286499]
[216.11106873 191.86106873]
[227.04559326 202.12927246]
[237.98011780 212.39747620]
[248.91465759 222.66567993]
[259.84918213 232.93389893]
[270.78372192 243.20210266]
[290.61288452 241.32733154]
[305.39797974 254.22477722]
[306.20721436 273.53015137]
[318.05953979 282.72375488]
[329.91186523 291.91735840]
[341.76419067 301.11096191]
[353.61651611 310.30456543]
[367.25463867 303.45153809]
[382.51571655 303.20312500]
[396.36968994 309.60861206]
[406.06579590 321.39627075]
[409.67889404 336.22555542]
[406.49157715 351.15219116]
[397.13668823 363.21240234]
[383.47167969 370.01168823]
[368.20971680 370.20001221]
[354.38110352 363.73999023]
[344.73147583 351.91427612]
[341.17681885 337.07083130]
[344.42291260 322.15689087]
[332.57058716 312.96328735]
[320.71826172 303.76968384]
[308.86593628 294.57608032]
[297.01361084 285.38247681]
[287.25759888 289.46166992]
[276.61038208 289.02297974]
[267.07785034 284.07980347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[18 54]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[28 43]
[29 42]
[31 39]
[32 38]
[33 37]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
