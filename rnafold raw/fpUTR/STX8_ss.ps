%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUUAUAGUUCUGAGGCCCUAGCUACUCACUUUGCAAACUCCAGGCUCCGGUCGCGCACGGGACGAACUGCGGGGAGUGAGCCGCGCGGGCCGCCGUAGUCAGCUGCUAAGAGCAGGAAGAGUCCGAGCGGCGGGCGGAGUCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[-15.25776196 257.77175903]
[-15.53066349 270.06188965]
[-18.11447906 282.07516479]
[-22.91466141 293.38125610]
[-29.75729179 303.57543945]
[-38.39538574 312.29321289]
[-48.51781082 319.22338867]
[-59.76047897 324.11901855]
[-71.71945953 326.80630493]
[-83.96547699 327.19079590]
[-96.05933380 325.26062012]
[-107.56764984 321.08691406]
[-118.07839966 314.82116699]
[-127.21566010 306.68972778]
[-139.29565430 315.58209229]
[-151.37564087 324.47442627]
[-163.45562744 333.36679077]
[-161.67515564 348.62213135]
[-167.77563477 362.71752930]
[-180.11604309 371.86135864]
[-195.37689209 373.59399414]
[-209.45307922 367.44937134]
[-218.55819702 355.08035278]
[-220.24299622 339.81414795]
[-214.05427551 325.75729370]
[-201.65678406 316.69097900]
[-186.38537598 315.05404663]
[-172.34797668 321.28680420]
[-160.26799011 312.39443970]
[-148.18800354 303.50210571]
[-136.10801697 294.60974121]
[-142.78108215 277.96633911]
[-144.62319946 260.11773682]
[-141.48583984 242.43850708]
[-133.60420227 226.29196167]
[-121.57962799 212.92507935]
[-106.33364868 203.37219238]
[-89.03744507 198.37495422]
[-71.02182770 198.32475281]
[-53.67485428 203.23208618]
[-38.33489227 212.72520447]
[-27.45606804 202.39801025]
[-23.55252838 188.02401733]
[-8.21690559 184.13438416]
[2.66191959 173.80717468]
[13.54074478 163.47996521]
[24.41957092 153.15277100]
[35.29839706 142.82556152]
[46.17721939 132.49835205]
[57.05604553 122.17115021]
[67.93486786 111.84394836]
[78.81369781 101.51674652]
[79.90500641 86.55649567]
[70.64006042 74.75985718]
[61.37510681 62.96321487]
[46.76630402 56.88921738]
[44.99007797 42.10089874]
[29.57635307 36.50187683]
[26.98521233 20.30873108]
[39.88220215 10.17957973]
[55.00000381 16.53442764]
[56.78672028 32.83595276]
[70.73283386 38.06617355]
[73.17174530 53.69826508]
[82.43669891 65.49490356]
[91.70164490 77.29154205]
[99.00609589 75.59005737]
[103.36317444 61.23680496]
[113.61498260 72.18708038]
[120.91943359 70.48558807]
[124.01775360 55.80906296]
[127.11607361 41.13253784]
[130.21440125 26.45601273]
[133.31271362 11.77948666]
[128.59275818 -3.32126188]
[138.79208374 -14.17589378]
[141.89041138 -28.85241890]
[133.05548096 -41.95660019]
[136.15626526 -57.45372009]
[149.35311890 -66.14961243]
[164.81658936 -62.88516235]
[173.37246704 -49.59710693]
[169.94470215 -34.16901398]
[156.56694031 -25.75409889]
[153.46861267 -11.07757282]
[158.41018677 2.97341275]
[147.98924255 14.87780857]
[144.89093018 29.55433464]
[141.79260254 44.23085785]
[138.69427490 58.90738678]
[135.59596252 73.58390808]
[145.10430908 85.18524933]
[160.10350037 85.02921295]
[175.10269165 84.87317657]
[190.10188293 84.71714020]
[205.10107422 84.56110382]
[220.09782410 84.24904633]
[235.09051514 83.78100586]
[248.64254761 75.61686707]
[261.60504150 82.95327759]
[275.15707397 74.78913879]
[288.11956787 82.12554932]
[303.11227417 81.65750122]
[314.82028198 68.70143890]
[331.93844604 68.19886780]
[343.90588379 79.97337341]
[358.88558960 79.19352722]
[373.86529541 78.41368103]
[388.84500122 77.63383484]
[403.82473755 76.85398865]
[419.32809448 69.99235535]
[430.21331787 82.99035645]
[420.73663330 97.04839325]
[404.60458374 91.83370209]
[389.62484741 92.61354828]
[374.64514160 93.39339447]
[359.66543579 94.17324066]
[344.68569946 94.95308685]
[337.45629883 105.66440582]
[325.18743896 110.30651093]
[312.30068970 106.96584320]
[303.58032227 96.65019989]
[288.58761597 97.11824036]
[276.10797119 105.24890137]
[262.07308960 97.94597626]
[249.59344482 106.07662964]
[235.55856323 98.77370453]
[220.56587219 99.24174500]
[213.93554688 102.61585236]
[205.25711060 99.56029510]
[190.25791931 99.71633148]
[175.25872803 99.87236786]
[160.25953674 100.02840424]
[145.26034546 100.18444061]
[131.93153381 120.72080231]
[112.69036865 128.14099121]
[96.51157379 123.41630554]
[89.14089966 112.39556885]
[78.26207733 122.72277069]
[67.38324738 133.04997253]
[56.50442505 143.37718201]
[45.62559891 153.70439148]
[34.74677658 164.03158569]
[23.86795044 174.35879517]
[12.98912430 184.68600464]
[2.11029935 195.01321411]
[-2.57136583 210.12586975]
[-17.12886238 213.27682495]
[-28.00768852 223.60403442]
[-21.60827637 234.11822510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 31]
[15 30]
[16 29]
[17 28]
[41 149]
[42 148]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[50 140]
[51 139]
[52 138]
[53 66]
[54 65]
[55 64]
[57 62]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[76 85]
[77 84]
[92 134]
[93 133]
[94 132]
[95 131]
[96 130]
[97 128]
[98 127]
[100 125]
[102 123]
[103 122]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
