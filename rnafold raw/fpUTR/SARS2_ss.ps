%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAGAGGCGGGACACAGACGACGAUUGGGCGACGAAGGACUCUAUCGCGGUCAACUUUCCUCAGGAUCUGAUUGGCUCGUCACGGUCAGGUUCGCUGCCUUGCAAUUGGUCUAAACGCGGAGUGGGCGGGACGAAGUGCCGCCUUGUUCCCGGUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[236.40475464 185.54043579]
[223.22366333 178.38090515]
[211.50671387 181.51240540]
[200.45239258 175.61370850]
[196.26979065 163.37763977]
[183.23089600 155.96229553]
[170.19201660 148.54695129]
[157.15312195 141.13159180]
[144.11424255 133.71624756]
[131.07534790 126.30090332]
[118.03646088 118.88555145]
[111.32510376 124.70381927]
[102.74282074 128.10382080]
[93.17029572 128.49153137]
[83.67228699 125.59561157]
[75.37925720 119.52225494]
[69.35360718 110.76666260]
[66.45649719 100.17747498]
[51.71348953 102.94218445]
[36.97047806 105.70688629]
[28.03610420 118.46677399]
[13.04520988 121.06055450]
[0.93566549 112.46436310]
[-13.80734634 115.22907257]
[-28.55035973 117.99377441]
[-43.29336929 120.75847626]
[-55.43102264 130.90678406]
[-69.36633301 125.64785004]
[-84.10934448 128.41255188]
[-98.85235596 131.17726135]
[-113.56769562 134.08566284]
[-120.81202698 147.94401550]
[-135.28909302 153.85572815]
[-150.16328430 149.02947998]
[-158.41143799 135.74407959]
[-156.13905334 120.27249146]
[-144.41906738 109.91991425]
[-128.78529358 109.57452393]
[-116.61953735 119.39940643]
[-110.68038940 114.93696594]
[-101.61706543 116.43424225]
[-86.87404633 113.66954041]
[-72.13103485 110.90483856]
[-61.04790497 100.95428467]
[-46.05807495 106.01546478]
[-31.31506348 103.25076294]
[-16.57205200 100.48605347]
[-1.82903886 97.72135162]
[6.34324455 85.32177734]
[21.25537109 82.30796051]
[34.20577240 90.96387482]
[48.94878387 88.19916534]
[63.69179535 85.43446350]
[49.42811584 80.79254150]
[34.44914627 81.58658600]
[20.99159050 74.96131897]
[12.48627949 62.60577011]
[11.10153484 47.66982269]
[17.19037819 33.96121597]
[29.20053864 24.97477722]
[44.07017899 23.00149155]
[58.00846863 28.54442024]
[67.46202087 40.19046402]
[70.02081299 54.97011948]
[77.72031403 67.84325409]
[77.13507843 52.85467529]
[76.54983521 37.86609650]
[75.96459198 22.87751961]
[75.37934875 7.88894081]
[74.79411316 -7.09963799]
[74.20886993 -22.08821678]
[73.62362671 -37.07679367]
[73.03838348 -52.06537247]
[72.45314789 -67.05395508]
[71.86790466 -82.04253387]
[58.89367294 -90.55422974]
[53.43184662 -105.07827759]
[57.58261108 -120.02989197]
[69.74990845 -129.65986633]
[85.25517273 -130.26528931]
[98.13630676 -121.61334229]
[103.44024658 -107.03089905]
[99.12753296 -92.12519073]
[86.85648346 -82.62776947]
[87.44172668 -67.63919067]
[88.02696228 -52.65061569]
[88.61220551 -37.66203690]
[89.19744873 -22.67345810]
[89.78269196 -7.68487930]
[90.36792755 7.30369949]
[90.95317078 22.29227829]
[91.53841400 37.28085709]
[92.12365723 52.26943588]
[92.70889282 67.25801086]
[121.16295624 78.97813416]
[125.45180511 105.84666443]
[138.49069214 113.26201630]
[151.52958679 120.67736053]
[164.56846619 128.09271240]
[177.60736084 135.50805664]
[190.64625549 142.92340088]
[203.68513489 150.33876038]
[222.06715393 149.77078247]
[230.38317871 165.19981384]
[243.56427002 172.35934448]
[261.93170166 171.43280029]
[270.54721069 186.69665527]
[283.86547852 193.59762573]
[297.18374634 200.49859619]
[310.50204468 207.39958191]
[326.31466675 206.87872314]
[334.05535889 219.60392761]
[338.49740601 219.23323059]
[342.41702271 220.22471619]
[345.44369507 222.23841858]
[347.35894775 224.84774780]
[348.11169434 227.59791565]
[360.85134888 235.51634216]
[369.84136963 237.40454102]
[373.76019287 243.71560669]
[386.34289551 251.88110352]
[398.92562866 260.04660034]
[411.50833130 268.21209717]
[429.89208984 268.72055054]
[437.29119873 284.60968018]
[450.03082275 292.52810669]
[462.77047729 300.44653320]
[475.51013184 308.36495972]
[488.24975586 316.28338623]
[500.98941040 324.20181274]
[516.79449463 324.91549683]
[523.51940918 338.20553589]
[536.25903320 346.12396240]
[552.90319824 349.35015869]
[554.41064453 366.23693848]
[538.60113525 372.36022949]
[528.34063721 358.86361694]
[515.60101318 350.94519043]
[500.70712280 350.79788208]
[493.07098389 336.94146729]
[480.33132935 329.02304077]
[467.59170532 321.10461426]
[454.85205078 313.18618774]
[442.11239624 305.26776123]
[429.37277222 297.34933472]
[417.49267578 299.78994751]
[406.80239868 293.25460815]
[403.34283447 280.79479980]
[390.76013184 272.62930298]
[378.17742920 264.46380615]
[365.59469604 256.29833984]
[352.93292236 248.25598145]
[340.19326782 240.33755493]
[327.15438843 232.92221069]
[312.29437256 233.93666077]
[303.60107422 220.71784973]
[290.28277588 213.81687927]
[276.96450806 206.91590881]
[263.64624023 200.01492310]
[251.99261475 203.37445068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[18 53]
[19 52]
[20 51]
[23 48]
[24 47]
[25 46]
[26 45]
[28 43]
[29 42]
[30 41]
[31 39]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[107 159]
[108 158]
[109 157]
[110 156]
[112 154]
[117 153]
[118 152]
[120 151]
[121 150]
[122 149]
[123 148]
[125 145]
[126 144]
[127 143]
[128 142]
[129 141]
[130 140]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
