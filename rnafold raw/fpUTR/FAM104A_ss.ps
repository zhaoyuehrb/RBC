%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCCGUGGGCGGGGUUACCAGUCGGUGCGGUUGGGAUGGUGCCACUGCGCAGCCGCGAGAGGGCGGUACCACGGCGGCAGCGAC\
) } def
/len { sequence length } bind def

/coor [
[-29.04098511 257.12112427]
[-38.25070953 270.26528931]
[-52.19415283 278.09591675]
[-68.09584808 279.11169434]
[-82.81527710 273.16204834]
[-93.69892883 283.48416138]
[-104.58258057 293.80627441]
[-115.46623230 304.12838745]
[-126.34989166 314.45053101]
[-130.49082947 330.31823730]
[-146.37272644 334.40444946]
[-157.65765381 322.50561523]
[-152.73664856 306.86221313]
[-136.67201233 303.56686401]
[-125.78835297 293.24475098]
[-114.90470123 282.92263794]
[-104.02104950 272.60052490]
[-93.13739777 262.27838135]
[-98.03844452 249.17637634]
[-97.53256989 235.15319824]
[-91.66383362 222.35911560]
[-81.30117798 212.76872253]
[-68.00991058 207.87629700]
[-53.81533051 208.46301270]
[-40.89408493 214.47239685]
[-29.65293121 204.54080200]
[-18.41177559 194.60922241]
[-7.17061996 184.67762756]
[-2.75558257 170.45242310]
[12.70932102 167.11366272]
[23.95047569 157.18206787]
[35.19163132 147.25048828]
[39.60667038 133.02526855]
[55.07157135 129.68650818]
[66.31272888 119.75492096]
[77.55388641 109.82333374]
[88.79503632 99.89173889]
[99.85916138 89.76331329]
[110.74282074 79.44119263]
[114.93950653 71.07089233]
[122.19747162 68.95526123]
[133.43862915 59.02367401]
[138.65771484 44.08808899]
[153.31857300 41.45969772]
[164.55972290 31.52811050]
[175.80088806 21.59652328]
[187.04203796 11.66493607]
[191.53150940 3.44795179]
[198.85961914 1.58978724]
[210.44427490 -7.93889666]
[216.38583374 -25.25802803]
[233.66767883 -27.69573402]
[244.90884399 -37.62732315]
[256.14999390 -47.55891037]
[260.84835815 -63.27060699]
[276.86456299 -66.79378510]
[287.72253418 -54.50409317]
[282.25250244 -39.04411697]
[266.08157349 -36.31775284]
[254.84042358 -26.38616562]
[243.59927368 -16.45457840]
[242.48809814 -4.26930332]
[233.00883484 4.09160566]
[219.97296143 3.64575624]
[208.38830566 13.17444038]
[196.97361755 22.90609169]
[185.73246765 32.83768082]
[174.49131775 42.76926804]
[163.25015259 52.70085526]
[158.83511353 66.92607117]
[143.37022400 70.26483154]
[132.12905884 80.19641876]
[121.06493378 90.32484436]
[110.18128204 100.64696503]
[106.86864471 108.20913696]
[98.72662354 111.13289642]
[87.48547363 121.06448364]
[76.24431610 130.99607849]
[65.00315857 140.92765808]
[59.78408051 155.86325073]
[45.12321854 158.49163818]
[33.88206482 168.42321777]
[22.64090919 178.35481262]
[17.42182922 193.29040527]
[2.76096749 195.91879272]
[-8.48018742 205.85037231]
[-19.72134209 215.78196716]
[-30.96249771 225.71354675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[25 88]
[26 87]
[27 86]
[28 85]
[30 83]
[31 82]
[32 81]
[34 79]
[35 78]
[36 77]
[37 76]
[38 74]
[39 73]
[41 72]
[42 71]
[44 69]
[45 68]
[46 67]
[47 66]
[49 65]
[50 64]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
