%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCACUUCCGCCCGGGCGCAUUGUAGCCCCGCGGACAGCUGGGCCAGGGUGCGGGCCUGCGCCUCCCUCGGCUCCUGGCGCGGGCCUCGGGGAGAGGGGUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[94.32836914 268.37176514]
[81.68853760 277.85913086]
[66.05424500 275.54733276]
[56.70103455 262.80789185]
[59.17800140 247.19892883]
[72.01560211 237.98092651]
[74.20975494 223.14227295]
[76.40390015 208.30361938]
[78.59805298 193.46496582]
[80.79220581 178.62629700]
[82.98635101 163.78764343]
[85.18050385 148.94898987]
[87.37464905 134.11033630]
[89.56880188 119.27168274]
[78.05489349 107.83945465]
[77.14694214 90.64680481]
[88.63751984 76.52233124]
[107.61424255 73.60388184]
[94.77313995 65.85106659]
[81.93204498 58.09824753]
[69.09094238 50.34543228]
[56.24984360 42.59261322]
[43.40874481 34.83979416]
[27.59572983 34.33081055]
[20.69931030 21.12896538]
[4.88629389 20.61997986]
[-2.01012421 7.41813517]
[-14.85122299 -0.33468276]
[-27.69232178 -8.08750057]
[-40.53342056 -15.84031868]
[-56.34643555 -16.34930420]
[-63.24285507 -29.55114937]
[-76.08395386 -37.30396652]
[-91.94086456 -34.86719894]
[-103.63446045 -45.85079956]
[-102.19440460 -61.82909393]
[-88.72538757 -70.54489899]
[-73.55969238 -65.31219482]
[-68.33113861 -50.14506531]
[-55.49003601 -42.39224625]
[-40.59550095 -42.43779373]
[-32.78060150 -28.68141747]
[-19.93950272 -20.92859840]
[-7.09840488 -13.17578125]
[5.74269390 -5.42296314]
[20.63722992 -5.46851110]
[28.45212936 8.28786659]
[43.34666443 8.24231911]
[51.16156387 21.99869537]
[64.00266266 29.75151443]
[76.84375763 37.50433350]
[89.68486023 45.25714874]
[102.52595520 53.00996780]
[115.36705780 60.76278687]
[130.36705017 60.76278687]
[143.20816040 53.00996780]
[156.04925537 45.25714874]
[168.89035034 37.50433350]
[181.73144531 29.75151443]
[194.57255554 21.99869537]
[207.41365051 14.24587822]
[220.25474548 6.49306011]
[233.09584045 -1.25975776]
[245.93695068 -9.01257610]
[244.00709534 -24.11871910]
[248.39451599 -38.70193863]
[258.33908081 -50.23560715]
[272.11782837 -56.72144699]
[287.34350586 -57.03573990]
[301.37817383 -51.12404251]
[311.79022217 -40.01058578]
[316.77572632 -25.62084579]
[315.47091675 -10.44793034]
[308.10183716 2.87935925]
[295.94525146 12.05199051]
[281.10733032 15.48075008]
[266.15887451 12.57158375]
[253.68975830 3.82852292]
[240.84866333 11.58134079]
[228.00756836 19.33415794]
[215.16647339 27.08697701]
[202.32536316 34.83979416]
[189.48426819 42.59261322]
[176.64317322 50.34543228]
[163.80207825 58.09824753]
[150.96096802 65.85106659]
[138.11987305 73.60388184]
[137.01983643 88.56349182]
[148.58876038 98.11127472]
[164.63154602 98.02021027]
[174.59271240 110.59616852]
[170.83090210 126.19194794]
[156.23184204 132.84379578]
[141.99470520 125.44899750]
[139.04098511 109.68019104]
[127.47206116 100.13241577]
[119.09844971 115.65228271]
[104.40745544 121.46582794]
[102.21331024 136.30448914]
[100.01915741 151.14314270]
[97.82500458 165.98179626]
[95.63085938 180.82044983]
[93.43670654 195.65910339]
[91.24256134 210.49777222]
[89.04840851 225.33642578]
[86.85425568 240.17507935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[12 100]
[13 99]
[14 98]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[25 47]
[27 45]
[28 44]
[29 43]
[30 42]
[32 40]
[33 39]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
