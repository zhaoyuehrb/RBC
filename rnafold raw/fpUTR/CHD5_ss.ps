%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGGCCGCCUCGCCCGCCGCGCGCGCCGGUCCGGCAGCGCACGGGUUAAGGCUGGCACCGCGCCCGGCGGGAGGGGGGGCGCCCACCUCCCCUCCUCCCCGCGCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[137.65997314 125.10906219]
[130.07897949 114.55820465]
[115.45506287 111.22039032]
[103.13092041 118.84020996]
[89.00467682 115.61598969]
[81.20712280 103.40352631]
[66.58320618 100.06571198]
[51.95928574 96.72789764]
[37.28999329 93.59550476]
[22.57821274 90.66915131]
[7.86643410 87.74279785]
[-6.84534502 84.81643677]
[-24.05623245 91.17314148]
[-36.85546112 79.25730896]
[-51.64352417 76.74472046]
[-66.43158722 74.23212433]
[-81.21965790 71.71952820]
[-96.00772095 69.20693970]
[-107.04927826 76.05353546]
[-119.38930511 73.56107330]
[-126.44090271 63.62200928]
[-141.15267944 60.69565201]
[-155.86445618 57.76929855]
[-170.57624817 54.84294510]
[-181.80548096 61.37717819]
[-194.07073975 58.53960419]
[-200.84082031 48.40667343]
[-215.46473694 45.06885910]
[-230.08865356 41.73104477]
[-244.71257019 38.39323425]
[-261.50003052 40.76343918]
[-268.42483521 25.28818893]
[-255.47134399 14.35002995]
[-241.37475586 23.76931381]
[-226.75083923 27.10712814]
[-212.12692261 30.44494247]
[-197.50300598 33.78275681]
[-181.11807251 27.67201614]
[-167.64988708 40.13116455]
[-152.93811035 43.05751801]
[-138.22633362 45.98387527]
[-123.51454926 48.91022873]
[-107.30744171 42.34235764]
[-93.49512482 54.41887283]
[-78.70706177 56.93146515]
[-63.91899872 59.44405746]
[-49.13093185 61.95665359]
[-34.34286499 64.46924591]
[-24.21043015 57.69843292]
[-11.79290962 59.77057266]
[-3.91899037 70.10466003]
[10.79278851 73.03101349]
[25.50456810 75.95736694]
[40.21634674 78.88372803]
[47.49481583 77.07621002]
[55.29710007 82.10398102]
[69.92102051 85.44179535]
[84.54493713 88.77960968]
[96.86907959 81.15979004]
[110.99532318 84.38401031]
[118.79287720 96.59647369]
[133.41679382 99.93428802]
[150.79919434 94.06278992]
[163.25920105 106.33290100]
[177.97097778 109.25925446]
[192.68275452 112.18561554]
[207.39453125 115.11196899]
[222.10630798 118.03832245]
[236.81808472 120.96467590]
[251.52987671 123.89102936]
[266.35171509 126.19598389]
[281.25741577 127.87545013]
[296.16308594 129.55491638]
[311.06875610 131.23439026]
[325.97445679 132.91384888]
[340.88012695 134.59332275]
[355.78582764 136.27278137]
[370.69149780 137.95225525]
[385.59719849 139.63171387]
[400.50286865 141.31118774]
[415.40853882 142.99064636]
[429.98825073 136.84713745]
[441.76919556 145.96078491]
[455.15817261 137.12252808]
[470.37094116 142.21673584]
[475.73757935 157.33555603]
[467.14126587 170.88113403]
[451.17633057 172.46244812]
[440.08972168 160.86647034]
[426.57617188 167.13011169]
[413.72909546 157.89633179]
[398.82339478 156.21687317]
[383.91772461 154.53739929]
[369.01202393 152.85794067]
[354.10635376 151.17846680]
[339.20065308 149.49900818]
[324.29498291 147.81953430]
[309.38931274 146.14006042]
[294.48361206 144.46060181]
[279.57794189 142.78112793]
[264.67224121 141.10166931]
[261.62258911 143.13067627]
[257.39733887 143.69847107]
[252.73558044 142.25038147]
[248.60351562 138.60281372]
[233.89173889 135.67645264]
[219.17996216 132.75010681]
[204.46817017 129.82374573]
[189.75639343 126.89739227]
[175.04461670 123.97103882]
[160.33283997 121.04467773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[6 58]
[7 57]
[8 56]
[9 54]
[10 53]
[11 52]
[12 51]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[21 42]
[22 41]
[23 40]
[24 39]
[27 37]
[28 36]
[29 35]
[30 34]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
