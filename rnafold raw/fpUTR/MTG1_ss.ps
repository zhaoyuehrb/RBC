%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCCCGCAGUGCCGGAGGCCCGCAGCGCCGGAACCUCAGAGGCGGGUCGCAGCGGCGCAGAGGAGGUCAGCUGCGGGAGCGUUUCCGGGGACGGUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[78.05619812 137.74774170]
[67.85360718 148.74351501]
[65.93905640 155.35104370]
[61.56243896 159.29545593]
[56.69680023 160.06849670]
[45.85487747 170.43443298]
[35.01295471 180.80036926]
[34.49480820 196.36857605]
[23.35188866 206.72666931]
[8.51317024 206.13676453]
[8.40916729 221.94070435]
[-2.89798188 232.98262024]
[-18.69994545 232.71153259]
[-29.62170029 221.28826904]
[-29.18356133 205.49006653]
[-17.64546776 194.68969727]
[-1.85276937 195.29483032]
[-1.77635407 180.44459534]
[9.07123089 169.77760315]
[24.64701462 169.95845032]
[35.48893738 159.59251404]
[46.33086014 149.22656250]
[56.85783005 138.54092407]
[67.06041718 127.54515076]
[76.92950439 116.24907684]
[86.45623779 104.66281891]
[88.93594360 90.90263367]
[101.95750427 85.81044006]
[111.48424530 74.22418976]
[121.01097870 62.63793182]
[130.53771973 51.05167770]
[140.06445312 39.46542358]
[149.59118652 27.87916946]
[147.89656067 16.92593384]
[152.50227356 7.08885050]
[161.62028503 1.60463130]
[172.02590942 2.12473011]
[182.22850037 -8.87104797]
[192.43109131 -19.86682701]
[202.63368225 -30.86260414]
[206.34834290 -46.24154663]
[220.67692566 -50.30859756]
[230.87951660 -61.30437469]
[241.08210754 -72.30015564]
[251.28469849 -83.29592896]
[261.48727417 -94.29170990]
[271.68988037 -105.28749084]
[270.67440796 -122.67226410]
[282.25817871 -135.22229004]
[298.99752808 -135.58506775]
[308.86660767 -146.88113403]
[318.73571777 -158.17720032]
[328.60479736 -169.47328186]
[338.47387695 -180.76934814]
[348.34295654 -192.06541443]
[358.21203613 -203.36149597]
[367.91101074 -214.80393982]
[377.43774414 -226.39019775]
[386.96450806 -237.97644043]
[382.13931274 -252.62982178]
[386.02447510 -267.55996704]
[397.38018799 -278.00271606]
[412.58288574 -280.62585449]
[426.78149414 -274.59234619]
[435.44525146 -261.82742310]
[435.80957031 -246.40435791]
[427.75823975 -233.24459839]
[413.86038208 -226.54734802]
[398.55075073 -228.44970703]
[389.02401733 -216.86344910]
[379.49728394 -205.27720642]
[377.65011597 -197.99263000]
[369.50808716 -193.49241638]
[359.63900757 -182.19633484]
[349.76992798 -170.90026855]
[339.90084839 -159.60420227]
[330.03176880 -148.30812073]
[320.16268921 -137.01205444]
[310.29360962 -125.71598053]
[312.94784546 -113.00995636]
[307.67361450 -100.93574524]
[296.21301270 -94.04727173]
[282.68566895 -95.08489990]
[272.48306274 -84.08911896]
[262.28048706 -73.09333801]
[252.07788086 -62.09756088]
[241.87528992 -51.10178375]
[231.67269897 -40.10600662]
[228.68780518 -25.51355553]
[213.62945557 -20.66001320]
[203.42686462 -9.66423512]
[193.22427368 1.33154297]
[183.02168274 12.32732105]
[180.29632568 31.37178040]
[161.17744446 37.40590668]
[151.65071106 48.99216080]
[142.12397766 60.57841492]
[132.59722900 72.16467285]
[123.07049561 83.75092316]
[113.54376221 95.33718109]
[111.06405640 109.09736633]
[98.04249573 114.18955994]
[88.51575470 125.77581024]
[86.99978638 132.48600769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[5 22]
[6 21]
[7 20]
[10 17]
[25 103]
[26 102]
[28 100]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[37 93]
[38 92]
[39 91]
[40 90]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[57 71]
[58 70]
[59 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
