%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUCCAGGCUGUGCCCGACGUGGGGAAGCGCGCCCAAACCAGCCCGCGGGCCGGCUCCCCGGCGACCUCAAGG\
) } def
/len { sequence length } bind def

/coor [
[149.79879761 286.89770508]
[146.16336060 272.34494019]
[133.30488586 260.58291626]
[138.14199829 242.95303345]
[133.91601562 228.56063843]
[129.69001770 214.16824341]
[114.16659546 209.24732971]
[104.45567322 195.97062683]
[104.46897125 179.35714722]
[114.39561462 165.83091736]
[109.58609772 151.62287903]
[104.77658081 137.41482544]
[99.96706390 123.20677948]
[95.15754700 108.99873352]
[89.64913940 102.77799988]
[90.45450592 94.11201477]
[86.22851562 79.71961975]
[82.00252533 65.32722473]
[77.77653503 50.93482971]
[73.55055237 36.54243469]
[67.98208618 28.93772888]
[69.45862579 21.47626686]
[65.82320404 6.92347813]
[59.87160110 -6.84527063]
[51.76198959 -19.46407318]
[43.65237808 -32.08287811]
[35.54276657 -44.70167923]
[20.04389191 -45.45305252]
[7.96779871 -55.19715881]
[3.95798969 -70.18718719]
[9.55631828 -84.65917206]
[22.61011314 -93.04833984]
[38.09992218 -92.12887573]
[50.06959915 -82.25434113]
[53.91656113 -67.22169495]
[48.16156769 -52.81129074]
[56.27117920 -40.19248962]
[64.38079071 -27.57368660]
[72.49040222 -14.95488262]
[76.97068787 -29.27015686]
[88.82141113 -38.46582031]
[103.80088043 -39.25048447]
[116.54750061 -31.34329605]
[122.49890137 -17.57446098]
[119.52490997 -2.87223864]
[108.68999481 7.50102997]
[93.87229156 9.83245564]
[80.37599182 3.28805208]
[84.01142120 17.84084129]
[87.94294739 32.31644440]
[92.16893005 46.70883942]
[96.39492035 61.10123444]
[100.62091064 75.49362946]
[104.84689331 89.88602448]
[109.36559296 104.18921661]
[114.17510986 118.39726257]
[118.98462677 132.60531616]
[123.79414368 146.81335449]
[128.60365295 161.02139282]
[142.18103027 164.19351196]
[152.28727722 173.64013672]
[156.30326843 186.76406860]
[153.26283264 200.03572083]
[144.08241272 209.94226074]
[148.30839539 224.33465576]
[152.53439331 238.72705078]
[163.59548950 245.71304321]
[166.71362305 258.00146484]
[160.71615601 268.70950317]
[164.35157776 283.26229858]
[178.48796082 289.94787598]
[184.97262573 304.17752075]
[180.74374390 319.23245239]
[167.79804993 328.00415039]
[152.24810791 326.35092163]
[141.43611145 315.05334473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[4 66]
[5 65]
[6 64]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[22 49]
[23 48]
[24 39]
[25 38]
[26 37]
[27 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
