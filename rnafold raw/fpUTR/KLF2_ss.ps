%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGCCGUCCCCGCCCGCCCGCGCCCCGACCAGCCCGGCCUCGGGCAGCCACUCACCGGUGUCCCCGUCCGCGUCCUUUCUCCCCGGGUCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[155.12971497 141.52449036]
[148.69015503 137.02079773]
[144.26689148 130.44216919]
[142.49533081 122.64427948]
[128.32032776 117.73825836]
[114.14530945 112.83224487]
[101.06663513 119.06878662]
[87.37402344 114.32972717]
[80.94866943 101.34277344]
[66.77365875 96.43675232]
[58.63953400 101.82515717]
[49.06541824 102.73814392]
[40.31693268 99.09140015]
[34.40260315 91.86425018]
[32.61297226 82.84075165]
[18.96849060 76.60952759]
[5.32401133 70.37830353]
[-8.32046795 64.14707947]
[-21.96494865 57.91585159]
[-41.77628326 60.90002823]
[-52.61506271 45.02014542]
[-66.62728119 39.66685104]
[-80.63950348 34.31355667]
[-96.29223633 36.61624908]
[-105.42005157 24.84627914]
[-119.43227386 19.49298477]
[-132.35855103 28.07733154]
[-147.86042786 27.39070511]
[-159.97711182 17.69712639]
[-164.04949951 2.72397327]
[-158.51167297 -11.77126884]
[-145.49302673 -20.21488571]
[-129.99951172 -19.36013412]
[-117.98870087 -9.53568172]
[-114.07897949 5.48076725]
[-100.06676483 10.83406067]
[-85.41627502 8.14846611]
[-75.28620911 20.30134010]
[-61.27398682 25.65463257]
[-47.26177216 31.00792694]
[-38.13508606 25.93304062]
[-27.50895500 26.83843231]
[-19.02641487 33.66215134]
[-15.73372269 44.27136993]
[-2.08924317 50.50259399]
[11.55523682 56.73382187]
[25.19971657 62.96504593]
[38.84419632 69.19627380]
[58.97742081 65.15965271]
[71.67967224 82.26174164]
[85.85469055 87.16775513]
[98.93336487 80.93121338]
[112.62597656 85.67027283]
[119.05133057 98.65722656]
[133.22634888 103.56324768]
[147.40135193 108.46926880]
[169.51133728 101.65404510]
[184.60946655 118.23920441]
[199.38159180 120.84392548]
[214.15370178 123.44864655]
[228.92582703 126.05336761]
[238.10992432 124.44815826]
[244.12213135 128.98222351]
[255.44110107 122.55151367]
[267.69729614 125.53818512]
[274.34860229 135.77941895]
[288.92578125 139.31579590]
[303.50296021 142.85218811]
[318.08013916 146.38856506]
[326.21667480 133.61846924]
[338.06036377 124.18417358]
[352.32647705 119.10904694]
[367.46749878 118.94359589]
[381.84112549 123.70576477]
[393.88812256 132.87899780]
[402.30178833 145.46823120]
[406.16943359 160.10791016]
[405.07156372 175.21000671]
[399.12722778 189.13636780]
[388.98123169 200.37635803]
[375.73413086 207.71076965]
[360.82290649 210.34399414]
[345.86499023 207.99041748]
[332.48291016 200.90531921]
[322.12823486 189.85725403]
[315.92419434 176.04463196]
[314.54373169 160.96574402]
[299.96658325 157.42935181]
[285.38940430 153.89297485]
[270.81222534 150.35658264]
[254.36848450 156.25581360]
[241.05003357 143.66426086]
[226.32110596 140.82548523]
[211.54898071 138.22076416]
[196.77687073 135.61604309]
[182.00474548 133.01132202]
[177.08097839 138.77621460]
[170.35002136 142.41294861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 56]
[5 55]
[6 54]
[9 51]
[10 50]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[21 40]
[22 39]
[23 38]
[25 36]
[26 35]
[58 96]
[59 95]
[60 94]
[61 93]
[63 92]
[66 90]
[67 89]
[68 88]
[69 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
