%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGAGCGAAGGGGUUGGAAGCGGAGUGAUUCCCCACCCCUGCUCCAUCUAGCUCUUUCCAGUGCAGCCACUGCCGCCGCCCAGGAGCCCUCGUCCCCUGCCUUGUCCCCCUACUCGUUCCCGCUCCCACGGC\
) } def
/len { sequence length } bind def

/coor [
[171.29360962 114.94548798]
[156.35758972 113.56146240]
[141.42158508 112.17743683]
[134.40817261 114.71531677]
[126.15792847 110.58504486]
[111.25786591 108.85639954]
[98.34926605 114.22850800]
[87.01348877 106.04366302]
[72.11342621 104.31501770]
[57.17741394 102.93099213]
[42.21341705 101.89232635]
[27.24942207 100.85366058]
[12.28542519 99.81499481]
[-2.67857075 98.77632904]
[-17.64256668 97.73766327]
[-32.60656357 96.69899750]
[-47.57055664 95.66033173]
[-62.53455353 94.62166595]
[-77.49855042 93.58300018]
[-92.46254730 92.54433441]
[-107.42654419 91.50566864]
[-122.41754150 90.98602295]
[-137.41754150 90.98602295]
[-152.41754150 90.98602295]
[-167.41653442 91.15926361]
[-182.41253662 91.50573730]
[-196.03030396 99.55972290]
[-208.93290710 92.11846161]
[-223.92889404 92.46492767]
[-238.92489624 92.81140137]
[-249.65646362 104.41351318]
[-265.45181274 104.94558716]
[-276.93978882 94.09194946]
[-277.30484009 78.29187775]
[-266.33035278 66.91926575]
[-250.52731323 66.72129059]
[-239.27136230 77.81539917]
[-224.27537537 77.46893311]
[-209.27937317 77.12246704]
[-196.73420715 69.09325409]
[-182.75900269 76.50973511]
[-167.76300049 76.16326904]
[-161.08880615 72.83405304]
[-152.41754150 75.98602295]
[-137.41754150 75.98602295]
[-122.41754150 75.98602295]
[-119.63830566 73.68050385]
[-115.57336426 72.65550995]
[-110.86033630 73.51438904]
[-106.38787842 76.54167175]
[-91.42388153 77.58033752]
[-76.45988464 78.61900330]
[-61.49588776 79.65766907]
[-46.53189087 80.69633484]
[-31.56789589 81.73500061]
[-16.60390091 82.77366638]
[-1.63990486 83.81233215]
[13.32409096 84.85099792]
[28.28808784 85.88966370]
[43.25208282 86.92832947]
[58.21607971 87.96699524]
[62.40219498 85.50226593]
[68.19519043 85.70405579]
[73.84207153 89.41495514]
[88.74213409 91.14360046]
[101.65073395 85.77149200]
[112.98651123 93.95633698]
[127.88657379 95.68498230]
[142.80560303 97.24142456]
[157.74162292 98.62545013]
[172.67762756 100.00947571]
[177.36874390 93.84463501]
[183.87709045 89.77099609]
[191.33763123 88.27285004]
[198.77861023 89.49588776]
[205.24826050 93.23454285]
[209.93637085 98.96467590]
[212.27581787 105.91652679]
[226.95281982 109.01260376]
[241.62980652 112.10868073]
[256.30682373 115.20475769]
[264.89752197 106.83296967]
[276.35726929 103.72061157]
[287.76885986 106.53874207]
[296.28591919 114.46392822]
[299.84280396 125.41426086]
[314.36117554 129.18487549]
[328.87951660 132.95547485]
[343.39785767 136.72608948]
[357.91622925 140.49668884]
[371.48504639 128.58283997]
[389.32781982 127.14199066]
[404.36791992 136.55862427]
[410.75177002 152.94792175]
[425.42877197 156.04400635]
[432.24856567 142.58470154]
[442.32022095 131.34974670]
[454.95703125 123.10517120]
[469.29742432 118.41309357]
[484.36364746 117.59343719]
[499.12841797 120.70207214]
[512.58508301 127.52706146]
[523.81616211 137.60305786]
[532.05584717 150.24307251]
[536.74237061 164.58526611]
[537.55621338 179.65179443]
[534.44189453 194.41537476]
[527.61169434 207.86940002]
[517.53137207 219.09657288]
[504.88818359 227.33139038]
[490.54415894 232.01239014]
[475.47732544 232.82041931]
[460.71496582 229.70037842]
[447.26354980 222.86499023]
[436.04028320 212.78033447]
[427.81036377 200.13395691]
[423.13488770 185.78814697]
[422.33267212 170.72099304]
[407.65570068 167.62492371]
[399.87844849 177.07696533]
[388.73968506 182.32434082]
[376.35427856 182.30213928]
[365.10339355 176.95262146]
[357.17654419 167.24812317]
[354.14559937 155.01504517]
[339.62725830 151.24443054]
[325.10891724 147.47383118]
[310.59054565 143.70321655]
[296.07220459 139.93261719]
[280.96466064 150.15444946]
[262.85372925 146.10710144]
[253.21073914 129.88175964]
[238.53373718 126.78568268]
[223.85673523 123.68960571]
[209.17973328 120.59352875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[5 68]
[6 67]
[8 65]
[9 64]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 46]
[23 45]
[24 44]
[25 42]
[26 41]
[28 39]
[29 38]
[30 37]
[78 135]
[79 134]
[80 133]
[81 132]
[86 129]
[87 128]
[88 127]
[89 126]
[90 125]
[94 119]
[95 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
