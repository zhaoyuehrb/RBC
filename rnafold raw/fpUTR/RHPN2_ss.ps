%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCGGGCCAGCCUCAGCCGCCGCGCCUCAGUCCGCCGUCCGCCCUCCGCGCCCGCGCCGCUAGC\
) } def
/len { sequence length } bind def

/coor [
[67.46022797 232.07110596]
[53.27179718 236.93818665]
[38.40624619 234.93435669]
[26.01294518 226.48414612]
[18.71750641 213.37777710]
[18.06551933 198.39195251]
[24.19515991 184.70146179]
[9.88647175 189.20272827]
[-4.42221689 193.70399475]
[-9.22757530 208.45826721]
[-21.80726814 217.54292297]
[-37.32414627 217.46473694]
[-49.81165314 208.25376892]
[-54.46809006 193.45184326]
[-49.50296021 178.75057983]
[-36.82545471 169.80291748]
[-21.31033897 170.04942322]
[-8.92348671 179.39530945]
[5.38520241 174.89404297]
[19.69389153 170.39277649]
[32.38137054 162.39103699]
[42.60848999 151.41806030]
[45.62596512 136.83232117]
[60.69510651 132.01240540]
[70.92222595 121.03943634]
[81.14934540 110.06646729]
[91.37645721 99.09349823]
[91.38796234 95.64235687]
[92.84113312 92.13873291]
[95.74673462 89.19375610]
[99.85800934 87.40695953]
[104.68555450 87.25976562]
[107.21674347 71.88996124]
[119.60796356 63.06316376]
[134.24511719 65.57098389]
[146.33889771 56.69740295]
[158.43267822 47.82381821]
[164.98193359 33.42180634]
[179.82048035 32.13092041]
[179.61306763 16.61523247]
[188.59263611 3.96031094]
[203.30635071 -0.96776754]
[218.09651184 3.72594380]
[227.27598572 16.23661613]
[227.31507874 31.75364304]
[218.19876099 44.31040955]
[203.43243408 49.07858276]
[188.69407654 44.22470093]
[183.00985718 57.99201584]
[167.30625916 59.91759872]
[155.21247864 68.79118347]
[143.11869812 77.66476440]
[141.11856079 92.37989807]
[128.98014832 101.55125427]
[113.55913544 99.35354614]
[102.34943390 109.32061768]
[92.12231445 120.29358673]
[81.89519501 131.26655579]
[71.66807556 142.23953247]
[67.91909027 157.61013794]
[53.58145905 161.64518738]
[43.35434341 172.61814880]
[58.34984589 172.98538208]
[71.59240723 180.03056335]
[80.27649689 192.26112366]
[82.56231689 207.08593750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[21 62]
[22 61]
[24 59]
[25 58]
[26 57]
[27 56]
[32 55]
[35 52]
[36 51]
[37 50]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
