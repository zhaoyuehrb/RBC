%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAUCCAGAAGCAGGUUACUGCUUCACUCCAUCGCAGCCACUUCCUCUUGAACUAAGGGAGGCAGGGCUUGUCUUCUCUCCUCAGAGCAGAGUCUGCGAUCUUCCCAGCACAGACGUUUGGACAGAGCAGGCUCCUAAGGUCUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[78.32127380 248.08985901]
[68.68625641 236.36250305]
[63.94198990 221.94528198]
[64.73010254 206.78799438]
[70.94400787 192.94055176]
[81.74333191 182.27569580]
[95.66754150 176.23576355]
[95.04356384 161.24874878]
[78.11797333 157.42083740]
[62.93743896 149.01368713]
[52.49762726 159.78450012]
[42.05781555 170.55531311]
[31.61800385 181.32611084]
[21.17819023 192.09692383]
[10.73837852 202.86773682]
[0.29856607 213.63853455]
[-3.17122126 229.66641235]
[-18.86717796 234.41708374]
[-30.64265060 223.00349426]
[-26.38404083 207.16694641]
[-10.47224236 203.19873047]
[-0.03242998 192.42791748]
[10.40738201 181.65710449]
[20.84719467 170.88630676]
[31.28700829 160.11549377]
[41.72681808 149.34468079]
[52.16663361 138.57388306]
[47.20270920 131.43916321]
[43.29508209 123.67545319]
[40.52193069 115.43807983]
[38.93873978 106.89184570]
[38.57717896 98.20772552]
[39.44448853 89.55945587]
[41.52330780 81.12007904]
[44.77205276 73.05841827]
[49.12572479 65.53576660]
[37.82672119 55.67004776]
[26.52771568 45.80432129]
[15.12669468 36.05667114]
[3.62489104 26.42814445]
[-7.87691259 16.79961777]
[-16.52590942 13.66167068]
[-19.51513100 6.84916782]
[-30.81413460 -3.01655531]
[-46.29828644 -6.26488113]
[-50.79638290 -20.46405029]
[-62.09538651 -30.32977295]
[-73.39439392 -40.19549561]
[-84.69339752 -50.06121826]
[-95.99240112 -59.92694092]
[-107.29140472 -69.79266357]
[-122.71285248 -67.20172882]
[-136.16551208 -75.17418671]
[-141.29743958 -89.94569397]
[-135.68550110 -104.54158783]
[-121.97948456 -112.07013702]
[-106.65094757 -108.97659302]
[-96.93756104 -96.72163391]
[-97.42568207 -81.09166718]
[-86.12667847 -71.22594452]
[-74.82767487 -61.36022568]
[-63.52866745 -51.49449921]
[-52.22966385 -41.62877655]
[-40.93066025 -31.76305389]
[-26.25468826 -29.22039223]
[-20.94841194 -14.31556034]
[-9.64940739 -4.44983721]
[1.75161386 5.29781485]
[13.25341702 14.92634106]
[24.75522041 24.55486679]
[31.94950104 26.44906044]
[36.39344025 34.50531769]
[47.69244385 44.37104034]
[58.99144745 54.23676300]
[70.79024506 45.93739319]
[84.19876862 40.61737442]
[98.47808838 38.56988525]
[112.84127808 39.90776443]
[117.74282837 25.73120689]
[122.64437866 11.55464935]
[127.54592896 -2.62190866]
[123.90771484 -18.61238670]
[136.11903381 -29.55842400]
[151.61793518 -24.19967270]
[154.46046448 -8.04875946]
[141.72248840 2.27964211]
[136.82093811 16.45619965]
[131.91938782 30.63275909]
[127.01783752 44.80931473]
[143.93969727 57.04329681]
[155.78775024 74.23757935]
[161.19387817 94.40670013]
[176.18656921 94.87474060]
[191.17926025 95.34278107]
[206.17196655 95.81082153]
[221.16465759 96.27886200]
[236.15734863 96.74691010]
[251.15005493 97.21495056]
[266.14273071 97.68299103]
[272.23443604 94.85477448]
[277.96487427 95.48184967]
[281.74572754 98.49528503]
[296.70596313 99.58659363]
[311.66622925 100.67790222]
[326.63702393 101.61353302]
[341.61672974 102.39337921]
[356.59643555 103.17322540]
[370.78021240 96.16385651]
[383.08801270 104.55237579]
[398.06771851 105.33222198]
[413.04745483 106.11206818]
[424.61941528 95.34799194]
[440.41012573 96.00273895]
[451.05123901 107.68785858]
[450.22958374 123.47077179]
[438.43261719 133.98776245]
[422.65927124 132.99928284]
[412.26760864 121.09178162]
[397.28787231 120.31193542]
[382.30816650 119.53208923]
[369.19586182 126.59724426]
[355.81658936 118.15293884]
[340.83688354 117.37309265]
[325.85717773 116.59324646]
[318.96932983 119.40453339]
[310.57492065 115.63815308]
[295.61465454 114.54684448]
[280.65441895 113.45553589]
[265.67471313 112.67568970]
[250.68200684 112.20764923]
[235.68931580 111.73960114]
[220.69660950 111.27156067]
[205.70391846 110.80352020]
[190.71122742 110.33547974]
[175.71852112 109.86743164]
[160.72583008 109.39939117]
[156.49681091 124.16786957]
[148.73681641 137.42590332]
[137.93084717 148.34486389]
[124.75427246 156.24234009]
[110.03057861 160.62477112]
[110.65455627 175.61178589]
[125.03264618 180.47335815]
[136.68110657 190.20361328]
[144.02458191 203.48660278]
[146.06991577 218.52592468]
[142.54049683 233.28761292]
[133.91366577 245.77529907]
[121.35610962 254.30009460]
[106.56614685 257.70910645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 142]
[8 141]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[36 74]
[37 73]
[38 72]
[39 70]
[40 69]
[41 68]
[43 67]
[44 66]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[78 89]
[79 88]
[80 87]
[81 86]
[92 136]
[93 135]
[94 134]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[102 128]
[103 127]
[104 126]
[105 124]
[106 123]
[107 122]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
