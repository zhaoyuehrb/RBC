%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCCAGACAUUUAAGGAACAGAUGACACUGGUAGCCUCACUGUUGGGGCAAAGGAAGAAGGAGACGGGCCACCCUACAGUCCAGGCACUAGCUGAGCCUCCAAAGCCGUGGACACAGCAUUCGAGUGUUGGGAGGGACUGGUCAGUGCUGAAGUCUCACAGGUGAGUGCCCACGCCUGCUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[72.44634247 119.67050171]
[66.16525269 101.15880585]
[51.43280029 98.33839417]
[36.70034409 95.51797485]
[21.96788597 92.69756317]
[7.23543024 89.87715149]
[-7.49702644 87.05673981]
[-22.25218010 84.35758209]
[-37.02902985 81.77986145]
[-51.80588150 79.20214081]
[-48.02114105 93.93759155]
[-53.01898193 110.96751404]
[-62.19112778 122.83645630]
[-71.36327362 134.70539856]
[-80.53542328 146.57434082]
[-89.70756531 158.44328308]
[-86.19875336 173.68211365]
[-93.35219574 187.58760071]
[-107.79025269 193.59396362]
[-122.69571686 188.86520386]
[-131.03068542 175.63409424]
[-128.85963440 160.14794922]
[-117.20767975 149.71887207]
[-101.57650757 149.27113342]
[-92.40435791 137.40219116]
[-83.23221588 125.53324890]
[-74.06006622 113.66430664]
[-64.88791656 101.79537201]
[-66.35865784 94.44098663]
[-80.56765747 89.63429260]
[-69.30013275 79.73222351]
[-70.77087402 72.37784576]
[-83.80217743 64.94918060]
[-96.83348846 57.52051544]
[-109.86479187 50.09185028]
[-122.89609528 42.66318512]
[-131.91813660 41.12716675]
[-136.07919312 35.00365448]
[-148.98655701 27.36166382]
[-161.89392090 19.71967316]
[-174.80128479 12.07768250]
[-193.20610046 12.31033230]
[-201.22413635 -3.29172087]
[-214.25543213 -10.72038651]
[-227.28674316 -18.14905167]
[-240.31803894 -25.57771683]
[-253.34934998 -33.00638199]
[-271.74786377 -32.47105026]
[-280.02142334 -47.93911743]
[-293.17312622 -55.15244675]
[-306.38372803 -62.25737381]
[-319.65234375 -69.25341797]
[-332.92092896 -76.24945831]
[-345.25378418 -70.80981445]
[-358.27664185 -73.43351746]
[-367.27331543 -82.94158936]
[-369.11791992 -95.70410919]
[-381.83609009 -87.18904877]
[-397.05587769 -85.57131958]
[-411.27984619 -91.22264099]
[-421.23944092 -102.84439850]
[-424.64599609 -117.76599121]
[-420.71676636 -132.55854797]
[-410.35458374 -143.82283020]
[-395.94067383 -148.97041321]
[-380.78723145 -146.81842041]
[-368.37637329 -137.86134338]
[-361.56002808 -124.15746307]
[-361.90457153 -108.85582733]
[-345.98397827 -114.25170898]
[-330.78378296 -106.31464386]
[-325.92486572 -89.51804352]
[-312.65628052 -82.52200317]
[-299.38769531 -75.52596283]
[-291.99197388 -75.18672943]
[-285.95980835 -68.30417633]
[-272.80807495 -61.09084320]
[-261.10021973 -64.17479706]
[-250.07946777 -58.25876236]
[-245.92068481 -46.03768921]
[-232.88937378 -38.60902405]
[-219.85807800 -31.18035698]
[-206.82676697 -23.75169182]
[-193.79547119 -16.32302666]
[-182.03845215 -19.21400070]
[-171.11650085 -13.11750317]
[-167.15928650 -0.82967877]
[-154.25192261 6.81231260]
[-141.34455872 14.45430374]
[-128.43721008 22.09629440]
[-115.46743011 29.63187790]
[-102.43612671 37.06054306]
[-89.40482330 44.48920822]
[-76.37351227 51.91787338]
[-63.34220886 59.34653854]
[-49.22816086 64.42528534]
[-34.45130920 67.00300598]
[-19.67445755 69.58072662]
[-12.53266335 67.62969971]
[-4.67661333 72.32427979]
[10.05584335 75.14469910]
[24.78829956 77.96511078]
[39.52075577 80.78552246]
[54.25321198 83.60593414]
[68.98567200 86.42634583]
[75.07886505 77.08559418]
[83.87647247 70.23148346]
[94.42378235 66.60780334]
[105.57621765 66.60780334]
[116.12352753 70.23148346]
[124.92113495 77.08559418]
[131.01432800 86.42634583]
[145.74678040 83.60593414]
[160.47924805 80.78552246]
[175.18800354 77.84404755]
[189.87208557 74.78170013]
[204.55615234 71.71936035]
[217.98858643 59.13517761]
[234.43092346 65.24761963]
[249.06265259 61.94417953]
[263.69436646 58.64073563]
[278.32608032 55.33729172]
[292.95782471 52.03385162]
[307.58953857 48.73040771]
[322.22125244 45.42696381]
[336.79666138 41.88331604]
[348.19949341 30.91580009]
[362.46667480 35.19327545]
[376.98181152 31.41037941]
[391.49697876 27.62748146]
[402.89978027 16.65996552]
[417.16696167 20.93744087]
[431.68212891 17.15454483]
[442.97094727 5.25939131]
[458.85150146 9.35079670]
[462.98724365 25.21987343]
[451.12368774 36.54187393]
[435.46502686 31.66969872]
[420.94985962 35.45259476]
[410.58526611 46.14953232]
[395.27987671 42.14263535]
[380.76470947 45.92553329]
[366.24957275 49.70843124]
[355.88497925 60.40536880]
[340.57955933 56.39846802]
[337.42651367 60.00617599]
[331.96737671 61.66115570]
[325.52468872 60.05868530]
[310.89297485 63.36212921]
[296.26126099 66.66557312]
[281.62954712 69.96901703]
[266.99780273 73.27245331]
[252.36608887 76.57589722]
[237.73437500 79.87934113]
[231.00321960 89.94295502]
[218.82737732 92.80744934]
[207.61849976 86.40343475]
[192.93441772 89.46577454]
[178.25035095 92.52812195]
[172.33415222 96.97900391]
[163.29965210 95.51797485]
[148.56719971 98.33839417]
[133.83474731 101.15880585]
[130.20248413 115.29518890]
[120.95651245 126.58866882]
[127.40118408 140.13363647]
[133.84585571 153.67860413]
[140.29052734 167.22357178]
[146.73519897 180.76853943]
[161.35624695 186.14094543]
[167.69911194 199.96928406]
[162.48724365 213.87510681]
[168.93193054 227.42007446]
[184.21054077 230.12997437]
[194.95408630 241.32621765]
[197.03144836 256.70361328]
[189.64385986 270.34924316]
[175.63197327 277.01605225]
[160.38365173 274.14056396]
[149.76219177 262.82846069]
[147.85176086 247.42942810]
[155.38694763 233.86474609]
[148.94227600 220.31977844]
[134.86453247 215.59191895]
[128.13577271 201.94720459]
[133.19023132 187.21322632]
[126.74555969 173.66824341]
[120.30088806 160.12327576]
[113.85621643 146.57830811]
[107.41154480 133.03334045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 100]
[8 98]
[9 97]
[10 96]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[32 95]
[33 94]
[34 93]
[35 92]
[36 91]
[38 90]
[39 89]
[40 88]
[41 87]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[49 77]
[50 76]
[51 74]
[52 73]
[53 72]
[57 69]
[112 163]
[113 162]
[114 161]
[115 159]
[116 158]
[117 157]
[119 154]
[120 153]
[121 152]
[122 151]
[123 150]
[124 149]
[125 148]
[126 145]
[128 143]
[129 142]
[130 141]
[132 139]
[133 138]
[165 190]
[166 189]
[167 188]
[168 187]
[169 186]
[172 183]
[173 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
