%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAAAUCCCUAGGCCAGAGGAAGAAGAGCGCAGGCCUGGCGAGGCGGCGGCGGGCGGAGGCUGGGCCGGAGGGGUGGGGACGGCGAGGAGGUGGAGGCCGGCGCUCCGCUCCGCUCCAGCUCGGUUUC\
) } def
/len { sequence length } bind def

/coor [
[76.09123993 238.19842529]
[66.27411652 249.53967285]
[53.22415924 256.93551636]
[38.45037460 259.53079224]
[23.66109848 257.02532959]
[10.56644821 249.70890808]
[0.68059665 238.42750549]
[-4.85332870 224.48564148]
[-5.39542580 209.49543762]
[-0.88301033 195.19026184]
[8.16182423 183.22454834]
[-6.05890322 187.99642944]
[-20.27963066 192.76832581]
[-34.50035858 197.54020691]
[-48.72108459 202.31208801]
[-62.94181442 207.08398438]
[-77.16254425 211.85586548]
[-87.78433990 223.58139038]
[-102.31184387 220.29493713]
[-112.93364716 232.02046204]
[-127.46115112 228.73399353]
[-131.13998413 243.71630859]
[-142.35057068 254.31471252]
[-157.51567078 257.14730835]
[-171.79612732 251.31018066]
[-180.63513184 238.66598511]
[-181.21215820 223.24942017]
[-173.34310913 209.97985840]
[-159.53894043 203.09155273]
[-144.20452881 204.78256226]
[-132.23303223 214.51325989]
[-122.62840271 203.12905884]
[-107.08373260 206.07420349]
[-97.47909546 194.68998718]
[-81.93442535 197.63513184]
[-67.71369934 192.86325073]
[-53.49297333 188.09136963]
[-39.27224350 183.31947327]
[-25.05151749 178.54759216]
[-10.83078957 173.77571106]
[3.38993788 169.00381470]
[16.43985748 161.60789490]
[27.84010506 151.85934448]
[39.24035263 142.11077881]
[50.64059830 132.36222839]
[51.54066467 117.53908539]
[62.96326447 107.49026489]
[78.50503540 108.53484344]
[89.90528107 98.78628540]
[93.54418945 91.49684906]
[101.69777679 88.94464111]
[113.32850647 79.47225189]
[124.95923615 69.99987030]
[136.58996582 60.52748489]
[148.22070312 51.05510330]
[159.73701477 41.44393921]
[171.13726807 31.69538307]
[182.53752136 21.94682503]
[193.93775940 12.19826794]
[205.33801270 2.44971061]
[216.73825073 -7.29884672]
[228.02079773 -17.18339729]
[239.18399048 -27.20252228]
[250.34719849 -37.22164536]
[261.51040649 -47.24077225]
[272.67361450 -57.25989532]
[283.21643066 -67.92990112]
[293.10098267 -79.21243286]
[302.98553467 -90.49497223]
[297.09655762 -104.53353882]
[297.88363647 -119.67512512]
[305.13711548 -132.91925049]
[317.37136841 -141.66477966]
[332.12863159 -144.22062683]
[346.47274780 -140.13264465]
[349.74688721 -155.61135864]
[363.95355225 -160.08576965]
[373.83810425 -171.36831665]
[376.49691772 -187.55049133]
[391.93389893 -193.08503723]
[404.26882935 -182.27848816]
[400.81259155 -166.24769592]
[385.12063599 -161.48376465]
[375.23608398 -150.20121765]
[372.66894531 -135.52951050]
[357.75531006 -130.24809265]
[363.69424438 -116.56620789]
[363.10144043 -101.60098267]
[356.04089355 -88.32281494]
[343.86575317 -79.39050293]
[328.95919800 -76.61891174]
[314.26806641 -80.61042023]
[304.38351440 -69.32788086]
[294.49896240 -58.04534531]
[309.33688354 -55.84617233]
[317.08016968 -42.99932098]
[312.09494019 -28.85197639]
[298.00833130 -23.69753456]
[285.06961060 -31.28629303]
[282.69274902 -46.09669113]
[271.52954102 -36.07756805]
[260.36633301 -26.05844307]
[249.20312500 -16.03931808]
[238.03991699 -6.02019310]
[235.13449097 0.85702962]
[226.48681641 4.10140038]
[215.08656311 13.84995747]
[203.68632507 23.59851456]
[192.28607178 33.34707260]
[180.88581848 43.09563065]
[169.48558044 52.84418869]
[166.41607666 59.64976120]
[157.69308472 62.68583298]
[146.06236267 72.15821838]
[134.43162537 81.63059998]
[122.80088806 91.10298920]
[111.17015839 100.57537079]
[99.65383911 110.18653107]
[88.25359344 119.93508911]
[86.87265015 135.45059204]
[75.17230225 145.17460632]
[60.38915634 143.76248169]
[48.98890686 153.51103210]
[37.58866119 163.25958252]
[26.18841553 173.00814819]
[41.10154724 171.39617920]
[55.69262314 174.87475586]
[68.27443695 183.04164124]
[77.39212036 194.95246887]
[81.99136353 209.22996521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[19 33]
[21 31]
[42 125]
[43 124]
[44 123]
[45 122]
[48 119]
[49 118]
[51 117]
[52 116]
[53 115]
[54 114]
[55 113]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 94]
[68 93]
[69 92]
[75 86]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
