%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUAAAUAUAUCGAGGUGGCUAAUUGAUGUAUAAUAAUUUACAAAAUUAUUCUUCUAUGCUACAGAGCUACAAUUCAAUUUACAGUAGUAAAU\
) } def
/len { sequence length } bind def

/coor [
[127.93327332 297.43087769]
[117.70056152 297.43154907]
[107.61573792 295.67297363]
[97.97913361 292.20596313]
[89.07798767 287.13235474]
[81.17788696 280.60177612]
[74.51483154 272.80743408]
[69.28821564 263.98028564]
[65.65481567 254.38221741]
[63.72412491 244.29833984]
[63.55504608 234.02838135]
[65.15408325 223.87792969]
[68.47510529 214.14923096]
[73.42070770 205.13224792]
[79.84500885 197.09596252]
[87.55802155 190.28045654]
[96.33120728 184.88960266]
[105.90429688 181.08508301]
[103.46086121 166.28543091]
[101.01743317 151.48577881]
[98.57399750 136.68612671]
[96.13056946 121.88647461]
[93.68713379 107.08682251]
[90.07088470 102.99855042]
[89.11500549 97.14487457]
[91.60112000 91.24198151]
[90.13086700 76.31420898]
[88.66060638 61.38643646]
[76.72727966 51.37477493]
[75.44887543 36.21494675]
[85.06700897 24.90003967]
[83.59675598 9.97226810]
[82.12649536 -4.95550251]
[80.65624237 -19.88327408]
[79.18598175 -34.81104279]
[76.50073242 -49.56873322]
[72.61844635 -64.05762482]
[68.73616028 -78.54650879]
[64.85387421 -93.03540039]
[60.97158432 -107.52428436]
[57.08930206 -122.01316833]
[53.20701599 -136.50205994]
[43.26723099 -150.23657227]
[53.71339417 -163.59001160]
[69.43675232 -157.24867249]
[67.69589996 -140.38433838]
[71.57818604 -125.89545441]
[75.46047211 -111.40657043]
[79.34275818 -96.91767883]
[83.22504425 -82.42879486]
[87.10733032 -67.93991089]
[90.98961639 -53.45101929]
[93.23853302 -52.30802917]
[95.19277191 -50.23637772]
[96.51452637 -47.33722687]
[96.90582275 -43.82513046]
[96.14445496 -40.01217651]
[94.11375427 -36.28130341]
[95.58400726 -21.35353088]
[97.05426788 -6.42575979]
[98.52452087 8.50201130]
[99.99478149 23.42978287]
[111.63552856 32.65087128]
[113.33923340 47.76881027]
[103.58837891 59.91617966]
[105.05863190 74.84394836]
[106.52889252 89.77172089]
[108.48678589 104.64339447]
[110.93021393 119.44304657]
[113.37364960 134.24269104]
[115.81707764 149.04234314]
[118.26051331 163.84199524]
[120.70394135 178.64164734]
[141.66067505 181.67402649]
[160.21952820 191.81973267]
[174.05354309 207.78761292]
[181.43486023 227.55773926]
[181.45046997 248.63691711]
[174.11514282 268.37304688]
[160.36741638 284.28890991]
[168.28843689 297.02691650]
[176.20945740 309.76495361]
[184.13047791 322.50299072]
[192.05149841 335.24102783]
[199.97251892 347.97906494]
[214.68246460 355.22814941]
[215.48937988 371.60745239]
[201.56320190 380.26730347]
[187.22994995 372.29922485]
[187.23448181 355.90008545]
[179.31346130 343.16204834]
[171.39244080 330.42401123]
[163.47142029 317.68597412]
[155.55041504 304.94793701]
[147.62939453 292.20989990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[26 67]
[27 66]
[28 65]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
