%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGAACUCAAAACCGACUGCGGAGAGCCCAGCGGGCGGGAGCUGGGGCGCACGUUGGGGCCCUGCCGAGGGGCGGGCAGGGCCCGGUGCCAGCCCCGGCACCGACGGGACGCCCUCCUCCCUCCGCAGGGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[96.85394287 364.65252686]
[87.22656250 376.61953735]
[72.89971924 382.15463257]
[57.72725296 379.76885986]
[45.79048538 370.10403442]
[40.30034256 355.75988770]
[42.73364639 340.59500122]
[52.43585205 328.68856812]
[66.79711914 323.24340820]
[69.12712860 308.42547607]
[71.45713806 293.60754395]
[69.83602142 291.22674561]
[69.09989166 288.03500366]
[69.57231140 284.38113403]
[71.43895721 280.72784424]
[74.71112061 277.59851074]
[78.35076141 263.04675293]
[81.99039459 248.49502563]
[76.23894501 231.95179749]
[89.05133057 218.77807617]
[92.36586761 204.14886475]
[95.68040466 189.51965332]
[98.99493408 174.89044189]
[102.30947113 160.26123047]
[105.62400818 145.63201904]
[108.93854523 131.00280762]
[104.09633636 125.27541351]
[94.41191864 113.82063293]
[89.56970978 108.09323883]
[74.59297180 108.92833710]
[59.61623764 109.76343536]
[44.63950348 110.59853363]
[29.16155624 117.51731110]
[18.22844505 104.55955505]
[27.65321922 90.46665192]
[43.80440521 95.62179565]
[58.78113937 94.78669739]
[73.75787354 93.95159912]
[88.73461151 93.11650085]
[101.46712494 85.18662262]
[108.82194519 72.11349487]
[116.17676544 59.04036713]
[123.53158569 45.96723938]
[130.88639832 32.89411545]
[128.16699219 20.23192596]
[134.62643433 9.47307110]
[146.30798340 6.14235258]
[153.95222473 -6.76367140]
[161.59648132 -19.66969490]
[169.24073792 -32.57571793]
[176.88497925 -45.48174286]
[184.52923584 -58.38776779]
[192.02923584 -71.37814331]
[192.05236816 -87.19933319]
[205.03620911 -94.49792480]
[212.39102173 -107.57104492]
[219.74583435 -120.64417267]
[227.10066223 -133.71730042]
[218.18603516 -144.06582642]
[218.44691467 -161.19888306]
[220.44621277 -176.06504822]
[222.44551086 -190.93121338]
[224.44482422 -205.79737854]
[226.44412231 -220.66352844]
[228.44343567 -235.52969360]
[230.44273376 -250.39585876]
[232.44203186 -265.26202393]
[234.44134521 -280.12817383]
[236.44064331 -294.99435425]
[225.12220764 -305.60906982]
[222.23764038 -320.85568237]
[228.89614868 -334.87152100]
[242.53736877 -342.26724243]
[257.91598511 -340.19903564]
[269.11862183 -329.46212769]
[271.83761597 -314.18511963]
[265.02746582 -300.24234009]
[251.30680847 -292.99505615]
[249.30751038 -278.12887573]
[247.30819702 -263.26272583]
[245.30889893 -248.39656067]
[243.30958557 -233.53039551]
[241.31028748 -218.66423035]
[239.31098938 -203.79806519]
[237.31167603 -188.93190002]
[235.31237793 -174.06575012]
[233.31306458 -159.19958496]
[245.28924561 -150.16790771]
[259.03289795 -156.17723083]
[272.77655029 -162.18653870]
[286.52023315 -168.19586182]
[300.26388550 -174.20518494]
[314.00753784 -180.21450806]
[319.53567505 -195.02041626]
[333.94851685 -201.50469971]
[348.69515991 -195.82032776]
[355.02667236 -181.33975220]
[349.18670654 -166.65402222]
[334.64001465 -160.47593689]
[320.01684570 -166.47084045]
[306.27319336 -160.46153259]
[292.52954102 -154.45220947]
[278.78588867 -148.44288635]
[265.04223633 -142.43357849]
[251.29856873 -136.42425537]
[240.17378235 -126.36248016]
[232.81896973 -113.28935242]
[225.46414185 -100.21623230]
[218.10932922 -87.14310455]
[218.61225891 -72.25698853]
[205.10235596 -64.02333069]
[204.55973816 -56.59143448]
[197.43525696 -50.74351501]
[189.79100037 -37.83749390]
[182.14675903 -24.93146896]
[174.50250244 -12.02544498]
[166.85826111 0.88057840]
[159.21400452 13.78660202]
[160.00083923 31.28342056]
[143.95953369 40.24893570]
[136.60470581 53.32205963]
[129.24989319 66.39518738]
[121.89507294 79.46831512]
[114.54025269 92.54143524]
[123.56775665 134.31733704]
[120.25321960 148.94654846]
[116.93868256 163.57575989]
[113.62415314 178.20497131]
[110.30961609 192.83419800]
[106.99507904 207.46340942]
[103.68054199 222.09262085]
[109.90321350 233.45063782]
[106.78575897 245.60624695]
[96.54212952 252.13467407]
[92.90249634 266.68640137]
[89.26285553 281.23812866]
[86.27507019 295.93756104]
[83.94506073 310.75549316]
[81.61504364 325.57342529]
[93.61216736 335.16323853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[16 136]
[17 135]
[18 134]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[29 39]
[30 38]
[31 37]
[32 36]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[47 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
[53 111]
[55 109]
[56 108]
[57 107]
[58 106]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
