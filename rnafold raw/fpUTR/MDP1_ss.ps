%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCCAUUUGUCUAUGGCAGGCAGGGUGGCUGCCUUAGCUGCCGGAGGUUCCGCACUCUCUAAGGCCCCGGGUGAAGCCCCACCUCUGCUGCGCGCAGCCUGCGGUGCGGGUC\
) } def
/len { sequence length } bind def

/coor [
[95.34186554 141.48757935]
[80.34186554 141.48724365]
[72.84223938 128.49664307]
[80.34214783 115.50686646]
[72.84214783 115.50686646]
[63.44449615 127.19806671]
[54.04684830 138.88926697]
[44.64919662 150.58047485]
[35.25154877 162.27166748]
[37.20923996 177.95423889]
[27.43848419 190.37631226]
[11.73609257 192.16809082]
[-0.58198172 182.26654053]
[-2.20764446 166.54608154]
[7.82358122 154.33338928]
[23.56034660 152.87402344]
[32.95799637 141.18281555]
[42.35564804 129.49162292]
[51.75329590 117.80042267]
[61.15094757 106.10921478]
[77.34534454 91.36470032]
[94.19247437 92.91275024]
[93.38038635 77.93474579]
[92.56830597 62.95674515]
[91.75621796 47.97874451]
[90.94413757 33.00074387]
[89.92931366 18.03511238]
[88.71192932 3.08459425]
[87.49455261 -11.86592388]
[86.27716827 -26.81644058]
[76.41469574 -28.00476646]
[66.90068817 -33.98973846]
[60.05347061 -44.52138138]
[57.97616196 -58.26025772]
[52.42409134 -72.19490814]
[46.87201691 -86.12956238]
[41.31994629 -100.06420898]
[35.76787186 -113.99886322]
[30.21580124 -127.93350983]
[24.66372871 -141.86816406]
[7.01302481 -153.86129761]
[10.32200432 -174.15792847]
[3.65732908 -187.59600830]
[-3.00734639 -201.03410339]
[-9.71300316 -207.43618774]
[-9.66499424 -214.92753601]
[-15.96333122 -228.54116821]
[-22.26166725 -242.15480042]
[-34.39985657 -253.99121094]
[-26.38619614 -268.93167114]
[-9.81120586 -265.36712646]
[-8.64803600 -248.45314026]
[-2.34969950 -234.83950806]
[3.94863701 -221.22587585]
[10.43073750 -207.69877625]
[17.09541321 -194.26069641]
[23.76008797 -180.82260132]
[32.74980545 -179.34310913]
[40.11390305 -173.74627686]
[44.06316376 -165.22882080]
[43.56245041 -155.71456909]
[38.59838104 -147.42024231]
[44.15045166 -133.48558044]
[49.70252228 -119.55093384]
[55.25459671 -105.61628723]
[60.80666733 -91.68163300]
[66.35874176 -77.74698639]
[71.91081238 -63.81233215]
[79.01821136 -61.41757202]
[90.27343750 -71.33320618]
[93.23300934 -56.62804794]
[100.34040833 -54.23328781]
[113.19326782 -61.96659470]
[126.04612732 -69.69990540]
[138.89898682 -77.43321228]
[149.35363770 -90.77998352]
[165.07295227 -84.42864990]
[163.32138062 -67.56542969]
[146.63229370 -64.58035278]
[133.77943420 -56.84704590]
[120.92657471 -49.11373520]
[108.07371521 -41.38042831]
[101.22768402 -28.03382301]
[102.44506836 -13.08330441]
[103.66245270 1.86721337]
[104.87982941 16.81773186]
[108.60858154 23.31535530]
[105.92214203 32.18865967]
[106.73422241 47.16666031]
[107.54630280 62.14466095]
[108.35839081 77.12266541]
[109.17047119 92.10066223]
[114.53334808 106.10921478]
[123.93099976 117.80042267]
[138.60749817 123.70896149]
[140.55070496 138.47625732]
[149.94836426 150.16746521]
[159.34600830 161.85867310]
[168.74365234 173.54986572]
[183.42016602 179.45840454]
[185.36337280 194.22570801]
[200.83937073 199.65020752]
[203.61331177 215.81304932]
[190.83160400 226.08728027]
[175.64295959 219.90365601]
[173.67216492 203.62336731]
[159.66784668 198.55105591]
[157.05245972 182.94750977]
[147.65480042 171.25631714]
[138.25715637 159.56510925]
[128.85951233 147.87391663]
[114.85518646 142.80160522]
[112.23979950 127.19806671]
[102.84214783 115.50686646]
[95.34214783 115.50686646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 86]
[28 85]
[29 84]
[30 83]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
[72 82]
[73 81]
[74 80]
[75 79]
[93 114]
[94 113]
[96 111]
[97 110]
[98 109]
[99 108]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
