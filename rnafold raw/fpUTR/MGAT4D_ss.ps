%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGGUGCAGAAGUUCUGUGGCAAGGCGGCUUCCCAGGGCGGGUGUGCUGGGGACCCACGCGGCACCGCGGGGAGGGGGCUCUGCGCGCUCAACCCCGUCCCUGGCAUUAUCCGCCGCCUCCACCCGCCGGCCUCCCGCAGCCUGGCCAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[104.29814911 171.05186462]
[91.37242126 163.44097900]
[93.56316376 148.60130310]
[94.52064514 133.63189697]
[87.03433228 134.08473206]
[86.19809723 149.88383484]
[72.85631561 156.50547791]
[64.83933258 169.18331909]
[56.82234192 181.86117554]
[48.80535507 194.53903198]
[40.78836823 207.21687317]
[32.77138138 219.89472961]
[29.41621208 236.51336670]
[12.51823235 237.88981628]
[6.51774836 222.03326416]
[20.09352875 211.87774658]
[28.11051750 199.19989014]
[36.12750244 186.52203369]
[44.14449310 173.84419250]
[52.16147995 161.16633606]
[60.17846680 148.48847961]
[60.44126892 133.59619141]
[74.35647583 126.06774902]
[69.74690247 95.97825623]
[87.99211884 78.67668915]
[84.99173737 63.97983170]
[81.99134827 49.28297043]
[78.99095917 34.58611298]
[75.99057770 19.88925171]
[72.99018860 5.19239235]
[69.98980713 -9.50446701]
[50.66397858 -16.80135727]
[39.65135956 -34.11598969]
[41.21502304 -54.43861771]
[54.56557846 -69.65815735]
[50.10303497 -83.97897339]
[45.64048767 -98.29978180]
[41.17794037 -112.62059784]
[36.71539688 -126.94140625]
[32.25284958 -141.26222229]
[27.64633369 -155.53736877]
[22.89631462 -169.76542664]
[18.14629364 -183.99346924]
[13.39627457 -198.22151184]
[-12.26355648 -208.39826965]
[-17.00802994 -238.83653259]
[-28.43371391 -248.55526733]
[-39.85939789 -258.27398682]
[-51.28508377 -267.99273682]
[-62.71076965 -277.71145630]
[-74.13645172 -287.43017578]
[-89.66133118 -290.47793579]
[-94.34273529 -304.61773682]
[-110.07362366 -303.09634399]
[-122.21953583 -313.20834351]
[-123.57450867 -328.95443726]
[-113.33467102 -340.99276733]
[-97.57512665 -342.18118286]
[-85.64573669 -331.81463623]
[-84.62400055 -316.04342651]
[-69.91636658 -313.69082642]
[-64.41772461 -298.85586548]
[-52.99203873 -289.13714600]
[-41.56635284 -279.41839600]
[-30.14066696 -269.69967651]
[-18.71498299 -259.98095703]
[-7.28929853 -250.26222229]
[6.38919926 -256.41839600]
[6.69125509 -271.41537476]
[6.99331093 -286.41232300]
[7.29536676 -301.40927124]
[-0.16247003 -315.36245728]
[7.82955122 -327.93133545]
[8.13160706 -342.92831421]
[8.43366241 -357.92526245]
[8.73571873 -372.92221069]
[0.35415697 -387.01766968]
[8.60534477 -401.18981934]
[25.00116730 -400.85958862]
[32.67500687 -386.36669922]
[23.73267746 -372.62017822]
[23.43062210 -357.62319946]
[23.12856483 -342.62625122]
[22.82650948 -327.62930298]
[30.30595207 -314.74880981]
[22.29232407 -301.10723877]
[21.99026871 -286.11026001]
[21.68821335 -271.11331177]
[21.38615799 -256.11636353]
[30.42440033 -250.90702820]
[37.12796783 -243.30821228]
[40.93655014 -234.24139404]
[41.62529373 -224.73080444]
[39.31070328 -215.78869629]
[34.41930389 -208.30761719]
[27.62432098 -202.97154236]
[32.37434006 -188.74348450]
[37.12435913 -174.51544189]
[41.87438202 -160.28739929]
[47.00505066 -154.90782166]
[46.57366180 -145.72476196]
[51.03620911 -131.40396118]
[55.49875641 -117.08314514]
[59.96129990 -102.76232910]
[64.42384338 -88.44151306]
[68.88639069 -74.12070465]
[78.66922760 -73.34086609]
[87.78171539 -69.61828613]
[95.35787964 -63.28728104]
[100.67185211 -54.93096542]
[103.20742035 -45.32755280]
[102.70812225 -35.37791061]
[99.20306396 -26.02103806]
[93.00585938 -18.14546013]
[84.68666840 -12.50485229]
[87.68704987 2.19200706]
[90.68743896 16.88886642]
[93.68782043 31.58572578]
[96.68820953 46.28258514]
[99.68859100 60.97944641]
[102.68898010 75.67630768]
[116.49662781 78.00302124]
[128.18135071 88.28520966]
[133.21752930 104.66092682]
[128.59867859 122.78670502]
[138.08535767 134.40577698]
[147.57203674 146.02485657]
[157.29075623 157.45053101]
[167.23760986 168.67819214]
[177.18444824 179.90585327]
[187.24383545 191.03279114]
[197.41474915 202.05787659]
[207.58566284 213.08296204]
[222.98072815 211.14096069]
[236.56083679 218.64833069]
[243.10412598 232.71833801]
[240.09458923 247.94076538]
[228.68945312 258.46228027]
[213.27423096 260.23715210]
[199.77636719 252.58291626]
[193.38607788 238.44276428]
[196.56057739 223.25387573]
[186.38966370 212.22879028]
[176.21875000 201.20370483]
[169.33224487 198.40376282]
[165.95678711 189.85270691]
[156.00994873 178.62504578]
[146.06309509 167.39738464]
[141.38041687 166.22117615]
[137.40847778 162.05598450]
[135.95295715 155.51153564]
[126.46627808 143.89245605]
[116.97959900 132.27339172]
[109.49327850 132.72622681]
[112.24814606 147.47108459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[25 121]
[26 120]
[27 119]
[28 118]
[29 117]
[30 116]
[31 115]
[35 106]
[36 105]
[37 104]
[38 103]
[39 102]
[40 101]
[41 99]
[42 98]
[43 97]
[44 96]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[53 60]
[68 89]
[69 88]
[70 87]
[71 86]
[73 84]
[74 83]
[75 82]
[76 81]
[125 153]
[126 152]
[127 151]
[128 148]
[129 147]
[130 146]
[131 144]
[132 143]
[133 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
