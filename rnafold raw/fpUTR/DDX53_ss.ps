%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUUGGUGCAGAAGGUGACGGGAAACAGGCCGCAGACCUGAACUUCCAACCGUAUGUAGGCGAGAAGCCGGUGCCGAUACUCCCACUAUCCCACA\
) } def
/len { sequence length } bind def

/coor [
[93.19411469 152.55775452]
[79.00550079 157.42427063]
[64.22530365 154.86581421]
[52.49801636 145.51322937]
[46.71535873 131.67268372]
[48.30321121 116.75695801]
[56.87004089 104.44398499]
[70.30344391 97.76987457]
[85.28984833 98.37998962]
[73.26864624 89.40833282]
[61.24744034 80.43667603]
[49.22623444 71.46501923]
[34.47713470 75.91139221]
[20.10594368 70.87927246]
[11.55465126 58.49624252]
[11.93021774 43.63027573]
[-0.09098669 34.65861893]
[-12.11219120 25.68696022]
[-23.00292206 27.89786339]
[-33.06642532 23.73394012]
[-38.96540070 14.84409237]
[-38.89427948 4.39728594]
[-50.31596756 -5.32613993]
[-61.73765564 -15.04956627]
[-73.15934753 -24.77299118]
[-90.47292328 -23.01027679]
[-103.50962067 -34.02643585]
[-104.61542511 -50.72245026]
[-116.34289551 -60.07479858]
[-128.07037354 -69.42714691]
[-139.79783630 -78.77949524]
[-155.08850098 -75.50382996]
[-168.88310242 -82.86881256]
[-174.66825867 -97.39691925]
[-169.71240234 -112.22842407]
[-156.35554504 -120.36034393]
[-140.90435791 -117.95303345]
[-130.65444946 -106.14315033]
[-130.44549561 -90.50696564]
[-118.71802521 -81.15461731]
[-106.99054718 -71.80226898]
[-95.26307678 -62.44992447]
[-82.67507172 -65.67172241]
[-70.36753845 -60.92962646]
[-62.97953796 -49.76799393]
[-63.43592072 -36.19467926]
[-52.01422882 -26.47125435]
[-40.59254074 -16.74782944]
[-29.17085075 -7.02440310]
[-10.03921127 -5.14127493]
[-3.14053297 13.66575623]
[8.88067150 22.63741493]
[20.90187645 31.60907173]
[35.04653931 27.01925087]
[49.35083008 31.69378662]
[58.26396179 44.03920746]
[58.19789124 59.44381332]
[70.21909332 68.41547394]
[82.24030304 77.38713074]
[94.26150513 86.35878754]
[109.21336365 87.55963898]
[122.51235199 80.62156677]
[135.81134033 73.68349457]
[141.97430420 58.87141800]
[157.43643188 54.59333420]
[170.33651733 64.13101959]
[170.77870178 80.16797638]
[158.42379761 90.40203094]
[142.74942017 86.98248291]
[129.45042419 93.92055511]
[116.15143585 100.85862732]
[114.37763214 100.94483948]
[112.60448456 100.98682404]
[124.02616882 110.71025085]
[135.44786072 120.43367767]
[148.46632385 120.20409393]
[157.79920959 128.69461060]
[158.73551941 140.87245178]
[169.83969116 150.95697021]
[180.94386292 161.04147339]
[192.04803467 171.12599182]
[207.51713562 168.83673096]
[220.81152344 177.07040405]
[225.65397644 191.93931580]
[219.75805664 206.42283630]
[205.90760803 213.68226624]
[190.64242554 210.28993225]
[181.17022705 197.84761047]
[181.96351624 182.23016357]
[170.85934448 172.14564514]
[159.75517273 162.06112671]
[148.65100098 151.97662354]
[131.39144897 149.28385925]
[125.72443390 131.85536194]
[114.30274200 122.13193512]
[102.88105774 112.40850830]
[106.81067657 126.88462830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 60]
[10 59]
[11 58]
[12 57]
[16 53]
[17 52]
[18 51]
[22 49]
[23 48]
[24 47]
[25 46]
[28 42]
[29 41]
[30 40]
[31 39]
[61 71]
[62 70]
[63 69]
[73 96]
[74 95]
[75 94]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
