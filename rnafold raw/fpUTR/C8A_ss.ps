%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGUAUCUGGGUGAGUUUCCAACAUCAGAUAGAUCUUACAGGUCCCAGCCUGUAGACAUCUUUUACUCCAAUUUCCUGAAUAGAUAGCUUUAUUCCUUCAAGGUAAUAUAGUGCGGUGGCUUCUGGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[116.42635345 126.37186432]
[107.57857513 131.02534485]
[97.44664001 132.70628357]
[87.02945709 131.07585144]
[77.40847015 126.13036346]
[65.90516663 135.75709534]
[54.40185547 145.38381958]
[42.89854431 155.01054382]
[31.39523506 164.63726807]
[19.89192581 174.26400757]
[8.38861656 183.89073181]
[-3.00019646 193.65263367]
[-14.27292538 203.54837036]
[-11.87742138 218.78862000]
[-18.12259674 232.89540100]
[-31.01563835 241.36729431]
[-46.44242096 241.50096130]
[-59.48031998 233.25373840]
[-65.96898651 219.25727844]
[-63.83790588 203.97781372]
[-53.76710510 192.29095459]
[-38.97013855 187.92594910]
[-24.16866112 192.27565002]
[-12.89593220 182.37991333]
[-9.91615868 175.53784180]
[-1.23810995 172.38742065]
[10.26519966 162.76069641]
[21.76850891 153.13395691]
[33.27182007 143.50723267]
[44.77512741 133.88050842]
[56.27843857 124.25378418]
[67.78174591 114.62705994]
[64.61687469 99.96473694]
[50.16690063 95.94004059]
[35.71692276 91.91534424]
[21.26694870 87.89064789]
[6.81697130 83.86595154]
[-10.06367970 85.44073486]
[-16.24995041 69.65573120]
[-2.79435968 59.34149933]
[10.84166718 69.41597748]
[25.29164505 73.44067383]
[39.74161911 77.46537018]
[54.19159698 81.49006653]
[68.64157104 85.51476288]
[94.22408295 69.47232056]
[119.09319305 80.07510376]
[132.02412415 72.47305298]
[144.95504761 64.87100220]
[157.88597107 57.26895905]
[170.81689453 49.66690826]
[172.43724060 34.34761810]
[182.64802551 23.05189896]
[197.37800598 19.97103882]
[210.93534851 26.08140755]
[223.86627197 18.47936058]
[231.84158325 4.81535721]
[246.73457336 5.03516531]
[259.66549683 -2.56688285]
[272.59643555 -10.16893101]
[285.52734375 -17.77097893]
[287.67977905 -28.55532646]
[295.29510498 -36.17994308]
[305.64395142 -38.25828171]
[315.20397949 -34.33244324]
[328.47946167 -41.31535339]
[341.75497437 -48.29826355]
[355.03048706 -55.28117752]
[357.54003906 -68.57238770]
[367.12820435 -77.83411407]
[380.11251831 -79.82274628]
[391.68402100 -74.02984619]
[405.12075806 -80.69725800]
[418.55746460 -87.36466980]
[427.48022461 -100.42970276]
[442.32028198 -99.15596771]
[455.75698853 -105.82337952]
[469.19372559 -112.49079132]
[482.21353149 -119.93959045]
[494.77102661 -128.14381409]
[507.32852173 -136.34803772]
[519.88604736 -144.55226135]
[532.44354248 -152.75648499]
[545.00103760 -160.96070862]
[557.55853271 -169.16493225]
[564.47644043 -184.03349304]
[580.83355713 -185.20692444]
[589.80303955 -171.47810364]
[582.15789795 -156.97006226]
[565.76275635 -156.60742188]
[553.20526123 -148.40321350]
[540.64776611 -140.19898987]
[528.09027100 -131.99476624]
[515.53277588 -123.79054260]
[502.97525024 -115.58631897]
[490.41775513 -107.38209534]
[504.12463379 -101.28934479]
[508.14071655 -86.83696747]
[499.54235840 -74.54597473]
[484.58901978 -73.36392212]
[474.16635132 -84.15132141]
[475.86114502 -99.05406189]
[462.42440796 -92.38665009]
[448.98770142 -85.71923828]
[441.02600098 -73.13111115]
[425.22488403 -73.92794800]
[411.78814697 -67.26053619]
[398.35144043 -60.59312439]
[393.70993042 -44.47338867]
[378.56976318 -36.50047684]
[362.01339722 -42.00567627]
[348.73788452 -35.02276230]
[335.46237183 -28.03985214]
[322.18688965 -21.05694008]
[313.20693970 -3.99572849]
[293.12939453 -4.84005308]
[280.19845581 2.76199532]
[267.26754761 10.36404324]
[254.33662415 17.96609116]
[247.28620911 31.08634567]
[231.46832275 31.41028595]
[218.53739929 39.01233292]
[217.28363037 53.83009720]
[207.42840576 65.20280457]
[192.59278870 68.63177490]
[178.41894531 62.59783554]
[165.48802185 70.19988251]
[152.55709839 77.80193329]
[139.62617493 85.40398407]
[126.69524384 93.00602722]
[128.41110229 101.74253845]
[127.25390625 110.84596252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 24]
[13 23]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[47 130]
[48 129]
[49 128]
[50 127]
[51 126]
[55 122]
[56 121]
[58 119]
[59 118]
[60 117]
[61 116]
[65 114]
[66 113]
[67 112]
[68 111]
[72 108]
[73 107]
[74 106]
[76 104]
[77 103]
[78 102]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
