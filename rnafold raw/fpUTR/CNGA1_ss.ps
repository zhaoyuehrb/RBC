%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCAGCAUGUUUAUUAUUUUUAAAAAAUUAGGGCCUGGAUUUUGACAAUGUCAAGAUUUACCGUAUAUCCCUGUUUGUUUGGAUACACCAGUGACGUCCACUUCUAGAAGACAAAGUUAUAUUACUUAAACAACCAAAG\
) } def
/len { sequence length } bind def

/coor [
[71.60272217 316.75997925]
[56.79240417 313.60827637]
[43.80919266 305.81628418]
[34.06140900 294.22924805]
[28.60641861 280.10403442]
[28.03593826 264.97283936]
[32.41184998 250.47697449]
[41.25948715 238.18884277]
[53.61912155 229.44139099]
[68.15007782 225.18344116]
[68.81357574 210.19812012]
[69.47707367 195.21281433]
[70.14057922 180.22749329]
[70.80407715 165.24217224]
[71.46757507 150.25685120]
[63.70095825 163.08959961]
[60.34450150 177.70925903]
[51.84022903 190.06552124]
[39.38338089 198.42178345]
[24.72472954 201.60359192]
[9.92448616 199.16374207]
[-2.93722630 191.44517517]
[-12.05274200 179.53268433]
[-16.14091110 165.10054016]
[-14.62715244 150.17710876]
[-7.72422314 136.85984802]
[3.59769726 127.02043152]
[17.74735451 122.04176331]
[32.73606873 122.62356567]
[46.45708847 128.68397522]
[61.38607407 130.14184570]
[48.98359680 121.70510864]
[33.22134018 120.34066010]
[27.04986382 106.78476715]
[14.64738750 98.34803009]
[7.96586514 97.46455383]
[3.45757031 93.84271240]
[1.89423907 89.25366211]
[-10.12291336 80.27657318]
[-22.14006615 71.29949188]
[-34.15721893 62.32240677]
[-46.17436981 53.34532166]
[-58.19152069 44.36823654]
[-70.20867157 35.39115143]
[-82.22583008 26.41406822]
[-94.24298096 17.43698311]
[-106.26013184 8.45989895]
[-118.27728271 -0.51718587]
[-134.58526611 -5.15248251]
[-134.64561462 -22.10632324]
[-118.37104797 -26.85760689]
[-109.30020142 -12.53433800]
[-97.28305054 -3.55725360]
[-85.26589203 5.41983128]
[-73.24874115 14.39691639]
[-61.23159027 23.37400055]
[-49.21443939 32.35108566]
[-37.19728470 41.32817078]
[-25.18013382 50.30525589]
[-13.16298103 59.28234100]
[-1.14582849 68.25942230]
[10.87132359 77.23651123]
[23.08412743 85.94554901]
[35.48660278 94.38229370]
[50.36175537 95.14328766]
[57.42033768 109.30263519]
[69.82281494 117.73937225]
[66.30970764 104.12834167]
[68.47057343 90.67458344]
[75.60514069 79.57434082]
[86.23040771 72.50051880]
[98.37596130 70.35289001]
[109.94511414 73.15401459]
[119.07622528 80.10044098]
[132.01094055 72.50484467]
[144.94566345 64.90924835]
[157.88037109 57.31365585]
[170.81509399 49.71805954]
[176.68853760 42.61688995]
[184.12104797 42.10114670]
[197.22062683 34.79355240]
[210.32020569 27.48596001]
[223.41979980 20.17836761]
[236.51937866 12.87077427]
[249.61895752 5.56318188]
[235.71031189 -0.05370687]
[229.65957642 -13.77918148]
[234.89541626 -27.83571243]
[248.45092773 -34.25818253]
[262.64489746 -29.40730095]
[269.43432617 -16.03181839]
[264.97244263 -1.71146286]
[278.92395020 -7.22098684]
[292.87548828 -12.73051071]
[306.82702637 -18.24003410]
[314.50491333 -32.32653046]
[330.32962036 -34.96446991]
[342.16174316 -24.13025093]
[340.92471313 -8.13496017]
[327.56747437 0.75118464]
[312.33654785 -4.28850651]
[298.38500977 1.22101760]
[284.43347168 6.73054171]
[270.48196411 12.24006557]
[256.92654419 18.66276550]
[243.82696533 25.97035789]
[230.72738647 33.27795029]
[217.62780762 40.58554459]
[204.52822876 47.89313507]
[191.42863464 55.20072937]
[178.41069031 62.65277863]
[165.47596741 70.24837494]
[152.54125977 77.84396362]
[139.60653687 85.43955994]
[126.67181396 93.03515625]
[127.25373077 115.36299896]
[109.96826935 133.55564880]
[121.36357880 143.30998230]
[132.75888062 153.06431580]
[148.49444580 151.59202576]
[160.60874939 161.74186707]
[161.91458130 177.49211121]
[151.63723755 189.49842834]
[135.87405396 190.63766479]
[123.97707367 180.23396301]
[123.00455475 164.45960999]
[111.60924530 154.70529175]
[100.21393585 144.95095825]
[86.45289612 150.92034912]
[85.78939819 165.90567017]
[85.12589264 180.89099121]
[84.46239471 195.87631226]
[83.79889679 210.86161804]
[83.13539886 225.84693909]
[97.23316956 231.37246704]
[108.77133942 241.17805481]
[116.49832916 254.20004272]
[119.57597351 269.02593994]
[117.67042542 284.04748535]
[110.98839569 297.63534546]
[100.25469208 308.31552124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 134]
[11 133]
[12 132]
[13 131]
[14 130]
[15 129]
[31 67]
[32 66]
[34 64]
[35 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[74 115]
[75 114]
[76 113]
[77 112]
[78 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[92 104]
[93 103]
[94 102]
[95 101]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
