%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAGGGUCUUGCCUCCGCGCGCCCCGCCCUCGUCCUCUUGUGUAGCCUGAGGCGGCGGUAGC\
) } def
/len { sequence length } bind def

/coor [
[118.09319305 160.74224854]
[103.24592590 162.87738037]
[89.20851898 157.59049988]
[79.45861053 146.19140625]
[76.41167450 131.50411987]
[80.82255554 117.16731262]
[91.59989929 106.73200226]
[76.66782379 105.30615997]
[61.73574448 103.88032532]
[47.26258469 110.27079773]
[35.32841873 101.35872650]
[20.85525703 107.74920654]
[8.92109299 98.83713531]
[-6.01098633 97.41129303]
[-20.94306564 95.98545074]
[-35.62735748 103.28638458]
[-49.14084244 93.99564362]
[-47.58200455 77.67075348]
[-32.55444336 71.10536194]
[-19.51722336 81.05337524]
[-4.58514547 82.47921753]
[10.34693336 83.90505219]
[23.75205231 77.41259766]
[36.75426102 86.42665100]
[50.15937805 79.93418884]
[63.16158676 88.94824219]
[78.09366608 90.37408447]
[93.02574158 91.79992676]
[107.87306213 89.66519928]
[121.79858398 84.09026337]
[135.72410583 78.51532745]
[145.66007996 66.20326233]
[160.35133362 68.65607452]
[174.27685547 63.08113480]
[188.20236206 57.50619888]
[195.30603027 51.19499969]
[202.92553711 52.01474380]
[217.10054016 47.10872269]
[231.27555847 42.20270538]
[245.45057678 37.29668427]
[252.40812683 23.36003494]
[266.85348511 18.58656120]
[280.09707642 25.30541229]
[294.27209473 20.39939308]
[307.26251221 9.50512409]
[321.32714844 18.97204781]
[316.12365723 35.10772705]
[299.17810059 34.57440567]
[285.00308228 39.48042297]
[278.74624634 52.94844055]
[264.44067383 58.12577057]
[250.35658264 51.47169876]
[236.18157959 56.37771606]
[222.00656128 61.28373718]
[207.83155823 66.18975830]
[193.77731323 71.43171692]
[179.85179138 77.00665283]
[165.92626953 82.58158875]
[156.98634338 94.49490356]
[141.29904175 92.44084930]
[127.37351990 98.01578522]
[113.44799805 103.59072113]
[126.72756195 110.56591797]
[134.99958801 123.07884979]
[136.21475220 138.02955627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[9 26]
[11 24]
[13 22]
[14 21]
[15 20]
[29 62]
[30 61]
[31 60]
[33 58]
[34 57]
[35 56]
[37 55]
[38 54]
[39 53]
[40 52]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
