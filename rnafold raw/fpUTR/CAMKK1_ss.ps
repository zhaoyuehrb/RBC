%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCCCCAGCGAGGCGGUGGGGCGGGGCGGGGCGGGGCGGGGCGCGCAGCAGGAGCGAGUGGGGCCGCCCGCCGGGCCGCGGACACUGUCGCCCGGCGCCCAGGUUCCCAACAAGGCUACGCAGAAGAACCCCCUUGACUGAAGCA\
) } def
/len { sequence length } bind def

/coor [
[121.50311279 140.40754700]
[106.51060486 140.88154602]
[98.60395050 128.13458252]
[105.68934631 114.91414642]
[98.19309998 115.15130615]
[89.32522583 127.24927521]
[80.45735168 139.34724426]
[71.58947754 151.44520569]
[62.72160339 163.54318237]
[53.85372925 175.64114380]
[51.93555832 191.34564209]
[38.17092896 197.03636169]
[29.30305481 209.13432312]
[24.81565475 225.48362732]
[7.86305666 225.69752502]
[2.96456456 209.46665955]
[17.20508766 200.26644897]
[26.07295990 188.16848755]
[27.35684204 173.32931519]
[41.75576019 166.77326965]
[50.62363434 154.67530823]
[59.49150848 142.57733154]
[68.35938263 130.47937012]
[77.22725677 118.38140106]
[86.09513092 106.28343201]
[88.76903534 91.52368164]
[84.70884705 77.08364105]
[80.64865875 62.64359665]
[76.58846283 48.20355225]
[72.52827454 33.76350784]
[59.05668259 21.25575256]
[63.96821594 4.43817282]
[59.60449219 -9.91306019]
[55.24076462 -24.26429367]
[50.87703705 -38.61552429]
[38.68803787 -40.44109344]
[28.64494705 -51.02682877]
[17.44151878 -61.00095367]
[6.23808956 -70.97508240]
[-4.96533966 -80.94920349]
[-16.16876793 -90.92333221]
[-27.37219810 -100.89745331]
[-40.31451797 -100.93975067]
[-49.44676208 -109.53451538]
[-50.22076416 -121.64874268]
[-65.59783936 -125.37112427]
[-69.65769196 -139.70175171]
[-80.64835358 -149.90986633]
[-91.63900757 -160.11796570]
[-109.65495300 -163.77218628]
[-114.22760010 -180.68505859]
[-125.43103027 -190.65917969]
[-141.59150696 -193.44682312]
[-147.00289917 -208.92741394]
[-136.09841919 -221.17587280]
[-120.09567261 -217.59201050]
[-115.45690918 -201.86260986]
[-104.25347900 -191.88848877]
[-92.12040710 -192.26564026]
[-82.69912720 -183.98872375]
[-81.43089294 -171.10862732]
[-70.44023895 -160.90051270]
[-59.44958496 -150.69239807]
[-44.85863495 -147.70018005]
[-40.01265335 -132.63940430]
[-22.74265480 -129.68960571]
[-17.39807320 -112.10088348]
[-6.19464302 -102.12676239]
[5.00878572 -92.15263367]
[16.21221542 -82.17851257]
[27.41564369 -72.20438385]
[38.61907196 -62.23025894]
[53.37882233 -64.90416718]
[60.37120438 -78.17468262]
[67.36358643 -91.44519806]
[74.35596466 -104.71572113]
[81.34834290 -117.98623657]
[88.34072113 -131.25674438]
[95.33309937 -144.52726746]
[94.92097473 -160.34310913]
[107.69910431 -167.99612427]
[114.69148254 -181.26664734]
[121.68386078 -194.53715515]
[128.67623901 -207.80767822]
[130.71058655 -224.63912964]
[147.44741821 -227.34370422]
[154.67950439 -212.00964355]
[141.94676208 -200.81529236]
[134.95437622 -187.54478455]
[127.96199799 -174.27426147]
[120.96961975 -161.00375366]
[121.88188934 -146.13710022]
[108.60362244 -137.53488159]
[101.61123657 -124.26437378]
[94.61885834 -110.99385071]
[87.62648010 -97.72333527]
[80.63410187 -84.45281982]
[73.64172363 -71.18230438]
[66.64933777 -57.91178513]
[65.22827148 -42.97925186]
[69.59199524 -28.62801933]
[73.95572662 -14.27678680]
[78.31945038 0.07444594]
[88.87116241 6.07570028]
[92.59838104 18.04965973]
[86.96831512 29.70331764]
[91.02851105 44.14336014]
[95.08869934 58.58340454]
[99.14888763 73.02344513]
[103.20908356 87.46349335]
[103.38198090 72.46448517]
[111.63264465 59.93745422]
[125.34429169 53.85546494]
[140.16815186 56.14747238]
[151.40267944 66.08655548]
[155.48474121 80.52043152]
[151.11967468 94.87125397]
[139.69131470 104.58779144]
[149.30618286 116.10101318]
[158.92105103 127.61423492]
[169.87748718 127.96955872]
[178.62771606 134.20002747]
[182.38989258 144.02571106]
[180.13462830 154.07670593]
[189.25559998 165.98501587]
[198.37655640 177.89334106]
[207.74655151 189.60671997]
[217.36141968 201.11993408]
[226.97628784 212.63316345]
[242.73762512 213.79766846]
[252.99571228 225.82043457]
[251.66462708 241.56857300]
[239.53408813 251.69898987]
[223.80090332 250.20147705]
[213.79930115 237.96449280]
[215.46307373 222.24803162]
[205.84820557 210.73480225]
[196.23333740 199.22158813]
[191.57714844 197.90914917]
[187.72273254 193.61737061]
[186.46824646 187.01429749]
[177.34727478 175.10598755]
[168.22631836 163.19766235]
[149.88891602 157.18933105]
[147.40783691 137.22911072]
[137.79296875 125.71588135]
[128.17810059 114.20265961]
[120.68184662 114.43981934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[12 18]
[13 17]
[26 110]
[27 109]
[28 108]
[29 107]
[30 106]
[32 103]
[33 102]
[34 101]
[35 100]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[45 65]
[47 63]
[48 62]
[49 61]
[51 58]
[52 57]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[81 91]
[82 90]
[83 89]
[84 88]
[118 147]
[119 146]
[120 145]
[124 143]
[125 142]
[126 141]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
