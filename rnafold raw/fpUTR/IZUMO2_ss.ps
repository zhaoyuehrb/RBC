%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUGCUCCCUGGGCCUCCUGACCGCGCCCUCGCCUGGGAGGCGGGGCGGGCCGGGUUCUCUCUGUGACGUCACAAAGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[150.98937988 234.97795105]
[144.75814819 221.33346558]
[138.52693176 207.68898010]
[132.29570007 194.04450989]
[126.06447601 180.40002441]
[119.83325195 166.75553894]
[114.06012726 161.86926270]
[113.63284302 152.51104736]
[107.89259338 138.65284729]
[95.87374115 129.85531616]
[97.74098206 114.14469147]
[86.76640320 105.48153687]
[88.40082550 91.59556580]
[82.66057587 77.73736572]
[76.92032623 63.87917709]
[60.51768112 60.22390366]
[49.57047272 47.69168091]
[48.18072891 31.27489281]
[56.69353104 17.36182976]
[50.46230698 3.71734905]
[44.23108292 -9.92713070]
[37.99985504 -23.57161140]
[25.22896194 -32.91049957]
[26.97995758 -47.70182419]
[20.74873161 -61.34630203]
[14.19065857 -68.03588867]
[14.54832649 -75.59080505]
[8.80807590 -89.44899750]
[3.06782389 -103.30718994]
[-2.67242742 -117.16538239]
[-8.41267872 -131.02357483]
[-14.72780704 -137.94297791]
[-14.10071373 -145.48030090]
[-19.34267616 -159.53456116]
[-24.58463860 -173.58880615]
[-29.82660103 -187.64305115]
[-35.06856537 -201.69729614]
[-46.26889038 -214.42478943]
[-37.13935089 -228.71070862]
[-20.88441277 -223.89270020]
[-21.01431847 -206.93925476]
[-15.77235603 -192.88500977]
[-10.53039360 -178.83076477]
[-5.28843069 -164.77651978]
[-0.04646802 -150.72227478]
[5.44551420 -136.76382446]
[11.18576527 -122.90563202]
[16.92601776 -109.04743958]
[22.66626930 -95.18924713]
[28.40652084 -81.33105469]
[34.39321136 -67.57752991]
[40.62443542 -53.93304825]
[52.94963455 -45.57010651]
[51.64433670 -29.80283546]
[57.87556076 -16.15835571]
[64.10678864 -2.51387596]
[70.33801270 11.13060379]
[83.73392487 12.59581757]
[94.71035767 20.59987831]
[100.28946686 33.10562897]
[98.89109039 46.83740997]
[90.77851868 58.13892365]
[96.51876831 71.99711609]
[102.25901794 85.85530853]
[113.23359680 94.51846313]
[111.59917450 108.40443420]
[124.02860260 118.19319916]
[121.75078583 132.91259766]
[127.49103546 146.77079773]
[133.47773743 160.52432251]
[139.70895386 174.16880798]
[145.94018555 187.81327820]
[152.17140198 201.45776367]
[158.40263367 215.10223389]
[164.63385010 228.74671936]
[175.29360962 232.06011963]
[182.12814331 240.60304260]
[182.98518372 251.28666687]
[177.81867981 260.42245483]
[183.06063843 274.47671509]
[188.30259705 288.53094482]
[199.50292969 301.25845337]
[190.37339783 315.54437256]
[174.11845398 310.72637939]
[174.24835205 293.77291870]
[169.00639343 279.71865845]
[163.76443481 265.66442871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[8 69]
[9 68]
[11 66]
[13 64]
[14 63]
[15 62]
[19 57]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
