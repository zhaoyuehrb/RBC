%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGGAAGAGGCGGAGUCGAGGUGAGGGAGUGAAAUGCUUAAUUCAGGAAUGGAUUUUGGAGUUUCUGGGUGCUGAAGAAAUAGGGCCUUUCCGCCUGCGGGCCCAGUGAGUCGACACGGUGGGGGCCCGCGAUCCCCGGGACUUACCACUGAAUAAAUCCAGUCCAGCGUGCGACGACUUACUGGCUUC\
) } def
/len { sequence length } bind def

/coor [
[88.42571259 124.96860504]
[82.80860138 117.31042480]
[80.76251984 109.07938385]
[66.75735474 114.45110321]
[52.75218964 119.82282257]
[38.74702835 125.19454193]
[24.74186325 130.56626892]
[10.73669815 135.93798828]
[-3.26846600 141.30970764]
[-5.84218597 154.85974121]
[-14.70781040 165.28340149]
[-27.46558189 169.92442322]
[-40.74293518 167.66984558]
[-51.08593369 159.21476746]
[-65.17668152 164.35781860]
[-79.26742554 169.50086975]
[-93.35816956 174.64390564]
[-107.44891357 179.78695679]
[-121.53965759 184.93000793]
[-135.63040161 190.07304382]
[-145.94116211 202.07299805]
[-160.54981995 199.16850281]
[-167.86589050 216.63110352]
[-185.31813049 223.10476685]
[-201.68173218 214.92262268]
[-215.59761047 220.52160645]
[-229.51347351 226.12057495]
[-243.42935181 231.71954346]
[-254.43840027 246.47163391]
[-271.70028687 243.34628296]
[-285.52319336 249.17102051]
[-299.34606934 254.99574280]
[-313.16897583 260.82049561]
[-320.52520752 275.07760620]
[-336.28594971 278.07400513]
[-348.36093140 267.51110840]
[-347.48721313 251.49186707]
[-334.33508301 242.30487061]
[-318.99371338 246.99758911]
[-305.17080688 241.17285156]
[-291.34793091 235.34811401]
[-277.52502441 229.52337646]
[-272.66903687 218.43392944]
[-261.18811035 213.47257996]
[-249.02832031 217.80366516]
[-235.11245728 212.20469666]
[-221.19657898 206.60572815]
[-207.28070068 201.00675964]
[-205.18322754 189.77416992]
[-197.84265137 180.86114502]
[-186.99745178 176.56082153]
[-175.30551147 178.05180359]
[-165.69287109 185.07775879]
[-156.38998413 173.44567871]
[-140.77345276 175.98229980]
[-126.68270111 170.83926392]
[-112.59195709 165.69621277]
[-98.50121307 160.55316162]
[-84.41046906 155.41012573]
[-70.31972504 150.26707458]
[-56.22898102 145.12402344]
[-52.23118973 129.20965576]
[-39.41041946 118.70459747]
[-22.68883514 117.89779663]
[-8.64018631 127.30454254]
[5.36497831 121.93281555]
[19.37014198 116.56109619]
[33.37530518 111.18937683]
[47.38047028 105.81765747]
[61.38563538 100.44593811]
[75.39080048 95.07421875]
[80.41899109 80.94208527]
[72.95426178 67.93140411]
[59.37545776 59.81188583]
[59.75291824 44.92206573]
[52.28818512 31.91138458]
[44.82345581 18.90070343]
[29.50523186 15.01128769]
[21.49575615 1.38690388]
[25.54690742 -13.88934326]
[39.25521088 -21.75432587]
[54.48777390 -17.54189110]
[62.20738220 -3.75120091]
[57.83413696 11.43597317]
[65.29886627 24.44665337]
[72.76359558 37.45733261]
[85.80847931 44.64624023]
[85.96494293 60.46667480]
[93.42967224 73.47735596]
[100.78704834 72.02165985]
[97.87566376 57.30691147]
[94.96452332 42.59211349]
[109.67936707 39.68121719]
[112.59040833 54.39552689]
[115.50180054 69.11027527]
[122.85916901 67.65457916]
[124.80697632 52.78158569]
[126.75478363 37.90858841]
[119.97249603 22.97765923]
[129.73069763 9.79777336]
[145.99099731 11.92726326]
[152.02618408 27.17549324]
[141.62777710 39.85639191]
[139.67997742 54.72938919]
[137.73216248 69.60238647]
[147.20672607 81.23135376]
[162.16650391 82.32911682]
[177.12628174 83.42687988]
[192.08604431 84.52463531]
[207.04582214 85.62239838]
[222.00559998 86.72016144]
[236.96537781 87.81792450]
[251.92515564 88.91567993]
[266.88494873 90.01344299]
[281.84472656 91.11120605]
[296.80447388 92.20896912]
[314.52252197 82.61553192]
[330.04403687 94.13208008]
[345.03161621 94.74232483]
[360.01919556 95.35256958]
[375.00677490 95.96281433]
[389.11032104 88.79335022]
[401.51226807 97.04203033]
[416.49984741 97.65227509]
[431.48742676 98.26251984]
[450.62658691 59.01212692]
[465.08880615 55.03166199]
[479.55102539 51.05119705]
[493.98037720 46.95315933]
[508.37588501 42.73782349]
[522.77142334 38.52248383]
[537.16693115 34.30714417]
[544.53674316 28.88429260]
[551.83117676 30.14240265]
[562.95672607 18.09442902]
[578.89160156 21.96891594]
[583.24334717 37.78012466]
[571.53527832 49.26283646]
[555.81164551 44.60462570]
[541.38226318 48.70266342]
[526.98675537 52.91799927]
[512.59124756 57.13333893]
[498.19570923 61.34867859]
[492.65151978 66.25303650]
[483.53149414 65.51342010]
[469.06927490 69.49388123]
[454.60705566 73.47434998]
[453.93649292 80.94431305]
[466.20431519 89.57569122]
[452.59536743 95.88423920]
[451.92480469 103.35420227]
[465.44689941 109.84674072]
[478.96899414 116.33927917]
[492.49108887 122.83181763]
[506.08233643 115.34464264]
[521.47448730 117.30953217]
[532.74902344 127.97093201]
[535.57055664 143.22932434]
[528.85418701 157.21754456]
[515.18249512 164.55683899]
[499.81259155 162.42509460]
[488.65441895 151.64201355]
[485.99856567 136.35391235]
[472.47647095 129.86137390]
[458.95437622 123.36883545]
[445.43228149 116.87629700]
[430.87719727 113.25009918]
[415.88961792 112.63985443]
[400.90203857 112.02960968]
[387.87051392 119.24272156]
[374.39654541 110.95039368]
[359.40896606 110.34014893]
[344.42138672 109.72990417]
[329.43380737 109.11965942]
[322.55947876 116.70487976]
[312.43023682 119.30072021]
[302.33953857 115.81342316]
[295.70672607 107.16874695]
[280.74694824 106.07098389]
[265.78717041 104.97322083]
[250.82739258 103.87545776]
[235.86761475 102.77770233]
[220.90783691 101.67993927]
[205.94807434 100.58217621]
[190.98829651 99.48441315]
[176.02851868 98.38665009]
[161.06874084 97.28889465]
[146.10896301 96.19113159]
[141.63061523 111.31846619]
[132.72355652 123.03428650]
[121.12213898 130.24862671]
[108.73665619 132.61949158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[22 53]
[25 48]
[26 47]
[27 46]
[28 45]
[30 42]
[31 41]
[32 40]
[33 39]
[72 89]
[73 88]
[75 86]
[76 85]
[77 84]
[96 105]
[97 104]
[98 103]
[106 188]
[107 187]
[108 186]
[109 185]
[110 184]
[111 183]
[112 182]
[113 181]
[114 180]
[115 179]
[116 178]
[118 174]
[119 173]
[120 172]
[121 171]
[123 169]
[124 168]
[125 167]
[126 147]
[127 146]
[128 145]
[129 143]
[130 142]
[131 141]
[132 140]
[134 139]
[151 166]
[152 165]
[153 164]
[154 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
