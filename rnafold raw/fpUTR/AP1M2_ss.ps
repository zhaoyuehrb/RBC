%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUUCCGCAGGAAGAAGGAAGCGGCGCCGCCAUCGCCUCCCGGCGCUCCCUCCCCGACUCCUAAGUCCUUCGGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[104.54862976 303.36236572]
[102.88883972 288.45446777]
[101.22904968 273.54656982]
[99.56925964 258.63870239]
[90.82522583 252.80349731]
[86.77494049 242.86204529]
[89.04349518 232.14195251]
[97.09420013 224.38430786]
[96.53993225 209.39456177]
[95.98565674 194.40480042]
[87.78334808 181.97212219]
[95.00543213 167.89547729]
[94.45115662 152.90571594]
[93.89688110 137.91595459]
[93.34261322 122.92620087]
[81.17803955 114.68555450]
[76.14305878 100.88214874]
[80.14487457 86.74459839]
[91.66763306 77.62806702]
[91.11335754 62.63831329]
[90.55908966 47.64855576]
[90.00481415 32.65880203]
[78.70631409 21.93585014]
[78.35774231 6.72620964]
[88.65006256 -3.97910023]
[88.09579468 -18.96885681]
[87.54151917 -33.95861053]
[84.02774048 -42.65794373]
[87.25408936 -49.51032257]
[73.04566956 -54.73966980]
[61.50532532 -64.49633026]
[54.01344681 -77.58800507]
[51.45750046 -92.42502594]
[54.12695312 -107.21338654]
[61.68062592 -120.17164612]
[73.19016266 -129.74555969]
[87.25408936 -134.79443359]
[87.25408936 -149.79443359]
[87.25408936 -164.79443359]
[87.25408936 -179.79443359]
[78.59039307 -193.71823120]
[86.55451965 -208.05366516]
[102.95366669 -208.05366516]
[110.91779327 -193.71823120]
[102.25408936 -179.79443359]
[102.25408936 -164.79443359]
[102.25408936 -149.79443359]
[102.25408936 -134.79443359]
[116.31802368 -129.74555969]
[127.82756042 -120.17164612]
[135.38122559 -107.21338654]
[138.05068970 -92.42502594]
[135.49473572 -77.58800507]
[128.00285339 -64.49633026]
[116.46251678 -54.73966980]
[102.25408936 -49.51032257]
[102.53127289 -34.51288605]
[103.08554840 -19.52312851]
[103.63982391 -4.53337240]
[114.69465637 5.38258839]
[115.47029877 20.57643700]
[104.99456787 32.10452652]
[105.54884338 47.09428406]
[106.10311890 62.08404160]
[106.65738678 77.07379913]
[118.82196045 85.31444550]
[123.85694122 99.11785126]
[119.85512543 113.25540161]
[108.33236694 122.37193298]
[108.88664246 137.36169434]
[109.44091034 152.35144043]
[109.99518585 167.34120178]
[118.23713684 180.84603882]
[110.97541046 193.85052490]
[111.52968597 208.84028625]
[112.08396149 223.83003235]
[123.66420746 240.13021851]
[114.47714996 256.97891235]
[116.13694000 271.88677979]
[117.79673004 286.79467773]
[119.45652008 301.70257568]
[129.60772705 314.58221436]
[123.27875519 329.71084595]
[106.98031616 331.52545166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[8 76]
[9 75]
[10 74]
[12 72]
[13 71]
[14 70]
[15 69]
[19 65]
[20 64]
[21 63]
[22 62]
[25 59]
[26 58]
[27 57]
[29 56]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
