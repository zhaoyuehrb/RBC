%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGUCCGCAUUCCCCGCACCCACCCACGUCUUCCCGGGAGUCGUAUCCCGAGCAUGGAGGUUACUGAGACCGUUAUUUCUUCAUGGCCUGCCUAGCUUAAGCAGUAGCUGGAAAAG\
) } def
/len { sequence length } bind def

/coor [
[100.25508881 216.20881653]
[87.16963959 208.16725159]
[79.87220764 194.65270996]
[80.32575989 179.30052185]
[88.40828705 166.24034119]
[101.94564819 158.98530579]
[102.34159851 143.99052429]
[102.73754883 128.99575806]
[88.82321167 123.39297485]
[78.71777344 134.47810364]
[80.97785950 149.95150757]
[72.71913147 163.23034668]
[57.84111404 168.04475403]
[43.36874771 162.12152100]
[36.13544464 148.25741577]
[39.55654907 132.99865723]
[52.01671600 123.54994202]
[67.63264465 124.37267303]
[77.73807526 113.28754425]
[63.55522919 118.17086029]
[49.37237930 123.05417633]
[35.18952942 127.93749237]
[23.46051598 137.28790283]
[9.00339222 141.28684998]
[-5.86351156 139.29307556]
[-18.75615501 131.62628174]
[-27.60709000 119.51591492]
[-30.99698639 104.90397644]
[-28.38224792 90.13363647]
[-20.18216896 77.57343292]
[-7.71170616 69.23751068]
[7.02939081 66.46261597]
[21.67725563 69.69371796]
[33.88173676 78.41136169]
[48.30253983 82.53936768]
[62.72334290 86.66737366]
[77.14414978 90.79537964]
[66.46777344 80.25901794]
[55.79140091 69.72264862]
[45.11502838 59.18627930]
[34.43865204 48.64990997]
[18.63834953 49.00483322]
[7.27277613 38.02306366]
[7.08492470 22.21989059]
[18.18624496 10.97105789]
[33.99052048 10.95029736]
[45.12135315 22.16992569]
[44.97502136 37.97353745]
[55.65139389 48.50990677]
[66.32776642 59.04627228]
[77.00414276 69.58264160]
[87.68051910 80.11901093]
[102.66875458 80.71285248]
[114.14527130 71.05419922]
[125.62178040 61.39553833]
[127.12462616 45.89137268]
[138.90103149 36.25960922]
[153.67262268 37.78788757]
[165.14913940 28.12923241]
[176.49716187 18.31993294]
[187.71472168 8.36169720]
[198.93228149 -1.59653819]
[210.14982605 -11.55477333]
[221.36738586 -21.51300812]
[232.58494568 -31.47124290]
[233.67800903 -47.00967789]
[245.19606018 -56.94894791]
[260.00283813 -55.81112289]
[271.22039795 -65.76935577]
[282.43795776 -75.72759247]
[293.65551758 -85.68582916]
[292.00823975 -101.11521912]
[299.77392578 -114.54927826]
[313.96646118 -120.82233429]
[329.12857056 -117.52227020]
[339.43008423 -105.91802979]
[340.90985107 -90.47167206]
[332.99893188 -77.12265015]
[318.73916626 -71.00392151]
[303.61373901 -74.46826935]
[292.39617920 -64.51003265]
[281.17864990 -54.55179977]
[269.96109009 -44.59356689]
[269.33596802 -29.75628662]
[258.10165405 -19.49742317]
[242.54318237 -20.25368881]
[231.32562256 -10.29545307]
[220.10806274 -0.33721775]
[208.89051819 9.62101746]
[197.67295837 19.57925224]
[186.45539856 29.53748703]
[183.50523376 36.41747665]
[174.80780029 39.60574722]
[163.33128357 49.26440048]
[162.31474304 64.08000946]
[150.81352234 74.03874969]
[135.28044128 72.87205505]
[123.80392456 82.53070831]
[112.32741547 92.18936157]
[124.36196899 93.43914032]
[135.83963013 101.38504791]
[143.83578491 115.52207184]
[153.03251648 127.37197113]
[162.22924805 139.22186279]
[177.61042786 144.90972900]
[180.10809326 161.11755371]
[167.15287781 171.17211914]
[152.07199097 164.73016357]
[150.37934875 148.41859436]
[141.18261719 136.56871033]
[131.98588562 124.71880341]
[117.73232269 129.39170837]
[117.33637238 144.38647461]
[116.94042206 159.38125610]
[130.07601929 167.34062195]
[137.45803833 180.80915833]
[137.10073853 196.16389465]
[129.10023499 209.27447510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 114]
[7 113]
[8 112]
[9 19]
[10 18]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[53 99]
[54 98]
[55 97]
[58 94]
[59 93]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[68 83]
[69 82]
[70 81]
[71 80]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
