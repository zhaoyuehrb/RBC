%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGCUAUGGAGAGGCGGCCCCCGAGCCAGGCCCUCCGCCACCGCCCCCGGGCCAUGGCCCCCCGCCGCCACCCUUCCUCGCGCGGCCCGGCCCGCGGGGCUCCCGGCCGCCGCAGCUG\
) } def
/len { sequence length } bind def

/coor [
[105.43026733 216.43429565]
[89.67311859 215.21458435]
[79.45719147 203.15596008]
[80.84342194 187.41258240]
[93.00937653 177.32472229]
[94.16700745 162.36946106]
[95.32463837 147.41419983]
[96.48227692 132.45893860]
[79.31869507 122.33310699]
[72.25279236 105.18450165]
[76.62279510 88.58199310]
[65.61451721 78.39289093]
[54.60623550 68.20378876]
[43.59795761 58.01469040]
[23.81504822 54.57575226]
[18.63581085 36.01877975]
[7.11760473 26.40988159]
[-4.40060234 16.80098343]
[-15.91880894 7.19208622]
[-27.43701553 -2.41681123]
[-38.95522308 -12.02570915]
[-53.34817886 -6.84979868]
[-68.30068970 -9.55521011]
[-79.81490326 -19.31683540]
[-84.86327362 -33.43667603]
[-82.18428802 -48.08893204]
[-90.88883972 -51.23634720]
[-93.87120819 -58.09655762]
[-105.13818359 -67.99884033]
[-116.40516663 -77.90112305]
[-127.67214203 -87.80340576]
[-139.06568909 -97.55979919]
[-150.58389282 -107.16870117]
[-162.10209656 -116.77759552]
[-173.62030029 -126.38649750]
[-185.13850403 -135.99539185]
[-201.41967773 -131.62500000]
[-216.95977783 -137.71855164]
[-225.75469971 -151.71067810]
[-224.53213501 -168.02616882]
[-236.29394531 -177.33531189]
[-252.58863831 -179.18316650]
[-258.88671875 -194.32470703]
[-248.70925903 -207.18360901]
[-232.52595520 -204.53173828]
[-226.98480225 -189.09710693]
[-215.22300720 -179.78796387]
[-202.69000244 -184.57518005]
[-189.32566833 -182.49801636]
[-178.66706848 -173.99716187]
[-173.58911133 -161.22770691]
[-175.52961731 -147.51359558]
[-164.01139832 -137.90470886]
[-152.49319458 -128.29580688]
[-140.97499084 -118.68690491]
[-129.45678711 -109.07801056]
[-122.21932983 -107.18688965]
[-117.76985931 -99.07038116]
[-106.50288391 -89.16809845]
[-95.23590088 -79.26581573]
[-83.96892548 -69.36353302]
[-72.57538605 -59.60713959]
[-58.64081955 -64.86959076]
[-43.84467316 -62.43442535]
[-32.17692947 -52.85683823]
[-26.83465385 -38.63161850]
[-29.34632492 -23.54391479]
[-17.82811737 -13.93501759]
[-6.30991125 -4.32612038]
[5.20829535 5.28277731]
[16.72650146 14.89167500]
[28.24470901 24.50057220]
[38.44363785 22.66334343]
[48.14706039 26.89039040]
[53.98635483 35.98190308]
[53.78705597 47.00640869]
[64.79533386 57.19551086]
[75.80361938 67.38461304]
[86.81189728 77.57370758]
[102.46887207 72.43563080]
[119.12579346 77.75999451]
[130.10546875 92.64497375]
[130.30406189 112.14992523]
[144.04881287 118.15673065]
[157.79357910 124.16353607]
[171.61451721 129.99288940]
[185.50938416 135.64379883]
[199.40423584 141.29472351]
[213.29910278 146.94564819]
[227.19395447 152.59655762]
[246.91825867 148.83596802]
[258.31057739 164.37306213]
[272.47790527 169.30119324]
[286.64523315 174.22932434]
[300.81259155 179.15745544]
[314.97991943 184.08560181]
[331.92630005 183.57872009]
[337.10458374 199.72250366]
[323.02520752 209.16746521]
[310.05178833 198.25292969]
[295.88442993 193.32479858]
[281.71710205 188.39666748]
[267.54977417 183.46853638]
[253.38243103 178.54039001]
[244.48721313 183.85720825]
[233.91645813 183.32479858]
[225.24546814 176.87753296]
[221.54304504 166.49142456]
[207.64817810 160.84049988]
[193.75332642 155.18957520]
[179.85845947 149.53866577]
[165.96360779 143.88774109]
[158.49383545 144.28721619]
[151.78675842 137.90829468]
[138.04200745 131.90148926]
[124.29725647 125.89467621]
[111.43753815 133.61656189]
[110.27990723 148.57183838]
[109.12227631 163.52709961]
[107.96463776 178.48236084]
[118.43325043 190.32228088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[7 118]
[8 117]
[11 79]
[12 78]
[13 77]
[14 76]
[16 72]
[17 71]
[18 70]
[19 69]
[20 68]
[21 67]
[26 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[40 47]
[41 46]
[83 116]
[84 115]
[85 114]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
