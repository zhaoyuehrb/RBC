%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGCUGGGUCCCGAUGCCGCGAGCGGAAUCUCGGCGCUCCCGGAAGUGGCCUGAAGGCGGCGCGCCAGUCCCGAGCAGUGCUCGCUCCUGCUCGGGGCGCUGCGGCCCCGGGCGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[76.26142883 421.84939575]
[60.50427246 420.62966919]
[50.28834915 408.57104492]
[51.67457962 392.82766724]
[63.84053802 382.73980713]
[64.99816895 367.78454590]
[58.26617813 354.49810791]
[67.04543304 341.33624268]
[60.31344604 328.04977417]
[69.09270477 314.88790894]
[66.44049072 307.89343262]
[70.47755432 299.56408691]
[72.01986694 284.64361572]
[73.56218719 269.72311401]
[75.10449982 254.80261230]
[65.54111481 243.44139099]
[66.89269257 228.28791809]
[78.87422180 218.33398438]
[80.41653442 203.41348267]
[81.95884705 188.49298096]
[83.50116730 173.57249451]
[85.04347992 158.65199280]
[82.57223511 151.59153748]
[86.82242584 143.36892700]
[88.74839783 128.49308777]
[90.67437744 113.61724854]
[82.52103424 126.20783997]
[68.70198059 132.04168701]
[53.99270630 129.10278320]
[43.47632599 118.40671539]
[40.78701019 103.64976501]
[46.85411835 89.93151855]
[59.58102036 81.99263000]
[74.56964874 82.57656097]
[86.64055634 91.48179626]
[79.59091187 78.24160767]
[72.54125977 65.00142670]
[65.49160767 51.76124573]
[58.44195557 38.52106476]
[54.08215332 52.87348938]
[42.23939896 62.07942581]
[27.25503731 62.76414490]
[14.62205219 54.67664337]
[8.97146797 40.78164673]
[12.37468243 26.17280960]
[23.58414078 16.20546150]
[38.49066162 14.53344822]
[51.62897110 21.76883888]
[47.43668747 7.36659098]
[36.15076828 -3.72117877]
[40.02264786 -18.10373116]
[35.83036041 -32.50598145]
[31.63807678 -46.90822601]
[19.42812157 -57.85578537]
[23.06833076 -73.84580994]
[38.81396866 -78.42913818]
[50.46727371 -66.89083099]
[46.04032516 -51.10051346]
[50.23260880 -36.69826508]
[54.42489624 -22.29601669]
[65.41094971 -12.23839188]
[61.83893585 3.17430615]
[66.03121948 17.57655525]
[71.68213654 31.47141457]
[78.73178864 44.71159744]
[85.78144073 57.95177841]
[92.83109283 71.19196320]
[99.88074493 84.43214417]
[105.61640930 86.11467743]
[110.08188629 89.73491669]
[124.24922180 84.80677795]
[138.41656494 79.87864685]
[152.58389282 74.95050812]
[166.75123596 70.02237701]
[180.91857910 65.09423828]
[195.08592224 60.16610336]
[209.25325012 55.23796844]
[223.42059326 50.30982971]
[237.58793640 45.38169479]
[251.75526428 40.45355988]
[255.26895142 25.43165779]
[266.36221313 14.71049309]
[281.49520874 11.71114922]
[295.83905029 17.39070702]
[304.81671143 29.93684006]
[305.56338501 45.34612274]
[297.84088135 58.70150757]
[284.11337280 65.74134064]
[268.76129150 64.21923828]
[256.68341064 54.62089920]
[242.51606750 59.54903412]
[228.34872437 64.47717285]
[214.18139648 69.40530396]
[200.01405334 74.33344269]
[185.84671021 79.26157379]
[171.67936707 84.18971252]
[157.51203918 89.11785126]
[143.34469604 94.04598236]
[129.17735291 98.97412109]
[115.01001740 103.90225220]
[105.55021667 115.54322052]
[103.62424469 130.41906738]
[101.69826508 145.29490662]
[99.96397400 160.19430542]
[98.42166138 175.11480713]
[96.87934875 190.03530884]
[95.33703613 204.95579529]
[93.79471588 219.87629700]
[103.48680878 232.07060242]
[101.71013641 247.18014526]
[90.02499390 256.34490967]
[88.48268127 271.26541138]
[86.94036865 286.18591309]
[85.39805603 301.10641479]
[84.04796600 316.04553223]
[90.69715881 330.40167236]
[82.00070190 342.49386597]
[88.64988708 356.85000610]
[79.95343018 368.94219971]
[78.79579926 383.89746094]
[89.26441193 395.73736572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[8 117]
[10 115]
[12 114]
[13 113]
[14 112]
[15 111]
[18 108]
[19 107]
[20 106]
[21 105]
[22 104]
[24 103]
[25 102]
[26 101]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[48 63]
[49 62]
[51 60]
[52 59]
[53 58]
[70 100]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
