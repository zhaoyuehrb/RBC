%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGAAGAGCAAACCCCCUCCUGCUCAGAGCUGCUGCCGCCUGCGCCCAGGGCUGCACUCCGCGCAGGCCUCAUAGCCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[121.99817657 126.77622986]
[113.61544800 131.86700439]
[104.14218140 134.40536499]
[94.33713531 134.18798828]
[84.98567200 131.23229980]
[76.83678436 125.77502441]
[70.54318237 118.25328064]
[56.38493347 123.20746613]
[42.22668457 128.16165161]
[28.06843376 133.11584473]
[13.91018391 138.07002258]
[11.13366508 153.17587280]
[1.16399515 164.85925293]
[-13.31703568 169.97738647]
[-28.41410255 167.15353394]
[-40.06616974 157.14727783]
[-45.13888931 142.65028381]
[-42.26772690 127.56214142]
[-32.22500992 115.94149780]
[-17.71217918 110.91423798]
[-2.63311100 113.83268738]
[8.95599842 123.91177368]
[23.11424828 118.95758820]
[37.27249908 114.00340271]
[51.43074799 109.04921722]
[65.58899689 104.09503174]
[65.48761749 96.87237549]
[66.88576508 89.78561401]
[69.72267914 83.14264679]
[73.87510681 77.23211670]
[64.96780396 65.16314697]
[49.72877502 59.10477066]
[47.62402725 42.84125137]
[60.81874466 33.10310745]
[75.73933411 39.90810394]
[77.03677368 56.25584793]
[85.94407654 68.32481384]
[112.66045380 67.74168396]
[131.84831238 86.34090424]
[146.58682251 83.55223083]
[161.32531738 80.76354980]
[176.06381226 77.97487640]
[190.80230713 75.18620300]
[198.88320923 70.40946960]
[206.14341736 72.57964325]
[220.97587585 70.34400940]
[231.39337158 54.75659943]
[249.54516602 51.53466797]
[264.18560791 62.21633148]
[278.80950928 58.87851715]
[293.43344116 55.54070282]
[305.16589355 44.92656708]
[319.29577637 49.63779068]
[333.91970825 46.29997635]
[348.54360962 42.96216202]
[363.16754150 39.62434769]
[370.14007568 25.62729263]
[384.49905396 19.43422890]
[399.46456909 23.96933365]
[407.97039795 37.09126663]
[406.00030518 52.60425568]
[394.48455811 63.18354034]
[378.86050415 63.83390427]
[366.50534058 54.24826813]
[351.88143921 57.58608246]
[337.25750732 60.92389679]
[322.63360596 64.26171112]
[311.94714355 74.63710785]
[296.77124023 70.16461945]
[282.14733887 73.50243378]
[267.52340698 76.84024811]
[263.55770874 87.84197235]
[254.60699463 95.55594635]
[242.90225220 97.90201569]
[231.43914795 94.15808868]
[223.21150208 85.17647552]
[208.37904358 87.41210938]
[193.59098816 89.92470551]
[178.85247803 92.71337891]
[164.11398315 95.50205231]
[149.37548828 98.29072571]
[134.63699341 101.07939911]
[132.94744873 110.74021912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[30 37]
[31 36]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[45 77]
[46 76]
[49 71]
[50 70]
[51 69]
[53 67]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
