%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGAGUCUGCACUAGGAAACUGGUGGGAGCCGAGGUCCGGAAGUCCGACGCUGGUCGGUGGGCGC\
) } def
/len { sequence length } bind def

/coor [
[97.11535645 131.13029480]
[86.46801758 128.18336487]
[77.51042175 121.71717072]
[71.36109924 112.53915405]
[68.78792572 101.79536438]
[55.84249496 110.45870972]
[40.92864227 107.45344543]
[32.74924469 95.05857086]
[18.00464821 92.30232239]
[3.26005125 89.54608154]
[-6.10375929 91.06651306]
[-12.09496403 86.30698395]
[-26.69653511 82.87272644]
[-41.29810333 79.43846130]
[-55.89967728 76.00420380]
[-70.50124359 72.56994629]
[-85.10282135 69.13568878]
[-100.64033508 74.38140869]
[-112.77160645 63.34671402]
[-109.01700592 47.38315964]
[-93.23896027 42.91267776]
[-81.66855621 54.53411865]
[-67.06698608 57.96837616]
[-52.46541595 61.40263367]
[-37.86384583 64.83689117]
[-23.26227570 68.27114868]
[-8.66070557 71.70541382]
[6.01629400 74.80148315]
[20.76089096 77.55773163]
[35.50548553 80.31397247]
[47.61009598 71.71083069]
[62.60247803 74.29601288]
[71.54416656 87.05076599]
[84.31213379 72.95729828]
[102.88464355 68.86969757]
[120.38983154 76.30039215]
[130.35072327 92.50000000]
[145.35072327 92.50000000]
[160.35072327 92.50000000]
[175.35072327 92.50000000]
[190.35072327 92.50000000]
[194.18461609 89.83412170]
[198.26889038 88.64820862]
[202.10627747 88.83896637]
[205.28518677 90.15168762]
[207.52171326 92.22181702]
[208.68504333 94.62707520]
[223.28662109 98.06133270]
[237.88818359 101.49559021]
[252.48976135 104.92984772]
[267.09133911 108.36410522]
[282.62884521 103.11839294]
[294.76010132 114.15308380]
[291.00552368 130.11663818]
[275.22747803 134.58711243]
[263.65707397 122.96568298]
[249.05549622 119.53141785]
[234.45393372 116.09716034]
[219.85235596 112.66290283]
[205.25079346 109.22864532]
[190.35072327 107.50000000]
[175.35072327 107.50000000]
[160.35072327 107.50000000]
[145.35072327 107.50000000]
[130.35072327 107.50000000]
[125.84720612 117.58803558]
[118.11613464 125.47985077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[8 30]
[9 29]
[10 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
