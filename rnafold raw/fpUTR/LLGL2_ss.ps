%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUGAGCAGGAAGGAGACGGCCGCCCAGCAGCCCGUGGGCAGGCGCGGCGGAGCGAGCGGGGCCGGCGGCGGGCGCCGAGGGACGCCGAGGCCUCGGGCGGGGGCUGGCCCGGGGUUCCAGGUCUCCAGUGGGGGCUGCAGACUAAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[102.18903351 393.50125122]
[102.83792877 378.20950317]
[110.52895355 364.97671509]
[123.49476624 356.84365845]
[122.27999878 341.89294434]
[121.06523132 326.94219971]
[109.58386993 317.52340698]
[108.13894653 302.37854004]
[118.09609985 290.39968872]
[116.88133240 275.44897461]
[115.66656494 260.49822998]
[114.45179749 245.54750061]
[96.38008118 236.42520142]
[87.32846832 218.16455078]
[91.06124115 197.98864746]
[106.24890137 183.98895264]
[103.52783203 169.23782349]
[100.80675507 154.48670959]
[98.08567810 139.73558044]
[95.36460114 124.98445129]
[92.64352417 110.23332214]
[85.09968567 97.26834869]
[73.61988068 87.61360168]
[62.14007950 77.95886230]
[46.60739899 79.13084412]
[35.10277939 69.17602539]
[34.08119202 54.36076736]
[22.60138893 44.70602036]
[11.12158680 35.05127335]
[-8.83466530 32.49134445]
[-14.76001930 14.12143898]
[-26.62165451 4.93984890]
[-35.37879562 2.13740611]
[-38.62815094 -4.54999399]
[-50.30126572 -13.97009754]
[-61.97438431 -23.39019966]
[-73.64749908 -32.81030273]
[-85.32061768 -42.23040771]
[-96.99373627 -51.65050888]
[-112.59221649 -54.29588699]
[-117.63759613 -68.30992889]
[-133.23608398 -70.95529938]
[-138.28146362 -84.96934509]
[-146.98001099 -87.94869232]
[-150.09315491 -94.70057678]
[-161.57296753 -104.35532379]
[-173.05276489 -114.01006317]
[-188.59442139 -116.97103119]
[-193.35475159 -131.08445740]
[-208.89640808 -134.04541016]
[-213.65673828 -148.15882874]
[-225.13653564 -157.81358337]
[-240.50735474 -154.93745422]
[-254.10537720 -162.65936279]
[-259.51000977 -177.33328247]
[-254.16938782 -192.03062439]
[-240.60517883 -199.81175232]
[-225.22196960 -197.00265503]
[-215.28326416 -184.92970276]
[-215.48179626 -169.29338074]
[-204.00199890 -159.63864136]
[-189.28144836 -157.36824036]
[-183.70001221 -142.56425476]
[-168.97946167 -140.29385376]
[-163.39801025 -125.48986816]
[-151.91821289 -115.83512115]
[-140.43841553 -106.18037415]
[-128.86135864 -96.64246368]
[-114.09781647 -94.67087555]
[-108.21749115 -79.98304749]
[-93.45395660 -78.01145935]
[-87.57363129 -63.32362747]
[-75.90051270 -53.90352249]
[-64.22739410 -44.48342133]
[-52.55427933 -35.06331635]
[-40.88116455 -25.64321327]
[-29.20804596 -16.22311020]
[-17.44006538 -6.92178726]
[-5.57842970 2.25980258]
[4.47297573 0.05668205]
[14.27144146 3.85893083]
[20.46027565 12.62506390]
[20.77633286 23.57147026]
[32.25613785 33.22621536]
[43.73593903 42.88096237]
[58.50701141 41.34764862]
[70.28669739 50.97540283]
[71.79482269 66.47905731]
[83.27462769 76.13380432]
[94.75443268 85.78855133]
[109.58145905 88.05996704]
[119.33869171 75.60577393]
[134.06382751 77.84629059]
[147.90742493 72.07095337]
[161.75103760 66.29560852]
[175.59463501 60.52026367]
[189.43824768 54.74491882]
[203.28184509 48.96957779]
[217.12545776 43.19423294]
[230.96905518 37.41888809]
[244.81266785 31.64354706]
[258.65628052 25.86820221]
[262.10925293 10.74020004]
[273.81692505 0.55638391]
[289.27743530 -0.76736015]
[302.54589844 7.27797413]
[308.52032471 21.59879303]
[304.90344238 36.68844604]
[293.08596802 46.74465561]
[277.61203003 47.90060806]
[264.43161011 39.71180725]
[250.58801270 45.48715210]
[236.74440002 51.26249313]
[222.90080261 57.03783798]
[209.05718994 62.81318283]
[195.21357727 68.58852386]
[181.36997986 74.36386871]
[167.52636719 80.13921356]
[153.68276978 85.91455841]
[139.83915710 91.68989563]
[131.07211304 103.73099518]
[115.35679626 101.90357208]
[113.00727844 104.69866180]
[110.25920868 106.57534790]
[107.39465332 107.51224518]
[110.11572266 122.26337433]
[112.83679962 137.01449585]
[115.55787659 151.76562500]
[118.27895355 166.51675415]
[121.00003052 181.26788330]
[130.82987976 183.38389587]
[139.52813721 188.36865234]
[146.28326416 195.73628235]
[150.47128296 204.77963257]
[151.71345520 214.63804626]
[149.91046143 224.37930298]
[145.25010681 233.08773804]
[138.18788147 239.95037842]
[129.40252686 244.33273315]
[130.61729431 259.28347778]
[131.83206177 274.23419189]
[133.04682922 289.18493652]
[144.80720520 299.39920044]
[145.82617188 314.57867432]
[136.01596069 325.72744751]
[137.23072815 340.67816162]
[138.44549561 355.62890625]
[152.55421448 361.56210327]
[162.28062439 373.37969971]
[165.38966370 388.36608887]
[161.16690063 403.07754517]
[150.58270264 414.13345337]
[136.06922913 418.99325562]
[120.96157837 416.54022217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 147]
[5 146]
[6 145]
[9 142]
[10 141]
[11 140]
[12 139]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 90]
[23 89]
[24 88]
[27 85]
[28 84]
[29 83]
[31 79]
[32 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[41 70]
[43 68]
[45 67]
[46 66]
[47 65]
[49 63]
[51 61]
[52 60]
[91 122]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
