%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCGGCCUUGCCCUGCUUCCUCCCGGUGCUGGGCGGCGCAGGGGGCGGUGCGGGGCCGCCACCUCCCUCCAGCUUGUCCGGUGGGGGCGGCGCCGAGGCGGCCAUGGAGUGGGGGACCCGGGUUAGCGGCAGCGGCGGGGG\
) } def
/len { sequence length } bind def

/coor [
[84.47682190 128.80908203]
[78.57556152 124.73712921]
[73.70269012 119.47777557]
[70.09211731 113.28347015]
[55.35289001 116.06829071]
[40.61366272 118.85311127]
[25.87443733 121.63792419]
[11.13521099 124.42274475]
[-3.60401511 127.20756531]
[-18.34324074 129.99238586]
[-33.08246613 132.77720642]
[-47.82169342 135.56202698]
[-59.94548416 145.72688293]
[-73.88796234 140.48696899]
[-88.62718201 143.27178955]
[-103.36640930 146.05661011]
[-118.10563660 148.84143066]
[-132.84486389 151.62625122]
[-147.58409119 154.41105652]
[-162.32331848 157.19587708]
[-177.06254578 159.98069763]
[-191.80177307 162.76551819]
[-206.50952148 165.71206665]
[-221.14898682 168.98100281]
[-235.75166321 172.41055298]
[-250.35433960 175.84008789]
[-262.01995850 186.52766418]
[-276.17913818 181.90521240]
[-287.75329590 193.52291870]
[-303.52987671 189.04734802]
[-307.27932739 173.08258057]
[-295.14450073 162.05180359]
[-279.60867310 167.30253601]
[-268.98754883 156.86027527]
[-253.78388977 161.23741150]
[-239.18119812 157.80786133]
[-224.57852173 154.37832642]
[-218.74087524 149.75112915]
[-209.61744690 151.03758240]
[-203.67956543 146.53973389]
[-194.58659363 148.02629089]
[-179.84736633 145.24147034]
[-165.10813904 142.45664978]
[-150.36891174 139.67184448]
[-135.62968445 136.88702393]
[-120.89045715 134.10220337]
[-106.15122986 131.31738281]
[-91.41200256 128.53256226]
[-76.67277527 125.74774170]
[-65.60323334 115.78207397]
[-50.60651398 120.82279968]
[-35.86728668 118.03797913]
[-21.12806129 115.25315857]
[-6.38883448 112.46833801]
[8.35039139 109.68351746]
[23.08961678 106.89870453]
[37.82884216 104.11388397]
[52.56806946 101.32906342]
[67.30729675 98.54424286]
[72.37805939 82.45120239]
[84.79188538 71.02336121]
[101.24867249 67.29872894]
[117.37351227 72.26747131]
[128.03820801 61.71928024]
[138.70289612 51.17109299]
[149.36759949 40.62290573]
[160.03228760 30.07471848]
[170.58047485 19.41002083]
[181.01087952 8.63010406]
[191.44129944 -2.14981389]
[201.87170410 -12.92973137]
[212.30210876 -23.70965004]
[222.49319458 -34.71609497]
[232.44003296 -45.94375610]
[242.38687134 -57.17141724]
[245.77182007 -65.74078369]
[252.67765808 -68.53338623]
[262.86874390 -79.53983307]
[273.05981445 -90.54627228]
[283.12939453 -101.66400146]
[293.07623291 -112.89166260]
[303.02307129 -124.11932373]
[312.96990967 -135.34698486]
[322.91674805 -146.57464600]
[320.43695068 -162.01435852]
[328.50607300 -175.40924072]
[343.31414795 -180.43466187]
[357.86926270 -174.71774292]
[365.29888916 -160.95787048]
[362.09503174 -145.65200806]
[349.77044678 -136.02713013]
[334.14440918 -136.62780762]
[324.19757080 -125.40014648]
[314.25073242 -114.17248535]
[304.30389404 -102.94482422]
[294.35705566 -91.71715546]
[292.25970459 -84.56941986]
[284.06625366 -80.35519409]
[273.87518311 -69.34874725]
[263.68408203 -58.34230042]
[253.61453247 -47.22457886]
[243.66769409 -35.99691772]
[233.72085571 -24.76925468]
[233.12043762 -19.96010971]
[229.44223022 -15.50046539]
[223.08201599 -13.27924347]
[212.65161133 -2.49932575]
[202.22120667 8.28059196]
[191.79080200 19.06051064]
[181.36039734 29.84042740]
[178.95111084 36.88914108]
[170.58047485 40.73941422]
[159.91578674 51.28760147]
[149.25108337 61.83578873]
[138.58639526 72.38397980]
[127.92169952 82.93216705]
[132.59883118 102.87207794]
[124.50725555 121.68701935]
[133.16331482 133.93743896]
[141.81936646 146.18785095]
[150.47541809 158.43826294]
[161.24349976 157.56230164]
[171.31294250 161.24707031]
[178.85719299 168.75180054]
[182.53819275 178.64955139]
[181.74334717 189.09826660]
[176.68647766 198.18344116]
[184.51692200 210.97734070]
[199.17507935 218.33061218]
[199.86578369 234.71520996]
[185.87850952 243.27606201]
[171.60215759 235.20649719]
[171.72302246 218.80780029]
[163.89256287 206.01388550]
[144.72030640 202.95362854]
[133.70967102 186.59744263]
[138.22500610 167.09431458]
[129.56895447 154.84390259]
[120.91289520 142.59349060]
[112.25683594 130.34307861]
[105.35478210 132.28402710]
[98.19569397 132.67532349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 39]
[24 37]
[25 36]
[26 35]
[28 33]
[63 116]
[64 115]
[65 114]
[66 113]
[67 112]
[68 110]
[69 109]
[70 108]
[71 107]
[72 106]
[73 103]
[74 102]
[75 101]
[77 100]
[78 99]
[79 98]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[118 140]
[119 139]
[120 138]
[121 137]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
