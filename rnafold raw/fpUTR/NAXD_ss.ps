%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCGGAAUGCUGCCCGAUGGCCCUGGGUCCUCGCUGUGGGGCAAUCCGGGCUUGCAGACGAGGUAAGGUCGAUUCCAUUUGGCCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[20.33406448 220.83584595]
[13.02209854 232.73791504]
[1.32675803 240.25372314]
[-12.40514374 241.94380188]
[-25.44773674 237.53083801]
[-36.05434036 248.13743591]
[-46.66094208 258.74404907]
[-44.10062027 274.04843140]
[-51.05508423 287.91979980]
[-64.85019684 295.02435303]
[-80.18146515 292.63018799]
[-91.15369415 281.65795898]
[-93.54784393 266.32669067]
[-86.44330597 252.53158569]
[-72.57192993 245.57711792]
[-57.26754379 248.13743591]
[-46.66094208 237.53083801]
[-36.05434036 226.92424011]
[-40.62289047 211.52615356]
[-36.83968353 195.82069397]
[-25.63224220 184.05694580]
[-9.94951916 179.46556091]
[6.01363611 183.37191772]
[16.25193405 172.40937805]
[26.49023056 161.44683838]
[36.72852707 150.48429871]
[46.96682358 139.52175903]
[57.20512009 128.55921936]
[67.44342041 117.59667969]
[77.68171692 106.63414001]
[88.07064819 75.81108093]
[90.11315155 60.95079422]
[92.15565491 46.09050369]
[94.19815063 31.23021507]
[96.24065399 16.36992645]
[98.02914429 1.47693181]
[99.56310272 -13.44442749]
[101.09706879 -28.36578560]
[102.63102722 -43.28714752]
[104.16499329 -58.20850372]
[105.69895172 -73.12986755]
[107.23291779 -88.05122375]
[100.94744110 -102.57029724]
[109.94572449 -114.43959045]
[99.77866364 -126.53944397]
[101.22856903 -142.27708435]
[113.43523407 -152.31564331]
[129.15666199 -150.69943237]
[139.06561279 -138.38731384]
[137.28327942 -122.68385315]
[124.86708069 -112.90563202]
[131.26226807 -99.45383453]
[122.15427399 -86.51725769]
[120.62031555 -71.59590149]
[119.08634949 -56.67454147]
[117.55239105 -41.75318527]
[116.01842499 -26.83182526]
[114.48446655 -11.91046524]
[112.95050049 3.01089406]
[115.45075989 10.13530159]
[111.10093689 18.41242599]
[109.05844116 33.27271652]
[107.01593781 48.13300323]
[104.97344208 62.99329376]
[102.93093872 77.85358429]
[114.75645447 68.62551117]
[128.25883484 75.15895081]
[128.36120605 90.15859985]
[114.94809723 96.87562561]
[129.24526978 101.41333771]
[143.16058350 93.92072296]
[158.27406311 98.54222107]
[165.61915588 112.53598022]
[160.83811951 127.59975433]
[146.76748657 134.79647827]
[131.75509644 129.85644531]
[124.70755005 115.71051025]
[110.41037750 111.17279816]
[120.76229095 122.02811432]
[119.72988892 136.99253845]
[107.98532867 146.32342529]
[93.17495728 143.94583130]
[84.94113159 131.40773010]
[88.64425659 116.87243652]
[78.40596008 127.83497620]
[68.16766357 138.79751587]
[57.92936325 149.76005554]
[47.69106674 160.72259521]
[37.45277023 171.68513489]
[27.21447182 182.64767456]
[16.97617531 193.61021423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[44 51]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
