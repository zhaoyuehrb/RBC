%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGACUCGGCCUUCUGGGCGCGCGCGACGUCAGUUUGAGUUCUGUGUUCUCCCCGCCCGUGUCCCGCCCGACCCGCGCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[92.10368347 287.68420410]
[91.55585480 272.69421387]
[91.00802612 257.70422363]
[90.46019745 242.71423340]
[89.91236115 227.72424316]
[86.43964386 220.99742126]
[89.62839508 212.17892456]
[81.89109802 199.45164490]
[89.62839508 185.65147400]
[89.62839508 170.65147400]
[89.62839508 155.65147400]
[81.58757782 148.88887024]
[78.66044617 138.56678772]
[82.09354401 128.16714478]
[90.94300842 121.34436798]
[92.03793335 106.38438416]
[89.39176941 98.55150604]
[93.45587921 90.90125275]
[95.09645081 75.99124146]
[96.73702240 61.08122253]
[98.37758636 46.17120743]
[100.01815796 31.26119423]
[92.17710114 14.72217369]
[102.83160400 0.90621072]
[103.92652893 -14.05377388]
[105.02146149 -29.01375771]
[106.11639404 -43.97374344]
[107.21131897 -58.93372726]
[105.57075500 -73.84374237]
[101.24926758 -88.20774841]
[96.92778015 -102.57176208]
[91.33362579 -110.09769440]
[92.72111511 -117.53978729]
[88.92710876 -132.05204773]
[85.13311005 -146.56430054]
[70.63231659 -152.08757019]
[62.17564011 -165.09773254]
[63.01484299 -180.59210205]
[72.82723236 -192.61277771]
[87.83975220 -196.53756714]
[102.27977753 -190.85729980]
[110.59481812 -177.75616455]
[109.58758545 -162.27182007]
[99.64537048 -150.35829163]
[103.43936920 -135.84603882]
[107.23336792 -121.33378601]
[111.29178619 -106.89324188]
[115.61327362 -92.52923584]
[119.93476105 -78.16522980]
[127.04243469 -91.37435150]
[139.67518616 -99.46221161]
[154.64654541 -100.38873291]
[168.18014526 -93.92020416]
[176.86225891 -81.68824005]
[178.50292969 -66.77823639]
[172.68832397 -52.95108414]
[160.88508606 -43.69453049]
[146.07049561 -41.34344864]
[131.98133850 -46.49087143]
[122.17130280 -57.83879471]
[121.07637787 -42.87881088]
[119.98144531 -27.91882896]
[118.88651276 -12.95884418]
[117.79158783 2.00114036]
[125.51895905 11.49894714]
[124.57710266 24.11204529]
[114.92816925 32.90176392]
[113.28760529 47.81177902]
[111.64703369 62.72179031]
[110.00646210 77.63180542]
[108.36589813 92.54182434]
[106.99791718 107.47930908]
[105.90299225 122.43929291]
[115.62103271 139.91757202]
[104.62839508 155.65147400]
[104.62839508 170.65147400]
[104.62839508 185.65147400]
[112.36569977 199.45164490]
[104.62839508 212.17892456]
[104.90235901 227.17642212]
[105.45018768 242.16641235]
[105.99801636 257.15640259]
[106.54584503 272.14639282]
[107.09368134 287.13638306]
[109.98638153 306.30099487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[7 79]
[9 77]
[10 76]
[11 75]
[15 73]
[16 72]
[18 71]
[19 70]
[20 69]
[21 68]
[22 67]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 49]
[30 48]
[31 47]
[33 46]
[34 45]
[35 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
