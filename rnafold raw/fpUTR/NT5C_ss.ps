%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGACUCCGGAAGCAGCGCUCCCUCCGCUUCCGGCCGAGCCCGCGCCCCCCAGACCCCGAGAGCUCGCAGCUCCGGCCCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[92.85312653 109.48748779]
[88.75585175 106.16132355]
[73.87017822 104.31285095]
[58.98451233 102.46437073]
[44.09884262 100.61589813]
[29.45037651 106.59360504]
[17.77359390 97.34687805]
[2.88792515 95.49839783]
[-12.07470989 94.44031525]
[-27.07237434 94.17559052]
[-42.07003784 93.91085815]
[-57.06770325 93.64613342]
[-72.06536865 93.38140869]
[-87.06302643 93.11667633]
[-102.06069183 92.85195160]
[-117.05835724 92.58722687]
[-123.87638092 106.24288940]
[-135.94944763 115.58119965]
[-150.88041687 118.74802399]
[-165.70475769 115.11458588]
[-177.47906494 105.40231323]
[-183.86555481 91.53957367]
[-183.59619141 76.27883148]
[-176.72442627 62.65012360]
[-164.61470032 53.35942841]
[-149.67137146 50.25142670]
[-134.86145020 53.94321442]
[-123.12548065 63.70178223]
[-116.79363251 77.58956146]
[-101.79596710 77.85428619]
[-86.79830170 78.11901855]
[-71.80063629 78.38374329]
[-56.80297470 78.64846802]
[-41.80530930 78.91320038]
[-26.80764771 79.17792511]
[-11.80998325 79.44264984]
[-8.92966557 77.05702972]
[-4.67236757 76.07604980]
[0.22413231 77.16769409]
[4.73640108 80.61273193]
[19.62207031 82.46120453]
[33.20581436 76.35128784]
[45.94731903 85.73023224]
[60.83298874 87.57870483]
[75.71865845 89.42718506]
[90.60432434 91.27565765]
[105.56696320 92.33374023]
[120.56462860 92.59847260]
[135.56228638 92.86319733]
[149.49685669 85.37065125]
[162.08560181 93.33136749]
[177.08326721 93.59609222]
[182.47955322 83.05622101]
[191.45196533 75.40943909]
[202.61488342 71.78437805]
[214.26420593 72.69259644]
[224.63749695 77.95677948]
[232.18060303 86.74363708]
[235.78050232 97.69553375]
[250.66616821 99.54400635]
[265.55184937 101.39248657]
[274.68225098 99.31642914]
[280.92675781 103.57788849]
[295.73791504 105.95055389]
[310.54907227 108.32321167]
[325.36022949 110.69587708]
[340.17138672 113.06853485]
[356.76751709 109.60370636]
[364.69119263 124.59208679]
[352.48205566 136.35531616]
[337.79873657 127.87969971]
[322.98757935 125.50703430]
[308.17642212 123.13437653]
[293.36526489 120.76171112]
[278.55410767 118.38905334]
[263.70336914 116.27815247]
[248.81770325 114.42967987]
[233.93202209 112.58119965]
[222.26321411 126.88101196]
[204.25613403 131.54910278]
[186.83897400 124.61140442]
[176.81854248 108.59375763]
[161.82087708 108.32902527]
[148.95903015 115.84050751]
[135.29756165 107.86086273]
[120.29989624 107.59613037]
[105.30223083 107.33140564]
[102.00675201 109.78766632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[7 41]
[8 40]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[47 87]
[48 86]
[49 85]
[51 83]
[52 82]
[59 78]
[60 77]
[61 76]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
