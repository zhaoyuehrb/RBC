%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGCCGAUGCCCGUCGCCAGUGACACCGGGACAACAGCUGCGGGCUCUGUGCGAGCGGCCCAGCAGCGCGGAGCCUCAGCGGAGUGAGCGAGCGCGGGGCAGUAGCGGCCUGCGAUUGUGAG\
) } def
/len { sequence length } bind def

/coor [
[137.71168518 385.76742554]
[145.04901123 372.38360596]
[157.47172546 363.51574707]
[154.86700439 348.74362183]
[152.07832336 334.00512695]
[149.10614014 319.30252075]
[146.13394165 304.59994507]
[143.16174316 289.89736938]
[140.18955994 275.19476318]
[125.15065002 261.14843750]
[131.84291077 240.86798096]
[127.78029633 226.42861938]
[123.71768951 211.98925781]
[119.65508270 197.54989624]
[115.59247589 183.11053467]
[102.51636505 176.07128906]
[98.19060516 161.48559570]
[105.66266632 147.81790161]
[101.60005951 133.37854004]
[97.53745270 118.93917084]
[84.95149231 111.76004791]
[81.02714539 97.81208038]
[88.02318573 85.12343597]
[83.96057892 70.68407440]
[73.06108093 63.65435028]
[70.01573944 51.46140289]
[75.93908691 40.83565903]
[72.23772430 26.29949951]
[68.53636169 11.76334095]
[59.41741180 10.80579662]
[50.87533188 7.52662373]
[43.48919296 2.15877819]
[37.75694275 -4.92355824]
[34.06182861 -13.23105335]
[32.64679337 -22.19302368]
[33.59852219 -31.19663620]
[36.84220886 -39.62881851]
[42.14731216 -46.91800308]
[49.14393616 -52.57286072]
[57.34859848 -56.21541977]
[56.22764587 -71.17347717]
[55.10669708 -86.13153076]
[53.98574448 -101.08959198]
[50.18807220 -109.52069092]
[53.02805328 -116.43372345]
[52.28036499 -131.41506958]
[51.53267670 -146.39642334]
[50.78498840 -161.37777710]
[50.03730011 -176.35913086]
[49.28961182 -191.34048462]
[48.54192352 -206.32183838]
[47.79423523 -221.30319214]
[47.04654694 -236.28456116]
[46.29885864 -251.26591492]
[45.55117035 -266.24725342]
[36.48920822 -275.52609253]
[36.23340988 -288.09100342]
[44.37269592 -297.13226318]
[43.99873734 -312.12759399]
[32.37697220 -322.83789062]
[31.81594086 -338.63220215]
[42.64849472 -350.14007568]
[58.44787216 -350.53408813]
[69.84057617 -339.58047485]
[70.06752777 -323.77783203]
[58.99407196 -312.50155640]
[59.36803436 -297.50622559]
[69.32814789 -283.11465454]
[60.53252411 -266.99496460]
[61.28021240 -252.01359558]
[62.02790070 -237.03224182]
[62.77558899 -222.05088806]
[63.52327728 -207.06953430]
[64.27096558 -192.08818054]
[65.01865387 -177.10682678]
[65.76634216 -162.12547302]
[66.51403046 -147.14411926]
[67.26171875 -132.16276550]
[68.00940704 -117.18141174]
[68.94380188 -102.21054077]
[70.06475067 -87.25248718]
[71.18570709 -72.29442596]
[72.30665588 -57.33637238]
[91.58172607 -47.95629120]
[101.63206482 -28.87956238]
[98.43138123 -7.42880964]
[83.07252502 8.06198025]
[86.77388763 22.59813881]
[90.47525024 37.13430023]
[103.38806915 48.94871902]
[98.39994049 66.62146759]
[102.46254730 81.06082916]
[115.04850769 88.23995209]
[118.97285461 102.18791962]
[111.97681427 114.87656403]
[116.03942108 129.31593323]
[120.10202789 143.75529480]
[133.60469055 151.52162170]
[137.51905823 166.22306824]
[130.03184509 179.04792786]
[134.09445190 193.48728943]
[138.15705872 207.92665100]
[142.21966553 222.36601257]
[146.28227234 236.80537415]
[155.22735596 240.35723877]
[161.39323425 247.56570435]
[163.45469666 256.68264771]
[161.06192017 265.57473755]
[154.89215088 272.22259521]
[157.86433411 286.92517090]
[160.83653259 301.62774658]
[163.80871582 316.33035278]
[166.78091431 331.03292847]
[171.59747314 338.92639160]
[169.63911438 346.13888550]
[172.24383545 360.91101074]
[186.95036316 364.99526978]
[198.42271423 375.06243896]
[204.38307190 389.11364746]
[203.64801025 404.35903931]
[196.36344910 417.77166748]
[183.97575378 426.68838501]
[168.94451904 429.33877563]
[154.25419617 425.19665527]
[142.82156372 415.08438110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[11 104]
[12 103]
[13 102]
[14 101]
[15 100]
[18 97]
[19 96]
[20 95]
[23 92]
[24 91]
[27 89]
[28 88]
[29 87]
[40 83]
[41 82]
[42 81]
[43 80]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
