%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGCCGCGUGCCCGGCCGCGCCCAGCAGGGUUUCCAGGCCUGAGGUGCCCGCCCUGGCCCCAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[101.51697540 119.39187622]
[88.08805084 119.85580444]
[74.87911987 126.96382904]
[61.67018890 134.07186890]
[48.46125412 141.17988586]
[35.41513824 148.58251953]
[22.53840637 156.27600098]
[9.66167450 163.96949768]
[6.04357004 179.35406494]
[-7.43714285 187.60305786]
[-22.78259659 183.82249451]
[-30.88860512 170.25532532]
[-26.94601631 154.95069885]
[-13.29390144 146.98858643]
[1.96818531 151.09275818]
[14.84491730 143.39927673]
[27.72164917 135.70578003]
[31.98488808 129.36526489]
[41.35322571 127.97096252]
[54.56215668 120.86293030]
[67.77108765 113.75489807]
[80.98002625 106.64686584]
[83.98886871 91.95173645]
[74.63652039 80.22426605]
[65.28417206 68.49679565]
[49.82926559 63.01245499]
[47.11787796 46.83900833]
[59.93924713 36.61430740]
[75.10385132 42.85664749]
[77.01164246 59.14444733]
[86.36399078 70.87191772]
[95.71633911 82.59938812]
[109.63806152 88.18379974]
[124.50231171 86.17029572]
[139.36656189 84.15679932]
[154.23080444 82.14330292]
[169.09504700 80.12979889]
[184.08538818 66.99132538]
[201.78057861 74.27388000]
[216.40451050 70.93606567]
[231.02842712 67.59825134]
[245.65234375 64.26043701]
[257.38479614 53.64630127]
[271.51467896 58.35752487]
[279.48709106 53.24374771]
[286.86929321 55.21366119]
[301.62823486 52.53530884]
[316.38717651 49.85695267]
[328.54025269 38.84629059]
[344.06735229 44.12274170]
[346.99554443 60.25834656]
[334.31253052 70.65418243]
[319.06552124 64.61589813]
[304.30657959 67.29425049]
[289.54763794 69.97260284]
[274.85250854 72.98144531]
[264.16604614 83.35684204]
[248.99015808 78.88435364]
[234.36624146 82.22216797]
[219.74232483 85.55998230]
[205.11839294 88.89779663]
[200.24942017 98.33302307]
[190.70668030 103.47762299]
[179.70330811 102.31266785]
[171.10855103 94.99404907]
[156.24429321 97.00754547]
[141.38005066 99.02104187]
[126.51580811 101.03454590]
[111.65155792 103.04804230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[6 17]
[7 16]
[8 15]
[23 32]
[24 31]
[25 30]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[39 61]
[40 60]
[41 59]
[42 58]
[44 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
