%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGGCGCCCGGCGGCCGCGCCCGCAGGCCCUGCCUCUGCUGGAACCUUCCCAGGCCCCUCCGACCUGAAAGCACGUCCACGGACGCC\
) } def
/len { sequence length } bind def

/coor [
[94.82480621 106.82367706]
[80.15258789 109.94235229]
[65.48037720 113.06102753]
[50.86482239 116.43528748]
[36.31038666 120.06411743]
[21.75595093 123.69294739]
[10.23752594 134.53898621]
[-3.98351407 130.11051941]
[-18.53795052 133.73934937]
[-33.09238434 137.36817932]
[-40.49754333 148.10241699]
[-52.85667801 150.73753357]
[-63.30581284 144.37625122]
[-77.97802734 147.49491882]
[-92.65023804 150.61360168]
[-107.32245636 153.73226929]
[-115.71880341 167.12170410]
[-131.14212036 170.57086182]
[-144.44203186 162.03341675]
[-147.72793579 146.57449341]
[-139.05035400 133.36558533]
[-123.55754852 130.24331665]
[-110.44113159 139.06005859]
[-95.76891327 135.94139099]
[-81.09670258 132.82270813]
[-66.42448425 129.70404053]
[-54.17401123 117.27038574]
[-36.72121429 122.81373596]
[-22.16677856 119.18491364]
[-7.61234236 115.55608368]
[2.86505270 104.96960449]
[18.12712288 109.13851166]
[32.68156052 105.50968170]
[47.23599625 101.88085175]
[53.09129333 97.10384369]
[62.36169815 98.38880920]
[77.03391266 95.27013397]
[91.70612335 92.15145874]
[105.07122803 85.34160614]
[116.21839905 75.30464172]
[127.36557007 65.26768494]
[138.51274109 55.23072433]
[145.78488159 42.11143112]
[148.38960266 27.33931351]
[150.99433899 12.56719780]
[144.88009644 -2.64950776]
[155.21255493 -15.38419819]
[171.36256409 -12.53651619]
[176.71636963 2.96408725]
[165.76644897 15.17191982]
[163.16172791 29.94403648]
[160.55700684 44.71615219]
[172.53652954 53.74337769]
[186.01844788 47.16781235]
[199.50035095 40.59224319]
[212.98226929 34.01667786]
[226.34736633 27.20681953]
[230.72782898 12.02172470]
[244.60296631 4.45494175]
[259.74090576 8.99570751]
[267.16055298 22.95006561]
[262.45999146 38.03914642]
[248.42797852 45.31085968]
[233.38943481 40.45103455]
[228.86372375 46.50267029]
[219.55783081 47.49858856]
[206.07592773 54.07415390]
[192.59400940 60.64972305]
[179.11210632 67.22528839]
[167.57106018 72.34923553]
[156.53872681 71.55696106]
[148.54969788 66.37789917]
[137.40252686 76.41485596]
[126.25535583 86.45181274]
[115.10818481 96.48877716]
[113.28014374 111.37696838]
[121.66803741 123.81253052]
[130.05592346 136.24809265]
[138.44381714 148.68365479]
[153.41244507 155.38233948]
[154.82615662 171.72042847]
[141.23065186 180.89071655]
[126.61181641 173.45959473]
[126.00826263 157.07154846]
[117.62036896 144.63598633]
[109.23247528 132.20042419]
[100.84458160 119.76486206]
[97.79588318 116.83454132]
[95.76973724 113.52753448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 34]
[5 33]
[6 32]
[8 30]
[9 29]
[10 28]
[13 26]
[14 25]
[15 24]
[16 23]
[39 75]
[40 74]
[41 73]
[42 72]
[43 52]
[44 51]
[45 50]
[53 69]
[54 68]
[55 67]
[56 66]
[57 64]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
