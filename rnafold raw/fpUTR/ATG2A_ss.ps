%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGCGCCUAGAGAAGCGGCGGGGCGAGCCGGGGGCUCUAGUGAACAGCGGAGCCGGACGGGGAUCGCCGGCGGGCGGCAAGCGGAGGCGGCCCAGGCCCGGCGGUCUCCGAG\
) } def
/len { sequence length } bind def

/coor [
[79.92031097 124.91703796]
[69.48750305 112.87059021]
[56.84877014 120.94910431]
[44.21003723 129.02763367]
[31.57130814 137.10614014]
[18.93257713 145.18466187]
[6.29384565 153.26318359]
[-6.12148952 161.68098450]
[-18.30432320 170.43191528]
[-30.48715591 179.18283081]
[-42.66999054 187.93374634]
[-49.36443710 202.26884460]
[-64.21528625 203.40971375]
[-64.16466522 218.92671204]
[-73.27165222 231.49023438]
[-88.03442383 236.26937866]
[-102.77639771 231.42645264]
[-111.82897186 218.82365417]
[-111.71125793 203.30702209]
[-102.46851349 190.84301758]
[-87.65476990 186.22431946]
[-72.96620178 191.22688293]
[-67.14315033 177.51771545]
[-51.42090607 175.75091553]
[-39.23807526 167.00000000]
[-27.05524063 158.24908447]
[-14.87240791 149.49815369]
[-13.21986485 144.88742065]
[-8.57693958 141.32518005]
[-1.78467393 140.62445068]
[10.85405731 132.54592896]
[23.49278831 124.46741486]
[36.13151932 116.38889313]
[48.77025223 108.31037903]
[61.40898132 100.23185730]
[64.23566437 85.50060272]
[55.48474121 73.31777191]
[46.73382568 61.13493729]
[37.98290634 48.95210266]
[29.23198700 36.76926804]
[20.48106766 24.58643723]
[12.82800579 19.35354614]
[11.66341686 11.95311165]
[3.24561071 -0.46222308]
[-12.17564201 -4.88540363]
[-18.19915009 -19.75473213]
[-10.20419502 -33.66373062]
[5.67617893 -35.94260788]
[17.25990677 -24.84320068]
[15.66094589 -8.88002872]
[24.07875252 3.53530598]
[32.66390228 15.83551788]
[41.41482162 28.01835060]
[50.16573715 40.20118332]
[58.91665649 52.38401794]
[67.66757202 64.56684875]
[76.41849518 76.74967957]
[91.52020264 69.43234253]
[107.54026794 70.62411499]
[120.20693207 79.29074097]
[126.49952698 92.50000000]
[141.49952698 92.50000000]
[156.49952698 92.50000000]
[171.49952698 92.50000000]
[186.49952698 92.50000000]
[201.49952698 92.50000000]
[216.49952698 92.50000000]
[231.49952698 92.50000000]
[246.49952698 92.50000000]
[261.49954224 92.50000000]
[276.49954224 92.50000000]
[291.49954224 92.50000000]
[306.49954224 92.50000000]
[321.49813843 92.29688263]
[336.47616577 91.48480225]
[351.42666626 90.26741791]
[366.37719727 89.05004120]
[381.32769775 87.83265686]
[394.45440674 79.00087738]
[407.76763916 85.67972565]
[422.71817017 84.46234894]
[430.67462158 71.14040375]
[444.95520020 65.07038879]
[460.06869507 68.58635712]
[470.20367432 80.33633423]
[471.46301270 95.80222321]
[463.36248779 109.03707123]
[449.01690674 114.95180511]
[433.94244385 111.27209473]
[423.93554688 99.41286469]
[408.98501587 100.63024139]
[396.92767334 109.37494659]
[382.54507446 102.78318024]
[367.59457397 104.00055695]
[352.64404297 105.21794128]
[337.69354248 106.43531799]
[333.90045166 109.53408813]
[328.08560181 110.19274139]
[321.90435791 107.29138184]
[315.21438599 110.66289520]
[306.49954224 107.50000000]
[291.49954224 107.50000000]
[276.49954224 107.50000000]
[261.49954224 107.50000000]
[246.49952698 107.50000000]
[231.49952698 107.50000000]
[216.49952698 107.50000000]
[201.49952698 107.50000000]
[186.49952698 107.50000000]
[171.49952698 107.50000000]
[156.49952698 107.50000000]
[141.49952698 107.50000000]
[126.49952698 107.50000000]
[120.58939362 119.93028259]
[109.03472137 128.36659241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[43 51]
[44 50]
[61 113]
[62 112]
[63 111]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[72 102]
[73 101]
[74 99]
[75 96]
[76 95]
[77 94]
[78 93]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
