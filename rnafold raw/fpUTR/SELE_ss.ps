%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUUCUUGGCUGACUUCACAUCAAAACUCCUAUACUGACCUGAGACAGAGGCAGCAGUGAUACCCACCUGAGAGAUCCUGUGUUUGAACAACUGCUUCCCAAAACGGAAAGUAUUUCAAGCCUAAACCUUUGGGUGAAAAGAACUCUUGAAGUC\
) } def
/len { sequence length } bind def

/coor [
[61.20761490 230.83961487]
[56.79985809 245.17738342]
[52.39210510 259.51516724]
[47.98435211 273.85293579]
[43.57659531 288.19070435]
[47.76629639 304.04562378]
[35.94129944 315.40789795]
[20.26615143 310.58901978]
[16.86609840 294.54620361]
[29.23882484 283.78295898]
[33.64657974 269.44519043]
[38.05433273 255.10740662]
[42.46208572 240.76963806]
[46.86984253 226.43186951]
[51.13483810 212.05097961]
[55.25665283 197.62840271]
[59.37847137 183.20582581]
[63.50028610 168.78326416]
[67.62210083 154.36068726]
[71.74391937 139.93811035]
[75.86573792 125.51554108]
[65.33395386 136.19642639]
[54.80216980 146.87733459]
[44.27038193 157.55822754]
[36.97419739 170.66416931]
[24.88502884 179.54403687]
[10.19678783 182.58633423]
[-4.42494488 179.23895264]
[-16.32666016 170.10937500]
[-23.34846497 156.85440063]
[-24.21606445 141.87951660]
[-18.77200890 127.90231323]
[-8.00427055 117.45933533]
[6.13305330 112.44573975]
[21.07549095 113.77175140]
[35.82811356 111.05879974]
[50.58073807 108.34585571]
[65.33336639 105.63290405]
[51.08605957 100.94095612]
[36.83876038 96.24900818]
[27.65283203 96.53307343]
[22.35646629 91.31954956]
[8.20526695 86.34526062]
[-5.94593287 81.37097168]
[-19.30819130 89.49402618]
[-34.75776672 87.07646942]
[-44.99984360 75.25978851]
[-45.19842529 59.62346649]
[-35.25975037 47.55049133]
[-19.87655067 44.74135590]
[-6.31230927 52.52244568]
[-0.97164375 67.21977234]
[13.17955589 72.19406128]
[27.33075523 77.16835022]
[41.53070831 82.00170898]
[55.77801132 86.69365692]
[70.02531433 91.38560486]
[91.34419250 74.61341095]
[113.29743958 81.90520477]
[125.70700073 73.47888947]
[138.11656189 65.05257416]
[135.10990906 50.17857742]
[138.01911926 35.32666016]
[146.37033081 22.75403023]
[158.86499023 14.35932827]
[173.58175659 11.39592743]
[188.27186584 14.28487682]
[200.70278931 22.55538940]
[213.11235046 14.12907219]
[225.52191162 5.70275640]
[237.93147278 -2.72356009]
[250.34103394 -11.14987659]
[255.72006226 -18.60158730]
[263.08215332 -19.61748695]
[275.65679932 -27.79540825]
[288.23141479 -35.97333145]
[300.80606079 -44.15125275]
[298.94638062 -59.26094818]
[303.81158447 -73.62119293]
[314.38595581 -84.40091705]
[328.53393555 -89.49952698]
[343.43115234 -87.95613098]
[356.12838745 -80.13013458]
[361.65451050 -87.47341919]
[369.03533936 -88.34274292]
[381.77008057 -96.26904297]
[394.50482178 -104.19533539]
[407.23959351 -112.12162781]
[419.97433472 -120.04792023]
[432.70907593 -127.97421265]
[445.44381714 -135.90051270]
[449.13876343 -151.03276062]
[462.16653442 -158.88973999]
[476.57006836 -155.27392578]
[489.30480957 -163.20021057]
[502.03955078 -171.12651062]
[505.53118896 -176.84458923]
[510.63278198 -179.50126648]
[515.44195557 -179.10310364]
[528.48175049 -186.51683044]
[541.52154541 -193.93057251]
[554.56134033 -201.34431458]
[558.51068115 -216.64718628]
[572.16632080 -224.60327148]
[587.42663574 -220.49234009]
[595.23785400 -206.75335693]
[590.96582031 -191.53739929]
[577.14501953 -183.87184143]
[561.97509766 -188.30450439]
[548.93530273 -180.89076233]
[535.89550781 -173.47703552]
[522.85565186 -166.06329346]
[509.96585083 -158.39175415]
[497.23110962 -150.46546936]
[484.49633789 -142.53916931]
[481.38079834 -128.01922607]
[468.57885742 -119.79942322]
[453.37011719 -123.16575623]
[440.63537598 -115.23946381]
[427.90063477 -107.31317139]
[415.16586304 -99.38687897]
[402.43112183 -91.46058655]
[389.69638062 -83.53428650]
[376.96160889 -75.60799408]
[364.30630493 -67.55548859]
[366.31088257 -52.77553177]
[361.68048096 -38.53233337]
[351.28256226 -27.66751289]
[337.14080811 -22.37308311]
[322.04135132 -23.74932480]
[308.98397827 -31.57661057]
[296.40936279 -23.39868927]
[283.83471680 -15.22076702]
[271.26007080 -7.04284525]
[258.76736450 1.25968385]
[246.35778809 9.68599987]
[233.94822693 18.11231613]
[221.53866577 26.53863335]
[209.12910461 34.96495056]
[212.23109436 49.56998062]
[209.49766541 64.28982544]
[201.31475830 76.87572479]
[188.90318298 85.39279938]
[174.13667297 88.51751709]
[159.25895691 85.74324799]
[146.54287720 77.46213531]
[134.13331604 85.88845062]
[121.72375488 94.31476593]
[122.74625397 111.22736359]
[110.95469666 126.06893158]
[90.28830719 129.63735962]
[86.16649628 144.05993652]
[82.04467773 158.48249817]
[77.92285919 172.90507507]
[73.80104065 187.32765198]
[69.67922974 201.75022888]
[65.55741119 216.17279053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[15 157]
[16 156]
[17 155]
[18 154]
[19 153]
[20 152]
[21 151]
[38 57]
[39 56]
[40 55]
[42 54]
[43 53]
[44 52]
[59 148]
[60 147]
[61 146]
[68 139]
[69 138]
[70 137]
[71 136]
[72 135]
[74 134]
[75 133]
[76 132]
[77 131]
[83 125]
[85 124]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
[91 118]
[94 115]
[95 114]
[96 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
