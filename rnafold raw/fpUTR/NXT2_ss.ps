%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGAGGUUAACGGAAAACGGAAGCUGGCUGGCUGAGAAGAAGCUUCCGUUAGUCCUACCUUGAAGAGAAAAGAGCCAGAUAAAGAGAAAGAUUAAAAGU\
) } def
/len { sequence length } bind def

/coor [
[178.62973022 191.55578613]
[182.01826477 176.91275024]
[187.60244751 162.95863342]
[174.68899536 155.32695007]
[161.77552795 147.69526672]
[154.28872681 146.99000549]
[148.58969116 139.62879944]
[135.91497803 131.60685730]
[123.24026489 123.58491516]
[110.56555176 115.56297302]
[102.13683319 118.68878937]
[93.22007751 117.54621124]
[85.85180664 112.39619446]
[81.71489716 104.41497040]
[81.75418091 95.42539215]
[69.86549377 86.27885437]
[57.97681046 77.13231659]
[39.74309158 75.21075439]
[33.53062439 58.87653351]
[21.36853218 50.09680939]
[9.20644188 41.31708527]
[-2.95564818 32.53736115]
[-15.11773872 23.75763702]
[-27.27982903 14.97791386]
[-39.44191742 6.19818926]
[-51.60401154 -2.58153486]
[-63.76610184 -11.36125946]
[-75.92819214 -20.14098358]
[-88.87545013 -18.87069321]
[-98.85406494 -26.57431412]
[-100.77454376 -38.62542725]
[-112.66322327 -47.77196503]
[-127.50824738 -43.25478363]
[-142.16221619 -48.35780334]
[-150.99038696 -61.11880112]
[-150.59814453 -76.63092041]
[-141.13630676 -88.92942810]
[-126.24314880 -93.28530121]
[-111.64540100 -88.02361298]
[-102.95618439 -75.16759491]
[-103.51668549 -59.66064835]
[-91.62800598 -50.51411057]
[-74.19967651 -49.22765350]
[-67.14846802 -32.30307388]
[-54.98637772 -23.52334976]
[-42.82428360 -14.74362564]
[-30.66219521 -5.96390104]
[-18.50010490 2.81582308]
[-6.33801413 11.59554768]
[5.82407618 20.37527084]
[17.98616600 29.15499496]
[30.14825630 37.93471909]
[42.31034851 46.71444321]
[54.40780258 45.11160278]
[64.64138031 52.47315598]
[67.12334442 65.24362946]
[79.01203156 74.39016724]
[90.90071869 83.53670502]
[110.77622986 84.58216095]
[118.58749390 102.88825989]
[131.26220703 110.91020203]
[143.93692017 118.93214417]
[156.61163330 126.95408630]
[169.40721130 134.78181458]
[182.32067871 142.41349792]
[195.23413086 150.04518127]
[204.76492310 138.42346191]
[215.95814514 128.39289856]
[228.55140686 120.18862152]
[242.24951172 114.00294495]
[256.73135376 109.98088074]
[271.65744019 108.21669769]
[286.67788696 108.75177002]
[301.44061279 111.57353973]
[315.59954834 116.61585999]
[328.82278442 123.76054382]
[340.80035400 132.84010315]
[351.25146484 143.64169312]
[359.93118286 155.91210938]
[366.63598633 169.36372375]
[371.20870972 183.68121338]
[373.54220581 198.52896118]
[373.58172607 213.55888367]
[371.32638550 228.41868591]
[366.82901001 242.76004028]
[360.19503784 256.24673462]
[351.58001709 268.56265259]
[341.18585205 279.41903687]
[329.25619507 288.56149292]
[316.07070923 295.77560425]
[301.93850708 300.89233398]
[287.19082642 303.79171753]
[272.17340088 304.40579224]
[257.23822021 302.72012329]
[242.73544312 298.77429199]
[229.00498962 292.66076660]
[216.36875916 284.52282715]
[205.12292480 274.55126953]
[195.53114319 262.97985840]
[187.81822205 250.07978821]
[182.16499329 236.15350342]
[178.70394897 221.52745056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[7 63]
[8 62]
[9 61]
[10 60]
[15 58]
[16 57]
[17 56]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[31 42]
[32 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
