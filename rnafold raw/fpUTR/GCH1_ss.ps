%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUGGCCGCUCCCGGCUCGGAGUGUGAUCUAAGCAGGUUGCGUACCUUCCUCAGGUGACUCCGGCCACAGCCCAUUGUCCGCGGCCACCGGCGGAGUUUAGCCGCAGACCUCGAAGCGCCCCGGGGUCCUUCCCGAACGGCAGCGGCUGCGGCGGGUCC\
) } def
/len { sequence length } bind def

/coor [
[265.94662476 150.48989868]
[251.42076111 146.74829102]
[237.16580200 151.06629944]
[225.73185730 140.13125610]
[211.20600891 136.38963318]
[196.68016052 132.64801025]
[182.15431213 128.90640259]
[167.62846375 125.16477966]
[153.10261536 121.42316437]
[138.57676697 117.68154907]
[124.05091095 113.93992615]
[114.11443329 125.38353729]
[99.07440186 130.27471924]
[83.02042389 126.57222748]
[70.68903351 114.67417145]
[66.06871796 97.48858643]
[51.09409714 96.61640930]
[36.11947250 95.74423981]
[27.32063293 98.37887573]
[20.86379814 94.70718384]
[5.90890360 93.54479980]
[-9.04599094 92.38240814]
[-24.00088501 91.22002411]
[-38.95578003 90.05764008]
[-53.91067123 88.89525604]
[-73.44243622 128.01577759]
[-88.03810883 131.47502136]
[-102.63378143 134.93424988]
[-117.22945404 138.39349365]
[-131.82511902 141.85272217]
[-146.42079163 145.31196594]
[-161.01647949 148.77120972]
[-172.56697083 160.41242981]
[-188.35264587 155.96894836]
[-192.13455200 140.01184082]
[-180.02218628 128.95640564]
[-164.47570801 134.17553711]
[-149.88003540 130.71629333]
[-135.28436279 127.25705719]
[-120.68869019 123.79782104]
[-106.09301758 120.33857727]
[-91.49734497 116.87934113]
[-76.90167236 113.42010498]
[-76.10324860 105.96272278]
[-73.70796204 83.59058380]
[-87.24047852 77.11978912]
[-100.77298737 70.64900208]
[-114.30549622 64.17820740]
[-127.83801270 57.70742035]
[-143.38381958 61.67068100]
[-156.08758545 51.87303925]
[-156.20407104 35.83041000]
[-143.64392090 25.84932327]
[-128.04220581 29.58641434]
[-121.36721802 44.17490768]
[-107.83470917 50.64569855]
[-94.30220032 57.11648941]
[-80.76968384 63.58728027]
[-67.23717499 70.05807495]
[-52.74828720 73.94036102]
[-37.79339218 75.10274506]
[-22.83849907 76.26512909]
[-7.88360453 77.42752075]
[7.07129002 78.58990479]
[22.02618408 79.75228882]
[36.99164581 80.76961517]
[51.96626663 81.64179230]
[66.94088745 82.51396179]
[76.47083282 70.93034363]
[72.72921753 56.40449905]
[68.98760223 41.87864685]
[55.25224686 34.06100464]
[51.14841461 18.79882622]
[59.11083984 5.14689016]
[74.41555786 1.20465016]
[87.98254395 9.31096649]
[91.76275635 24.65650558]
[83.51345062 38.13703156]
[87.25506592 52.66287994]
[90.99668884 67.18872833]
[110.59537506 69.85909271]
[124.19297791 82.47441864]
[127.79252625 99.41407776]
[142.31837463 103.15569305]
[156.84422302 106.89731598]
[171.37007141 110.63893127]
[185.89591980 114.38054657]
[200.42176819 118.12216187]
[214.94763184 121.86378479]
[229.47348022 125.60540009]
[244.76742554 121.55500793]
[255.16238403 132.22244263]
[269.68823242 135.96405029]
[284.98217773 131.91366577]
[295.37713623 142.58108521]
[309.90298462 146.32270813]
[324.42883301 150.06431580]
[339.72277832 146.01393127]
[350.11776733 156.68136597]
[364.64361572 160.42297363]
[371.18243408 159.00360107]
[376.62106323 160.85499573]
[379.65460205 164.60157776]
[394.02444458 168.90362549]
[408.39428711 173.20567322]
[422.76412964 177.50772095]
[437.13397217 181.80976868]
[451.50381470 186.11181641]
[465.87365723 190.41386414]
[475.04290771 189.87939453]
[480.47894287 194.94116211]
[494.76266479 199.52105713]
[490.59890747 185.11053467]
[499.10647583 172.75651550]
[514.05432129 171.50714111]
[524.49468994 182.27743530]
[522.78094482 197.17922974]
[510.16894531 205.29826355]
[523.94219971 211.23945618]
[537.77239990 217.04682922]
[551.65826416 222.71983337]
[565.54412842 228.39282227]
[585.33288574 224.72334290]
[596.58587646 240.41256714]
[610.68121338 245.54286194]
[624.77661133 250.67317200]
[638.87200928 255.80346680]
[652.96740723 260.93377686]
[669.01464844 257.55477905]
[679.76165771 269.94161987]
[674.15283203 285.35177612]
[657.95800781 287.93258667]
[647.83709717 275.02917480]
[633.74169922 269.89886475]
[619.64630127 264.76855469]
[605.55096436 259.63824463]
[591.45556641 254.50794983]
[582.56445312 259.66482544]
[572.08471680 259.03692627]
[563.52099609 252.59074402]
[559.87109375 242.27868652]
[545.98529053 236.60568237]
[532.09942627 230.93269348]
[524.68151855 231.31600952]
[518.00097656 225.01269531]
[504.22775269 219.07150269]
[490.18276978 213.80477905]
[475.89904785 209.22488403]
[461.57159424 204.78370667]
[447.20175171 200.48165894]
[432.83190918 196.17961121]
[418.46206665 191.87756348]
[404.09222412 187.57551575]
[389.72238159 183.27346802]
[375.35253906 178.97142029]
[360.90197754 174.94882202]
[346.37612915 171.20721436]
[332.12118530 175.52522278]
[320.68722534 164.59017944]
[306.16137695 160.84855652]
[291.63552856 157.10693359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[11 83]
[16 68]
[17 67]
[18 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[69 80]
[70 79]
[71 78]
[95 161]
[96 160]
[97 159]
[99 157]
[100 156]
[103 155]
[104 154]
[105 153]
[106 152]
[107 151]
[108 150]
[109 149]
[111 148]
[112 147]
[118 146]
[119 145]
[120 143]
[121 142]
[122 141]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
