%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAGUGUCUCCUGUACCAGCAGAAGCUCCAGAACUCUCACCCGAUUGCCUGCCUCUGCUGCGUCUUUGCCCACUGAACAGCC\
) } def
/len { sequence length } bind def

/coor [
[94.79988098 280.14440918]
[94.42711639 264.84344482]
[101.21815491 251.12702942]
[113.61248016 242.14707947]
[111.40295410 227.31069946]
[109.19342804 212.47433472]
[106.98390198 197.63795471]
[104.77437592 182.80157471]
[90.26931763 179.26142883]
[78.19200134 170.41360474]
[70.40122223 157.58128357]
[68.11078644 142.70373535]
[71.70050812 128.04331970]
[80.65360260 115.84147644]
[93.63088226 107.97598267]
[89.33097076 100.90946960]
[91.62438202 92.55157471]
[89.96459198 77.64369202]
[88.02960205 62.76902008]
[85.82007599 47.93264771]
[83.61054993 33.09627151]
[81.40102386 18.25989723]
[79.19149780 3.42352366]
[76.98197174 -11.41285038]
[74.77244568 -26.24922371]
[65.08676147 -38.75914001]
[70.86490631 -52.48729706]
[68.65538788 -67.32366943]
[53.64563751 -68.72757721]
[39.40825653 -73.68341827]
[26.77098083 -81.90307617]
[16.46852684 -92.90866089]
[9.09986401 -106.06032562]
[5.09339952 -120.59344482]
[4.68206215 -135.66308594]
[7.88976669 -150.39312744]
[14.53002167 -163.92718506]
[24.21677208 -175.47837830]
[36.38684082 -184.37516785]
[50.33267593 -190.10029602]
[65.24349213 -192.32090759]
[80.25238037 -190.90789795]
[94.48675537 -185.94343567]
[107.11904907 -177.71611023]
[117.41482544 -166.70428467]
[124.77551270 -153.54815674]
[128.77316284 -139.01260376]
[129.17536926 -123.94271851]
[125.95873260 -109.21462250]
[119.31027222 -95.68460083]
[109.61652374 -84.13927460]
[97.44106293 -75.24986267]
[83.49176025 -69.53319550]
[85.70128632 -54.69682312]
[95.22892761 -43.24810028]
[89.60881805 -28.45874977]
[91.81834412 -13.62237549]
[94.02787018 1.21399832]
[96.23739624 16.05037308]
[98.44692230 30.88674736]
[100.65644836 45.72312164]
[102.86597443 60.55949402]
[107.06649780 66.86187744]
[104.87247467 75.98390198]
[106.53226471 90.89178467]
[108.46725464 105.76645660]
[123.17330170 109.50917816]
[135.29336548 118.57267761]
[142.99919128 131.55088806]
[145.14332581 146.45022583]
[141.42984009 160.99583435]
[132.45478821 172.97889709]
[119.61074829 180.59205627]
[121.82027435 195.42842102]
[124.02980042 210.26480103]
[126.23932648 225.10118103]
[128.44885254 239.93754578]
[142.92198181 244.91622925]
[153.41514587 256.05859375]
[157.51710510 270.80416870]
[154.28524780 285.76458740]
[144.46224976 297.50201416]
[130.30534363 303.31927490]
[115.06768799 301.87963867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[15 66]
[17 65]
[18 64]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[27 54]
[28 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
