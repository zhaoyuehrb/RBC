%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUCUUCCGGUGGCUGGUCUCCGGCGGCCCCGUCCCCGACUGGGCCCCGUGCCCCCCCGCCCCCGCGGCCCCCCGCCGCCGGGCCAGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[45.97244644 441.22811890]
[33.10676956 449.32394409]
[18.12144661 451.87512207]
[3.30163002 448.49261475]
[-9.09276485 439.69219971]
[-17.17168236 426.81588745]
[-19.70314789 411.82720947]
[-16.30112839 397.01184082]
[-7.48441076 384.62905884]
[5.40252209 376.56707764]
[20.39450645 374.05532837]
[23.73232079 359.43139648]
[27.07013321 344.80749512]
[30.40794754 330.18356323]
[33.74576187 315.55966187]
[37.08357620 300.93572998]
[40.42139053 286.31182861]
[43.75920486 271.68789673]
[47.09701920 257.06396484]
[50.43483353 242.44006348]
[48.58903885 237.84880066]
[49.74530792 232.04093933]
[54.48355103 227.00053406]
[58.75146484 212.62051392]
[63.01937866 198.24049377]
[67.28729248 183.86048889]
[71.55520630 169.48046875]
[75.82312012 155.10044861]
[80.09103394 140.72042847]
[84.35894775 126.34040833]
[75.09695435 117.84091187]
[70.02835083 106.33720398]
[70.00663757 93.76638031]
[75.03546143 82.24523163]
[65.31204224 70.82354736]
[55.58861160 59.40185547]
[40.71727753 51.26062012]
[44.42355347 34.71674347]
[61.34688950 33.69837570]
[67.01029968 49.67842865]
[76.73372650 61.10011673]
[86.45715332 72.52180481]
[98.52749634 69.40112305]
[110.84172821 71.34835815]
[119.42347717 59.04577255]
[128.00521851 46.74318695]
[136.58697510 34.44060516]
[145.16873169 22.13801956]
[146.71810913 6.39286375]
[160.34552002 0.38094667]
[168.92726135 -11.92163754]
[169.54824829 -31.94438744]
[187.11184692 -39.76012039]
[194.88774109 -52.58726120]
[190.88150024 -67.87534332]
[198.93098450 -81.47613525]
[214.26057434 -85.32051849]
[227.77549744 -77.12769318]
[231.45758057 -61.75831604]
[223.12232971 -48.33076477]
[207.71488953 -44.81137085]
[199.93899536 -31.98423004]
[203.29837036 -22.09204102]
[200.50117493 -11.79626465]
[192.26243591 -4.67337704]
[181.22985840 -3.33988714]
[172.64810181 8.96269703]
[171.71253967 23.82789040]
[157.47131348 30.71977043]
[148.88955688 43.02235413]
[140.30781555 55.32493973]
[131.72605896 67.62752533]
[123.14431000 79.93010712]
[130.36460876 95.94409180]
[127.60054016 113.29171753]
[115.76098633 126.26882172]
[98.73896790 130.60832214]
[94.47105408 144.98834229]
[90.20314026 159.36836243]
[85.93522644 173.74838257]
[81.66731262 188.12840271]
[77.39939880 202.50840759]
[73.13148499 216.88842773]
[68.86357117 231.26844788]
[65.05875397 245.77787781]
[61.72093582 260.40179443]
[58.38312149 275.02569580]
[55.04530716 289.64962769]
[51.70749283 304.27355957]
[48.36968231 318.89746094]
[45.03186798 333.52139282]
[41.69405365 348.14529419]
[38.35623932 362.76922607]
[35.01842499 377.39312744]
[47.43592834 386.16091919]
[55.54869461 399.01593018]
[58.11958694 413.99789429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[34 42]
[35 41]
[36 40]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[50 67]
[51 66]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
