%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACUUUUAACUCACAGUAAAAGCAAAAGCAACAGCUCAAGCAGCCUCCUUGGAGAAAACCUGAAAAUUCAACUUGUUCAAGAGAAGGUCUUGUACGUGCCUAAGUUCUAGAGCCUCCUGACGUGAGC\
) } def
/len { sequence length } bind def

/coor [
[106.39766693 222.68869019]
[102.45334625 237.36897278]
[93.18740845 249.41931152]
[80.01283264 257.00213623]
[64.93865204 258.96109009]
[50.26356888 254.99745178]
[38.22542572 245.71566772]
[30.65995026 232.53112793]
[28.72082710 217.45437622]
[32.70375443 202.78453064]
[42.00136566 190.75860596]
[55.19584656 183.21047974]
[70.27513123 181.29118347]
[74.18636322 166.81008911]
[78.09759521 152.32899475]
[82.00882721 137.84788513]
[85.92006683 123.36679077]
[81.61415100 117.22601318]
[71.23910522 128.05923462]
[60.86407089 138.89244080]
[54.93889618 152.67259216]
[41.47631073 159.28764343]
[26.94740105 155.55792236]
[18.33579826 143.27621460]
[19.78085327 128.34599304]
[30.58797264 117.94377136]
[45.56171799 117.06938171]
[59.28201675 111.00692749]
[73.00231934 104.94447327]
[68.69640350 98.80369568]
[53.74921036 97.54614258]
[38.80202103 96.28858185]
[24.20089531 103.75445557]
[10.58361912 94.61651611]
[11.95847702 78.27510834]
[26.91113281 71.54085541]
[40.05957794 81.34139252]
[55.00676727 82.59894562]
[69.95396423 83.85650635]
[81.47027588 74.24534607]
[82.90696716 59.31430435]
[84.34365845 44.38326645]
[85.78034973 29.45222664]
[83.33135986 23.13768578]
[84.35826874 17.42040634]
[87.66072083 13.84571838]
[89.81163025 -0.99926740]
[91.96253204 -15.84425354]
[94.11344147 -30.68923950]
[96.08618927 -45.55894852]
[97.70181274 -60.47168732]
[99.13850403 -75.40272522]
[100.57519531 -90.33376312]
[102.01188660 -105.26480103]
[103.44857788 -120.19583893]
[104.88526917 -135.12687683]
[98.50531006 -149.60467529]
[107.42605591 -161.53236389]
[108.86274719 -176.46340942]
[99.57535553 -184.07302856]
[95.20310211 -195.12590027]
[96.73999786 -206.79083252]
[103.68222809 -216.14053345]
[114.18447876 -220.88626099]
[116.33538055 -235.73124695]
[118.48628998 -250.57623291]
[111.90870667 -265.59844971]
[121.84614563 -278.64373779]
[138.07582092 -276.29220581]
[143.90203857 -260.96292114]
[133.33126831 -248.42532349]
[131.18037415 -233.58033752]
[129.02946472 -218.73535156]
[140.85125732 -204.85336304]
[138.83770752 -186.41270447]
[123.79378510 -175.02671814]
[122.35709381 -160.09567261]
[128.83981323 -146.68583679]
[119.81630707 -133.69018555]
[118.37961578 -118.75914764]
[116.94292450 -103.82810974]
[115.50623322 -88.89707184]
[114.06954193 -73.96603394]
[112.63285065 -59.03499603]
[115.14864349 -52.00588226]
[110.97848511 -43.76463318]
[113.32500458 -36.67721176]
[108.95842743 -28.53833389]
[106.80751801 -13.69334698]
[104.65661621 1.15163863]
[102.50570679 15.99662399]
[100.71139526 30.88891792]
[99.27470398 45.81995773]
[97.83800507 60.75099564]
[96.40131378 75.68203735]
[107.86339569 74.07950592]
[119.86545563 78.06825256]
[129.64445496 87.69881439]
[134.55949402 101.66451263]
[143.73031616 102.76200104]
[148.18609619 108.75230408]
[161.40960693 115.83316040]
[174.71708679 122.75495911]
[188.10658264 129.51669312]
[201.49609375 136.27842712]
[217.12393188 132.65206909]
[229.61299133 142.72196960]
[229.38275146 158.76336670]
[216.60981750 168.47067261]
[201.09251404 164.39727783]
[194.73435974 149.66793823]
[181.34484863 142.90620422]
[167.95533752 136.14447021]
[160.49250793 135.93537903]
[154.32875061 129.05668640]
[141.10523987 121.97581482]
[127.79776001 115.05401611]
[120.94861603 118.11002350]
[134.26799011 125.00888062]
[137.17889404 139.72372437]
[127.48939514 151.17420959]
[112.49574280 150.73806763]
[103.48821259 138.74372864]
[107.25031281 124.22202301]
[100.40116119 127.27802277]
[96.48992920 141.75912476]
[92.57869720 156.24021912]
[88.66746521 170.72132874]
[84.75622559 185.20242310]
[96.81874847 194.45249939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 129]
[14 128]
[15 127]
[16 126]
[17 125]
[30 39]
[31 38]
[32 37]
[40 95]
[41 94]
[42 93]
[43 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 86]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[58 77]
[59 76]
[64 73]
[65 72]
[66 71]
[99 117]
[101 116]
[102 115]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
