%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUUUUCUGGGAUGGGAACCACGCCGCUUCCCAGUCUCUGUGCGAGGCGUGAAGCGCGGACCUUUCAACAAGGGCUUUAUUAAUUCUCACGCUGCGGCCCUGGAAAGCG\
) } def
/len { sequence length } bind def

/coor [
[90.58078003 279.14202881]
[76.57451630 271.31872559]
[74.10052490 255.46757507]
[85.05664062 243.74822998]
[85.89768982 228.77182007]
[86.73874664 213.79542542]
[87.57980347 198.81901550]
[88.42086029 183.84262085]
[89.26191711 168.86621094]
[90.10297394 153.88981628]
[90.94403076 138.91340637]
[91.78508759 123.93701172]
[92.62614441 108.96060944]
[91.73220062 108.94007111]
[90.81730652 108.84477997]
[76.02923584 111.35737610]
[61.24117279 113.86996460]
[46.45310974 116.38256073]
[31.66504288 118.89515686]
[16.87697792 121.40774536]
[4.56783390 131.34733582]
[-9.27566051 125.85125732]
[-19.69462395 138.05062866]
[-35.72310257 137.36695862]
[-45.06542206 124.32469940]
[-40.55495071 108.92874908]
[-25.65173912 102.98957062]
[-11.78825378 111.06319427]
[-0.53685153 101.30331421]
[14.36438465 106.61968231]
[29.15245056 104.10708618]
[43.94051361 101.59449768]
[58.72858047 99.08190155]
[73.51664734 96.56930542]
[88.30471039 94.05671692]
[101.22440338 86.43558502]
[110.57674408 74.70811462]
[119.92909241 62.98064041]
[122.48409271 47.36710358]
[136.46868896 42.24065018]
[139.02368164 26.62711143]
[153.00827026 21.50065804]
[162.36062622 9.77318573]
[171.71296692 -1.95428634]
[174.26797485 -17.56782341]
[188.25256348 -22.69427681]
[197.60490417 -34.42174911]
[206.95726013 -46.14922333]
[216.30960083 -57.87669373]
[217.96235657 -79.14479828]
[237.21115112 -86.36476898]
[245.54470825 -98.83681488]
[253.87826538 -111.30886078]
[262.21182251 -123.78090668]
[270.54537964 -136.25294495]
[278.87890625 -148.72499084]
[287.21246338 -161.19703674]
[288.44610596 -176.97007751]
[301.95034790 -183.25379944]
[293.47607422 -195.87344360]
[290.48110962 -210.77641296]
[293.42214966 -225.69012451]
[301.85070801 -238.34033203]
[314.48147583 -246.79798889]
[329.38836670 -249.77334595]
[344.29818726 -246.81269836]
[356.93731689 -238.36750793]
[365.37835693 -225.72561646]
[368.33410645 -210.81481934]
[365.35382080 -195.90890503]
[356.89202881 -183.28089905]
[344.23904419 -174.85650635]
[329.32437134 -171.92037964]
[314.42236328 -174.92024231]
[313.78482056 -160.03929138]
[299.68450928 -152.86347961]
[291.35095215 -140.39143372]
[283.01742554 -127.91939545]
[274.68386841 -115.44734955]
[266.35031128 -102.97530365]
[258.01675415 -90.50325775]
[249.68319702 -78.03121948]
[252.88279724 -69.48121643]
[251.68722534 -60.29056168]
[246.24594116 -52.61682129]
[237.72015381 -48.32262802]
[228.03707886 -48.52434540]
[218.68472290 -36.79687500]
[209.33238220 -25.06940269]
[199.98002625 -13.34193039]
[198.09397888 1.43277931]
[183.44044495 7.39806080]
[174.08808899 19.12553215]
[164.73574829 30.85300446]
[162.84968567 45.62771606]
[148.19615173 51.59299469]
[146.31010437 66.36770630]
[131.65657043 72.33298492]
[122.30422211 84.06046295]
[112.95187378 95.78793335]
[107.60254669 109.80166626]
[106.76148987 124.77806854]
[105.92043304 139.75447083]
[105.07937622 154.73086548]
[104.23831940 169.70727539]
[103.39726257 184.68367004]
[102.55620575 199.66007996]
[101.71514893 214.63647461]
[100.87409210 229.61288452]
[100.03303528 244.58927917]
[109.60811615 257.46163940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 110]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[22 28]
[36 100]
[37 99]
[38 98]
[40 96]
[42 94]
[43 93]
[44 92]
[46 90]
[47 89]
[48 88]
[49 87]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[59 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
