%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACCCAGGAGAUGAUGGAGAGGCUGAUCAGGCCUCCUGGAAAGGGAGGAAGAGGGCCCUAGUUGGAGAGAUCCAUCAGCAGAAGCCAGGGAGGAGAUACAGACCCUUGCUCCCUGAUGCUCCUCAGGGCUAGC\
) } def
/len { sequence length } bind def

/coor [
[89.25228119 286.55776978]
[77.80748749 276.39532471]
[72.40719604 262.07418823]
[74.29235840 246.88520813]
[83.02976990 234.31874084]
[96.61164856 227.26246643]
[96.61164856 212.26246643]
[96.61164856 197.26246643]
[96.26770782 182.26640320]
[95.58000946 167.28218079]
[94.89231110 152.29794312]
[94.20461273 137.31372070]
[93.51691437 122.32949066]
[71.84767151 99.33290863]
[92.29417419 67.84147644]
[79.97955322 59.27700806]
[67.66493225 50.71253967]
[55.35031509 42.14807129]
[43.03569412 33.58359909]
[30.72107506 25.01913071]
[18.40645409 16.45466232]
[3.56038094 23.63852310]
[-12.79113483 22.38818359]
[-26.21820450 13.13678551]
[-33.13072586 -1.52774084]
[-31.73808670 -17.58594894]
[-44.24584579 -25.86580086]
[-56.75360489 -34.14565277]
[-69.26136780 -42.42550278]
[-81.76912689 -50.70535660]
[-97.54732513 -51.87116241]
[-103.88905334 -65.34824371]
[-116.39681244 -73.62808990]
[-128.90457153 -81.90794373]
[-142.11816406 -89.00731659]
[-155.92648315 -94.86652374]
[-169.73480225 -100.72573853]
[-183.54312134 -106.58494568]
[-197.35144043 -112.44415283]
[-211.15975952 -118.30335999]
[-226.51280212 -113.64892578]
[-239.64196777 -122.86871338]
[-240.47569275 -138.89009094]
[-228.37440491 -149.42282104]
[-212.62118530 -146.38710022]
[-205.30055237 -132.11167908]
[-191.49223328 -126.25247192]
[-177.68391418 -120.39326477]
[-163.87559509 -114.53405762]
[-150.06727600 -108.67484283]
[-136.25895691 -102.81563568]
[-142.13220215 -116.61798859]
[-138.94338989 -131.27511597]
[-127.86672211 -141.38983154]
[-112.98095703 -143.23759460]
[-99.76749420 -136.13800049]
[-93.09190369 -122.70532990]
[-95.41235352 -107.88590240]
[-105.87437439 -97.13666534]
[-120.62471771 -94.41570282]
[-108.11695862 -86.13585663]
[-95.60919952 -77.85600281]
[-80.72564697 -77.28242493]
[-73.48927307 -63.21311569]
[-60.98151398 -54.93326569]
[-48.47375488 -46.65341187]
[-35.96599579 -38.37356186]
[-23.45823479 -30.09370995]
[-11.61908054 -36.99533463]
[2.10607195 -38.10924530]
[15.02710629 -33.15960312]
[24.58664322 -23.06467819]
[28.86618042 -9.76704979]
[26.97092247 4.14004230]
[39.28554535 12.70451164]
[51.60016251 21.26898003]
[63.91478348 29.83345032]
[76.22940063 38.39791870]
[88.54402161 46.96238708]
[100.85864258 55.52685547]
[115.76015472 53.81077194]
[125.80563354 42.67127609]
[128.69642639 26.52892876]
[144.21127319 21.21652603]
[156.38983154 32.19900894]
[152.70382690 48.17854309]
[136.94512939 52.71675110]
[126.89965057 63.85625076]
[132.75886536 77.66456604]
[147.74998474 78.18041992]
[162.74111938 78.69627380]
[177.73223877 79.21212769]
[192.72337341 79.72798157]
[207.71449280 80.24383545]
[222.70562744 80.75968933]
[237.70167542 81.10363007]
[252.70069885 81.27561188]
[267.69970703 81.44759369]
[276.10256958 68.50945282]
[290.17578125 62.18897247]
[305.42861938 64.50298309]
[316.99395752 74.71310425]
[321.18133545 89.56130981]
[316.65460205 104.30960846]
[304.85818481 114.25185394]
[289.55630493 116.21552277]
[275.63171387 109.57401276]
[267.52774048 96.44660187]
[252.52871704 96.27462006]
[237.52969360 96.10264587]
[230.74568176 99.19860077]
[222.18977356 95.75081635]
[207.19863892 95.23496246]
[192.20751953 94.71910858]
[177.21638489 94.20325470]
[162.22526550 93.68740082]
[147.23413086 93.17154694]
[132.24301147 92.65569305]
[130.35160828 104.00379944]
[124.89593506 113.16020966]
[117.13117218 119.16551208]
[108.50114441 121.64179230]
[109.18884277 136.62602234]
[109.87654114 151.61024475]
[110.56423950 166.59448242]
[111.25193787 181.57870483]
[114.55944061 187.46749878]
[114.35897827 193.25819397]
[111.61164856 197.26246643]
[111.61164856 212.26246643]
[111.61164856 227.26246643]
[125.19352722 234.31874084]
[133.93093872 246.88520813]
[135.81610107 262.07418823]
[130.41581726 276.39532471]
[118.97101593 286.55776978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 131]
[7 130]
[8 129]
[9 126]
[10 125]
[11 124]
[12 123]
[13 122]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[32 62]
[33 61]
[34 60]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[81 88]
[82 87]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
[96 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
