%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUUCCGGCUCCCUCCUUCAGAUUACAAGCUCCACAGAGCCGCGGGAGGACGGUUGCCUGGUAUUAUUAGCAAGCAGCAAAU\
) } def
/len { sequence length } bind def

/coor [
[147.78742981 187.24221802]
[139.42507935 174.78945923]
[131.06274414 162.33670044]
[122.70040131 149.88394165]
[110.75780487 147.16979980]
[103.72274017 136.65501404]
[105.90475464 123.78335571]
[98.00827026 111.03009796]
[89.87747192 98.42493439]
[81.51512909 85.97217560]
[73.15278625 73.51941681]
[57.90170288 70.35047150]
[49.59849548 57.60247803]
[52.71358490 43.08242798]
[44.35124588 30.62966728]
[35.76021576 18.33356094]
[26.94343758 6.19830561]
[18.12665939 -5.93694925]
[9.30988121 -18.07220459]
[0.49310213 -30.20745850]
[-8.32367706 -42.34271240]
[-19.15069389 -39.23230743]
[-30.39313889 -39.38308716]
[-41.09187317 -42.76977158]
[-50.33774185 -49.09154129]
[-57.34880829 -57.79871368]
[-61.53650284 -68.14053345]
[-62.55500412 -79.22988129]
[-60.32976913 -90.11938477]
[-55.06283951 -99.88233948]
[-47.21457291 -107.69157410]
[-53.65137863 -121.24028015]
[-60.08818817 -134.78898621]
[-66.52500153 -148.33769226]
[-80.32545471 -157.19656372]
[-79.28350830 -173.56257629]
[-64.47102356 -180.59979248]
[-51.12581635 -171.06892395]
[-52.97629166 -154.77450562]
[-46.53948212 -141.22579956]
[-40.10267258 -127.67709351]
[-33.66586304 -114.12838745]
[-14.43826962 -114.03894043]
[2.34086180 -104.49735260]
[12.32547665 -87.89096069]
[12.88825893 -68.44763184]
[3.81157827 -51.15949249]
[12.62835693 -39.02423859]
[21.44513512 -26.88898277]
[30.26191521 -14.75372791]
[39.07869339 -2.61847305]
[47.89547348 9.51678181]
[54.53337097 13.16407108]
[56.80400467 22.26732635]
[65.16634369 34.72008514]
[79.78543091 37.33118820]
[88.44343567 49.84093475]
[85.60554504 65.15707397]
[93.96788788 77.60983276]
[102.33023071 90.06259155]
[109.24649811 94.60021973]
[110.76152802 103.13361359]
[118.65801239 115.88687134]
[135.02444458 124.07708740]
[135.15316772 141.52159119]
[143.51550293 153.97434998]
[151.87783813 166.42710876]
[160.24018860 178.87988281]
[178.16772461 178.89535522]
[192.48416138 189.42794800]
[197.74293518 206.24420166]
[192.07780457 222.76512146]
[201.33697510 234.56629944]
[217.02803040 237.90852356]
[224.06900024 252.32394409]
[217.05865479 266.75427246]
[201.37472534 270.12982178]
[189.04859924 259.86111450]
[189.53581238 243.82546997]
[180.27662659 232.02429199]
[168.07443237 234.28045654]
[156.02505493 231.02224731]
[146.51191711 222.82872009]
[141.44497681 211.26150513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[7 63]
[8 62]
[9 60]
[10 59]
[11 58]
[14 55]
[15 54]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[31 42]
[32 41]
[33 40]
[34 39]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
