%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUUUGCAUCUCCGCCUCCCGUGCUCCGCCUCCGGUCUUACGUUUCGCCCCCGGCAGCGCCGACAGCGGACCCAAG\
) } def
/len { sequence length } bind def

/coor [
[59.79296494 276.38494873]
[53.98389816 290.21444702]
[58.69400406 305.55047607]
[49.52191544 318.71301270]
[33.50366974 319.60485840]
[22.92709732 307.54187012]
[25.90563774 291.77774048]
[40.15440750 284.40536499]
[45.96347809 270.57586670]
[34.66491318 255.01351929]
[34.62227249 235.64515686]
[46.01225662 219.81065369]
[64.64863586 213.60469055]
[68.19380188 199.02964783]
[71.73896790 184.45460510]
[75.28413391 169.87956238]
[78.82929993 155.30451965]
[69.06509399 144.08854675]
[67.76219940 129.09632874]
[75.62906647 116.05924225]
[89.82824707 110.08518219]
[86.08186340 96.61461639]
[95.59671021 86.36965179]
[99.14187622 71.79460907]
[102.68704224 57.21957016]
[106.23220825 42.64453125]
[109.77737427 28.06949043]
[108.18553925 21.19351959]
[110.19892120 15.50842571]
[114.22692871 12.50013447]
[118.91887665 -1.74716794]
[123.61082458 -15.99446964]
[114.71276855 -28.56947136]
[114.92298126 -43.79475403]
[123.95129395 -55.83441544]
[138.16769409 -60.19699860]
[142.85963440 -74.44429779]
[147.55158997 -88.69160461]
[137.26025391 -100.09265137]
[134.06391907 -115.11527252]
[138.82237244 -129.71844482]
[150.25563049 -139.97398376]
[165.28819275 -143.12322998]
[179.87637329 -138.31901550]
[190.09603882 -126.85366821]
[193.19813538 -111.81130981]
[188.34822083 -97.23825836]
[176.85090637 -87.05458832]
[161.79888916 -83.99964905]
[157.10694885 -69.75234985]
[152.41499329 -55.50504684]
[161.25721741 -43.54875565]
[161.36486816 -28.50041962]
[152.48707581 -16.12956429]
[137.85812378 -11.30252075]
[133.16618347 2.94478106]
[128.47422791 17.19208336]
[124.35241699 31.61465645]
[120.80725098 46.18969727]
[117.26208496 60.76473618]
[113.71691895 75.33977509]
[110.17175293 89.91481781]
[113.91813660 103.38538361]
[104.40328979 113.63034821]
[114.27230835 125.45864868]
[115.27241516 140.65249634]
[107.22918701 153.37139893]
[93.40434265 158.84968567]
[89.85917664 173.42472839]
[86.31401062 187.99977112]
[82.76884460 202.57481384]
[79.22367859 217.14985657]
[88.07467651 224.03485107]
[93.98236847 233.52000427]
[96.24255371 244.42364502]
[94.60345459 255.39828491]
[89.29349518 265.09716797]
[80.98987579 272.33953857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[21 64]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[30 57]
[31 56]
[32 55]
[36 51]
[37 50]
[38 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
