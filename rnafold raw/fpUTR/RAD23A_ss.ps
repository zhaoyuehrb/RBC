%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGUCAGCGCGCGCAUUGCCUGCCCCGGAAGUGGUCGGCGCGCGGCGCGGCGCGCCUGGGCGCUAAGAUGGCGGCGGCGUGAGUUGCAUGUUGUGUGAGGAUCCCGGGGCCGCCGCGUCGCUCGGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[8.48653698 214.58557129]
[-0.82705909 226.34384155]
[-3.74032545 235.09819031]
[-10.49409962 238.26286316]
[-20.07680130 249.80287170]
[-23.19149780 258.48760986]
[-30.01656723 261.49542236]
[-39.86326218 272.81103516]
[-49.70995712 284.12661743]
[-53.02442169 292.73709106]
[-59.91714478 295.58645630]
[-70.02258301 306.67160034]
[-80.12801361 317.75674438]
[-80.82640839 333.78457642]
[-93.87725067 343.11489868]
[-109.26905060 338.59030151]
[-115.19453430 323.68164062]
[-107.10818481 309.82556152]
[-91.21315002 307.65130615]
[-81.10771179 296.56616211]
[-71.00228119 285.48101807]
[-61.02554703 274.27990723]
[-51.17885208 262.96432495]
[-41.33215714 251.64874268]
[-31.61681175 240.22016907]
[-22.03410912 228.68016052]
[-12.58533001 217.03024292]
[-3.27173448 205.27197266]
[-7.03232241 194.38992310]
[-5.01154184 182.93280029]
[2.39680171 173.80686951]
[13.41747761 169.38455200]
[25.31814766 170.88832092]
[35.16484070 159.57272339]
[45.01153946 148.25714111]
[54.85823441 136.94154358]
[55.41403580 132.11561584]
[59.06612778 127.61431885]
[65.43049622 125.34432220]
[75.78927612 114.49555969]
[86.14805603 103.64679718]
[89.64019775 90.10809326]
[103.00318146 85.99441528]
[113.10861206 74.90928650]
[122.95530701 63.59369278]
[132.80200195 52.27810287]
[142.64869690 40.96251297]
[152.49539185 29.64692307]
[162.34208679 18.33133125]
[172.18878174 7.01574135]
[182.03547668 -4.29984951]
[191.88217163 -15.61544037]
[201.72886658 -26.93103027]
[211.57556152 -38.24662018]
[210.66531372 -53.79683685]
[220.81245422 -65.13218689]
[235.64282227 -65.90414429]
[245.48951721 -77.21973419]
[255.33621216 -88.53532410]
[265.18289185 -99.85091400]
[275.02960205 -111.16650391]
[284.87628174 -122.48209381]
[283.96603394 -138.03230286]
[294.11318970 -149.36766052]
[308.94354248 -150.13961792]
[318.79025269 -161.45520020]
[321.84793091 -179.57153320]
[338.58743286 -184.71078491]
[341.45104980 -200.27069092]
[355.53439331 -205.11926270]
[365.11709595 -216.65927124]
[374.69979858 -228.19927979]
[384.28250122 -239.73928833]
[393.86520386 -251.27929688]
[403.44790649 -262.81930542]
[412.89669800 -274.46920776]
[422.21029663 -286.22747803]
[431.52389526 -297.98574829]
[440.83746338 -309.74404907]
[450.15106201 -321.50231934]
[452.00509644 -337.79629517]
[467.14901733 -344.08865356]
[480.00405884 -333.90631104]
[477.34606934 -317.72402954]
[461.90933228 -312.18872070]
[452.59576416 -300.43045044]
[443.28216553 -288.67218018]
[433.96856689 -276.91390991]
[424.65496826 -265.15563965]
[422.95245361 -257.89407349]
[414.98791504 -253.23660278]
[405.40521240 -241.69659424]
[395.82250977 -230.15658569]
[386.23980713 -218.61657715]
[376.65710449 -207.07656860]
[367.07440186 -195.53656006]
[364.89620972 -180.80207825]
[350.12744141 -175.12809753]
[350.91888428 -163.00119019]
[342.95193481 -153.29817200]
[330.10583496 -151.60850525]
[320.25915527 -140.29292297]
[321.54348755 -125.49812317]
[311.71875000 -113.88223267]
[296.19189453 -112.63539886]
[286.34518433 -101.31980896]
[276.49850464 -90.00421906]
[266.65179443 -78.68862915]
[256.80511475 -67.37303925]
[246.95840454 -56.05744553]
[248.24276733 -41.26264954]
[238.41801453 -29.64676094]
[222.89115906 -28.39992523]
[213.04446411 -17.08433533]
[203.19776917 -5.76874447]
[193.35107422 5.54684591]
[183.50437927 16.86243629]
[173.65768433 28.17802620]
[163.81098938 39.49361801]
[153.96429443 50.80920792]
[144.11759949 62.12479782]
[134.27090454 73.44039154]
[124.42420197 84.75598145]
[123.86840057 89.58190155]
[120.21630859 94.08320618]
[113.85194397 96.35320282]
[110.35980225 109.89190674]
[96.99681854 114.00558472]
[86.63803864 124.85434723]
[76.27925873 135.70310974]
[66.17382050 146.78823853]
[56.32712936 158.10383606]
[46.48043442 169.41941833]
[36.63373566 180.73501587]
[38.71640778 199.49432373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 26]
[5 25]
[7 24]
[8 23]
[9 22]
[11 21]
[12 20]
[13 19]
[33 134]
[34 133]
[35 132]
[36 131]
[39 130]
[40 129]
[41 128]
[43 126]
[44 123]
[45 122]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
[53 114]
[54 113]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[62 105]
[65 102]
[66 101]
[68 98]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
