%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAGAGAUCCCAGCACCCUACAAACUGAGUCCAGAUCUGAGUUUUCCCUUGCAGAUUCAUCAAG\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 255.80610657]
[82.21823120 240.11860657]
[92.50000000 227.80337524]
[92.50000000 212.80337524]
[92.50000000 197.80337524]
[81.81912994 187.48570251]
[81.60544586 172.27357483]
[92.50000000 161.14044189]
[92.50000000 146.14044189]
[92.50000000 131.14044189]
[92.50000000 116.14044189]
[84.77558136 109.21851349]
[82.22170258 99.16577148]
[85.70571136 89.39636230]
[94.04437256 83.22816467]
[95.44898987 68.29407501]
[96.85361481 53.35998917]
[84.33366394 46.41685104]
[75.48448181 35.21876144]
[71.64717102 21.51720619]
[73.38224792 7.43872786]
[80.38809204 -4.84509706]
[91.55271149 -13.45262814]
[105.13011169 -17.08036804]
[107.23318481 -31.93220520]
[109.33625793 -46.78404236]
[111.43933105 -61.63587952]
[113.54240417 -76.48771667]
[107.81637573 -91.23638916]
[117.26168060 -102.75313568]
[119.36475372 -117.60497284]
[108.77939606 -129.11515808]
[108.12078857 -144.73886108]
[117.69991302 -157.09906006]
[132.99378967 -160.35964966]
[146.78111267 -152.98106384]
[152.55195618 -138.44725037]
[147.58146667 -123.62064362]
[134.21658325 -115.50189972]
[132.11351013 -100.65006256]
[137.98995972 -86.96369934]
[128.39424133 -74.38464355]
[126.29116821 -59.53280640]
[124.18809509 -44.68096924]
[122.08502197 -29.82913208]
[119.98194885 -14.97729492]
[133.32087708 -6.47736883]
[141.71865845 6.99384689]
[143.49020386 22.82690048]
[138.23963928 37.92953110]
[126.94743347 49.33060837]
[111.78770447 54.76461029]
[110.38307953 69.69869995]
[108.97846222 84.63278961]
[117.77829742 100.83422852]
[107.50000000 116.14044189]
[107.50000000 131.14044189]
[107.50000000 146.14044189]
[107.50000000 161.14044189]
[118.39455414 172.27357483]
[118.18087006 187.48570251]
[107.50000000 197.80337524]
[107.50000000 212.80337524]
[107.50000000 227.80337524]
[117.78176880 240.11860657]
[114.42288971 255.80610657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[8 59]
[9 58]
[10 57]
[11 56]
[15 54]
[16 53]
[17 52]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[30 40]
[31 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
