%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCGCUGUUACAUAGCCCGUAGUCAGAGGCCUUUCAGCCCAGGGGCCGGCGCACGAAACCUGUUUGGAGGUU\
) } def
/len { sequence length } bind def

/coor [
[164.74601746 210.29577637]
[165.86415100 194.75912476]
[156.16966248 183.31286621]
[146.47517395 171.86660767]
[139.55065918 168.70854187]
[136.62846375 159.74113464]
[127.41527557 147.90402222]
[118.20208740 136.06690979]
[108.98889923 124.22981262]
[99.77570343 112.39270020]
[95.89414978 126.88178253]
[83.80796051 135.76570129]
[68.82077026 135.14604187]
[57.50921249 125.29470062]
[54.83700943 110.53464508]
[61.97676468 97.34283447]
[75.79542542 91.50806427]
[90.22862244 95.59038544]
[84.77600098 81.61652374]
[79.32337952 67.64265442]
[73.87076569 53.66878891]
[61.64628983 43.62524033]
[64.22782135 28.95605850]
[60.49062347 26.42548943]
[57.96831131 23.17043495]
[56.73966217 19.65060234]
[56.72936630 16.30478859]
[57.72777176 13.50336838]
[59.42425919 11.51056004]
[54.80587006 3.28717446]
[57.17225266 -3.94625378]
[55.31686401 -18.83106232]
[53.46147537 -33.71586990]
[40.83729553 -43.22406006]
[38.71672058 -58.88543701]
[48.35785294 -71.40838623]
[64.04077148 -73.36325836]
[76.46109009 -63.59026718]
[78.25004578 -47.88755417]
[68.34628296 -35.57126236]
[70.20167542 -20.68645287]
[72.05706024 -5.80164337]
[74.21968079 9.04164124]
[78.20169067 23.50343895]
[90.03615570 32.54748154]
[87.84462738 48.21616745]
[93.29724884 62.19003677]
[98.74987030 76.16390228]
[104.20248413 90.13776398]
[111.61281586 103.17951202]
[120.82600403 115.01661682]
[130.03919983 126.85372925]
[139.25238037 138.69082642]
[148.46557617 150.52793884]
[157.92143250 162.17211914]
[167.61592102 173.61837769]
[177.31040955 185.06463623]
[192.81919861 186.51899719]
[202.48773193 198.26524353]
[201.00564575 213.04153442]
[210.70013428 224.48780823]
[220.39462280 235.93406677]
[230.08911133 247.38032532]
[239.78359985 258.82659912]
[255.55262756 259.88174438]
[265.89385986 271.83309937]
[264.67202759 287.59008789]
[252.61203003 297.80438232]
[236.86883545 296.41601562]
[226.78260803 284.24871826]
[228.33734131 268.52108765]
[218.64285278 257.07479858]
[208.94836426 245.62855530]
[199.25387573 234.18229675]
[189.55938721 222.73602295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[18 49]
[19 48]
[20 47]
[21 46]
[23 44]
[29 43]
[31 42]
[32 41]
[33 40]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
