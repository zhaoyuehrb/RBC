%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCGGGGAGCGCGGCCGUGCCCUCUCGAGCGGCUGCGGGGUCCCCGCGGCGCCGGGCUGCUGAGCUGAGGGCCCGCGGCGGCCGCGGCCGGUGCAUGUGCGGCUGCUGGAUGCGGAGGCGGCGGCGACGGCGCGGAUCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[127.37840271 454.85287476]
[138.97750854 444.54559326]
[137.37770081 429.63113403]
[135.77789307 414.71670532]
[134.17810059 399.80224609]
[125.12751770 387.97277832]
[131.34884644 373.42611694]
[122.29827118 361.59664917]
[128.51959229 347.04998779]
[117.41873932 333.49719238]
[124.91773224 316.71508789]
[122.84072113 301.85958862]
[120.60508728 287.02713013]
[118.36945343 272.19464111]
[108.82167053 260.76272583]
[114.41574097 245.96350098]
[112.18010712 231.13104248]
[109.94447327 216.29858398]
[107.70883942 201.46611023]
[105.47320557 186.63365173]
[93.37386322 178.02311707]
[90.89531708 163.01272583]
[100.00888062 150.38020325]
[97.77324677 135.54774475]
[88.22546387 124.11581421]
[93.81953430 109.31658936]
[91.42553711 94.50886536]
[88.87344360 79.72756195]
[78.90100098 67.44501495]
[84.36008453 53.58688736]
[81.80799866 38.80558777]
[79.25590515 24.02428818]
[76.70381927 9.24298763]
[74.15172577 -5.53831291]
[71.59963989 -20.31961250]
[69.04754639 -35.10091400]
[66.49546051 -49.88221359]
[63.94337082 -64.66351318]
[61.39128113 -79.44481659]
[51.41883850 -91.72736359]
[56.87791824 -105.58548737]
[54.16802979 -120.33867645]
[51.30065155 -135.06205750]
[48.27610779 -149.75396729]
[45.09474945 -164.41271973]
[41.60086060 -179.00013733]
[37.79604340 -193.50956726]
[33.99122620 -208.01898193]
[30.18640518 -222.52841187]
[26.38158798 -237.03782654]
[22.57676888 -251.54725647]
[18.77194977 -266.05667114]
[14.81230736 -280.52462769]
[10.69829559 -294.94940186]
[6.58428240 -309.37420654]
[2.16295481 -323.70779419]
[-2.56366849 -337.94363403]
[-7.29029179 -352.17947388]
[-12.01691532 -366.41531372]
[-16.74353790 -380.65115356]
[-22.45686340 -387.87103271]
[-21.41553116 -395.24197388]
[-25.83685875 -409.57556152]
[-39.92502975 -416.73791504]
[-44.74283218 -431.78994751]
[-37.43195343 -445.80160522]
[-22.32980537 -450.46002197]
[-8.39622498 -443.00140381]
[-3.89775801 -427.85083008]
[-11.50326633 -413.99688721]
[-7.08193874 -399.66329956]
[-2.50770187 -385.37777710]
[2.21892118 -371.14193726]
[6.94554472 -356.90609741]
[11.67216778 -342.67025757]
[16.39879036 -328.43441772]
[20.25283623 -325.50582886]
[22.26649475 -320.09594727]
[21.00908470 -313.48822021]
[25.12309647 -299.06341553]
[29.23711014 -284.63864136]
[34.13095093 -279.02920532]
[33.28137207 -269.86148071]
[37.08619308 -255.35206604]
[40.89101028 -240.84265137]
[44.69582748 -226.33322144]
[48.50064850 -211.82380676]
[52.30546570 -197.31437683]
[56.11028671 -182.80496216]
[59.76877594 -179.63545227]
[61.43168259 -174.10765076]
[59.75349808 -167.59408569]
[62.93486023 -152.93533325]
[67.45925140 -147.02388000]
[66.02404022 -137.92944336]
[68.89141846 -123.20605469]
[73.28844452 -117.19927216]
[71.65921783 -108.13758087]
[81.44911957 -96.91229248]
[76.17258453 -81.99690247]
[78.72467041 -67.21560669]
[81.27675629 -52.43430328]
[83.82884979 -37.65300369]
[86.38093567 -22.87170219]
[88.93302917 -8.09040260]
[91.48511505 6.69089794]
[94.03720856 21.47219849]
[96.58929443 36.25349808]
[99.14138794 51.03479767]
[108.93128967 62.26008987]
[103.65474701 77.17547607]
[106.20684052 91.95677185]
[110.60085297 98.78791046]
[108.65200043 107.08095551]
[118.35968781 119.57380676]
[112.60570526 133.31210327]
[114.84133911 148.14457703]
[127.27352142 157.52960205]
[129.32946777 172.60366821]
[120.30567169 184.39801025]
[122.54130554 199.23048401]
[124.77693939 214.06294250]
[127.01257324 228.89540100]
[129.24819946 243.72787476]
[138.95590210 256.22073364]
[133.20191956 269.95901489]
[135.43754578 284.79147339]
[137.67318726 299.62393188]
[142.07482910 307.71060181]
[139.79458618 314.79693604]
[149.53947449 323.31723022]
[150.79689026 335.79669189]
[143.43403625 345.45016479]
[152.59904480 358.34640503]
[146.26329041 371.82632446]
[155.42829895 384.72256470]
[149.09254456 398.20245361]
[150.69233704 413.11688232]
[152.29214478 428.03134155]
[153.89195251 442.94577026]
[167.41326904 450.55853271]
[173.84695435 464.67898560]
[170.71913147 479.87753296]
[159.23252869 490.31005859]
[143.80395508 491.96499634]
[130.36602783 484.20602417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[5 137]
[7 135]
[9 133]
[11 130]
[12 128]
[13 127]
[14 126]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[23 117]
[24 116]
[26 114]
[27 112]
[28 111]
[30 109]
[31 108]
[32 107]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[41 98]
[42 96]
[43 95]
[44 93]
[45 92]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 81]
[54 80]
[55 79]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
