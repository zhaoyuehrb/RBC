%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAUGUUCCCACCCCUGGGCAAGGUGGCUCACUCUGGCAGGUAGGAACAGGGGAGAGUGCACCUGCUACCAGUCAAGCUCAGCCAGACUGCAAGAGGAGGCGAGGCGGAGCCAGCCGAGGGAGUGAACC\
) } def
/len { sequence length } bind def

/coor [
[72.73572540 433.84558105]
[59.67189407 441.53402710]
[44.76573944 444.28762817]
[29.81726074 441.77392578]
[16.63155556 434.29641724]
[6.80086088 422.75808716]
[1.51228333 408.55221558]
[1.40444374 393.39422607]
[6.49036407 379.11456299]
[16.15589523 367.43753052]
[29.23387718 359.77316284]
[44.14507675 357.04702759]
[46.63253021 342.25469971]
[49.11997986 327.46240234]
[51.43122864 312.64154053]
[53.56595230 297.79421997]
[55.70067215 282.94689941]
[57.83539581 268.09957886]
[51.98812866 254.40071106]
[61.61064529 241.84213257]
[63.74536896 226.99481201]
[65.88008881 212.14749146]
[64.21035767 209.78092957]
[63.42508698 206.57888794]
[63.85962677 202.89303589]
[65.70892334 199.19407654]
[68.98900604 196.01689148]
[72.52539062 181.43972778]
[76.06177521 166.86254883]
[79.59815979 152.28536987]
[83.13454437 137.70820618]
[86.67092896 123.13102722]
[79.02328491 116.51321411]
[74.38604736 107.52556610]
[73.42469788 97.45790863]
[76.27721405 87.75507355]
[82.53422546 79.80952454]
[76.30300140 66.16503906]
[70.07177734 52.52056122]
[63.84054947 38.87608337]
[51.06965637 29.53719330]
[52.82065201 14.74586964]
[46.58942413 1.10138953]
[40.35820007 -12.54309082]
[34.12697601 -26.18757057]
[27.89575005 -39.83205032]
[23.47658539 -42.96368027]
[21.01319313 -47.08733749]
[20.55116272 -51.26403809]
[21.74573326 -54.67950439]
[16.50376892 -68.73374939]
[11.26180744 -82.78799438]
[6.01984453 -96.84224701]
[-9.13949299 -99.31005096]
[-21.02380371 -109.03932190]
[-26.43626785 -123.41293335]
[-23.92095757 -138.56446838]
[-14.15448284 -150.41821289]
[0.23602726 -155.78559875]
[15.37959671 -153.22280884]
[27.20268059 -143.41923523]
[32.52492905 -129.01196289]
[29.91468620 -113.87650299]
[20.07409096 -102.08420563]
[25.31605339 -88.02996063]
[30.55801582 -73.97571564]
[35.79998016 -59.92146683]
[41.54022980 -46.06327438]
[47.77145386 -32.41879654]
[54.00268173 -18.77431488]
[60.23390579 -5.12983561]
[66.46513367 8.51464462]
[78.79032898 16.87758827]
[77.48503113 32.64485550]
[83.71625519 46.28933716]
[89.94747925 59.93381500]
[96.17870331 73.57829285]
[111.37835693 75.84960175]
[122.80728149 86.12423706]
[137.29615784 82.24195099]
[151.78504944 78.35966492]
[159.71910095 64.95487213]
[174.46820068 61.22407913]
[187.19873047 68.87059784]
[201.68762207 64.98831177]
[216.17651367 61.10602570]
[221.55699158 48.69489288]
[232.95352173 41.77663040]
[246.05767822 42.70288086]
[256.06576538 50.90805054]
[270.64294434 47.37166595]
[280.18698120 34.47629929]
[296.22418213 34.04203415]
[306.45211792 46.40200043]
[303.02481079 62.07469177]
[288.57141113 69.03736115]
[274.17932129 61.94884109]
[259.60214233 65.48522186]
[251.51725769 80.18196869]
[234.99174500 84.61682892]
[220.05879211 75.59491730]
[205.56990051 79.47720337]
[191.08102417 83.35948944]
[183.87931824 96.34683228]
[169.24082947 100.49041748]
[155.66734314 92.84855652]
[141.17845154 96.73083496]
[126.68955994 100.61312103]
[119.10064697 118.65138245]
[101.24810028 126.66741180]
[97.71171570 141.24458313]
[94.17533112 155.82176208]
[90.63894653 170.39894104]
[87.10256195 184.97610474]
[83.56617737 199.55328369]
[80.72740936 214.28221130]
[78.59268951 229.12953186]
[76.45796967 243.97685242]
[82.15254211 258.73770142]
[72.68271637 270.23428345]
[70.54799652 285.08160400]
[68.41326904 299.92892456]
[66.27854919 314.77624512]
[68.16519928 323.81567383]
[63.91229248 329.94985962]
[61.42484283 344.74215698]
[58.93739319 359.53448486]
[72.13685608 366.98767090]
[81.98880005 378.50787354]
[87.30354309 392.70397949]
[87.43932343 407.86172485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 127]
[13 126]
[14 125]
[15 123]
[16 122]
[17 121]
[18 120]
[20 118]
[21 117]
[22 116]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[37 77]
[38 76]
[39 75]
[40 74]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[50 67]
[51 66]
[52 65]
[53 64]
[79 108]
[80 107]
[81 106]
[84 103]
[85 102]
[86 101]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
