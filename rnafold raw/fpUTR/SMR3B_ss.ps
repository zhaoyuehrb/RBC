%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAACAGAAAUCCAUUACAAUAUAUAAGAGCUAAGAUUUCUUGUCCCUUUUCACCUUUAUUUGCCGUCUUUCAACUGGCAAGAGUCAUUUUGACCAGCAGAUUAAUCAACUGUAAGACAGAUCCUCACACAAAGAGGCAACUGAAAGG\
) } def
/len { sequence length } bind def

/coor [
[-151.97959900 261.06820679]
[-166.07838440 272.98461914]
[-183.90316772 277.58856201]
[-201.91036987 274.00988770]
[-216.53971863 263.00079346]
[-229.53010559 270.50079346]
[-242.52049255 278.00079346]
[-255.43161011 285.63641357]
[-268.26208496 293.40682983]
[-281.09255981 301.17721558]
[-293.92300415 308.94763184]
[-306.75347900 316.71804810]
[-319.58392334 324.48843384]
[-315.36413574 338.97482300]
[-315.03842163 354.05981445]
[-318.62905884 368.71484375]
[-325.89117432 381.94070435]
[-336.32965088 392.83569336]
[-349.23278809 400.65692139]
[-363.72082520 404.87112427]
[-378.80590820 405.19100952]
[-393.45956421 401.59472656]
[-406.68261719 394.32748413]
[-417.57357788 383.88479614]
[-425.38983154 370.97863770]
[-429.59844971 356.48901367]
[-429.91247559 341.40377808]
[-426.31054688 326.75152588]
[-419.03820801 313.53125000]
[-408.59130859 302.64434814]
[-395.68215942 294.83309937]
[-381.19088745 290.63006592]
[-366.10552979 290.32183838]
[-351.45468140 293.92944336]
[-338.23721313 301.20687866]
[-327.35433960 311.65798950]
[-314.52386475 303.88757324]
[-301.69342041 296.11715698]
[-288.86294556 288.34677124]
[-276.03250122 280.57635498]
[-263.20202637 272.80596924]
[-259.08264160 266.60971069]
[-250.02049255 265.01040649]
[-237.03010559 257.51040649]
[-224.03971863 250.01042175]
[-226.39857483 238.52951050]
[-225.41961670 226.83032227]
[-221.17158508 215.86497498]
[-213.98966980 206.52899170]
[-204.44914246 199.58813477]
[-193.31932068 195.61558533]
[-181.50143433 194.94462585]
[-169.95578003 197.64074707]
[-159.62358093 203.49534607]
[-151.35031128 212.04193115]
[-137.77789307 205.65524292]
[-124.20549011 199.26855469]
[-110.63308716 192.88186646]
[-97.06068420 186.49517822]
[-92.07288361 170.46531677]
[-76.74761963 162.82357788]
[-60.30895615 168.71273804]
[-46.87327957 162.04321289]
[-33.43760300 155.37368774]
[-20.00192642 148.70416260]
[-6.56624937 142.03462219]
[-1.94283080 136.20481873]
[7.22137070 135.36943054]
[20.79377556 128.98274231]
[34.36618042 122.59605408]
[47.93858719 116.20936584]
[61.51099396 109.82267761]
[61.86265945 88.89000702]
[72.80797577 71.04343414]
[91.30659485 61.24031448]
[112.22003937 62.20371246]
[119.44634247 49.05911255]
[126.67264557 35.91451263]
[133.89895630 22.76991272]
[140.98721313 9.55036163]
[147.93666077 -3.74269223]
[154.88609314 -17.03574562]
[161.83554077 -30.32880020]
[168.78497314 -43.62185287]
[167.55801392 -59.97503662]
[181.25740051 -68.98940277]
[195.79039001 -61.39173889]
[196.20668030 -44.99787903]
[182.07803345 -36.67241287]
[175.12858582 -23.37935829]
[168.17915344 -10.08630562]
[161.22970581 3.20674825]
[154.28027344 16.49980164]
[153.96652222 23.93379593]
[147.04354858 29.99621773]
[139.81724548 43.14081955]
[132.59094238 56.28541946]
[125.36463928 69.43001556]
[131.65191650 75.99906158]
[136.28060913 83.82575989]
[139.00817871 92.50000000]
[154.00817871 92.50000000]
[169.00817871 92.50000000]
[184.00817871 92.50000000]
[195.14131165 81.60544586]
[210.35343933 81.81912994]
[220.67112732 92.50000000]
[235.67112732 92.50000000]
[244.68254089 79.86774445]
[259.40863037 74.97674561]
[274.18692017 79.70770264]
[283.33483887 92.24146271]
[283.33483887 107.75853729]
[274.18692017 120.29229736]
[259.40863037 125.02325439]
[244.68254089 120.13225555]
[235.67112732 107.50000000]
[220.67112732 107.50000000]
[210.35343933 118.18087006]
[195.14131165 118.39455414]
[184.00817871 107.50000000]
[169.00817871 107.50000000]
[154.00817871 107.50000000]
[139.00817871 107.50000000]
[135.23042297 118.34954834]
[128.50576782 127.66422272]
[119.39672852 134.66490173]
[108.66522980 138.76599121]
[97.20890808 139.62446594]
[85.98606110 137.16850281]
[75.93541718 131.60354614]
[67.89768219 123.39508057]
[54.32527542 129.78176880]
[40.75287247 136.16845703]
[27.18046570 142.55514526]
[13.60805988 148.94183350]
[0.10327829 155.47030640]
[-13.33239841 162.13983154]
[-26.76807404 168.80935669]
[-40.20375061 175.47888184]
[-53.63942719 182.14842224]
[-56.45317459 195.36071777]
[-66.23464966 204.39257812]
[-79.24225616 206.09542847]
[-90.67399597 200.06758118]
[-104.24639893 206.45426941]
[-117.81880188 212.84095764]
[-131.39120483 219.22766113]
[-144.96362305 225.61434937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[6 44]
[7 43]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[55 149]
[56 148]
[57 147]
[58 146]
[59 145]
[62 141]
[63 140]
[64 139]
[65 138]
[66 137]
[68 136]
[69 135]
[70 134]
[71 133]
[72 132]
[76 98]
[77 97]
[78 96]
[79 95]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[101 124]
[102 123]
[103 122]
[104 121]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
