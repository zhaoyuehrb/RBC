%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGCGGAGCGGGAGGGGAGGCUUCGCGGAACGCUCUCGGCGCCAGGACUCGCGUGCAAAGCCCAGGCCCGGGCGGCCAGACCAAGAGGGAAGAAGCACAGAAUUCCUCAACUCCCAGUGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[110.08850098 455.35665894]
[95.68650055 449.26431274]
[88.61608887 435.31643677]
[92.21568298 420.09878540]
[104.78566742 410.79666138]
[105.52747345 395.81500244]
[106.26927948 380.83337402]
[99.17085266 367.73904419]
[107.58116150 354.33837891]
[97.42360687 343.50512695]
[97.96247864 328.30102539]
[109.39427948 317.72030640]
[110.13608551 302.73864746]
[110.87789154 287.75701904]
[111.61969757 272.77536011]
[112.36150360 257.79373169]
[102.20394897 246.96044922]
[102.74282074 231.75636292]
[114.17462158 221.17564392]
[114.91642761 206.19400024]
[115.65823364 191.21234131]
[116.40003967 176.23069763]
[114.18187714 161.39561462]
[109.09033966 147.28617859]
[103.99879456 133.17674255]
[98.90725708 119.06730652]
[85.83712769 112.81285858]
[80.91886139 99.18359375]
[86.98330688 86.02423096]
[81.89176941 71.91479492]
[65.62681580 67.46421814]
[55.29053116 54.35075378]
[54.77276611 37.82701111]
[64.07957458 24.36445427]
[58.64059830 10.38527012]
[53.20162582 -3.59391427]
[47.59017563 -17.50475883]
[41.80709839 -31.34513664]
[36.02402496 -45.18551254]
[30.24094963 -59.02589035]
[24.45787430 -72.86626434]
[18.19542503 -79.66676331]
[18.70761490 -87.12121582]
[13.26864243 -101.10040283]
[7.82967043 -115.07958221]
[-4.38498974 -125.13506317]
[-1.78913164 -139.80171204]
[-7.22810364 -153.78089905]
[-10.92129230 -156.50753784]
[-13.25287819 -159.94776917]
[-14.16746902 -163.56201172]
[-13.79880428 -166.85159302]
[-12.43801785 -169.41950989]
[-16.46943283 -183.86761475]
[-30.78307533 -190.16473389]
[-37.65385818 -204.21202087]
[-33.83760071 -219.37678528]
[-21.13623047 -228.49870300]
[-5.54694176 -227.27066040]
[5.56947899 -216.27250671]
[6.96419811 -200.69725037]
[-2.02132893 -187.89903259]
[2.01008582 -173.45092773]
[6.75108004 -159.21987915]
[12.19005203 -145.24069214]
[24.01568031 -136.18508911]
[21.80885506 -120.51855469]
[27.24782562 -106.53936768]
[32.68679810 -92.56018829]
[38.29825211 -78.64934540]
[44.08132553 -64.80896759]
[49.86440277 -50.96858978]
[55.64747620 -37.12821198]
[61.43055344 -23.28783417]
[66.97177887 -18.27524948]
[67.18080902 -9.03288651]
[72.61978149 4.94629765]
[78.05875397 18.92548180]
[91.28611755 21.13156319]
[101.76283264 29.67514229]
[106.66318512 42.39084244]
[104.59682465 55.97039413]
[96.00120544 66.82325745]
[101.09274292 80.93269348]
[114.16287231 87.18714142]
[119.08113861 100.81640625]
[113.01669312 113.97576904]
[118.10823059 128.08520508]
[123.19977570 142.19464111]
[128.29132080 156.30407715]
[132.16651917 141.81329346]
[140.67068481 129.45695496]
[152.82174683 120.66197205]
[167.21649170 116.44399261]
[182.19261169 117.29012299]
[196.02066040 123.10263062]
[207.10374451 133.21029663]
[214.16201782 146.44589233]
[216.38037109 161.28094482]
[213.50262451 176.00231934]
[205.86111450 188.90995789]
[194.33828735 198.51330566]
[180.26478577 203.70333862]
[165.26582336 203.88073730]
[151.07351685 199.02500916]
[139.32676697 189.69686890]
[131.38168335 176.97250366]
[130.63987732 191.95414734]
[129.89807129 206.93580627]
[129.15626526 221.91744995]
[139.48690796 233.57572937]
[138.52119446 248.75868225]
[127.34314728 258.53552246]
[126.60134125 273.51718140]
[125.85953522 288.49880981]
[125.11772919 303.48046875]
[124.37592316 318.46209717]
[134.70657349 330.12039185]
[133.74085999 345.30334473]
[122.56280518 355.08020020]
[129.60816956 369.24612427]
[121.25092316 381.57516479]
[120.50911713 396.55682373]
[119.76731110 411.53848267]
[131.35688782 422.03683472]
[133.43557739 437.53564453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 124]
[6 123]
[7 122]
[9 120]
[12 117]
[13 116]
[14 115]
[15 114]
[16 113]
[19 110]
[20 109]
[21 108]
[22 107]
[23 90]
[24 89]
[25 88]
[26 87]
[29 84]
[30 83]
[34 78]
[35 77]
[36 76]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[43 69]
[44 68]
[45 67]
[47 65]
[48 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
