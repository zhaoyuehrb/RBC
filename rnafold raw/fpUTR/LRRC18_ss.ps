%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUUUUCAUGAUUUUUCCUCACACUGAUCACUAUCCAAUCAGAACAAUAAACUUCUAACACUCCCUUACUAAAAGAAC\
) } def
/len { sequence length } bind def

/coor [
[67.92617798 249.38430786]
[53.43848801 245.52122498]
[39.39920807 240.25671387]
[25.94353867 233.64146423]
[13.20106602 225.73919678]
[1.29450274 216.62600708]
[-9.66148472 206.38966370]
[-19.56138420 195.12873840]
[-28.30985832 182.95167542]
[-35.82265472 169.97576904]
[-42.02742004 156.32595825]
[-46.86440277 142.13369751]
[-50.28701782 127.53567505]
[-52.26230240 112.67247772]
[-52.77124023 97.68723297]
[-51.80892563 82.72426605]
[-49.38462448 67.92767334]
[-45.52169037 53.43994522]
[-40.25731659 39.40061188]
[-33.64220810 25.94487953]
[-25.74006653 13.20232582]
[-16.62699699 1.29567182]
[-6.39075851 -9.66041756]
[4.87006807 -19.56043053]
[17.04703522 -28.30902672]
[30.02287674 -35.82195282]
[23.81571579 -49.47739792]
[17.60855484 -63.13283920]
[11.40139294 -76.78828430]
[5.19423246 -90.44372559]
[-10.08668232 -92.56438446]
[-21.78040123 -102.62721252]
[-26.15550041 -117.42119598]
[-21.81590271 -132.22563171]
[-10.14635658 -142.31648254]
[5.12942743 -144.47378540]
[19.13700294 -138.00917053]
[27.40660095 -124.98545074]
[27.29942703 -109.55845642]
[18.84967613 -96.65088654]
[25.05683708 -82.99544525]
[31.26399803 -69.34000397]
[37.47116089 -55.68455887]
[43.67831802 -42.02911377]
[57.87071991 -46.86566925]
[72.46884155 -50.28784561]
[87.33209991 -52.26268387]
[102.31735992 -52.77117157]
[117.28029633 -51.80840683]
[132.07682800 -49.38366318]
[146.56442261 -45.52029037]
[160.60360718 -40.25549316]
[174.05914307 -33.63998032]
[186.80145264 -25.73745728]
[198.70783997 -16.62402725]
[209.66362000 -6.38746071]
[219.56329346 4.87366343]
[228.31152344 17.05089378]
[235.82405090 30.02696037]
[242.02854919 43.67689514]
[246.86524963 57.86924744]
[250.28756714 72.46733856]
[252.26255798 87.33057404]
[252.77119446 102.31582642]
[251.80857849 117.27877808]
[249.38398743 132.07531738]
[245.52075195 146.56297302]
[240.25610352 160.60220337]
[233.64071655 174.05780029]
[225.73832703 186.80020142]
[216.62501526 198.70666504]
[206.38856506 209.66255188]
[195.12753296 219.56233215]
[182.95039368 228.31068420]
[169.97439575 235.82334900]
[156.32452393 242.02798462]
[142.13221741 246.86482239]
[127.53417206 250.28729248]
[112.67095184 252.26243591]
[97.68570709 252.77120972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
