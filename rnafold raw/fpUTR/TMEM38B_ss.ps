%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGGCGCACGCGCGGAGCUGGAGCCGGCGCGGAGGAGCGGGCGGCCGCGGCUGUGCCCUCUCCUACUCCUCACCGCGCGAGCGCGGGGAACCAGUAGCCGCGGCUGCUUCGGUUGCCGCGGUCGGUGGUCGUU\
) } def
/len { sequence length } bind def

/coor [
[125.43572998 132.63357544]
[125.46450806 124.89174652]
[112.77018738 116.90086365]
[100.78134918 121.16852570]
[88.51051331 117.79631042]
[80.38631439 108.00128174]
[79.34084320 95.31852722]
[66.83308411 87.03867340]
[54.32532120 78.75881958]
[41.81756210 70.47897339]
[26.03936768 69.31316376]
[19.69763565 55.83608627]
[7.18987608 47.55623245]
[-5.31788397 39.27638245]
[-17.82564354 30.99653053]
[-30.33340454 22.71667862]
[-43.29502487 15.16708565]
[-56.66792297 8.37255669]
[-70.04081726 1.57802761]
[-83.41371918 -5.21650124]
[-98.27408600 -0.54667497]
[-111.73931122 -7.62779570]
[-116.09970093 -21.82366180]
[-129.47259521 -28.61819077]
[-142.84548950 -35.41271973]
[-156.21838379 -42.20724869]
[-171.07875061 -37.53742218]
[-184.54399109 -44.61854172]
[-188.90437317 -58.81441116]
[-202.27726746 -65.60894012]
[-215.65016174 -72.40346527]
[-229.02305603 -79.19799805]
[-242.39596558 -85.99252319]
[-255.76885986 -92.78705597]
[-269.14175415 -99.58158112]
[-279.60681152 -93.72348785]
[-291.47943115 -93.68676758]
[-301.76959229 -99.36370850]
[-307.94259644 -109.22236633]
[-308.54309082 -120.71807861]
[-321.59042358 -128.11856079]
[-334.63775635 -135.51905823]
[-347.68508911 -142.91954041]
[-364.07067871 -142.25318909]
[-372.61071777 -156.25317383]
[-364.51995850 -170.51751709]
[-348.12145996 -170.37226868]
[-340.28457642 -155.96687317]
[-327.23727417 -148.56637573]
[-314.18994141 -141.16589355]
[-301.14260864 -133.76541138]
[-283.90219116 -139.72712708]
[-267.45663452 -131.12585449]
[-262.34722900 -112.95448303]
[-248.97431946 -106.15995026]
[-235.60142517 -99.36542511]
[-222.22853088 -92.57089233]
[-208.85563660 -85.77636719]
[-195.48274231 -78.98183441]
[-182.10984802 -72.18730927]
[-168.07325745 -77.03600311]
[-154.41444397 -70.33588409]
[-149.42385864 -55.58014679]
[-136.05096436 -48.78561783]
[-122.67806244 -41.99108887]
[-109.30516815 -35.19655991]
[-95.26858521 -40.04525375]
[-81.60977173 -33.34513855]
[-76.61918640 -18.58939934]
[-63.24629211 -11.79486942]
[-49.87339401 -5.00034046]
[-36.50049591 1.79418862]
[-38.09669876 -13.12064075]
[-27.59748459 -23.83355331]
[-12.65352440 -22.53816032]
[-4.15432835 -10.17839909]
[-8.29317474 4.23929644]
[-22.05355263 10.20891857]
[-9.54579258 18.48876953]
[2.96196747 26.76862144]
[15.46972752 35.04847336]
[27.97748756 43.32832336]
[42.86104584 43.90190125]
[50.09741592 57.97121048]
[62.60517502 66.25106049]
[75.11293793 74.53091431]
[87.62069702 82.81076813]
[103.67022705 79.13744354]
[117.50248718 88.06769562]
[120.76107025 104.20654297]
[133.45539856 112.19742584]
[156.58970642 110.86891937]
[166.94546509 130.78269958]
[180.47064209 137.26879883]
[193.99581909 143.75491333]
[207.52099609 150.24102783]
[223.30998230 149.23176575]
[231.44021606 161.71168518]
[247.22920227 160.70243835]
[255.35943604 173.18235779]
[268.88461304 179.66847229]
[282.40979004 186.15457153]
[295.93496704 192.64068604]
[309.46014404 199.12680054]
[322.98532104 205.61291504]
[336.51049805 212.09901428]
[350.03567505 218.58512878]
[365.82464600 217.57586670]
[373.95489502 230.05580139]
[387.48007202 236.54190063]
[403.78109741 234.75079346]
[413.26330566 248.13061523]
[406.17218018 262.91738892]
[389.80249023 263.89971924]
[380.99395752 250.06707764]
[367.46878052 243.58097839]
[352.64721680 245.05415344]
[343.54956055 232.11030579]
[330.02438354 225.62419128]
[316.49920654 219.13809204]
[302.97402954 212.65197754]
[289.44885254 206.16586304]
[275.92367554 199.67974854]
[262.39849854 193.19363403]
[248.87332153 186.70753479]
[234.05175781 188.18072510]
[224.95410156 175.23686218]
[210.13253784 176.71005249]
[201.03488159 163.76620483]
[187.50970459 157.28009033]
[173.98452759 150.79397583]
[160.45935059 144.30786133]
[154.37298584 148.39286804]
[147.16932678 150.08082581]
[139.76570129 149.10704041]
[133.12252808 145.54896545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[7 87]
[8 86]
[9 85]
[10 84]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 72]
[18 71]
[19 70]
[20 69]
[23 66]
[24 65]
[25 64]
[26 63]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[40 51]
[41 50]
[42 49]
[43 48]
[93 132]
[94 131]
[95 130]
[96 129]
[98 127]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
