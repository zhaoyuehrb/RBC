%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCUCUCAGCGGAGGGGGCGGCCCCGGGGCCCAGGCGCCGCGGCCCGGCACCCCGUGGAAGAGCCGCGCGUACAGCCCGGGCAUCCAGGGACUACAUGAGGAAAUAAUUGACUUUUAUAACUUC\
) } def
/len { sequence length } bind def

/coor [
[110.73255920 128.61065674]
[103.70800781 115.35684204]
[96.21293640 115.08502960]
[85.99770355 126.06906128]
[75.78246307 137.05310059]
[65.56722260 148.03712463]
[55.35198593 159.02114868]
[45.13674927 170.00518799]
[34.92151260 180.98921204]
[24.70627213 191.97323608]
[14.49103546 202.95727539]
[4.27579737 213.94129944]
[5.09895992 229.72413635]
[-5.54105330 241.41027832]
[-21.33171082 242.06652832]
[-32.90469742 231.30355835]
[-33.39396286 215.50683594]
[-22.50923729 204.04829407]
[-6.70823288 203.72605896]
[3.50700521 192.74203491]
[13.72224331 181.75801086]
[23.93748093 170.77397156]
[34.15271759 159.78994751]
[44.36795807 148.80590820]
[54.58319473 137.82188416]
[64.79843140 126.83785248]
[75.01367188 115.85382843]
[85.22890472 104.86979675]
[89.51809692 90.49610901]
[86.99273682 75.71021271]
[84.28890991 60.95591736]
[81.40701294 46.23536682]
[78.52510834 31.51481438]
[75.46555328 16.83015823]
[72.22879028 2.18354201]
[68.99202728 -12.46307468]
[65.75526428 -27.10968971]
[55.22238922 -38.91515732]
[60.03106308 -53.01217651]
[56.79430008 -67.65879059]
[53.55753708 -82.30541229]
[49.79209137 -96.82509613]
[45.50290298 -111.19878387]
[41.04035950 -125.51959991]
[36.40510559 -139.78544617]
[31.76984978 -154.05130005]
[27.13459396 -168.31713867]
[22.49934006 -182.58299255]
[17.86408424 -196.84883118]
[6.24098635 -207.58262634]
[9.66665268 -222.07794189]
[-6.03158283 -229.68623352]
[-11.31498051 -245.95835876]
[-3.39782476 -260.74407959]
[-8.37644291 -274.89373779]
[-13.35506058 -289.04342651]
[-24.31577682 -301.97784424]
[-14.92107296 -316.09082031]
[1.24106801 -310.97012329]
[0.79461676 -294.02203369]
[5.77323437 -279.87237549]
[10.75185204 -265.72268677]
[23.08755493 -261.80133057]
[31.00519753 -251.31567383]
[31.41186523 -237.98748779]
[23.93250084 -226.71319580]
[35.22405243 -216.99980164]
[32.12993240 -201.48410034]
[36.76518631 -187.21824646]
[41.40044022 -172.95239258]
[46.03569794 -158.68655396]
[50.67095184 -144.42070007]
[55.30620575 -130.15486145]
[60.41690826 -124.71047974]
[59.87659073 -115.48796844]
[64.16577911 -101.11428070]
[67.18192291 -99.10853577]
[69.33328247 -95.49274445]
[69.85106659 -90.71057892]
[68.20415497 -85.54217529]
[71.44091797 -70.89555359]
[74.67768097 -56.24893951]
[84.97904205 -45.49109650]
[80.40188599 -30.34645271]
[83.63864899 -15.69983768]
[86.87541199 -1.05322111]
[90.11217499 13.59339523]
[94.67356110 19.50560760]
[93.24565887 28.63291359]
[96.12756348 43.35346603]
[99.00946045 58.07401657]
[103.42665863 64.09472656]
[101.77862549 73.18486023]
[104.30398560 87.97074890]
[103.53413391 72.99052429]
[110.48498535 59.69820404]
[123.22702789 51.78363800]
[138.22317505 51.44384766]
[151.31062317 58.77315521]
[158.85639954 71.73699951]
[158.76585388 86.73672485]
[151.06411743 99.60852814]
[137.88835144 106.77948761]
[147.28112793 118.47460938]
[156.67390442 130.16972351]
[166.06668091 141.86483765]
[181.53228760 143.72303772]
[190.89129639 155.71736145]
[189.02447510 170.44999695]
[198.41725159 182.14511108]
[207.81002808 193.84022522]
[217.20280457 205.53533936]
[232.83961487 205.69030762]
[244.68481445 215.89938354]
[247.14544678 231.34216309]
[239.05969238 244.72702026]
[224.24539185 249.73405457]
[209.69738770 243.99908447]
[202.28483582 230.22998047]
[205.50769043 214.92811584]
[196.11491394 203.23300171]
[186.72213745 191.53788757]
[177.32936096 179.84277344]
[162.54096985 178.48654175]
[152.84875488 166.75984192]
[154.37156677 151.25761414]
[144.97879028 139.56250000]
[135.58601379 127.86738586]
[126.19322968 116.17227173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[29 94]
[30 93]
[31 91]
[32 90]
[33 89]
[34 87]
[35 86]
[36 85]
[37 84]
[39 82]
[40 81]
[41 80]
[42 76]
[43 75]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[51 66]
[54 62]
[55 61]
[56 60]
[103 129]
[104 128]
[105 127]
[106 126]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
