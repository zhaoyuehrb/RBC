%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGGCGCUCGGGCGCGCUGGCCCCUGGGGACGCCGAGGGCGGCUGCGACGCGCCGAGAGGCCGCGGCUCUCCCACCUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[203.96014404 264.98556519]
[201.64779663 255.78465271]
[202.60066223 246.30105591]
[206.73551941 237.66413879]
[197.47634888 225.86297607]
[188.21716309 214.06179810]
[171.66622925 208.54873657]
[168.93438721 190.45240784]
[159.24545288 179.00143433]
[149.55653381 167.55046082]
[139.86761475 156.09948730]
[130.17869568 144.64851379]
[120.27983093 133.37854004]
[110.17439270 122.29340363]
[100.06896210 111.20826721]
[89.76040649 100.31176758]
[79.25226593 89.60761261]
[68.74411774 78.90345764]
[53.55508804 74.47583008]
[50.16049957 59.97320557]
[34.97146988 55.54557419]
[31.57688522 41.04295349]
[20.87273216 30.53480721]
[9.97622871 20.22625732]
[-0.92027462 9.91770649]
[-11.81677818 -0.39084378]
[-27.15904427 -4.25419378]
[-31.08720398 -18.62147713]
[-41.98370743 -28.93002701]
[-58.05244064 -32.20537186]
[-62.99293900 -47.84261703]
[-51.72284317 -59.75550842]
[-35.83586121 -55.68908310]
[-31.67515755 -39.82653046]
[-20.77865410 -29.51798058]
[-6.21577978 -26.39196587]
[-1.50822794 -11.28734779]
[9.38827610 -0.97879708]
[20.28477859 9.32975292]
[31.18128204 19.63830376]
[38.37634659 22.00378036]
[42.28103638 30.53480721]
[56.71845627 34.19680405]
[60.86465454 49.46506119]
[75.30207062 53.12705994]
[79.44827271 68.39531708]
[89.95641327 79.09946442]
[100.46456146 89.80361938]
[108.09684753 92.99312592]
[111.15409088 101.10283661]
[121.25952911 112.18796539]
[131.36495972 123.27310181]
[139.66651917 127.64450836]
[141.62966919 134.95959473]
[151.31858826 146.41056824]
[161.00750732 157.86154175]
[170.69642639 169.31251526]
[180.38536072 180.76348877]
[193.30130005 182.66583252]
[201.12750244 192.60581970]
[200.01834106 204.80262756]
[209.27751160 216.60379028]
[218.53668213 228.40496826]
[240.09898376 228.88238525]
[254.59043884 244.49351501]
[253.49249268 265.49813843]
[264.76248169 275.39700317]
[276.03247070 285.29586792]
[290.55410767 280.29418945]
[305.62802124 283.23919678]
[317.19937134 293.33868408]
[322.15551758 307.87594604]
[319.16326904 322.94055176]
[309.02755737 334.48016357]
[294.47482300 339.39071655]
[279.41967773 336.35128784]
[267.91189575 326.17944336]
[263.04696655 311.61138916]
[266.13357544 296.56585693]
[254.86360168 286.66699219]
[243.59362793 276.76812744]
[235.08580017 280.43777466]
[225.79322815 281.00399780]
[216.81776428 278.36950684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 52]
[14 51]
[15 50]
[16 48]
[17 47]
[18 46]
[20 44]
[22 42]
[23 40]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
[66 81]
[67 80]
[68 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
