%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGUCGUGAAAAAAAAGGUCUUGGUGAGGUGCCGCCAUUUCAUCUGUCCUCAUUCUCUGCGCCUUUCGCAGAGCUUCCAGCAGCGGU\
) } def
/len { sequence length } bind def

/coor [
[130.35066223 149.15107727]
[129.19905090 143.60128784]
[119.16208649 132.45411682]
[109.12512970 121.30694580]
[99.08817291 110.15977478]
[91.61753845 106.65446472]
[88.90379333 98.44398499]
[79.26197815 86.95331573]
[69.62016296 75.46264648]
[55.58896637 81.08251953]
[40.52810287 82.08897400]
[25.91337395 78.39599609]
[13.17296124 70.37745667]
[3.54786801 58.82929230]
[-2.02895546 44.89049911]
[-3.02303672 29.93082237]
[0.65042114 15.41614532]
[8.61946583 2.76484919]
[-1.02234805 -8.72581768]
[-10.66416264 -20.21648407]
[-25.46185875 -25.81458855]
[-27.71567535 -40.53768539]
[-40.60976028 -42.48781204]
[-48.39607620 -52.44097137]
[-47.25918579 -64.62119293]
[-56.49410629 -76.44135284]
[-65.72902679 -88.26152039]
[-74.96395111 -100.08168030]
[-84.19887543 -111.90184021]
[-93.43379211 -123.72200012]
[-102.66871643 -135.54216003]
[-111.90364075 -147.36231995]
[-121.13856506 -159.18247986]
[-136.53799438 -164.82067871]
[-139.08795166 -181.02037048]
[-126.16525269 -191.11668396]
[-111.06365967 -184.72341919]
[-109.31839752 -168.41740417]
[-100.08348083 -156.59724426]
[-90.84855652 -144.77708435]
[-81.61363220 -132.95692444]
[-72.37871552 -121.13676453]
[-63.14379120 -109.31659698]
[-53.90886688 -97.49643707]
[-44.67394638 -85.67627716]
[-35.43902206 -73.85611725]
[-18.89348030 -68.29601288]
[-16.22500801 -50.17950058]
[-2.11695957 -45.40328598]
[0.82650441 -29.85829926]
[10.46831894 -18.36763191]
[20.11013222 -6.87696505]
[33.95303726 -12.52806759]
[48.88509369 -13.62527084]
[63.44487762 -10.04857063]
[76.20350647 -2.13602567]
[85.90485382 9.34815884]
[91.58921814 23.28742027]
[92.68826294 38.32139587]
[89.08181000 52.97868347]
[81.11083221 65.82083130]
[90.75264740 77.31150055]
[100.39445496 88.80216980]
[110.23534393 100.12281036]
[120.27230072 111.26998138]
[130.30926514 122.41716003]
[140.34622192 133.56433105]
[150.95281982 144.17092896]
[162.09999084 154.20788574]
[173.24716187 164.24484253]
[184.39433289 174.28181458]
[195.48123169 173.07884216]
[205.14456177 178.18539429]
[210.18745422 187.63076782]
[209.10020447 198.05920410]
[219.52008057 208.84930420]
[229.93994141 219.63940430]
[245.29211426 226.83297729]
[242.62956238 243.57655334]
[225.80326843 245.65313721]
[219.14985657 230.05928040]
[208.72998047 219.26918030]
[198.31010437 208.47908020]
[179.46563721 204.77668762]
[174.35737610 185.42898560]
[163.21020508 175.39202881]
[152.06303406 165.35505676]
[140.91586304 155.31809998]
[137.18118286 155.22766113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[7 63]
[8 62]
[9 61]
[18 52]
[19 51]
[20 50]
[22 48]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[68 88]
[69 87]
[70 86]
[71 85]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
