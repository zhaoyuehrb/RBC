%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGCUCUGUCUGGCCCUGUGAAUCCUCACUCACCCAUUCAGAUUUCUGUUGGUGUAAAGCGACAUUCCAGCUGCUGAAGCUCCGUGAUCUGCUGUGUUUUUCCAGCCCAGAUCCAAGAGACCUGGAUGCUUUUUGCCAUUCUGAUGGUAA\
) } def
/len { sequence length } bind def

/coor [
[26.00421715 272.64370728]
[11.01054478 273.07934570]
[-2.94174862 267.57174683]
[-13.59509945 257.01208496]
[-19.22573280 243.10900879]
[-18.92257881 228.11207581]
[-12.73316669 214.44578552]
[-25.72354698 221.94578552]
[-38.71392822 229.44578552]
[-51.70431137 236.94578552]
[-55.89860153 251.94731140]
[-69.17953491 259.36831665]
[-83.45534515 255.27725220]
[-96.44572449 262.77725220]
[-109.43611145 270.27725220]
[-109.53878784 285.57223511]
[-117.23262787 298.67575073]
[-130.36499023 306.11935425]
[-145.35964966 305.99108887]
[-158.19039917 298.42556763]
[-171.18078613 305.92556763]
[-184.17115784 313.42556763]
[-197.16154480 320.92556763]
[-204.88806152 335.39044189]
[-221.28497314 335.66101074]
[-229.48454285 321.45895386]
[-221.05175781 307.39410400]
[-204.66154480 307.93518066]
[-191.67115784 300.43518066]
[-178.68078613 292.93518066]
[-165.69039917 285.43518066]
[-165.82696533 270.54064941]
[-158.44071960 257.49078369]
[-145.42817688 249.83961487]
[-130.23329163 249.72830200]
[-116.93611145 257.28686523]
[-103.94572449 249.78686523]
[-90.95534515 242.28686523]
[-87.36040497 227.87812805]
[-74.29315186 220.08700562]
[-59.20431137 223.95539856]
[-46.21392822 216.45539856]
[-33.22354889 208.95539856]
[-20.23316574 201.45539856]
[-18.12253189 195.54388428]
[-12.62549019 191.12290955]
[-4.85822678 190.09075928]
[6.12257576 179.87205505]
[3.60901022 163.67846680]
[11.30019951 149.02044678]
[26.35217285 141.74263000]
[42.94324112 144.87896729]
[53.71192169 134.43696594]
[64.48059845 123.99494934]
[75.24927521 113.55294037]
[86.01795959 103.11093140]
[90.02861786 89.71666718]
[103.54003143 86.12039185]
[114.30870819 75.67838287]
[125.07739258 65.23637390]
[135.84606934 54.79436111]
[146.61474609 44.35235214]
[157.38342285 33.91034317]
[158.44474792 29.55451393]
[160.64378357 26.13577461]
[163.53382874 23.90096855]
[166.63388062 22.92172432]
[169.49040222 23.09887886]
[181.07943726 13.57554054]
[192.66848755 4.05220270]
[204.25753784 -5.47113466]
[215.84658813 -14.99447250]
[213.67868042 -22.63839722]
[213.67045593 -30.55672646]
[215.80783081 -38.15302277]
[219.91561890 -44.85911179]
[225.67189026 -50.17756271]
[232.63307190 -53.71858978]
[240.26817322 -55.22859192]
[247.99923706 -54.60826874]
[255.24514771 -51.91901398]
[261.46520996 -47.37718201]
[274.29885864 -55.14231873]
[287.13250732 -62.90745163]
[288.55880737 -78.24602509]
[298.62576294 -89.67010498]
[313.31555176 -92.93718719]
[326.94915771 -86.99893188]
[339.78283691 -94.76406860]
[352.61648560 -102.52920532]
[365.45013428 -110.29434204]
[378.28378296 -118.05947876]
[390.95529175 -126.08647156]
[403.45935059 -134.37194824]
[415.96337891 -142.65742493]
[428.46740723 -150.94290161]
[429.00173950 -166.45077515]
[438.57583618 -178.66209412]
[453.50823975 -182.88136292]
[468.05718994 -177.48617554]
[476.62826538 -164.55111694]
[475.92575073 -149.04994202]
[466.21975708 -136.94320679]
[451.24243164 -132.88616943]
[436.75286865 -138.43885803]
[424.24884033 -130.15338135]
[411.74481201 -121.86791229]
[399.24078369 -113.58243561]
[397.42312622 -109.10522461]
[392.73974609 -105.75055695]
[386.04891968 -105.22582245]
[373.21527100 -97.46068573]
[360.38162231 -89.69554901]
[347.54797363 -81.93041229]
[334.71429443 -74.16528320]
[333.64822388 -59.33283234]
[323.93774414 -47.83628082]
[309.14672852 -44.21977234]
[294.89764404 -50.07379913]
[282.06399536 -42.30866241]
[269.23034668 -34.54352951]
[266.43762207 -12.20437336]
[247.96093750 1.11269248]
[225.36993408 -3.40542364]
[213.78088379 6.11791372]
[202.19183350 15.64125156]
[190.60278320 25.16458893]
[179.01373291 34.68792725]
[167.82543945 44.67902374]
[157.05676270 55.12103271]
[146.28808594 65.56304169]
[135.51939392 76.00505066]
[124.75072479 86.44705963]
[113.98204041 96.88906860]
[109.97138214 110.28333282]
[96.45996857 113.87960815]
[85.69129181 124.32161713]
[74.92260742 134.76362610]
[64.15393066 145.20564270]
[53.38525009 155.64764404]
[56.34294510 169.14598083]
[52.26162338 182.23452759]
[42.31453323 191.51142883]
[29.18459129 194.62133789]
[16.34128380 190.85284424]
[5.36048031 201.07156372]
[20.23860550 199.16331482]
[34.66495514 203.27189636]
[46.30525970 212.73251343]
[53.27605057 226.01437378]
[54.44941711 240.96841431]
[49.63549423 255.17497253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[9 42]
[10 41]
[13 38]
[14 37]
[15 36]
[20 31]
[21 30]
[22 29]
[23 28]
[47 146]
[48 145]
[52 140]
[53 139]
[54 138]
[55 137]
[56 136]
[58 134]
[59 133]
[60 132]
[61 131]
[62 130]
[63 129]
[68 128]
[69 127]
[70 126]
[71 125]
[72 124]
[82 121]
[83 120]
[84 119]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
