%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGCCCGGAAGCGAAAGCCUCUCCACCUCUUCCGAGCGGGGUCACGGCCCGGCCGUCGGUAACCUGGUUUCCGAGAGUGCCGGGCGGUCGGCGGGUCAGGGCAGCCCGGGGCCUGACGCC\
) } def
/len { sequence length } bind def

/coor [
[85.15207672 220.05874634]
[90.17189026 205.47091675]
[102.29575348 195.93070984]
[100.76593018 181.00892639]
[99.23610687 166.08714294]
[97.70629120 151.16535950]
[96.17646790 136.24357605]
[94.64665222 121.32178497]
[80.66364288 115.89265442]
[69.46534729 125.87254333]
[58.26704407 135.85243225]
[53.11230850 150.81034851]
[38.46289825 153.50181580]
[27.26459885 163.48170471]
[22.63392258 179.21348572]
[6.63301802 182.80557251]
[-4.27775621 170.56272888]
[1.12566900 155.07934570]
[17.28471375 152.28340149]
[28.48301125 142.30351257]
[32.83677292 128.05943298]
[48.28715897 124.65412903]
[59.48545837 114.67424011]
[70.68375397 104.69435883]
[66.34094238 90.33678436]
[51.48870850 88.23654175]
[38.93983841 97.46495819]
[23.90747643 95.12343597]
[15.18692589 83.10313416]
[0.33468774 81.00289154]
[-14.51755047 78.90264893]
[-29.51725197 85.53145599]
[-42.59636307 75.63858032]
[-40.30022049 59.40098190]
[-24.99089241 53.52249908]
[-12.41730881 64.05041504]
[2.43492985 66.15065765]
[17.28716850 68.25090027]
[28.99870682 59.11988068]
[44.09090805 61.03824997]
[53.58894730 73.38430023]
[68.44118500 75.48454285]
[122.40357208 70.68569183]
[127.65369415 56.63449478]
[132.90380859 42.58329391]
[137.97407532 28.46619415]
[142.86363220 14.28549480]
[140.04739380 -1.28304315]
[151.51080322 -10.79301739]
[156.40036011 -24.97371674]
[161.28991699 -39.15441513]
[166.17947388 -53.33511353]
[171.06903076 -67.51580811]
[175.95858765 -81.69651031]
[180.84814453 -95.87720490]
[185.55621338 -110.11919403]
[181.13818359 -127.93981171]
[194.41795349 -139.33581543]
[198.57705688 -153.74768066]
[202.73616028 -168.15954590]
[206.89527893 -182.57141113]
[203.28776550 -197.97584534]
[214.25064087 -208.05874634]
[218.40974426 -222.47061157]
[222.56884766 -236.88247681]
[221.15135193 -253.77705383]
[236.99330139 -259.81604004]
[247.18176270 -246.26496887]
[236.98071289 -232.72335815]
[232.82160950 -218.31150818]
[228.66250610 -203.89964294]
[232.56748962 -189.52603149]
[221.30712891 -178.41230774]
[217.14802551 -164.00044250]
[212.98892212 -149.58857727]
[208.82981873 -135.17671204]
[214.41510010 -124.36477661]
[210.98078918 -112.27121735]
[199.85716248 -105.59338379]
[200.85028076 -98.18090820]
[195.02885437 -90.98764801]
[190.13929749 -76.80695343]
[185.24972534 -62.62625122]
[180.36016846 -48.44555283]
[175.47061157 -34.26485443]
[170.58105469 -20.08415604]
[165.69149780 -5.90345812]
[168.85746765 8.65078163]
[157.04432678 19.17505455]
[152.15476990 33.35575104]
[152.95825195 40.79117203]
[146.95501709 47.83341599]
[141.70489502 61.88461685]
[136.45477295 75.93581390]
[141.70489502 89.98701477]
[154.88258362 97.15281677]
[168.06025696 104.31861115]
[181.23794556 111.48440552]
[195.72390747 105.59450531]
[210.59080505 110.44314575]
[218.81895447 123.74095917]
[216.52325439 139.20910645]
[204.78768921 149.54402161]
[189.15341187 149.86585999]
[177.00247192 140.02265930]
[174.07214355 124.66209412]
[160.89447021 117.49629211]
[147.71678162 110.33049774]
[134.53909302 103.16470337]
[122.05321503 111.47870636]
[109.56843567 119.79196930]
[111.09825897 134.71374512]
[112.62807465 149.63552856]
[114.15789795 164.55732727]
[115.68771362 179.47911072]
[117.21753693 194.40089417]
[131.02500916 201.28254700]
[138.90045166 214.54833984]
[138.33082581 229.96517944]
[129.49790955 242.61361694]
[115.22025299 248.45759583]
[100.05380249 245.63230896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[6 113]
[7 112]
[8 111]
[9 24]
[10 23]
[11 22]
[13 20]
[14 19]
[25 42]
[26 41]
[29 38]
[30 37]
[31 36]
[43 94]
[44 93]
[45 92]
[46 90]
[47 89]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[56 79]
[58 76]
[59 75]
[60 74]
[61 73]
[63 71]
[64 70]
[65 69]
[95 109]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
