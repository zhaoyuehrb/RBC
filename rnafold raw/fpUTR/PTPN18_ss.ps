%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAAGGGCGGGGACUCAGUCACCGGCCUCCGCCUCCCGCGGCGUCCACACUCGCCGCGCGCGCGGCGGCCGGGCUGGACCUUGCUGGCCCGCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[81.60245514 115.17037964]
[67.61537170 120.58900452]
[53.62828445 126.00762939]
[39.64120102 131.42625427]
[25.65411949 136.84487915]
[19.20835495 151.02549744]
[4.94627380 156.32150269]
[-8.53305340 150.08906555]
[-22.52013779 155.50769043]
[-36.50722122 160.92631531]
[-50.49430466 166.34494019]
[-60.56754684 178.54495239]
[-75.23040771 175.92774963]
[-89.21749115 181.34638977]
[-103.11947632 186.97975159]
[-116.93305969 192.82653809]
[-130.74664307 198.67333984]
[-142.97621155 210.41531372]
[-157.64479065 201.91418457]
[-153.53654480 185.46551514]
[-136.59342957 184.85975647]
[-122.77984619 179.01295471]
[-108.96626282 173.16616821]
[-103.94670868 167.56338501]
[-94.63611603 167.35929871]
[-80.64903259 161.94067383]
[-71.57624054 150.12823486]
[-55.91292953 152.35784912]
[-41.92584610 146.93922424]
[-27.93876266 141.52059937]
[-13.95167923 136.10197449]
[-8.18910313 122.41518402]
[5.91859770 116.72068024]
[20.23549461 122.85779572]
[34.22257614 117.43917084]
[48.20965958 112.02054596]
[62.19674301 106.60192108]
[76.18383026 101.18329620]
[80.12229156 86.82855225]
[91.80649567 77.60632324]
[91.34457397 62.61343765]
[90.88264465 47.62055206]
[90.42072296 32.62766647]
[89.95879364 17.63477898]
[89.49687195 2.64189339]
[89.03494263 -12.35099220]
[76.13117218 -20.96912575]
[70.78900146 -35.53761673]
[75.06261444 -50.45457840]
[87.30872345 -59.98414230]
[102.81843567 -60.46199036]
[115.62796021 -51.70438385]
[120.81177521 -37.07880020]
[116.37658691 -22.20907402]
[104.02783203 -12.81291866]
[104.48975372 2.17996740]
[104.95168304 17.17285347]
[105.41360474 32.16573715]
[105.87553406 47.15862656]
[106.33745575 62.15151215]
[106.79938507 77.14439392]
[119.02915955 85.62984467]
[123.84384918 99.71491241]
[138.13796997 104.26219940]
[152.43209839 108.80948639]
[166.72624207 113.35678101]
[182.22257996 110.16713715]
[192.00535583 121.39864349]
[206.29948425 125.94593811]
[220.59361267 130.49322510]
[234.88774109 135.04051208]
[250.38409424 131.85087585]
[260.16687012 143.08238220]
[275.66320801 139.89274597]
[285.44598389 151.12425232]
[299.74011230 155.67153931]
[314.03424072 160.21882629]
[326.45108032 150.91285706]
[341.96691895 150.71627808]
[354.61557007 159.70468140]
[359.53335571 174.42184448]
[354.82931519 189.20870972]
[342.31225586 198.37944031]
[326.79519653 198.40769958]
[314.24481201 189.28260803]
[309.48693848 174.51295471]
[295.19281006 169.96566772]
[280.89868164 165.41838074]
[266.42474365 168.93327332]
[255.61956787 157.37651062]
[241.14562988 160.89140320]
[230.34045410 149.33464050]
[216.04632568 144.78735352]
[201.75219727 140.24006653]
[187.45806885 135.69277954]
[172.98413086 139.20767212]
[162.17893982 127.65090942]
[147.88481140 123.10362244]
[133.59068298 118.55632782]
[119.29655457 114.00904083]
[107.83548737 122.52143860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[8 31]
[9 30]
[10 29]
[11 28]
[13 26]
[14 25]
[15 23]
[16 22]
[17 21]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[63 100]
[64 99]
[65 98]
[66 97]
[68 95]
[69 94]
[70 93]
[71 92]
[73 90]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
