%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCUUGGCUGCUUUCAUCUCUGAAGCGCCACUUCUCAGAAACACAGAGCUUUAGCUCCGCCAAA\
) } def
/len { sequence length } bind def

/coor [
[147.48597717 141.37762451]
[148.54383850 126.84912109]
[134.55676270 121.43049622]
[120.56967163 116.01187134]
[107.23950958 125.04158020]
[91.14744568 124.51782227]
[78.43266296 114.64040375]
[73.94592285 99.17760468]
[59.72351074 94.41073608]
[45.50110245 89.64385986]
[31.27869225 84.87699127]
[21.79462051 85.08917236]
[16.51842880 79.54755402]
[2.53134441 74.12892914]
[-11.45573902 68.71030426]
[-25.44282150 63.29168320]
[-34.92657471 63.06562805]
[-39.94120407 57.28625488]
[-53.66311264 51.22743988]
[-69.89997101 53.52882767]
[-79.79706573 40.45290756]
[-73.17310333 25.45106697]
[-56.84225845 23.95591354]
[-47.60429764 37.50553131]
[-33.88238907 43.56434631]
[-20.02419662 49.30459976]
[-6.03711414 54.72322464]
[7.94996929 60.14184952]
[21.93705368 65.56047058]
[36.04556274 70.65457916]
[50.26797485 75.42145538]
[64.49037933 80.18832397]
[78.71279144 84.95519257]
[89.02141571 76.35762024]
[102.24131012 74.02947998]
[114.86686707 78.58814240]
[123.55005646 88.82475281]
[125.98829651 102.02478790]
[139.97538757 107.44341278]
[153.96246338 112.86203766]
[163.77842712 100.66247559]
[176.83818054 92.05874634]
[191.88455200 87.86498260]
[207.47344971 88.47149658]
[222.11239624 93.80847931]
[234.40351868 103.35378265]
[243.17689514 116.18400574]
[247.60203552 131.06379700]
[247.26641846 146.56481934]
[261.48883057 151.33169556]
[275.71124268 156.09855652]
[289.93365479 160.86543274]
[305.88891602 157.07571411]
[316.95025635 169.18266296]
[311.73876953 184.73168945]
[295.61553955 187.72729492]
[285.16677856 175.08784485]
[270.94436646 170.32096863]
[256.72195435 165.55409241]
[242.49955750 160.78723145]
[234.18608093 172.57228088]
[222.84716797 181.51063538]
[209.41679382 186.85433960]
[195.00460815 188.15202332]
[180.80416870 185.28703308]
[167.99411011 178.48780823]
[157.64035034 168.30973816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[8 33]
[9 32]
[10 31]
[11 30]
[13 29]
[14 28]
[15 27]
[16 26]
[18 25]
[19 24]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
