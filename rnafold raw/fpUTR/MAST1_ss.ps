%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCUGCCCUCCCCUGCCCGCUGCGGCGGCUGCAGCCUCCGCCCCGCGCGCUUGCUCCCCGCGCCGCCGCCGCCGCCGCCUCCGCCGCUGCUGCCGCACCUGCCACCAUGUCGCCGCCGCCGGGUC\
) } def
/len { sequence length } bind def

/coor [
[-18.31303215 461.46942139]
[-18.53885460 476.58364868]
[-23.21123123 490.95935059]
[-31.91469383 503.31817627]
[-43.87533951 512.56127930]
[-58.02963638 517.86669922]
[-73.11898804 518.76263428]
[-87.80166626 515.16955566]
[-100.77209473 507.40686035]
[-110.87695312 496.16482544]
[-117.21772003 482.44308472]
[-119.23058319 467.46179199]
[-116.73656464 452.55300903]
[-109.95741272 439.04248047]
[-99.49594879 428.13153076]
[-86.28237915 420.79034424]
[-71.49166107 417.67169189]
[-56.43896103 419.05288696]
[-50.74092484 405.17727661]
[-45.04288483 391.30169678]
[-39.34484863 377.42608643]
[-33.64680862 363.55047607]
[-34.67402649 358.78961182]
[-32.64715576 353.34042358]
[-27.31869698 349.14892578]
[-20.95184708 335.56719971]
[-14.58499622 321.98547363]
[-8.21814537 308.40374756]
[-1.85129511 294.82202148]
[4.51555538 281.24032593]
[10.88240623 267.65859985]
[17.24925613 254.07685852]
[15.64570713 239.26882935]
[28.50900841 230.05763245]
[34.87585831 216.47590637]
[41.24271011 202.89419556]
[31.93239212 192.53668213]
[27.27632332 179.36500549]
[28.01369095 165.37057495]
[34.06557465 152.68269348]
[44.54190445 143.24461365]
[57.87221527 138.51586914]
[72.04101562 139.24670410]
[78.73670959 125.82404327]
[69.40984344 113.53703308]
[66.58808136 98.37132263]
[70.87147522 83.55195618]
[81.34915924 72.23032379]
[75.99069214 58.22008133]
[70.63223267 44.20983887]
[65.27376556 30.19959641]
[59.91530609 16.18935585]
[44.79310989 13.13602734]
[33.73819351 2.37534237]
[30.27813530 -12.65900326]
[35.51702881 -27.16960335]
[47.78316116 -36.52618027]
[63.16245651 -37.74308395]
[76.74743652 -30.43200302]
[84.20317841 -16.92587852]
[83.15058899 -1.53446615]
[73.92554474 10.83089256]
[79.28401184 24.84113312]
[84.64247131 38.85137558]
[90.00093842 52.86161804]
[95.35939789 66.87185669]
[109.24660492 67.85176086]
[121.53228760 74.39981079]
[133.51548767 65.37744904]
[139.88624573 50.89559937]
[154.70771790 49.42143631]
[166.69091797 40.39907455]
[173.06167603 25.91722298]
[187.88314819 24.44305801]
[199.86634827 15.42069626]
[206.23710632 0.93884754]
[221.05857849 -0.53531736]
[233.04177856 -9.55767918]
[239.41253662 -24.03952789]
[254.23400879 -25.51369286]
[266.21722412 -34.53605652]
[272.12951660 -49.83235168]
[288.37216187 -52.09260178]
[298.23608398 -38.99165726]
[291.57415771 -24.00664330]
[275.23956299 -22.55286026]
[263.25637817 -13.53049755]
[257.74273682 0.30601153]
[242.06414795 2.42551613]
[230.08094788 11.44787884]
[224.56730652 25.28438759]
[208.88870239 27.40389252]
[196.90551758 36.42625427]
[191.39186096 50.26276398]
[175.71327209 52.38226700]
[163.73007202 61.40463257]
[158.21643066 75.24114227]
[142.53784180 77.36064148]
[130.55464172 86.38301086]
[133.44021606 100.87250519]
[129.80297852 115.19181824]
[120.35243225 126.54783630]
[106.93196869 132.72547913]
[92.15936279 132.51974487]
[85.46367645 145.94239807]
[95.51369476 158.67605591]
[99.01655579 174.45582581]
[95.32491302 190.13296509]
[85.22190857 202.60156250]
[70.75570679 209.41394043]
[54.82443237 209.26104736]
[48.45758057 222.84275818]
[42.09073257 236.42448425]
[43.23888016 252.20397949]
[30.83098030 260.44372559]
[24.46412849 274.02545166]
[18.09727859 287.60717773]
[11.73042870 301.18887329]
[5.36357784 314.77059937]
[-1.00327253 328.35232544]
[-7.37012291 341.93405151]
[-13.73697376 355.51577759]
[-19.77120781 369.24850464]
[-25.46924591 383.12411499]
[-31.16728401 396.99972534]
[-36.86532211 410.87533569]
[-42.56335831 424.75091553]
[-30.88419342 434.34719849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[25 122]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[34 113]
[35 112]
[36 111]
[43 105]
[44 104]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[68 99]
[69 98]
[71 96]
[72 95]
[74 93]
[75 92]
[77 90]
[78 89]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
