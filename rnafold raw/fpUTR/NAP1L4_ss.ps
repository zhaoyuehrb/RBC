%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCUCGCGGAGAGAGGAGCUAGGAGCCUCGGCCAAUGGGAGCCGGCGUUGUUGGAGGCCACGGCGGCGCAGCCCCAAAGCGAGCGAAGCUAGGGUCGCCGCCACUGCCGCAGGAGGCGUGAGGGGAUAAAAACAUUCAG\
) } def
/len { sequence length } bind def

/coor [
[203.76855469 185.86087036]
[205.84915161 174.65019226]
[192.15498352 168.52893066]
[178.46081543 162.40768433]
[164.76664734 156.28642273]
[151.07247925 150.16517639]
[137.37831116 144.04391479]
[123.68414307 137.92266846]
[109.98997498 131.80140686]
[95.03491974 132.96176147]
[82.44883728 141.12207031]
[81.16018677 154.57678223]
[72.46495819 164.66876221]
[59.72729111 167.83850098]
[47.67987442 163.14039612]
[34.91635132 171.02027893]
[22.15282822 178.90014648]
[9.38930607 186.78002930]
[5.63929701 201.89874268]
[-7.41698217 209.70823669]
[-21.80724525 206.03999329]
[-32.10848999 219.50553894]
[-47.89945984 213.33450317]
[-46.34096146 196.45233154]
[-29.68712425 193.27647400]
[-26.51872444 178.76797485]
[-13.68694878 170.59483337]
[1.50942743 174.01651001]
[14.27295017 166.13662720]
[27.03647232 158.25675964]
[39.79999542 150.37687683]
[42.93907547 133.89097595]
[57.29170990 124.56061554]
[74.28853607 128.53598022]
[86.87461090 120.37567902]
[79.82643890 110.16821289]
[79.09867096 98.64395905]
[84.03298950 89.15946198]
[75.87268066 76.57338715]
[67.71237946 63.98730469]
[59.55207062 51.40122604]
[52.19804764 45.84763718]
[51.35404587 38.44522095]
[43.47416687 25.68169975]
[31.07877541 21.93315887]
[24.79037666 11.07470989]
[27.52807808 -0.75876373]
[19.93248367 -13.69348240]
[12.33688927 -26.62820053]
[4.74129534 -39.56291962]
[-2.85429931 -52.49763870]
[-10.44989395 -65.43235779]
[-18.04548836 -78.36707306]
[-25.64108276 -91.30179596]
[-33.23667526 -104.23651123]
[-48.68536758 -106.65972137]
[-58.92312241 -118.48014832]
[-59.11598206 -134.11654663]
[-49.17288589 -146.18588257]
[-33.78866196 -148.98937988]
[-20.22726822 -141.20333862]
[-14.89198017 -126.50405884]
[-20.30195808 -111.83210754]
[-12.70636368 -98.89738464]
[-5.11076975 -85.96266937]
[2.48482490 -73.02795410]
[10.08041954 -60.09323120]
[17.67601395 -47.15851212]
[25.27160835 -34.22379684]
[32.86720276 -21.28907585]
[40.46279526 -8.35435772]
[56.15589523 -0.57552391]
[56.23768997 17.80182076]
[64.11756897 30.56534386]
[72.13815308 43.24092102]
[80.29845428 55.82699966]
[88.45876312 68.41307831]
[96.61907196 80.99916077]
[113.29080200 83.81175995]
[122.58680725 99.55150604]
[116.11122894 118.10724640]
[129.80538940 124.22850037]
[143.49955750 130.34974670]
[157.19372559 136.47100830]
[170.88789368 142.59225464]
[184.58206177 148.71351624]
[198.27624512 154.83476257]
[211.97041321 160.95602417]
[224.67675781 146.65765381]
[241.40513611 137.42463684]
[260.23400879 134.30142212]
[279.00592041 137.63162231]
[295.57473755 147.02020264]
[308.05090332 161.38027954]
[315.01702881 179.05895996]
[315.68893433 198.02761841]
[330.16339111 201.96330261]
[344.63787842 205.89898682]
[359.98468018 202.05364990]
[370.23593140 212.85923767]
[384.71041870 216.79492188]
[396.32247925 211.06280518]
[408.33322144 214.69482422]
[414.41949463 225.20593262]
[428.80337524 229.46086121]
[443.18722534 233.71578979]
[452.38543701 233.15254211]
[457.84033203 238.22721863]
[472.12652588 242.79930115]
[486.41275024 247.37138367]
[500.34603882 239.91224670]
[515.44836426 244.57008362]
[522.75976562 258.58145142]
[517.94256592 273.63369751]
[503.85464478 280.79656982]
[488.85418701 275.82043457]
[481.84066772 261.65759277]
[467.55444336 257.08551025]
[453.26821899 252.51342773]
[438.93231201 248.09965515]
[424.54843140 243.84472656]
[410.16458130 239.58979797]
[393.39086914 244.63226318]
[380.77471924 231.26939392]
[366.30026245 227.33370972]
[351.98876953 231.46057129]
[340.70220947 220.37345886]
[326.22772217 216.43777466]
[311.75323486 212.50209045]
[306.35473633 222.43840027]
[299.06851196 231.09501648]
[290.18869019 238.11834717]
[280.07458496 243.22076416]
[269.13607788 246.19248962]
[257.81707764 246.91011047]
[246.57754517 245.34178162]
[235.87471008 241.54858398]
[226.14453125 235.68215942]
[217.78388977 227.97866821]
[211.13447571 218.74925232]
[206.46875000 208.36750793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[7 83]
[8 82]
[9 81]
[10 35]
[11 34]
[15 31]
[16 30]
[17 29]
[18 28]
[21 25]
[38 78]
[39 77]
[40 76]
[41 75]
[43 74]
[44 73]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[96 129]
[97 128]
[98 127]
[100 125]
[101 124]
[104 122]
[105 121]
[106 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
