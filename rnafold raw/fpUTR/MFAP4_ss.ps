%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACUCUGGGCGGUUGCAGUCUGGGGCCGCAGACACCCAGCCACUCUGAGCAGAACUGACAGCAUGAAGGUACGGGGCCCAGGGUCGGGGGACUCAUAGC\
) } def
/len { sequence length } bind def

/coor [
[116.58593750 264.28524780]
[121.11685944 249.86434937]
[129.69848633 237.42059326]
[141.56774902 228.06047058]
[136.14912415 214.07337952]
[130.73049927 200.08630371]
[125.31188202 186.09921265]
[119.89325714 172.11213684]
[114.47463226 158.12504578]
[109.05600739 144.13796997]
[103.63738251 130.15087891]
[98.21875763 116.16380310]
[86.53254700 106.75994873]
[71.71006775 104.45906830]
[56.88758469 102.15819550]
[42.06510162 99.85732269]
[27.24261856 97.55644989]
[13.40936089 108.12717438]
[-3.47079372 105.55954742]
[-13.14725399 91.90097809]
[-28.03356171 90.05765533]
[-42.91986847 88.21433258]
[-57.80617905 86.37100220]
[-72.69248199 84.52767944]
[-85.00074768 94.44142151]
[-100.70490265 92.66519165]
[-110.48796082 80.25279999]
[-108.54579926 64.56830597]
[-96.03067017 54.91702652]
[-80.36757660 57.02490616]
[-70.84915924 69.64137268]
[-55.96285248 71.48469543]
[-41.07654572 73.32801819]
[-26.19023705 75.17134857]
[-11.30393028 77.01467133]
[-2.26322055 67.69277954]
[10.69887638 65.29782104]
[22.82859612 70.93856812]
[29.54349327 82.73396301]
[44.36597443 85.03483582]
[59.18845749 87.33571625]
[74.01094055 89.63658905]
[88.83341980 91.93746185]
[92.61611176 88.54032898]
[97.32846832 86.77513123]
[102.30792236 86.84950256]
[111.34744263 74.87924194]
[120.38696289 62.90898514]
[129.42648315 50.93872833]
[131.56845093 35.26318741]
[145.41284180 29.76936913]
[154.45236206 17.79911041]
[147.55992126 4.22503233]
[147.24583435 -10.93373871]
[153.51884460 -24.66944122]
[165.08601379 -34.27993011]
[179.61883545 -37.90021515]
[194.22184753 -34.86420822]
[203.26136780 -46.83446503]
[204.73855591 -63.16695023]
[219.73309326 -69.80741119]
[232.81990051 -59.92471695]
[230.53637695 -43.68533325]
[215.23162842 -37.79494858]
[206.19210815 -25.82468796]
[213.10852051 -12.60997486]
[213.60354614 2.35880637]
[207.52543640 16.11444664]
[196.03077698 25.90694046]
[181.36471558 29.75323486]
[166.42262268 26.83863068]
[157.38310242 38.80888748]
[155.88771057 53.62823486]
[141.39674377 59.97824478]
[132.35722351 71.94850159]
[123.31770325 83.91876221]
[114.27818298 95.88902283]
[112.20584106 110.74517822]
[117.62446594 124.73226166]
[123.04309082 138.71934509]
[128.46171570 152.70642090]
[133.88034058 166.69351196]
[139.29896545 180.68058777]
[144.71759033 194.66767883]
[150.13621521 208.65475464]
[155.55484009 222.64184570]
[170.63220215 221.56278992]
[185.35740662 224.97743225]
[198.42109680 232.58213806]
[208.66165161 243.70069885]
[215.16848755 257.34448242]
[217.36302185 272.30026245]
[215.05012512 287.23818970]
[208.43544006 300.83001709]
[198.10716248 311.86712646]
[184.98367310 319.36813354]
[170.23188782 322.66607666]
[155.16354370 321.46765137]
[141.11848450 315.87945557]
[129.34561157 306.39837646]
[120.89174652 293.86746216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 86]
[5 85]
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[46 77]
[47 76]
[48 75]
[49 74]
[51 72]
[52 71]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
