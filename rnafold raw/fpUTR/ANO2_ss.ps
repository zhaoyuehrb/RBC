%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCUCCUUCUCUAUAAAGUGGGAUCUAUCAUGACCAGCCUACCUUAUCAAUAUAGGAGAGAAAAUCUUC\
) } def
/len { sequence length } bind def

/coor [
[123.15301514 346.57836914]
[118.10129547 332.30395508]
[117.96067810 317.16265869]
[122.74642181 302.79687500]
[131.93940735 290.76492310]
[144.54243469 282.37194824]
[140.71212769 267.86923218]
[136.88183594 253.36650085]
[133.05152893 238.86378479]
[129.22123718 224.36106873]
[113.60959625 221.70021057]
[100.63179779 212.52383423]
[92.86277008 198.59170532]
[91.87017822 182.61311340]
[97.89839172 167.71990967]
[109.81076050 156.85278320]
[105.36006927 142.52828979]
[100.90937805 128.20378113]
[96.45868683 113.87928009]
[86.32110596 104.25009918]
[89.21681213 90.57141113]
[84.76612091 76.24691010]
[80.31542969 61.92240906]
[75.86473846 47.59790421]
[71.41404724 33.27340317]
[54.67493057 20.24890900]
[58.86325455 0.22849859]
[52.60535049 -13.40376568]
[37.70148849 -18.66213036]
[30.95655251 -32.95483398]
[36.37219620 -47.80226898]
[50.73541260 -54.39571762]
[65.52475739 -48.82340240]
[71.96598053 -34.39127731]
[66.23761749 -19.66167068]
[72.49552155 -6.02940559]
[81.73112488 -4.20064831]
[89.07978821 1.90723789]
[92.67082214 10.91399956]
[91.50732422 20.68186569]
[85.73854828 28.82271194]
[90.18923950 43.14721298]
[94.63993073 57.47171402]
[99.09062195 71.79621887]
[103.54131317 86.12071991]
[113.67889404 95.74990082]
[110.78318787 109.42858887]
[115.23387909 123.75308990]
[119.68457031 138.07759094]
[124.13526154 152.40209961]
[138.34156799 153.98660278]
[150.80505371 160.89628601]
[159.62127686 172.03684998]
[163.45794678 185.67056274]
[161.75621033 199.68717957]
[154.81170654 211.93066406]
[143.72395325 220.53077698]
[147.55424500 235.03349304]
[151.38455200 249.53620911]
[155.21484375 264.03890991]
[159.04515076 278.54165649]
[174.14886475 279.61703491]
[188.08406067 285.54061890]
[199.33915710 295.66986084]
[206.69328308 308.90600586]
[209.34872437 323.81329346]
[207.01742554 338.77471924]
[199.95227051 352.16732788]
[188.91964722 362.53845215]
[175.11627197 368.76306152]
[160.03944397 370.16595459]
[145.32460022 366.59500122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[16 50]
[17 49]
[18 48]
[19 47]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[27 36]
[28 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
