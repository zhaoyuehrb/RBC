%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAUUCAGAAGACUGUCCACCCGUCCUCAGCCCCCUCUCUUCGUGGGCUAUCUACUCAGUUGAUCCCUCCCUCGCUGGCUUGGCUCUGACUCCUGCUCAGACCCAUCACCUUUGCCGGGA\
) } def
/len { sequence length } bind def

/coor [
[84.51206207 105.00937653]
[69.71830750 102.53051758]
[54.82923508 107.88085175]
[43.55560303 98.14665222]
[28.76184654 95.66779327]
[16.91363907 107.66086578]
[0.42181650 110.24588013]
[-14.23425293 102.60614014]
[-21.41426277 87.90335846]
[-36.26650238 85.80311584]
[-51.01408005 91.53195190]
[-62.53263092 82.08884430]
[-77.38486481 79.98860168]
[-92.23710632 77.88835907]
[-104.78597260 87.11677551]
[-119.81833649 84.77525330]
[-128.53889465 72.75495911]
[-143.39112854 70.65471649]
[-158.24336243 68.55447388]
[-173.09559631 66.45423126]
[-187.94784546 64.35398865]
[-202.80007935 62.25374603]
[-208.69761658 76.14192200]
[-217.98948669 88.02988434]
[-230.04216003 97.10707855]
[-244.03385925 102.75461578]
[-259.01062012 104.58743286]
[-273.95129395 102.48057556]
[-287.83718872 96.57767487]
[-299.72155762 87.28121948]
[-308.79409790 75.22503662]
[-314.43621826 61.23115921]
[-316.26327515 46.25369644]
[-314.15063477 31.31384468]
[-308.24237061 17.43022346]
[-298.94131470 5.54944515]
[-286.88165283 -3.51844192]
[-272.88558960 -9.15517330]
[-257.90740967 -10.97642708]
[-242.96838379 -8.85802650]
[-229.08705139 -2.94440913]
[-217.20986938 6.36122561]
[-208.14663696 18.42440414]
[-202.51530457 32.42263794]
[-200.69982910 47.40150833]
[-185.84759521 49.50174713]
[-170.99536133 51.60198975]
[-156.14312744 53.70223236]
[-141.29087830 55.80247498]
[-126.43864441 57.90271759]
[-114.72710419 48.77170181]
[-99.63490295 50.69007111]
[-90.13686371 63.03612137]
[-75.28462219 65.13636017]
[-60.43238831 67.23660278]
[-46.74714279 61.35754776]
[-34.16625977 70.95087433]
[-19.31402016 73.05111694]
[-10.91153717 62.59368515]
[1.67264640 57.64149094]
[15.16351318 59.59912109]
[25.99234200 68.05759430]
[31.24070930 80.87403870]
[46.03446579 83.35289764]
[59.86539078 77.82526398]
[72.19716644 87.73675537]
[86.99092865 90.21562195]
[96.93450928 84.01335144]
[108.46704102 86.09751129]
[115.61081696 95.38779449]
[130.33644104 98.24365997]
[145.06207275 101.09952545]
[159.78768921 103.95539856]
[170.96823120 97.37329865]
[183.23321533 100.13352966]
[190.06343079 110.20535278]
[204.71131897 113.43636322]
[223.52320862 106.41038513]
[237.36570740 119.81277466]
[252.15946960 122.29164124]
[266.15063477 111.88418579]
[283.01815796 114.70243073]
[292.48605347 128.53819275]
[307.33828735 130.63842773]
[322.19052124 132.73867798]
[336.93811035 127.00984192]
[348.45666504 136.45294189]
[363.30889893 138.55319214]
[378.16113281 140.65342712]
[393.01336670 142.75367737]
[407.86560059 144.85391235]
[422.74346924 146.76431274]
[437.56896973 139.75460815]
[450.89648438 149.31022644]
[449.01577759 165.60116577]
[433.86157227 171.86871338]
[421.02322388 161.66534424]
[413.93539429 164.05155945]
[405.76538086 159.70614624]
[390.91314697 157.60591125]
[376.06088257 155.50566101]
[361.20864868 153.40542603]
[346.35641479 151.30519104]
[332.67117310 157.18423462]
[320.09030151 147.59091187]
[305.23806763 145.49067688]
[290.38580322 143.39042664]
[281.21453857 152.53697205]
[268.25042725 154.72801208]
[256.23077393 148.93394470]
[249.68060303 137.08540344]
[234.88684082 134.60653687]
[227.01325989 141.34019470]
[216.50621033 142.59193420]
[206.87681580 137.69641113]
[201.48030090 128.08424377]
[186.83241272 124.85324097]
[170.47686768 131.07557678]
[156.93182373 118.68102264]
[142.20620728 115.82515717]
[127.48057556 112.96928406]
[112.75495148 110.11341858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[4 64]
[5 63]
[9 58]
[10 57]
[12 55]
[13 54]
[14 53]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[70 122]
[71 121]
[72 120]
[73 119]
[76 117]
[77 116]
[79 112]
[80 111]
[83 107]
[84 106]
[85 105]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
