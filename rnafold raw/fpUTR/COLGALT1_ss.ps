%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCACGCCCGGCGCGCUCCUCCCCUUUAAGGCGCGCGGCCGGGCGGGGCCCCUAUGACCCCUUUAAGGCGCGGCCAGAGUCCUCCCGCAGAAAAACGACUUAAAGGAGACGCGUGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[106.53516388 135.39404297]
[94.21197510 136.12942505]
[82.16171265 132.63031006]
[71.81961823 125.17195892]
[64.46428680 114.50891113]
[61.06024933 101.80016327]
[46.61420822 105.83895874]
[32.16816711 109.87776184]
[17.72212410 113.91655731]
[3.27608323 117.95535278]
[-11.16995811 121.99415588]
[-25.61599922 126.03295135]
[-40.00839233 130.25894165]
[-54.34471512 134.67140198]
[-68.68103790 139.08387756]
[-83.01736450 143.49633789]
[-93.93090820 154.95082092]
[-108.37109375 151.29977417]
[-122.70742035 155.71223450]
[-137.04374695 160.12469482]
[-141.94049072 174.84887695]
[-154.57626343 183.85536194]
[-170.09236145 183.68096924]
[-182.52252197 174.39276123]
[-187.08708191 159.56225586]
[-182.03089905 144.89205933]
[-169.29815674 136.02317810]
[-153.78486633 136.36587524]
[-141.45620728 145.78837585]
[-127.11988068 141.37591553]
[-112.78356171 136.96343994]
[-102.89544678 125.82457733]
[-87.42982483 129.16001892]
[-73.09350586 124.74755096]
[-58.75718307 120.33508301]
[-44.42086029 115.92261505]
[-38.88679504 110.88698578]
[-29.65479851 111.58691406]
[-15.20875645 107.54811096]
[-0.76271522 103.50931549]
[13.68332577 99.47051239]
[28.12936783 95.43171692]
[42.57540894 91.39292145]
[57.02145004 87.35411835]
[63.60479355 73.87600708]
[57.90954971 59.99925613]
[52.21430206 46.12250519]
[46.51905823 32.24575806]
[40.64415359 18.44410896]
[25.82049751 12.96370697]
[19.28981018 -1.42815387]
[24.92663002 -16.19303894]
[39.38673401 -22.57120132]
[54.09119797 -16.77859306]
[60.31612396 -2.25186467]
[54.36837387 12.39053345]
[60.01478577 17.29986191]
[60.39580917 26.55051231]
[66.09105682 40.42726135]
[71.78630066 54.30401230]
[77.48154449 68.18076324]
[88.14628601 63.58246994]
[99.49282837 62.38849258]
[110.47969818 64.58633423]
[120.13433075 69.85761261]
[127.63909149 77.61760712]
[132.40025330 87.07777405]
[134.09410095 97.32486725]
[148.94142151 99.45958710]
[163.78874207 101.59431458]
[178.63606262 103.72903442]
[193.39691162 98.03446198]
[204.89349365 107.50428772]
[219.74081421 109.63900757]
[227.79643250 100.70104218]
[239.07040405 96.85538483]
[250.67147827 98.96418762]
[259.68447876 106.37816620]
[263.90283203 117.13014984]
[278.61935425 120.03263092]
[293.33584595 122.93511200]
[302.48538208 121.51894379]
[308.39450073 126.10869598]
[323.03070068 129.39224243]
[337.66690063 132.67579651]
[350.15048218 121.34886932]
[366.75646973 119.66649628]
[380.97351074 128.09089661]
[387.34399414 143.15979004]
[402.06051636 146.06227112]
[413.34594727 135.41244507]
[428.74011230 133.46336365]
[442.32366943 140.96447754]
[448.87344360 155.03147888]
[445.87091064 170.25527954]
[434.47061157 180.78205872]
[419.05618286 182.56402588]
[405.55480957 174.91598511]
[399.15802002 160.77877808]
[384.44152832 157.87629700]
[375.48226929 167.86427307]
[362.64514160 172.12600708]
[349.27832031 169.43638611]
[338.92483521 160.39837646]
[334.38336182 147.31199646]
[319.74716187 144.02844238]
[305.11096191 140.74488831]
[290.43338013 137.65161133]
[275.71685791 134.74914551]
[261.00036621 131.84666443]
[246.55722046 142.94953918]
[228.25329590 140.04093933]
[217.60609436 124.48632812]
[202.75877380 122.35160828]
[189.05992126 128.19886780]
[176.50134277 118.57635498]
[161.65402222 116.44163513]
[146.80670166 114.30691528]
[131.95938110 112.17218781]
[126.49392700 122.55841827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 36]
[14 35]
[15 34]
[16 33]
[18 31]
[19 30]
[20 29]
[45 61]
[46 60]
[47 59]
[48 58]
[49 56]
[68 119]
[69 118]
[70 117]
[71 116]
[73 114]
[74 113]
[79 110]
[80 109]
[81 108]
[83 107]
[84 106]
[85 105]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
