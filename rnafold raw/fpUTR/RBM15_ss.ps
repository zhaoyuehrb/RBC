%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCUUCCUGGAGCGCGGGGAGAUGUAAAGAUAGACAAAUAAUUUUCCCAAUGAGACUGUAGAAGAGAGAGCAAUUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[104.11689758 115.46163940]
[96.66405487 114.62191010]
[86.46146393 125.61768341]
[76.25887299 136.61346436]
[66.05628204 147.60923767]
[56.06108093 158.79386902]
[46.27677155 170.16345215]
[43.76129150 186.36851501]
[28.37388229 192.03947449]
[15.94379139 181.34251404]
[19.25802994 165.28176880]
[34.90719223 160.37913513]
[44.69150543 149.00956726]
[46.71662903 141.70756531]
[55.06050110 137.40664673]
[65.26309204 126.41087341]
[75.46568298 115.41509247]
[85.66827393 104.41931915]
[87.34774017 89.51363373]
[79.84774017 76.52325439]
[72.34774017 63.53287125]
[64.84774017 50.54248810]
[57.34774017 37.55210876]
[49.84774017 24.56172752]
[42.34774017 11.57134628]
[34.84774017 -1.41903496]
[19.99073029 1.50464439]
[4.98973322 -0.55662453]
[-8.52805138 -7.37925053]
[-19.09631538 -18.22316742]
[-25.56869316 -31.91210556]
[-27.24310875 -46.96119308]
[-23.93793678 -61.73801804]
[-16.01169395 -74.63970184]
[-4.32416153 -84.26676178]
[9.85688400 -89.57492828]
[24.99319077 -89.98841858]
[39.44288254 -85.46237183]
[51.63856506 -76.48773956]
[60.25734711 -64.03802490]
[64.36431885 -49.46368027]
[63.51399612 -34.34562302]
[57.79861069 -20.32374573]
[47.83812332 -8.91903496]
[55.33812332 4.07134628]
[62.83812332 17.06172752]
[70.33811951 30.05210876]
[77.83811951 43.04248810]
[85.33811951 56.03287125]
[92.83811951 69.02325439]
[100.33811951 82.01363373]
[94.40229797 68.23807526]
[92.03323364 53.42633820]
[93.37615967 38.48657608]
[98.34876251 24.33478165]
[106.64614105 11.83864307]
[117.75956726 1.76433170]
[131.00764465 -5.27046824]
[145.57810974 -8.83443356]
[160.57757568 -8.70904827]
[175.08641052 -4.90199995]
[188.21504211 2.35329056]
[199.15849304 12.61198139]
[207.24581909 25.24508476]
[211.98114014 39.47803116]
[213.07412720 54.43815613]
[210.45777893 69.20821381]
[204.29249573 82.88262177]
[194.95628357 94.62294769]
[183.02159119 103.70937347]
[169.22015381 109.58477783]
[154.39817810 111.88892365]
[139.46580505 110.48084259]
[146.96580505 123.47122192]
[162.02767944 128.99563599]
[166.96255493 144.26084900]
[157.98480225 157.55668640]
[141.98138428 158.68373108]
[131.22875977 146.77740479]
[133.97541809 130.97122192]
[126.47541809 117.98084259]
[119.02257538 117.14110565]
[117.34288025 132.04676819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 13]
[7 12]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
