%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGAUCACUUCCCUUGCAGACUUUGGAAGGGAGAGCACUUUAUUACAGACCUUGGAAGCAAGAGGAUUGCAUUCAGCCUAGUUCCUGGUUGCUGGCCAAAGGGAUC\
) } def
/len { sequence length } bind def

/coor [
[100.67963409 186.31134033]
[84.34288788 184.88204956]
[77.65847778 169.90705872]
[87.50275421 156.79132080]
[88.81008911 141.84840393]
[90.11742401 126.90548706]
[91.42475891 111.96256256]
[85.60992432 107.22572327]
[73.98023987 97.75205231]
[68.16539764 93.01521301]
[53.79555893 97.31726074]
[39.42571640 101.61930847]
[25.05587196 105.92135620]
[10.68603039 110.22340393]
[-3.68381262 114.52545929]
[-18.05365562 118.82750702]
[-29.05499268 130.19769287]
[-43.46666718 126.43566132]
[-57.83650970 130.73771667]
[-66.68552399 144.11958313]
[-82.67731476 145.40103149]
[-93.54435730 133.59904480]
[-90.95037842 117.76708221]
[-76.88526154 110.05008698]
[-62.13856125 116.36786652]
[-47.76871872 112.06581879]
[-37.79520798 101.00334167]
[-22.35570335 104.45766449]
[-7.98586130 100.15561676]
[6.38398170 95.85356140]
[20.75382423 91.55151367]
[35.12366867 87.24946594]
[49.49351120 82.94741821]
[63.86335373 78.64537048]
[54.07697678 67.27757263]
[48.18589401 53.48282242]
[46.74160385 38.55251694]
[49.87930679 23.88435936]
[57.30527115 10.85151577]
[68.32431793 0.67405492]
[81.90488434 -5.69525671]
[96.77563477 -7.66015434]
[111.54443359 -5.03669453]
[124.82870483 1.92952728]
[135.38482666 12.58636665]
[142.22459412 25.93618202]
[144.70770264 40.72922897]
[142.60168457 55.58064651]
[136.10371399 69.10012817]
[125.82208252 80.02203369]
[112.71636200 87.32500458]
[127.31203461 83.86576843]
[141.90769958 80.40653229]
[156.50337219 76.94728851]
[171.04719543 73.27613831]
[185.53608704 69.39385223]
[198.15339661 56.08106232]
[214.90188599 61.09337997]
[229.27172852 56.79133224]
[243.64157104 52.48928452]
[258.01141357 48.18723679]
[272.38125610 43.88518524]
[284.60601807 30.21105576]
[301.49322510 34.73412704]
[315.73184204 30.01595688]
[329.97048950 25.29778481]
[344.20913696 20.57961464]
[352.04779053 2.24166393]
[370.47955322 -4.55314493]
[387.81011963 4.04359150]
[401.58334351 -1.89760494]
[408.81900024 -16.21630287]
[424.55389404 -19.34562111]
[436.71755981 -8.88501644]
[435.97909546 7.14103222]
[422.90499878 16.43871117]
[407.52453613 11.87563705]
[393.75131226 17.81683350]
[392.62194824 28.28705788]
[387.13497925 37.37111664]
[378.25772095 43.33434296]
[367.61206055 45.00420380]
[357.17843628 42.00030518]
[348.92730713 34.81825256]
[334.68865967 39.53642654]
[320.45001221 44.25459671]
[306.21139526 48.97276688]
[300.43408203 59.71081543]
[288.48657227 63.70175552]
[276.68328857 58.25503159]
[262.31344604 62.55707932]
[247.94361877 66.85912323]
[233.57377625 71.16117859]
[219.20393372 75.46322632]
[213.11677551 86.02870178]
[201.05822754 89.67045593]
[189.41836548 83.88274384]
[174.92948914 87.76502991]
[169.19462585 92.61109924]
[159.96261597 91.54296112]
[145.36694336 95.00220490]
[130.77127075 98.46144104]
[116.17559814 101.92067719]
[106.36768341 113.26989746]
[105.06034851 128.21281433]
[103.75301361 143.15574646]
[102.44567108 158.09866333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 107]
[5 106]
[6 105]
[7 104]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[51 103]
[52 102]
[53 101]
[54 100]
[55 98]
[56 97]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[64 87]
[65 86]
[66 85]
[67 84]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
