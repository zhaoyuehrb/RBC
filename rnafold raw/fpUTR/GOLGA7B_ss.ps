%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGGUCAGCACCGCGGAGACCCCCCUCGCCCGGCCCCGCGACAGCCUCCGAGCGCCCCCGGAUC\
) } def
/len { sequence length } bind def

/coor [
[104.21767426 247.33964539]
[102.11460114 232.48780823]
[100.01152802 217.63597107]
[97.90845490 202.78413391]
[95.80538177 187.93229675]
[93.70230865 173.08045959]
[90.75599670 170.57771301]
[89.06105042 166.36393738]
[89.48622894 161.14277649]
[92.50000000 156.01448059]
[92.50000000 141.01448059]
[84.76270294 128.28720093]
[92.50000000 114.48703003]
[84.66864014 105.57436371]
[84.94677734 93.71315002]
[93.18728638 85.17734528]
[93.89036560 70.19383240]
[94.59345245 55.21032333]
[95.29653168 40.22681046]
[95.99961853 25.24329567]
[88.91767120 11.09562588]
[97.24301910 -1.25499225]
[87.82994080 -7.46439075]
[82.05622101 -17.05440712]
[80.98902893 -28.11427307]
[84.76593781 -38.47591019]
[92.58192444 -46.13891983]
[102.85969543 -49.65673447]
[105.65659332 -64.39366913]
[108.45349121 -79.13060760]
[111.25039673 -93.86754608]
[100.51994324 -105.07633972]
[98.46054840 -120.45615387]
[105.86409760 -134.09312439]
[119.88377380 -140.74357605]
[135.12870789 -137.85026550]
[145.73693848 -126.52571869]
[147.62936401 -111.12447357]
[140.07832336 -97.56861877]
[125.98733521 -91.07064819]
[123.19042969 -76.33370972]
[120.39353180 -61.59677124]
[117.59663391 -46.85983276]
[129.81005859 -32.09749985]
[127.74198151 -12.75744247]
[112.22653198 -0.55190837]
[119.35877228 12.52403927]
[110.98313141 25.94637871]
[110.28005219 40.92989349]
[109.57696533 55.91340637]
[108.87387848 70.89691925]
[108.17079926 85.88043213]
[116.30883026 100.38242340]
[107.50000000 114.48703003]
[115.23729706 128.28720093]
[107.50000000 141.01448059]
[107.50000000 156.01448059]
[108.55414581 170.97738647]
[110.65721893 185.82922363]
[112.76029205 200.68106079]
[114.86336517 215.53289795]
[116.96643829 230.38473511]
[119.06951141 245.23657227]
[129.59982300 257.80816650]
[123.72425842 273.11859131]
[107.48709106 275.41784668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[10 57]
[11 56]
[13 54]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[22 46]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
