%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCCCUGAGCCCCGGCCCCGCCUCGGCCGGCCCCGCCUCGGCCGGGGCGUGGGCUCCGGCUGCAGCUCCGGUCUGCUCUCUUGGCUCCGGAACCCCCGCGGGCGCUGGCUCCGUCUGCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[62.55072021 91.97649384]
[48.78292847 86.02268219]
[35.01513672 80.06886292]
[21.24734306 74.11505127]
[7.47955084 68.16123962]
[-6.28824186 62.20742798]
[-20.05603409 56.25361633]
[-34.10141754 50.98795700]
[-48.39002609 46.42333603]
[-62.67863083 41.85871506]
[-77.02259827 37.47116852]
[-91.41973877 33.26136780]
[-105.81687164 29.05156326]
[-120.21401215 24.84176064]
[-133.95727539 32.17390060]
[-148.49804688 27.69947052]
[-155.40344238 14.55217838]
[-169.80056763 10.34237480]
[-184.19770813 6.13257265]
[-198.59484863 1.92276967]
[-212.99198914 -2.28703308]
[-227.44009399 -6.31844759]
[-241.93695068 -10.17085743]
[-256.43380737 -14.02326775]
[-270.93066406 -17.87567711]
[-285.42752075 -21.72808647]
[-299.92437744 -25.58049774]
[-314.42123413 -29.43290710]
[-328.91809082 -33.28531647]
[-343.41497803 -37.13772583]
[-357.91183472 -40.99013519]
[-372.49954224 -44.48279572]
[-387.16915894 -47.61356735]
[-401.83880615 -50.74434280]
[-418.59109497 -48.13708115]
[-425.73394775 -63.51290512]
[-412.93634033 -74.63306427]
[-398.70803833 -65.41397858]
[-384.03839111 -62.28320694]
[-369.36877441 -59.15243530]
[-364.86444092 -61.01512146]
[-359.13604736 -59.99052048]
[-354.05941772 -55.48699570]
[-339.56256104 -51.63458633]
[-325.06570435 -47.78217697]
[-310.56884766 -43.92976761]
[-296.07199097 -40.07735825]
[-281.57510376 -36.22494507]
[-267.07824707 -32.37253571]
[-252.58139038 -28.52012634]
[-238.08453369 -24.66771698]
[-223.58767700 -20.81530762]
[-216.23625183 -22.15241623]
[-208.78218079 -16.68416977]
[-194.38504028 -12.47436714]
[-179.98789978 -8.26456451]
[-165.59077454 -4.05476189]
[-151.19363403 0.15504079]
[-138.29299927 -7.20086479]
[-123.63228607 -3.13661861]
[-116.00421143 10.44462395]
[-101.60707092 14.65442657]
[-87.20993042 18.86422920]
[-72.81279755 23.07403183]
[-65.43054962 21.91916466]
[-58.11400986 27.57011032]
[-43.82540512 32.13473129]
[-29.53680038 36.69934845]
[-26.92016602 35.43476105]
[-23.61916351 35.18838501]
[-20.04134560 36.23642349]
[-16.68997955 38.69402695]
[-14.10222149 42.48582077]
[-0.33442909 48.43963623]
[13.43336391 54.39344788]
[27.20115662 60.34725952]
[40.96894836 66.30107117]
[54.73674011 72.25488281]
[68.50453186 78.20870209]
[76.35504913 69.87125397]
[86.31957245 64.22750854]
[97.50721741 61.78205490]
[108.91772461 62.75353241]
[119.53093719 67.05508423]
[128.39796448 74.30211639]
[134.72601318 83.84671021]
[137.94935608 94.83551025]
[152.92066956 95.76255798]
[167.89199829 96.68959808]
[182.86332703 97.61664581]
[197.84497070 98.35845184]
[212.83465576 98.91490173]
[227.82432556 99.47135925]
[240.51249695 89.65351868]
[256.06457520 93.59204865]
[262.55035400 108.26564026]
[254.99449158 122.41796875]
[239.19319153 125.19258118]
[227.26786804 114.46102905]
[212.27819824 113.90457916]
[197.28851318 113.34812164]
[190.41377258 116.27541351]
[181.93627930 112.58796692]
[166.96495056 111.66092682]
[151.99363708 110.73387909]
[137.02230835 109.80683899]
[132.76626587 119.82919312]
[125.86177826 128.24877930]
[133.62796021 141.08180237]
[141.39411926 153.91482544]
[149.16029358 166.74786377]
[156.92646790 179.58088684]
[172.40588379 181.79936218]
[182.79924011 193.48320007]
[183.19909668 209.11567688]
[173.41665649 221.31559753]
[158.07089233 224.32252502]
[144.40760803 216.71670532]
[138.87818909 202.08934021]
[144.09344482 187.34706116]
[136.32727051 174.51402283]
[128.56109619 161.68099976]
[120.79492950 148.84797668]
[113.02875519 136.01495361]
[92.95012665 137.64471436]
[74.82189178 128.85980225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 68]
[9 67]
[10 66]
[11 64]
[12 63]
[13 62]
[14 61]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 40]
[33 39]
[34 38]
[87 106]
[88 105]
[89 104]
[90 103]
[91 101]
[92 100]
[93 99]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
