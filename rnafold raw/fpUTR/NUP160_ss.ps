%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUUCCCGCAGAUAGAGUCUGCCUCCCCUGCCCCCUUCUCUUCUGGAUUCCUCGCUGCCCACCCUCAUUCUCCCGGUGGAAGCCUCGCAACGAAGGGCCGGAGCCGCCUUUCUGCUCCCGGA\
) } def
/len { sequence length } bind def

/coor [
[99.22740936 121.00684357]
[91.46650696 117.98333740]
[80.40380859 128.11332703]
[69.34111023 138.24333191]
[73.07518005 151.78665161]
[70.59738159 165.54762268]
[62.45148087 176.83020020]
[50.28602219 183.44911194]
[36.52090073 184.15313721]
[23.86612701 178.86114502]
[12.55235672 188.70993042]
[1.23858583 198.55871582]
[-10.07518482 208.40750122]
[-21.38895607 218.25630188]
[-32.70272446 228.10508728]
[-40.67947388 243.06529236]
[-57.26321411 239.54167175]
[-58.46813965 222.63059998]
[-42.55151367 216.79130554]
[-31.23774147 206.94252014]
[-19.92397118 197.09373474]
[-8.61020088 187.24494934]
[2.70357013 177.39616394]
[14.01734066 167.54737854]
[10.52910995 151.82226562]
[15.44470310 136.38514709]
[27.52191353 125.44682312]
[43.55183029 122.04038239]
[59.21112061 127.18062592]
[70.27381897 117.05063629]
[81.33650970 106.92064667]
[79.97335815 93.61110687]
[87.53582001 81.70569611]
[101.52966309 76.79783630]
[116.24573517 81.83715820]
[119.60980225 67.21925354]
[122.97386169 52.60134888]
[126.33792114 37.98344421]
[129.70198059 23.36554337]
[133.06604004 8.74763966]
[119.91099548 1.28667867]
[109.41058350 -9.56721973]
[102.40923309 -22.92359161]
[99.46502686 -37.69145584]
[100.80520630 -52.66842651]
[106.30869293 -66.63860321]
[115.51689911 -78.47129059]
[106.70011902 -90.60655212]
[92.49851990 -99.86672974]
[97.46540833 -116.07679749]
[114.41695404 -115.79140472]
[118.83537292 -99.42332458]
[127.65215302 -87.28807068]
[139.81655884 -91.88241577]
[152.73660278 -93.34989929]
[165.62152100 -91.60070801]
[171.49212646 -105.40419006]
[177.36273193 -119.20766449]
[173.26319885 -131.51403809]
[178.52256775 -142.92964172]
[189.79536438 -147.50671387]
[196.01100159 -161.15830994]
[202.22663879 -174.80989075]
[208.44226074 -188.46148682]
[214.65789795 -202.11306763]
[205.22090149 -214.16304016]
[202.47616577 -229.22042847]
[207.05441284 -243.82516479]
[217.90357971 -254.62118530]
[232.53062439 -259.12765503]
[247.57435608 -256.30899048]
[259.57781982 -246.81292725]
[265.78274536 -232.82157898]
[264.76324463 -217.55006409]
[256.75360107 -204.50765991]
[243.59439087 -196.69140625]
[228.30949402 -195.89744568]
[222.09385681 -182.24584961]
[215.87821960 -168.59425354]
[209.66258240 -154.94267273]
[203.44696045 -141.29107666]
[206.11866760 -123.99510956]
[191.16619873 -113.33705902]
[185.29559326 -99.53358459]
[179.42498779 -85.73010254]
[191.45690918 -75.78989410]
[200.05139160 -62.74160767]
[204.44294739 -47.72874451]
[204.23490906 -32.07058334]
[199.43530273 -17.14626503]
[190.45701599 -4.27332830]
[178.08230591 5.40862322]
[163.39466858 11.03878880]
[147.68394470 12.11170101]
[144.31988525 26.72960472]
[140.95582581 41.34750748]
[137.59176636 55.96541214]
[134.22770691 70.58331299]
[130.86364746 85.20121765]
[134.22770691 99.81912231]
[143.64306641 111.49605560]
[153.05844116 123.17298889]
[162.47381592 134.84992981]
[172.03517151 146.40762329]
[181.74101257 157.84425354]
[191.44685364 169.28089905]
[206.72502136 167.14059448]
[220.72540283 173.62080383]
[228.98049927 186.65371704]
[228.85617065 202.08056641]
[220.39205933 214.97872925]
[206.28904724 221.23242188]
[191.04736328 218.84613037]
[179.53054810 208.58129883]
[175.41360474 193.71340942]
[180.01020813 178.98674011]
[170.30436707 167.55009460]
[160.59854126 156.11346436]
[153.79568481 153.01481628]
[150.79687500 144.26528931]
[141.38151550 132.58836365]
[131.96614075 120.91142273]
[122.55076599 109.23448944]
[116.28398895 116.59855652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[40 94]
[47 53]
[48 52]
[56 85]
[57 84]
[58 83]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[100 123]
[101 122]
[102 121]
[103 120]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
