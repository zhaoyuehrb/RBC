%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUUCCUCGGGCAGCGGAAGCAGCGCGGAGGUCGGAGAAGUGGCCUAAAACUUCGGCGUUGGGUGAAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[162.89341736 138.75260925]
[158.35948181 129.62304688]
[156.67182922 119.54592896]
[141.99108887 116.46769714]
[127.31033325 113.38946533]
[112.62957764 110.31124115]
[96.98462677 116.02296448]
[84.48618317 105.01490784]
[69.69075775 102.54598999]
[54.89534378 100.07707214]
[40.09992218 97.60814667]
[25.21444893 102.96849060]
[13.93427753 93.24187469]
[-0.90900648 91.07926178]
[-15.79381561 89.22386932]
[-30.44505692 95.19477081]
[-42.11754227 85.94261932]
[-57.00235367 84.08723450]
[-71.89086151 90.96212769]
[-85.13111115 81.28597260]
[-83.10265350 65.01276398]
[-67.89220428 58.88298035]
[-55.14696503 69.20242310]
[-40.26215363 71.05781555]
[-26.67557335 64.95420074]
[-13.93842602 74.33905792]
[0.94638300 76.19445038]
[8.17981148 73.82806396]
[16.40319633 78.44645691]
[30.23040390 72.90952301]
[42.56884003 82.81272888]
[57.36426163 85.28164673]
[72.15968323 87.75056458]
[86.95510101 90.21949005]
[96.99864960 83.97440338]
[108.62145996 86.16171265]
[115.70780945 95.63048553]
[130.38856506 98.70871735]
[145.06930542 101.78694916]
[159.75006104 104.86517334]
[173.87918091 89.38875580]
[194.22148132 84.89620972]
[213.32659912 92.88735962]
[224.28089905 110.31635284]
[237.74954224 102.01536560]
[250.78567505 109.22010803]
[265.77285767 108.60023499]
[280.76004028 107.98035431]
[295.74725342 107.36048126]
[310.73443604 106.74060822]
[325.72161865 106.12073517]
[336.39501953 94.77541351]
[351.60296631 94.36026764]
[362.35324097 104.60563660]
[375.90710449 95.37393188]
[390.55941772 102.73884583]
[391.23712158 119.12398529]
[377.24304199 127.67372894]
[362.97311401 119.59282684]
[353.10562134 130.69094849]
[337.91531372 131.53309631]
[326.34149170 121.10791779]
[311.35430908 121.72779083]
[296.36712646 122.34767151]
[281.37994385 122.96754456]
[266.39273071 123.58741760]
[251.40556335 124.20729065]
[239.00889587 132.46394348]
[224.90077209 125.30353546]
[221.74916077 134.79512024]
[215.96015930 142.97996521]
[208.02253723 149.14282227]
[198.61352539 152.74017334]
[188.54110718 153.44816589]
[178.67453003 151.19169617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[8 34]
[9 33]
[10 32]
[11 31]
[13 29]
[14 27]
[15 26]
[17 24]
[18 23]
[44 69]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
