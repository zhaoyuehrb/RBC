%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACUGCGCCGCGGCUGCGCAGUACACGGGAGGCUUUUAAUUCCAUUGUGGAGAGGACGGCGUUAUUUUUAUUAACUGGAGGCGACGGCGGCUGCGGCGGCGGCGGGACCCCCAGGCCUCCUCCGGGGU\
) } def
/len { sequence length } bind def

/coor [
[172.54394531 350.95166016]
[157.59135437 349.76000977]
[146.76374817 339.37911987]
[144.94349670 324.48999023]
[152.95143127 311.80639648]
[167.17655945 307.04769897]
[181.20298767 312.35836792]
[169.28967285 303.41842651]
[171.34373474 287.73114014]
[165.76878357 273.80563354]
[160.19384766 259.88009644]
[154.61891174 245.95457458]
[149.04397583 232.02906799]
[143.46903992 218.10354614]
[131.55572510 209.16362000]
[133.60978699 193.47631836]
[128.03485107 179.55079651]
[122.45991516 165.62527466]
[116.88497925 151.69975281]
[111.31004333 137.77423096]
[105.56978607 123.91604614]
[99.66503906 110.12714386]
[93.31710052 113.35444641]
[84.60457611 112.34525299]
[76.19801331 105.95006561]
[61.70912552 102.06777954]
[47.22023773 98.18549347]
[32.73134995 94.30320740]
[19.15785980 101.94506836]
[4.51937246 97.80148315]
[-2.68232942 84.81414032]
[-17.17121696 80.93185425]
[-31.66010475 77.04956818]
[-46.14899063 73.16728210]
[-58.12282181 83.03678131]
[-73.61301422 83.94972229]
[-86.66328430 75.55506897]
[-92.25552368 61.08073044]
[-88.23941040 46.09238815]
[-76.15921783 36.35336304]
[-60.66002655 35.60851288]
[-47.70159912 44.14424133]
[-42.26670456 58.67839432]
[-27.77781868 62.56068039]
[-13.28893089 66.44296265]
[1.19995630 70.32524872]
[13.93048477 62.67873383]
[28.67958069 66.40952301]
[36.61363602 79.81431580]
[51.10252380 83.69660187]
[65.59140778 87.57888794]
[80.08029938 91.46117401]
[66.38055420 85.35240936]
[59.28671646 72.13584900]
[61.76744843 57.34240723]
[72.78459930 47.16289902]
[87.72766876 45.85728073]
[100.34322357 53.97193909]
[105.35186768 68.11101532]
[100.65679169 82.35854340]
[107.53018951 69.02601624]
[106.97660828 53.21449661]
[119.68576813 45.44748306]
[126.55916595 32.11495209]
[133.43257141 18.78241920]
[140.30596924 5.44988728]
[139.75238037 -10.36163139]
[152.46154785 -18.12864494]
[159.33494568 -31.46117783]
[166.20834351 -44.79370880]
[173.08174133 -58.12623978]
[179.95513916 -71.45877075]
[186.82853699 -84.79130554]
[183.33290100 -100.44889069]
[193.50680542 -112.85336304]
[209.54573059 -112.48906708]
[219.14596558 -99.63546753]
[214.94302368 -84.15273285]
[200.16105652 -77.91790771]
[193.28765869 -64.58537292]
[186.41426086 -51.25284195]
[179.54086304 -37.92031097]
[172.66746521 -24.58778000]
[165.79406738 -11.25524807]
[166.83929443 3.60263896]
[153.63848877 12.32328510]
[146.76509094 25.65581703]
[139.89169312 38.98834991]
[133.01829529 52.32088089]
[134.06352234 67.17876434]
[120.86272430 75.89941406]
[113.98932648 89.23194122]
[113.45394135 104.22238922]
[119.35869598 118.01129150]
[125.67440033 124.74795532]
[125.23555756 132.19929504]
[130.81050110 146.12481689]
[136.38543701 160.05033875]
[141.96037292 173.97586060]
[147.53530884 187.90138245]
[159.84738159 197.83735657]
[157.39456177 212.52861023]
[162.96949768 226.45413208]
[168.54443359 240.37963867]
[174.11936951 254.30516052]
[179.69430542 268.23068237]
[185.26924133 282.15618896]
[197.58131409 292.09216309]
[195.12849426 306.78341675]
[201.84275818 320.19680786]
[209.64978027 333.00503540]
[217.45678711 345.81323242]
[225.26380920 358.62145996]
[233.07083130 371.42968750]
[249.41189575 379.81951904]
[249.25563049 397.32617188]
[257.36523438 409.94497681]
[265.47485352 422.56378174]
[279.12463379 432.61962891]
[273.24044800 448.51968384]
[256.33282471 447.26702881]
[252.85604858 430.67340088]
[244.74644470 418.05459595]
[236.63682556 405.43579102]
[224.83226013 402.52777100]
[217.98750305 391.99722290]
[220.26260376 379.23669434]
[212.45559692 366.42849731]
[204.64857483 353.62026978]
[196.84155273 340.81204224]
[189.03454590 328.00381470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 109]
[9 107]
[10 106]
[11 105]
[12 104]
[13 103]
[14 102]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 94]
[22 93]
[25 52]
[26 51]
[27 50]
[28 49]
[31 46]
[32 45]
[33 44]
[34 43]
[60 92]
[61 91]
[63 89]
[64 88]
[65 87]
[66 86]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
