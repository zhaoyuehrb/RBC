%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCGCUACGCCUCGGUGCAGCCCCCGGCGAAGCCCAGCGCAGCUCAGCUAAACUCAGCGGAGCCAGCGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[92.09751892 109.26799774]
[77.40065765 112.26838684]
[62.70379639 115.26876831]
[48.07033539 118.56449890]
[33.50620651 122.15423584]
[19.27816200 126.90425110]
[5.47846985 132.78375244]
[-8.32122135 138.66325378]
[-17.98433304 151.19061279]
[-32.72592545 149.06112671]
[-46.52561569 154.94062805]
[-60.32530975 160.82012939]
[-69.73903656 174.24821472]
[-86.04901886 172.54039001]
[-92.47693634 157.45352173]
[-82.41030121 144.50767517]
[-66.20481110 147.02043152]
[-52.40511703 141.14093018]
[-38.60542297 135.26142883]
[-29.92935944 123.15460968]
[-14.20072079 124.86356354]
[-0.40102917 118.98406219]
[13.39866257 113.10456085]
[14.51384354 110.24050140]
[16.99142456 107.71746826]
[20.67736435 106.12432861]
[25.18100357 105.96924591]
[29.91647339 107.59011078]
[44.48060226 104.00037384]
[50.38285828 99.20974731]
[59.70341110 100.57191467]
[74.40026855 97.57152557]
[89.09712982 94.57114410]
[103.66125488 90.98140717]
[118.06903076 86.80814362]
[132.38984680 82.34559631]
[146.61788940 77.59558105]
[154.00863647 71.75563812]
[161.51545715 72.95330811]
[175.92323303 68.78004456]
[190.33100891 64.60678101]
[204.73876953 60.43352127]
[217.00817871 46.87727356]
[233.83914185 51.40402985]
[248.06718445 46.65401077]
[262.29522705 41.90398788]
[276.52328491 37.15396881]
[287.16308594 25.44478416]
[301.68551636 28.75357628]
[315.91357422 24.00355721]
[330.14163208 19.25353622]
[336.97784424 5.00426817]
[351.91503906 -0.15865768]
[366.09121704 6.82783127]
[371.09594727 21.81877518]
[363.95996094 35.92031479]
[348.91693115 40.76625061]
[334.89163208 33.48158264]
[320.66360474 38.23160172]
[306.43554688 42.98162460]
[296.81341553 54.35105515]
[281.27331543 51.38201523]
[267.04525757 56.13203430]
[252.81721497 60.88205719]
[238.58915710 65.63207245]
[232.78076172 76.43980408]
[220.74510193 80.41208649]
[208.91203308 74.84129333]
[194.50427246 79.01455688]
[180.09649658 83.18781281]
[165.68872070 87.36107635]
[151.36790466 91.82362366]
[137.13986206 96.57364655]
[131.64222717 101.82366943]
[122.24229431 101.21591187]
[107.83451843 105.38917542]
[104.14675140 109.53676605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 29]
[5 28]
[6 23]
[7 22]
[8 21]
[10 19]
[11 18]
[12 17]
[34 76]
[35 75]
[36 73]
[37 72]
[39 71]
[40 70]
[41 69]
[42 68]
[44 65]
[45 64]
[46 63]
[47 62]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
