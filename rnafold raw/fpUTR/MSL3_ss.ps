%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCCCCCGGCCACGGCGCACCGCCUCCCCGCCCCCGCCCGCCCUCCCCCACCGCGCGCGCUCCGCCCGCCCCGGAGCCUCGCCCUCCGCCACGAUGAGCAA\
) } def
/len { sequence length } bind def

/coor [
[83.13784790 169.20195007]
[72.37149048 165.64988708]
[65.12960815 178.78590393]
[57.88772202 191.92193604]
[50.64583969 205.05795288]
[55.27730942 220.16838074]
[47.79388046 234.08865356]
[32.63533020 238.56010437]
[18.79496193 230.92991638]
[14.48401928 215.72494507]
[22.26010895 201.96601868]
[37.50981522 197.81607056]
[44.75169754 184.68005371]
[51.99357986 171.54402161]
[59.23546219 158.40800476]
[41.49642563 140.62725830]
[31.03196716 117.79474640]
[29.14328957 92.74955750]
[14.46494198 89.65988159]
[-0.21340552 86.57019806]
[-14.89175320 83.48052216]
[-24.47519493 93.51358032]
[-37.67227173 97.42960358]
[-50.96530914 94.29748535]
[-60.86677551 85.04996490]
[-64.83421326 72.20941925]
[-79.41455841 68.68613434]
[-92.76982117 77.13672638]
[-108.17034149 73.58715057]
[-116.47926331 60.14329147]
[-112.76705933 44.78115845]
[-99.23610687 36.61483383]
[-83.91407776 40.48925018]
[-75.89126587 54.10578918]
[-61.31092453 57.62907791]
[-49.23794556 46.61590195]
[-32.82128143 44.89386368]
[-18.44080925 53.32916260]
[-11.80207348 68.80216980]
[2.87627387 71.89185333]
[17.55462074 74.98152924]
[32.23296738 78.07121277]
[36.26866913 68.19496918]
[41.73429108 59.03233337]
[48.50720596 50.78887558]
[56.43545151 43.64955521]
[65.34114075 37.77455521]
[75.02446747 33.29568863]
[85.26815796 30.31345177]
[95.84238434 28.89475060]
[106.50988770 29.07141876]
[117.03134155 30.83949280]
[127.17066193 34.15930176]
[136.70036316 38.95635986]
[145.40663147 45.12303925]
[153.09411621 52.52097702]
[159.59034729 60.98418808]
[172.93519592 54.13475037]
[186.28005981 47.28531265]
[195.02439880 34.10020447]
[209.88038635 35.17210388]
[216.21105957 28.35975075]
[223.72373962 28.32405663]
[237.26570129 21.87307739]
[250.80766296 15.42210007]
[264.34963989 8.97112179]
[277.89160156 2.52014399]
[291.43356323 -3.93083405]
[295.18096924 -19.11276245]
[307.84082031 -28.29220581]
[323.43551636 -27.13491058]
[334.60174561 -16.18731880]
[336.06710815 -0.61854511]
[327.13973999 12.22030926]
[312.03488159 16.26712990]
[297.88455200 9.61113358]
[284.34259033 16.06211090]
[270.80059814 22.51309013]
[257.25863647 28.96406746]
[243.71667480 35.41504669]
[230.17471313 41.86602402]
[216.72982788 48.51696014]
[208.93998718 61.21215057]
[193.12948608 60.63016891]
[179.78463745 67.47960663]
[166.43977356 74.32904816]
[170.45835876 89.56634521]
[171.02816772 105.31435394]
[168.12127686 120.80223846]
[161.88000488 135.27189636]
[152.60984802 148.01506042]
[140.76454163 158.40800476]
[148.00642395 171.54402161]
[155.44215393 184.57130432]
[163.07012939 197.48695374]
[176.33097839 208.05038452]
[169.85134888 223.71725464]
[153.00300598 221.82785034]
[150.15447998 205.11491394]
[142.52650452 192.19926453]
[136.31538391 187.97273254]
[134.87039185 178.78590393]
[127.62850952 165.64988708]
[116.86215210 169.20195007]
[105.66858673 171.00077820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[18 42]
[19 41]
[20 40]
[21 39]
[26 35]
[27 34]
[57 86]
[58 85]
[59 84]
[61 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[92 103]
[93 102]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
