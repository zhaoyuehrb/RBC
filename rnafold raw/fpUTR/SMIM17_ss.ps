%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGUGCGGCGCCAGCUCUGCAGAGCCCAGACAGGGUCCGGUUGGGGAGGUCCUCAGGUUCUGAAUCUUGUGCCUGGAGAACCAGAGAGGACCCUGGAGCAGGAGGAGAAAGAGAAGCUUGUCUCAGAAGCUCCACCUCCUCCUGGGGCA\
) } def
/len { sequence length } bind def

/coor [
[74.39604187 214.82749939]
[59.60346222 216.34983826]
[58.09851074 225.42347717]
[51.94946671 229.60694885]
[44.31649399 242.51965332]
[36.68352509 255.43234253]
[36.32173157 271.24942017]
[23.18464661 278.26840210]
[15.55167580 291.18109131]
[20.91920090 305.86865234]
[15.54142475 320.55242920]
[1.95757008 328.29922485]
[-13.41848183 325.45123291]
[-23.32663155 313.35321045]
[-23.08855057 297.71743774]
[-12.81665611 285.92666626]
[2.63897800 283.54812622]
[10.27194786 270.63543701]
[10.08777905 255.74197388]
[23.77082634 247.79937744]
[31.40379715 234.88668823]
[39.03676605 221.97398376]
[46.53676605 208.98359680]
[40.18148422 195.53933716]
[42.99464417 180.75588989]
[54.10328674 170.34188843]
[69.39066315 168.44392395]
[76.75690460 155.37724304]
[84.12314606 142.31054688]
[91.48938751 129.24385071]
[78.86807251 119.97173309]
[73.01358795 106.22662354]
[74.88925934 92.13170624]
[83.24779510 81.53223419]
[76.97839355 67.90525818]
[70.70898438 54.27827454]
[64.43958282 40.65129852]
[58.17017746 27.02431870]
[51.90077209 13.39733887]
[45.63136673 -0.22964039]
[39.36196136 -13.85661983]
[22.86829567 -19.59649467]
[15.74090672 -35.16992950]
[21.92967033 -50.77769470]
[15.38179970 -64.27307892]
[8.83392906 -77.76846313]
[2.28605866 -91.26384735]
[-10.27228737 -91.82894897]
[-21.32306671 -97.66815186]
[-28.77929115 -107.60877228]
[-31.26278687 -119.71038055]
[-28.35860443 -131.64346313]
[-20.68288231 -141.13780212]
[-26.67117882 -154.89064026]
[-32.65947342 -168.64346313]
[-37.81733322 -172.93754578]
[-39.70165634 -178.38154602]
[-38.59839249 -183.08601379]
[-44.01701736 -197.07310486]
[-49.43564224 -211.06018066]
[-54.85426712 -225.04727173]
[-67.05428314 -235.12051392]
[-64.43708801 -249.78337097]
[-79.47161865 -253.62297058]
[-89.35201263 -265.58779907]
[-90.27906036 -281.07717896]
[-81.89628601 -294.13507080]
[-67.42704773 -299.74047852]
[-52.43505096 -295.73800659]
[-42.68503189 -283.66668701]
[-41.92607117 -268.16818237]
[-50.45000458 -255.20199585]
[-38.63756561 -246.12921143]
[-40.86718369 -230.46589661]
[-35.44855881 -216.47880554]
[-30.02993393 -202.49172974]
[-24.61130905 -188.50463867]
[-18.90664673 -174.63175964]
[-12.91834927 -160.87893677]
[-6.93005323 -147.12609863]
[10.42885399 -144.15634155]
[22.67156792 -131.27992249]
[24.79944229 -113.48266602]
[15.78144264 -97.81172180]
[22.32931328 -84.31633759]
[28.87718391 -70.82095337]
[35.42505264 -57.32556534]
[48.10379028 -54.83519363]
[57.15428925 -45.34218597]
[59.09401703 -32.17333603]
[52.98894119 -20.12602425]
[59.25834656 -6.49904537]
[65.52774811 7.12793350]
[71.79715729 20.75491333]
[78.06655884 34.38189316]
[84.33596802 48.00886917]
[90.60536957 61.63584900]
[96.87477875 75.26283264]
[111.58976746 76.37508392]
[123.85415649 85.92816162]
[129.04167175 101.41781616]
[124.60062408 117.95668793]
[138.41419983 123.80347443]
[152.22778320 129.65026855]
[166.04136658 135.49705505]
[179.85494995 141.34384155]
[193.66853333 147.19062805]
[207.48211670 153.03741455]
[221.29570007 158.88420105]
[235.10928345 164.73098755]
[246.96287537 158.25781250]
[260.18521118 159.79109192]
[269.95242310 168.54495239]
[272.83206177 181.14099121]
[282.00585938 181.80230713]
[286.73883057 187.53912354]
[300.30075073 193.94808960]
[309.45901489 194.79763794]
[314.07321167 200.63041687]
[327.50067139 207.31648254]
[340.92813110 214.00256348]
[354.35556030 220.68864441]
[368.61978149 214.28033447]
[383.65182495 218.58987427]
[392.35400391 231.58239746]
[390.61743164 247.12326050]
[379.26208496 257.87454224]
[363.64956665 258.75979614]
[351.15167236 249.36103821]
[347.66949463 234.11608887]
[334.24203491 227.43000793]
[320.81460571 220.74394226]
[307.38714600 214.05786133]
[293.89175415 207.50999451]
[280.32986450 201.10101318]
[266.70288086 194.83160400]
[251.29310608 201.49807739]
[235.50756836 194.85365295]
[229.26249695 178.54457092]
[215.44891357 172.69778442]
[201.63533020 166.85099792]
[187.82174683 161.00421143]
[174.00816345 155.15742493]
[160.19458008 149.31063843]
[146.38099670 143.46385193]
[132.56741333 137.61705017]
[118.75382996 131.77026367]
[104.55607605 136.61009216]
[97.18984222 149.67678833]
[89.82360077 162.74346924]
[82.45735931 175.81016541]
[88.74741364 189.87222290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[27 151]
[28 150]
[29 149]
[30 148]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[44 87]
[45 86]
[46 85]
[47 84]
[53 80]
[54 79]
[55 78]
[58 77]
[59 76]
[60 75]
[61 74]
[63 72]
[102 147]
[103 146]
[104 145]
[105 144]
[106 143]
[107 142]
[108 141]
[109 140]
[110 139]
[114 136]
[116 135]
[117 134]
[119 133]
[120 132]
[121 131]
[122 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
