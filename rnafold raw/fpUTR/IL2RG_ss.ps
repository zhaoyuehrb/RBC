%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAAACGUGUGGGUGGGGAGGGGUAGUGGGUGAGGGACCCAGGUUCCUGACACAGACAGACUACACCCAGGGAAUGAAGAGCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[135.10610962 372.41101074]
[123.56230164 365.20910645]
[113.95828247 355.55941772]
[106.80248260 343.96731567]
[102.47496033 331.04129028]
[101.20720673 317.46078491]
[103.06978607 303.94058228]
[107.96837616 291.19311523]
[115.64859009 279.89108276]
[125.70915222 270.63171387]
[137.62286377 263.90545654]
[126.76861572 253.70570374]
[130.54090881 238.34078979]
[126.53639984 223.88520813]
[122.53189087 209.42962646]
[118.52738190 194.97404480]
[114.52288055 180.51846313]
[110.51837158 166.06286621]
[99.66413116 155.86312866]
[103.43641663 140.49822998]
[99.43190765 126.04264069]
[86.60594940 122.34146881]
[77.29763794 112.77280426]
[73.95159912 99.84964752]
[77.44659424 86.96597290]
[86.86474609 77.50540161]
[83.35075378 62.92281723]
[72.68077850 55.43925858]
[70.13806915 43.06877136]
[76.56764221 32.67052460]
[73.54816437 17.97757339]
[63.19129181 6.01739931]
[68.20822906 -8.00685215]
[65.18875122 -22.69980049]
[54.83187866 -34.65997696]
[59.84881592 -48.68422699]
[56.82933807 -63.37717438]
[53.80986023 -78.07012177]
[50.79038239 -92.76307678]
[47.77090454 -107.45602417]
[44.75142670 -122.14897156]
[33.46222687 -134.04376221]
[38.37762833 -149.68891907]
[54.44108582 -152.99003601]
[65.12789154 -140.55122375]
[59.44437408 -125.16844940]
[62.46385193 -110.47550201]
[65.48332977 -95.78255463]
[68.50280762 -81.08959961]
[71.52228546 -66.39665222]
[74.54176331 -51.70370483]
[84.68266296 -40.79446793]
[79.88169861 -25.71927834]
[82.90117645 -11.02632999]
[93.04207611 -0.11709277]
[88.24111176 14.95809650]
[91.26058960 29.65104485]
[103.61091614 41.99311066]
[97.93333435 59.40881729]
[101.44733429 73.99140167]
[116.51097107 79.85230255]
[125.21727753 93.47079468]
[124.21402740 109.60326385]
[113.88749695 122.03813171]
[117.89199829 136.49371338]
[129.03266907 147.72741699]
[124.97395325 162.05836487]
[128.97845459 176.51394653]
[132.98297119 190.96952820]
[136.98747253 205.42512512]
[140.99197388 219.88070679]
[144.99649048 234.33628845]
[156.13716125 245.56999207]
[152.07844543 259.90093994]
[168.63977051 259.86831665]
[184.55833435 264.38961792]
[198.60758972 273.10891724]
[209.70707703 285.34713745]
[217.00553894 300.15493774]
[219.94619751 316.38629150]
[218.30923462 332.78723145]
[212.22816467 348.09271240]
[202.17904663 361.12420654]
[188.94314575 370.88037109]
[194.38955688 384.85665894]
[207.51763916 394.68444824]
[205.30213928 410.93325806]
[190.02220154 416.88769531]
[177.39648438 406.42233276]
[180.41326904 390.30307007]
[174.96685791 376.32678223]
[161.50422668 378.11633301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 74]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[20 65]
[21 64]
[26 60]
[27 59]
[30 57]
[31 56]
[33 54]
[34 53]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
