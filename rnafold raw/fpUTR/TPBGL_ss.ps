%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGACUUUCGAGACAGCGAACGGACCGACCGGGACUGCCAGCCGCUCCGGGUCAAGGACUCGCCCCACCCGUGCCCCCCACCAGGCGCUCCCAACUCACUGGUGAGCGCGGCGGCCCGGGCGCUGGAUGCGGGGGCGGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[29.20418549 294.08193970]
[31.63358498 308.88391113]
[27.99744987 323.43652344]
[18.89134789 335.35620117]
[5.80676842 342.69061279]
[-9.11315536 344.23849487]
[-23.42468262 339.74624634]
[-34.78204727 329.95187378]
[-32.28792953 315.16067505]
[-41.56800079 326.94543457]
[-50.84807205 338.73019409]
[-60.12814331 350.51492310]
[-58.01345825 366.17709351]
[-67.65930176 378.69641113]
[-83.34295654 380.64538574]
[-95.75959015 370.86773682]
[-97.54264069 355.16436768]
[-87.63424683 342.85177612]
[-71.91288757 341.23486328]
[-62.63282013 329.45010376]
[-53.35274887 317.66537476]
[-44.07267761 305.88061523]
[-52.96760941 293.80252075]
[-66.97516632 299.16799927]
[-80.98272705 304.53347778]
[-88.80537415 318.54010010]
[-104.65640259 321.01486206]
[-116.37626648 310.05929565]
[-114.97448730 294.07760620]
[-101.52638245 285.32955933]
[-86.34819794 290.52590942]
[-72.34063721 285.16043091]
[-58.33308029 279.79498291]
[-46.35139084 270.77059937]
[-37.32703018 258.78890991]
[-35.80424118 251.50094604]
[-27.97734261 246.64930725]
[-18.69727135 234.86456299]
[-9.41720009 223.07980347]
[-0.13712895 211.29505920]
[9.14294243 199.51031494]
[8.03506184 187.41906738]
[15.73262882 177.51496887]
[28.51659203 175.47642517]
[38.04807663 163.89407349]
[47.57955933 152.31172180]
[57.11104584 140.72938538]
[66.51736450 129.04515076]
[75.79743958 117.26040649]
[85.07750702 105.47566223]
[86.36698151 90.53118896]
[79.24271393 77.33100128]
[72.11844635 64.13082123]
[64.99418640 50.93063736]
[54.32329178 48.39444733]
[46.99047089 40.53685760]
[45.26914215 30.15138245]
[49.49431992 20.75056076]
[42.94454956 7.25609827]
[27.93099785 2.31962490]
[20.88010025 -11.82464600]
[25.97502899 -26.78516769]
[40.19305420 -33.68613052]
[55.09887695 -28.43331337]
[61.84913254 -14.14312077]
[56.43901443 0.70632964]
[62.98878098 14.20079231]
[79.75035858 23.75597382]
[78.19436646 43.80636978]
[85.31863403 57.00655365]
[92.44290161 70.20674133]
[99.56716156 83.40692139]
[113.84295654 88.01146698]
[127.33741760 81.46170044]
[140.83187866 74.91193390]
[154.32633972 68.36215973]
[167.82080078 61.81239319]
[181.31526184 55.26262665]
[191.76792908 38.08177948]
[210.95367432 40.12113571]
[224.15385437 32.99687195]
[232.62333679 19.63354492]
[247.49833679 20.39763260]
[260.69851685 13.27336597]
[264.55334473 7.75809526]
[269.83486938 5.42339849]
[274.62344360 6.14048576]
[288.11788940 -0.40928265]
[301.61236572 -6.95905113]
[315.10681152 -13.50881958]
[328.60128784 -20.05858803]
[342.09573364 -26.60835648]
[355.51895142 -33.30292892]
[368.86938477 -40.14152908]
[382.21978760 -46.98012924]
[386.83209229 -62.09642029]
[400.82138062 -69.45001221]
[415.88806152 -64.67815399]
[423.09332275 -50.61190414]
[418.16244507 -35.59651566]
[404.02081299 -28.54035378]
[389.05838013 -33.62971497]
[375.70797729 -26.79111481]
[362.35757446 -19.95251465]
[357.80529785 -14.06096172]
[348.64550781 -13.11389351]
[335.15106201 -6.56412506]
[321.65658569 -0.01435657]
[308.16213989 6.53541183]
[294.66766357 13.08518028]
[281.17318726 19.63494873]
[267.82278442 26.47354889]
[254.62260437 33.59781647]
[247.09729004 46.45156479]
[231.27812195 46.19705200]
[218.07794189 53.32131958]
[216.01396179 63.41921616]
[208.54881287 70.84166718]
[198.00677490 72.93385315]
[187.86503601 68.75708771]
[174.37057495 75.30685425]
[160.87611389 81.85662842]
[147.38165283 88.40639496]
[133.88719177 94.95616150]
[120.39272308 101.50592804]
[110.66412354 114.21059418]
[96.86225891 114.75572968]
[87.58218384 126.54048157]
[78.30211639 138.32522583]
[75.42108154 147.07156372]
[68.69338989 150.26086426]
[59.16191101 161.84321594]
[49.63042450 173.42556763]
[40.09894180 185.00790405]
[37.53267288 203.20849609]
[20.92769051 208.79039001]
[11.64761925 220.57513428]
[2.36754775 232.35987854]
[-6.91252327 244.14462280]
[-16.19259453 255.92938232]
[-25.34534073 267.81329346]
[-34.36970139 279.79498291]
[-20.70575142 273.60656738]
[-6.07379389 270.30416870]
[8.66874027 273.07141113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 22]
[10 21]
[11 20]
[12 19]
[23 33]
[24 32]
[25 31]
[34 142]
[35 141]
[37 140]
[38 139]
[39 138]
[40 137]
[41 136]
[44 134]
[45 133]
[46 132]
[47 131]
[48 129]
[49 128]
[50 127]
[51 72]
[52 71]
[53 70]
[54 69]
[58 67]
[59 66]
[73 125]
[74 124]
[75 123]
[76 122]
[77 121]
[78 120]
[80 116]
[81 115]
[83 113]
[84 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
