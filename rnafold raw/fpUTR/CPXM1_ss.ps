%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCGCACUCGGCAGGAAGAGACCGACCCGCCACCCGCCGUAGCCCGCGCGCCCCUGGCACUCAAUCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[132.34904480 186.81472778]
[144.14451599 177.54827881]
[158.16658020 172.22082520]
[173.13784790 171.31697083]
[161.99067688 161.28001404]
[150.84350586 151.24305725]
[139.69633484 141.20610046]
[120.67775726 138.91281128]
[114.05761719 120.08615875]
[102.10967255 111.01716614]
[89.97441864 102.20039368]
[77.65718079 93.63968658]
[65.33994293 85.07898712]
[53.02270126 76.51828003]
[37.27491760 74.99581146]
[31.23971176 61.37870789]
[18.92247391 52.81800461]
[3.56284761 55.41023254]
[-8.80663300 46.55299759]
[-11.18327045 31.89396667]
[-26.93105316 30.37150002]
[-32.96625900 16.75439453]
[-48.00833893 21.02872658]
[-62.25750732 14.58705425]
[-68.98574829 0.47093573]
[-65.01618958 -14.65442753]
[-52.22313690 -23.64730263]
[-36.64707565 -22.26152802]
[-25.64254951 -11.15142441]
[-24.40555573 4.43715668]
[-9.53878498 5.34730577]
[-2.62256670 19.57672882]
[11.94550800 16.69458008]
[24.55888939 25.20088768]
[27.48317719 40.50076675]
[39.80041504 49.06147003]
[54.66718674 49.97161865]
[61.58340454 64.20104218]
[73.90064240 72.76174927]
[86.21788025 81.32244873]
[98.53511810 89.88315582]
[106.67336273 91.61064148]
[111.17865753 99.06922150]
[123.12660980 108.13820648]
[134.16950989 106.00197601]
[144.29280090 110.36712646]
[150.08006287 119.48686981]
[149.73329163 130.05892944]
[160.88046265 140.09588623]
[172.02763367 150.13284302]
[183.17480469 160.16979980]
[197.23403931 165.39837646]
[212.23074341 165.08424377]
[227.22746277 164.77011108]
[242.93649292 158.39338684]
[253.41270447 171.72325134]
[243.50387573 185.48011780]
[227.54159546 179.76681519]
[212.54487610 180.08096313]
[197.54817200 180.39509583]
[208.29165649 190.86302185]
[215.42481995 204.05841064]
[218.29859924 218.78054810]
[216.65151978 233.68983459]
[210.63343811 247.42965698]
[200.79194641 258.74978638]
[188.02256775 266.62014771]
[173.48721313 270.32464600]
[158.50846863 269.52618408]
[144.44932556 264.29739380]
[132.58903503 255.11405945]
[124.00679016 242.81181335]
[119.48352814 228.51007080]
[119.43082428 213.51016235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[7 48]
[9 44]
[10 43]
[11 41]
[12 40]
[13 39]
[14 38]
[16 36]
[17 35]
[20 32]
[22 30]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
