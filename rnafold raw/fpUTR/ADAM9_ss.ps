%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCAGGGUUGGAAAAUGAUGGAAGAGGCGGAGGUGGAGGCGACCGAGUGCUGAGAGGAACCUGCGGAAUCGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[11.70011711 233.57728577]
[4.81065798 246.90151978]
[-2.07880139 260.22576904]
[-8.96826077 273.55001831]
[-10.87227345 290.39669800]
[-27.58767319 293.23071289]
[-34.93822861 277.95309448]
[-22.29249954 266.66055298]
[-15.40304089 253.33630371]
[-8.51358128 240.01206970]
[-1.62412190 226.68782043]
[-9.25829220 218.55635071]
[-14.21154404 208.53898621]
[-16.04571533 197.49360657]
[-14.59036350 186.37023926]
[-9.95852566 176.12925720]
[-2.53804016 167.65856934]
[7.04089832 161.69654846]
[17.95924759 158.76768494]
[29.27914429 159.13655090]
[40.02446747 162.78382874]
[49.41008759 151.08297729]
[47.53425217 136.35148621]
[56.88592529 124.35144806]
[72.35038757 122.48377991]
[81.73600769 110.78292084]
[79.50146484 94.55436707]
[89.49551392 81.57445526]
[105.75611115 79.58647156]
[114.66912842 67.52172852]
[116.64596558 51.82450867]
[130.43176270 46.18526459]
[139.34477234 34.12051392]
[148.25779724 22.05576706]
[157.17080688 9.99101830]
[149.98599243 -8.29032040]
[154.83634949 -27.18310547]
[169.72816467 -39.56731033]
[188.91513062 -40.87301254]
[195.80459595 -54.19725418]
[202.69406128 -67.52149200]
[209.58351135 -80.84573364]
[204.55123901 -95.82744598]
[211.66128540 -109.94208527]
[226.69535828 -114.81567383]
[240.73403931 -107.55680847]
[245.44841003 -92.47203827]
[238.04151917 -78.51089478]
[222.90776062 -73.95627594]
[216.01829529 -60.63203430]
[209.12882996 -47.30779266]
[202.23937988 -33.98355484]
[209.15229797 -25.50427055]
[212.72389221 -15.12223530]
[212.48902893 -4.10648060]
[208.44967651 6.18661356]
[201.07786560 14.48033333]
[191.26074219 19.73598099]
[180.19386292 21.28291702]
[169.23556519 18.90403366]
[160.32254028 30.96878242]
[151.40953064 43.03353119]
[142.49650574 55.09827805]
[141.15719604 69.93254852]
[126.73387909 76.43474579]
[117.82086182 88.49948883]
[121.19125366 100.88061523]
[116.80524445 112.93941498]
[106.26819611 120.26214600]
[93.43686676 120.16854095]
[84.05124664 131.86940002]
[85.58353424 147.37068176]
[75.89849854 159.10331726]
[61.11094666 160.46859741]
[51.72532654 172.16944885]
[59.97507095 189.80751038]
[58.57415009 209.15486145]
[47.95085526 225.29679871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[21 75]
[22 74]
[25 71]
[26 70]
[29 66]
[30 65]
[32 63]
[33 62]
[34 61]
[35 60]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
