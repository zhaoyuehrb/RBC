%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCCGCCACUGGAACCAGGAGAUGCGGCGCAGGAGCUGUCGCUGUGUUUGCUUUAACCUGAGUCUUGUUCCUUAUUGUGGUUCCUGCUGUGGUUUUGAUC\
) } def
/len { sequence length } bind def

/coor [
[105.37408447 404.34048462]
[105.39671326 389.03500366]
[112.53983307 375.49859619]
[125.16199493 366.84182739]
[123.33647156 351.95330811]
[121.51095581 337.06481934]
[119.68544006 322.17630005]
[117.85992432 307.28781128]
[106.00276947 298.34671021]
[103.93934631 283.27365112]
[113.39800262 270.89739990]
[104.16928864 259.20635986]
[110.16957855 244.56713867]
[108.34406281 229.67863464]
[106.51854706 214.79013062]
[104.69303131 199.90162659]
[102.86750793 185.01312256]
[101.04199219 170.12461853]
[99.21647644 155.23612976]
[89.98776245 143.54508972]
[95.98805237 128.90586853]
[94.16253662 114.01736450]
[86.72866821 100.98902130]
[74.83998871 91.84248352]
[62.95130157 82.69594574]
[51.06261444 73.54940796]
[39.17392731 64.40287018]
[27.28524208 55.25633240]
[15.39655685 46.10979462]
[3.50787163 36.96325684]
[-8.38081455 27.81672096]
[-20.40760040 18.85254669]
[-32.56969070 10.07282257]
[-44.73178101 1.29309821]
[-61.11325836 -3.07537413]
[-61.45035172 -20.02597046]
[-45.25550842 -25.04228210]
[-35.95205688 -10.86899185]
[-23.78996658 -2.08926797]
[-11.62787628 6.69045639]
[-4.23683023 8.07688236]
[0.76572371 15.92803478]
[12.65440941 25.07457161]
[24.54309464 34.22111130]
[36.43178177 43.36764908]
[48.32046509 52.51418686]
[60.20915222 61.66072464]
[72.09783936 70.80725861]
[83.98652649 79.95379639]
[95.87520599 89.10033417]
[96.98728180 86.35032654]
[98.81600189 83.74068451]
[105.02830505 70.08757782]
[111.24060822 56.43447113]
[117.45290375 42.78136444]
[111.67533875 28.07098770]
[118.06828308 13.61741352]
[132.83892822 7.99569511]
[147.22410583 14.54109669]
[152.68934631 29.37034798]
[145.99221802 43.68551636]
[131.10601807 48.99366760]
[124.89370728 62.64677429]
[118.68141174 76.29988098]
[112.46910858 89.95298767]
[122.55741882 78.85227203]
[136.55136108 73.45136261]
[151.48159790 74.89624023]
[164.18019104 82.88034058]
[171.95268250 95.70954132]
[173.14985657 110.66168976]
[167.51770020 124.56416321]
[156.25126648 134.46707153]
[141.74111938 138.26916504]
[127.06610870 135.16368103]
[115.34003448 125.80958557]
[109.05104065 112.19184113]
[110.87655640 127.08034515]
[120.23583984 139.83630371]
[114.10498047 153.41059875]
[115.93049622 168.29910278]
[117.75601196 183.18760681]
[119.58152771 198.07611084]
[121.40704346 212.96461487]
[123.23256683 227.85311890]
[125.05808258 242.74162292]
[134.41735840 255.49757385]
[128.28649902 269.07186890]
[140.45498657 278.79635620]
[142.09422302 293.92141724]
[132.74842834 305.46228027]
[134.57394409 320.35079956]
[136.39945984 335.23928833]
[138.22497559 350.12780762]
[140.05049133 365.01629639]
[154.39016724 370.36721802]
[164.59199524 381.77691650]
[168.31166077 396.62356567]
[164.69441223 411.49548340]
[154.57147217 422.97521973]
[140.26901245 428.42483521]
[125.07363892 426.59204102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[11 88]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[19 80]
[21 78]
[22 77]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 40]
[33 39]
[34 38]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
