%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGAGCGGCGCCUGAUGACGACCGGGAGGGCGGGGCCCGUCUGGGGCGCCGGCGGGUGCGUUUGAAUCUGGUCCGAGCGCGGGAAACGGCGGGUCCCCGAGCCCAGGGUUACAAAAUAAAUGCCAUUUGAACAGUGCCAUCUGUC\
) } def
/len { sequence length } bind def

/coor [
[105.46665955 111.23217773]
[102.61841583 125.95928192]
[108.48060608 141.27485657]
[97.93931580 153.83723450]
[81.83852386 150.72331238]
[76.74134064 135.13642883]
[87.89131165 123.11103821]
[90.73955536 108.38393402]
[90.10293579 93.39745331]
[86.01601410 78.96495056]
[81.92908478 64.53245544]
[77.84215546 50.09995651]
[62.14735794 50.01235199]
[47.12292480 45.52391052]
[33.97629547 37.00382996]
[23.76161385 25.14499092]
[17.29520226 10.90757465]
[15.09032440 -4.55864954]
[17.31646347 -20.00718880]
[23.78631020 -34.19528580]
[33.97150803 -45.98388672]
[47.04578018 -54.42909241]
[42.65343857 -68.77159119]
[38.26109695 -83.11408997]
[33.86875534 -97.45659637]
[22.40803719 -100.91434479]
[14.14739704 -109.41139984]
[11.07735252 -120.73287201]
[13.85615826 -132.00544739]
[21.67276001 -140.42652893]
[17.89308929 -154.94252014]
[14.11341858 -169.45851135]
[10.33374786 -183.97450256]
[6.09387445 -198.36282349]
[1.39809740 -212.60885620]
[-3.29767966 -226.85490417]
[-7.99345684 -241.10093689]
[-12.68923378 -255.34698486]
[-17.38501167 -269.59301758]
[-22.08078766 -283.83905029]
[-26.77656555 -298.08511353]
[-31.47234154 -312.33114624]
[-36.16812134 -326.57717896]
[-54.28882217 -329.66677856]
[-68.31067657 -341.42254639]
[-74.45743561 -358.56744385]
[-71.12985229 -376.38854980]
[-59.32073593 -390.03250122]
[-64.91358185 -403.95083618]
[-70.50643158 -417.86917114]
[-76.09928131 -431.78750610]
[-81.83953094 -445.64569092]
[-87.72653961 -459.44219971]
[-93.61354828 -473.23867798]
[-99.79206848 -486.90710449]
[-106.25931549 -500.44131470]
[-112.72655487 -513.97552490]
[-119.19380188 -527.50970459]
[-125.66104889 -541.04394531]
[-140.94415283 -543.72839355]
[-151.70635986 -554.90667725]
[-153.80935669 -570.28057861]
[-146.44451904 -583.93853760]
[-132.44375610 -590.62866211]
[-117.19066620 -587.77862549]
[-106.55036926 -576.48419189]
[-104.61426544 -561.08837891]
[-112.12683868 -547.51116943]
[-105.65959167 -533.97698975]
[-99.19235229 -520.44274902]
[-92.72510529 -506.90856934]
[-86.25785828 -493.37435913]
[-82.06974030 -490.95031738]
[-79.39669800 -485.83624268]
[-79.81706238 -479.12570190]
[-73.93005371 -465.32919312]
[-68.04303741 -451.53271484]
[-62.48654175 -446.58065796]
[-62.18094254 -437.38037109]
[-56.58809662 -423.46203613]
[-50.99525070 -409.54370117]
[-45.40240097 -395.62536621]
[-33.51252365 -395.59829712]
[-22.30557632 -391.52368164]
[-13.12132931 -383.86349487]
[-7.06625032 -373.50985718]
[-4.88023281 -361.68115234]
[-6.84625721 -349.77865601]
[-12.75400352 -339.22055054]
[-21.92207909 -331.27294922]
[-17.22630119 -317.02691650]
[-12.53052425 -302.78088379]
[-7.83474731 -288.53485107]
[-3.13897038 -274.28878784]
[1.55680680 -260.04275513]
[6.25258398 -245.79672241]
[10.94836140 -231.55067444]
[15.64413834 -217.30464172]
[20.33991623 -203.05859375]
[23.37821388 -201.14346313]
[25.61163139 -197.62730408]
[26.28224373 -192.91824341]
[24.84974098 -187.75418091]
[28.62941360 -173.23818970]
[32.40908432 -158.72218323]
[36.18875504 -144.20619202]
[52.48253632 -135.97293091]
[57.74130249 -118.15966797]
[48.21125793 -101.84893799]
[52.60359955 -87.50643158]
[56.99594116 -73.16393280]
[61.38828278 -58.82143402]
[75.74829102 -59.27833176]
[89.74613190 -55.98767853]
[102.41992950 -49.16910934]
[112.89707184 -39.28490829]
[120.45436859 -27.00868225]
[124.56789398 -13.17943478]
[124.94934845 1.25575364]
[121.56625366 15.30659485]
[114.64459991 28.00752831]
[104.65374756 38.48406982]
[92.27465820 46.01302719]
[96.36158752 60.44552612]
[100.44850922 74.87802887]
[104.53543854 89.31052399]
[106.55161285 74.44664001]
[116.38424683 63.11883163]
[130.81694031 59.03259659]
[145.12854004 63.52460861]
[154.63749695 75.12545776]
[156.23329163 90.04032898]
[149.39248657 103.39183807]
[154.68865967 117.42574310]
[159.98481750 131.45965576]
[165.28099060 145.49356079]
[179.78373718 151.77416992]
[185.51989746 166.50074768]
[179.08630371 180.93627930]
[164.29991150 186.51641846]
[149.93321228 179.93057251]
[144.50970459 165.08599854]
[151.24708557 150.78973389]
[145.95091248 136.75582886]
[140.65475464 122.72190857]
[135.35858154 108.68800354]
[127.88560486 109.32404327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[9 126]
[10 125]
[11 124]
[12 123]
[22 112]
[23 111]
[24 110]
[25 109]
[30 106]
[31 105]
[32 104]
[33 103]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[39 94]
[40 93]
[41 92]
[42 91]
[43 90]
[48 82]
[49 81]
[50 80]
[51 79]
[52 77]
[53 76]
[54 75]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
