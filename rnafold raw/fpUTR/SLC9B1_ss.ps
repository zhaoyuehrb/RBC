%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCCCCGCCCCUGCGCGGAAGUCUAUCCGGGCUUUCGCGUCACCACCCUGCCCACCUGGGUGGCGCGUGGCUUACGCAACGGUCACUGGGCUCCUGGGCCGCUCCCGGGCCAGCGAGGGCUGCGAAAGAAGUUGUAGC\
) } def
/len { sequence length } bind def

/coor [
[223.21534729 286.29629517]
[217.43705750 272.45391846]
[211.65878296 258.61154175]
[205.88049316 244.76916504]
[199.95050049 230.99108887]
[193.86952209 217.27897644]
[187.78855896 203.56687927]
[167.33006287 203.59548950]
[151.24240112 192.32643127]
[144.83895874 174.62355042]
[149.57064819 157.24714661]
[138.67680359 146.93577576]
[127.78297424 136.62440491]
[116.88912964 126.31304169]
[100.45196533 131.26362610]
[83.87856293 126.79026794]
[72.16472626 114.24137115]
[57.56204987 117.67091370]
[42.95936966 121.10045624]
[28.35669136 124.52999115]
[13.75401115 127.95953369]
[-0.84866852 131.38906860]
[-15.45134830 134.81861877]
[-30.05402756 138.24815369]
[-44.65670776 141.67770386]
[-59.25938797 145.10723877]
[-73.86206818 148.53677368]
[-88.46474457 151.96632385]
[-100.03890228 163.58401489]
[-115.81550598 159.10844421]
[-119.56494141 143.14367676]
[-107.43010712 132.11289978]
[-91.89428711 137.36363220]
[-77.29161072 133.93409729]
[-62.68892670 130.50456238]
[-48.08624649 127.07501984]
[-33.48357010 123.64547729]
[-18.88088799 120.21593475]
[-4.27820921 116.78639221]
[10.32447052 113.35685730]
[24.92715073 109.92731476]
[39.52983093 106.49777222]
[54.13250732 103.06822968]
[68.73519135 99.63869476]
[69.61586761 92.62276459]
[72.05049896 85.98413086]
[75.91457367 80.06232452]
[66.99149323 68.00501251]
[58.06841660 55.94770432]
[49.14533615 43.89039612]
[40.22225952 31.83308792]
[31.29918289 19.77577972]
[15.91242695 20.89440536]
[2.37443328 13.49668503]
[-4.99487543 -0.05679550]
[-3.84397912 -15.44116974]
[5.45987558 -27.74734116]
[19.94786263 -33.04845428]
[34.99691772 -29.65294266]
[45.80493927 -18.64430237]
[48.92313385 -3.53535008]
[43.35649109 10.85270119]
[52.27956772 22.91000938]
[61.20264435 34.96731949]
[70.12572479 47.02462769]
[79.04879761 59.08193588]
[87.97187805 71.13924408]
[92.02680206 69.76678467]
[96.23119354 68.96107483]
[100.50622559 68.73719788]
[104.77177429 69.09936523]
[110.55006409 55.25698853]
[116.32834625 41.41461182]
[122.10663605 27.57223511]
[127.88491821 13.72985840]
[133.66320801 -0.11251903]
[125.47721100 -13.29466915]
[126.63645172 -28.76838303]
[136.69517517 -40.58369827]
[151.78559875 -44.19739151]
[166.10514832 -38.21991730]
[174.14765930 -24.94973946]
[172.82063293 -9.48951149]
[162.63432312 2.21599174]
[147.50558472 5.66576719]
[141.72729492 19.50814438]
[135.94900513 33.35052109]
[130.17073059 47.19289780]
[124.39244080 61.03527451]
[118.61415100 74.87765503]
[130.58839417 93.52164459]
[127.20050049 115.41920471]
[138.09434509 125.73056793]
[148.98817444 136.04193115]
[159.88201904 146.35330200]
[174.28462219 140.64143372]
[190.30224609 143.03034973]
[203.51031494 153.56686401]
[209.91316223 169.95785522]
[224.91224670 170.12261963]
[239.91134644 170.28738403]
[253.79566956 162.70213318]
[266.43719482 170.57876587]
[281.43627930 170.74353027]
[296.43539429 170.90829468]
[310.45352173 162.39807129]
[324.70059204 170.51918030]
[324.52047729 186.91734314]
[310.09841919 194.72352600]
[296.27059937 185.90739441]
[281.27151489 185.74263000]
[266.27243042 185.57786560]
[253.46093750 193.17489624]
[239.74658203 185.28648376]
[224.74748230 185.12170410]
[209.74839783 184.95693970]
[201.50065613 197.48590088]
[207.58163452 211.19801331]
[213.66259766 224.91011047]
[220.05140686 231.54902649]
[219.72286987 238.99087524]
[225.50115967 252.83325195]
[231.27943420 266.67562866]
[237.05772400 280.51800537]
[243.28895569 294.16247559]
[249.96635437 307.59423828]
[256.64373779 321.02603149]
[263.32113647 334.45779419]
[269.99853516 347.88955688]
[285.05822754 352.68347168]
[292.24288940 366.76028442]
[287.29000854 381.76843262]
[273.13803101 388.80386353]
[258.18307495 383.69256592]
[251.29766846 369.46701050]
[256.56677246 354.56695557]
[249.88937378 341.13519287]
[243.21197510 327.70339966]
[236.53457642 314.27163696]
[229.85717773 300.83987427]
[226.56851196 299.37728882]
[223.85070801 296.20663452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[5 119]
[6 118]
[7 117]
[11 95]
[12 94]
[13 93]
[14 92]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[99 116]
[100 115]
[101 114]
[103 112]
[104 111]
[105 110]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
