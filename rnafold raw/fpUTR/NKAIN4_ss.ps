%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCCAGGCUGCGGCGCGUGGGGAGCGGGCGGAGCGGGGGCGGGGGCCGAGCGCGGGGCACCCGGGGGCCUCCUGUAUAGGCGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[143.66529846 129.21153259]
[151.50956726 116.42609406]
[162.68447876 106.41898346]
[147.68672180 106.67789459]
[132.68894958 106.93679810]
[117.69118500 107.19570923]
[107.54869843 117.54347229]
[93.06133270 117.79357147]
[82.56772614 107.80205536]
[67.56996155 108.06096649]
[52.57219315 108.31987000]
[43.83199692 111.65449524]
[37.05437469 108.31987000]
[23.12270737 115.81782532]
[10.53088284 107.86199188]
[-4.46688223 107.60308075]
[-18.39855003 115.10102844]
[-30.99037552 107.14520264]
[-45.98814011 106.88629150]
[-60.98590469 106.62738037]
[-73.47676849 116.69505310]
[-89.10394287 113.06589508]
[-95.87960815 98.52388763]
[-88.60604858 84.22441864]
[-72.86291504 81.13681030]
[-60.72699738 91.62961578]
[-45.72922897 91.88852692]
[-30.73146439 92.14743805]
[-17.87253761 84.63097382]
[-4.20797300 92.60531616]
[10.78979206 92.86422729]
[23.64871979 85.34776306]
[37.31328583 93.32210541]
[52.31328583 93.32210541]
[67.31105042 93.06320190]
[82.30881500 92.80429077]
[92.45130157 82.45652771]
[106.93866730 82.20642853]
[117.43227386 92.19794464]
[132.43003845 91.93903351]
[147.42781067 91.68013000]
[162.42556763 91.42121887]
[176.54054260 86.34502411]
[188.26800537 76.99267578]
[199.99548340 67.64032745]
[211.72294617 58.28797913]
[223.45042419 48.93563080]
[235.17790222 39.58328629]
[246.90536499 30.23093796]
[248.94787598 24.95318794]
[252.53901672 21.47112274]
[256.66790771 20.07834625]
[260.36376953 20.59411621]
[267.81201172 6.63581991]
[282.70254517 6.28733492]
[295.33404541 -1.80246568]
[307.96557617 -9.89226627]
[320.59707642 -17.98206711]
[330.67431641 -31.61605644]
[346.56515503 -25.70690727]
[345.28594971 -8.80128670]
[328.68688965 -5.35055351]
[316.05535889 2.73924708]
[303.42385864 10.82904720]
[290.79232788 18.91884804]
[284.24758911 32.29850769]
[268.45355225 33.22563171]
[256.25772095 41.95841217]
[244.53024292 51.31075668]
[232.80276489 60.66310501]
[221.07530212 70.01544952]
[209.34782410 79.36779785]
[197.62036133 88.72014618]
[185.89288330 98.07249451]
[200.88096619 98.67016602]
[215.07154846 103.53099823]
[227.27822876 112.24861908]
[236.48051453 124.09420776]
[241.90907288 138.07743835]
[243.11004639 153.02928162]
[239.98304749 167.69972229]
[232.78950500 180.86227417]
[222.13079834 191.41651917]
[208.89802551 198.48008728]
[194.19749451 201.46244812]
[179.25820923 200.11427307]
[165.32911682 194.54826355]
[153.57473755 185.22975159]
[144.97776794 172.93780518]
[140.25692749 158.70004272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 39]
[9 36]
[10 35]
[11 34]
[13 33]
[15 31]
[16 30]
[18 28]
[19 27]
[20 26]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[53 67]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
