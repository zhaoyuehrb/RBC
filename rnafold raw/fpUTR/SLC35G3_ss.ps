%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACUCCAAUGAGGUCACAAUGGCUGGAGCUCUGAGGGGCCCAGGCUCCCUGAGCCAGGAGGAGAGGAGAAAGUCCAAGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[165.65602112 273.38031006]
[172.34538269 259.83670044]
[182.58045959 248.72724915]
[174.84715271 235.87438965]
[161.65579224 228.95793152]
[161.17082214 213.14416504]
[153.43751526 200.29130554]
[145.70420837 187.43844604]
[137.97090149 174.58558655]
[121.58155823 171.31622314]
[112.35223389 156.98387146]
[116.30908203 140.05871582]
[108.11679840 127.49343109]
[101.67784882 123.51893616]
[99.86513519 114.32331085]
[87.72642517 107.38476562]
[87.28201294 93.40999603]
[79.54869843 80.55713654]
[71.81539154 67.70428467]
[56.52104568 67.87776184]
[43.28077698 60.42174911]
[35.60129166 47.42590714]
[35.45880890 32.43138504]
[42.79146194 19.46613121]
[29.04696846 11.63034916]
[29.11513519 -3.26410031]
[21.38182640 -16.11695862]
[13.64851952 -28.96981621]
[5.91521120 -41.82267380]
[-1.36014390 -47.73154068]
[-1.85560083 -55.28211594]
[-9.11984825 -68.40578461]
[-16.38409615 -81.52945709]
[-23.64834213 -94.65312195]
[-37.97137833 -102.63953400]
[-37.94588089 -119.03865814]
[-23.59808159 -126.98049164]
[-9.68776417 -118.29515076]
[-10.52467251 -101.91737366]
[-3.26042557 -88.79370117]
[4.00382185 -75.67002869]
[11.26806927 -62.54636383]
[18.76806831 -49.55598068]
[26.50137711 -36.70312500]
[34.23468399 -23.85026550]
[41.96799088 -10.99740791]
[55.15934753 -4.08094883]
[55.64431763 11.73282242]
[70.53395081 11.32737064]
[83.71504974 18.47681618]
[91.59989929 31.34909439]
[91.98551941 46.53948975]
[84.66825104 59.97097397]
[92.40155792 72.82382965]
[100.13486481 85.67668915]
[112.27357483 92.61523438]
[112.71798706 106.59000397]
[120.68208313 119.30114746]
[128.87437439 131.86643982]
[142.42126465 133.14723206]
[152.55996704 141.92614746]
[155.67259216 154.76963806]
[150.82376099 166.85227966]
[158.55706787 179.70513916]
[166.29037476 192.55799866]
[174.02368164 205.41085815]
[187.76817322 213.24662781]
[187.69999695 228.14108276]
[195.43330383 240.99394226]
[210.04284668 237.15489197]
[225.14213562 237.58869934]
[239.50714111 242.26020813]
[251.97337341 250.79072571]
[261.53024292 262.48870850]
[267.40301514 276.40585327]
[269.11563110 291.41400146]
[266.52923584 306.29644775]
[259.85348511 319.84674072]
[249.62956238 330.96649170]
[236.68629456 338.75418091]
[222.07290649 342.57855225]
[206.97407532 342.12957764]
[192.61375427 337.44363403]
[180.15609741 328.90060425]
[170.61097717 317.19302368]
[164.75219727 303.26998901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[6 66]
[7 65]
[8 64]
[9 63]
[12 59]
[13 58]
[15 57]
[17 55]
[18 54]
[19 53]
[24 48]
[26 46]
[27 45]
[28 44]
[29 43]
[31 42]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
