%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUCGGGGCUGGCUCGGGAGUAGCGCAGUCGCCAAAGCCGCCGCUGCCAAAGCUGCCGCCACUAGCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[66.18471527 289.61251831]
[59.07809067 303.30557251]
[45.68523788 310.96292114]
[30.27977753 310.14114380]
[17.77753067 301.10250854]
[12.16792011 286.73114014]
[15.24095154 271.61294556]
[26.01603317 260.57205200]
[41.05487442 257.13159180]
[37.99950790 242.55372620]
[49.89222336 232.11946106]
[54.88932037 217.97630310]
[59.88641739 203.83314514]
[64.88351440 189.68997192]
[69.88060760 175.54681396]
[74.87770844 161.40365601]
[69.70010376 142.96443176]
[84.53649902 129.62374878]
[88.31616974 115.10775757]
[81.07352448 102.55825043]
[84.72456360 88.53626251]
[97.16783142 81.11257172]
[100.94750214 66.59657288]
[104.72717285 52.08057785]
[108.50684357 37.56458664]
[112.28651428 23.04859161]
[114.82152557 8.26435280]
[116.09362030 -6.68161011]
[117.36570740 -21.62757301]
[118.63779449 -36.57353592]
[119.90988159 -51.51949692]
[113.37079620 -65.92612457]
[122.15956879 -77.95137787]
[123.43165588 -92.89733887]
[112.22127533 -103.79969025]
[110.69296265 -119.36241150]
[119.56833649 -132.23725891]
[134.65672302 -136.34512329]
[148.83384705 -129.74639893]
[155.40570068 -115.55679321]
[151.26925659 -100.47621918]
[138.37762451 -91.62525177]
[137.10552979 -76.67928314]
[143.73561096 -63.34169769]
[134.85585022 -50.24740982]
[133.58375549 -35.30144501]
[132.31167603 -20.35548401]
[131.03958130 -5.40952110]
[129.76748657 9.53644085]
[131.80355835 11.87079239]
[132.88575745 15.27152252]
[132.55233765 19.31497765]
[130.53120422 23.39952278]
[126.80251312 26.82826233]
[123.02284241 41.34425735]
[119.24317169 55.86024857]
[115.46350098 70.37624359]
[111.68383026 84.89224243]
[118.92647552 97.44174957]
[115.27543640 111.46373749]
[102.83216858 118.88742828]
[99.05249786 133.40342712]
[105.27299500 142.78366089]
[105.13008118 153.81472778]
[98.92488861 162.66470337]
[89.02086639 166.40075684]
[84.02377319 180.54391479]
[79.02667236 194.68707275]
[74.02957916 208.83023071]
[69.03247833 222.97340393]
[64.03538513 237.11656189]
[66.73332214 252.70603943]
[55.19803619 262.12869263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 73]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[18 62]
[19 61]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[33 43]
[34 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
