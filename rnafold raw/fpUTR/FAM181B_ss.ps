%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCAGCGAGCCAGGCCCGGAACUAGUAGGCUGCGCCGCGCGCGCCGCGCCGGGGCGGGAGCUGGGUCUGGGCGGCGGGCAGGAGCUGGCGGGGGCGCACGGGCAGCGCUGCGGACAGCCCGGGAGCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[84.88369751 141.52380371]
[71.95150757 133.92391968]
[67.97488403 119.46063232]
[75.20387268 106.31751251]
[89.54791260 101.93109131]
[77.17295074 93.45404816]
[64.79798889 84.97699738]
[52.42302704 76.49995422]
[34.02870941 80.73062897]
[18.59432983 70.42693329]
[15.55423069 52.44133377]
[2.80097365 44.54484940]
[-9.95228386 36.64836884]
[-28.13158607 41.72404099]
[-44.02536011 32.14415359]
[-47.89285278 14.31814575]
[-60.99718857 7.01907873]
[-74.10152435 -0.27998850]
[-87.20585632 -7.57905579]
[-100.31019592 -14.87812328]
[-113.41452789 -22.17719078]
[-126.51886749 -29.47625732]
[-142.34001160 -29.43200493]
[-149.69383240 -42.38463211]
[-162.79817200 -49.68369675]
[-175.90251160 -56.98276520]
[-189.00683594 -64.28182983]
[-202.11117554 -71.58090210]
[-214.60914612 -66.41725159]
[-227.60322571 -69.37980652]
[-236.36732483 -79.15988922]
[-237.84779358 -92.01213837]
[-250.78002930 -99.61193848]
[-263.71228027 -107.21174622]
[-276.64453125 -114.81154633]
[-292.46246338 -115.13273621]
[-299.51516724 -128.25177002]
[-312.44738770 -135.85156250]
[-325.37963867 -143.45137024]
[-334.45254517 -145.12722778]
[-338.51992798 -151.37902832]
[-351.27319336 -159.27549744]
[-364.02645874 -167.17198181]
[-376.77972412 -175.06846619]
[-393.42941284 -178.26599121]
[-394.96591187 -195.15017700]
[-379.16693115 -201.30065918]
[-368.88323975 -187.82173157]
[-356.12997437 -179.92524719]
[-343.37670898 -172.02876282]
[-330.62344360 -164.13227844]
[-317.77984619 -156.38362122]
[-304.84759521 -148.78381348]
[-291.91534424 -141.18402100]
[-277.02239990 -141.40640259]
[-269.04473877 -127.74378967]
[-256.11248779 -120.14398956]
[-243.18023682 -112.54418945]
[-230.24798584 -104.94438171]
[-214.21231079 -109.87725830]
[-199.25520325 -101.56052399]
[-194.81211853 -84.68523407]
[-181.70777893 -77.38616943]
[-168.60343933 -70.08709717]
[-155.49909973 -62.78803253]
[-142.39477539 -55.48896790]
[-127.51093292 -56.05529785]
[-119.21980286 -42.58059311]
[-106.11546326 -35.28152466]
[-93.01113129 -27.98245811]
[-79.90679169 -20.68339157]
[-66.80245972 -13.38432407]
[-53.69812012 -6.08525705]
[-40.59378433 1.21380997]
[-30.45911980 -4.24968815]
[-18.82611847 -4.09981775]
[-8.62652016 1.74264669]
[-2.48760700 11.90758419]
[-2.05580091 23.89511108]
[10.69745636 31.79159355]
[23.45071220 39.68807602]
[33.82688522 34.69845963]
[45.44055557 35.38542175]
[55.35944366 41.69270706]
[61.02235413 52.13031387]
[60.90007401 64.12499237]
[73.27503967 72.60203552]
[85.65000153 81.07908630]
[98.02496338 89.55612946]
[110.95720673 97.15592957]
[124.38465881 103.84201050]
[140.18687439 103.06712341]
[148.13105774 115.66630554]
[163.93327332 114.89142609]
[171.87744141 127.49060822]
[185.30490112 134.17668152]
[198.73234558 140.86276245]
[212.45312500 133.85945129]
[227.49099731 136.25030518]
[238.11190796 146.91145325]
[240.39126587 161.60643005]
[253.81871033 168.29251099]
[267.24615479 174.97859192]
[280.67361450 181.66465759]
[294.10107422 188.35073853]
[309.90328979 187.57585144]
[317.84744263 200.17503357]
[331.35122681 206.70558167]
[346.12924194 201.10327148]
[360.50579834 207.66755676]
[365.95156860 222.50398254]
[359.23565674 236.81033325]
[344.34246826 242.09893799]
[330.10791016 235.23213196]
[324.97708130 220.28388977]
[317.51861572 220.28912354]
[311.16137695 213.60247803]
[296.31958008 214.85559082]
[287.41497803 201.77818298]
[273.98754883 195.09210205]
[260.56008911 188.40603638]
[247.13264465 181.71995544]
[233.70518494 175.03388977]
[220.60472107 182.07063293]
[205.69641113 180.01972961]
[194.72613525 169.46006775]
[192.04626465 154.29020691]
[178.61882019 147.60412598]
[165.19137573 140.91806030]
[150.34957886 142.17117310]
[141.44497681 129.09375000]
[126.60317993 130.34686279]
[117.69858551 117.26945496]
[104.27113342 110.58338165]
[107.41888428 125.24938202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[7 87]
[8 86]
[11 81]
[12 80]
[13 79]
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[32 59]
[33 58]
[34 57]
[35 56]
[37 54]
[38 53]
[39 52]
[41 51]
[42 50]
[43 49]
[44 48]
[90 134]
[91 133]
[93 131]
[95 129]
[96 128]
[97 127]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
[107 117]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
