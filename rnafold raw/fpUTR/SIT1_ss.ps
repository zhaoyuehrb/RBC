%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGACUUUGCCACCACCAGUAUUGGGGAUGCUGAGCUGCGGGGUACGGGCCUGAGGAGGGAUGGGAGUAAGAAGUGCUGUGGAAACCGUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[-16.16023254 125.86222839]
[-27.18856430 129.70098877]
[-38.79611969 129.05784607]
[-49.23905182 124.06900787]
[-56.96354294 115.52060699]
[-60.83699417 104.72502899]
[-75.76767731 103.28469086]
[-90.69836426 101.84434509]
[-105.62905121 100.40399933]
[-120.55973816 98.96365356]
[-135.49043274 97.52330780]
[-150.42111206 96.08296204]
[-162.54891968 105.85813141]
[-177.67024231 104.18472290]
[-186.91464233 92.56247711]
[-195.08164978 100.09878540]
[-205.84593201 101.75488281]
[-215.49882507 97.21077728]
[-220.85356140 88.24039459]
[-235.66128540 85.84639740]
[-250.46900940 83.45240021]
[-265.27673340 81.05840302]
[-280.08447266 78.66440582]
[-294.89218140 76.27040863]
[-309.69992065 73.87640381]
[-326.30102539 77.31732178]
[-334.20309448 62.31753922]
[-321.97702026 50.57191849]
[-307.30590820 59.06867981]
[-292.49819946 61.46267700]
[-277.69046021 63.85667801]
[-262.88275146 66.25067902]
[-248.07501221 68.64467621]
[-233.26728821 71.03867340]
[-218.45954895 73.43267059]
[-201.12307739 65.12531281]
[-185.47428894 77.63179016]
[-174.17868042 67.99100494]
[-159.01632690 69.23902893]
[-148.98077393 81.15227509]
[-134.05007935 82.59262085]
[-119.11939240 84.03296661]
[-104.18870544 85.47331238]
[-89.25801849 86.91365814]
[-74.32733154 88.35400391]
[-59.39664841 89.79434204]
[-48.07812881 75.16709137]
[-30.14865303 70.06446838]
[-12.55005264 76.64265442]
[-2.20349932 92.50000000]
[12.79650021 92.50000000]
[27.79650116 92.50000000]
[42.79650116 92.50000000]
[57.79650116 92.50000000]
[72.79650116 92.50000000]
[87.79650116 92.50000000]
[100.00000000 85.67605591]
[112.20349884 92.50000000]
[120.97287750 89.32348633]
[127.68234253 92.74812317]
[137.23530579 80.66312408]
[151.90112305 76.56833649]
[165.99919128 81.83221436]
[174.19622803 94.23973083]
[188.23730469 86.94872284]
[200.71003723 95.08998108]
[214.75111389 87.79897308]
[227.22384644 95.94022369]
[242.21614075 96.42099762]
[257.20843506 96.90177155]
[272.20074463 97.38254547]
[284.83917236 87.50078583]
[300.41094971 91.36074829]
[306.97073364 106.00141144]
[299.48638916 120.19170380]
[283.69931030 123.04605103]
[271.71997070 112.37483978]
[256.72766113 111.89406586]
[241.73536682 111.41329193]
[226.74307251 110.93251801]
[213.77435303 118.25791931]
[200.22926331 110.08227539]
[187.26054382 117.40766907]
[173.71545410 109.23202515]
[164.74029541 121.08886719]
[150.33393860 125.43866730]
[135.96061707 120.41264343]
[127.20157623 107.74041748]
[112.20349884 107.50000000]
[100.00000000 114.32394409]
[87.79650116 107.50000000]
[72.79650116 107.50000000]
[57.79650116 107.50000000]
[42.79650116 107.50000000]
[27.79650116 107.50000000]
[12.79650021 107.50000000]
[-2.20349932 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[15 37]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[58 89]
[60 88]
[64 84]
[66 82]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
