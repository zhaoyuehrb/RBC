%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUCACCAAGGGCCUGGCACCAGGUGCCCAGUCUUCCAGUUGCGAGGGCAAGCAAACCCGUCAUGAGCAACUCCCUUCCCCAUCUCUGCUCACC\
) } def
/len { sequence length } bind def

/coor [
[135.47227478 131.62225342]
[122.56361389 123.98244476]
[109.65495300 116.34264374]
[115.95497131 129.95550537]
[113.14273071 144.68951416]
[102.27177429 155.02500916]
[87.41460419 157.09004211]
[74.13704681 150.11103821]
[67.41318512 136.70246887]
[69.76193237 121.88749695]
[80.30210114 111.21681213]
[65.30406189 111.45970917]
[50.30603027 111.70260620]
[35.30799866 111.94550323]
[20.30996513 112.18840027]
[9.35471630 123.26180267]
[-5.85888243 123.29447937]
[-16.34816742 112.78208160]
[-31.34620094 113.02497864]
[-46.34423447 113.26787567]
[-61.34226608 113.51077271]
[-76.34030151 113.75366974]
[-92.07944489 120.05570221]
[-102.49222565 106.67622375]
[-92.51815796 92.96657562]
[-76.58319855 98.75563812]
[-61.58516312 98.51274109]
[-46.58713150 98.26984406]
[-31.58909607 98.02694702]
[-16.59106255 97.78404999]
[-6.44769096 86.93750763]
[8.75898743 86.47752380]
[20.06706810 97.19036865]
[35.06510162 96.94747162]
[50.06313705 96.70457458]
[65.06116486 96.46167755]
[80.05920410 96.21878052]
[65.06755066 95.71847534]
[52.16487122 88.06858063]
[44.53270721 75.15540314]
[44.05299377 60.16307449]
[50.84401703 46.78839874]
[63.23124695 38.32929230]
[78.16024780 36.87160110]
[91.94983673 42.77476501]
[101.19977570 54.58317947]
[103.62921906 69.38513184]
[98.63979340 83.52974701]
[104.32389832 69.64842987]
[110.00799561 55.76711273]
[101.73262024 42.64088440]
[102.78669739 27.15965462]
[112.76490784 15.27626514]
[127.83042908 11.56012630]
[142.19026184 17.44016647]
[150.32275391 30.65539360]
[149.10079956 46.12427902]
[138.99426270 57.89872360]
[123.88931274 61.45121384]
[118.20521545 75.33253479]
[112.52111053 89.21385193]
[117.29476166 103.43399048]
[130.20341492 111.07379150]
[143.11207581 118.71359253]
[163.12268066 117.83526611]
[172.23399353 134.76051331]
[185.61010742 141.54870605]
[198.98620605 148.33691406]
[212.36231995 155.12512207]
[225.73841858 161.91333008]
[239.11453247 168.70153809]
[249.96524048 158.14022827]
[263.65832520 151.67665100]
[278.70849609 150.01190186]
[293.48318481 153.32656860]
[306.37976074 161.26109314]
[315.99932861 172.95480347]
[321.29840088 187.13925171]
[321.70214844 202.27581787]
[317.16683960 216.72261047]
[308.18435669 228.91252136]
[295.72912598 237.52330017]
[281.15213013 241.62092590]
[266.03463745 240.76087952]
[252.01643372 235.03649902]
[240.61811829 225.06867981]
[233.07611084 211.93869019]
[230.20848083 197.07075500]
[232.32632446 182.07763672]
[218.95022583 175.28944397]
[205.57411194 168.50123596]
[192.19799805 161.71302795]
[178.82189941 154.92481995]
[165.44578552 148.13661194]
[155.83026123 152.23228455]
[145.34927368 150.21464539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[48 61]
[49 60]
[50 59]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
