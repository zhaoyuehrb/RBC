%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUGCCCCGCGCGCGCGCGCGCCGGCAGUUCGGCCACGUCCCUGGCCACGUCGCGGGCGAUCUCGCCAUCUUCGCCGCUUCCUCUCAGGGGCCGCCGCCUCCUGAGCCGCCCAGCCCCGGGGCCGCCGCGCUGCGCCGACCGCCACCGCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-24.63401604 785.38549805]
[-27.47673988 787.54913330]
[-30.93597794 802.14483643]
[-34.39521408 816.74053955]
[-32.16461182 833.54705811]
[-47.69688034 840.34301758]
[-58.52700424 827.29907227]
[-48.99088669 813.28125000]
[-45.53165054 798.68560791]
[-42.07241058 784.08990479]
[-39.03915024 769.39984131]
[-36.43442535 754.62768555]
[-33.82970428 739.85559082]
[-35.77473450 732.68695068]
[-31.02858353 724.82348633]
[-28.13789940 710.10461426]
[-25.24721718 695.38580322]
[-27.05287361 688.18084717]
[-22.15513039 680.41082764]
[-18.97957230 665.75079346]
[-15.80401516 651.09082031]
[-17.46961784 643.85217285]
[-12.42212582 636.17858887]
[-8.96288776 621.58294678]
[-15.88743877 603.55981445]
[-1.94752288 589.04296875]
[0.94316101 574.32415771]
[3.83384490 559.60528564]
[-1.30572081 545.62554932]
[8.94600868 533.57513428]
[11.83669281 518.85626221]
[10.03103542 511.65130615]
[14.92877769 503.88131714]
[18.10433578 489.22131348]
[21.27989388 474.56127930]
[24.45545197 459.90127563]
[27.48871613 445.21118164]
[30.37940025 430.49234009]
[33.12723160 415.74618530]
[35.73195648 400.97406006]
[38.33667755 386.20193481]
[29.52741241 376.75933838]
[27.75391960 363.77120972]
[33.88881302 351.96661377]
[45.88346863 345.77496338]
[48.77415085 331.05612183]
[51.66483688 316.33731079]
[54.55551910 301.61846924]
[57.44620514 286.89962769]
[52.30663681 272.91986084]
[62.55836868 260.86944580]
[65.44905090 246.15060425]
[56.95673370 233.96800232]
[59.67862320 218.99983215]
[72.51445007 210.17491150]
[75.40513611 195.45606995]
[78.15296173 180.70991516]
[80.75769043 165.93778992]
[83.36241150 151.16567993]
[85.96713257 136.39355469]
[88.57185364 121.62144470]
[80.75462341 118.37697601]
[73.97631836 112.25381470]
[69.29579163 103.63468170]
[67.61575317 93.28634644]
[69.54656219 82.29308319]
[75.29830170 71.94310760]
[70.16799927 57.84772110]
[55.41258240 52.66972733]
[47.48213196 39.19226456]
[50.12117004 23.77897644]
[62.08362579 13.70754528]
[77.72118378 13.73339272]
[89.65027618 23.84431648]
[92.23834991 39.26624680]
[84.26338959 52.71741867]
[89.39369202 66.81280518]
[96.82469177 67.82778931]
[98.85466766 52.96578598]
[100.88463593 38.10377884]
[102.91483307 23.24180412]
[117.77677917 25.27223396]
[115.74664307 40.13374710]
[113.71666718 54.99575424]
[111.68669891 69.85775757]
[119.11770630 70.87274933]
[127.84008789 58.66946411]
[136.56246948 46.46618271]
[145.28485107 34.26290131]
[154.00723267 22.05962181]
[162.72961426 9.85634041]
[171.33325195 -2.43094015]
[179.81735229 -14.80106544]
[188.30146790 -27.17119026]
[189.03211975 -43.55405426]
[203.70816040 -50.87156296]
[217.23213196 -41.59609222]
[215.69172668 -25.26944923]
[200.67158508 -18.68708801]
[192.18748474 -6.31696224]
[183.70338440 6.05316305]
[182.50761414 13.38407135]
[174.93289185 18.57872200]
[166.21051025 30.78200340]
[157.48812866 42.98528290]
[148.76574707 55.18856430]
[140.04336548 67.39184570]
[131.32098389 79.59512329]
[128.12825012 112.83591461]
[103.34397125 124.22616577]
[100.73925018 138.99829102]
[98.13452911 153.77040100]
[95.52980804 168.54251099]
[92.92507935 183.31463623]
[94.52042389 192.35984802]
[90.12396240 198.34675598]
[87.23327637 213.06559753]
[95.77812958 226.08953857]
[92.63688660 240.97535706]
[80.16787720 249.04129028]
[77.27719879 263.76013184]
[82.20999908 278.79269409]
[72.16503143 289.79031372]
[69.27435303 304.50915527]
[66.38366699 319.22796631]
[63.49298096 333.94680786]
[60.60229874 348.66564941]
[70.61845398 362.97900391]
[67.27389526 379.78213501]
[53.10879517 388.80667114]
[50.50407028 403.57879639]
[47.89934921 418.35089111]
[49.49468994 427.39611816]
[45.09822845 433.38302612]
[42.20754623 448.10186768]
[43.62718964 457.17630005]
[39.11545944 463.07684326]
[35.93990326 477.73684692]
[32.76434326 492.39685059]
[29.58878517 507.05685425]
[26.55552292 521.74694824]
[23.66483879 536.46582031]
[28.59764290 551.49835205]
[18.55267525 562.49597168]
[15.66199112 577.21484375]
[12.77130699 591.93365479]
[19.38127708 600.64965820]
[20.06110954 611.34680176]
[14.82699966 620.44750977]
[5.63278532 625.04217529]
[2.17354727 639.63781738]
[-1.14400685 654.26635742]
[-4.31956482 668.92639160]
[-7.49512291 683.58636475]
[-10.52838707 698.27648926]
[-13.41907024 712.99530029]
[-16.30975533 727.71411133]
[-19.05758667 742.46032715]
[-21.66230965 757.23242188]
[-24.26703262 772.00451660]
[-22.44141769 776.99993896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 10]
[3 9]
[4 8]
[11 160]
[12 159]
[13 158]
[15 157]
[16 156]
[17 155]
[19 154]
[20 153]
[21 152]
[23 151]
[24 150]
[26 146]
[27 145]
[28 144]
[30 142]
[31 141]
[33 140]
[34 139]
[35 138]
[36 137]
[37 135]
[38 134]
[39 132]
[40 131]
[41 130]
[45 127]
[46 126]
[47 125]
[48 124]
[49 123]
[51 121]
[52 120]
[55 117]
[56 116]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[67 77]
[68 76]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
