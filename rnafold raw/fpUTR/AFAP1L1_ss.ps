%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCUGGGGGAGGGGACCGCAGAGAGCGCCGGCCGCUGGGCUGGCCUGAGAGCGCAGCGCGCCGGCCGCUACCAGCCGCGCCGGAGCCCCUGCGCCCUGCGGCCCGCUCCCCGGGGACCGGGCCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[162.96511841 422.56579590]
[163.57536316 409.24771118]
[171.88975525 398.57736206]
[168.35337830 384.00018311]
[164.81698608 369.42300415]
[161.28060913 354.84582520]
[148.50259399 342.87796021]
[153.70721436 325.26171875]
[149.82493591 310.77282715]
[145.94264221 296.28393555]
[142.06036377 281.79504395]
[138.17808533 267.30615234]
[134.29579163 252.81727600]
[130.24136353 238.37561035]
[126.01538086 223.98321533]
[121.78939056 209.59082031]
[116.83832550 204.00494385]
[117.63847351 194.80546570]
[113.75618744 180.31657410]
[109.87390137 165.82768250]
[105.99161530 151.33879089]
[102.10932922 136.84991455]
[98.22704315 122.36102295]
[80.60138702 115.80946350]
[72.59366608 96.58247375]
[81.98470306 75.74651337]
[70.88542938 65.65660858]
[59.78615952 55.56670380]
[48.68688965 45.47679901]
[37.46833801 35.51968765]
[26.13209343 25.69677544]
[14.79585075 15.87386417]
[3.45960689 6.05095339]
[-7.87663651 -3.77195740]
[-19.32896805 -13.45927525]
[-30.89576340 -23.00962830]
[-42.46255875 -32.55998230]
[-54.02935410 -42.11033249]
[-65.59615326 -51.66068649]
[-81.16400146 -54.48073578]
[-86.05198669 -68.55044556]
[-97.61878204 -78.10079956]
[-109.18557739 -87.65115356]
[-124.17729187 -83.64765167]
[-138.64692688 -89.25206757]
[-147.03059387 -102.30938721]
[-146.10461426 -117.79881287]
[-136.22505188 -129.76432800]
[-121.19078064 -133.60496521]
[-106.78280640 -127.84391785]
[-98.54127502 -114.69641876]
[-99.63522339 -99.21794891]
[-88.06842804 -89.66759491]
[-76.50163269 -80.11724091]
[-61.76111984 -77.98030090]
[-56.04579926 -63.22748184]
[-44.47900391 -53.67712784]
[-32.91220474 -44.12677765]
[-21.34541130 -34.57642365]
[-9.77861500 -25.02607155]
[-2.54746032 -23.17523766]
[1.94627428 -15.10820103]
[13.28251743 -5.28529024]
[24.61876106 4.53762102]
[35.95500565 14.36053181]
[47.29124832 24.18344307]
[54.47631073 26.20583725]
[58.77679443 34.37752914]
[69.87606812 44.46743393]
[80.97533417 54.55733871]
[92.07460785 64.64724731]
[83.12081909 52.61272430]
[83.40721893 37.61545944]
[92.81394196 25.93156242]
[107.40444183 22.45055389]
[121.07281494 28.62918091]
[128.09909058 41.88178635]
[125.54286194 56.66237259]
[114.47272491 66.78601074]
[127.28094482 58.97898865]
[140.08915710 51.17197418]
[152.89738464 43.36495590]
[160.65408325 29.57567406]
[175.54867554 29.55827522]
[188.35688782 21.75125885]
[195.73698425 7.10659313]
[212.12281799 6.44588137]
[220.65805054 20.44880676]
[212.56236267 34.71036148]
[196.16390991 34.55947876]
[183.35568237 42.36649323]
[176.51512146 55.59736633]
[160.70440674 56.17317581]
[147.89617920 63.98019409]
[135.08796692 71.78720856]
[122.27973938 79.59422302]
[126.15305328 102.97523499]
[112.71593475 118.47873688]
[116.59822083 132.96762085]
[120.48050690 147.45651245]
[124.36279297 161.94540405]
[128.24507141 176.43428040]
[132.12736511 190.92317200]
[136.18179321 205.36483765]
[140.40777588 219.75723267]
[144.63375854 234.14962769]
[150.10502625 241.58843994]
[148.78468323 248.93499756]
[152.66696167 263.42388916]
[156.54925537 277.91278076]
[160.43153381 292.40164185]
[164.31382751 306.89053345]
[168.19610596 321.37942505]
[179.00132751 328.53860474]
[181.89923096 340.75933838]
[175.85778809 351.30944824]
[179.39416504 365.88662720]
[182.93054199 380.46380615]
[186.46693420 395.04098511]
[201.54188538 403.82357788]
[205.56933594 420.45306396]
[196.54498291 434.59240723]
[200.42726135 449.08129883]
[204.30955505 463.57019043]
[216.28179932 474.77722168]
[212.29931641 490.68545532]
[196.45895386 494.92984009]
[185.05592346 483.14416504]
[189.82066345 467.45245361]
[185.93838501 452.96356201]
[182.05609131 438.47470093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 119]
[4 118]
[5 117]
[6 116]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 108]
[14 106]
[15 105]
[16 104]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 98]
[26 71]
[27 70]
[28 69]
[29 68]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[79 96]
[80 95]
[81 94]
[82 93]
[84 91]
[85 90]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
