%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUGCCUGGCCCCAGCCCCAGGCAGCCACAGCAGGCUGCCUUACCCCAGAAGCAGCUGGUGGCGCCUGACCUCACG\
) } def
/len { sequence length } bind def

/coor [
[100.93136597 229.68879700]
[103.12864685 214.67092896]
[110.60603333 201.46286011]
[122.35227203 191.85087585]
[117.66032410 177.60356140]
[112.96837616 163.35626221]
[108.27642822 149.10896301]
[103.58448029 134.86166382]
[85.78817749 132.03448486]
[71.74913025 120.73818970]
[58.03787613 126.82106781]
[44.32661819 132.90394592]
[35.11244583 146.46975708]
[18.77900314 145.00325012]
[12.12873363 130.01306152]
[22.00286674 116.91979218]
[38.24374008 119.19268799]
[51.95499802 113.10980988]
[65.66625214 107.02693176]
[65.25730896 95.40332031]
[68.67502594 84.28599548]
[75.54296112 74.89945984]
[67.61666870 62.16470718]
[59.69037628 49.42995834]
[51.76408005 36.69520569]
[43.83778763 23.96045685]
[35.91149521 11.22570610]
[27.98520088 -1.50904417]
[20.05890656 -14.24379444]
[4.61111259 -17.58163834]
[-3.88157487 -30.91017151]
[-0.38059485 -46.32181168]
[13.03698349 -54.67310715]
[28.41074944 -51.00938416]
[36.61972046 -37.50426102]
[32.79365921 -22.17008781]
[40.71995163 -9.43533802]
[48.64624405 3.29941249]
[56.57254028 16.03416252]
[64.49883270 28.76891327]
[72.42512512 41.50366211]
[80.35141754 54.23841476]
[88.27770996 66.97316742]
[97.29078674 65.05941772]
[106.49114227 65.56093597]
[115.24279022 68.44304657]
[122.94078827 73.50653076]
[129.05300903 80.40136719]
[142.99525452 74.86840820]
[156.93751526 69.33544922]
[170.87976074 63.80248642]
[176.91397095 49.19551086]
[191.54135132 43.21089554]
[206.08370972 49.39920807]
[211.91334534 64.08902740]
[205.57162476 78.56515503]
[190.82098389 84.23915100]
[176.41271973 77.74473572]
[162.47047424 83.27769470]
[148.52821350 88.81065369]
[134.58596802 94.34361267]
[131.74559021 114.84592438]
[117.83177948 130.16970825]
[122.52372742 144.41700745]
[127.21567535 158.66432190]
[131.90762329 172.91162109]
[136.59957886 187.15892029]
[151.75872803 187.91036987]
[165.62115479 194.09077454]
[176.31210327 204.86425781]
[182.38569641 218.77383423]
[183.02052307 233.93830872]
[178.13073730 248.30682373]
[168.37763977 259.93618774]
[155.08026123 267.25357056]
[140.03697205 269.26937866]
[125.28222656 265.71099854]
[112.81150055 257.05969238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[10 19]
[11 18]
[12 17]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
