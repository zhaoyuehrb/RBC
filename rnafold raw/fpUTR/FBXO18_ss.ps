%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUUCAAGGUGUCUAGAUACAGAGUGAAGAAUGUCACAGUAGGAAGUGCACUGGACUAGGGGAGUCAGGAGACCCGGGUUCUUGUGUUGGCACCAUCACUC\
) } def
/len { sequence length } bind def

/coor [
[112.16766357 377.01577759]
[97.10060120 375.65972900]
[83.19081879 369.71218872]
[71.80104828 359.75585938]
[64.04714966 346.76617432]
[60.68877029 332.01568604]
[62.05492783 316.94955444]
[68.01177979 303.04376221]
[77.97573090 291.66067505]
[90.97061920 283.91546631]
[105.72334290 280.56698608]
[107.06793213 265.62734985]
[108.41252136 250.68774414]
[109.75711060 235.74813843]
[111.10169983 220.80851746]
[112.44628906 205.86889648]
[110.01699829 201.58282471]
[110.37209320 195.70173645]
[114.34435272 190.08515930]
[116.57998657 175.25268555]
[118.81562042 160.42022705]
[121.05125427 145.58776855]
[123.28688812 130.75531006]
[125.52252960 115.92284393]
[127.75816345 101.09037781]
[99.01991272 123.72080231]
[80.31597900 99.14662170]
[66.70559692 92.84126282]
[53.09521866 86.53590393]
[39.48483658 80.23054504]
[24.73536301 85.90756226]
[10.32576656 79.41609955]
[4.80500793 64.60742950]
[11.44845486 50.26726913]
[26.31466866 44.90338516]
[40.58378601 51.69807434]
[45.79019547 66.62016296]
[59.40057755 72.92552185]
[73.01095581 79.23088074]
[86.62133789 85.53623962]
[91.84667969 77.70291138]
[101.25846863 72.24895477]
[96.41032410 58.05404282]
[91.56217957 43.85913086]
[77.85186005 35.52806473]
[75.96011353 19.59693527]
[87.33811951 8.28674412]
[103.25765228 10.27370262]
[111.50660706 24.03358459]
[105.75708771 39.01098633]
[110.60523224 53.20589828]
[115.45337677 67.40081024]
[122.47513580 70.03611755]
[134.06137085 60.50935745]
[136.51866150 75.30673981]
[143.54042053 77.94205475]
[156.53080750 70.44205475]
[169.52117920 62.94205093]
[182.51156616 55.44205093]
[195.50195312 47.94205093]
[203.58459473 34.34126663]
[218.47538757 34.67832947]
[231.46577454 27.17832947]
[244.45614624 19.67832947]
[243.77613831 4.38793564]
[250.29031372 -9.46212292]
[262.50177002 -18.68920517]
[277.60440063 -21.17299271]
[292.12771606 -16.34273148]
[302.73440552 -5.30837822]
[306.98709106 9.39445210]
[303.90853882 24.38715744]
[294.20620728 36.22452164]
[280.10958862 42.18640900]
[264.85800171 40.90282059]
[251.95614624 32.66871262]
[238.96577454 40.16871262]
[225.97538757 47.66871262]
[218.82189941 60.73304749]
[203.00195312 60.93243408]
[190.01156616 68.43243408]
[177.02117920 75.93243408]
[164.03080750 83.43243408]
[151.04042053 90.93243408]
[142.59062195 103.32601166]
[140.35499573 118.15847778]
[138.11935425 132.99093628]
[135.88371277 147.82339478]
[133.64808655 162.65586853]
[131.41244507 177.48832703]
[129.17681885 192.32078552]
[127.38590240 207.21350098]
[126.04131317 222.15310669]
[124.69672394 237.09272766]
[123.35213470 252.03233337]
[122.00754547 266.97195435]
[120.66295624 281.91156006]
[134.58070374 287.84045410]
[145.98379517 297.78149414]
[153.75509644 310.76080322]
[157.13323975 325.50674438]
[155.78727722 340.57470703]
[149.84907532 354.48849487]
[139.90037537 365.88491821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[27 40]
[28 39]
[29 38]
[30 37]
[42 52]
[43 51]
[44 50]
[56 84]
[57 83]
[58 82]
[59 81]
[60 80]
[62 78]
[63 77]
[64 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
