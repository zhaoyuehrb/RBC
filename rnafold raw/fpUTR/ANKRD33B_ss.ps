%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGCCGGUUUCCGCCGAGCUGGAGCGCGCGGGCCACGGCUUCUCUGGGGACGCAGAAGCGAGAAGCGGGGACCUCGGCGCGCGCCCCGCGUCCCGCUCUUCCUGCCCGCGCCCCGGCCCCCGGCCCGCGCCCCGGCCGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[-11.21862030 581.36059570]
[-26.19207573 587.12036133]
[-39.95761108 578.88085938]
[-41.95548630 562.96270752]
[-30.65310287 551.57696533]
[-29.36363220 536.63244629]
[-28.07415962 521.68798828]
[-26.78468704 506.74353027]
[-25.49521637 491.79904175]
[-37.26136780 501.10269165]
[-52.25919724 500.84753418]
[-63.70206070 491.14901733]
[-66.41196442 476.39584351]
[-59.16265488 463.26391602]
[-45.23450470 457.69555664]
[-30.93012238 462.21047974]
[-22.72226334 474.76605225]
[-19.20489120 460.18429565]
[-20.70488358 452.89160156]
[-15.45178795 445.32827759]
[-11.62148857 430.82556152]
[-7.79118967 416.32284546]
[-3.96089005 401.82012939]
[-0.13059059 387.31741333]
[-1.47332537 379.99411011]
[3.94128752 372.54556274]
[2.75643206 365.19509888]
[8.33005524 357.86477661]
[12.78074741 343.54028320]
[17.23143959 329.21578979]
[21.68213272 314.89126587]
[26.13282394 300.56677246]
[30.58351707 286.24227905]
[35.03421021 271.91778564]
[39.48490143 257.59326172]
[43.93559265 243.26876831]
[35.47660446 228.77101135]
[40.17909622 212.30754089]
[55.61467361 204.14973450]
[59.75612640 189.73278809]
[63.89758301 175.31584167]
[68.03903961 160.89889526]
[53.72189713 165.37319946]
[41.17502975 157.15274048]
[39.55995941 142.23994446]
[50.05598831 131.52391052]
[64.99907684 132.82931519]
[73.47775269 145.20130920]
[79.14337158 131.31243896]
[84.80899048 117.42356873]
[90.47460938 103.53469849]
[90.36660004 95.41172028]
[96.41444397 89.41006470]
[102.37758636 75.64630890]
[108.34072876 61.88255310]
[101.86134338 51.81219101]
[101.08995819 39.98290253]
[106.10385895 29.37396812]
[115.53793335 22.60067558]
[126.95403290 21.26980019]
[133.50379944 7.77533770]
[140.05357361 -5.71912527]
[139.11871338 -21.51268768]
[151.63681030 -29.58403397]
[158.18658447 -43.07849503]
[164.73634338 -56.57295990]
[171.28611755 -70.06742096]
[170.35127258 -85.86098480]
[182.86935425 -93.93232727]
[189.27355957 -107.49647522]
[195.53146362 -121.12874603]
[201.78936768 -134.76100159]
[208.04727173 -148.39328003]
[214.30517578 -162.02554321]
[220.41606140 -175.72433472]
[214.84529114 -190.27096558]
[221.08883667 -204.14442444]
[234.99114990 -209.36564636]
[240.95428467 -223.12940979]
[246.91743469 -236.89315796]
[244.50306702 -253.11360168]
[257.50976562 -263.10147095]
[272.55737305 -256.58212280]
[274.16616821 -240.26208496]
[260.68118286 -230.93002319]
[254.71804810 -217.16625977]
[248.75489807 -203.40251160]
[254.45378113 -189.68907166]
[248.60237122 -175.64572144]
[234.17980957 -169.76119995]
[234.40844727 -162.31935120]
[227.93743896 -155.76763916]
[221.67953491 -142.13537598]
[215.42163086 -128.50309753]
[209.16372681 -114.87084198]
[202.90582275 -101.23857117]
[202.97428894 -93.79353333]
[196.36381531 -87.38256073]
[197.76715088 -72.55421448]
[184.78057861 -63.51765442]
[178.23080444 -50.02318954]
[171.68104553 -36.52872849]
[165.13127136 -23.03426552]
[166.53460693 -8.20591640]
[153.54803467 0.83064306]
[146.99826050 14.32510567]
[140.44850159 27.81956863]
[147.49679565 44.65732956]
[139.93722534 61.61993408]
[122.10448456 67.84569550]
[116.14134216 81.60945129]
[110.17819977 95.37320709]
[104.36347961 109.20031738]
[98.69786072 123.08918762]
[93.03224182 136.97805786]
[87.36662292 150.86692810]
[82.45598602 165.04034424]
[78.31452942 179.45729065]
[74.17307281 193.87423706]
[70.03161621 208.29118347]
[77.88732910 219.28532410]
[77.95220947 232.60246277]
[70.42755890 243.35298157]
[58.26009369 247.71946716]
[53.80940247 262.04397583]
[49.35871124 276.36846924]
[44.90801620 290.69296265]
[40.45732498 305.01745605]
[36.00663376 319.34197998]
[31.55594063 333.66647339]
[27.10524940 347.99096680]
[22.65455627 362.31546021]
[18.35823441 376.68704224]
[14.37212658 391.14770508]
[10.54182720 405.65042114]
[6.71152782 420.15313721]
[2.88122845 434.65585327]
[-0.94907111 449.15856934]
[-4.62311888 463.70166016]
[-8.14048958 478.28341675]
[-10.55074310 493.08853149]
[-11.84021568 508.03298950]
[-13.12968731 522.97747803]
[-14.41915894 537.92193604]
[-15.70863152 552.86639404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[17 140]
[18 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[26 133]
[28 132]
[29 131]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[39 120]
[40 119]
[41 118]
[42 117]
[48 116]
[49 115]
[50 114]
[51 113]
[53 112]
[54 111]
[55 110]
[60 107]
[61 106]
[62 105]
[64 103]
[65 102]
[66 101]
[67 100]
[69 98]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 90]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
