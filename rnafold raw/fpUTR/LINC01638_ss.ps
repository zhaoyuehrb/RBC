%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUUUCAUCUGGAAUUACUGGAAUCACACUGUCUCCUGUCAGCUUUCUCUCCCUCCCCCGGCCCUCCUGCUGAUGAGAGACAGGAGCGAUGGAUGGUCUGAGUUAGCGGGGUCCCGGCACCACCCAGCGCAAAGGCACUGCACUCACGCACGCC\
) } def
/len { sequence length } bind def

/coor [
[88.14056396 130.60040283]
[79.66716003 142.97785950]
[71.19375610 155.35531616]
[62.72035599 167.73277283]
[54.24694824 180.11022949]
[45.77354431 192.48768616]
[37.30014038 204.86514282]
[28.82673645 217.24259949]
[20.35333252 229.62005615]
[27.57455444 243.11495972]
[27.68563461 258.42007446]
[20.66105080 272.01837158]
[8.11499786 280.78506470]
[-7.06953096 282.70565796]
[-21.40324402 277.33880615]
[-31.59235573 265.91772461]
[-35.29548645 251.06697083]
[-31.66168213 236.19908142]
[-21.52596474 224.73060608]
[-7.21744776 219.29692078]
[7.97587633 221.14665222]
[16.44928169 208.76919556]
[24.92268562 196.39173889]
[33.39608765 184.01428223]
[41.86949539 171.63682556]
[50.34289932 159.25936890]
[58.81630325 146.88191223]
[67.28970337 134.50445557]
[75.76310730 122.12699890]
[67.38040161 103.60453796]
[71.51669312 83.69869995]
[60.54525375 73.46994781]
[49.57381058 63.24118805]
[38.60236740 53.01243210]
[27.63092422 42.78367615]
[16.65948105 32.55492401]
[5.68803930 22.32616615]
[-9.68201065 18.57488251]
[-13.71491623 4.23664999]
[-24.68635941 -5.99210596]
[-35.65780258 -16.22086143]
[-46.62924576 -26.44961739]
[-57.60068893 -36.67837524]
[-68.57212830 -46.90712738]
[-79.54357147 -57.13588333]
[-92.18262482 -50.32646942]
[-106.28715515 -47.76528168]
[-120.47077942 -49.69055557]
[-133.34352112 -55.90019989]
[-143.64802551 -65.77291870]
[-150.38235474 -78.33036041]
[-152.89744568 -92.33404541]
[-150.95956421 -106.40751648]
[-144.77204895 -119.17162323]
[-155.53663635 -129.61785889]
[-171.33338928 -129.13011169]
[-182.79089355 -140.01593018]
[-183.11160278 -155.81697083]
[-172.10525513 -167.15873718]
[-156.30171204 -167.31237793]
[-145.07693481 -156.18672180]
[-145.09040833 -140.38243103]
[-134.32582092 -129.93620300]
[-120.27104950 -136.97500610]
[-104.63024139 -138.78860474]
[-89.28559113 -135.14033508]
[-76.08995056 -126.45189667]
[-66.64312744 -113.75472260]
[-62.09788895 -98.56755066]
[-63.01936340 -82.71478271]
[-69.31481934 -68.10733032]
[-58.34337234 -57.87857056]
[-47.37193298 -47.64981461]
[-36.40048981 -37.42105865]
[-25.42904663 -27.19230461]
[-14.45760345 -16.96354866]
[-3.48616052 -6.73479271]
[11.09913921 -3.71513891]
[15.91679478 11.35472393]
[26.88823700 21.58347893]
[37.85968018 31.81223488]
[48.83112335 42.04099274]
[59.80256653 52.26974869]
[70.77400970 62.49850082]
[81.74545288 72.72725677]
[98.36389160 67.22265625]
[115.44789886 71.04497528]
[128.13613892 83.10655212]
[142.42042542 78.52842712]
[156.70471191 73.95030212]
[167.48492432 62.37025452]
[181.96641541 65.85390472]
[196.25070190 61.27577972]
[210.53497314 56.69765091]
[221.31520081 45.11760330]
[235.79667664 48.60125351]
[250.08096313 44.02312851]
[264.36526489 39.44500351]
[278.64953613 34.86687851]
[265.07434082 28.48610115]
[257.70724487 15.41990089]
[259.27352905 0.50190157]
[269.19381714 -10.74922752]
[283.79824829 -14.17131710]
[297.68414307 -8.49841976]
[305.71466064 4.17086840]
[304.91903687 19.14975357]
[295.58956909 30.89839935]
[310.42095947 28.65569878]
[322.90917969 18.94205856]
[336.65020752 24.68949127]
[351.48162842 22.44679070]
[366.23870850 14.10025215]
[378.34423828 25.97007561]
[370.28942871 40.88840103]
[353.72430420 37.27818680]
[338.89291382 39.52088547]
[327.46554565 49.07411575]
[312.66366577 43.48709488]
[297.83224487 45.72979355]
[283.22766113 49.15116119]
[268.94338989 53.72928619]
[254.65908813 58.30741119]
[240.37480164 62.88554001]
[230.61630249 74.13813019]
[215.11309814 70.98193359]
[200.82882690 75.56005859]
[186.54454041 80.13819122]
[176.78602600 91.39077759]
[161.28283691 88.23458862]
[146.99855042 92.81271362]
[132.71426392 97.39083862]
[132.37075806 105.40049744]
[130.09548950 113.08788300]
[126.02425385 119.99423218]
[120.39999390 125.70741272]
[126.79212189 139.27726746]
[133.18423462 152.84710693]
[145.06593323 157.95912170]
[150.09695435 169.43815613]
[146.06898499 180.88153076]
[152.18830872 194.57656860]
[158.30763245 208.27160645]
[173.15739441 213.68084717]
[179.75703430 228.04122925]
[174.19108582 242.83296204]
[159.76173401 249.28041077]
[145.02966309 243.55838013]
[138.73513794 229.06167603]
[144.61259460 214.39093018]
[138.49327087 200.69589233]
[132.37394714 187.00085449]
[117.63439178 177.52058411]
[119.61438751 159.23922729]
[113.22226715 145.66938782]
[106.83014679 132.09953308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[39 77]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[54 63]
[55 62]
[88 132]
[89 131]
[90 130]
[92 128]
[93 127]
[94 126]
[96 124]
[97 123]
[98 122]
[99 121]
[108 120]
[109 119]
[111 117]
[112 116]
[136 156]
[137 155]
[138 154]
[141 152]
[142 151]
[143 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
