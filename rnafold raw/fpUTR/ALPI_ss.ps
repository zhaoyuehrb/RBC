%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUCCCCUGAUUUAAACCCAGGCAGCCUGCGCUGCAGCCGGUUCCUGGUGUCCCCACUUCGCCUCCCUCCUGCUGCCCCCAAGAC\
) } def
/len { sequence length } bind def

/coor [
[88.15647888 186.18911743]
[91.02558899 167.02096558]
[91.55496216 152.03030396]
[92.08432770 137.03965759]
[85.97035980 132.69577026]
[77.28239441 144.92356873]
[65.05472565 136.23541260]
[73.74242401 124.00798798]
[67.62844849 119.66409302]
[53.64700317 125.09723663]
[39.66555023 130.53038025]
[25.68410110 135.96353149]
[22.71150589 151.10179138]
[12.00996113 162.21397400]
[-3.00570750 165.75421143]
[-17.54405594 160.59281921]
[-26.96595001 148.37678528]
[-28.26489639 133.00419617]
[-21.02640724 119.38040161]
[-7.56025839 111.85269165]
[7.83655214 112.82314301]
[20.25095749 121.98207855]
[34.23240662 116.54893494]
[48.21385956 111.11579132]
[62.19530869 105.68264771]
[68.63722229 85.12975311]
[84.06851196 73.18626404]
[72.15479279 64.07235718]
[60.24107361 54.95845032]
[43.91810989 53.37955856]
[37.37118149 38.34394455]
[47.33520126 25.31895638]
[63.56004715 27.70358658]
[69.35498047 43.04473114]
[81.26869965 52.15864182]
[93.18241882 61.27254868]
[108.18008423 61.53727722]
[120.40802002 52.84949875]
[132.63595581 44.16172028]
[144.86390686 35.47394180]
[157.09184265 26.78616142]
[163.86035156 12.48588848]
[178.71690369 11.42185688]
[190.94483948 2.73407769]
[188.46577454 -12.28642750]
[192.73670959 -26.83448601]
[202.85917664 -38.03966522]
[216.78565979 -43.71538925]
[231.73373413 -42.78551102]
[244.74183655 -35.48792648]
[256.96978760 -44.17570496]
[269.19772339 -52.86348343]
[281.42565918 -61.55126190]
[280.60537720 -76.95680237]
[288.26400757 -90.34891510]
[301.95773315 -97.45423126]
[317.31692505 -96.00546265]
[329.44052124 -86.46490479]
[334.45989990 -71.87692261]
[330.77343750 -56.89648819]
[319.55746460 -46.30379486]
[304.39093018 -43.47894287]
[290.11343384 -49.32332230]
[277.88549805 -40.63554382]
[265.65756226 -31.94776726]
[253.42961121 -23.25998688]
[256.03988647 -8.57489586]
[251.99873352 5.84656239]
[242.05609131 17.12951469]
[228.14387512 23.00063896]
[213.00064087 22.24608421]
[199.63262939 14.96201706]
[187.40467834 23.64979553]
[181.51078796 37.32865906]
[165.77961731 39.01409912]
[153.55168152 47.70187759]
[141.32374573 56.38965988]
[129.09579468 65.07743835]
[116.86785889 73.76521301]
[125.45747375 80.29083252]
[131.53392029 89.61182404]
[134.19808960 100.76430511]
[132.91870117 112.50068665]
[127.61920929 123.42913055]
[118.71229553 132.17848206]
[107.07498932 137.56903076]
[106.54561615 152.55967712]
[106.01624298 167.55033875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[9 25]
[10 24]
[11 23]
[12 22]
[27 36]
[28 35]
[29 34]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[43 73]
[44 72]
[50 66]
[51 65]
[52 64]
[53 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
