%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGGUGCCCUGGCCGCCAUUGUUUGAAUUUGAAAACGGUAACAUCGCAGUGCUGCUCGCGGGUCUGGCUAGUCAGGCGAAGUUUGCAGA\
) } def
/len { sequence length } bind def

/coor [
[84.11907959 103.63545990]
[68.82007599 107.66671753]
[58.43846512 96.98628998]
[43.91730881 93.22650146]
[29.39615250 89.46671295]
[14.87499523 85.70692444]
[0.35383829 81.94713593]
[-14.16731834 78.18734741]
[-28.68847466 74.42755890]
[-36.50962067 82.20256042]
[-46.81484604 85.89355469]
[-57.63066864 84.86757660]
[-66.91699219 79.38799286]
[-72.95188904 70.55158997]
[-74.65079498 60.06971359]
[-88.71707153 54.86013794]
[-102.78335571 49.65055847]
[-116.84963989 44.44097900]
[-125.86309814 56.56262207]
[-137.92733765 65.65277100]
[-152.06436157 70.97451782]
[-167.12815857 72.09646606]
[-181.89756775 68.92765808]
[-195.17529297 61.72496796]
[-205.88497925 51.07229614]
[-213.15841675 37.83320236]
[-216.40600586 23.08091736]
[-215.36447144 8.01134968]
[-210.11825562 -6.15388203]
[-201.09262085 -18.26646614]
[-189.01925659 -27.34448814]
[-174.87689209 -32.65203476]
[-159.81196594 -33.75884628]
[-145.04576111 -30.57519913]
[-131.77526855 -23.35917664]
[-121.07630157 -12.69575024]
[-113.81615448 0.55064499]
[-110.58338928 15.30618191]
[-111.64006042 30.37469673]
[-97.57377625 35.58427429]
[-83.50749969 40.79385376]
[-69.44121552 46.00343323]
[-52.65496826 36.48250961]
[-33.89817810 42.15200806]
[-24.92868805 59.90640640]
[-10.40753078 63.66619492]
[4.11362648 67.42597961]
[18.63478279 71.18576813]
[33.15594101 74.94555664]
[47.67709732 78.70534515]
[62.19825363 82.46513367]
[76.45861053 78.16495514]
[87.87886810 89.11430359]
[103.81660461 84.16163635]
[115.74907684 95.83024597]
[130.38893127 99.09745026]
[145.02879333 102.36465454]
[159.66864014 105.63185883]
[172.90745544 97.42382812]
[187.70780945 100.94578552]
[195.45132446 113.61754608]
[210.09117126 116.88475037]
[224.56918335 107.24441528]
[241.23513794 110.88495636]
[250.02221680 125.11442566]
[264.76406860 127.88531494]
[279.50592041 130.65620422]
[294.24777222 133.42709351]
[308.98962402 136.19798279]
[321.89392090 127.07357788]
[337.45620728 129.82865906]
[346.44366455 142.82868958]
[343.52420044 158.36099243]
[330.42987061 167.21051025]
[314.92932129 164.12699890]
[306.21871948 150.93983459]
[291.47686768 148.16894531]
[276.73504639 145.39805603]
[261.99319458 142.62716675]
[247.25132751 139.85627747]
[237.62826538 148.60365295]
[224.52113342 150.17054749]
[212.76344299 143.75039673]
[206.82397461 131.52459717]
[192.18411255 128.25740051]
[179.78771973 136.43449402]
[164.89428711 133.32963562]
[156.40144348 120.27171326]
[141.76158142 117.00450897]
[127.12172699 113.73730469]
[112.48187256 110.47010803]
[102.16525269 116.14719391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[15 42]
[16 41]
[17 40]
[18 39]
[55 91]
[56 90]
[57 89]
[58 88]
[61 85]
[62 84]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
