%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUGCCCUCAGGGCAAAGAAGCCUGCAGAAUAAUUGGGAGGAGUCUGGCAGGAAGGAAGCCAAGUUUCCUGAGGCCCUCACCAGAAGCUCAUCAGAAGCAG\
) } def
/len { sequence length } bind def

/coor [
[35.82759094 272.39065552]
[26.17886162 281.49176025]
[14.02041531 286.71154785]
[0.84092331 287.43499756]
[-11.75417233 283.59619141]
[-21.00495529 295.40396118]
[-30.25573921 307.21170044]
[-39.50652313 319.01943970]
[-48.75730515 330.82720947]
[-53.76601791 347.02441406]
[-70.71676636 346.69525146]
[-75.09292603 330.31582642]
[-60.56505585 321.57641602]
[-51.31427383 309.76867676]
[-42.06349182 297.96090698]
[-32.81270599 286.15316772]
[-23.56192398 274.34542847]
[-31.43715286 259.55911255]
[-32.14205933 242.76654053]
[-25.49062920 227.27185059]
[-12.74895763 216.14430237]
[3.60545897 211.61030579]
[20.36538124 214.60807800]
[28.88635254 202.26332092]
[37.03058624 189.66683960]
[44.79065323 176.83012390]
[52.55072021 163.99339294]
[48.74795914 149.63809204]
[56.43490601 136.50929260]
[71.51784515 132.61793518]
[79.27791595 119.78121948]
[72.17191315 106.80435944]
[72.48810577 92.01267242]
[80.14215851 79.35132599]
[93.09260559 72.19731140]
[107.88536835 72.45870972]
[115.64543152 59.62199402]
[123.40550232 46.78527451]
[131.16557312 33.94855499]
[138.73088074 20.99609756]
[146.09970093 7.93085718]
[153.46852112 -5.13438320]
[160.83732605 -18.19962311]
[162.37298584 -27.37821579]
[168.63116455 -31.54332924]
[176.39122009 -44.38004684]
[184.15129089 -57.21676636]
[191.91136169 -70.05348969]
[192.44619751 -76.91716766]
[195.93585205 -81.66934204]
[200.54756165 -83.41087341]
[209.06852722 -95.75563049]
[217.58949280 -108.10038757]
[226.11047363 -120.44515228]
[234.63143921 -132.78990173]
[243.15242004 -145.13465881]
[251.67338562 -157.47941589]
[245.63571167 -171.67625427]
[248.25440979 -186.87974548]
[258.69384766 -198.23851013]
[273.62286377 -202.12800598]
[288.27764893 -197.30711365]
[297.98190308 -185.31417847]
[299.63906860 -169.97607422]
[292.72030640 -156.18714905]
[279.43341064 -148.34739685]
[264.01815796 -148.95845032]
[255.49717712 -136.61369324]
[246.97619629 -124.26893616]
[238.45523071 -111.92417908]
[229.93426514 -99.57942200]
[221.41328430 -87.23466492]
[212.89231873 -74.88990021]
[204.74807739 -62.29341888]
[196.98800659 -49.45669937]
[189.22795105 -36.61997986]
[181.46788025 -23.78326225]
[173.90257263 -10.83080482]
[166.53375244 2.23443580]
[159.16493225 15.29967594]
[151.79611206 28.36491585]
[151.24259949 35.86202240]
[144.00228882 41.70862198]
[136.24221802 54.54534149]
[128.48214722 67.38205719]
[120.72208405 80.21878052]
[127.82808685 93.19564056]
[127.51189423 107.98732758]
[119.85784149 120.64867401]
[106.90739441 127.80268860]
[92.11463165 127.54129028]
[84.35456848 140.37800598]
[87.91833496 155.54168701]
[79.86565399 168.44940186]
[65.38744354 171.75346375]
[57.62737274 184.59017944]
[49.86730576 197.42689514]
[49.33246613 204.29058838]
[45.84281921 209.04275513]
[41.23110962 210.78428650]
[32.71014023 223.12904358]
[40.14037704 234.27153015]
[43.28298187 247.25711060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[23 101]
[24 100]
[25 97]
[26 96]
[27 95]
[30 92]
[31 91]
[36 86]
[37 85]
[38 84]
[39 83]
[40 81]
[41 80]
[42 79]
[43 78]
[45 77]
[46 76]
[47 75]
[48 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
