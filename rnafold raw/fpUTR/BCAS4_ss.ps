%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGGGUGGCGCUGCCCGCUCGGCCCGGCGCUCCUGGAGCUGCGAGCCGCGACCGCCGGGAGCGCACCUGCCCCGCCUCCGCCAGGCGGUCCGCGGGGC\
) } def
/len { sequence length } bind def

/coor [
[95.67150879 125.40898132]
[85.45402527 122.42901611]
[76.97284698 115.37937927]
[71.82583618 105.19182587]
[59.24154282 113.35488892]
[46.65725327 121.51795197]
[34.07295990 129.68101501]
[21.48866844 137.84407043]
[14.12164593 151.84541321]
[-0.76660615 152.28042603]
[-8.13362789 166.28176880]
[-23.02187920 166.71676636]
[-35.60617065 174.87983704]
[-40.34268188 190.20774841]
[-55.33166885 195.92700195]
[-69.07485962 187.65028381]
[-71.02965546 171.72676086]
[-59.69651031 160.37161255]
[-43.76923370 162.29554749]
[-31.18494225 154.13247681]
[-24.71803284 140.71501160]
[-8.92966843 139.69613647]
[-2.46275949 126.27866364]
[13.32560444 125.25978851]
[25.90989685 117.09672546]
[38.49419022 108.93366241]
[51.07847977 100.77059937]
[63.66277313 92.60753632]
[69.56427765 78.81723785]
[66.78105927 64.07771301]
[63.99784470 49.33818054]
[61.21462631 34.59865189]
[58.43141174 19.85912323]
[55.64819717 5.11959553]
[52.86497879 -9.61993313]
[50.08176422 -24.35946274]
[47.29854584 -39.09899139]
[44.51533127 -53.83852005]
[29.18969154 -60.79199219]
[21.05156326 -75.33394623]
[23.09951210 -91.70554352]
[34.34179688 -103.55522156]
[31.10152817 -118.20106506]
[27.86125946 -132.84690857]
[24.62099266 -147.49275208]
[15.29587650 -161.65179443]
[26.32012939 -174.53208923]
[41.74888229 -167.50428772]
[39.26683426 -150.73301697]
[42.50710297 -136.08717346]
[45.74736786 -121.44132996]
[48.98763657 -106.79549408]
[61.75670624 -102.57560730]
[70.81221008 -92.48633575]
[73.67825317 -79.12429047]
[69.49093628 -66.00136566]
[59.25485992 -56.62173462]
[62.03807449 -41.88220596]
[64.82128906 -27.14267921]
[67.60450745 -12.40314960]
[70.38772583 2.33637905]
[73.17094421 17.07590675]
[75.95415497 31.81543732]
[78.73737335 46.55496597]
[81.52059174 61.29449463]
[84.30380249 76.03401947]
[97.44627380 72.42730713]
[110.29019928 75.32698059]
[119.90864563 83.62934875]
[124.31904602 95.05252075]
[122.88492584 106.74902344]
[135.20925903 115.29950714]
[147.53359985 123.84999084]
[159.85792542 132.40046692]
[172.18226624 140.95095825]
[184.50660706 149.50144958]
[196.83093262 158.05192566]
[213.89204407 154.59336853]
[227.95043945 164.28048706]
[230.68435669 180.79306030]
[243.26864624 188.95611572]
[255.85293579 197.11918640]
[268.43722534 205.28224182]
[285.01596069 208.82937622]
[286.19689941 225.74214172]
[270.27200317 231.55885315]
[260.27416992 217.86654663]
[247.68988037 209.70347595]
[235.10559082 201.54042053]
[222.52130127 193.37734985]
[210.31398010 197.81170654]
[197.60693359 194.29971313]
[189.16232300 183.92237854]
[188.28045654 170.37626648]
[175.95611572 161.82577515]
[163.63179016 153.27529907]
[151.30744934 144.72480774]
[138.98310852 136.17433167]
[126.65878296 127.62384033]
[114.33444214 119.07335663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[10 22]
[12 20]
[13 19]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[42 52]
[43 51]
[44 50]
[45 49]
[71 100]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[77 94]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
