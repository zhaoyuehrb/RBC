%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGAGAGCAGCUCGGCGGCGAGACUGGCCCGCCGCCCCUUCCCCCCACACCCGUCGACCUUGUGGGCAGAAGCUUCCCAGAGCUCCUUAGGCCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[112.31853485 321.09115601]
[109.56229401 306.34655762]
[106.80605316 291.60195923]
[104.04981232 276.85736084]
[94.18082428 269.67608643]
[91.84526062 257.28591919]
[98.85612488 246.32472229]
[96.55525208 231.50222778]
[94.25437927 216.67974854]
[84.65638733 205.28994751]
[90.18528748 190.46624756]
[87.88441467 175.64376831]
[85.58354187 160.82128906]
[83.28266907 145.99880981]
[80.98178864 131.17631531]
[70.05358887 120.90138245]
[55.11757660 119.51735687]
[40.18156433 118.13333130]
[25.24555016 116.74930573]
[10.30953884 115.36528015]
[-4.62647438 113.98125458]
[-19.56248665 112.59722900]
[-28.57350159 114.94890594]
[-34.93471527 110.93365479]
[-47.24297714 120.84739685]
[-62.94713593 119.07116699]
[-72.73018646 106.65877533]
[-70.78802490 90.97428131]
[-58.27289963 81.32300568]
[-42.60980988 83.43088531]
[-33.09138870 96.04734802]
[-18.17846107 97.66121674]
[-3.24244881 99.04524231]
[11.69356346 100.42926788]
[26.62957573 101.81329346]
[41.56558990 103.19731903]
[56.50160217 104.58134460]
[71.43761444 105.96537018]
[79.83007050 82.74291229]
[101.20826721 76.11937714]
[106.62689209 62.13229370]
[112.04551697 48.14521027]
[117.46414185 34.15812683]
[111.32702637 19.84123039]
[117.02153015 5.73352957]
[130.70832825 -0.02904589]
[136.12695312 -14.01612949]
[141.54557800 -28.00321198]
[146.96420288 -41.99029541]
[152.38282776 -55.97737885]
[157.80145264 -69.96446228]
[147.68574524 -81.45059204]
[144.07788086 -96.32479858]
[147.80691528 -111.16909027]
[158.01593018 -122.57235718]
[172.35897827 -127.91421509]
[187.54013062 -125.96714020]
[200.07087708 -117.17856598]
[207.07173157 -103.56803131]
[206.93395996 -88.26314545]
[199.68920898 -74.78085327]
[187.00227356 -66.21929169]
[171.78852844 -64.54583740]
[166.36990356 -50.55875397]
[160.95127869 -36.57167053]
[155.53265381 -22.58458710]
[150.11402893 -8.59750462]
[144.69540405 5.38957930]
[150.92784119 18.86890602]
[145.63183594 33.13098907]
[131.45123291 39.57675171]
[126.03260040 53.56383514]
[120.61397552 67.55091858]
[115.19535065 81.53800201]
[120.84934235 87.00112915]
[124.54726410 94.17881775]
[125.77745056 102.37342072]
[124.27593994 110.73834229]
[120.06817627 118.36549377]
[113.48014069 124.38372040]
[105.11608887 128.05761719]
[95.80427551 128.87544250]
[98.10514832 143.69792175]
[100.40602112 158.52041626]
[102.70689392 173.34289551]
[105.00777435 188.16537476]
[114.77033997 200.61538696]
[109.07685852 214.37887573]
[111.37773895 229.20135498]
[113.67861176 244.02384949]
[125.55698395 257.98840332]
[118.79440308 274.10110474]
[121.55065155 288.84570312]
[124.30689240 303.59030151]
[127.06313324 318.33489990]
[140.77317810 325.85610962]
[146.39291382 340.44900513]
[141.26889038 355.22326660]
[127.82050323 363.20291138]
[112.39767456 360.62023926]
[102.28258514 348.69467163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[7 90]
[8 89]
[9 88]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[24 31]
[40 74]
[41 73]
[42 72]
[43 71]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
