%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGUUGCGGUUAAGUGGGCGGGUCGCCGAGGAGCCUGAGGAAGAGGGCGGCGACGGUGGUGGUGACUGAGCGGAGCCCGGUGACAGGAUGGGAAAGGGAAUAAACCACCCUCCUCGCUCCUGAAAUAACAUCUAGCUGCCAUUGAG\
) } def
/len { sequence length } bind def

/coor [
[110.19221497 412.67364502]
[116.23854828 396.83453369]
[116.23854828 381.83453369]
[116.23854828 366.83453369]
[116.23854828 351.83453369]
[116.23854828 336.83453369]
[108.50125122 324.10723877]
[116.23854828 310.30706787]
[116.23854828 295.30706787]
[116.23854828 280.30706787]
[116.23854828 265.30706787]
[116.23854828 250.30706787]
[116.23854828 235.30706787]
[116.23854828 220.30706787]
[114.50297546 205.40782166]
[111.05513763 190.80944824]
[106.42535400 184.98320007]
[107.69194031 175.86700439]
[104.55264282 161.19918823]
[101.41334534 146.53137207]
[98.27404785 131.86355591]
[95.13475800 117.19573975]
[85.42951965 108.04524994]
[85.20917511 95.64948273]
[74.21852112 85.44137573]
[63.22786713 75.23326111]
[52.23721313 65.02515411]
[41.24655533 54.81704330]
[30.25590134 44.60893250]
[19.26524734 34.40082550]
[16.27428818 38.05167770]
[12.06865692 41.06896973]
[6.80321407 43.11060333]
[0.72087395 43.87544632]
[-5.85847759 43.12470245]
[-20.49238396 39.83095169]
[-35.12628937 36.53720093]
[-49.76019669 33.24345016]
[-61.32551193 43.58864594]
[-76.76617432 45.12666321]
[-90.14493561 37.26610565]
[-96.31739044 23.02951813]
[-92.91009521 7.89115715]
[-81.23323822 -2.32796788]
[-65.77679443 -3.69839454]
[-52.48409271 4.30683422]
[-46.46644592 18.60954475]
[-31.83253860 21.90329552]
[-17.19863319 25.19704628]
[-2.56472683 28.49079704]
[7.05014133 16.97757339]
[1.20049798 3.16519952]
[-4.64914560 -10.64717388]
[-19.02277565 -16.65021706]
[-24.75838280 -30.74125862]
[-18.94681931 -44.40732193]
[-24.79646301 -58.21969604]
[-37.30290222 -67.90987396]
[-35.14153671 -82.64682770]
[-41.13646698 -96.39676666]
[-47.27601242 -110.08274078]
[-53.41556168 -123.76872253]
[-67.01937103 -132.92669678]
[-65.62045288 -149.26606750]
[-50.65789413 -155.97828674]
[-37.52389526 -146.15840149]
[-39.72958755 -129.90826416]
[-33.59003830 -116.22229004]
[-27.45048904 -102.53631592]
[-21.80484390 -97.68794250]
[-21.32916260 -88.49647522]
[-9.24112988 -79.79424286]
[-10.98408985 -64.06934357]
[-5.13444614 -50.25696564]
[8.72441769 -44.92147446]
[14.85355091 -30.99709320]
[9.16322803 -16.49681854]
[15.01287174 -2.68444395]
[20.86251450 11.12792969]
[29.47335625 23.41016960]
[40.46401215 33.61827850]
[51.45466614 43.82638931]
[62.44532013 54.03450012]
[73.43597412 64.24260712]
[84.42662811 74.45072174]
[95.41728973 84.65882874]
[110.23012543 87.02096558]
[123.85062408 80.73748016]
[137.47111511 74.45398712]
[151.09159851 68.17050171]
[157.62736511 61.69027710]
[165.06613159 61.90150833]
[178.81607056 55.90657806]
[192.56600952 49.91165161]
[195.98373413 39.49585724]
[204.42068481 32.84730911]
[214.90748596 31.99569130]
[223.92074585 36.98265457]
[237.91117859 31.57270241]
[242.79434204 16.71710587]
[256.11123657 8.51986790]
[271.57400513 10.85147667]
[281.88162231 22.61101723]
[282.16717529 38.24599457]
[272.29577637 50.37405014]
[256.92843628 53.26868439]
[243.32113647 45.56314468]
[229.33068848 50.97309494]
[218.41474915 66.88542175]
[198.56094360 63.66159058]
[184.81100464 69.65651703]
[171.06106567 75.65145111]
[157.37509155 81.79100037]
[143.75459290 88.07448578]
[130.13410950 94.35797119]
[116.51361847 100.64145660]
[109.80257416 114.05644226]
[112.94186401 128.72425842]
[116.08116150 143.39207458]
[119.22045898 158.05989075]
[122.35975647 172.72770691]
[125.65350342 187.36161804]
[129.10134888 201.95997620]
[135.15013123 188.23364258]
[146.80349731 178.78912354]
[161.48500061 175.71449280]
[175.94871521 179.68952942]
[186.99685669 189.83540344]
[192.18679810 203.90895081]
[190.37107849 218.79864502]
[181.95115662 231.21253967]
[168.78857422 238.40605164]
[153.79345703 238.78874207]
[140.28106689 232.27603149]
[131.23855591 220.30706787]
[131.23855591 235.30706787]
[131.23855591 250.30706787]
[131.23855591 265.30706787]
[131.23855591 280.30706787]
[131.23855591 295.30706787]
[131.23855591 310.30706787]
[138.97584534 324.10723877]
[131.23855591 336.83453369]
[131.23855591 351.83453369]
[131.23855591 366.83453369]
[131.23855591 381.83453369]
[131.23855591 396.83453369]
[137.28489685 412.67364502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[8 141]
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 123]
[16 122]
[18 121]
[19 120]
[20 119]
[21 118]
[22 117]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[35 50]
[36 49]
[37 48]
[38 47]
[51 79]
[52 78]
[53 77]
[56 74]
[57 73]
[59 71]
[60 69]
[61 68]
[62 67]
[87 116]
[88 115]
[89 114]
[90 113]
[92 112]
[93 111]
[94 110]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
