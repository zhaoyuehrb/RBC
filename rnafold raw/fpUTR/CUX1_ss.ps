%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGUGGCGGCGGCGGCGGCCGGCUCCAGGCCGGGUUUUGGCGCCGCCCGCCUGCUGCCUCCUGGCGGCUCCUGAACUCCAGCCCCCUCUCUAUCAGCCGCUCACUCCGUCUCAAUAUGUCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[139.13098145 296.88583374]
[148.05792236 284.70031738]
[160.05715942 275.52453613]
[154.65873718 261.52966309]
[149.26031494 247.53475952]
[137.46098328 238.44493103]
[139.71321106 222.78485107]
[126.03475189 217.00251770]
[120.36061859 202.88661194]
[126.51840210 188.57858276]
[121.11997986 174.58369446]
[115.72154999 160.58880615]
[110.32312775 146.59391785]
[104.92470551 132.59901428]
[99.52627563 118.60412598]
[87.70108032 109.37565613]
[72.81388855 107.53949738]
[57.92669296 105.70333099]
[43.03950119 103.86717224]
[28.15230751 102.03101349]
[13.50879097 108.02083588]
[1.82436264 98.78376770]
[-13.06282997 96.94760895]
[-27.95002365 95.11145020]
[-42.83721542 93.27529144]
[-57.48073196 99.26511383]
[-69.16516113 90.02804565]
[-84.05235291 88.19188690]
[-98.93954468 86.35572815]
[-113.82674408 84.51956940]
[-128.71392822 82.68341064]
[-141.01742554 92.60306549]
[-156.72244263 90.83439636]
[-166.51145935 78.42671967]
[-164.57684326 62.74128723]
[-152.06636047 53.08398819]
[-136.40226746 55.18432999]
[-126.87777710 67.79621124]
[-111.99057770 69.63237762]
[-97.10338593 71.46853638]
[-82.21619415 73.30469513]
[-67.32900238 75.14085388]
[-53.75031662 69.01969910]
[-41.00105667 78.38809967]
[-26.11386299 80.22425842]
[-11.22667027 82.06041718]
[3.66052270 83.89657593]
[17.23920822 77.77542114]
[29.98846817 87.14382172]
[44.87565994 88.97998047]
[59.76285553 90.81613922]
[74.65004730 92.65229797]
[89.53723907 94.48846436]
[75.14066315 84.88240051]
[61.94178009 73.51881409]
[60.83831406 58.55945587]
[59.73484421 43.60009766]
[58.63137817 28.64074135]
[57.52790833 13.68138409]
[56.42443848 -1.27797294]
[46.75991440 -14.52670765]
[53.64788437 -29.40917778]
[70.00259399 -30.61557388]
[78.99972534 -16.90485954]
[71.38379669 -2.38144135]
[72.48726654 12.57791519]
[73.59073639 27.53727150]
[74.69419861 42.49662781]
[75.79766846 57.45598602]
[76.90113831 72.41534424]
[84.05093384 74.68038940]
[98.35052490 79.21047974]
[105.50032043 81.47552490]
[115.01622009 69.88036346]
[124.53211975 58.28520584]
[124.39689636 42.24272537]
[136.94538879 32.24697876]
[152.55146790 35.96585464]
[159.24346924 50.54654694]
[151.88789368 64.80399323]
[136.12727356 67.80110931]
[126.61137390 79.39626312]
[117.09547424 90.99141693]
[131.00547791 85.37787628]
[142.66583252 75.94198608]
[157.08761597 71.81737518]
[171.97387695 73.66098022]
[184.95375061 81.17916107]
[193.95994568 93.17451477]
[197.55805969 107.73657227]
[195.17503357 122.54607391]
[187.19041443 135.24432373]
[174.87588501 143.80892944]
[160.19274902 146.87580872]
[145.47956848 143.95649719]
[133.07966614 135.51597595]
[124.96823883 122.89923096]
[113.52117157 113.20570374]
[118.91959381 127.20059204]
[124.31801605 141.19548035]
[129.71644592 155.19038391]
[135.11486816 169.18527222]
[140.51329041 183.18016052]
[154.68458557 189.64639282]
[159.96000671 203.91610718]
[153.70809937 217.38641357]
[165.89356995 227.47726440]
[163.25520325 242.13633728]
[168.65362549 256.13122559]
[174.05204773 270.12612915]
[189.10498047 268.86672974]
[203.90269470 271.90060425]
[217.24560547 278.98181152]
[228.05206299 289.53631592]
[235.44602966 302.70846558]
[238.82814026 317.43048096]
[237.92417908 332.50894165]
[232.80746460 346.72146606]
[223.89276123 358.91592407]
[211.90274048 368.10375977]
[197.80940247 373.54016113]
[182.75521851 374.78442383]
[167.96057129 371.73565674]
[154.62477112 364.64105225]
[143.82891846 354.07574463]
[136.44818115 340.89614868]
[133.08087158 326.17074585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 110]
[4 109]
[5 108]
[7 106]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[15 98]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[25 44]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
