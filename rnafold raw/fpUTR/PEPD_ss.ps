%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGGCUCUGGAGGAGGUGGGUCAAGGACUCCAUGCCCCGCCCCCUGCCCCGCCCUUACCCCGCCCCAUGCAUUGGCACCCGGAGGGGCUCAGCUGACGCCGCACUUCACGUGACGCCGGUGCCGGGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[100.83715057 145.24609375]
[86.79222107 143.28353882]
[74.04433441 137.07038879]
[63.84539032 127.21680450]
[57.19694519 114.69043732]
[42.39849091 117.14109802]
[27.60003662 119.59175873]
[20.58584213 133.30697632]
[6.99944973 140.18180847]
[-7.85422802 137.76679993]
[-18.31245232 127.19497681]
[-30.66310120 137.08294678]
[-44.48346329 131.52896118]
[-59.28192139 133.97962952]
[-74.08037567 136.43028259]
[-86.43102264 146.31825256]
[-100.25138855 140.76426697]
[-115.04984283 143.21492004]
[-129.84829712 145.66558838]
[-144.64674377 148.11624146]
[-159.44520569 150.56690979]
[-174.24366760 153.01756287]
[-186.59431458 162.90554810]
[-200.41467285 157.35154724]
[-215.21313477 159.80221558]
[-227.56378174 169.69018555]
[-241.38414001 164.13619995]
[-256.18258667 166.58685303]
[-270.82107544 175.13970947]
[-283.09201050 163.44097900]
[-275.24740601 148.41105652]
[-258.63327026 151.78840637]
[-243.83479309 149.33773804]
[-232.54263306 139.62506104]
[-217.66378784 145.00375366]
[-202.86532593 142.55310059]
[-191.57316589 132.84040833]
[-176.69432068 138.21911621]
[-161.89587402 135.76844788]
[-147.09741211 133.31779480]
[-132.29895020 130.86712646]
[-117.50050354 128.41647339]
[-102.70204926 125.96581268]
[-91.40988159 116.25312042]
[-76.53103638 121.63182831]
[-61.73258209 119.18116760]
[-46.93412399 116.73050690]
[-35.64196014 107.01782227]
[-20.76311302 112.39652252]
[-14.27117348 99.01770782]
[-0.98896074 91.94332886]
[14.08833218 94.07138824]
[25.14937592 104.79330444]
[39.94783020 102.34264374]
[54.74628448 99.89198303]
[57.49801254 84.46000671]
[65.34931946 70.89260101]
[77.35818481 60.81762695]
[92.08370972 55.44393921]
[107.75907135 55.41629028]
[122.50346375 60.73800659]
[134.54779053 70.77055359]
[142.44691467 84.31018829]
[157.18385315 81.51329041]
[171.92079163 78.71638489]
[186.65773010 75.91948700]
[201.39466858 73.12258148]
[207.05584717 63.69746780]
[216.79333496 59.08689499]
[227.23493958 60.61699295]
[234.91191101 67.53231049]
[249.76374817 65.42923737]
[264.61560059 63.32616425]
[279.46743774 61.22309113]
[294.31927490 59.12001801]
[309.17111206 57.01694489]
[324.02294922 54.91387177]
[338.87478638 52.81079865]
[348.37045288 40.46293640]
[363.46231079 38.54169083]
[375.17556763 47.67047501]
[390.00173950 45.39345169]
[404.80020142 42.94279099]
[419.56890869 40.31883240]
[434.30584717 37.52193069]
[449.04278564 34.72502899]
[463.77972412 31.92812920]
[478.40921021 28.61480904]
[492.91314697 24.78916740]
[507.41711426 20.96352577]
[521.87518311 16.96813011]
[536.28546143 12.80353069]
[547.25646973 0.61463511]
[563.23950195 4.28556585]
[567.79254150 20.03998375]
[556.23187256 31.67109489]
[540.45007324 27.21380806]
[526.03979492 31.37840843]
[520.43505859 36.30361176]
[511.24273682 35.46747208]
[496.73880005 39.29311371]
[482.23486328 43.11875534]
[480.13482666 46.06076813]
[476.46124268 48.09065247]
[471.67852783 48.45977783]
[466.57662964 46.66506577]
[451.83969116 49.46196747]
[437.10275269 52.25886917]
[422.36581421 55.05577087]
[416.32446289 59.43449402]
[407.25085449 57.74124527]
[392.45239258 60.19190598]
[386.31005859 64.42780304]
[377.27865601 62.52231216]
[368.56039429 74.54427338]
[353.52847290 76.88865662]
[340.97784424 67.66263580]
[326.12600708 69.76570892]
[311.27416992 71.86878204]
[296.42233276 73.97185516]
[281.57049561 76.07492828]
[266.71865845 78.17800140]
[251.86682129 80.28107452]
[237.01498413 82.38414764]
[222.81063843 95.42276001]
[204.19155884 87.85951996]
[189.45462036 90.65642548]
[174.71768188 93.45332336]
[159.98074341 96.25022125]
[145.24380493 99.04712677]
[143.31718445 113.09703064]
[137.13665771 125.86076355]
[127.30918884 136.08488464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[11 49]
[13 47]
[14 46]
[15 45]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[24 36]
[25 35]
[27 33]
[28 32]
[63 130]
[64 129]
[65 128]
[66 127]
[67 126]
[71 124]
[72 123]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[78 117]
[81 114]
[82 112]
[83 111]
[84 109]
[85 108]
[86 107]
[87 106]
[88 102]
[89 101]
[90 100]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
