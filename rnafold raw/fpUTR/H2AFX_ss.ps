%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCAGUUACACUGCGGCGGGCGUCUGUUCUAGUGUUUGAGCCGUCGUGCUUCACCGGUCUACCUCGCUAGC\
) } def
/len { sequence length } bind def

/coor [
[109.68312073 114.09993744]
[106.35348511 119.28119659]
[100.81863403 123.48307037]
[93.43161774 125.87290192]
[82.17153168 135.78302002]
[70.91144562 145.69314575]
[59.65136337 155.60325623]
[48.39128113 165.51338196]
[40.49594498 180.51672363]
[23.89330101 177.08326721]
[22.59649658 160.17900085]
[38.48115921 154.25329590]
[49.74124527 144.34318542]
[61.00132751 134.43305969]
[72.26141357 124.52293396]
[83.52149963 114.61281586]
[81.30085754 99.77809906]
[67.63243103 93.59958649]
[53.96400452 87.42106628]
[40.29557419 81.24254608]
[26.62714767 75.06402588]
[10.37079239 77.22340393]
[0.58837020 64.06148529]
[7.34319973 49.11811066]
[23.68649101 47.76575470]
[32.80566788 61.39559937]
[46.47409439 67.57411957]
[60.14252090 73.75263977]
[73.81095123 79.93115234]
[87.47937775 86.10967255]
[102.46585846 86.74629211]
[116.60902405 81.74919891]
[130.75218201 76.75209808]
[144.89533997 71.75500488]
[159.03851318 66.75790405]
[173.18167114 61.76080704]
[176.08055115 46.74269485]
[186.04159546 35.26774979]
[200.31402588 30.35207176]
[215.03219604 33.22115326]
[226.26246643 43.00616837]
[240.40563965 38.00907135]
[254.43954468 32.71290588]
[268.35787964 27.12005806]
[282.27621460 21.52721024]
[286.97613525 16.19621849]
[292.81436157 14.53692627]
[297.61987305 16.10594940]
[311.96237183 11.71360683]
[326.30487061 7.32126522]
[339.67922974 -3.09810209]
[353.39379883 6.86920071]
[347.61257935 22.80701637]
[330.69723511 21.66376686]
[316.35473633 26.05610847]
[302.01220703 30.44845009]
[287.86904907 35.44554520]
[273.95071411 41.03839493]
[260.03237915 46.63124084]
[254.84664917 52.21456909]
[245.40272522 52.15223312]
[231.25956726 57.14933014]
[228.66915894 71.81750488]
[219.02030945 83.29599762]
[204.82771301 88.43765259]
[189.86888123 85.76746368]
[178.17877197 75.90396881]
[164.03559875 80.90106964]
[149.89244080 85.89816284]
[135.74928284 90.89526367]
[121.60611725 95.89235687]
[107.46295929 100.88945770]
[109.85774994 104.19207764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[41 62]
[42 61]
[43 59]
[44 58]
[45 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
