%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGUUCUCGCGUUCGCGGACGGCUGUGGUGUUUUGGCGCAUGGGCGGAGCCGUAGUUACGGUCGACUGGGGCGUCGUCCCUAGCCCGGGAGCCGGGUCUCUGGAGUCGCGGCCCGGGGUUCACG\
) } def
/len { sequence length } bind def

/coor [
[63.99955750 205.49047852]
[53.30387497 210.12063599]
[41.82658386 208.97509766]
[32.53653336 220.75198364]
[23.24648285 232.52886963]
[13.95643139 244.30575562]
[4.66638041 256.08264160]
[-4.62367058 267.85952759]
[-7.09587336 283.48638916]
[-21.05309105 288.68688965]
[-30.34314346 300.46377563]
[-32.16457367 316.76144409]
[-47.29587555 323.08407593]
[-60.17126083 312.92749023]
[-57.54564285 296.73989868]
[-42.12002563 291.17370605]
[-32.82997513 279.39682007]
[-31.02225876 264.61233521]
[-16.40055275 258.56945801]
[-7.11050129 246.79258728]
[2.17954969 235.01570129]
[11.46960068 223.23881531]
[20.75965309 211.46192932]
[30.04970360 199.68505859]
[26.75569916 181.75767517]
[37.71072769 166.79559326]
[56.42370224 164.44252014]
[65.11997223 152.22062683]
[73.81624603 139.99873352]
[68.20479584 126.08788300]
[53.46220779 123.32091522]
[38.71962357 120.55393982]
[23.97703552 117.78697205]
[8.69402885 123.73355103]
[-3.92629695 113.26171112]
[-0.90123427 97.14398956]
[14.65729237 91.96090698]
[26.74400520 103.04438782]
[41.48659134 105.81135559]
[56.22917938 108.57832336]
[70.97176361 111.34529114]
[71.58752441 95.63805389]
[79.48558044 83.50395203]
[91.38677979 77.70282745]
[90.64497375 62.72117996]
[89.90316772 47.73953247]
[89.16136169 32.75788879]
[88.41956329 17.77624130]
[87.67775726 2.79459524]
[79.26744843 -10.60605335]
[86.36587524 -23.70038986]
[85.62406921 -38.68203735]
[84.88226318 -53.66368484]
[76.47196198 -67.06433105]
[83.57038116 -80.15866852]
[82.82857513 -95.14031219]
[82.08676910 -110.12196350]
[81.34496307 -125.10360718]
[80.60315704 -140.08525085]
[68.72208405 -150.50712585]
[67.77365875 -166.28294373]
[78.32056427 -178.05316162]
[94.10551453 -178.83474731]
[105.76358032 -168.16398621]
[106.37822723 -152.37164307]
[95.58480072 -140.82705688]
[96.32660675 -125.84541321]
[97.06841278 -110.86376953]
[97.81021881 -95.88211823]
[98.55202484 -80.90047455]
[106.90927124 -68.57141113]
[99.86390686 -54.40548706]
[100.60571289 -39.42384338]
[101.34751892 -24.44219589]
[109.70476532 -12.11313534]
[102.65940094 2.05278945]
[103.40120697 17.03443527]
[104.14301300 32.01608276]
[104.88481903 46.99772644]
[105.62662506 61.97937393]
[106.36843109 76.96102142]
[124.15403748 89.53369141]
[125.45269012 113.35873413]
[106.04673767 130.57435608]
[119.95758057 136.18580627]
[133.86842346 141.79725647]
[147.77926636 147.40870667]
[161.69012451 153.02015686]
[177.38275146 151.00727844]
[186.29139709 162.94400024]
[200.20223999 168.55545044]
[209.44131470 168.87876892]
[214.38497925 174.48158264]
[228.15277100 180.43539429]
[241.92056274 186.38920593]
[255.68835449 192.34301758]
[271.42596436 190.71888733]
[280.03665161 202.87231445]
[295.77426147 201.24818420]
[304.38494873 213.40161133]
[318.15274048 219.35542297]
[334.37152100 216.93006897]
[344.36822510 229.92999268]
[337.85906982 244.98199463]
[321.54010010 246.60186768]
[312.19891357 233.12321472]
[298.43112183 227.16940308]
[283.67825317 229.21937561]
[274.08282471 216.64010620]
[259.32998657 218.69009399]
[249.73454285 206.11080933]
[235.96675110 200.15699768]
[222.19895935 194.20318604]
[208.43116760 188.24937439]
[194.59078979 182.46629333]
[180.67994690 176.85484314]
[165.98229980 179.26910400]
[156.07865906 166.93101501]
[142.16781616 161.31954956]
[128.25697327 155.70809937]
[114.34613037 150.09664917]
[100.43528748 144.48519897]
[86.03814697 148.69499207]
[77.34187317 160.91690063]
[68.64559937 173.13879395]
[72.89881134 184.37747192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[10 17]
[11 16]
[27 125]
[28 124]
[29 123]
[30 41]
[31 40]
[32 39]
[33 38]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[51 74]
[52 73]
[53 72]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[90 116]
[91 115]
[93 114]
[94 113]
[95 112]
[96 111]
[98 109]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
