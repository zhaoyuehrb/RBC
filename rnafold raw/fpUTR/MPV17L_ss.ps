%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGCUCCGGAGCUUCUGGAGGGGGCAGAUGCAGGUGCCGGCUGCUGCAGUGCAGUAGCUGCUGGAGGCUGGGGAGGCCCGGACCCGGUGCAGGAAGACGCCGACCACGCGGGCUCCUGAUCGCGGGCGCCCACAGCGCGGAC\
) } def
/len { sequence length } bind def

/coor [
[70.51328278 139.38378906]
[57.37178802 128.26496887]
[48.46227264 112.76921844]
[45.22910309 94.51824188]
[43.71800995 110.26712036]
[30.10526657 116.31216431]
[21.55346107 128.63557434]
[13.00165462 140.95899963]
[4.44984913 153.28240967]
[-4.10195684 165.60583496]
[-12.65376282 177.92924500]
[-21.20556831 190.25267029]
[-25.26834297 206.71263123]
[-42.20972824 207.36518860]
[-47.52663422 191.26654053]
[-33.52898407 181.70086670]
[-24.97718048 169.37744141]
[-16.42537498 157.05403137]
[-7.87356853 144.73060608]
[0.67823726 132.40719604]
[9.23004341 120.08377838]
[17.78184891 107.76036072]
[18.68126106 92.89292908]
[32.90568542 85.96643829]
[24.89574242 73.28413391]
[10.09334469 75.71086884]
[-4.70905352 78.13759613]
[-19.51145172 80.56432343]
[-26.36048508 94.48806000]
[-40.10131073 101.69703674]
[-55.45029449 99.41926575]
[-66.50544739 88.53058624]
[-69.01583099 73.21792603]
[-62.01615143 59.36931229]
[-48.19793320 52.30981827]
[-32.87456131 54.75396347]
[-21.93818092 65.76192474]
[-7.13578320 63.33519745]
[7.66661453 60.90847015]
[22.46901321 58.48173904]
[26.01018143 43.90572739]
[13.97114944 34.95800400]
[1.93211770 26.01028442]
[-10.10691452 17.06256294]
[-22.14594650 8.11484241]
[-34.18497849 -0.83287847]
[-46.22401047 -9.78059959]
[-58.26304245 -18.72832108]
[-70.30207062 -27.67604065]
[-86.62132263 -32.27151108]
[-86.72306824 -49.22515488]
[-70.46014404 -54.01615524]
[-61.35435104 -39.71507263]
[-49.31531906 -30.76735306]
[-37.27628708 -21.81963158]
[-25.23725700 -12.87191010]
[-13.19822502 -3.92418933]
[-1.15919316 5.02353191]
[10.87983894 13.97125244]
[22.91887093 22.91897392]
[34.95790100 31.86669540]
[41.95489120 29.16629791]
[30.28061867 19.74762535]
[32.60020065 4.92806005]
[46.59407806 -0.47299269]
[58.26852417 8.94546318]
[55.94886780 23.76550293]
[62.94585800 21.06510544]
[65.85228729 6.34937763]
[68.59913635 -8.39697170]
[71.18607330 -23.17221260]
[73.77301788 -37.94745255]
[76.35995483 -52.72269440]
[78.94689178 -67.49793243]
[72.81434631 -82.70726776]
[83.13146973 -95.45439148]
[99.28488922 -92.62614441]
[104.65735626 -77.13199615]
[93.72213745 -64.91099548]
[91.13519287 -50.13575363]
[88.54825592 -35.36051559]
[85.96131897 -20.58527374]
[83.37437439 -5.81003237]
[85.33351898 1.37421668]
[80.56801605 9.25580788]
[77.66159058 23.97153664]
[90.07691956 32.38934326]
[102.67170715 24.24248314]
[115.26649475 16.09562492]
[127.86128998 7.94876623]
[140.45606995 -0.19809251]
[141.16165161 -15.69911766]
[150.87004089 -27.80394745]
[165.84815979 -31.85802650]
[180.33662415 -26.30247879]
[188.76431274 -13.27352715]
[187.89062500 2.21893167]
[178.05149841 14.21773148]
[163.03027344 18.10908699]
[148.60293579 12.39669609]
[136.00814819 20.54355431]
[123.41336060 28.69041252]
[110.81856537 36.83727264]
[98.22377777 44.98413086]
[140.80233765 74.29389954]
[136.75143433 119.07135773]
[148.59379578 128.27780151]
[164.23776245 130.63929749]
[169.53695679 144.55935669]
[181.37931824 153.76579285]
[193.22167969 162.97222900]
[205.35693359 171.78901672]
[217.77226257 180.20681763]
[230.18760681 188.62461853]
[242.60293579 197.04243469]
[258.36724854 198.38282776]
[264.55941772 211.92929077]
[276.97476196 220.34709167]
[289.39007568 228.76490784]
[301.80541992 237.18270874]
[318.19195557 237.82571411]
[325.58786011 252.46240234]
[316.38488770 266.03579712]
[300.05023193 264.58276367]
[293.38760376 249.59803772]
[280.97229004 241.18023682]
[268.55694580 232.76243591]
[256.14160156 224.34461975]
[241.26530457 223.60632324]
[234.18513489 209.45776367]
[221.76979065 201.03996277]
[209.35446167 192.62216187]
[196.93913269 184.20434570]
[193.35917664 184.54454041]
[189.43812561 183.12014771]
[186.02937317 179.79127502]
[184.01524353 174.81459045]
[172.17288208 165.60815430]
[160.33052063 156.40171814]
[145.53359985 154.69871521]
[139.38735962 140.12016296]
[127.54499817 130.91371155]
[116.29026794 140.17665100]
[101.92852020 145.26103210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[25 40]
[26 39]
[27 38]
[28 37]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[68 86]
[69 85]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[106 142]
[107 141]
[109 139]
[110 138]
[111 137]
[112 133]
[113 132]
[114 131]
[115 130]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
