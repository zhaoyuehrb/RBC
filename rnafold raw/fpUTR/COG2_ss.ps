%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGGCCGCGGCGCGGGCGCUGCCAUGUUGGCGGAAGCGGACCCCCCUGUGCCGUGGAAACUGGCGGUGGCCGCGGCCGCCGAGUCGGUCUGCGCAGCCUCCUGCGUUUUCUCGCUUGGAUCUUGGCACUGAGAGGCGGUGGCCGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[-15.72683811 171.19346619]
[-24.06625366 176.67189026]
[-33.64706802 179.35061646]
[-43.55922699 178.99392700]
[-52.86685944 175.65351868]
[-60.69666290 169.66197205]
[-66.31980896 161.59970093]
[-80.93380737 164.98068237]
[-95.54781342 168.36166382]
[-110.16181183 171.74263000]
[-124.77581024 175.12361145]
[-139.38981628 178.50459290]
[-154.00381470 181.88557434]
[-168.61781311 185.26655579]
[-183.23181152 188.64752197]
[-197.84580994 192.02850342]
[-212.45980835 195.40948486]
[-227.07380676 198.79046631]
[-241.45022583 203.07051086]
[-255.53378296 208.23316956]
[-269.61737061 213.39582825]
[-283.70092773 218.55848694]
[-297.61770630 224.15521240]
[-311.35430908 230.18064880]
[-325.09091187 236.20608521]
[-338.82751465 242.23150635]
[-350.90377808 254.13108826]
[-365.68136597 245.82090759]
[-361.78677368 229.32034302]
[-344.85293579 228.49490356]
[-331.11633301 222.46948242]
[-317.37973022 216.44404602]
[-303.64312744 210.41860962]
[-302.02493286 207.21881104]
[-298.74304199 204.66644287]
[-294.12969971 203.55015564]
[-288.86358643 204.47491455]
[-274.78002930 199.31225586]
[-260.69644165 194.14959717]
[-246.61288452 188.98693848]
[-259.52261353 181.34893799]
[-263.43518066 166.86820984]
[-256.12878418 153.76797485]
[-241.75248718 149.48750305]
[-228.47024536 156.45759583]
[-223.82469177 170.72009277]
[-230.45478821 184.17646790]
[-215.84078979 180.79548645]
[-201.22679138 177.41450500]
[-186.61279297 174.03352356]
[-171.99879456 170.65255737]
[-157.38478088 167.27157593]
[-142.77078247 163.89059448]
[-128.15678406 160.50961304]
[-113.54278564 157.12863159]
[-98.92878723 153.74766541]
[-84.31478882 150.36668396]
[-69.70079041 146.98570251]
[-63.31793213 127.78022003]
[-46.58509445 116.15369415]
[-26.08519554 116.88041687]
[-10.00393295 129.83474731]
[4.18332529 124.96425629]
[18.37058449 120.09376526]
[27.89595985 108.64315033]
[43.46069717 111.48031616]
[57.64795685 106.60982513]
[71.83521271 101.73933411]
[86.02247620 96.86884308]
[95.34902191 86.45216370]
[109.10703278 88.94390106]
[123.29429626 84.07341003]
[137.48155212 79.20291901]
[151.66880798 74.33242798]
[165.85606384 69.46192932]
[179.71426392 63.72167969]
[193.12132263 56.99482346]
[206.45816040 50.12977982]
[219.79499817 43.26473236]
[233.13183594 36.39968491]
[246.17356873 28.98936081]
[258.89794922 21.04641533]
[271.62231445 13.10346889]
[284.34667969 5.16052341]
[297.07104492 -2.78242183]
[309.79544067 -10.72536755]
[317.40487671 -24.59645462]
[332.29843140 -24.77243805]
[345.02279663 -32.71538162]
[346.23553467 -48.07231903]
[356.14257812 -59.63535690]
[370.78549194 -63.10651016]
[384.50039673 -57.35852432]
[397.22476196 -65.30146790]
[409.94915771 -73.24441528]
[422.67352295 -81.18736267]
[435.39788818 -89.13030243]
[448.12225342 -97.07324982]
[455.34600830 -111.79566193]
[471.72387695 -112.63079834]
[480.40771484 -98.71954346]
[472.46432495 -84.37260437]
[456.06521606 -84.34887695]
[443.34082031 -76.40593719]
[430.61645508 -68.46298981]
[417.89208984 -60.52004242]
[405.16772461 -52.57709885]
[392.44335938 -44.63415146]
[391.58374023 -29.78830910]
[382.03417969 -18.15776062]
[367.29492188 -14.33580780]
[352.96575928 -19.99101257]
[340.24136353 -12.04806614]
[333.54208374 1.25488758]
[317.73837280 1.99900353]
[305.01400757 9.94194889]
[292.28964233 17.88489532]
[279.56524658 25.82784081]
[266.84088135 33.77078629]
[254.11651611 41.71372986]
[253.37307739 44.47895050]
[251.45455933 47.10588455]
[248.41181946 49.13219070]
[244.46679688 50.12409210]
[239.99687195 49.73651886]
[226.66003418 56.60156631]
[213.32321167 63.46661377]
[199.98637390 70.33165741]
[195.44993591 76.22652435]
[186.30221558 77.19754791]
[199.93098450 83.46305084]
[205.31649780 97.46291351]
[199.40046692 111.24697876]
[185.54243469 116.98763275]
[171.61203003 111.42490387]
[165.51997375 97.71772766]
[170.72656250 83.64919281]
[156.53930664 88.51968384]
[142.35205078 93.39017487]
[128.16477966 98.26066589]
[113.97752380 103.13115692]
[104.65097809 113.54783630]
[90.89296722 111.05609894]
[76.70570374 115.92658997]
[62.51844788 120.79708099]
[48.33118820 125.66757202]
[37.79104614 137.46655273]
[23.24107552 134.28102112]
[9.05381680 139.15151978]
[-5.13344145 144.02200317]
[-5.77490234 154.06849670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 40]
[20 39]
[21 38]
[22 37]
[23 33]
[24 32]
[25 31]
[26 30]
[62 150]
[63 149]
[64 148]
[66 146]
[67 145]
[68 144]
[69 143]
[71 141]
[72 140]
[73 139]
[74 138]
[75 137]
[76 130]
[77 128]
[78 127]
[79 126]
[80 125]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[88 113]
[89 112]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
