%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCCAUCUUGCCCCUUCAGAGGCACCGCAAACAAACCCAAUUCCUGGUGUCCCCUAGUCUUGGCGGAGGAGCCUUUUAGAUGAGCCCCGAAAGGCCGGGCAGGGAGGACAAGCUCUUUGGGGCUACCAAACAGAAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[179.88580322 266.69464111]
[176.84855652 256.37799072]
[176.83511353 245.60241699]
[179.85848999 235.23759460]
[185.68608093 226.12348938]
[176.55465698 214.22319031]
[162.66836548 208.83613586]
[160.40577698 193.17755127]
[151.27435303 181.27725220]
[142.14292908 169.37695312]
[133.01150513 157.47665405]
[123.88008881 145.57635498]
[114.74866486 133.67605591]
[105.61724091 121.77575684]
[96.48582458 109.87545013]
[85.31678009 99.86283875]
[72.49310303 92.08123779]
[59.75156021 94.38202667]
[49.21260452 87.57566833]
[46.26478195 75.79494476]
[33.61391068 67.73545074]
[20.96303749 59.67596054]
[8.31216621 51.61646652]
[-4.33870554 43.55697250]
[-16.98957634 35.49747467]
[-32.78577423 34.60822296]
[-39.36259842 21.24429131]
[-52.01346970 13.18479729]
[-39.78119278 21.86647224]
[-33.34078979 35.41347122]
[-34.33003616 50.38081360]
[-42.49737549 62.96233368]
[-55.76585770 69.95856476]
[-70.76133728 69.59038544]
[-83.67049408 61.95141983]
[-91.21053314 48.98424149]
[-91.46398163 33.98608017]
[-105.66793060 29.16448975]
[-119.87188721 24.34289742]
[-132.46557617 33.40813828]
[-147.98231506 33.30602264]
[-160.45559692 24.07581139]
[-165.08920288 9.26671410]
[-160.10139465 -5.42687178]
[-147.41011047 -14.35496235]
[-131.89538574 -14.08452415]
[-119.52297211 -4.71954727]
[-115.05029297 10.13894463]
[-100.84634399 14.96053696]
[-86.64238739 19.78212929]
[-81.82147980 14.03679562]
[-67.35875702 -3.19920421]
[-74.57359314 -16.35010529]
[-81.78842163 -29.50100708]
[-89.14627838 -42.57242584]
[-96.64627838 -55.56280518]
[-112.07667542 -58.09988022]
[-122.22698212 -69.99548340]
[-122.30452728 -85.63287354]
[-112.27269745 -97.62855530]
[-96.86820984 -100.31853485]
[-83.36460876 -92.43268585]
[-78.13786316 -77.69446564]
[-83.65589905 -63.06280518]
[-76.15589905 -50.07242584]
[-70.04122925 -45.82024002]
[-68.63751984 -36.71583939]
[-61.42269135 -23.56493759]
[-54.20785904 -10.41403580]
[-43.95397568 0.53392529]
[-31.30310249 8.59341908]
[-16.41178131 8.90620518]
[-8.93008327 22.84660530]
[3.72078848 30.90609932]
[16.37166023 38.96559143]
[29.02253151 47.02508545]
[41.67340469 55.08457947]
[54.32427597 63.14407730]
[71.83962250 62.92843246]
[80.27470398 79.25756073]
[93.09838104 87.03916168]
[86.94532013 73.35925293]
[94.53382111 60.42036819]
[109.47673798 59.11299515]
[119.19682312 70.53752899]
[115.51275635 85.07815552]
[126.79035950 75.18796539]
[138.06794739 65.29778290]
[138.85137939 49.51292038]
[150.62283325 38.96738434]
[166.39852905 39.91765213]
[176.81901550 51.79994583]
[175.70201111 67.56471252]
[163.71022034 77.85899353]
[147.95814514 76.57537842]
[136.68054199 86.46556854]
[125.40294647 96.35575104]
[117.03482819 99.53998566]
[108.38612366 100.74403381]
[117.51754761 112.64433289]
[126.64896393 124.54463196]
[135.78038025 136.44493103]
[144.91180420 148.34523010]
[154.04322815 160.24552917]
[163.17465210 172.14582825]
[172.30607605 184.04612732]
[186.84550476 190.28437805]
[188.45495605 205.09176636]
[197.58638000 216.99206543]
[217.04287720 213.33226013]
[235.63037109 219.91938782]
[248.34020996 234.89575195]
[251.78923035 254.15438843]
[245.11991882 272.46511841]
[255.49261475 283.30056763]
[265.86532593 294.13604736]
[276.35559082 304.85769653]
[286.96218872 315.46429443]
[297.79763794 325.83700562]
[308.85681152 335.97085571]
[319.91595459 346.10470581]
[330.97512817 356.23855591]
[347.00112915 356.97808838]
[356.29794312 370.05282593]
[351.73382568 385.43298340]
[336.80999756 391.32015991]
[322.97476196 383.19827271]
[320.84127808 367.29772949]
[309.78210449 357.16387939]
[298.72296143 347.02999878]
[287.66378784 336.89614868]
[282.86697388 336.21493530]
[278.47088623 332.46426392]
[276.35559082 326.07089233]
[265.74899292 315.46429443]
[258.74212646 312.93960571]
[255.02984619 304.50872803]
[244.65715027 293.67327881]
[234.28445435 282.83779907]
[224.60655212 287.22869873]
[214.06343079 288.72372437]
[203.50444031 287.19036865]
[193.78353882 282.74069214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 109]
[6 108]
[8 106]
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[15 99]
[16 81]
[17 80]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[27 71]
[28 70]
[37 50]
[38 49]
[39 48]
[52 69]
[53 68]
[54 67]
[55 65]
[56 64]
[86 97]
[87 96]
[88 95]
[114 139]
[115 138]
[116 137]
[117 135]
[118 134]
[119 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
