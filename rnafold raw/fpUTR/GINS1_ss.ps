%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGCGGAGCGGAGGCCGAGGCGAGAGCCUGGCGCUGUAGGACUAGAACGAAAGGAGUGAGGCGCCGAGAGCCCAGAUACCAUUUUGGCGUGAGAGCUGGUGGUUGGCAAGGCCGCGGGAGUGGGAAGCGUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[97.15004730 283.37881470]
[90.84111786 297.27700806]
[79.12125397 307.05493164]
[64.31745911 310.77114868]
[49.36902237 307.68780518]
[37.24396896 298.41711426]
[30.34974289 284.79974365]
[30.05519485 269.53945923]
[36.41880417 255.66621399]
[48.17707825 245.93452454]
[62.99539566 242.27664185]
[66.02558899 227.58589172]
[69.05577850 212.89515686]
[72.08596802 198.20440674]
[75.11615753 183.51365662]
[70.10944366 169.48576355]
[80.47502899 157.53314209]
[83.50521851 142.84239197]
[70.00843811 136.63237000]
[58.83327103 126.16719818]
[51.31743240 112.31053162]
[37.34843445 117.77561188]
[23.37943840 123.24069977]
[9.41044235 128.70578003]
[-0.39980307 141.84698486]
[-16.65155411 139.65321350]
[-22.62640190 124.38124084]
[-12.17793655 111.74155426]
[3.94535828 114.73678589]
[17.91435432 109.27169800]
[31.88335037 103.80661774]
[45.85234833 98.34152985]
[48.38284302 83.55651855]
[37.02643967 73.75691986]
[25.67003822 63.95732498]
[14.31363583 54.15772629]
[2.95723343 44.35812759]
[-8.39916897 34.55852890]
[-21.98446274 41.31985474]
[-37.08270645 42.36200714]
[-51.39102173 37.55724335]
[-62.73896027 27.66725731]
[-69.41773987 14.22259998]
[-70.43750000 -0.71411610]
[-65.67391968 -14.86464787]
[-77.03031921 -24.66424561]
[-92.10554504 -20.98766327]
[-106.44989014 -26.90537453]
[-114.54766846 -40.14190292]
[-113.28511810 -55.60752869]
[-103.14770508 -67.35540771]
[-88.03348541 -70.86823273]
[-73.75418091 -64.79525757]
[-65.80046844 -51.47166824]
[-67.23072052 -36.02064896]
[-55.87431717 -26.22105026]
[-42.57351303 -33.00469208]
[-27.64841652 -34.18236923]
[-13.37093449 -29.54357910]
[-1.92635536 -19.76558304]
[4.92111969 -6.31471825]
[6.10029221 8.77344131]
[1.40042901 23.20212746]
[12.75683117 33.00172424]
[24.11323357 42.80132294]
[35.46963501 52.60092163]
[46.82603836 62.40052032]
[58.18244171 72.20011902]
[71.27548218 59.86675644]
[87.61260986 53.11668777]
[104.97193909 52.62940216]
[121.07547760 58.24831390]
[133.88798523 69.02981567]
[146.46496582 60.85549164]
[159.04194641 52.68116760]
[159.23077393 44.14776230]
[162.78468323 36.49149704]
[169.03884888 30.96465111]
[176.89401245 28.43746948]
[185.00935364 29.26171494]
[192.03118896 33.22371674]
[205.29479980 26.21825600]
[218.55841064 19.21279526]
[231.82203674 12.20733452]
[245.08564758 5.20187330]
[258.34927368 -1.80358744]
[262.26458740 -7.29978704]
[267.58380127 -9.58566189]
[272.37432861 -8.81051826]
[285.94094849 -15.20947552]
[299.50756836 -21.60843277]
[304.61108398 -36.56603241]
[318.83303833 -43.45884705]
[333.73587036 -38.19748688]
[340.47793579 -23.90342903]
[335.05929565 -9.05708122]
[320.69476318 -2.46651888]
[305.90652466 -8.04180622]
[292.33990479 -1.64284933]
[278.77328491 4.75610781]
[265.35473633 11.46002865]
[252.09111023 18.46549034]
[238.82749939 25.47095108]
[225.56387329 32.47640991]
[212.30026245 39.48187256]
[199.03663635 46.48733521]
[189.57164001 65.91770935]
[167.21627808 65.25814819]
[154.63929749 73.43247223]
[142.06231689 81.60679626]
[144.84425354 90.17443085]
[145.89961243 99.12036133]
[145.18778992 108.10015869]
[142.73616028 116.76808929]
[138.63912964 124.79042816]
[149.77117920 134.84417725]
[160.90321350 144.89791870]
[172.03524780 154.95166016]
[188.17544556 157.85444641]
[193.47631836 173.37322998]
[182.48480225 185.54362488]
[166.50801086 181.84576416]
[161.98150635 166.08369446]
[150.84947205 156.02995300]
[139.71742249 145.97621155]
[128.58538818 135.92247009]
[121.77878571 140.41326904]
[114.28501129 143.62896729]
[106.34051514 145.46807861]
[98.19596863 145.87258911]
[95.16577911 160.56332397]
[99.95574951 175.64201355]
[89.80690002 186.54385376]
[86.77671051 201.23458862]
[83.74652100 215.92533875]
[80.71633148 230.61608887]
[77.68614197 245.30682373]
[89.84760284 254.52970886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[17 131]
[18 130]
[21 32]
[22 31]
[23 30]
[24 29]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[45 56]
[46 55]
[73 110]
[74 109]
[75 108]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[89 100]
[90 99]
[91 98]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
