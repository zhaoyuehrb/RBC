%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGGUCUCUCGGUGCUCGCUCCAUCGGGUCUGGCGGGGCUGGCAGCGGCGAGGACCCGGGUCUGGCGCUGUGGGCCGGGAGCCGUGGGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[15.43180943 257.16998291]
[7.09825563 269.64202881]
[-1.03011787 282.24877930]
[-8.95113564 294.98678589]
[-16.87215424 307.72482300]
[-24.79317093 320.46286011]
[-24.78864861 336.86199951]
[-39.12188721 344.83007812]
[-53.04807663 336.17022705]
[-52.24115372 319.79095459]
[-37.53120422 312.54183960]
[-29.61018562 299.80380249]
[-21.68916893 287.06576538]
[-13.76815033 274.32775879]
[-12.89256287 266.84027100]
[-5.37378836 261.30847168]
[2.95976520 248.83644104]
[10.88078308 236.09840393]
[18.38078308 223.10803223]
[25.88078308 210.11764526]
[33.38078308 197.12727356]
[40.88078308 184.13688660]
[48.38078308 171.14649963]
[55.88078308 158.15612793]
[63.38078308 145.16574097]
[64.01091766 137.65361023]
[71.34467316 131.87879944]
[79.26569366 119.14076233]
[87.18670654 106.40273285]
[87.83607483 92.43598175]
[100.07525635 85.67625427]
[107.99627686 72.93821716]
[115.91729736 60.20018768]
[112.36309814 52.16783524]
[112.39737701 43.47980881]
[115.93627167 35.64976883]
[122.29207611 30.01013947]
[130.30546570 27.48546791]
[138.55650330 28.44144630]
[148.07240295 16.84629059]
[157.58830261 5.25113344]
[167.10420227 -6.34402323]
[169.87791443 -21.92019272]
[183.93302917 -26.85001564]
[193.44892883 -38.44517136]
[202.96482849 -50.04032898]
[212.48072815 -61.63548660]
[221.99662781 -73.23064423]
[231.51252747 -84.82579803]
[234.28625488 -100.40196991]
[248.34135437 -105.33178711]
[249.86192322 -112.09282684]
[254.03353882 -116.30916595]
[258.87875366 -117.34737396]
[269.13262939 -128.29533386]
[279.38650513 -139.24330139]
[289.64041138 -150.19125366]
[292.83526611 -166.27618408]
[308.44760132 -171.29487610]
[320.41674805 -160.08454895]
[316.42990112 -144.17741394]
[300.58834839 -139.93737793]
[290.33447266 -128.98941040]
[280.08059692 -118.04145050]
[269.82669067 -107.09349060]
[259.93652344 -95.81589508]
[257.84344482 -81.06908417]
[243.10768127 -75.30989838]
[233.59178162 -63.71474457]
[224.07588196 -52.11958694]
[214.55998230 -40.52442932]
[205.04408264 -28.92927170]
[195.52818298 -17.33411598]
[193.43510437 -2.58731031]
[178.69935608 3.17187595]
[169.18345642 14.76703262]
[159.66755676 26.36219025]
[150.15165710 37.95734787]
[149.22120667 59.50142288]
[128.65533447 68.12120819]
[120.73430634 80.85923767]
[112.81329346 93.59726715]
[112.16392517 107.56401825]
[99.92474365 114.32374573]
[92.00372314 127.06178284]
[84.08270264 139.79981995]
[76.37116241 152.66574097]
[68.87116241 165.65612793]
[61.37116241 178.64649963]
[53.87116241 191.63688660]
[46.37116241 204.62727356]
[38.87116241 217.61764526]
[31.37116432 230.60803223]
[23.87116432 243.59840393]
[23.47225189 250.51683044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 14]
[4 13]
[5 12]
[6 11]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[27 86]
[28 85]
[29 84]
[31 82]
[32 81]
[33 80]
[39 78]
[40 77]
[41 76]
[42 75]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[51 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
