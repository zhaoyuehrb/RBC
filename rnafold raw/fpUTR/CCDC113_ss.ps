%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCGGAGUGACGCGUGGCCGCCGGCACCCGGAGCUCCUGGGCACACGGCAUUGGCAGGGGCCGCUUCGGCAGAGUG\
) } def
/len { sequence length } bind def

/coor [
[102.48926544 364.56472778]
[100.73184204 349.30673218]
[106.85359192 335.22058105]
[119.20780182 326.09539795]
[117.44474030 311.19937134]
[115.68167877 296.30334473]
[113.91861725 281.40731812]
[112.15555573 266.51129150]
[110.39250183 251.61524963]
[108.62944031 236.71922302]
[106.86637878 221.82319641]
[105.10331726 206.92716980]
[95.92371368 195.19754028]
[101.98535156 180.58360291]
[92.80574799 168.85397339]
[98.86737823 154.24003601]
[89.68778229 142.51040649]
[95.74941254 127.89646912]
[93.98635101 113.00044250]
[85.77534485 101.68360138]
[91.11762238 88.76261902]
[78.25113678 73.48067474]
[85.98423767 55.93456268]
[83.05787659 41.22278595]
[80.13152313 26.51100540]
[77.20516968 11.79922676]
[73.99053192 -2.85226130]
[60.79801941 -11.13449383]
[57.45459366 -25.97619820]
[65.43173981 -38.50220108]
[61.93005753 -53.08774948]
[58.42837906 -67.67330170]
[54.92669678 -82.25885010]
[51.42501831 -96.84439850]
[38.55240250 -106.41912079]
[38.15630722 -122.45728302]
[50.54058075 -132.65577698]
[66.20507050 -129.19119263]
[73.13331604 -114.72126007]
[66.01056671 -100.34607697]
[69.51224518 -85.76052856]
[73.01392365 -71.17498016]
[76.51560974 -56.58943176]
[80.01728821 -42.00387955]
[92.81166077 -34.46467972]
[96.57064056 -19.72274017]
[88.57608032 -6.35394192]
[93.32548523 -0.42929724]
[91.91694641 8.87287235]
[94.84330750 23.58465195]
[97.76966095 38.29642868]
[100.69601440 53.00820923]
[109.93099976 58.09437180]
[114.81261444 67.68990326]
[113.43034363 78.59145355]
[106.01364899 86.99955750]
[114.22465515 98.31639862]
[108.88237762 111.23738098]
[110.64543915 126.13340759]
[119.95114899 138.92849731]
[113.76341248 152.47697449]
[123.06911469 165.27206421]
[116.88137817 178.82054138]
[126.18708038 191.61563110]
[119.99934387 205.16410828]
[121.76240540 220.06013489]
[123.52546692 234.95616150]
[125.28852844 249.85218811]
[127.05158234 264.74822998]
[128.81465149 279.64425659]
[130.57771301 294.54028320]
[132.34077454 309.43630981]
[134.10383606 324.33233643]
[148.24693298 330.32135010]
[157.48788452 342.58920288]
[159.34092712 357.83590698]
[153.30760193 371.96014404]
[141.01083374 381.16262817]
[125.75840759 382.96786499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[16 61]
[18 59]
[19 58]
[21 56]
[23 52]
[24 51]
[25 50]
[26 49]
[27 47]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
