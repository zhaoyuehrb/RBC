%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUGCGUCGGGUCACGUGGGCGCGCAGGCGCAGCGCGGUGCAGCCCGUUCGCUCACACAAAGCCCAGACGCGGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[119.98715210 443.40393066]
[116.67064667 428.33728027]
[122.04769897 413.87728882]
[134.40251160 404.63812256]
[133.24012756 389.68322754]
[132.07774353 374.72833252]
[130.91535950 359.77346802]
[129.75296021 344.81857300]
[128.59057617 329.86367798]
[127.42819214 314.90878296]
[125.97602844 299.97921753]
[124.23463440 285.08065796]
[122.49324799 270.18206787]
[120.75185394 255.28350830]
[105.10359192 247.56416321]
[96.97578430 231.95046997]
[99.67498779 214.40046692]
[112.33645630 201.73306274]
[109.44577026 187.01423645]
[106.55508423 172.29541016]
[103.66439819 157.57658386]
[100.77371979 142.85774231]
[97.88303375 128.13891602]
[94.99234772 113.42008972]
[85.94454956 102.76039886]
[90.28881836 89.47059631]
[87.39813995 74.75176239]
[77.14640808 62.70134354]
[82.28597260 48.72156906]
[79.39528656 34.00273895]
[76.50460815 19.28390884]
[73.32904816 4.62390089]
[69.86981201 -9.97177219]
[66.41056824 -24.56744576]
[52.82939148 -32.64996719]
[49.02228928 -47.98885345]
[57.24794388 -61.48382187]
[72.62622833 -65.12854004]
[86.03347015 -56.76066589]
[89.51540375 -41.34470749]
[81.00624084 -28.02668381]
[84.46548462 -13.43101025]
[87.92472076 1.16466296]
[92.65424347 7.09998703]
[91.22343445 16.39322472]
[94.11412048 31.11205482]
[97.00480652 45.83088303]
[107.04977417 56.82851410]
[102.11696625 71.86107635]
[105.00765228 86.57991028]
[114.05545044 97.23960114]
[109.71118164 110.52940369]
[112.60186005 125.24823761]
[115.49254608 139.96707153]
[118.38323212 154.68589783]
[121.27391815 169.40472412]
[124.16459656 184.12355042]
[127.05528259 198.84239197]
[139.26268005 202.68208313]
[148.55261230 211.37654114]
[153.13832092 223.16680908]
[152.17550659 235.70739746]
[145.91697693 246.53276062]
[135.65042114 253.54211426]
[137.39181519 268.44067383]
[139.13320923 283.33926392]
[140.87460327 298.23782349]
[145.07455444 306.65045166]
[142.38308716 313.74639893]
[143.54547119 328.70129395]
[144.70785522 343.65615845]
[145.87025452 358.61105347]
[147.03263855 373.56594849]
[148.19502258 388.52084351]
[149.35740662 403.47573853]
[162.99147034 410.69488525]
[170.53826904 424.15036011]
[169.58967590 439.54852295]
[160.44837952 451.97592163]
[146.03131104 457.46697998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 67]
[12 66]
[13 65]
[14 64]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 43]
[33 42]
[34 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
