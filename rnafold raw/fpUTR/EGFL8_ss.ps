%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUUCUGCUGAGGCUGGUCUGCUUGAAGCCUCCCAGGAGAAAGAAGCCAGCCUGUAGGGUCCAGCGUCAAAGCGAAUC\
) } def
/len { sequence length } bind def

/coor [
[218.96334839 334.86819458]
[211.79756165 321.69049072]
[204.63175964 308.51281738]
[197.46595764 295.33514404]
[182.06597900 287.15332031]
[182.36564636 268.86141968]
[174.70036316 255.96788025]
[167.03507996 243.07432556]
[159.36979675 230.18078613]
[151.70451355 217.28724670]
[144.03924561 204.39369202]
[139.47088623 202.33108521]
[136.27996826 197.23768616]
[136.32450867 190.20652771]
[129.66870117 176.76405334]
[123.01290894 163.32156372]
[116.35710907 149.87908936]
[109.70130920 136.43659973]
[103.04551697 122.99411774]
[96.38971710 109.55163574]
[90.11975098 104.13605499]
[89.74755859 95.46435547]
[83.61152649 81.77680206]
[70.90599823 72.34918213]
[72.75998688 57.57041168]
[66.62395477 43.88285828]
[60.48792267 30.19530487]
[46.68551254 28.33068085]
[35.73443985 19.90271950]
[30.48142433 7.23941994]
[32.22337723 -6.24908066]
[40.38912582 -16.98868370]
[34.78187180 -30.90122032]
[29.17461586 -44.81375885]
[17.64568138 -57.24436569]
[26.39897156 -71.76387787]
[42.77420807 -67.37207031]
[43.08715057 -50.42101288]
[48.69440842 -36.50847626]
[54.30166245 -22.59593964]
[70.24170685 -19.20158195]
[81.19604492 -6.91338205]
[82.77588654 9.63794804]
[74.17547607 24.05927467]
[80.31150818 37.74682999]
[86.44754028 51.43438339]
[98.71417999 59.88297653]
[97.29907990 75.64076996]
[103.43511200 89.32832336]
[109.83219910 102.89583588]
[116.48799896 116.33831787]
[123.14379883 129.78080750]
[129.79959106 143.22328186]
[136.45538330 156.66577148]
[143.11119080 170.10824585]
[149.76698303 183.55073547]
[156.93278503 196.72842407]
[164.59806824 209.62196350]
[172.26333618 222.51550293]
[179.92861938 235.40905762]
[187.59390259 248.30259705]
[195.25918579 261.19613647]
[207.69226074 265.20980835]
[213.76719666 276.31771851]
[210.64364624 288.16934204]
[217.80944824 301.34701538]
[224.97523499 314.52468872]
[232.14103699 327.70239258]
[247.25396729 326.06900024]
[261.84014893 330.34823608]
[273.67529297 339.88748169]
[280.95465088 353.23214722]
[282.56814575 368.34719849]
[278.26974487 382.92773438]
[268.71490479 394.75033569]
[255.36070251 402.01211548]
[240.24353027 403.60574341]
[225.66867065 399.28814697]
[213.85864258 389.71777344]
[206.61442566 376.35403442]
[205.04071045 361.23477173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[22 49]
[23 48]
[25 46]
[26 45]
[27 44]
[32 40]
[33 39]
[34 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
