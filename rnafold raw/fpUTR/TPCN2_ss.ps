%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGUGCGCGCGUCAGCAAAAACGCCAGGGACGGGGUCUCCGCGCCUGCGCAGUGAAGCUGGGCGCCUUCGGGGCUUGAGCUUCUGAGGGUCGGGUCCAGCGCGUGGGCUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[54.25334167 134.29472351]
[46.53875732 148.10760498]
[31.64428520 148.17045593]
[18.85994720 156.01651001]
[6.07560825 163.86257935]
[-6.70873022 171.70864868]
[-14.42331219 185.52153015]
[-29.31778526 185.58436584]
[-33.02871704 202.61540222]
[-47.58834076 211.57327271]
[-63.81280136 207.37591553]
[-76.38188171 215.56237793]
[-88.95095825 223.74884033]
[-101.52003479 231.93531799]
[-102.17681122 247.43847656]
[-111.84704590 259.57382202]
[-126.81232452 263.67501831]
[-141.31820679 258.16513062]
[-149.78688049 245.16276550]
[-148.96195984 229.66763306]
[-139.16064453 217.63790894]
[-124.15175629 213.69929504]
[-109.70650482 219.36622620]
[-97.13742828 211.17976379]
[-84.56834412 202.99330139]
[-71.99926758 194.80682373]
[-71.10408783 181.87684631]
[-62.76934433 171.69740295]
[-49.89337540 168.16502380]
[-37.16384888 172.80003357]
[-30.36368561 159.54835510]
[-14.55479240 158.92430115]
[-1.77045393 151.07824707]
[11.01388454 143.23217773]
[23.79822350 135.38612366]
[30.59838295 122.13443756]
[46.40727615 121.51038361]
[47.92781067 111.24463654]
[55.04900360 103.39437103]
[65.54765320 100.77619934]
[75.93758392 104.51282501]
[89.12464142 97.36429596]
[102.21454620 90.03936768]
[115.20492554 82.53936768]
[128.09344482 74.86564636]
[140.87779236 67.01958466]
[153.66212463 59.17352295]
[166.44645691 51.32746124]
[179.23080444 43.48139954]
[192.01513672 35.63533783]
[204.79948425 27.78927422]
[217.58381653 19.94321251]
[203.57206726 14.58868122]
[197.22512817 0.99764508]
[202.11387634 -13.18332863]
[215.48783875 -19.97576332]
[229.82257080 -15.55811024]
[237.05308533 -2.41582251]
[233.11039734 12.05826187]
[246.98777771 6.36455631]
[260.86517334 0.67085057]
[274.74255371 -5.02285480]
[288.61993408 -10.71656036]
[302.49731445 -16.41026688]
[316.37469482 -22.10397148]
[330.01156616 -28.35184479]
[343.38577271 -35.14375305]
[356.76000977 -41.93566132]
[370.13424683 -48.72756958]
[383.50845337 -55.51947784]
[396.88269043 -62.31138611]
[410.25692749 -69.10329437]
[423.63116455 -75.89520264]
[437.00537109 -82.68711090]
[450.28723145 -89.65795898]
[463.47427368 -96.80648804]
[471.58636475 -111.05871582]
[487.98461914 -110.88897705]
[495.79995728 -96.47187805]
[486.99258423 -82.63849640]
[470.62280273 -83.61943054]
[457.43576050 -76.47090149]
[452.99716187 -70.43824768]
[443.79730225 -69.31288147]
[430.42306519 -62.52097321]
[417.04882812 -55.72906494]
[403.67459106 -48.93715668]
[390.30038452 -42.14524841]
[376.92614746 -35.35334015]
[363.55191040 -28.56143188]
[350.17770386 -21.76952553]
[336.80346680 -14.97761726]
[335.37094116 -11.62010574]
[332.16754150 -8.83329391]
[327.50149536 -7.47625732]
[322.06838989 -8.22659016]
[308.19100952 -2.53288460]
[294.31362915 3.16082096]
[280.43624878 8.85452652]
[266.55886841 14.54823208]
[252.68148804 20.24193764]
[238.80410767 25.93564415]
[225.42987061 32.72755051]
[212.64553833 40.57361221]
[199.86120605 48.41967392]
[187.07685852 56.26573563]
[174.29252625 64.11180115]
[161.50817871 71.95786285]
[148.72384644 79.80392456]
[135.93951416 87.64998627]
[131.83114624 93.91218567]
[122.70492554 95.52975464]
[109.71454620 103.02975464]
[104.78553009 109.55131531]
[96.27317810 110.55135345]
[83.08612061 117.69988251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[3 35]
[4 34]
[5 33]
[6 32]
[8 30]
[11 26]
[12 25]
[13 24]
[14 23]
[41 116]
[42 115]
[43 113]
[44 112]
[45 110]
[46 109]
[47 108]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
