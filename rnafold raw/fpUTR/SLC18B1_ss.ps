%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGCGGAUCGCUGCCUGCAGGGAGUCGGGGAUGCCAGGUUCCAGCUGAGCAGCGGCCGCCCGCCAGAGUGCCAGUGGCUCCUUGGAGGUCGAGUCCAAGGACGUGGCUUGAAGCCGGGAGCUGGGGCGCCGGAGUCCACGCACCGGGG\
) } def
/len { sequence length } bind def

/coor [
[76.85181427 111.18308258]
[62.02933121 113.48396301]
[47.20684814 115.78483582]
[39.14832306 120.21833801]
[32.05670929 117.97753143]
[17.19010925 119.97358704]
[2.32351112 121.96964264]
[-12.54308796 123.96569824]
[-27.40968704 125.96176147]
[-42.27628326 127.95781708]
[-50.42414093 132.22492981]
[-57.46825027 129.83898926]
[-72.37269592 131.52938843]
[-87.27714539 133.21978760]
[-102.18159485 134.91018677]
[-117.08604431 136.60058594]
[-131.99049377 138.29096985]
[-146.89494324 139.98136902]
[-161.78125000 141.82469177]
[-174.42907715 151.32958984]
[-188.07276917 145.35472107]
[-202.93936157 147.35076904]
[-211.40365601 157.13645935]
[-223.87001038 158.46359253]
[-233.56251526 151.16169739]
[-248.46696472 152.85208130]
[-263.37139893 154.54248047]
[-278.27584839 156.23287964]
[-293.18029785 157.92327881]
[-308.08474731 159.61367798]
[-320.92507935 168.85687256]
[-334.44320679 162.60313416]
[-349.34765625 164.29353333]
[-362.20642090 174.47116089]
[-377.34805298 168.17327881]
[-379.19610596 151.87860107]
[-365.84948730 142.34970093]
[-351.03805542 149.38908386]
[-336.13360596 147.69869995]
[-324.35934448 138.57640076]
[-309.77514648 144.70922852]
[-294.87069702 143.01882935]
[-279.96624756 141.32843018]
[-265.06179810 139.63803101]
[-250.15734863 137.94764709]
[-235.25291443 136.25724792]
[-221.76205444 125.07505035]
[-204.93542480 132.48417664]
[-190.06883240 130.48811340]
[-178.48434448 121.12600708]
[-163.77729797 126.95809937]
[-157.52790833 122.92607117]
[-148.58532715 125.07692719]
[-133.68089294 123.38652802]
[-118.77643585 121.69612885]
[-103.87199402 120.00572968]
[-88.96754456 118.31533813]
[-74.06309509 116.62493896]
[-59.15864944 114.93453979]
[-44.27234268 113.09121704]
[-29.40574265 111.09516144]
[-14.53914452 109.09910583]
[0.32745424 107.10304260]
[15.19405270 105.10698700]
[30.06065178 103.11093140]
[44.90597534 100.96235657]
[59.72845459 98.66147614]
[74.55094147 96.36060333]
[81.38123322 80.28320312]
[97.58436584 71.57352448]
[116.58775330 75.07582092]
[129.84027100 90.38888550]
[142.98190308 83.15718079]
[156.12353516 75.92548370]
[169.26516724 68.69377899]
[182.40679932 61.46207809]
[186.76452637 49.27954865]
[197.90963745 43.53866577]
[209.58537292 46.84614563]
[222.87271118 39.88579178]
[236.16004944 32.92543411]
[249.44738770 25.96507835]
[262.73474121 19.00472260]
[276.02206421 12.04436588]
[289.30941772 5.08401012]
[302.59677124 -1.87634611]
[308.79379272 -8.67284966]
[316.22912598 -8.84002972]
[329.65658569 -15.52610493]
[342.79821777 -22.75780678]
[355.63186646 -30.52294350]
[368.46551514 -38.28807831]
[381.29919434 -46.05321503]
[394.13284302 -53.81834793]
[406.96649170 -61.58348465]
[414.76818848 -75.34735107]
[429.66275024 -75.31610107]
[442.49639893 -83.08123016]
[455.33007812 -90.84636688]
[462.75796509 -105.46685028]
[479.14587402 -106.07402802]
[487.63531494 -92.04329681]
[479.49307251 -77.80826569]
[463.09521484 -78.01271820]
[450.26153564 -70.24758148]
[437.42788696 -62.48244476]
[430.54415894 -49.27399063]
[414.73162842 -48.74983215]
[401.89797974 -40.98469543]
[389.06433105 -33.21955872]
[376.23065186 -25.45442390]
[363.39700317 -17.68928909]
[350.56335449 -9.92415333]
[349.78106689 -7.17114639]
[347.82717896 -4.57277632]
[344.75888062 -2.58976197]
[340.80361938 -1.65196288]
[336.34265137 -2.09865546]
[322.91522217 4.58741999]
[309.55712891 11.41099548]
[296.26977539 18.37135124]
[282.98242188 25.33170700]
[269.69509888 32.29206467]
[256.40774536 39.25241852]
[243.12040710 46.21277618]
[229.83306885 53.17313385]
[216.54573059 60.13348770]
[208.00535583 75.43402863]
[189.63850403 74.60370636]
[176.49687195 81.83541107]
[163.35523987 89.06711578]
[150.21360779 96.29881287]
[137.07197571 103.53051758]
[132.67167664 117.87058258]
[139.49525452 131.22868347]
[146.31883240 144.58677673]
[159.48696899 153.35664368]
[158.38629150 168.21052551]
[165.20986938 181.56863403]
[179.25924683 190.02716064]
[178.68814087 206.41636658]
[164.08404541 213.87641907]
[150.47041321 204.73306274]
[151.85177612 188.39219666]
[145.02819824 175.03410339]
[132.34812927 167.21969604]
[132.96072388 151.41035461]
[126.13715363 138.05226135]
[119.31358337 124.69415283]
[109.12832642 128.80995178]
[98.54425049 129.05668640]
[88.93109894 125.68084717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 51]
[21 49]
[22 48]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[32 39]
[33 38]
[72 133]
[73 132]
[74 131]
[75 130]
[76 129]
[79 127]
[80 126]
[81 125]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[88 119]
[89 118]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[97 106]
[98 105]
[99 104]
[134 149]
[135 148]
[136 147]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
