%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGUGCGCUGGAGCGAGUGAGCAGCGAUACCUAGGGCGGAAGUGCUCUCGGCGGAAGUGAUCGCUGUGUGAAUCGUGGGUGGG\
) } def
/len { sequence length } bind def

/coor [
[77.08682251 302.26669312]
[62.61738968 307.41751099]
[47.51398087 304.62777710]
[35.83933640 294.64788818]
[30.73387909 280.16238403]
[33.57094955 265.06777954]
[43.58738708 253.42448425]
[58.08882523 248.36445618]
[60.81337738 233.61396790]
[63.53792953 218.86347961]
[66.26248169 204.11300659]
[59.58375549 196.00238037]
[58.58018494 185.32032776]
[63.84513092 175.71723938]
[73.78665924 170.61535645]
[77.58065796 156.10310364]
[81.37466431 141.59083557]
[85.16866302 127.07858276]
[73.62821198 116.05450439]
[69.13464355 100.74044800]
[72.88870239 85.22853851]
[83.88725281 73.66374969]
[99.19133759 69.13635254]
[102.45279694 54.49521637]
[105.71424866 39.85408020]
[108.97570038 25.21294212]
[112.23715210 10.57180309]
[115.49860382 -4.06933498]
[118.76005554 -18.71047211]
[122.02150726 -33.35161209]
[111.34093475 -55.38415146]
[125.93191528 -74.23619080]
[125.38408661 -89.22618103]
[117.14793396 -102.73456573]
[124.41525269 -115.73593140]
[123.86741638 -130.72592163]
[123.31958771 -145.71591187]
[122.77175903 -160.70590210]
[122.22393036 -175.69589233]
[121.67610168 -190.68589783]
[112.50965118 -204.28399658]
[119.94490814 -218.90072632]
[136.33311462 -219.49966431]
[144.81549072 -205.46464539]
[136.66609192 -191.23371887]
[137.21392822 -176.24372864]
[137.76174927 -161.25373840]
[138.30958557 -146.26374817]
[138.85740662 -131.27375793]
[139.40524292 -116.28376007]
[147.60220337 -103.84755707]
[140.37408447 -89.77400970]
[140.92190552 -74.78401947]
[147.04981995 -71.91426086]
[152.07037354 -67.31647491]
[155.50808716 -61.39277649]
[157.02743530 -54.67226028]
[156.46556091 -47.76377106]
[153.84930420 -41.30075455]
[149.39497375 -35.88316345]
[143.49069214 -32.02179337]
[136.66264343 -30.09015846]
[133.40119934 -15.44902039]
[130.13973999 -0.80788219]
[126.87828827 13.83325577]
[123.61683655 28.47439384]
[120.35538483 43.11553192]
[117.09393311 57.75667191]
[113.83248138 72.39781189]
[124.42171478 81.11089325]
[130.19306946 93.55039978]
[130.00796509 107.26226807]
[123.90293121 119.54145050]
[113.08235931 127.96552277]
[99.68091583 130.87258911]
[95.88691711 145.38484192]
[92.09291840 159.89709473]
[88.29891205 174.40934753]
[94.68060303 193.36203003]
[81.01296997 206.83755493]
[78.28841400 221.58804321]
[75.56386566 236.33853149]
[72.83930969 251.08900452]
[84.57628632 260.99551392]
[89.77245331 275.44873047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 83]
[9 82]
[10 81]
[11 80]
[15 78]
[16 77]
[17 76]
[18 75]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[32 53]
[33 52]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
