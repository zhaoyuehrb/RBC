%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGAUACCGGUUUCAGAGUCCUGGGCAGCGUGCGCGCUCUUCCUGGCGGCUGCGCAGGUGUGAAAAUCACAA\
) } def
/len { sequence length } bind def

/coor [
[94.31009674 227.02990723]
[84.63377380 215.56828308]
[81.71661377 200.85223389]
[72.89983368 212.98750305]
[64.08305359 225.12275696]
[62.90792847 241.47973633]
[48.03865814 248.39614868]
[34.77146912 238.75697327]
[36.75450897 222.47816467]
[51.94779968 216.30596924]
[60.76457596 204.17071533]
[69.58135223 192.03546143]
[75.68240356 178.33227539]
[78.80107880 163.66006470]
[81.91975403 148.98785400]
[85.03842926 134.31564331]
[88.15710449 119.64342499]
[80.05392456 111.32574463]
[77.06297302 100.10524750]
[79.95083618 88.85777283]
[87.97734070 80.46607971]
[99.08528900 77.08097839]
[103.42076111 62.72118759]
[107.75624084 48.36139297]
[112.09171295 34.00160217]
[108.67333984 18.55410194]
[119.75898743 8.60636139]
[124.09446716 -5.75343084]
[128.42994690 -20.11322403]
[132.76542664 -34.47301483]
[137.10090637 -48.83280945]
[136.60011292 -58.25725555]
[141.93029785 -63.69617844]
[146.86329651 -77.86182404]
[151.79629517 -92.02747345]
[140.95120239 -102.76741791]
[135.84808350 -117.15216827]
[137.50018311 -132.32560730]
[145.57945251 -145.27505493]
[158.48178101 -153.42936707]
[173.64537048 -155.16950989]
[188.05950928 -150.14997864]
[198.86222839 -139.36740112]
[203.90866089 -124.96266937]
[202.19682312 -109.79585266]
[194.06660461 -96.87833405]
[181.13227844 -88.77488708]
[165.96194458 -87.09446716]
[161.02894592 -72.92882538]
[156.09594727 -58.76317978]
[151.46069336 -44.49732971]
[147.12521362 -30.13753891]
[142.78973389 -15.77774620]
[138.45425415 -1.41795397]
[134.11878967 12.94183826]
[137.84725952 27.36223030]
[126.45150757 38.33707809]
[122.11603546 52.69686890]
[117.78055573 67.05666351]
[113.44507599 81.41645813]
[122.68896484 96.63414001]
[118.26097870 113.88002014]
[102.82932281 122.76210022]
[99.71064758 137.43431091]
[96.59197235 152.10652161]
[93.47329712 166.77874756]
[90.35462189 181.45095825]
[103.24036407 173.77256775]
[118.23269653 173.29292297]
[131.58288574 180.13194275]
[139.95285034 192.57958984]
[141.24972534 207.52342224]
[135.14923096 221.22685242]
[123.17676544 230.26345825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[22 60]
[23 59]
[24 58]
[25 57]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[33 50]
[34 49]
[35 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
