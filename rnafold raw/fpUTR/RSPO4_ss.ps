%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCACAGCAGCCCCCGCGCCCGCCGUGCCGCCGCCGGGACGUGGGGCCCUUGGGCCGUCGGGCCGCCUGGGGAGCGCCAGCCCGGAUCCGGCUGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[96.78648376 134.50109863]
[92.19562531 148.78129578]
[98.21483612 163.65235901]
[90.21586609 177.55905151]
[74.33483124 179.83334351]
[62.75431061 168.73059082]
[64.35787964 152.76788330]
[77.91542816 144.19044495]
[82.50628662 129.91024780]
[74.92830658 123.91783905]
[69.29932404 116.06614685]
[66.05690002 106.96552277]
[65.45309448 97.32342529]
[51.10322952 92.95520020]
[36.75336456 88.58698273]
[22.40349770 84.21876526]
[8.05363274 79.85054016]
[-6.29623318 75.48232269]
[-20.64609909 71.11409760]
[-35.06216431 66.96957397]
[-49.54093933 63.04974365]
[-64.01971436 59.12991714]
[-78.49848938 55.21008682]
[-93.84105682 59.07224274]
[-104.10414886 48.27788544]
[-118.58292389 44.35805511]
[-132.16380310 52.44108582]
[-147.46173096 48.47259521]
[-155.40072632 34.80702209]
[-151.27072144 19.55190468]
[-137.52197266 11.75783539]
[-122.31137085 16.04889870]
[-114.66309357 29.87928009]
[-100.18431854 33.79911041]
[-85.87737274 29.65658188]
[-74.57865906 40.73131180]
[-60.09988403 44.65114212]
[-45.62110901 48.57096863]
[-31.14233398 52.49079895]
[-23.73289108 51.17715836]
[-16.27787781 56.76423264]
[-1.92801261 61.13245392]
[12.42185307 65.50067902]
[26.77171898 69.86889648]
[41.12158585 74.23711395]
[55.47145081 78.60533905]
[69.82131958 82.97355652]
[81.06041718 70.98371124]
[96.55977631 65.52076721]
[112.83296967 67.81355286]
[126.21952820 77.34632874]
[133.70829773 91.97480774]
[148.70648193 91.74152374]
[163.70466614 91.50824738]
[178.70285034 91.27497101]
[193.70103455 91.04169464]
[207.37921143 83.09071350]
[220.22526550 90.62914276]
[235.22344971 90.39586639]
[250.22164917 90.16259003]
[265.21981812 89.92931366]
[280.21801758 89.69603729]
[295.21618652 89.46276093]
[310.20895386 88.99626160]
[325.19262695 88.29665375]
[340.17630005 87.59705353]
[355.33099365 77.28286743]
[370.62701416 85.72878265]
[385.58166504 84.56352234]
[400.53634644 83.39826202]
[415.49102783 82.23300934]
[425.57266235 70.06190491]
[441.31533813 68.66764832]
[453.37918091 78.87742615]
[454.60690308 94.63395691]
[444.27017212 106.58916473]
[428.50152588 107.65024567]
[416.65628052 97.18767548]
[401.70159912 98.35293579]
[386.74691772 99.51819611]
[371.79226685 100.68344879]
[363.59594727 109.72989655]
[351.02490234 110.72658539]
[340.87591553 102.58072662]
[325.89221191 103.28033447]
[310.90853882 103.97993469]
[304.25671387 107.49825287]
[295.44946289 104.46094513]
[280.45129395 104.69422150]
[265.45309448 104.92749786]
[250.45492554 105.16077423]
[235.45674133 105.39405823]
[220.45854187 105.62733459]
[207.85314941 113.56163025]
[193.93431091 106.03987885]
[178.93612671 106.27315521]
[163.93794250 106.50643921]
[148.93975830 106.73971558]
[133.94157410 106.97299194]
[126.73198700 122.04661560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 39]
[21 38]
[22 37]
[23 36]
[25 34]
[26 33]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 86]
[65 85]
[66 84]
[68 81]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
