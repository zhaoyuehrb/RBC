%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACAUGCGGCGCGGCCCCGGAGGCAGCAGCAGCGGCGGCGGCAGCCGGAGCAGUAGGCACCCGAGCAGCGCCAGCGGCCGAGCGGGCGGCUUCCUGGCCUGGGCGCUCCGGUGGCGGCGGAGGUGCGCGCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[114.25980377 136.27526855]
[103.69207764 146.92060852]
[88.77264404 148.47320557]
[76.23946381 140.23190308]
[71.75278473 125.91862488]
[77.33889771 111.99758911]
[90.47698975 104.75550842]
[76.23239136 100.05535126]
[61.93521881 95.51763153]
[47.58732224 91.14294434]
[33.23942947 86.76825714]
[18.89153290 82.39356232]
[4.54363823 78.01887512]
[-10.91314220 81.39504242]
[-20.83056068 70.28225708]
[-35.17845535 65.90756226]
[-46.96426392 71.28440094]
[-58.86185074 67.28319550]
[-64.62149048 56.58463669]
[-78.86608124 51.88447571]
[-93.11067963 47.18431854]
[-107.09687805 54.04172134]
[-121.47596741 49.07217026]
[-127.92726135 35.69620514]
[-142.17185974 30.99604797]
[-160.06185913 35.18670273]
[-171.27680969 21.73668289]
[-185.62469482 17.36199379]
[-201.08148193 20.73816109]
[-210.99890137 9.62537193]
[-225.34680176 5.25068283]
[-239.17327881 12.42467880]
[-253.66175842 7.78373098]
[-260.41586304 -5.44191504]
[-274.76376343 -9.81660366]
[-289.11166382 -14.19129276]
[-303.45953369 -18.56598282]
[-316.46832275 -9.88809776]
[-332.00592041 -11.65371037]
[-342.73593140 -23.02915001]
[-343.59201050 -38.64328384]
[-334.16992188 -51.12359238]
[-318.91848755 -54.57725906]
[-305.03897095 -47.37356567]
[-299.08486938 -32.91387558]
[-284.73696899 -28.53918839]
[-270.38906860 -24.16449928]
[-256.04116821 -19.78981018]
[-243.05700684 -26.99723625]
[-228.44387817 -22.76506996]
[-220.97210693 -9.09721279]
[-206.62420654 -4.72252369]
[-192.19369507 -8.41159821]
[-181.25001526 3.01409793]
[-166.90211487 7.38878679]
[-156.02702332 1.96985912]
[-143.99963379 5.56209469]
[-137.47169495 16.75145149]
[-123.22710419 21.45161247]
[-110.08223724 14.54161453]
[-95.56923676 19.10532570]
[-88.41052246 32.93972397]
[-74.16592407 37.63988113]
[-59.92132950 42.34004211]
[-43.00268555 37.81922150]
[-30.80376625 51.55966949]
[-16.45587158 55.93436050]
[-2.02534866 52.24528503]
[8.91832733 63.67098236]
[23.26622200 68.04566956]
[37.61411667 72.42035675]
[51.96201324 76.79505157]
[66.30990601 81.16973877]
[73.68880463 80.10244751]
[80.93254852 85.81075287]
[95.17714691 90.51091766]
[109.75064850 94.06237793]
[124.56060028 96.44261932]
[139.37054443 98.82286072]
[150.38046265 88.04844666]
[165.44746399 85.84869385]
[178.76316833 92.85980988]
[185.31867981 106.20758820]
[200.12863159 108.58782959]
[214.93856812 110.96807098]
[229.79165649 105.51864624]
[241.12989807 115.17751312]
[255.93984985 117.55774689]
[270.74978638 119.93798828]
[285.60287476 114.48857117]
[296.94113159 124.14743042]
[311.75106812 126.52766418]
[326.56100464 128.90791321]
[341.37097168 131.28814697]
[356.20703125 133.49964905]
[371.06732178 135.54216003]
[385.92761230 137.58465576]
[400.65280151 131.79853821]
[412.20797729 141.19680786]
[427.09054565 143.07003784]
[441.99349976 144.77372742]
[456.89642334 146.47743225]
[471.79934692 148.18113708]
[485.20269775 139.36466980]
[500.40716553 144.48361206]
[505.74920654 159.61112976]
[497.13085938 173.14271545]
[481.16339111 174.69807434]
[470.09564209 163.08407593]
[455.19271851 161.38037109]
[440.28979492 159.67666626]
[425.38684082 157.97296143]
[418.32330322 160.35903931]
[410.16546631 156.05709839]
[396.50320435 161.98930359]
[383.88510132 152.44494629]
[369.02481079 150.40245056]
[354.16455078 148.35993958]
[347.04849243 150.58460999]
[338.99072266 146.09808350]
[324.18078613 143.71784973]
[309.37081909 141.33761597]
[294.56088257 138.95736694]
[280.76708984 144.57704163]
[268.36956787 134.74792480]
[253.55960083 132.36769104]
[238.74966431 129.98745728]
[224.95587158 135.60713196]
[212.55833435 125.77801514]
[197.74838257 123.39777374]
[182.93844604 121.01753998]
[172.53062439 131.63899231]
[157.68859863 134.12463379]
[144.06965637 127.31449890]
[136.99031067 113.63280487]
[122.18035889 111.25256348]
[107.37041473 108.87232208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 76]
[8 75]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[15 67]
[16 66]
[19 64]
[20 63]
[21 62]
[24 59]
[25 58]
[27 55]
[28 54]
[30 52]
[31 51]
[34 48]
[35 47]
[36 46]
[37 45]
[77 137]
[78 136]
[79 135]
[83 131]
[84 130]
[85 129]
[87 127]
[88 126]
[89 125]
[91 123]
[92 122]
[93 121]
[94 120]
[95 118]
[96 117]
[97 116]
[99 114]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
