%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUCCCUGCAUUGCGCGCGACCCGGCGGCGGGACAGGCUUGCUGCUUCCUCCUCCUCGGCCUCACCAUUCCAGACCAAAAUUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[160.96022034 125.58201599]
[160.18428040 112.73531342]
[145.24011230 111.44230652]
[130.29595947 110.14929962]
[115.35178375 108.85629272]
[99.08262634 117.69942474]
[83.81488037 107.22171021]
[68.81711578 106.96279907]
[53.81934738 106.70388794]
[38.82158279 106.44498444]
[27.50206947 117.14574432]
[12.29589081 116.66952515]
[2.16410494 105.81215668]
[-12.83366013 105.55324554]
[-27.83142662 105.29433441]
[-42.82918930 105.03542328]
[-51.67927933 108.06638336]
[-58.33776474 104.49980927]
[-73.31765747 103.72338867]
[-88.29754639 102.94696808]
[-99.86705017 113.71369171]
[-115.65792084 113.06255341]
[-126.30171204 101.37986755]
[-125.48366547 85.59676361]
[-113.68910217 75.07707977]
[-97.91552734 76.06195068]
[-87.52112579 87.96707916]
[-72.54123688 88.74349976]
[-57.56134415 89.51992035]
[-42.57028198 90.03765869]
[-27.57251549 90.29656982]
[-12.57475090 90.55548096]
[2.42301464 90.81439209]
[12.92351818 80.31320190]
[28.13707352 80.36212158]
[39.08049393 91.44721985]
[54.07825851 91.70612335]
[69.07601929 91.96503448]
[84.07379150 92.22394562]
[91.00363159 84.72987366]
[100.91737366 82.30057526]
[110.52684784 85.74178314]
[116.64479065 93.91212463]
[131.58895874 95.20513153]
[146.53312683 96.49813843]
[161.47729492 97.79114532]
[166.03027344 80.60317230]
[173.68244934 64.55756378]
[184.16838074 50.20752716]
[197.12498474 38.04750443]
[212.10406494 28.49615669]
[228.58781433 21.88193512]
[246.00677490 18.43179321]
[263.75939941 18.26339722]
[281.23300171 21.38111496]
[297.82464600 27.67591476]
[312.96221924 36.92917633]
[326.12396240 48.82028198]
[336.85659790 62.93773651]
[344.79080200 78.79338837]
[359.14959717 74.45460510]
[367.96435547 61.05014801]
[383.95281982 59.72780609]
[394.85000610 71.50196838]
[392.29650879 87.34050751]
[378.25119019 95.09345245]
[363.48837280 88.81340027]
[349.12957764 93.15218353]
[351.02685547 105.84327698]
[351.20431519 118.67575836]
[349.65832520 131.41760254]
[346.41644287 143.83836365]
[341.53683472 155.71336365]
[335.10736084 166.82769775]
[327.24389648 176.98020935]
[318.08831787 185.98704529]
[307.80584717 193.68505859]
[296.58215332 199.93470764]
[284.61999512 204.62263489]
[272.13549805 207.66365051]
[259.35430908 209.00238037]
[246.50746155 208.61419678]
[233.82728577 206.50567627]
[221.54312134 202.71453857]
[209.87721252 197.30891418]
[199.04067993 190.38618469]
[189.22969055 182.07113647]
[180.62191772 172.51380920]
[173.37332153 161.88673401]
[167.61531067 150.38183594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[7 39]
[8 38]
[9 37]
[10 36]
[13 33]
[14 32]
[15 31]
[16 30]
[18 29]
[19 28]
[20 27]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
