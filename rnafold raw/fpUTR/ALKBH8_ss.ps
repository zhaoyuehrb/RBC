%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUUCUCCAACAUGGCCGCGCCCAGGGGAGAUGGCGUGCAAGUAUCCGCUGCGGUGUUCUGGUGCUAGAGUGGAGAGGCUGGCAAAGAAGAAGGCACACGCAUGGUGAGAAUCCGGCCUGAGCCGAAGCGGAGUUUGCU\
) } def
/len { sequence length } bind def

/coor [
[-63.99881744 238.77148438]
[-76.62673187 235.98789978]
[-88.02203369 245.74223328]
[-99.41734314 255.49656677]
[-104.86967468 270.34860229]
[-119.56990051 272.74707031]
[-130.96520996 282.50140381]
[-142.36050415 292.25573730]
[-153.75581360 302.01007080]
[-165.15112305 311.76440430]
[-161.87341309 325.40704346]
[-164.79650879 339.06222534]
[-173.29080200 350.06256104]
[-185.64424133 356.28460693]
[-199.40708923 356.55865479]
[-211.87767029 350.88821411]
[-223.48597717 360.38806152]
[-235.09428406 369.88793945]
[-243.52268982 384.59841919]
[-259.99148560 380.57165527]
[-260.68112183 363.63174438]
[-244.59414673 358.27963257]
[-232.98583984 348.77975464]
[-221.37753296 339.27990723]
[-224.38296509 323.43994141]
[-218.98049927 308.15014648]
[-206.54817200 297.59329224]
[-190.40058899 294.70755005]
[-174.90545654 300.36907959]
[-163.51014709 290.61474609]
[-152.11483765 280.86041260]
[-140.71954346 271.10607910]
[-129.32423401 261.35177612]
[-124.68696594 247.19743347]
[-109.17167664 244.10125732]
[-97.77636719 234.34692383]
[-86.38105774 224.59259033]
[-85.82248688 207.81980896]
[-73.08081818 196.38723755]
[-55.67421341 197.69328308]
[-44.49748230 187.68923950]
[-33.32075119 177.68521118]
[-22.14402008 167.68118286]
[-10.96728897 157.67713928]
[-9.96780491 145.57231140]
[-0.66892385 137.14730835]
[12.27920246 137.35533142]
[23.67450905 127.60099030]
[35.06981659 117.84666443]
[46.46512222 108.09233093]
[57.86042786 98.33799744]
[69.25573730 88.58366394]
[77.55476379 76.08862305]
[82.12685394 61.80240250]
[86.69893646 47.51618576]
[91.11271667 33.18026733]
[95.36763763 18.79640007]
[99.62256622 4.41253471]
[103.87749481 -9.97133160]
[107.81317902 -24.44580460]
[111.42769623 -39.00380325]
[115.04220581 -53.56179810]
[104.64754486 -69.32630920]
[108.92282867 -87.39316559]
[124.73088837 -96.50997162]
[127.69791412 -111.21360779]
[130.66494751 -125.91723633]
[133.63197327 -140.62086487]
[136.59899902 -155.32449341]
[139.56602478 -170.02812195]
[131.08888245 -183.09625244]
[134.30732727 -197.96554565]
[146.81802368 -205.96667480]
[141.07966614 -221.32907104]
[151.72201538 -233.80595398]
[167.79714966 -230.56216431]
[172.76834106 -214.93464661]
[161.52166748 -202.99964905]
[169.95063782 -190.77313232]
[167.15110779 -175.81929016]
[154.26966858 -167.06109619]
[151.30262756 -152.35746765]
[148.33560181 -137.65383911]
[145.36857605 -122.95020294]
[142.40155029 -108.24657440]
[139.43452454 -93.54294586]
[147.71420288 -85.56029510]
[151.11274719 -74.44683838]
[148.66378784 -62.96318817]
[140.86889648 -54.02156448]
[129.60020447 -49.94728470]
[125.98568726 -35.38928604]
[122.37117767 -20.83128929]
[124.06768799 -16.28978729]
[122.87258148 -10.63167953]
[118.26136017 -5.71640444]
[114.00643158 8.66746140]
[109.75150299 23.05132675]
[105.49658203 37.43519211]
[106.62438202 44.79971313]
[100.98515320 52.08827209]
[96.41307068 66.37448883]
[91.84098053 80.66070557]
[102.27551270 76.73287964]
[114.42539978 78.65026855]
[124.97467041 87.00222778]
[139.74034119 89.64325714]
[154.50601196 92.28428650]
[169.73770142 86.20747375]
[182.44694519 96.57120514]
[179.55957031 112.71415710]
[164.04585266 118.02985382]
[151.86497498 107.04994965]
[137.09930420 104.40892792]
[122.33364105 101.76789856]
[116.21238708 115.46206665]
[128.02799988 124.70279694]
[139.84362793 133.94352722]
[151.65924072 143.18426514]
[167.96440125 144.93753052]
[174.35025024 160.04226685]
[164.24757385 172.96000671]
[148.04913330 170.40209961]
[142.41851807 154.99987793]
[130.60289001 145.75915527]
[118.78726959 136.51841736]
[106.97165680 127.27768707]
[84.91908264 119.40000153]
[79.01006317 99.97897339]
[67.61476135 109.73329926]
[56.21945190 119.48763275]
[44.82414627 129.24197388]
[33.42884064 138.99629211]
[22.03353500 148.75062561]
[16.35411072 166.22854614]
[-0.96325594 168.85388184]
[-12.13998699 178.85791016]
[-23.31671906 188.86193848]
[-34.49345016 198.86598206]
[-45.67018127 208.87001038]
[-44.86803818 222.36248779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[16 24]
[17 23]
[18 22]
[40 140]
[41 139]
[42 138]
[43 137]
[44 136]
[47 134]
[48 133]
[49 132]
[50 131]
[51 130]
[52 129]
[53 103]
[54 102]
[55 101]
[56 99]
[57 98]
[58 97]
[59 96]
[60 93]
[61 92]
[62 91]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[73 78]
[106 115]
[107 114]
[108 113]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
