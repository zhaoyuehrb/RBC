%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGCACGUGACCGGGGCCUGAAGCCGGAAGCUACCUAUCUGGUAGGGAGCUCCCCCAGCACCGAAGACUGCG\
) } def
/len { sequence length } bind def

/coor [
[75.26758575 289.46105957]
[59.58791733 287.48025513]
[49.96751022 274.94137573]
[52.11397552 259.28353882]
[64.75386047 249.79621887]
[66.63385773 234.91450500]
[68.51385498 220.03279114]
[66.15787506 212.79107666]
[70.79688263 204.57215881]
[73.29841614 189.78222656]
[62.76260757 179.28770447]
[60.39869308 164.42581177]
[67.32020569 150.86314392]
[81.05946350 143.89614868]
[83.56098938 129.10621643]
[86.06252289 114.31626892]
[78.02512360 101.65135193]
[63.57768250 97.61755371]
[49.13024521 93.58375549]
[34.50370789 100.17496490]
[20.29737282 92.72113800]
[17.40912056 76.94020844]
[28.05457306 64.93796539]
[44.06744766 65.92149353]
[53.16404343 79.13631439]
[67.61148071 83.17011261]
[82.05892181 87.20391083]
[95.49459839 80.53438568]
[101.01646423 66.58773804]
[98.90268707 50.90837097]
[110.78186798 41.92314529]
[116.30373383 27.97649574]
[121.82560730 14.02984905]
[127.34747314 0.08320194]
[125.23369598 -15.59616375]
[137.11286926 -24.58139229]
[142.63475037 -38.52803802]
[148.15661621 -52.47468567]
[153.67848206 -66.42133331]
[159.20034790 -80.36798096]
[159.40937805 -97.32064056]
[175.75738525 -101.81274414]
[184.59951782 -87.34716034]
[173.14700317 -74.84611511]
[167.62512207 -60.89946365]
[162.10325623 -46.95281982]
[156.58139038 -33.00617218]
[151.05952454 -19.05952454]
[153.56826782 -4.37771511]
[141.29411316 5.60507011]
[135.77224731 19.55171776]
[130.25038147 33.49836349]
[124.72851562 47.44501114]
[127.23725128 62.12681961]
[114.96311188 72.10960388]
[109.44124603 86.05625153]
[113.71429443 90.22844696]
[116.26239777 95.62969208]
[116.76504517 101.58061981]
[115.15902710 107.33274078]
[111.64633179 112.16256714]
[106.66879272 115.46260834]
[100.85246277 116.81780243]
[98.35092926 131.60774231]
[95.84940338 146.39768982]
[106.53321838 157.49552917]
[108.60942078 172.58004761]
[101.48941040 185.83786011]
[88.08835602 192.28375244]
[85.58682251 207.07369995]
[83.39557648 221.91278076]
[81.51557922 236.79450989]
[79.63558197 251.67622375]
[89.51895905 264.00888062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 73]
[6 72]
[7 71]
[9 70]
[10 69]
[14 65]
[15 64]
[16 63]
[17 27]
[18 26]
[19 25]
[28 56]
[29 55]
[31 53]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
