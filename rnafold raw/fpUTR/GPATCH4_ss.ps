%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACGGCAUUUCCGGGAAGAUGGCGGCGCACAAGUCAGGUCCGGCACAUGUUUCCGCGGAGCGGACCCAGCAAUGACGGAUGAUAUCACCUCUUCUUCUCUGGUGAGAGUCUGAGGAUAGAGACUUUUUUCUCACC\
) } def
/len { sequence length } bind def

/coor [
[190.91770935 303.79495239]
[183.62297058 316.90167236]
[172.19003296 326.61187744]
[158.07525635 331.68862915]
[143.07664490 331.48519897]
[129.10473633 326.02755737]
[117.93933105 316.01089478]
[111.00270844 302.71115112]
[109.17847443 287.82247925]
[112.69901276 273.24148560]
[121.11585236 260.82546997]
[133.35684204 252.15609741]
[147.86268616 248.33766174]
[162.78558350 249.85655212]
[176.22271729 256.51791382]
[169.02035522 243.36016846]
[161.81800842 230.20242310]
[154.61564636 217.04469299]
[147.41329956 203.88694763]
[140.21093750 190.72920227]
[133.00859070 177.57147217]
[120.11048126 170.12245178]
[120.27125549 154.30206299]
[113.06890106 141.14431763]
[107.04613495 136.74960327]
[105.85623932 127.60407257]
[98.95526123 114.28579712]
[87.28198242 106.58994293]
[87.72645569 92.61518097]
[76.92459869 92.01000214]
[67.44230652 86.97200775]
[60.99319458 78.48872375]
[58.71026230 68.16299438]
[60.94730759 57.91035843]
[67.22601318 49.60371399]
[61.24999619 35.84554291]
[55.27397919 22.08737373]
[49.29796600 8.32920361]
[44.11333847 4.00519180]
[42.23918533 -1.47505581]
[43.37893677 -6.19382429]
[38.03531265 -20.20973206]
[32.69168854 -34.22563934]
[27.34806061 -48.24154663]
[15.20217896 -58.37999344]
[17.89787865 -73.02862549]
[12.55425358 -87.04453278]
[1.07937551 -93.05642700]
[-3.05655885 -104.90785217]
[1.86177754 -116.01831818]
[-3.16141677 -130.15223694]
[-8.18461132 -144.28614807]
[-13.20780468 -158.42005920]
[-18.71061897 -172.37423706]
[-24.68663406 -186.13240051]
[-30.66265106 -199.89057922]
[-36.63866806 -213.64874268]
[-42.61468506 -227.40690613]
[-54.47078323 -239.52587891]
[-46.10752869 -254.27349854]
[-29.62107086 -250.31962585]
[-28.85651398 -233.38293457]
[-22.88049698 -219.62475586]
[-16.90448189 -205.86659241]
[-10.92846489 -192.10841370]
[-4.95244884 -178.35025024]
[-1.73440742 -176.71974182]
[0.82256871 -173.40368652]
[1.91383874 -168.74525452]
[0.92610878 -163.44325256]
[5.94930315 -149.30934143]
[10.97249699 -135.17543030]
[15.99569130 -121.04151154]
[29.94221687 -110.45035553]
[26.57016182 -92.38816071]
[31.91378593 -78.37225342]
[43.67745590 -69.23632050]
[41.36396790 -53.58517456]
[46.70759583 -39.56926346]
[52.05121994 -25.55335808]
[57.39484406 -11.53744984]
[63.05613327 2.35318756]
[69.03215027 16.11135674]
[75.00816345 29.86952591]
[80.98418427 43.62769699]
[99.54046631 49.31182861]
[108.18848419 67.02216339]
[101.04473877 85.71420288]
[112.71801758 93.41005707]
[112.27354431 107.38481903]
[119.17451477 120.70309448]
[126.22663879 133.94197083]
[133.42900085 147.09970093]
[146.84226990 155.48985291]
[146.16633606 170.36911011]
[153.36868286 183.52685547]
[160.57104492 196.68458557]
[167.77339172 209.84233093]
[174.97575378 223.00007629]
[182.17810059 236.15780640]
[189.38044739 249.31555176]
[197.97589111 254.64002991]
[200.25952148 263.32757568]
[211.22206116 273.56585693]
[222.18458557 283.80416870]
[233.14712524 294.04244995]
[244.10966492 304.28076172]
[255.07220459 314.51904297]
[266.03475952 324.75735474]
[277.56192017 334.35549927]
[289.61639404 343.28240967]
[301.67083740 352.20932007]
[313.72531128 361.13626099]
[328.48498535 356.34750366]
[343.23010254 361.18087769]
[352.29086304 373.77777100]
[352.18322754 389.29449463]
[342.94857788 401.76449585]
[328.13784790 406.39282227]
[313.44601440 401.39981079]
[304.52246094 388.70532227]
[304.79840088 373.19070435]
[292.74392700 364.26379395]
[280.68945312 355.33688354]
[268.63500977 346.40997314]
[267.73538208 361.38296509]
[255.60383606 370.20486450]
[241.08248901 366.44580078]
[234.75523376 352.84558105]
[241.23371887 339.31674194]
[255.79644775 335.71987915]
[244.83390808 325.48159790]
[233.87136841 315.24328613]
[222.90882874 305.00500488]
[211.94628906 294.76669312]
[200.98374939 284.52841187]
[190.02120972 274.29010010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[23 93]
[24 92]
[26 91]
[27 90]
[29 88]
[35 85]
[36 84]
[37 83]
[38 82]
[41 81]
[42 80]
[43 79]
[44 78]
[46 76]
[47 75]
[50 73]
[51 72]
[52 71]
[53 70]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[103 137]
[104 136]
[105 135]
[106 134]
[107 133]
[108 132]
[109 131]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
