%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGUCGGCGGCCGGGCGGAGGUACCGGCUCAGGCUUGGGAUCCCGGCUGCGGGUUUGGCGGCGCUGCGCCGGCAGGCAGCGAGGCCGGGCGGGCCCUGGGCCCUCGCGCCCCUCCCGCGAGGCCUGUC\
) } def
/len { sequence length } bind def

/coor [
[104.91210938 444.50021362]
[104.55514526 429.50445557]
[104.19818115 414.50869751]
[103.84121704 399.51296997]
[100.50458527 392.83596802]
[103.65847015 384.15704346]
[103.65847015 369.15704346]
[103.65847015 354.15704346]
[94.06218719 339.51397705]
[103.27328491 323.62136841]
[102.91632080 308.62561035]
[102.55935669 293.62985229]
[102.20239258 278.63412476]
[89.56008148 267.60998535]
[88.73931885 250.51942444]
[100.72928619 237.84547424]
[100.01555634 222.86247253]
[99.30182648 207.87945557]
[98.58809662 192.89645386]
[97.87436676 177.91343689]
[96.98239899 162.93998718]
[95.91230774 147.97819519]
[94.84222412 133.01641846]
[93.77213287 118.05464172]
[82.89070129 108.48694611]
[81.85703278 94.03434753]
[91.26608276 83.01544952]
[90.19599152 68.05366516]
[89.12590790 53.09188461]
[88.05581665 38.13010406]
[85.34802246 34.45297623]
[84.13772583 30.49856567]
[84.32042694 26.79169083]
[85.62582397 23.76419830]
[87.66488647 21.70729828]
[88.02185059 6.71154737]
[88.37881470 -8.28420448]
[88.73577881 -23.27995682]
[89.09274292 -38.27570724]
[89.44971466 -53.27146149]
[87.10370636 -57.18932724]
[86.27478790 -61.24088287]
[86.80902100 -64.91360474]
[88.39628601 -67.80329895]
[90.62163544 -69.65706635]
[92.40242004 -84.55097961]
[94.18320465 -99.44490051]
[95.96398926 -114.33881378]
[97.74477386 -129.23274231]
[99.52556610 -144.12664795]
[101.30635071 -159.02056885]
[95.26210785 -173.64170837]
[104.45566559 -185.36041260]
[106.23645020 -200.25433350]
[98.57774353 -216.95056152]
[109.52249146 -230.61514282]
[110.94832611 -245.54721069]
[112.37416840 -260.47930908]
[113.80001068 -275.41137695]
[115.22585297 -290.34344482]
[108.83537292 -304.81661987]
[117.74744415 -316.75076294]
[119.17328644 -331.68286133]
[120.59912872 -346.61492920]
[122.02496338 -361.54702759]
[123.45080566 -376.47909546]
[118.93745422 -392.82125854]
[133.39152527 -401.68218994]
[145.90745544 -390.24591064]
[138.38288879 -375.05325317]
[136.95704651 -360.12118530]
[135.53120422 -345.18908691]
[134.10536194 -330.25701904]
[132.67951965 -315.32495117]
[139.17198181 -301.91983032]
[130.15792847 -288.91760254]
[128.73208618 -273.98553467]
[127.30625153 -259.05346680]
[125.88040924 -244.12136841]
[124.45456696 -229.18930054]
[131.93595886 -219.60633850]
[130.80674744 -207.09761047]
[121.13036346 -198.47354126]
[119.34957886 -183.57962036]
[125.52119446 -170.02380371]
[116.20026398 -157.23979187]
[114.41947937 -142.34587097]
[112.63869476 -127.45195007]
[110.85791016 -112.55802917]
[109.07712555 -97.66411591]
[107.29633331 -82.77019501]
[105.51554871 -67.87627411]
[104.44546509 -52.91449356]
[104.08850098 -37.91874313]
[103.73152924 -22.92299080]
[103.37456512 -7.92723894]
[103.01760101 7.06851292]
[102.66063690 22.06426430]
[103.01760101 37.06001663]
[104.08769226 52.02179718]
[105.15777588 66.98358154]
[106.22786713 81.94535828]
[117.10929871 91.51305389]
[118.14296722 105.96565247]
[108.73391724 116.98455048]
[109.80400848 131.94633484]
[110.87409210 146.90811157]
[111.94418335 161.86988831]
[115.70918274 170.30171204]
[112.85738373 177.19970703]
[113.57110596 192.18272400]
[114.28483582 207.16572571]
[114.99856567 222.14874268]
[115.71229553 237.13174438]
[126.69609070 245.02745056]
[131.03373718 257.63412476]
[127.34317017 270.24191284]
[117.19814301 278.27716064]
[117.55510712 293.27288818]
[117.91207123 308.26864624]
[118.26904297 323.26440430]
[127.08183289 332.76922607]
[127.01690674 345.32864380]
[118.65847015 354.15704346]
[118.65847015 369.15704346]
[118.65847015 384.15704346]
[118.83696747 399.15600586]
[119.19393158 414.15173340]
[119.55089569 429.14749146]
[119.90785980 444.14324951]
[122.55637360 463.34313965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[6 126]
[7 125]
[8 124]
[10 121]
[11 120]
[12 119]
[13 118]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[21 108]
[22 107]
[23 106]
[24 105]
[27 102]
[28 101]
[29 100]
[30 99]
[35 98]
[36 97]
[37 96]
[38 95]
[39 94]
[40 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[53 84]
[54 83]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
