%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCUAUCCAUAUAAAAGAGCCCUUGGAAUGAGGCUGACUCGUCCUGCUUUAAAAAGCUCCAAGAACUGUCUCACUCCCAGGCUACAUCUUCUCACUUGCUAACAAGGACCUCUGAGUUCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[199.77449036 312.60534668]
[187.67059326 313.99591064]
[175.48902893 313.68737793]
[163.46717834 311.68524170]
[151.83940125 308.02792358]
[140.83244324 302.78622437]
[130.66102600 296.06176758]
[121.52363586 287.98510742]
[113.59869385 278.71328735]
[107.04103851 268.42657471]
[101.97891998 257.32513428]
[98.51146698 245.62509155]
[96.70677185 233.55424500]
[96.60053253 221.34774780]
[98.19537354 209.24343872]
[101.46074677 197.47727966]
[106.33355713 186.27867126]
[112.71934509 175.86605835]
[120.49414062 166.44262695]
[129.50686646 158.19235229]
[121.23034668 145.68238831]
[112.95383453 133.17240906]
[104.67731476 120.66244507]
[91.98605347 119.61098480]
[82.19053650 111.47332001]
[78.83026123 99.18991089]
[83.11942291 87.19921112]
[75.14999390 74.49141693]
[67.18055725 61.78361511]
[53.29365540 54.20308304]
[53.08665085 39.30991745]
[45.11721802 26.60211945]
[37.14778519 13.89431953]
[29.17835617 1.18652010]
[21.20892334 -11.52127934]
[13.23949242 -24.22907829]
[-0.60240304 -24.15249062]
[-12.56652737 -30.89558601]
[-19.55753899 -42.59022522]
[-19.82823563 -56.10386276]
[-13.41501999 -67.87835693]
[-21.07264137 -80.77645111]
[-36.24567413 -79.53530121]
[-50.39527893 -84.98284149]
[-60.73420715 -95.98859406]
[-65.25083923 -110.33296967]
[-63.10040665 -125.15474701]
[-54.76244736 -137.52180481]
[-62.42006683 -150.41989136]
[-70.07769012 -163.31799316]
[-77.73530579 -176.21607971]
[-92.29320526 -183.76589966]
[-92.76342010 -200.15829468]
[-78.66223907 -208.53019714]
[-64.49574280 -200.26930237]
[-64.83721161 -183.87370300]
[-57.17959213 -170.97561646]
[-49.52197266 -158.07751465]
[-41.86435318 -145.17941284]
[-27.01486778 -146.57879639]
[-12.97262764 -141.37063599]
[-2.54146457 -130.53771973]
[2.17107630 -116.19157410]
[0.17940305 -101.16092682]
[-8.17454529 -88.43407440]
[-0.51692545 -75.53597260]
[15.82272243 -74.56833649]
[28.51693344 -63.97475433]
[32.47138214 -47.75037384]
[25.94729233 -32.19850922]
[33.91672516 -19.49071121]
[41.88615417 -6.78291130]
[49.85558701 5.92488813]
[57.82501602 18.63268661]
[65.79444885 31.34048653]
[79.11132812 38.01206970]
[79.88835907 53.81418228]
[87.85778809 66.52198029]
[95.82722473 79.22978210]
[111.95461273 82.50996399]
[120.86757660 96.34511566]
[117.18728638 112.38593292]
[125.46379852 124.89589691]
[133.74031067 137.40586853]
[142.01683044 149.91583252]
[158.94462585 142.90800476]
[176.95529175 139.57853699]
[195.25932312 140.07121277]
[213.05474854 144.36227417]
[229.56234741 152.26159668]
[244.05976868 163.42114258]
[255.91313171 177.35021973]
[264.60467529 193.43713379]
[269.75549316 210.97598267]
[271.14196777 229.19767761]
[268.70550537 247.30368042]
[262.55499268 264.50091553]
[252.96195984 280.03662109]
[264.01083374 290.18170166]
[275.05972290 300.32675171]
[286.10858154 310.47183228]
[297.15744019 320.61691284]
[308.32904053 330.62667847]
[319.62167358 340.49969482]
[330.91430664 350.37271118]
[346.46661377 349.49865723]
[357.77828979 359.67214966]
[358.51571655 374.50427246]
[369.80838013 384.37728882]
[385.99325562 387.01953125]
[391.54357910 402.45086670]
[380.74966431 414.79684448]
[364.71533203 411.35699463]
[359.93536377 395.66992188]
[348.64273071 385.79690552]
[333.84497070 387.04681396]
[322.25198364 377.19506836]
[321.04129028 361.66534424]
[309.74865723 351.79232788]
[298.45602417 341.91931152]
[291.27554321 339.86401367]
[287.01239014 331.66577148]
[275.96350098 321.52072144]
[264.91464233 311.37564087]
[253.86576843 301.23056030]
[242.81689453 291.08551025]
[233.29763794 298.67703247]
[222.81230164 304.87002563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 85]
[21 84]
[22 83]
[23 82]
[27 79]
[28 78]
[29 77]
[31 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[41 66]
[42 65]
[48 59]
[49 58]
[50 57]
[51 56]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 120]
[104 119]
[105 118]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
