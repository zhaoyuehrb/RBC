%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCGAAGGAAACCGAUGGGGAUCGGAACCGUAGCGGUUGAGCUGCUGCUGCUACGGAUAUCUGACAGAAGCCUUCGGUGGUUGUCGGCCUA\
) } def
/len { sequence length } bind def

/coor [
[117.54983521 210.74429321]
[105.34809113 220.18469238]
[89.97750092 221.50692749]
[76.34275055 214.28909302]
[68.79464722 200.83436584]
[69.74176025 185.43609619]
[78.88187408 173.00782776]
[93.29840088 167.51536560]
[96.28619385 152.81594849]
[99.27398682 138.11651611]
[89.11823273 135.21914673]
[80.48143768 129.77270508]
[73.95603943 122.38014221]
[69.92357635 113.76666260]
[55.22415161 116.75445557]
[40.52472687 119.74224091]
[25.82530022 122.73003387]
[11.12587452 125.71781921]
[-0.79323107 136.98133850]
[-16.42775154 132.03222656]
[-19.69423103 115.96168518]
[-7.23239708 105.30172729]
[8.13808441 111.01839447]
[22.83751106 108.03060913]
[37.53693771 105.04281616]
[52.23636246 102.05502319]
[66.93578339 99.06723785]
[69.52490997 87.13993835]
[76.26323700 76.96354675]
[86.23333740 69.92357635]
[83.24554443 55.22415161]
[80.25775909 40.52472687]
[77.26996613 25.82530022]
[74.28218079 11.12587452]
[71.29438782 -3.57355094]
[68.30660248 -18.27297592]
[65.31880951 -32.97240067]
[62.33102036 -47.67182922]
[59.34323120 -62.37125397]
[44.92669678 -67.86371613]
[35.78658295 -80.29198456]
[34.83946991 -95.69024658]
[42.38757324 -109.14497375]
[56.02232361 -116.36280823]
[71.39292145 -115.04057312]
[83.59465790 -105.60017395]
[88.73401642 -91.05402374]
[85.17103577 -76.04373932]
[74.04265594 -65.35903931]
[77.03044128 -50.65961838]
[80.01823425 -35.96019363]
[83.00602722 -21.26076698]
[85.99381256 -6.56134081]
[88.98160553 8.13808441]
[91.96939087 22.83751106]
[94.95718384 37.53693771]
[97.94497681 52.23636246]
[100.93276215 66.93578339]
[114.72035217 69.25579071]
[126.70865631 77.23242950]
[134.62240601 89.75986481]
[136.79731750 104.83973694]
[132.51876831 119.89787292]
[146.51647949 125.28898621]
[160.51419067 130.68009949]
[174.51190186 136.07122803]
[188.50961304 141.46234131]
[202.50732422 146.85345459]
[216.50503540 152.24456787]
[230.80982971 146.07931519]
[244.92869568 151.74607849]
[250.71817017 165.42152405]
[264.71588135 170.81263733]
[278.71359253 176.20375061]
[295.66744995 176.25413513]
[300.31234741 192.55938721]
[285.93014526 201.53649902]
[273.32247925 190.20146179]
[259.32476807 184.81034851]
[245.32705688 179.41921997]
[231.86001587 185.67816162]
[217.58753967 180.41020203]
[211.11390686 166.24227905]
[197.11621094 160.85116577]
[183.11849976 155.46005249]
[169.12078857 150.06892395]
[155.12307739 144.67781067]
[141.12536621 139.28669739]
[127.12765503 133.89558411]
[113.97341156 141.10430908]
[110.98561859 155.80372620]
[107.99783325 170.50315857]
[119.12621307 181.18785095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 92]
[9 91]
[10 90]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
