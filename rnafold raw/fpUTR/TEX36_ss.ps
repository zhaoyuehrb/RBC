%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGAGGCUGAGAAGUAAAGAUCAGGAACAAGGAGGAGGAGGAGCUUCCCAGACGUGUAGAGCUUAUGAAGUUUAGGAAGCAGCUUCCCAGACAUGUAGAGCUUAUGGAGAGGUGAGGGAGCCAAUCUCAGCCACAUUCAGCUUCCUGGAGAGA\
) } def
/len { sequence length } bind def

/coor [
[77.42015839 298.32363892]
[75.91202545 283.19769287]
[80.31192017 268.64746094]
[89.94889832 256.89172363]
[103.35338593 249.72317505]
[101.84555054 234.79914856]
[100.33772278 219.87513733]
[98.82989502 204.95111084]
[97.32206726 190.02708435]
[95.81423187 175.10305786]
[94.30640411 160.17904663]
[92.79857635 145.25502014]
[78.57052612 140.50500488]
[68.39961243 151.53009033]
[71.57410431 166.71896362]
[65.18382263 180.85911560]
[51.68596268 188.51336670]
[36.27072906 186.73849487]
[24.86559296 176.21696472]
[21.85605812 160.99453735]
[28.39935684 146.92453003]
[41.97945404 139.41717529]
[57.37452698 141.35916138]
[67.54544067 130.33407593]
[61.33969116 120.64334106]
[57.90160751 109.82430267]
[57.38923264 98.63912964]
[59.75741577 87.85444641]
[64.76626587 78.18882751]
[72.00281525 70.26488495]
[80.91398621 64.56932068]
[90.84835052 61.42334366]
[101.10348511 60.96529007]
[104.39921570 46.33182907]
[96.21699524 33.07705307]
[99.76779175 18.28359413]
[112.45462036 10.56478405]
[115.75035095 -4.06867647]
[119.04607391 -18.70213699]
[122.34180450 -33.33559799]
[114.15958405 -46.59037399]
[117.71038055 -61.38383484]
[130.39721680 -69.10264587]
[129.22830200 -78.22119904]
[133.90945435 -83.99618530]
[137.49919128 -98.56031036]
[141.08892822 -113.12443542]
[144.67864990 -127.68856812]
[148.26838684 -142.25270081]
[151.85812378 -156.81681824]
[155.30102539 -171.41635132]
[158.59675598 -186.04981995]
[147.42448425 -196.49621582]
[143.01022339 -211.03620911]
[146.44367981 -225.73579407]
[156.70523071 -236.66998291]
[170.96598816 -240.97076416]
[166.44985962 -256.13372803]
[176.79446411 -266.84997559]
[180.09019470 -281.48342896]
[183.23841858 -296.14935303]
[186.23880005 -310.84622192]
[189.23918152 -325.54306030]
[192.23956299 -340.23992920]
[195.23995972 -354.93679810]
[198.24034119 -369.63363647]
[186.17222595 -378.91384888]
[179.35791016 -392.45828247]
[179.10108948 -407.55645752]
[185.39918518 -421.21276855]
[196.95433044 -430.74102783]
[211.44058228 -434.29269409]
[214.44096375 -448.98953247]
[217.44134521 -463.68640137]
[220.44172668 -478.38327026]
[215.62118530 -493.45220947]
[225.74790955 -504.37460327]
[228.74829102 -519.07147217]
[231.74867249 -533.76831055]
[234.74905396 -548.46520996]
[237.74945068 -563.16204834]
[234.99353027 -579.89050293]
[250.30531311 -587.16961670]
[261.53869629 -574.47125244]
[252.44630432 -560.16168213]
[249.44592285 -545.46478271]
[246.44552612 -530.76794434]
[243.44514465 -516.07110596]
[240.44476318 -501.37420654]
[245.47991943 -487.35650635]
[235.13859558 -475.38287354]
[232.13819885 -460.68600464]
[229.13781738 -445.98916626]
[226.13743591 -431.29229736]
[238.07235718 -422.34674072]
[244.96809387 -409.05169678]
[245.40937805 -394.01950073]
[239.25514221 -380.23019409]
[227.67713928 -370.44055176]
[212.93719482 -366.63327026]
[209.93681335 -351.93640137]
[206.93643188 -337.23953247]
[203.93603516 -322.54269409]
[200.93565369 -307.84582520]
[197.93527222 -293.14895630]
[199.68876648 -285.92477417]
[194.72364807 -278.18771362]
[191.42793274 -263.55426025]
[196.17977905 -249.43798828]
[185.59944153 -237.67503357]
[196.63960266 -227.67601013]
[201.22300720 -213.39846802]
[198.02336121 -198.64622498]
[187.80212402 -187.40242004]
[173.23022461 -182.75408936]
[169.93449402 -168.12062073]
[171.54216003 -160.86259460]
[166.42225647 -153.22708130]
[162.83251953 -138.66296387]
[159.24278259 -124.09883118]
[155.65304565 -109.53470612]
[152.06330872 -94.97057343]
[148.47357178 -80.40644836]
[145.03067017 -65.80691528]
[153.18359375 -53.39460373]
[150.04971313 -38.50724792]
[136.97526550 -30.03986931]
[133.67953491 -15.40640831]
[130.38380432 -0.77294779]
[127.08808136 13.86051273]
[135.24099731 26.27282333]
[132.10713196 41.16018295]
[119.03267670 49.62755966]
[115.73694611 64.26101685]
[132.04945374 75.85781097]
[140.82376099 94.44757080]
[139.33287048 115.49318695]
[127.43053436 133.56628418]
[107.72259521 143.74719238]
[109.23042297 158.67120361]
[110.73825836 173.59523010]
[112.24608612 188.51925659]
[113.75391388 203.44328308]
[115.26174927 218.36729431]
[116.76957703 233.29132080]
[118.27740479 248.21534729]
[132.84489441 252.55778503]
[144.63856506 262.14828491]
[151.85995483 275.52438354]
[153.40788269 290.64630127]
[149.04627991 305.20806885]
[139.44026184 316.98910522]
[126.05468750 324.19290161]
[110.93074036 325.72094727]
[96.37473297 321.34017944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 140]
[12 139]
[13 24]
[14 23]
[33 134]
[34 133]
[37 130]
[38 129]
[39 128]
[40 127]
[43 124]
[45 123]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[51 116]
[52 115]
[57 110]
[59 108]
[60 107]
[61 105]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[72 94]
[73 93]
[74 92]
[75 91]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
