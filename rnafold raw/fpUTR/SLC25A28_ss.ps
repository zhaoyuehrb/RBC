%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCAAGCGGGAGCCGGAGGCCCCGGGCUCUCUGGGCCGCGCCUGAGGCGGACACUACGGGGCCGGGGGGCGGCGGCGGCAGUGGUGGCAGCGGCGGCGGGGGUGGGCGCCGCAGCUGGCCCGGGUGG\
) } def
/len { sequence length } bind def

/coor [
[110.18168640 229.50041199]
[108.01435089 214.65782166]
[105.84701538 199.81521606]
[103.67967987 184.97262573]
[101.51234436 170.13003540]
[99.34500885 155.28742981]
[95.22385406 149.06034851]
[97.30913544 140.06045532]
[95.50108337 125.16981506]
[83.77532959 120.99938202]
[75.02182007 111.51667023]
[71.56044006 98.60735321]
[74.59550476 85.11917114]
[83.84738159 74.23422241]
[71.92871857 65.12678528]
[60.01004791 56.01934433]
[48.09138489 46.91190720]
[32.63048935 48.80886078]
[20.67300606 39.40283966]
[18.95983124 24.65154648]
[3.29672337 22.42048454]
[-2.11828399 8.54507637]
[-14.03694916 -0.56236094]
[-25.95561409 -9.66979885]
[-37.87427902 -18.77723694]
[-53.53738785 -21.00829697]
[-58.95239639 -34.88370514]
[-70.87106323 -43.99114227]
[-82.78972626 -53.09857941]
[-94.70838928 -62.20602036]
[-106.62705231 -71.31345367]
[-118.54572296 -80.42089081]
[-134.20883179 -82.65195465]
[-139.62384033 -96.52736664]
[-151.54249573 -105.63480377]
[-163.46116638 -114.74224091]
[-175.48899841 -123.70500183]
[-187.72990417 -132.37451172]
[-200.07466125 -140.89547729]
[-212.41941833 -149.41645813]
[-224.76417542 -157.93742371]
[-239.79240417 -153.61463928]
[-254.06225586 -160.01037598]
[-260.83593750 -174.10473633]
[-256.91513062 -189.24281311]
[-244.15113831 -198.27685547]
[-228.57069397 -196.94128418]
[-217.53042603 -185.86669922]
[-216.24320984 -170.28218079]
[-203.89845276 -161.76121521]
[-191.55369568 -153.24023438]
[-179.20893860 -144.71926880]
[-171.84246826 -143.49632263]
[-166.67222595 -135.84025574]
[-159.33746338 -134.43966675]
[-154.35372925 -126.66090393]
[-142.43505859 -117.55346680]
[-130.51640320 -108.44602966]
[-115.70579529 -106.86639404]
[-109.43828583 -92.33956146]
[-97.51961517 -83.23212433]
[-85.60095215 -74.12468719]
[-73.68228912 -65.01724243]
[-61.76362228 -55.90980911]
[-49.84495544 -46.80237198]
[-35.03435135 -45.22273636]
[-28.76684189 -30.69590187]
[-16.84817696 -21.58846283]
[-4.92951155 -12.48102570]
[6.98915339 -3.37358856]
[21.79975891 -1.79395235]
[28.06726837 12.73288059]
[42.75049210 10.51060772]
[54.96745300 19.57705879]
[57.19882202 34.99324417]
[69.11748505 44.10068130]
[81.03615570 53.20811844]
[92.95481873 62.31555557]
[107.95372009 62.49679565]
[114.57042694 48.12565231]
[129.41487122 46.90435791]
[141.55012512 38.08757782]
[147.72232056 22.89428902]
[164.00112915 20.91124725]
[173.64031982 34.17843628]
[166.72389221 49.04771042]
[150.36691284 50.22283173]
[138.23165894 59.03961182]
[132.48294067 72.78012085]
[116.77050018 74.63204956]
[124.43762207 86.35398102]
[125.55574036 99.18505859]
[140.02886963 103.12566376]
[154.50199890 107.06627655]
[168.97514343 111.00688934]
[183.44827271 114.94750214]
[197.92140198 118.88810730]
[213.26950073 115.04798889]
[223.51708984 125.85706329]
[236.25862122 116.79135132]
[251.84234619 118.08824158]
[262.91006470 129.13537598]
[264.23599243 144.71664429]
[255.19401550 157.47505188]
[240.05349731 161.38645935]
[225.96334839 154.60401917]
[219.57647705 140.33020020]
[205.26359558 144.45217896]
[193.98078918 133.36123657]
[179.50765991 129.42063904]
[165.03453064 125.48001862]
[150.56140137 121.53941345]
[136.08825684 117.59880066]
[121.61512756 113.65818787]
[116.72271729 119.34193420]
[110.39171600 123.36177063]
[112.19976807 138.25239563]
[114.18760681 153.12010193]
[116.35494232 167.96269226]
[118.52227783 182.80529785]
[120.68961334 197.64788818]
[122.85694885 212.49047852]
[125.02428436 227.33308411]
[138.42417908 235.39390564]
[143.45878601 250.19885254]
[137.75091553 264.75750732]
[123.99564362 272.19567871]
[108.68780518 269.00134277]
[99.05527496 256.68270874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[8 117]
[9 116]
[14 78]
[15 77]
[16 76]
[17 75]
[20 72]
[22 70]
[23 69]
[24 68]
[25 67]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[34 58]
[35 57]
[36 56]
[37 54]
[38 52]
[39 51]
[40 50]
[41 49]
[79 90]
[81 88]
[82 87]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
