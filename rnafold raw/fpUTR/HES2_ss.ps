%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGUCUGGCACCAGCCCGGGCCGCGCCCGGGACCUCAUUUCGGACCUCGGUUUCCCUUUGCGUGGGGCUCGCAGCUGCCACCGCUUCCCCGCGGAGC\
) } def
/len { sequence length } bind def

/coor [
[103.08026886 146.22900391]
[85.51981354 144.01060486]
[70.07270050 135.36900330]
[58.99337769 121.56539154]
[53.89884186 104.61438751]
[38.92844009 103.67253113]
[23.95804024 102.73067474]
[8.98763847 101.78881836]
[-5.98276234 100.84696198]
[-20.95316315 99.90509796]
[-28.03467369 115.04268646]
[-40.30843353 126.33153534]
[-55.91615295 132.09991455]
[-72.50892639 131.50906372]
[-87.60075378 124.67507935]
[-98.94095612 112.64737701]
[-104.84986877 97.24761200]
[-119.84986877 97.24761200]
[-134.84986877 97.24761200]
[-149.84986877 97.24761200]
[-164.84986877 97.24761200]
[-179.84986877 97.24761200]
[-194.84986877 97.24761200]
[-210.68899536 103.29394531]
[-220.88375854 89.74761200]
[-210.68899536 76.20127106]
[-194.84986877 82.24761200]
[-179.84986877 82.24761200]
[-164.84986877 82.24761200]
[-149.84986877 82.24761200]
[-134.84986877 82.24761200]
[-119.84986877 82.24761200]
[-104.84986877 82.24761200]
[-100.48918915 69.52870941]
[-92.36730194 58.78440857]
[-81.28207397 51.09396744]
[-68.32992554 47.23547745]
[-54.79735565 47.60716248]
[-42.03322220 52.18631363]
[-31.31423950 60.53014374]
[-23.71730423 71.81855011]
[-20.01130486 84.93470001]
[-5.04090452 85.87655640]
[9.92949581 86.81841278]
[24.89989662 87.76027679]
[39.87029648 88.70213318]
[54.84069824 89.64398956]
[59.18326187 78.07733154]
[66.42830658 68.06959534]
[76.06063080 60.33243179]
[87.39527893 55.41602707]
[99.62625885 53.66999054]
[111.88380432 55.21847916]
[123.29630280 59.95138168]
[133.05220032 67.53214264]
[140.45774841 77.42169189]
[144.98634338 88.91678619]
[146.31597900 101.20000458]
[161.05027771 104.01072693]
[175.78459167 106.82144165]
[190.51890564 109.63216400]
[205.25320435 112.44287872]
[219.98751831 115.25360107]
[234.72183228 118.06432343]
[243.92385864 116.58769226]
[249.87159729 121.20169067]
[264.51034546 124.47383881]
[279.14910889 127.74598694]
[293.78784180 131.01812744]
[297.70288086 129.47393799]
[301.54589844 129.17913818]
[304.95938110 129.97544861]
[307.66610718 131.61120605]
[309.49145508 133.77281189]
[310.37448120 136.12084961]
[324.32110596 141.64271545]
[338.26776123 147.16458130]
[351.93637085 139.56831360]
[367.28002930 142.58596802]
[377.05392456 154.79272461]
[376.64312744 170.42491150]
[366.24160767 182.10150146]
[350.76065063 184.30914307]
[337.50985718 176.00547791]
[332.74588013 161.11122131]
[318.79925537 155.58935547]
[304.85260010 150.06748962]
[290.51571655 145.65689087]
[275.87695312 142.38473511]
[261.23818970 139.11259460]
[246.59944153 135.84043884]
[231.91110229 132.79862976]
[217.17680359 129.98791504]
[202.44248962 127.17719269]
[187.70817566 124.36647034]
[172.97387695 121.55574799]
[158.23956299 118.74503326]
[143.50524902 115.93431091]
[134.35522461 131.08581543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[66 91]
[67 90]
[68 89]
[69 88]
[75 87]
[76 86]
[77 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
