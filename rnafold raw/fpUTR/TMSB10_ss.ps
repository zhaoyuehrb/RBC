%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGCCGCUCUUUUGUUUCUUGCUGCAGCAACGCGAGUGGGAGCACCAGGAUCUCGGGCUCGGAACGAGACUGCACGGAUUGUUUUAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[178.38464355 180.63780212]
[193.17816162 178.15768433]
[180.98545837 169.42053223]
[168.79275513 160.68336487]
[156.60005188 151.94619751]
[144.40734863 143.20903015]
[136.99316406 141.84561157]
[131.96498108 133.98114014]
[120.06468964 124.84971619]
[108.16439056 115.71829987]
[89.68303680 114.39730072]
[82.49151611 97.32138062]
[70.01947021 88.98782349]
[57.54742432 80.65427399]
[45.07538223 72.32071686]
[26.76516724 71.62985229]
[19.45694923 55.76724243]
[6.71891642 47.84622192]
[-6.01911592 39.92520523]
[-18.75714874 32.00418854]
[-27.88873100 30.06854630]
[-31.77641106 23.60982513]
[-44.24845505 15.27627182]
[-56.72049713 6.94271851]
[-69.19254303 -1.39083493]
[-81.66458893 -9.72438812]
[-94.13663483 -18.05794144]
[-106.74335480 -26.18631554]
[-119.48139191 -34.10733414]
[-134.81398010 -30.27491951]
[-148.32249451 -38.47829437]
[-151.99258423 -53.85054016]
[-143.64685059 -67.27157593]
[-128.23666382 -70.77894592]
[-114.90461731 -62.29177475]
[-111.56037140 -46.84536743]
[-98.82234192 -38.92434692]
[-91.33485413 -38.04875946]
[-85.80307770 -30.52998543]
[-73.33103180 -22.19643211]
[-60.85898972 -13.86287880]
[-48.38694382 -5.52932549]
[-35.91490173 2.80422783]
[-23.44285774 11.13778114]
[-10.83613110 19.26615524]
[1.90190172 27.18717194]
[14.63993454 35.10819244]
[27.37796783 43.02920914]
[39.35196304 40.59799576]
[50.07379913 47.25766373]
[53.40893555 59.84867096]
[65.88098145 68.18222809]
[78.35302734 76.51577759]
[90.82506561 84.84933472]
[100.68406677 82.30101013]
[110.31696320 85.60269928]
[116.53981781 93.66308594]
[117.29580688 103.81800079]
[129.19610596 112.94941711]
[141.09640503 122.08084106]
[153.14451599 131.01632690]
[165.33721924 139.75349426]
[177.52992249 148.49066162]
[189.72262573 157.22782898]
[201.91532898 165.96499634]
[215.25805664 172.81854248]
[229.46202087 177.64013672]
[243.66596985 182.46173096]
[257.86993408 187.28332520]
[272.07388306 192.10491943]
[286.27783203 196.92651367]
[300.32205200 190.18875122]
[314.65820312 195.28086853]
[320.99505615 208.71142578]
[335.96170044 202.93391418]
[349.73696899 211.15711975]
[351.75369263 227.07290649]
[340.46481323 238.47204590]
[324.53015137 236.61009216]
[316.17346191 222.91537476]
[302.97009277 229.71290588]
[288.49658203 225.02546692]
[281.45623779 211.13046265]
[267.25228882 206.30886841]
[253.04832458 201.48727417]
[238.84437561 196.66567993]
[224.64042664 191.84410095]
[210.43647766 187.02250671]
[217.03742981 200.49200439]
[215.53837585 215.41691589]
[206.39057922 227.30461121]
[192.34762573 232.57675171]
[177.63664246 229.64634705]
[166.68586731 219.39546204]
[162.79162598 204.90979004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[8 60]
[9 59]
[10 58]
[12 54]
[13 53]
[14 52]
[15 51]
[17 48]
[18 47]
[19 46]
[20 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 37]
[29 36]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
