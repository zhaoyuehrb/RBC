%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCGCAUGUGCGCGAGGAGUCGCUCGGGCACUUAUUGAGCGCCGACUGUCUACGGGCGGCCGGGGGUGAUGGGCAGAGGCUUCAGUGUCCCCUUCGCCUCCGCAGGAGAGGAGAGGCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[90.11801910 212.21556091]
[79.28321075 200.70980835]
[79.84114075 184.91537476]
[91.46080017 174.20280457]
[91.83181763 159.20739746]
[92.20283508 144.21199036]
[92.38835144 129.21313477]
[92.38835144 114.21313477]
[88.91484070 118.72363281]
[85.04595184 122.95356750]
[80.79972839 126.87757874]
[67.34322357 133.50497437]
[53.88671112 140.13237000]
[40.43020248 146.75976562]
[31.46860504 159.79818726]
[16.63241959 158.48030090]
[3.17591095 165.10769653]
[-10.28059769 171.73509216]
[-23.73710632 178.36248779]
[-28.58700943 193.40422058]
[-42.69042969 200.53648376]
[-57.68005371 195.52783203]
[-64.66280365 181.34979248]
[-59.49594116 166.41395569]
[-45.24487305 159.58149719]
[-30.36450195 164.90597534]
[-16.90799332 158.27857971]
[-3.45148540 151.65118408]
[10.00502300 145.02378845]
[18.00412178 132.45941162]
[33.80280685 133.30326843]
[47.25931549 126.67586517]
[60.71582413 120.04846954]
[74.17233276 113.42107391]
[76.45464325 106.27677155]
[61.46810150 105.64146423]
[46.73064423 108.43563080]
[34.69548798 99.48269653]
[33.13449478 84.56414032]
[43.05569839 73.31381989]
[58.05234909 72.99677277]
[68.44001007 83.81733704]
[81.01926422 91.98816681]
[83.30157471 84.84386444]
[76.17954254 71.64247131]
[69.05751038 58.44108200]
[61.93548584 45.23969269]
[48.57359314 36.76794815]
[49.34020233 21.89308357]
[42.21817017 8.69169426]
[35.09614182 -4.50969553]
[20.86023331 -12.65038967]
[21.06291199 -29.04828453]
[35.49568176 -36.83463287]
[49.31134415 -27.99950600]
[48.29753113 -11.63172531]
[55.41956329 1.56966484]
[62.54159164 14.77105522]
[75.39406586 22.29854774]
[75.13687134 38.11766434]
[82.25890350 51.31905365]
[89.38093567 64.52044678]
[96.50296021 77.72183228]
[110.95106506 81.75325012]
[123.87916565 74.14639282]
[136.80726624 66.53953552]
[149.73536682 58.93267441]
[162.66345215 51.32581711]
[175.59155273 43.71895981]
[188.51965332 36.11210251]
[201.44775391 28.50524330]
[214.37585449 20.89838409]
[222.34608459 7.23141623]
[237.23913574 7.44568491]
[250.16723633 -0.16117327]
[263.09533691 -7.76803112]
[266.77481079 -13.47026062]
[272.01705933 -15.99672794]
[276.85629272 -15.41316128]
[290.14474487 -22.37137032]
[298.78109741 -35.62745667]
[313.64535522 -34.67693329]
[326.93380737 -41.63514328]
[335.24996948 -55.76927948]
[351.64410400 -55.36380386]
[359.25134277 -40.83583450]
[350.24600220 -27.13050079]
[333.89202881 -28.34667587]
[320.60354614 -21.38846779]
[312.91769409 -8.63007641]
[297.10296631 -9.08290291]
[283.81448364 -2.12469506]
[270.70220947 5.16006660]
[257.77410889 12.76692486]
[244.84599304 20.37378311]
[237.80047607 33.49665833]
[221.98271179 33.82648087]
[209.05461121 41.43334198]
[196.12651062 49.04019928]
[183.19841003 56.64705658]
[170.27030945 64.25391388]
[157.34222412 71.86077118]
[144.41412354 79.46762848]
[131.48602295 87.07448578]
[118.55792236 94.68134308]
[133.55032349 94.20375824]
[148.02616882 90.27313995]
[162.82704163 92.70911407]
[175.27964783 101.07170105]
[183.13478088 113.85045624]
[184.97369385 128.73731995]
[180.46421814 143.04341125]
[170.42085266 154.18482971]
[156.65763855 160.14918518]
[141.66043091 159.85923767]
[128.13804626 153.36734009]
[118.53283691 141.84605408]
[114.57973480 127.37686920]
[107.38835144 114.21313477]
[107.38835144 129.21313477]
[110.54481506 137.90231323]
[107.19824219 144.58300781]
[106.82722473 159.57841492]
[106.45620728 174.57382202]
[117.53188324 185.84791565]
[117.30802917 201.65061951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 124]
[5 123]
[6 122]
[7 120]
[8 119]
[11 34]
[12 33]
[13 32]
[14 31]
[16 29]
[17 28]
[18 27]
[19 26]
[44 63]
[45 62]
[46 61]
[47 60]
[49 58]
[50 57]
[51 56]
[64 105]
[65 104]
[66 103]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[72 97]
[74 95]
[75 94]
[76 93]
[79 92]
[80 91]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
