%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGAAGGGCUCAGUGACAAUUAAAGAUGGCUGCGCCCAUGUAACAUCACUAGCGACCGGUGACCUCUUUUUCCCCCUUGCCUGGCUCCUGUGGUGGCAGGCUGGGCACGAGGACC\
) } def
/len { sequence length } bind def

/coor [
[82.12763977 114.17781067]
[67.96464539 119.11841583]
[53.80165482 124.05902863]
[39.63866043 128.99963379]
[32.38265610 144.84820557]
[16.24818230 150.49664307]
[1.29132760 142.93731689]
[-12.73391628 148.25639343]
[-26.75915909 153.57546997]
[-40.78440475 158.89454651]
[-50.94410324 171.02264404]
[-65.58799744 168.30130005]
[-79.61323547 173.62037659]
[-93.63848114 178.93945312]
[-107.66372681 184.25852966]
[-117.82342529 196.38662720]
[-132.46731567 193.66528320]
[-146.41989136 199.17216492]
[-150.99954224 214.12411499]
[-164.14674377 222.59082031]
[-179.65379333 220.57455444]
[-190.19874573 209.02732849]
[-190.80256653 193.40141296]
[-181.18019104 181.07487488]
[-165.87496948 177.86791992]
[-152.11358643 185.29478455]
[-147.05389404 179.77270508]
[-137.78639221 179.64004517]
[-128.62986755 167.89237976]
[-112.98279572 170.23327637]
[-98.95755768 164.91419983]
[-84.93231201 159.59513855]
[-70.90706635 154.27606201]
[-61.75054550 142.52841187]
[-46.10347748 144.86929321]
[-32.07823181 139.55023193]
[-18.05298996 134.23115540]
[-4.02774572 128.91207886]
[-0.39696181 116.47008514]
[9.91608524 108.30124664]
[23.24909592 107.59470367]
[34.69805527 114.83663940]
[48.86104965 109.89603424]
[63.02404404 104.95542145]
[77.18703461 100.01481628]
[82.60519409 81.24335480]
[102.15117645 71.73257446]
[99.34837341 56.99675751]
[96.54557037 42.26094055]
[93.74275970 27.52512550]
[90.93995667 12.78930950]
[77.20622253 5.31143713]
[71.54040527 -9.26362991]
[76.61773682 -24.05398941]
[90.04084778 -32.07608795]
[105.47176361 -29.54213142]
[115.62447357 -17.64858246]
[115.70517731 -2.01120639]
[105.67576599 9.98650360]
[108.47857666 24.72231865]
[111.28137970 39.45813370]
[114.08419037 54.19395065]
[116.88699341 68.92976379]
[128.24717712 78.72497559]
[143.23501587 79.32896423]
[158.22285461 79.93295288]
[173.21069336 80.53694153]
[178.06658936 70.77786255]
[185.91389465 63.26796341]
[195.80621338 58.87671280]
[206.56274414 58.09965897]
[216.90914917 61.00261688]
[225.62855530 67.21698761]
[231.70471191 75.98632812]
[234.44032288 86.25836182]
[249.27703857 88.46554565]
[264.11376953 90.67272949]
[275.00369263 83.60308838]
[287.38555908 85.83203888]
[294.64553833 95.60972595]
[309.41766357 98.21445465]
[324.18978882 100.81917572]
[338.96191406 103.42389679]
[353.73400879 106.02861786]
[368.66809082 100.80524445]
[379.85845947 110.63506317]
[394.79254150 105.41168213]
[405.98287964 115.24150848]
[420.75500488 117.84622955]
[437.40344238 114.64218140]
[445.09100342 129.75302124]
[432.69885254 141.32325745]
[418.15026855 132.61834717]
[403.37817383 130.01362610]
[389.50067139 135.42330933]
[377.25372314 125.40718079]
[363.37625122 130.81686401]
[351.12930298 120.80073547]
[336.35717773 118.19601440]
[321.58505249 115.59129333]
[306.81295776 112.98657227]
[292.04083252 110.38184357]
[275.97323608 117.29830933]
[261.90658569 105.50945282]
[247.06985474 103.30226898]
[232.23313904 101.09508514]
[219.71400452 115.92768097]
[200.68807983 120.42583466]
[182.59338379 112.65880585]
[172.60670471 95.52478027]
[157.61886597 94.92079163]
[142.63102722 94.31680298]
[127.64319611 93.71281433]
[125.89913177 108.44733429]
[117.16577911 119.70679474]
[104.42336273 124.63345337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[7 38]
[8 37]
[9 36]
[10 35]
[12 33]
[13 32]
[14 31]
[15 30]
[17 28]
[18 26]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[64 113]
[65 112]
[66 111]
[67 110]
[75 106]
[76 105]
[77 104]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[86 96]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
