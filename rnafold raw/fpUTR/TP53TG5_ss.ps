%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGGCUGAACUGAGAGGAACAGGGUUGGUGCCUGGCACUGGUGUUGCUCCAUUCAUCUCUGAGGUCUCACAGCCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[72.65214539 422.55358887]
[75.57899475 403.39416504]
[76.15354156 388.40518188]
[76.72808075 373.41619873]
[76.72808075 358.41619873]
[76.15354156 343.42721558]
[75.57899475 328.43820190]
[75.00445557 313.44921875]
[74.42991638 298.46023560]
[71.85314178 295.70507812]
[70.62592316 291.46578979]
[71.47762299 286.46408081]
[74.75024414 281.74020386]
[75.89848328 266.78421021]
[77.04672241 251.82821655]
[78.19496155 236.87223816]
[79.34320068 221.91624451]
[68.31764221 214.14093018]
[62.58711243 201.80662537]
[63.77454376 188.14852905]
[71.67236328 176.80917358]
[84.26893616 170.86697388]
[85.98918915 155.96595764]
[87.70944214 141.06492615]
[89.42969513 126.16388702]
[91.14994812 111.26285553]
[85.77056122 98.35728455]
[93.94902039 87.01689148]
[95.66927338 72.11585999]
[97.38952637 57.21482849]
[98.82403564 42.28358078]
[99.97227478 27.32759476]
[92.22389221 19.24228287]
[90.38906860 8.42089748]
[94.85440826 -1.36114705]
[103.85175323 -6.83230400]
[106.14149475 -21.65650940]
[108.43123627 -36.48071671]
[110.72097778 -51.30492401]
[112.72634125 -66.17027283]
[105.71662903 -80.99578857]
[115.27224731 -94.32328796]
[131.56318665 -92.44257355]
[137.83073425 -77.28836823]
[127.62736511 -64.45001984]
[130.05050659 -57.26220322]
[125.54518127 -49.01518250]
[123.25543976 -34.19097900]
[120.96569824 -19.36677170]
[118.67596436 -4.54256439]
[127.15096283 12.66487885]
[114.92826080 28.47583389]
[113.78002167 43.43181992]
[116.47668457 50.52154922]
[112.29055786 58.93508148]
[110.57030487 73.83611298]
[108.85005188 88.73714447]
[114.22943878 101.64271545]
[106.05097961 112.98310852]
[104.33072662 127.88414001]
[102.61047363 142.78517151]
[100.89022064 157.68620300]
[99.16996765 172.58723450]
[111.72077942 183.74154663]
[115.20844269 199.99819946]
[108.47221375 215.01887512]
[94.29918671 223.06448364]
[93.15094757 238.02047729]
[92.00270844 252.97645569]
[90.85446930 267.93243408]
[89.70623016 282.88842773]
[89.41890717 297.88568115]
[89.99344635 312.87466431]
[90.56799316 327.86367798]
[91.14253235 342.85266113]
[91.71707153 357.84164429]
[95.11512756 363.99734497]
[94.74507141 369.99630737]
[91.71707153 373.99072266]
[91.14253235 388.97973633]
[90.56799316 403.96871948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[28 57]
[29 56]
[30 55]
[31 53]
[32 52]
[36 50]
[37 49]
[38 48]
[39 47]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
