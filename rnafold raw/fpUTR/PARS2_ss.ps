%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGCGGGGCUUAGGAGCGGGCUUGCUCGAGGCGCAAGCGCGCUGGCCCGGCACGGCGGUGGUCUUGCGGGAGGCGUGGGCUGGGAUUGCGGUGCCUGUGCUUCCCGGUGCCAGGGUGUC\
) } def
/len { sequence length } bind def

/coor [
[70.47737122 153.31875610]
[57.10128784 160.10700989]
[42.44413376 156.91831970]
[33.09711075 145.18659973]
[33.26350403 130.18751526]
[42.86838531 118.66610718]
[27.87939072 119.24064636]
[14.38570499 127.50085449]
[1.37141287 120.25672150]
[-13.61757946 120.83126068]
[-28.60657310 121.40579987]
[-43.59556580 121.98034668]
[-58.58455658 122.55488586]
[-62.38409424 125.16810608]
[-66.41515350 126.24909973]
[-70.14358521 125.92356110]
[-73.13748932 124.48497772]
[-75.11502838 122.34376526]
[-90.08445740 121.38661957]
[-105.05388641 120.42946625]
[-120.02332306 119.47231293]
[-134.28909302 126.31325531]
[-146.49670410 117.77959442]
[-161.46614075 116.82244110]
[-176.43556213 115.86528778]
[-191.40499878 114.90813446]
[-206.37442017 113.95098877]
[-221.34385681 112.99383545]
[-232.00778198 124.43125916]
[-247.53488159 126.28687286]
[-260.59371948 117.68451691]
[-265.01834106 102.68595123]
[-258.71954346 88.37304688]
[-244.67143250 81.50392151]
[-229.50712585 85.32196045]
[-220.38670349 98.02439880]
[-205.41728210 98.98155212]
[-190.44784546 99.93870544]
[-175.47840881 100.89585876]
[-160.50898743 101.85301208]
[-145.53955078 102.81016541]
[-132.34449768 95.90075684]
[-119.06616974 104.50288391]
[-104.09674072 105.46002960]
[-89.12730408 106.41718292]
[-74.15787506 107.37433624]
[-59.15909958 107.56589508]
[-44.17010498 106.99134827]
[-29.18111420 106.41680908]
[-14.19212055 105.84226990]
[0.79687190 105.26773071]
[13.21844482 97.04861450]
[27.30484962 104.25165558]
[42.29384232 103.67711639]
[57.17169189 101.76670837]
[71.81958008 98.53570557]
[86.46746063 95.30469513]
[96.91461182 86.01229858]
[110.30152893 90.04741669]
[117.94577026 79.56438446]
[130.29763794 77.22344208]
[140.56777954 83.75167084]
[155.29339600 80.89580536]
[170.01902771 78.03993988]
[184.74464417 75.18407440]
[189.41836548 64.10234070]
[198.80000305 56.77112961]
[210.44453430 54.95210266]
[221.38876343 58.98935318]
[228.90528870 67.75165558]
[243.75753784 65.65141296]
[258.60977173 63.55117035]
[273.46200562 61.45092773]
[288.31423950 59.35068512]
[303.16647339 57.25044250]
[318.01870728 55.15020370]
[332.87097168 53.04996109]
[347.72320557 50.94971848]
[362.57543945 48.84947586]
[377.42767334 46.74923325]
[392.27990723 44.64899063]
[407.13214111 42.54874802]
[421.98437500 40.44850540]
[436.80859375 38.15876770]
[449.14038086 28.24726868]
[462.97131348 33.77490616]
[473.41806030 21.59932518]
[489.44494629 22.31954765]
[498.75747681 35.38308334]
[494.21191406 50.76870346]
[479.29519653 56.67388153]
[465.45016479 48.56866455]
[454.17654419 58.30285645]
[439.28744507 52.95252609]
[433.13919067 57.21043777]
[424.08462524 55.30074692]
[409.23239136 57.40098572]
[394.38015747 59.50122833]
[379.52792358 61.60147095]
[364.67568970 63.70171356]
[349.82345581 65.80195618]
[334.97119141 67.90219879]
[320.11895752 70.00244141]
[305.26672363 72.10268402]
[290.41448975 74.20292664]
[275.56225586 76.30316925]
[260.71002197 78.40341187]
[245.85777283 80.50365448]
[231.00553894 82.60389709]
[221.01420593 97.84123230]
[202.76730347 101.10864258]
[187.60050964 89.90969849]
[172.87489319 92.76556396]
[158.14926147 95.62142944]
[143.42364502 98.47729492]
[130.88757324 110.68664551]
[113.53253937 104.69530487]
[103.08538818 113.98770142]
[89.69847107 109.95258331]
[75.05058289 113.18359375]
[60.40269852 116.41459656]
[72.60688782 125.13570404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 54]
[7 53]
[9 51]
[10 50]
[11 49]
[12 48]
[13 47]
[18 46]
[19 45]
[20 44]
[21 43]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[55 121]
[56 120]
[57 119]
[59 117]
[62 115]
[63 114]
[64 113]
[65 112]
[70 109]
[71 108]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 94]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
