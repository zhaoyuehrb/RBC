%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGCUGGGAGCCGGGUGGGGAGGCGCGGGGCGAGCCGGGGGGUUCCAGACGCGCCUCCACCGCCGGGCAGUGGGCAGGUAUGGCUGAGGGCGUGUGAGCGCCGAGCGCUAAGGGCCGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[100.32366943 119.61521912]
[92.49256134 118.12456512]
[85.90107727 113.64118958]
[81.63761139 106.90538025]
[80.40613556 99.02935028]
[66.84629822 92.61602783]
[53.28645706 86.20269775]
[37.50312805 87.29679871]
[29.30593300 74.86075592]
[14.58368587 79.94928741]
[0.92344040 73.25209808]
[-3.83697200 59.18532944]
[-17.39681053 52.77200317]
[-30.95664978 46.35867691]
[-46.73998260 47.45277786]
[-54.93717575 35.01673126]
[-68.49701691 28.60340500]
[-82.05685425 22.19007874]
[-95.61669159 15.77675247]
[-109.17653656 9.36342621]
[-122.81405640 3.11698246]
[-136.52720642 -2.96163702]
[-150.24034119 -9.04025650]
[-163.95349121 -15.11887646]
[-177.66664124 -21.19749641]
[-191.37979126 -27.27611542]
[-205.09292603 -33.35473633]
[-218.80607605 -39.43335724]
[-232.51922607 -45.51197433]
[-244.93888855 -36.58454132]
[-260.05972290 -35.08219910]
[-273.81094360 -41.30877686]
[-282.54080200 -53.50082397]
[-283.98614502 -68.32568359]
[-297.69927979 -74.40430450]
[-311.41241455 -80.48292542]
[-325.12557983 -86.56154633]
[-338.83871460 -92.64016724]
[-355.07888794 -90.36222076]
[-364.95709229 -103.45241547]
[-358.31146240 -118.44467926]
[-341.97848511 -119.91625214]
[-332.76010132 -106.35330963]
[-319.04696655 -100.27468872]
[-305.33380127 -94.19607544]
[-291.62066650 -88.11745453]
[-277.90750122 -82.03883362]
[-265.95239258 -90.92367554]
[-251.05607605 -92.64296722]
[-237.20773315 -86.63549805]
[-228.16635132 -74.42279053]
[-226.44059753 -59.22512054]
[-212.72746277 -53.14650345]
[-199.01431274 -47.06788254]
[-185.30116272 -40.98926163]
[-171.58801270 -34.91064072]
[-157.87487793 -28.83202362]
[-144.16172791 -22.75340271]
[-130.44857788 -16.67478371]
[-116.73543549 -10.59616375]
[-109.26688385 -10.76353645]
[-102.76320648 -4.19641352]
[-89.20336914 2.21691298]
[-75.64353180 8.63023949]
[-62.08369064 15.04356575]
[-48.52384949 21.45689201]
[-33.71041107 19.90406609]
[-24.54332352 32.79883575]
[-10.98348522 39.21216202]
[2.57635450 45.62548828]
[16.47008896 40.38147354]
[30.31305504 46.69233322]
[35.71925735 61.30091476]
[50.53269958 59.74808884]
[59.69978333 72.64286041]
[73.25962067 79.05618286]
[86.81946564 85.46951294]
[107.50743866 81.87543488]
[119.59465027 99.04544067]
[133.71781921 104.09878540]
[147.84097290 109.15213776]
[154.57316589 108.32469177]
[159.86964417 110.72889709]
[162.52276611 114.81552887]
[176.38096619 120.55577850]
[190.23915100 126.29603577]
[199.47267151 126.70472717]
[204.36422729 132.35095215]
[218.95716858 126.90265656]
[232.77764893 133.26258850]
[237.88185120 147.20829773]
[251.59500122 153.28691101]
[265.30813599 159.36553955]
[281.05987549 157.88441467]
[289.55978394 170.11555481]
[301.54626465 163.83531189]
[314.76403809 165.61341858]
[324.37896729 174.57189941]
[327.00640869 187.24885559]
[340.56625366 193.66217041]
[354.12609863 200.07550049]
[367.68594360 206.48883057]
[381.24575806 212.90216064]
[398.14932251 214.20843506]
[401.57345581 230.81298828]
[386.56570435 238.69992065]
[374.83245850 226.46199036]
[361.27261353 220.04866028]
[347.71276855 213.63534546]
[334.15292358 207.22201538]
[320.59307861 200.80868530]
[305.07098389 207.15692139]
[289.43194580 200.22502136]
[283.48117065 183.82870483]
[268.71029663 185.74459839]
[259.22952271 173.07868958]
[245.51637268 167.00006104]
[231.80322266 160.92144775]
[218.04237366 166.50485229]
[204.04870605 160.53561401]
[198.28561401 146.06410217]
[184.49890137 140.15422058]
[170.64071655 134.41397095]
[156.78251648 128.67372131]
[142.78762817 123.27529907]
[128.66445923 118.22194672]
[114.54130554 113.16860199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[9 73]
[12 70]
[13 69]
[14 68]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[79 127]
[80 126]
[81 125]
[84 124]
[85 123]
[86 122]
[88 121]
[91 118]
[92 117]
[93 116]
[95 114]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
