%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUGAGCUGACCACAGGCCACACCAGACUCCUCUCUGCUCCUGAGGAAGACAGGGCAGCCCGGCGCCACCCGCUCGGCCCUCACGAAG\
) } def
/len { sequence length } bind def

/coor [
[63.53997421 136.41239929]
[51.49668503 145.35438538]
[49.05265045 160.73828125]
[36.71165848 169.63517761]
[22.06052017 167.21035767]
[10.01722813 176.15234375]
[7.57319450 191.53623962]
[-4.76779747 200.43312073]
[-19.41893578 198.00831604]
[-31.46222687 206.95030212]
[-43.50551987 215.89228821]
[-49.52003098 231.14868164]
[-65.77742767 233.30021667]
[-75.55348969 220.13356018]
[-68.79145050 205.19345093]
[-52.44750595 203.84899902]
[-40.40421295 194.90699768]
[-28.36092377 185.96501160]
[-26.44421577 171.23878479]
[-14.35798740 161.99877930]
[1.07524097 164.10905457]
[13.11853218 155.16706848]
[15.03524017 140.44082642]
[27.12146759 131.20082092]
[42.55469513 133.31109619]
[54.59798813 124.36910248]
[49.35153198 109.48307800]
[48.85708237 93.70731354]
[53.16102600 78.52194977]
[61.85955811 65.35173035]
[74.13655090 55.43231964]
[68.57618713 41.50097656]
[63.01581955 27.56963348]
[57.45545578 13.63828945]
[51.89508820 -0.29305369]
[36.73035049 -3.12753272]
[25.52108574 -13.72733974]
[21.84412575 -28.71011353]
[26.87277985 -43.29490662]
[39.00241852 -52.82776260]
[54.36252213 -54.26678467]
[68.05173492 -47.15278625]
[75.70188141 -33.75581360]
[74.87182617 -18.35079765]
[65.82643127 -5.85341930]
[71.38679504 8.07792473]
[76.94716644 22.00926781]
[82.50753021 35.94061279]
[88.06789398 49.87195587]
[105.21865082 48.73635101]
[121.78873444 53.30474091]
[135.93443298 63.06881332]
[146.08178711 76.94213867]
[151.10171509 93.38106537]
[166.09948730 93.63996887]
[181.09724426 93.89888000]
[196.09501648 94.15779114]
[211.09277344 94.41670227]
[225.02444458 86.91875458]
[237.61627197 94.87458038]
[248.93579102 84.17381287]
[264.14196777 84.65003967]
[274.27374268 95.50740814]
[289.27151489 95.76631927]
[304.26928711 96.02522278]
[315.46026611 84.86558533]
[331.26419067 84.97129822]
[342.30490112 96.27964020]
[342.03210449 112.08157349]
[330.60766602 123.00209045]
[314.80950928 122.56224823]
[304.01037598 111.02299500]
[289.01260376 110.76408386]
[274.01483154 110.50517273]
[263.51434326 121.00636292]
[248.30078125 120.95744324]
[237.35736084 109.87234497]
[224.49844360 117.38881683]
[210.83387756 109.41446686]
[195.83610535 109.15555573]
[180.83833313 108.89664459]
[165.84057617 108.63774109]
[150.84280396 108.37882996]
[147.31823730 120.40050507]
[140.99678040 131.21635437]
[132.25207520 140.18705750]
[121.60102081 146.78239441]
[109.67317963 150.61250305]
[97.17356873 151.45101929]
[84.84102631 149.24836731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[5 22]
[6 21]
[9 18]
[10 17]
[11 16]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[54 83]
[55 82]
[56 81]
[57 80]
[58 79]
[60 77]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
