%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUGGAGGGGAAGCGAGGAGGCGGGGAAGGGGCGGGCCCCAGGAGCAGGCGGGCGGGGCUCCCCGCCCUCCAGCGCGCCCGGAGGCUACCACUCCCUGCAG\
) } def
/len { sequence length } bind def

/coor [
[-30.02030182 336.67971802]
[-41.92090607 340.17553711]
[-54.09608459 338.22396851]
[-63.06025696 350.25073242]
[-65.10374451 365.93942261]
[-78.91336823 371.52008057]
[-74.17032623 386.29449463]
[-79.04927826 401.02456665]
[-91.67416382 410.04632568]
[-107.19046021 409.89065552]
[-119.63182831 400.61749268]
[-124.21431732 385.79248047]
[-119.17585754 371.11621094]
[-106.45384216 362.23193359]
[-90.94014740 362.55590820]
[-89.53784180 347.72744751]
[-75.08704376 341.28656006]
[-66.12287140 329.25979614]
[-72.18367767 312.81799316]
[-67.24193573 295.84445190]
[-53.05598831 285.03765869]
[-35.06953049 284.77624512]
[-26.85523224 272.22534180]
[-18.64093208 259.67443848]
[-10.42663383 247.12351990]
[-2.21233487 234.57261658]
[6.00196409 222.02171326]
[14.21626282 209.47079468]
[10.92945480 194.98864746]
[19.08112907 182.14323425]
[34.29362106 178.79391479]
[42.50791931 166.24301147]
[39.49536896 156.26136780]
[42.62841415 146.08467102]
[51.07775116 139.24645996]
[62.12569046 138.26412964]
[71.08985901 126.23733521]
[80.05403900 114.21054840]
[89.01821136 102.18376160]
[97.79793549 90.02167511]
[106.39116669 77.72711182]
[107.95525360 61.98340607]
[121.58826447 55.98421478]
[130.18150330 43.68965149]
[131.74559021 27.94594574]
[145.37860107 21.94675636]
[153.97183228 9.65219021]
[154.62878418 -10.38116550]
[172.22622681 -18.14644051]
[180.05393982 -30.94201660]
[180.65533447 -46.75178909]
[193.89724731 -53.57094193]
[201.72497559 -66.36651611]
[209.55268860 -79.16209412]
[217.38041687 -91.95766449]
[225.20814514 -104.75324249]
[233.03585815 -117.54882050]
[240.86358643 -130.34439087]
[240.73922729 -146.74307251]
[255.01385498 -154.81567383]
[269.00296021 -146.25781250]
[268.31573486 -129.87306213]
[253.65916443 -122.51667023]
[245.83143616 -109.72109222]
[238.00372314 -96.92552185]
[230.17599487 -84.12994385]
[222.34826660 -71.33436584]
[214.52053833 -58.53879547]
[206.69282532 -45.74321747]
[206.65133667 -30.84867096]
[192.84951782 -23.11429214]
[185.02178955 -10.31871700]
[188.33735657 -0.43359426]
[185.51611328 9.83392048]
[177.27925110 16.92662048]
[166.26640320 18.24542427]
[157.67317200 30.53998947]
[156.72372437 45.40430450]
[142.47605896 52.28288269]
[133.88282776 64.57744598]
[132.93339539 79.44176483]
[118.68572998 86.32034302]
[110.09249878 98.61490631]
[108.37745667 106.64350128]
[101.04499817 111.14794159]
[92.08082581 123.17472839]
[83.11664581 135.20150757]
[74.15247345 147.22830200]
[72.88488770 167.23229980]
[55.05882645 174.45730591]
[46.84452820 187.00822449]
[49.86357498 202.28968811]
[41.35431671 214.90107727]
[26.76717186 217.68510437]
[18.55287170 230.23600769]
[10.33857346 242.78691101]
[2.12427402 255.33781433]
[-6.09002495 267.88873291]
[-14.30432415 280.43963623]
[-22.51862335 292.99053955]
[-16.50481987 304.17047119]
[-15.88828182 316.77734375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[6 15]
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[31 91]
[32 90]
[36 88]
[37 87]
[38 86]
[39 85]
[40 83]
[41 82]
[43 80]
[44 79]
[46 77]
[47 76]
[49 72]
[50 71]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
