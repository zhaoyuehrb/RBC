%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCUAGGCGCUCGCCACGCCCAUGCCUCCGUCGCUGCGCGGCCCACCCCGGAUGUCAGCCCCCCGCGCCGACCAGAAUCCGUGAAC\
) } def
/len { sequence length } bind def

/coor [
[56.33263397 187.21078491]
[49.36940002 189.24285889]
[42.17689896 188.89086914]
[35.54294968 186.22775269]
[23.95829582 195.75643921]
[22.28078842 211.24267578]
[10.39656258 220.74108887]
[-4.35686493 219.04640198]
[-15.94151783 228.57508850]
[-27.52617073 238.10377502]
[-32.77608871 253.63987732]
[-48.90666580 256.59561157]
[-59.32415390 243.93038940]
[-53.31192780 228.67309570]
[-37.05485535 226.51911926]
[-25.47020149 216.99043274]
[-13.88554859 207.46176147]
[-12.70207596 192.65855408]
[-1.08932984 182.83007812]
[14.42961311 184.17178345]
[26.01426506 174.64309692]
[30.71228409 151.95686340]
[53.83045959 146.12791443]
[63.15320587 134.37690735]
[72.47595215 122.62589264]
[81.79870605 110.87487793]
[79.48747253 94.63469696]
[89.45433044 81.60600281]
[105.73345947 79.58731842]
[114.63568878 67.51461029]
[116.16079712 49.26828003]
[132.32153320 42.67773438]
[140.79214478 30.29837418]
[149.26277161 17.91901398]
[157.73339844 5.53965282]
[158.66574097 -1.37429202]
[162.49273682 -5.95323324]
[167.26397705 -7.38518286]
[176.58671570 -19.13619804]
[185.90946960 -30.88721275]
[195.23220825 -42.63822937]
[204.55496216 -54.38924408]
[213.87771606 -66.14025879]
[220.75823975 -79.46911621]
[224.93801880 -93.87499237]
[217.10072327 -107.59915161]
[221.34390259 -122.82317352]
[235.15014648 -130.51492310]
[250.32846069 -126.11103058]
[257.87380981 -112.22423553]
[253.30969238 -97.09333038]
[239.34390259 -89.69521332]
[235.16412354 -75.28932953]
[248.09132385 -82.89769745]
[263.06155396 -83.84214783]
[276.84246826 -77.91874695]
[286.45846558 -66.40647125]
[289.83331299 -51.79104996]
[286.23825073 -37.22822952]
[276.44958496 -25.86240959]
[262.58084106 -20.14768410]
[247.62657166 -21.31797600]
[234.81567383 -29.12059402]
[226.91427612 -41.87080383]
[225.62872314 -56.81751251]
[216.30598450 -45.06649780]
[206.98323059 -33.31547928]
[197.66047668 -21.56446457]
[188.33773804 -9.81344986]
[179.01498413 1.93756545]
[170.11274719 14.01027393]
[161.64213562 26.38963509]
[153.17150879 38.76899719]
[144.70089722 51.14835739]
[146.60379028 63.23531723]
[139.45739746 73.66076660]
[126.70839691 76.41683960]
[117.80616760 88.48954773]
[121.18598938 100.83904266]
[116.84011841 112.88256836]
[106.35331726 120.22833252]
[93.54972076 120.19762421]
[84.22696686 131.94863892]
[74.90422058 143.69964600]
[65.58147430 155.45066833]
[68.35089111 162.43846130]
[68.68292236 169.89508057]
[66.57543182 177.00054932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[8 17]
[9 16]
[10 15]
[23 85]
[24 84]
[25 83]
[26 82]
[29 78]
[30 77]
[32 74]
[33 73]
[34 72]
[35 71]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
