%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGUUUCCCCGCGCGCAGGUCCGCGGGGAGGGGCGGCCUGCCGACCGGCCCACCCCAGGGCGUUCCUGAAGGGCGUCCUCGGCCGCCCCCACCGCCUCCCAG\
) } def
/len { sequence length } bind def

/coor [
[40.03530121 318.91000366]
[27.95677948 310.01568604]
[18.78266144 298.14825439]
[13.21730614 284.21890259]
[11.68800354 269.29705811]
[14.31216717 254.52839661]
[20.88742828 241.04809570]
[7.40110636 247.61460876]
[-6.08521557 254.18113708]
[-19.57153702 260.74765015]
[-33.05785751 267.31414795]
[-46.54418182 273.88067627]
[-60.03050232 280.44720459]
[-73.51682281 287.01370239]
[-76.08889008 302.31613159]
[-87.18782043 313.16018677]
[-102.54586029 315.37606812]
[-116.25752258 308.11178589]
[-123.05039978 294.16058350]
[-120.31248474 278.88696289]
[-109.09656525 268.16394043]
[-93.71539307 266.11477661]
[-80.08333588 273.52737427]
[-66.59701538 266.96087646]
[-53.11069489 260.39434814]
[-39.62437439 253.82783508]
[-26.13805199 247.26132202]
[-12.65173054 240.69480896]
[0.83459079 234.12829590]
[14.32091236 227.56178284]
[25.24302673 217.28036499]
[32.61184692 204.21513367]
[39.98066330 191.14988708]
[47.34948349 178.08464050]
[54.71830368 165.01940918]
[62.08712387 151.95416260]
[69.45594025 138.88893127]
[76.82476044 125.82368469]
[84.19358063 112.75844574]
[73.48727417 96.06977081]
[81.27450562 72.47360992]
[75.53424835 58.61541748]
[69.79399872 44.75722504]
[56.46137238 35.20876312]
[58.33333588 18.91680908]
[73.48416901 12.64112663]
[86.32800293 22.83760071]
[83.65219116 39.01697159]
[89.39244080 52.87516785]
[95.13269806 66.73336029]
[102.25858307 69.07252502]
[97.03026581 55.01319504]
[104.76235962 42.15960693]
[119.63255310 40.19056320]
[130.44354248 50.58876419]
[129.05459595 65.52432251]
[116.51036835 73.75084686]
[123.63625336 76.09001160]
[136.47297668 68.32994843]
[149.30969238 60.56987762]
[162.14640808 52.80981064]
[174.98313904 45.04974365]
[187.81985474 37.28967667]
[200.65657043 29.52960968]
[213.49328613 21.76954269]
[226.33000183 14.00947666]
[231.55000305 -1.16060114]
[246.71273804 -6.40186644]
[260.18667603 2.30633068]
[261.63574219 18.28380585]
[249.94836426 29.27400970]
[234.09007263 26.84619522]
[221.25335693 34.60626221]
[208.41664124 42.36632919]
[195.57992554 50.12639618]
[182.74319458 57.88646317]
[169.90647888 65.64653015]
[157.06976318 73.40660095]
[144.23304749 81.16666412]
[131.39631653 88.92673492]
[120.78103638 116.92691040]
[97.25881958 120.12726593]
[89.88999939 133.19250488]
[82.52117920 146.25775146]
[75.15236664 159.32298279]
[67.78354645 172.38822937]
[60.41472626 185.45346069]
[53.04590607 198.51870728]
[45.67708588 211.58395386]
[38.30826569 224.64918518]
[52.16252136 218.89944458]
[67.06274414 217.17221069]
[81.86495209 219.60012817]
[95.43267059 225.99676514]
[106.72422791 235.87101746]
[114.87268066 248.46476746]
[119.25243378 262.81112671]
[119.52721405 277.80859375]
[115.67593384 292.30575562]
[107.99427032 305.18954468]
[97.07200623 315.47079468]
[83.74770355 322.36013794]
[69.04437256 325.32864380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[41 50]
[42 49]
[43 48]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
