%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUGCCCUUCUCAAACAUGGCCGCCACGGCGCCUCUGGAAGGGAACCGCUCUGGGCCCCGCCUUUGAUCUCGUUGGUGGGGCUGGGGGAUGAGAGCUGCACCGCGCGGGACAAGUCGCCGGCGGCGCCCGACGGAGCAGAAGAGAGAGC\
) } def
/len { sequence length } bind def

/coor [
[19.40854263 233.26132202]
[11.88663101 232.82351685]
[4.53008318 231.21632385]
[-2.48055100 228.48062134]
[-8.97344112 224.68504333]
[-14.78968716 219.92408752]
[-19.78720665 214.31593323]
[-32.97931290 221.45513916]
[-46.17141724 228.59436035]
[-59.36352539 235.73356628]
[-72.55563354 242.87277222]
[-85.74773407 250.01199341]
[-91.85352325 256.89260864]
[-99.28707886 257.15921021]
[-112.62391663 264.02426147]
[-113.25397491 274.78472900]
[-118.28610992 284.22506714]
[-126.73908234 290.64855957]
[-137.02400208 292.93292236]
[-147.24287415 290.72604370]
[-155.53875732 284.49832153]
[-169.27536011 290.52374268]
[-183.01196289 296.54916382]
[-189.66508484 302.90206909]
[-197.09527588 302.55392456]
[-210.95346069 308.29415894]
[-220.50192261 321.62680054]
[-236.79388428 319.75485229]
[-243.06956482 304.60400391]
[-232.87309265 291.76016235]
[-216.69371033 294.43597412]
[-202.83552551 288.69573975]
[-189.03738403 282.81256104]
[-175.30078125 276.78713989]
[-161.56419373 270.76171875]
[-155.91665649 252.17337036]
[-138.19110107 243.50875854]
[-119.48896027 250.68743896]
[-106.15213013 243.82238770]
[-92.88694763 236.81988525]
[-79.69483948 229.68067932]
[-66.50273895 222.54145813]
[-53.31063080 215.40225220]
[-40.11852264 208.26304626]
[-26.92641830 201.12382507]
[-29.11367416 177.31999207]
[-19.51417542 155.36453247]
[-0.46192425 140.73591614]
[23.34279442 137.11393738]
[45.99294662 145.45417786]
[56.37807846 134.63064575]
[66.76320648 123.80709839]
[77.14833832 112.98355865]
[87.53347015 102.16001129]
[97.57810211 91.01976013]
[107.27259064 79.57349396]
[116.96708679 68.12723541]
[126.66157532 56.68097687]
[129.67640686 41.14967346]
[143.80624390 36.43830490]
[153.50073242 24.99204445]
[163.19522095 13.54578304]
[172.88970947 2.09952188]
[182.58419800 -9.34673882]
[191.67456055 -21.27842331]
[200.13656616 -33.66368484]
[208.59855652 -46.04894257]
[217.06054688 -58.43420029]
[219.34028625 -67.34635162]
[225.82760620 -70.98551178]
[234.54376221 -83.19324493]
[243.25991821 -95.40097046]
[251.97607422 -107.60870361]
[260.69223022 -119.81643677]
[269.40838623 -132.02416992]
[277.99789429 -144.32131958]
[286.45989990 -156.70657349]
[294.92190552 -169.09182739]
[303.38388062 -181.47709656]
[311.84588623 -193.86235046]
[313.24246216 -209.62179565]
[326.81088257 -215.76564026]
[335.27288818 -228.15089417]
[343.73489380 -240.53616333]
[352.19686890 -252.92141724]
[345.47427368 -266.73092651]
[346.57312012 -282.05044556]
[355.19778442 -294.75915527]
[369.02828979 -301.43841553]
[384.34429932 -300.29156494]
[397.02590942 -291.62710571]
[403.66177368 -277.77572632]
[402.46691895 -262.46337891]
[393.76275635 -249.80902100]
[379.89065552 -243.21658325]
[364.58212280 -244.45942688]
[356.12014771 -232.07415771]
[347.65814209 -219.68890381]
[339.19613647 -207.30364990]
[338.40484619 -192.43006897]
[324.23114014 -185.40036011]
[315.76913452 -173.01510620]
[307.30715942 -160.62983704]
[298.84515381 -148.24458313]
[290.38317871 -135.85931396]
[289.19912720 -128.51582336]
[281.61608887 -123.30801392]
[272.89996338 -111.10028076]
[264.18380737 -98.89254761]
[255.46765137 -86.68482208]
[246.75149536 -74.47708893]
[238.03533936 -62.26935959]
[229.44581604 -49.97220612]
[220.98381042 -37.58694839]
[212.52182007 -25.20168877]
[204.05982971 -12.81642914]
[219.05853271 -12.61890888]
[228.42218018 -0.90046775]
[225.30554199 13.77217865]
[211.98701477 20.67265511]
[198.20303345 14.75640011]
[194.03045654 0.34774947]
[184.33596802 11.79401016]
[174.64147949 23.24027061]
[164.94699097 34.68653107]
[155.25250244 46.13279343]
[152.93109131 60.84538269]
[138.10783386 66.37546539]
[128.41334534 77.82172394]
[118.71885681 89.26798248]
[109.02436829 100.71424866]
[108.80709076 104.63546753]
[106.83063507 108.43312836]
[103.19453430 111.30985260]
[98.35700989 112.54514313]
[87.97187805 123.36868286]
[77.58674622 134.19223022]
[67.20162201 145.01576233]
[56.81649017 155.83930969]
[60.90693283 162.24310303]
[63.94428635 169.20335388]
[65.85518646 176.54840088]
[66.59403992 184.09730530]
[66.14411163 191.66433716]
[64.51788330 199.06356812]
[61.75674057 206.11337280]
[57.92988586 212.64099121]
[53.13263702 218.48664856]
[47.48403549 223.50753784]
[41.12390137 227.58131409]
[34.20936203 230.60902405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[14 39]
[15 38]
[21 35]
[22 34]
[23 33]
[25 32]
[26 31]
[50 139]
[51 138]
[52 137]
[53 136]
[54 135]
[55 131]
[56 130]
[57 129]
[58 128]
[60 126]
[61 125]
[62 124]
[63 123]
[64 122]
[65 116]
[66 115]
[67 114]
[68 113]
[70 112]
[71 111]
[72 110]
[73 109]
[74 108]
[75 107]
[76 105]
[77 104]
[78 103]
[79 102]
[80 101]
[82 99]
[83 98]
[84 97]
[85 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
