%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUGUGCGCCUGCGCGGGGCGCCGAGACAGGGCGUGUUCGCUGUUCAGUGCCGGUGUUGCAGGGAGUGAGGGCAGCUGGAGUGCGUUCUGCCGAAGCUUGUGGUUGCACGCCCAUCGUCUUAGGGGCUACCUUCCGUGACC\
) } def
/len { sequence length } bind def

/coor [
[74.80284882 452.68652344]
[67.58801270 465.83740234]
[60.37318039 478.98831177]
[60.51895142 494.80883789]
[47.61378098 502.24563599]
[40.39894867 515.39654541]
[33.18411636 528.54742432]
[25.96928406 541.69836426]
[18.75445366 554.84924316]
[19.65295982 571.22375488]
[5.77541256 579.96136475]
[-8.60215855 572.07354736]
[-8.68934059 555.67462158]
[5.60355186 547.63439941]
[12.81838322 534.48352051]
[20.03321457 521.33258057]
[27.24804688 508.18170166]
[34.46287918 495.03079224]
[33.80105591 480.15090942]
[47.22228241 471.77346802]
[54.43711090 458.62258911]
[61.65194321 445.47167969]
[66.62818909 431.32116699]
[69.23291016 416.54904175]
[71.83763123 401.77694702]
[73.95763397 386.92749023]
[75.59063721 372.01666260]
[77.22363281 357.10580444]
[78.85663605 342.19497681]
[80.48963928 327.28411865]
[71.37800598 310.27957153]
[83.35393524 294.12625122]
[84.33498383 279.15838623]
[85.31603241 264.19049072]
[86.29708099 249.22261047]
[87.27812195 234.25473022]
[88.25917053 219.28684998]
[89.24021912 204.31895447]
[90.22126770 189.35107422]
[90.87555695 174.36535645]
[91.20278168 159.36892700]
[91.53000641 144.37249756]
[91.85722351 129.37606812]
[72.26490021 117.03832245]
[66.06318665 93.16925812]
[78.60572815 70.20031738]
[70.54623413 57.54944229]
[62.48674011 44.89857101]
[54.42724609 32.24769974]
[40.48684692 24.76600075]
[40.17406082 9.87468052]
[26.23366165 2.39298129]
[25.92087555 -12.49833965]
[17.86138153 -25.14921188]
[3.92098188 -32.63090897]
[3.60819674 -47.52223206]
[-4.45129728 -60.17310333]
[-18.06108856 -70.28299713]
[-12.11385918 -86.15960693]
[4.78864574 -84.83988190]
[8.19957447 -68.23259735]
[16.25906754 -55.58172607]
[29.62299919 -49.00490189]
[30.51225281 -33.20870590]
[38.57174683 -20.55783272]
[51.93568039 -13.98100948]
[52.82493210 1.81518602]
[66.18886566 8.39200974]
[67.07811737 24.18820572]
[75.13761139 36.83907700]
[83.19710541 49.48994827]
[91.25659943 62.14081955]
[106.24857330 61.65003586]
[113.46340179 48.49913406]
[120.67823029 35.34823227]
[127.89306641 22.19733047]
[135.10789490 9.04642868]
[134.24832153 -9.31254864]
[149.52488708 -17.88347054]
[156.45111084 -31.18863297]
[153.01760864 -46.85996246]
[163.24064636 -59.22398376]
[179.27799988 -58.79607010]
[188.82716370 -45.90448761]
[184.56285095 -30.43854904]
[169.75627136 -24.26240349]
[162.83004761 -10.95724106]
[166.16751099 0.71907622]
[160.44369507 11.88303185]
[148.25880432 16.26126099]
[141.04396057 29.41216278]
[133.82913208 42.56306458]
[126.61430359 55.71396637]
[119.39946747 68.86486816]
[127.02319336 76.35221100]
[132.02041626 85.53968811]
[134.07145691 95.56362915]
[133.12664795 105.52360535]
[129.39964294 114.56321716]
[123.33758545 121.94369507]
[115.57173920 127.10412598]
[106.85366058 129.70329285]
[106.52643585 144.69972229]
[106.19921112 159.69615173]
[105.87198639 174.69258118]
[108.76507568 180.77366638]
[108.18312073 186.52296448]
[105.18914795 190.33212280]
[104.20809937 205.30000305]
[103.22705841 220.26789856]
[102.24600983 235.23577881]
[101.26496124 250.20365906]
[100.28391266 265.17153931]
[99.30287170 280.13943481]
[98.32182312 295.10729980]
[106.01543427 302.93026733]
[108.04921722 313.48788452]
[103.98235321 323.20211792]
[95.40048981 328.91711426]
[93.76748657 343.82797241]
[92.13448334 358.73883057]
[90.50148010 373.64965820]
[88.86847687 388.56051636]
[91.04118347 393.47366333]
[91.05766296 398.24093628]
[89.34860229 402.04888916]
[86.60974884 404.38165283]
[84.00502777 419.15377808]
[81.40030670 433.92590332]
[91.74244690 423.06127930]
[105.26543427 416.57058716]
[120.21131897 415.29760742]
[134.63720703 419.40783691]
[146.66778564 428.36691284]
[154.73912048 441.01022339]
[157.80200195 455.69418335]
[155.45822144 470.50994873]
[148.01249695 483.53152466]
[136.43273926 493.06613159]
[122.22425079 497.87435913]
[107.23408508 497.33111572]
[93.41091156 491.50701904]
[82.55168152 481.15921021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[23 129]
[24 128]
[25 127]
[26 123]
[27 122]
[28 121]
[29 120]
[30 119]
[32 115]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[40 105]
[41 104]
[42 103]
[43 102]
[46 72]
[47 71]
[48 70]
[49 69]
[51 67]
[53 65]
[54 64]
[56 62]
[57 61]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
