%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGCGCCUGCGCCGUCUCUAGGCCCCGCCCCCUCACCCCUCCGGUCCUGGAGCUCCCACAGCUAAC\
) } def
/len { sequence length } bind def

/coor [
[82.16104889 264.66592407]
[88.20738220 248.82679749]
[88.20738220 233.82679749]
[88.20738220 218.82679749]
[88.20738220 203.82679749]
[88.20738220 188.82679749]
[77.78497314 180.92631531]
[73.85802460 168.24539185]
[78.11559296 155.46418762]
[89.18090820 147.44035339]
[89.86362457 132.45590210]
[86.92294312 125.39802551]
[90.93386078 116.80956268]
[81.74325562 105.60781860]
[83.06085968 91.17832947]
[94.12828827 81.82641602]
[91.73921204 72.65354919]
[95.90955353 66.24500275]
[97.95204926 51.38471603]
[99.99455261 36.52442551]
[102.03704834 21.66413689]
[104.07955170 6.80384779]
[106.12204742 -8.05644131]
[108.16455078 -22.91673088]
[100.92477417 -33.85359955]
[103.14972687 -46.36798477]
[113.06314087 -53.65801239]
[115.77988434 -68.40994263]
[118.49662781 -83.16186523]
[105.71964264 -91.39698029]
[97.07080078 -103.89762115]
[93.86898804 -118.75752258]
[96.60245514 -133.71067810]
[104.85437012 -146.47680664]
[117.36637878 -155.10920715]
[132.23048401 -158.29145813]
[147.18002319 -155.53833008]
[159.93530273 -147.26962280]
[168.55122375 -134.74627686]
[171.71392822 -119.87799835]
[168.94113159 -104.93209839]
[160.65565491 -92.18770599]
[148.12098694 -83.58826447]
[133.24855042 -80.44512177]
[130.53181458 -65.69319916]
[127.81507111 -50.94126892]
[134.66235352 -34.94109344]
[123.02484131 -20.87423134]
[120.98233795 -6.01394129]
[118.93984222 8.84634781]
[116.89733887 23.70663643]
[114.85484314 38.56692505]
[112.81233978 53.42721558]
[110.76984406 68.28750610]
[109.06613922 83.19043732]
[118.25674438 94.39218140]
[116.93914032 108.82167053]
[105.87171173 118.17358398]
[104.84807587 133.13861084]
[104.16535950 148.12307739]
[116.14945221 160.64300537]
[115.55031586 177.63029480]
[103.20738220 188.82679749]
[103.20738220 203.82679749]
[103.20738220 218.82679749]
[103.20738220 233.82679749]
[103.20738220 248.82679749]
[109.25372314 264.66592407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[10 60]
[11 59]
[13 58]
[16 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[27 46]
[28 45]
[29 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
