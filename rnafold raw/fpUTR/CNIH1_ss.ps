%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGCGGCUGUGGCCGGGGGAAGUGAAUGGUUUUACCCAGAGGGCCCUGCGCCGCCUUUCUCCGCUGGCAACGGCGCCGCUCCCCGCUCCUCCUCCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[83.23255157 389.93566895]
[73.15991211 401.89712524]
[57.74635696 404.53460693]
[44.26969528 396.60278320]
[39.09319687 381.84683228]
[44.66104507 367.23406982]
[58.34427261 359.66418457]
[61.04809570 344.90988159]
[63.75192261 330.15557861]
[66.45574951 315.40127563]
[69.15957642 300.64697266]
[67.23723602 293.37939453]
[72.17432404 285.49081421]
[75.32254028 270.82492065]
[67.04505157 258.49533081]
[70.02886963 243.57716370]
[83.01739502 234.97856140]
[86.16561127 220.31266785]
[89.31382751 205.64675903]
[92.46205139 190.98085022]
[95.61026764 176.31495667]
[98.75848389 161.64904785]
[97.05652618 154.32672119]
[102.22961426 146.59085083]
[105.81935120 132.02671814]
[109.40908813 117.46259308]
[96.14698029 118.30519104]
[86.13268280 110.79949951]
[83.56655884 99.34214020]
[70.50131989 91.97332764]
[57.43607712 84.60450745]
[42.28148651 89.08935547]
[28.43438148 81.47139740]
[24.11000633 66.27023315]
[31.87393570 52.50444794]
[47.11996841 48.34103012]
[60.80290222 56.25006485]
[64.80490112 71.53926086]
[77.87014008 78.90808105]
[90.93537903 86.27690125]
[101.71602631 82.50751495]
[113.14675140 86.69253540]
[119.71640015 97.82364655]
[129.66323853 86.59598541]
[139.61007690 75.36832428]
[138.83801270 59.81063461]
[149.08546448 48.56588364]
[163.92210388 47.92572021]
[167.28186035 32.46536255]
[181.51306152 28.06964111]
[191.45989990 16.84197998]
[201.40673828 5.61431885]
[211.35357666 -5.61334229]
[221.30041504 -16.84100342]
[230.72848511 -28.50769234]
[239.61840820 -40.58945847]
[248.50834656 -52.67122650]
[242.27279663 -66.70737457]
[243.90667725 -81.97911072]
[252.97048950 -94.37841797]
[267.02612305 -100.56994629]
[282.29266357 -98.88820648]
[294.66348267 -89.78556824]
[300.81094360 -75.71060944]
[299.08132935 -60.44940948]
[289.93997192 -48.10716629]
[275.84582520 -42.00387573]
[260.59011841 -43.78129196]
[251.70018005 -31.69952583]
[242.81024170 -19.61775970]
[243.06031799 -15.94049072]
[241.43121338 -11.96701241]
[237.80903625 -8.63524532]
[232.52807617 -6.89416361]
[222.58123779 4.33349752]
[212.63439941 15.56115913]
[202.68756104 26.78882027]
[192.74072266 38.01647949]
[190.09242249 52.67375946]
[175.14976501 57.87255859]
[176.30262756 72.67818451]
[166.37506104 84.20632172]
[150.83773804 85.31516266]
[140.89089966 96.54282379]
[130.94406128 107.77048492]
[123.97321320 121.05232239]
[120.38347626 135.61645508]
[116.79374695 150.18057251]
[113.42438507 164.79725647]
[110.27616882 179.46316528]
[107.12795258 194.12907410]
[103.97973633 208.79496765]
[100.83152008 223.46087646]
[97.68330383 238.12678528]
[105.99856567 251.29849243]
[102.59690857 266.12695312]
[89.98844147 273.97311401]
[86.84022522 288.63903809]
[83.91387177 303.35079956]
[81.21004486 318.10510254]
[78.50621796 332.85940552]
[75.80239868 347.61370850]
[73.09857178 362.36801147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[13 98]
[14 97]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[24 88]
[25 87]
[26 86]
[29 40]
[30 39]
[31 38]
[43 85]
[44 84]
[45 83]
[48 80]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 70]
[56 69]
[57 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
