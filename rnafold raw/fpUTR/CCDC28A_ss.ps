%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAGUAGCUUCCGGAAAGGGUACUGCAUUUCCCGUUUCUACCUCCACUGCACCCGCUUAUUGCGUCUUGCUCCUGGGUCACAGAGCCUAAAACGACACACCCAACACGCCCGCCGGAGUUACAGCUAAAGGAAGGACAGGGGAAGCAAUGAA\
) } def
/len { sequence length } bind def

/coor [
[-57.62241745 530.42871094]
[-73.47717285 534.09204102]
[-89.67153168 532.70202637]
[-95.27195740 546.61730957]
[-100.87237549 560.53259277]
[-106.47280121 574.44787598]
[-112.07321930 588.36315918]
[-109.23464203 604.51477051]
[-121.97515106 614.84002686]
[-137.18840027 608.71722412]
[-139.22431946 592.44494629]
[-125.98851013 582.76275635]
[-120.38809204 568.84747314]
[-114.78766632 554.93212891]
[-109.18724823 541.01684570]
[-103.58682251 527.10156250]
[-114.44728088 518.76007080]
[-122.77164459 507.87033081]
[-127.98143768 495.17822266]
[-129.71176147 481.55511475]
[-127.83687592 467.93820190]
[-122.47927094 455.26608276]
[-114.00173950 444.41387939]
[-102.98277283 436.13293457]
[-90.17710114 430.99877930]
[-76.46401978 429.37115479]
[-62.78699112 431.36868286]
[-56.63079834 417.69018555]
[-50.47460556 404.01168823]
[-50.59799194 396.57876587]
[-44.05425644 390.12167358]
[-37.62386703 376.56991577]
[-31.19347763 363.01815796]
[-24.76309013 349.46640015]
[-18.33270073 335.91464233]
[-11.90231228 322.36288452]
[-17.12883759 308.46258545]
[-10.80056000 294.62756348]
[3.81481671 289.23974609]
[10.24520493 275.68798828]
[16.67559433 262.13623047]
[23.10598183 248.58447266]
[21.57180214 233.76910400]
[34.47809982 224.61825562]
[40.90848923 211.06649780]
[47.33887863 197.51473999]
[39.02206421 183.39221191]
[40.75856781 166.92822266]
[52.06287003 154.60711670]
[68.64240265 151.39944458]
[74.79859161 137.72094727]
[80.95478058 124.04244995]
[74.42550659 116.93237305]
[70.42945099 108.14509583]
[69.36243439 98.55103302]
[71.33014679 89.10048676]
[76.13768005 80.72956848]
[67.12654114 68.73793030]
[58.11540985 56.74628830]
[42.49744797 53.07766342]
[35.75854111 38.51858902]
[43.06820297 24.23753738]
[58.81908798 21.18971252]
[70.92845917 31.71314430]
[70.10704803 47.73515320]
[79.11818695 59.72679520]
[88.12931824 71.71843719]
[93.47800446 70.02962494]
[99.04479218 69.34307098]
[104.64352417 69.68173218]
[110.08697510 71.03428650]
[115.19309235 73.35549164]
[125.58396149 62.53745651]
[135.97482300 51.71942139]
[146.36569214 40.90138626]
[156.75656128 30.08334732]
[166.92747498 19.05826378]
[176.87431335 7.83060217]
[186.82115173 -3.39705896]
[196.76799011 -14.62472057]
[206.71482849 -25.85238075]
[197.68363953 -37.89491272]
[191.26177979 -51.50904465]
[187.71221924 -66.13728333]
[187.18029785 -81.18061829]
[189.68782043 -96.02303314]
[195.13208008 -110.05673981]
[203.29016113 -122.70706177]
[213.82797241 -133.45597839]
[226.31401062 -141.86334229]
[240.23698425 -147.58485413]
[255.02674866 -150.38623047]
[270.07766724 -150.15277100]
[284.77343750 -146.89401245]
[298.51226807 -140.74340820]
[310.73153687 -131.95283508]
[320.93087769 -120.88224030]
[328.69265747 -107.98497009]
[333.69903564 -93.78916168]
[335.74499512 -78.87611389]
[334.74673462 -63.85651398]
[330.74517822 -49.34540176]
[323.90414429 -35.93700409]
[314.50378418 -24.18037796]
[302.92904663 -14.55695724]
[289.65390015 -7.46081114]
[275.22195435 -3.18252325]
[260.22418213 -1.89728701]
[245.27474976 -3.65773177]
[230.98580933 -8.39176846]
[217.94248962 -15.90554142]
[207.99565125 -4.67788029]
[198.04881287 6.54978085]
[188.10197449 17.77744293]
[178.15513611 29.00510406]
[177.55194092 33.79542923]
[173.89588928 38.24045563]
[167.57460022 40.47421265]
[157.18373108 51.29225159]
[146.79286194 62.11028671]
[136.40199280 72.92832184]
[126.01113129 83.74636078]
[129.99870300 106.39043427]
[117.12866974 125.44343567]
[94.63327789 130.19863892]
[88.47708893 143.87713623]
[82.32089996 157.55563354]
[90.04927063 169.00805664]
[91.08644104 182.67645264]
[85.26741028 194.96786499]
[74.21539307 202.70449829]
[60.89063263 203.94512939]
[54.46024323 217.49688721]
[48.02985764 231.04864502]
[49.10409164 246.83332825]
[36.65773773 255.01486206]
[30.22735023 268.56661987]
[23.79696083 282.11837769]
[17.36657333 295.67013550]
[22.43657494 310.39877319]
[15.72219563 324.05059814]
[1.64944386 328.79327393]
[-4.78094482 342.34503174]
[-11.21133327 355.89678955]
[-17.64172173 369.44854736]
[-24.07210922 383.00030518]
[-30.50249863 396.55206299]
[-36.79610825 410.16787720]
[-42.95230103 423.84637451]
[-49.10848999 437.52487183]
[-36.83831787 448.40982056]
[-28.52105904 462.52551270]
[-24.95352745 478.49722290]
[-26.47057343 494.77337646]
[-32.91369629 509.77655029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[27 150]
[28 149]
[29 148]
[31 147]
[32 146]
[33 145]
[34 144]
[35 143]
[36 142]
[39 139]
[40 138]
[41 137]
[42 136]
[44 134]
[45 133]
[46 132]
[50 127]
[51 126]
[52 125]
[57 67]
[58 66]
[59 65]
[72 122]
[73 121]
[74 120]
[75 119]
[76 118]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
