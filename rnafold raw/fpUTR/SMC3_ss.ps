%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUGGCUGAGGGGAGCGAGCGGCGCUUUGGGGGAGGGGUCGCGUAGGCGCCUCACCUGACCCUGCGGCCGUGCGGUUGCUGCUCCGGGGCAGGUCUCCUUCCAGGCCAGGGGCCCGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[294.10989380 237.37019348]
[289.45169067 222.07443237]
[291.00146484 206.12178040]
[277.71301270 199.16357422]
[264.42453003 192.20536804]
[251.13607788 185.24716187]
[236.27183533 186.19767761]
[227.63546753 172.94158936]
[214.34700012 165.98338318]
[201.05854797 159.02517700]
[187.77008057 152.06697083]
[174.48161316 145.10876465]
[161.19314575 138.15055847]
[147.81962585 131.35722351]
[134.36312866 124.72983551]
[120.90661621 118.10243988]
[107.45010376 111.47504425]
[92.47878265 110.54799652]
[78.30744934 115.46463776]
[64.13611603 120.38128662]
[49.96478653 125.29792786]
[35.79345703 130.21456909]
[27.52870178 143.96496582]
[11.60689545 145.93363953]
[0.24188598 134.61038208]
[2.15193582 118.68143463]
[15.87181854 110.36611938]
[30.87681389 116.04324341]
[45.04814529 111.12659454]
[59.21947479 106.20995331]
[73.39080811 101.29331207]
[87.56213379 96.37666321]
[91.23495483 81.83326721]
[76.20545959 76.89112091]
[73.30654907 62.28134537]
[63.16889954 51.22566605]
[53.03124619 40.16998672]
[42.75763321 29.24053955]
[32.34962463 18.43899345]
[21.94161987 7.63744783]
[11.53361320 -3.16409874]
[-3.61352563 -7.73298740]
[-6.87290716 -22.26659393]
[-17.28091431 -33.06813812]
[-27.68891907 -43.86968613]
[-43.63798141 -45.60373688]
[-52.10427856 -59.23096848]
[-46.59318542 -74.29772949]
[-31.33234787 -79.24610138]
[-18.02857018 -70.28010559]
[-16.88737297 -54.27769089]
[-6.47936726 -43.47614670]
[3.92863917 -32.67459869]
[18.33132744 -28.87830925]
[22.33515930 -13.57210541]
[32.74316788 -2.77055883]
[43.15117264 8.03098774]
[53.55917740 18.83253288]
[60.54085922 21.49475098]
[64.08692932 30.03233528]
[74.22457886 41.08801270]
[84.36222839 52.14369202]
[98.66661072 56.29506302]
[102.29062653 71.69561768]
[114.07749939 98.01853180]
[127.53401184 104.64592743]
[140.99052429 111.27332306]
[154.44702148 117.90072632]
[163.63670349 118.90816498]
[168.15135193 124.86208344]
[181.43981934 131.82029724]
[194.72828674 138.77850342]
[208.01675415 145.73670959]
[221.30522156 152.69491577]
[234.59368896 159.65312195]
[250.40840149 159.20030212]
[258.09429932 171.95869446]
[271.38275146 178.91690063]
[284.67120361 185.87510681]
[297.95968628 192.83331299]
[308.66711426 183.35795593]
[321.94445801 178.13412476]
[336.17794800 177.77468872]
[349.64520264 182.30259705]
[360.72360229 191.15063477]
[368.08575439 203.23239136]
[370.85855103 217.07560730]
[368.72665405 231.00160217]
[381.83895874 238.28636169]
[394.95123291 245.57112122]
[408.06353760 252.85588074]
[421.17584229 260.14065552]
[434.28811646 267.42541504]
[450.10922241 267.36389160]
[457.47717285 280.30847168]
[477.51916504 278.96365356]
[486.93481445 295.77996826]
[500.39132690 302.40737915]
[513.84783936 309.03475952]
[527.30432129 315.66217041]
[540.76086426 322.28955078]
[555.64123535 316.96508789]
[569.89227295 323.79754639]
[575.05914307 338.73336792]
[568.07641602 352.91140747]
[553.08679199 357.92007446]
[538.98333740 350.78781128]
[534.13342285 335.74606323]
[520.67694092 329.11868286]
[507.22042847 322.49127197]
[493.76391602 315.86389160]
[480.30740356 309.23648071]
[470.84072876 313.41925049]
[460.42697144 311.60556030]
[452.61157227 304.16415405]
[450.19241333 293.42077637]
[435.30920410 294.00335693]
[427.00335693 280.53768921]
[413.89108276 273.25292969]
[400.77877808 265.96817017]
[387.66647339 258.68341064]
[374.55419922 251.39865112]
[361.44189453 244.11389160]
[349.22955322 254.13467407]
[334.07635498 258.73391724]
[318.27801514 257.18414307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 68]
[15 67]
[16 66]
[17 65]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[33 64]
[35 62]
[36 61]
[37 60]
[38 58]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[45 51]
[88 123]
[89 122]
[90 121]
[91 120]
[92 119]
[93 118]
[95 116]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
