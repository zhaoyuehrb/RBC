%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:20:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGACAAACCCGAUAUGGCUGAGAUCGAGAAAUUCGAUAAGUCGAAACUGAAGAAGACAGAGACGCAAGAGAAAAAUCCACUGCCUUCCAAAGAAACGAUUGAACAGGAGAAGCAAGCAGGCGAAUCGUAA\
) } def
/len { sequence length } bind def

/coor [
[86.15592194 343.22732544]
[78.02142334 355.98214722]
[66.34230804 365.59741211]
[52.26278305 371.13116455]
[37.16222000 372.04119873]
[22.52001762 368.23843384]
[9.77066898 360.09539795]
[0.16322389 348.40982056]
[-5.36107683 334.32659912]
[-6.26101923 319.22543335]
[-2.44843531 304.58578491]
[5.70315647 291.84188843]
[17.39514542 282.24227905]
[31.48207092 276.72741699]
[46.58383942 275.83758545]
[50.35444641 261.31924438]
[54.12505341 246.80088806]
[57.89566422 232.28254700]
[53.60610962 218.01898193]
[64.56396484 206.60688782]
[68.33457184 192.08854675]
[64.04502106 177.82498169]
[75.00288391 166.41288757]
[78.77349091 151.89454651]
[82.54409790 137.37619019]
[71.30287933 129.63381958]
[63.20356369 118.64700317]
[59.13290405 105.61861420]
[44.14891052 104.92585754]
[29.16491508 104.23310852]
[14.18092060 103.54035950]
[-0.80307353 102.84760284]
[-13.58000565 112.54964447]
[-29.09563637 108.46984100]
[-35.44770050 93.73787689]
[-27.76343918 79.65484619]
[-11.93755913 77.02404785]
[-0.11032166 87.86360931]
[14.87367249 88.55635834]
[29.85766792 89.24911499]
[44.84166336 89.94186401]
[59.82565689 90.63461304]
[76.29575348 66.23912048]
[104.83471680 59.03277206]
[109.27181244 44.70405197]
[113.70890045 30.37533188]
[118.14599609 16.04661179]
[122.58308411 1.71789253]
[113.46215820 -10.69640541]
[113.40077972 -25.92301369]
[122.21292877 -38.12178802]
[136.34924316 -42.73723602]
[140.78634644 -57.06595612]
[131.66540527 -69.48025513]
[131.60403442 -84.70686340]
[140.41618347 -96.90563965]
[154.55250549 -101.52108765]
[158.98959351 -115.84980774]
[163.42668152 -130.17852783]
[167.86378479 -144.50724792]
[164.55491638 -159.97857666]
[175.71075439 -169.84753418]
[180.14785767 -184.17625427]
[184.58494568 -198.50497437]
[171.99116516 -206.84603882]
[162.25852966 -218.39820862]
[156.17602539 -232.22499084]
[154.23672485 -247.20550537]
[156.59783936 -262.12533569]
[163.06796265 -275.77505493]
[173.12260437 -287.04806519]
[185.94665527 -295.03057861]
[200.50054932 -299.07543945]
[215.60446167 -298.85476685]
[230.03396606 -294.38647461]
[242.61935425 -286.03274536]
[252.34037781 -274.47079468]
[258.40899658 -260.63790894]
[260.33325195 -245.65547180]
[257.95715332 -230.73800659]
[251.47331238 -217.09481812]
[241.40736389 -205.83189392]
[228.57528687 -197.86228943]
[214.01733398 -193.83204651]
[198.91366577 -194.06788635]
[194.47657776 -179.73916626]
[190.03947449 -165.41044617]
[193.66571045 -150.96400452]
[182.19250488 -140.07015991]
[177.75540161 -125.74143219]
[173.31831360 -111.41271210]
[168.88122559 -97.08399200]
[177.93530273 -85.28730774]
[178.31132507 -70.24328613]
[169.65557861 -57.71605682]
[155.11506653 -52.62886429]
[150.67796326 -38.30014420]
[159.73204041 -26.50346184]
[160.10806274 -11.45943928]
[151.45233154 1.06779087]
[136.91180420 6.15498447]
[132.47471619 20.48370361]
[128.03762817 34.81242371]
[123.60053253 49.14114380]
[119.16343689 63.46986389]
[124.75748444 67.00371552]
[129.71456909 71.38649750]
[133.90715027 76.50545502]
[137.22735596 82.22888947]
[139.58976746 88.40953827]
[140.93360901 94.88839722]
[141.22428894 101.49876404]
[140.45434570 108.07057190]
[138.64358521 114.43473053]
[135.83859253 120.42752075]
[132.11154175 125.89473724]
[127.55830383 130.69573975]
[122.29605103 134.70698547]
[116.46015167 137.82527161]
[110.20076752 139.97039795]
[103.67893219 141.08714294]
[97.06244659 141.14680481]
[93.29183960 155.66514587]
[89.52123260 170.18350220]
[93.54108429 185.48550415]
[82.85292816 195.85914612]
[79.08232117 210.37750244]
[83.10217285 225.67950439]
[72.41401672 236.05314636]
[68.64340973 250.57150269]
[64.87279510 265.08984375]
[61.10219193 279.60821533]
[73.86244202 287.73416138]
[83.48554230 299.40682983]
[89.02870941 313.48263550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 132]
[16 131]
[17 130]
[18 129]
[20 127]
[21 126]
[23 124]
[24 123]
[25 122]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[44 105]
[45 104]
[46 103]
[47 102]
[48 101]
[52 97]
[53 96]
[57 92]
[58 91]
[59 90]
[60 89]
[62 87]
[63 86]
[64 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
