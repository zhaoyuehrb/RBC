%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 23:40:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGUCUUGUAUCUCCUCUUCUCGUUCCUCUUCAUAUUCCUGAUGCCUCUUCCAGGUGUUUUUGGUGGUAUAGGCGAUCCUGUUACCUGCCUUAAGAGUGGAGCCAUAUGUCAUCCAGUCUUUUGCCCUAGAAGGUAUAAACAAAUUGGCACCUGUGGUCUCCCUGGAACAAAAUGCUGCAAAAAGCCAUGA\
) } def
/len { sequence length } bind def

/coor [
[87.92384338 283.09863281]
[88.04405212 268.09912109]
[80.54429626 268.03900146]
[74.91529083 281.94274902]
[69.28628540 295.84652710]
[63.65727997 309.75027466]
[58.13988495 323.69866943]
[66.67603302 336.65682983]
[65.93168640 352.15603638]
[56.19305420 364.23654175]
[41.20484161 368.25314331]
[26.73032188 362.66137695]
[18.33524323 349.61138916]
[19.24768448 334.12118530]
[29.11679459 322.14703369]
[44.14769745 318.29324341]
[43.62485504 310.91171265]
[49.75352859 304.12124634]
[55.38253403 290.21749878]
[61.01153946 276.31375122]
[66.64054108 262.41000366]
[54.69749451 247.20381165]
[49.77278900 229.09471130]
[52.21969223 211.06185913]
[61.21420288 195.89947510]
[74.95289612 185.78378296]
[90.99697876 181.96325684]
[91.95803070 166.99407959]
[92.91909027 152.02490234]
[93.88014221 137.05570984]
[94.84119415 122.08653259]
[86.82118225 134.76246643]
[78.80117035 147.43841553]
[74.34574127 161.76144409]
[63.76358032 172.39242554]
[49.46121216 176.91374207]
[34.69118881 174.29718018]
[22.81241226 165.13777161]
[16.52627754 151.51849365]
[17.26233482 136.53657532]
[24.85319519 123.59907532]
[37.57259369 115.64817047]
[52.52717972 114.49186707]
[66.66992950 109.49359894]
[80.81267548 104.49532318]
[66.00494385 102.10132599]
[51.19721985 99.70732880]
[36.38949203 97.31333160]
[21.58176613 94.91933441]
[6.77403975 92.52533722]
[-8.03368759 90.13133240]
[-21.83202362 98.31580353]
[-36.78235245 92.49625397]
[-41.41606522 77.13694763]
[-32.17856979 64.02023315]
[-16.15608597 63.20812607]
[-5.63968897 75.32360840]
[9.16803837 77.71760559]
[23.97576523 80.11160278]
[38.78349304 82.50560760]
[53.59121704 84.89960480]
[68.39894867 87.29360199]
[83.20667267 89.68759918]
[87.34842682 83.43492889]
[80.65996552 70.00867462]
[95.63193512 70.92959595]
[99.77368927 64.67692566]
[91.79321289 51.97606277]
[83.81272888 39.27519989]
[75.73071289 26.63870049]
[67.54769135 14.06737900]
[59.36466980 1.49605751]
[51.18164444 -11.07526398]
[42.89813614 -23.58060074]
[34.51467133 -36.01915359]
[26.13120842 -48.45770264]
[17.74774551 -60.89625168]
[2.78150582 -67.60025787]
[1.37361407 -83.93885803]
[14.97238922 -93.10430145]
[29.58857727 -85.66796875]
[30.18629646 -69.27971649]
[38.56975937 -56.84116745]
[46.95322418 -44.40261459]
[55.33668518 -31.96406555]
[61.68995285 -28.16978073]
[63.75296783 -19.25828743]
[71.93598938 -6.68696594]
[80.11901093 5.88435555]
[88.30204010 18.45567703]
[94.59367371 22.35130310]
[96.51358795 31.29471779]
[104.49407196 43.99557877]
[112.47455597 56.69644547]
[109.36190033 42.02294922]
[118.09593964 29.82801056]
[132.99032593 28.05119324]
[144.34802246 37.84930801]
[144.77452087 52.84324265]
[133.99258423 63.27097321]
[147.70877075 57.19922638]
[154.29928589 50.85605240]
[161.69380188 51.14203644]
[175.50553894 45.29090881]
[189.31729126 39.43978119]
[203.12902832 33.58864975]
[216.89344788 27.62701988]
[230.60963440 21.55526924]
[244.32582092 15.48351955]
[258.04202271 9.41176891]
[271.75820923 3.34001899]
[285.37530518 -2.95079231]
[298.88983154 -9.45904827]
[312.40438843 -15.96730423]
[325.91891479 -22.47556114]
[339.43344116 -28.98381615]
[340.67883301 -44.22836685]
[349.33038330 -56.72026062]
[362.98229980 -63.16166687]
[377.92541504 -61.91321945]
[390.15493774 -53.40999985]
[403.66946411 -59.91825485]
[410.05328369 -66.46940613]
[417.45315552 -66.42057037]
[431.07028198 -72.71138000]
[440.35324097 -85.52297974]
[455.15209961 -83.83666229]
[468.76919556 -90.12747192]
[482.38632202 -96.41828156]
[496.00341797 -102.70909119]
[501.22576904 -117.62561035]
[515.50213623 -124.40505219]
[530.36260986 -119.02528381]
[536.99072266 -104.67803192]
[531.45416260 -89.87526703]
[517.03765869 -83.39920807]
[502.29421997 -89.09197998]
[488.67712402 -82.80117035]
[475.05999756 -76.51036072]
[461.44290161 -70.21955109]
[453.13391113 -57.85791397]
[437.36108398 -59.09427261]
[423.74398804 -52.80346298]
[410.17773438 -46.40372086]
[396.66317749 -39.89546585]
[395.68630981 -25.03238106]
[387.34548950 -12.57097244]
[373.79757690 -5.91363001]
[358.63684082 -6.93814611]
[345.94171143 -15.46928310]
[332.42715454 -8.96102715]
[318.91262817 -2.45277143]
[305.39810181 4.05548477]
[291.88357544 10.56374073]
[289.48568726 14.70708942]
[284.45355225 17.38158417]
[277.82995605 17.05620766]
[264.11376953 23.12795830]
[250.39756775 29.19970894]
[236.68138123 35.27145767]
[222.96519470 41.34320831]
[218.11535645 46.93245697]
[208.98016357 47.40039444]
[195.16842651 53.25152588]
[181.35667419 59.10265350]
[167.54493713 64.95378113]
[153.78051758 70.91541290]
[140.06433105 76.98716736]
[109.81037140 123.04759216]
[108.84931946 138.01676941]
[107.88826752 152.98594666]
[106.92721558 167.95512390]
[105.96616364 182.92431641]
[120.75466919 188.29458618]
[132.87521362 199.15612793]
[140.31063843 214.24017334]
[141.62878418 231.54914856]
[136.23944092 248.61987305]
[124.53552246 262.87399292]
[129.94094849 276.86618042]
[135.34638977 290.85836792]
[149.89765930 297.02569580]
[155.74848938 311.70709229]
[149.42765808 326.19235229]
[134.68521118 331.88763428]
[120.26760101 325.41400146]
[114.72851562 310.61218262]
[121.35420227 296.26382446]
[115.94876862 282.27163696]
[110.54333496 268.27944946]
[103.04357147 268.21932983]
[102.92336273 283.21884155]
[102.80314636 298.21835327]
[102.68270111 313.21789551]
[87.68318939 313.09719849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[6 18]
[7 16]
[27 173]
[28 172]
[29 171]
[30 170]
[31 169]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[67 94]
[68 93]
[69 92]
[70 90]
[71 89]
[72 88]
[73 87]
[74 85]
[75 84]
[76 83]
[77 82]
[100 168]
[101 167]
[103 166]
[104 165]
[105 164]
[106 163]
[107 161]
[108 160]
[109 159]
[110 158]
[111 157]
[112 154]
[113 153]
[114 152]
[115 151]
[116 150]
[121 145]
[122 144]
[124 143]
[125 142]
[127 140]
[128 139]
[129 138]
[130 137]
[179 190]
[180 189]
[181 188]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
