%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sat Sep 12 09:05:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACACGAAGGUUCAGCUGUCUCUUACUUUCAACCAGUGAAAUUGAUCUAUCCGUGAAGAGGCGGAUAUAA\
) } def
/len { sequence length } bind def

/coor [
[18.93480492 257.48013306]
[9.05380630 255.78602600]
[0.11371276 251.30299377]
[-10.92214584 261.46221924]
[-21.95800400 271.62142944]
[-32.99386215 281.78067017]
[-32.09519196 297.39239502]
[-41.48320007 309.89837646]
[-56.72515106 313.39364624]
[-70.62426758 306.22784424]
[-76.61780548 291.78445435]
[-71.87580872 276.88320923]
[-58.63729095 268.55999756]
[-43.15308762 270.74481201]
[-32.11722946 260.58557129]
[-21.08136940 250.42636108]
[-10.04551125 240.26713562]
[-14.62381363 220.19712830]
[-6.76505041 201.03717041]
[10.79584599 189.82969666]
[31.73011589 190.78237915]
[39.93433762 178.22488403]
[48.13856125 165.66738892]
[56.34278488 153.10989380]
[64.54700470 140.55239868]
[72.75122833 127.99489594]
[80.95545197 115.43740082]
[89.15967560 102.87990570]
[97.10261536 90.15553284]
[104.78089142 77.26972198]
[112.45916748 64.38391876]
[117.03541565 50.09902954]
[118.27410126 35.15026093]
[119.51279449 20.20149422]
[120.75148773 5.25272655]
[121.99017334 -9.69604111]
[112.76050568 -22.81826591]
[117.40338135 -38.17480469]
[132.35717773 -43.98543549]
[146.15063477 -35.79273987]
[148.20257568 -19.88145256]
[136.93894958 -8.45735073]
[135.70025635 6.49141693]
[134.46156311 21.44018364]
[133.22286987 36.38895035]
[131.98417664 51.33771896]
[143.59634399 41.84258270]
[158.23860168 38.58617401]
[172.78056335 42.26469421]
[184.11326599 52.09169769]
[189.81385803 65.96625519]
[188.66358948 80.92208099]
[180.90841675 93.76175690]
[168.20629883 101.74024200]
[153.27285767 103.15180206]
[139.30076599 97.69466400]
[129.27711487 86.53551483]
[125.34497833 72.06218719]
[117.66670227 84.94799805]
[109.98842621 97.83380890]
[108.83563995 106.06773376]
[101.71717072 111.08412933]
[93.51294708 123.64162445]
[85.30872345 136.19912720]
[77.10449982 148.75662231]
[68.90028381 161.31411743]
[60.69605637 173.87161255]
[52.49183655 186.42910767]
[44.28761292 198.98660278]
[50.21986008 207.30554199]
[53.46946716 216.96710205]
[53.76891327 227.13208008]
[51.10629272 236.92179871]
[45.72514343 245.49409485]
[38.10223389 252.11573792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 60]
[30 59]
[31 58]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
