%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sat Sep 12 04:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAGCCAAGUGGAGGAAGAAGCGAAUGCGCAGGCUGAAGCGCAAAAGAAGAAAGAUGAGGCAGAGGUCCAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[110.62777710 305.75018311]
[104.94402313 291.76455688]
[103.24545288 276.76397705]
[105.65811920 261.86157227]
[112.00299072 248.16320801]
[121.80921936 236.68539429]
[134.34913635 228.27984619]
[129.65718079 214.03254700]
[124.96523285 199.78523254]
[111.59299469 193.32623291]
[106.63172913 178.94429016]
[113.49719238 164.96203613]
[108.80524445 150.71473694]
[95.94938660 151.31382751]
[83.34674835 148.70509338]
[71.78517151 143.05160522]
[61.98742294 134.70678711]
[54.56598663 124.19230652]
[49.98481750 112.16546631]
[48.53029633 99.37811279]
[50.29335403 86.62963867]
[55.16377640 74.71700287]
[62.83708954 64.38490295]
[72.83360291 56.27924728]
[84.52840424 50.90675354]
[70.84874725 43.82345581]
[64.04254150 30.20255280]
[66.53245544 15.36124706]
[77.15690613 4.95649099]
[74.78093719 -9.85413933]
[72.40496826 -24.66477013]
[70.02899933 -39.47539902]
[67.65303040 -54.28602982]
[53.75285721 -61.18275833]
[46.59102631 -74.94821167]
[48.92140579 -90.28929901]
[59.84791565 -101.30706024]
[75.16909027 -103.76493073]
[88.99362946 -96.71781921]
[96.00571442 -82.87548065]
[93.50904846 -67.56057739]
[82.46366119 -56.66199875]
[84.83963013 -41.85137177]
[87.21559906 -27.04073906]
[89.59156799 -12.23011017]
[91.96753693 2.58052039]
[105.31343079 9.13987350]
[112.32070923 22.45760918]
[110.11661530 37.52397537]
[99.33903503 48.53078461]
[116.35871887 51.19519043]
[131.54609680 59.32616043]
[143.20002747 72.01295471]
[150.01518250 87.83453369]
[151.22821045 105.01875305]
[146.70323181 121.64083099]
[136.94708252 135.83894348]
[123.05254364 146.02279663]
[127.74449158 160.27009583]
[141.57476807 167.43678284]
[146.13011169 181.95240784]
[139.21253967 195.09329224]
[143.90447998 209.34059143]
[148.59643555 223.58789062]
[163.67707825 222.89738464]
[178.38452148 226.30230713]
[191.62739563 233.55000305]
[202.42295837 244.10264587]
[209.97013855 257.17715454]
[213.70887756 271.80331421]
[213.36170959 286.89575195]
[208.95443726 301.33453369]
[200.81408691 314.04821777]
[189.54472351 324.09332275]
[175.98262024 330.72445679]
[161.13417053 333.44952393]
[146.10122681 332.06634521]
[131.99932861 326.67755127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 64]
[8 63]
[9 62]
[12 59]
[13 58]
[25 50]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
