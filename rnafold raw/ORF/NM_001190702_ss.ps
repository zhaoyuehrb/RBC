%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUCAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAG\
) } def
/len { sequence length } bind def

/coor [
[84.27016449 141.66734314]
[82.14380646 126.81881714]
[90.52497864 114.37641907]
[77.63917542 122.05469513]
[64.75336456 129.73297119]
[51.86755371 137.41123962]
[47.88035965 152.46913147]
[34.70293427 160.07243347]
[20.37211037 156.17845154]
[7.48630190 163.85673523]
[-0.04017656 178.42671204]
[-16.43180656 178.92318726]
[-24.82628441 164.83543396]
[-16.58809280 150.65571594]
[-0.19197404 150.97091675]
[12.69383526 143.29264832]
[16.08990097 128.83573914]
[29.04856491 120.86531067]
[44.18927765 124.52543640]
[57.07508850 116.84716034]
[69.96089935 109.16888428]
[82.84670258 101.49060822]
[89.71175385 88.15377808]
[88.47306061 73.20500946]
[87.23437500 58.25624084]
[72.38997650 46.86325455]
[70.32190704 28.57879066]
[81.84989929 14.63819218]
[79.38098145 -0.15722753]
[76.91206360 -14.95264721]
[74.44314575 -29.74806595]
[71.97422791 -44.54348755]
[58.41307449 -52.32996368]
[53.07824707 -67.02940369]
[58.48868561 -81.70118713]
[72.08974457 -89.41773987]
[87.45941925 -86.53554535]
[97.34062195 -74.41548920]
[97.06774902 -58.78028488]
[86.76964569 -47.01240540]
[89.23856354 -32.21698380]
[91.70748138 -17.42156601]
[94.17640686 -2.62614632]
[96.64532471 12.16927338]
[107.43664551 16.80352974]
[114.61740875 26.25020981]
[116.22785950 38.12931824]
[111.73107147 49.37294006]
[102.18313599 57.01755142]
[103.42182922 71.96631622]
[104.66052246 86.91508484]
[113.67375946 90.33975220]
[119.59371185 99.97074127]
[133.06958008 106.55869293]
[146.54544067 113.14663696]
[160.02130127 119.73458862]
[173.49716187 126.32254028]
[186.97303772 132.91049194]
[200.44889832 139.49842834]
[215.31361389 134.13038635]
[229.58462524 140.92106628]
[234.79522705 155.84170532]
[227.85403442 170.04013062]
[212.87915039 175.09268188]
[198.75489807 168.00177002]
[193.86094666 152.97430420]
[180.38508606 146.38635254]
[166.90922546 139.79840088]
[153.43334961 133.21044922]
[139.95748901 126.62250519]
[126.48162842 120.03455353]
[113.00576019 113.44660950]
[122.38517761 125.15244293]
[121.49372864 140.12593079]
[110.79168701 150.63623047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[9 16]
[10 15]
[23 51]
[24 50]
[25 49]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
