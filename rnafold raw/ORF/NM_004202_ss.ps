%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 18:20:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGACAAACCUGGUAUGGCUGAGAUCGAGAAAUUCGAUAAGUCGAAACUGAAGAAGACAGAAACGCAAGAGAAGAAUCCAUUGUCUUCCAAAGAAACUAUCGAACAGGAGAGGCAAGCAGGCGAAUCUUAA\
) } def
/len { sequence length } bind def

/coor [
[83.75199890 303.93240356]
[91.26046753 290.64385986]
[103.79595947 281.93615723]
[101.38101959 267.13183594]
[98.96607971 252.32749939]
[96.55113983 237.52317810]
[94.13619995 222.71884155]
[81.02959442 218.71365356]
[70.89166260 209.39324951]
[65.75190735 196.54559326]
[66.67282104 182.67216492]
[73.53076935 170.50097656]
[85.02906036 162.45011902]
[82.95671844 147.59396362]
[80.88436890 132.73780823]
[69.68325806 122.76107788]
[54.68726349 122.41460419]
[39.69126511 122.06813812]
[23.80037117 131.28932190]
[9.15258408 121.69425201]
[-5.84741545 121.69425201]
[-20.84741592 121.69425201]
[-35.84741592 121.69425201]
[-50.84741592 121.69425201]
[-58.16327286 129.89521790]
[-68.58451080 132.61053467]
[-78.55477905 129.16612244]
[-84.81006622 120.94821167]
[-99.79405975 120.25546265]
[-114.77806091 119.56271362]
[-129.76205444 118.86995697]
[-144.74604797 118.17720795]
[-157.52297974 127.87924957]
[-173.03860474 123.79944611]
[-179.39067078 109.06748199]
[-171.70640564 94.98445129]
[-155.88053894 92.35365295]
[-144.05329895 103.19321442]
[-129.06930542 103.88596344]
[-114.08530426 104.57872009]
[-99.10131073 105.27146912]
[-84.11731720 105.96421814]
[-67.73389435 95.79373169]
[-50.84741592 106.69425201]
[-35.84741592 106.69425201]
[-20.84741592 106.69425201]
[-5.84741545 106.69425201]
[9.15258408 106.69425201]
[17.97659683 98.33811951]
[30.53112030 98.26863098]
[40.03773117 107.07214355]
[55.03372955 107.41860962]
[70.02973175 107.76507568]
[68.94670105 91.12940216]
[76.81177521 75.64122772]
[92.06179810 65.94644165]
[110.82318115 65.34885406]
[115.26027679 51.02013016]
[119.69736481 36.69141006]
[124.13446045 22.36268997]
[128.57154846 8.03397083]
[133.00863647 -6.29474926]
[137.44573975 -20.62346840]
[124.67309570 -28.65603638]
[114.41536713 -39.72136307]
[107.37194061 -53.06499481]
[104.02304840 -67.77714539]
[104.59701538 -82.85471344]
[109.05471802 -97.26967621]
[117.09221649 -110.03921509]
[128.16149902 -120.29267120]
[141.50785828 -127.33094025]
[156.22129822 -130.67416382]
[171.29864502 -130.09436035]
[185.71188354 -125.63109589]
[198.47831726 -117.58866882]
[208.72749329 -106.51542664]
[215.76062012 -93.16635895]
[219.09814453 -78.45162964]
[218.51252747 -63.37450790]
[214.04370117 -48.96298599]
[205.99635315 -36.19966507]
[194.91914368 -25.95476151]
[181.56736755 -18.92679405]
[166.85134888 -15.59494305]
[151.77445984 -16.18637657]
[147.33735657 -1.85765755]
[142.90026855 12.47106266]
[138.46318054 26.79978180]
[134.02609253 41.12850189]
[129.58898926 55.45722198]
[125.15190125 69.78594208]
[128.64912415 76.42066193]
[139.41259766 65.97328186]
[144.80561829 51.97630310]
[157.60041809 44.14732742]
[172.51812744 45.71642685]
[183.40397644 56.03623199]
[185.76667786 70.84898376]
[178.63142395 84.04323578]
[164.94209290 90.17529297]
[150.34544373 86.71445465]
[135.64355469 89.69009399]
[139.14077759 96.32480621]
[153.46949768 100.76190186]
[167.33180237 93.17163849]
[182.47740173 97.68676758]
[189.92068481 111.62854004]
[185.24566650 126.72555542]
[171.22598267 134.02102661]
[156.17922974 129.18666077]
[149.03240967 115.09062195]
[134.70368958 110.65352631]
[118.07645416 128.35992432]
[95.74052429 130.66546631]
[97.81287384 145.52162170]
[99.88521576 160.37777710]
[115.23822021 166.40023804]
[125.42154694 179.25350952]
[127.74601746 195.39176941]
[121.67411041 210.42291260]
[108.94052887 220.30390930]
[111.35546875 235.10823059]
[113.77040863 249.91255188]
[116.18534088 264.71688843]
[118.60028076 279.52120972]
[133.25317383 283.79385376]
[144.59539795 294.00741577]
[150.37495422 308.13397217]
[149.44429016 323.36868286]
[141.98820496 336.68670654]
[129.48710632 345.44372559]
[114.42310333 347.90100098]
[99.78714752 343.57070923]
[88.48522949 333.31256104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[6 123]
[7 122]
[13 117]
[14 116]
[15 115]
[16 53]
[17 52]
[18 51]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
