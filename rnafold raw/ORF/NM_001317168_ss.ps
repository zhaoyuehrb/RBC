%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:02:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAAGAAGUUAUCAUUGAAAUUAAAUGGUGGCAGACAUGUCCAAGGAAUAUUGCGGGGAUUUGAUCCCUUUAUGAACCUUGUGAUAGAUGAAUGUGUGGAGAUGGCGACUAGUGGACAACAGAACAAUAUUGGAAUGGUGGUAAUACGAGGAAAUAGUAUCAUCAUGUUAGAAGCCUUGGAACGAGUAUAA\
) } def
/len { sequence length } bind def

/coor [
[91.65013123 294.86318970]
[91.97673798 309.85961914]
[87.29125214 324.10906982]
[78.12841034 335.98516846]
[65.53397369 344.13259888]
[50.94533920 347.62139893]
[36.02751160 346.05346680]
[22.48306084 339.60769653]
[11.85780907 329.01977539]
[5.36441660 315.49810791]
[3.74397373 300.58587646]
[7.18240690 285.98272705]
[-3.25283122 296.75796509]
[-13.68806934 307.53320312]
[-24.12330818 318.30844116]
[-34.55854416 329.08370972]
[-44.99378586 339.85894775]
[-55.42902374 350.63418579]
[-65.86425781 361.40942383]
[-76.29949951 372.18466187]
[-74.50722504 387.71917725]
[-83.16277313 400.74282837]
[-98.17926025 405.10623169]
[-112.46635437 398.74911499]
[-119.27812958 384.67312622]
[-115.39827728 369.52450562]
[-102.65873718 360.45596313]
[-87.07473755 361.74942017]
[-76.63950348 350.97418213]
[-66.20426178 340.19894409]
[-55.76902390 329.42370605]
[-45.33378601 318.64846802]
[-34.89854813 307.87322998]
[-24.46331024 297.09799194]
[-14.02807140 286.32272339]
[-3.59283328 275.54748535]
[-3.18455124 269.27557373]
[0.89860201 263.51089478]
[8.10003471 260.39303589]
[15.87592316 247.56590271]
[15.85715008 232.67131042]
[29.62755394 224.88116455]
[37.40344238 212.05401611]
[45.17932892 199.22686768]
[52.85216904 186.33782959]
[60.42146683 173.38769531]
[67.99076843 160.43757629]
[75.56006622 147.48745728]
[83.12936401 134.53732300]
[90.69866180 121.58720398]
[77.84735870 129.32308960]
[66.52129364 139.15773010]
[51.53096008 139.69621277]
[39.52843475 130.69958496]
[35.83993149 116.16015625]
[42.10224915 102.52992249]
[55.53643799 95.85739136]
[70.18120575 99.10370636]
[85.16603851 99.77803040]
[72.33889771 92.00214386]
[59.51175690 84.22624969]
[46.68461227 76.45036316]
[33.85747147 68.67447662]
[21.03033066 60.89858627]
[4.35123396 57.85818481]
[2.65558529 40.98924255]
[18.39587784 34.69007492]
[28.80621910 48.07144547]
[41.63336182 55.84733582]
[54.46050262 63.62322235]
[67.28764343 71.39910889]
[80.11478424 79.17500305]
[92.94192505 86.95088959]
[82.01706696 76.67239380]
[78.75522614 62.03134537]
[84.28360748 48.08727646]
[96.69175720 39.65888214]
[111.69175720 39.65877914]
[124.10002136 48.08700180]
[129.62860107 62.03099442]
[126.36695862 76.67208862]
[115.44192505 86.95088959]
[128.26907349 79.17500305]
[141.09620667 71.39910889]
[148.88636780 57.62870789]
[163.78096008 57.64748383]
[176.60810852 49.87159348]
[189.43524170 42.09570694]
[202.26239014 34.31981659]
[215.08952332 26.54392815]
[227.85394287 18.66549110]
[240.55480957 10.68500900]
[253.25566101 2.70452785]
[265.95654297 -5.27595329]
[278.65737915 -13.25643444]
[279.82476807 -28.61688423]
[289.69763184 -40.20912170]
[304.33023071 -43.72349548]
[318.06207275 -38.01602936]
[330.76293945 -45.99650955]
[343.46377563 -53.97699356]
[343.92874146 -73.09805298]
[355.71929932 -87.96753693]
[373.94082642 -92.70321655]
[391.20220947 -85.57067871]
[403.43563843 -94.25074768]
[415.59909058 -103.02857971]
[422.26181030 -117.37844086]
[437.11010742 -118.55213928]
[449.27355957 -127.32997131]
[455.93630981 -141.67982483]
[470.78460693 -142.85353088]
[482.94805908 -151.63136292]
[495.11151123 -160.40919495]
[507.27496338 -169.18702698]
[505.66641235 -181.59815979]
[509.47003174 -193.44523621]
[517.90417480 -202.49476624]
[529.32043457 -207.06820679]
[541.52551270 -206.35311890]
[552.20263672 -200.54679871]
[564.64123535 -208.93026733]
[577.07977295 -217.31372070]
[584.19903564 -231.44265747]
[599.07727051 -232.13984680]
[601.85205078 -247.69865417]
[614.86340332 -256.66970825]
[630.39202881 -253.73062134]
[639.22497559 -240.62512207]
[636.12188721 -225.12846375]
[622.92376709 -216.43453979]
[607.46075439 -219.70129395]
[601.23120117 -206.17199707]
[585.46325684 -204.87516785]
[573.02465820 -196.49171448]
[560.58612061 -188.10824585]
[560.79071045 -170.45933533]
[550.27508545 -156.08859253]
[533.09094238 -150.85215759]
[516.05279541 -157.02357483]
[503.88934326 -148.24574280]
[491.72589111 -139.46791077]
[479.56243896 -130.69007874]
[473.76971436 -116.96806335]
[458.05139160 -115.16651154]
[445.88793945 -106.38868713]
[440.09521484 -92.66667175]
[424.37692261 -90.86511993]
[412.21347046 -82.08728790]
[408.62475586 -75.61567688]
[399.78396606 -73.26809692]
[401.68188477 -62.25377274]
[399.31597900 -51.27787018]
[392.99145508 -41.93847275]
[383.59277344 -35.61001587]
[372.45996094 -33.24108887]
[361.19778442 -35.21237946]
[351.44427490 -41.27613068]
[338.74340820 -33.29564667]
[326.04254150 -25.31516647]
[325.22677612 -10.46685028]
[315.71157837 1.19184303]
[300.98367310 5.05729914]
[286.63787842 -0.55557144]
[273.93701172 7.42490959]
[261.23614502 15.40539074]
[248.53527832 23.38587189]
[235.83442688 31.36635399]
[231.83845520 37.59474182]
[222.86541748 39.37107086]
[210.03826904 47.14695740]
[197.21113586 54.92284775]
[184.38398743 62.69873428]
[171.55685425 70.47462463]
[164.68417358 83.68884277]
[148.87210083 84.22624969]
[136.04495239 92.00214386]
[123.21781158 99.77803040]
[103.64878845 129.15650940]
[96.07949066 142.10662842]
[88.51019287 155.05674744]
[80.94088745 168.00688171]
[73.37158966 180.95700073]
[65.80229187 193.90711975]
[64.17001343 202.90748596]
[58.00647354 207.00276184]
[50.23058319 219.82991028]
[42.45469666 232.65704346]
[41.91728592 248.46911621]
[28.70306587 255.34179688]
[20.92717552 268.16894531]
[34.17815018 261.13958740]
[49.01356506 258.92364502]
[63.74026108 261.77398682]
[76.67747498 269.36532593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[39 191]
[40 190]
[42 188]
[43 187]
[44 186]
[45 184]
[46 183]
[47 182]
[48 181]
[49 180]
[50 179]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[82 178]
[83 177]
[84 176]
[86 174]
[87 173]
[88 172]
[89 171]
[90 170]
[91 168]
[92 167]
[93 166]
[94 165]
[95 164]
[99 160]
[100 159]
[101 158]
[105 151]
[106 149]
[107 148]
[109 146]
[110 145]
[112 143]
[113 142]
[114 141]
[115 140]
[121 136]
[122 135]
[123 134]
[125 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
