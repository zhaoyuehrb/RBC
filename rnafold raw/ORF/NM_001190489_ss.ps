%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACAGGAGGGUUCGGCUGCCUCUUACUUUUAAUCAGGGAAAUUGACCUAUCCGUGAAGAGGCAGAUAUAA\
) } def
/len { sequence length } bind def

/coor [
[17.45793343 258.84863281]
[7.57693529 257.15451050]
[-1.36315799 252.67147827]
[-12.39901638 262.83068848]
[-23.43487549 272.98992920]
[-34.47073364 283.14913940]
[-33.57206345 298.76089478]
[-42.96007156 311.26684570]
[-58.20202255 314.76211548]
[-72.10113525 307.59634399]
[-78.09468079 293.15295410]
[-73.35267639 278.25167847]
[-60.11416245 269.92846680]
[-44.62995911 272.11328125]
[-33.59409714 261.95407104]
[-22.55824089 251.79483032]
[-11.52238178 241.63562012]
[-16.10068512 221.56559753]
[-8.24192142 202.40563965]
[9.31897545 191.19816589]
[30.25324631 192.15086365]
[38.45746613 179.59336853]
[46.66168976 167.03587341]
[54.86591339 154.47836304]
[63.07013321 141.92086792]
[71.27436066 129.36337280]
[79.47857666 116.80587769]
[87.68280029 104.24838257]
[72.84612274 106.45584869]
[59.05443954 100.55758667]
[50.40205002 88.30458069]
[49.45755005 73.33434296]
[56.50133514 60.09104156]
[69.44234467 52.50616455]
[84.43881226 52.83140564]
[97.03880310 60.97021866]
[103.50179291 74.50645447]
[101.90927887 89.42133331]
[114.11701202 80.70517731]
[126.32473755 71.98902893]
[133.06002808 57.67307281]
[147.91406250 56.57454300]
[160.12179565 47.85839081]
[172.32952881 39.14223862]
[170.77058411 23.86266899]
[177.07490540 9.85727692]
[189.54669189 0.89344412]
[204.83106995 -0.61760485]
[218.81663513 5.73059511]
[227.74131775 18.23040962]
[229.20445251 33.51945114]
[222.81245422 47.48504639]
[210.28472900 56.37051773]
[194.99116516 57.78572083]
[181.04568481 51.34996796]
[168.83795166 60.06612015]
[156.63021851 68.78227234]
[150.76811218 82.47478485]
[135.04089355 84.19675446]
[122.83316040 92.91291046]
[110.62542725 101.62905884]
[100.24030304 112.45260620]
[92.03607941 125.01010132]
[83.83185577 137.56759644]
[75.62763214 150.12509155]
[67.42340851 162.68258667]
[59.21918869 175.24008179]
[51.01496506 187.79759216]
[42.81074142 200.35508728]
[48.74299240 208.67402649]
[51.99259567 218.33558655]
[52.29204178 228.50054932]
[49.62942123 238.29026794]
[44.24827194 246.86256409]
[36.62536240 253.48422241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[38 61]
[39 60]
[40 59]
[42 57]
[43 56]
[44 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
