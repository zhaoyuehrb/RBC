%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sat Sep 12 01:56:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACACCAGGGUUUAGCUGUCUCUUACUUUCAACCAGUGAAAUUGACCUACCUAUGAAGAGGCGGGUAUAA\
) } def
/len { sequence length } bind def

/coor [
[93.59632874 165.07077026]
[81.67458344 155.96736145]
[79.30708313 141.15386963]
[68.27122498 151.31309509]
[57.23536682 161.47232056]
[46.19950485 171.63153076]
[47.09817505 187.24327087]
[37.71017075 199.74925232]
[22.46821785 203.24452209]
[8.56910324 196.07872009]
[2.57556248 181.63533020]
[7.31756306 166.73406982]
[20.55607796 158.41087341]
[36.04028320 160.59567261]
[47.07614136 150.43644714]
[58.11199951 140.27723694]
[69.14785767 130.11801147]
[78.84234619 118.67174530]
[87.04656982 106.11425018]
[88.00847626 92.16554260]
[100.39593506 85.68152618]
[108.60015869 73.12403107]
[116.80437469 60.56653214]
[125.00859833 48.00903702]
[133.21282959 35.45153809]
[141.41703796 22.89404297]
[149.62126160 10.33654499]
[157.82548523 -2.22095203]
[166.02970886 -14.77844906]
[156.14401245 -38.18092728]
[164.50622559 -61.96515656]
[186.52212524 -73.84812164]
[187.76081848 -88.79689026]
[188.99951172 -103.74565887]
[190.23820496 -118.69442749]
[191.47688293 -133.64318848]
[182.24722290 -146.76541138]
[186.89009094 -162.12194824]
[201.84388733 -167.93258667]
[215.63734436 -159.73988342]
[217.68928528 -143.82859802]
[206.42565918 -132.40449524]
[205.18696594 -117.45573425]
[203.94827271 -102.50696564]
[202.70957947 -87.55819702]
[201.47090149 -72.60943604]
[208.26205444 -69.72982788]
[214.29743958 -65.46894836]
[219.29966736 -60.01665115]
[223.03765869 -53.61767960]
[225.33715820 -46.56067657]
[226.08895874 -39.16515350]
[225.25404358 -31.76704407]
[222.86555481 -24.70342827]
[219.02755737 -18.29717827]
[213.91047668 -12.84220409]
[207.74356079 -8.58996964]
[200.80456543 -5.73790026]
[193.40731812 -4.42022085]
[185.88743591 -4.70164776]
[178.58720398 -6.57422686]
[170.38298035 5.98327017]
[162.17875671 18.54076767]
[153.97454834 31.09826469]
[145.77032471 43.65576172]
[137.56610107 56.21326065]
[129.36187744 68.77075958]
[121.15765381 81.32825470]
[112.95343018 93.88574982]
[111.99152374 107.83445740]
[99.60406494 114.31847382]
[91.39984131 126.87596893]
[106.39949036 126.77237701]
[117.34180450 137.03228760]
[118.20299530 152.00753784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[18 72]
[19 71]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
