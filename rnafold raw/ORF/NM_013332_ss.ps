%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:04:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCAUGUGUUGAACCUCUACCUGUUAGGUGUGGUACUGACCCUACUCUCCAUCUUCGUUAGAGUGAUGGAGUCCCUAGAGGGCUUACUAGAGAGCCCAUCGCCUGGGACCUCCUGGACCACCAGAAGCCAACUAGCCAACACAGAGCCCACCAAGGGCCUUCCAGACCAUCCAUCCAGAAGCAUGUGA\
) } def
/len { sequence length } bind def

/coor [
[42.14354706 519.95452881]
[28.90756416 528.05316162]
[13.44185352 526.79168701]
[1.69329655 516.65502930]
[-1.82054651 501.54104614]
[4.25146866 487.26135254]
[17.57452774 479.30673218]
[18.79400635 464.35638428]
[20.01348495 449.40603638]
[21.23296356 434.45568848]
[22.45244217 419.50534058]
[23.67192268 404.55499268]
[24.89140129 389.60467529]
[26.11087990 374.65432739]
[15.48552418 385.24212646]
[1.07722688 389.41357422]
[-13.56121922 386.14007568]
[-24.82027245 376.22875977]
[-29.92367935 362.12362671]
[-27.61304474 347.30264282]
[-18.45812225 335.42044067]
[-4.71633005 329.40686035]
[10.22388554 330.74475098]
[22.67857170 339.10421753]
[29.57638359 352.42279053]
[32.96518707 337.81060791]
[36.35398865 323.19842529]
[26.47016907 312.08770752]
[25.00671959 297.11032104]
[32.73345184 283.98968506]
[46.86781693 277.86383057]
[50.25661850 263.25164795]
[48.70279312 256.01446533]
[53.82133102 248.43013000]
[57.44752502 233.87504578]
[61.07372284 219.31994629]
[64.69992065 204.76484680]
[68.32611084 190.20976257]
[66.89029694 182.94825745]
[72.13159943 175.44822693]
[75.99423218 160.95408630]
[79.85685730 146.45994568]
[71.81163788 142.55328369]
[64.51900482 137.25428772]
[58.21967316 130.70721436]
[53.12684631 123.09778595]
[49.41906357 114.64811707]
[47.23401260 105.61017609]
[46.66357422 96.25827026]
[47.75022125 86.88079071]
[50.48495483 77.77123260]
[54.80680466 69.21909332]
[41.50320816 62.28985596]
[28.19961166 55.36061859]
[14.89601612 48.43138123]
[1.59241998 41.50214386]
[-11.71117592 34.57290649]
[-25.07072639 27.75217247]
[-38.48534775 21.04039574]
[-51.89996719 14.32861900]
[-68.22872925 15.84640789]
[-77.48545837 2.30960703]
[-70.14762878 -12.35628223]
[-53.76377106 -13.06425095]
[-45.18819046 0.91399848]
[-31.77357101 7.62577534]
[-18.35894966 14.33755207]
[-10.95908642 14.51915455]
[-4.78193903 21.26931000]
[8.52165699 28.19854736]
[21.82525253 35.12778473]
[35.12884903 42.05702209]
[48.43244553 48.98625946]
[61.73604202 55.91549301]
[74.23345947 47.62004471]
[73.01398468 32.66970062]
[71.79450226 17.71935272]
[70.57502747 2.76900506]
[69.35554504 -12.18134212]
[54.46043396 -23.86905479]
[52.85007858 -42.41348648]
[65.08118439 -56.01917648]
[63.37572098 -70.92190552]
[61.54902649 -85.81026459]
[59.60121918 -100.68326569]
[57.65341568 -115.55625916]
[55.70560837 -130.42926025]
[53.75780106 -145.30226135]
[51.80999756 -160.17524719]
[39.12700653 -169.60484314]
[36.90919495 -185.25274658]
[46.47235870 -197.83534241]
[62.14283371 -199.88758850]
[74.62361145 -190.19192505]
[76.51006317 -174.50062561]
[66.68299103 -162.12306213]
[68.63079834 -147.25006104]
[70.57860565 -132.37705994]
[72.52641296 -117.50406647]
[74.47422028 -102.63107300]
[76.42202759 -87.75807190]
[80.41393280 -81.52464294]
[78.27845001 -72.62737274]
[79.98390961 -57.72463608]
[90.25718689 -52.72162628]
[96.90274811 -43.27902603]
[98.17096710 -31.68149757]
[93.63082123 -20.80438232]
[84.30589294 -13.40082073]
[85.52537537 1.54952621]
[86.74485016 16.49987221]
[87.96433258 31.45022011]
[89.18380737 46.40056610]
[99.46737671 41.32762527]
[111.27935791 38.35368347]
[124.16985321 37.87118149]
[137.59663391 40.17305374]
[148.83052063 30.23324585]
[160.06440735 20.29343796]
[171.29829407 10.35362911]
[175.98515320 -5.36150312]
[191.99877930 -8.89639378]
[202.86573792 3.38534999]
[197.40702820 18.84932327]
[181.23809814 21.58751488]
[170.00421143 31.52732468]
[158.77032471 41.46713257]
[147.53643799 51.40694046]
[151.21572876 57.94244385]
[158.57432556 71.01344299]
[162.25361633 77.54895020]
[176.57861328 73.09985352]
[183.71363831 58.99782944]
[198.75633240 54.15086365]
[212.78211975 61.43457794]
[217.46977234 76.52767181]
[210.03817749 90.47567749]
[194.89637756 95.00349426]
[181.02770996 87.42485046]
[166.70271301 91.87394714]
[166.51960754 99.37171173]
[181.51513672 99.73792267]
[196.51066589 100.10436249]
[196.14398193 115.09988403]
[181.14892578 114.73345184]
[166.15339661 114.36724091]
[165.97029114 121.86500549]
[180.06103516 127.00804901]
[189.21099854 127.01232147]
[194.33813477 132.35118103]
[208.34329224 137.72290039]
[222.34846497 143.09461975]
[236.35362244 148.46635437]
[251.53411865 143.27674866]
[264.97833252 152.03079224]
[266.37298584 168.01310730]
[254.64822388 178.96343994]
[238.79829407 176.48162842]
[230.98190308 162.47151184]
[216.97674561 157.09979248]
[202.97157288 151.72807312]
[188.96641541 146.35635376]
[174.91798401 141.09880066]
[160.82723999 135.95574951]
[138.92831421 150.78172302]
[115.34887695 155.21875000]
[94.35099792 150.32258606]
[90.48837280 164.81672668]
[86.62574005 179.31086731]
[82.88120270 193.83595276]
[79.25501251 208.39105225]
[75.62881470 222.94613647]
[72.00261688 237.50123596]
[68.37641907 252.05632019]
[64.86880493 266.64044189]
[61.48000336 281.25262451]
[71.47518921 292.97451782]
[72.63802338 308.15676880]
[64.73153687 320.96112061]
[50.96617508 326.58721924]
[47.57737350 341.19940186]
[44.18857193 355.81161499]
[47.22621918 367.29431152]
[41.06122589 375.87377930]
[39.84174728 390.82412720]
[38.62226868 405.77447510]
[37.40279007 420.72482300]
[36.18331146 435.67517090]
[34.96383286 450.62551880]
[33.74435425 465.57586670]
[32.52487564 480.52621460]
[44.38270187 490.53479004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 191]
[8 190]
[9 189]
[10 188]
[11 187]
[12 186]
[13 185]
[14 184]
[25 182]
[26 181]
[27 180]
[31 176]
[32 175]
[34 174]
[35 173]
[36 172]
[37 171]
[38 170]
[40 169]
[41 168]
[42 167]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 67]
[59 66]
[60 65]
[75 113]
[76 112]
[77 111]
[78 110]
[79 109]
[82 104]
[83 103]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[117 128]
[118 127]
[119 126]
[120 125]
[131 140]
[132 139]
[147 164]
[148 163]
[150 162]
[151 161]
[152 160]
[153 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
