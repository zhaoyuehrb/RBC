%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:05:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCUUUGAUAACAACUACCAUGGUGGCCAGGGCUAUGCCAAAGGAGGCCUGGGCUGCAGCUAUGGCUGUGGUCUUAGCGGCUAUGGCUAUGCCUGCUACUGCCCAUGGUGUUAUGAAAGAUCUUGGUUUUCUGGCUGCUUCUGA\
) } def
/len { sequence length } bind def

/coor [
[199.46656799 393.58526611]
[203.09991455 387.43386841]
[208.08192444 382.28771973]
[201.90341187 368.61929321]
[189.61058044 360.20886230]
[190.97673035 344.44674683]
[184.79820251 330.77832031]
[178.61968994 317.10989380]
[172.44116211 303.44146729]
[160.14834595 295.03100586]
[161.51448059 279.26889038]
[155.33596802 265.60046387]
[149.15744019 251.93203735]
[142.97892761 238.26361084]
[136.80039978 224.59518433]
[134.15196228 223.49137878]
[131.79760742 221.23539734]
[130.19238281 217.93997192]
[129.73965454 213.88534546]
[130.73281860 209.49543762]
[125.73572540 195.35226440]
[120.73863220 181.20910645]
[115.74153137 167.06594849]
[110.74443817 152.92279053]
[105.74733734 138.77961731]
[100.75024414 124.63645935]
[77.32450867 115.87818146]
[71.46896362 88.62181854]
[56.95297241 84.84214783]
[42.43697739 81.06247711]
[27.92098427 77.28280640]
[12.61647320 81.29310608]
[2.24950266 70.59847260]
[-12.26649189 66.81880188]
[-26.78248596 63.03912735]
[-41.29848099 59.25945663]
[-55.81447220 55.47978592]
[-64.93812561 61.56021118]
[-75.68180084 61.57557297]
[-84.45504761 55.76448441]
[-88.46048737 46.27216339]
[-102.80299377 41.87982178]
[-119.71834564 43.02307129]
[-125.49955750 27.08525658]
[-111.78499603 17.11795235]
[-98.41065216 27.53732109]
[-84.06814575 31.92966080]
[-65.65405273 26.16376305]
[-52.03480148 40.96379089]
[-37.51881027 44.74346161]
[-23.00281525 48.52313232]
[-8.48682022 52.30280304]
[6.02917385 56.08247757]
[20.29540443 51.80183029]
[31.70065498 62.76681137]
[46.21664810 66.54647827]
[60.73264313 70.32614899]
[75.24863434 74.10581970]
[88.02157593 66.24121094]
[91.18176270 51.57788467]
[94.34194946 36.91455460]
[97.50214386 22.25122833]
[92.84591675 7.13070774]
[103.09092712 -3.68081474]
[106.25111389 -18.34414291]
[109.41130066 -33.00747299]
[112.57149506 -47.67079926]
[115.73168182 -62.33412933]
[118.89186859 -76.99745941]
[122.05205536 -91.66078949]
[125.21224976 -106.32411194]
[128.37243652 -120.98744202]
[131.53262329 -135.65077209]
[134.69281006 -150.31410217]
[137.85299683 -164.97743225]
[141.01319885 -179.64076233]
[133.55676270 -193.84573364]
[140.14527893 -208.47346497]
[155.72460938 -212.30284119]
[168.34361267 -202.39627075]
[168.32208252 -186.35322571]
[155.67652893 -176.48057556]
[152.51632690 -161.81724548]
[149.35614014 -147.15391541]
[146.19595337 -132.49058533]
[143.03576660 -117.82725525]
[139.87557983 -103.16392517]
[136.71539307 -88.50059509]
[133.55520630 -73.83726501]
[130.39500427 -59.17393875]
[127.23481750 -44.51061249]
[124.07463074 -29.84728241]
[120.91444397 -15.18395424]
[117.75425720 -0.52062559]
[122.63652039 13.55107498]
[112.16547394 25.41141701]
[109.00527954 40.07474518]
[105.84509277 54.73807526]
[102.68490601 69.40140533]
[112.47391510 72.88210297]
[120.27397156 79.28903961]
[125.28642273 87.70867920]
[127.08732605 97.03996277]
[125.65802002 106.13667297]
[121.36493683 113.94788361]
[114.89340210 119.63936615]
[119.89050293 133.78253174]
[124.88759613 147.92568970]
[129.88468933 162.06884766]
[134.88179016 176.21200562]
[139.87889099 190.35517883]
[144.87599182 204.49833679]
[150.46882629 218.41667175]
[156.64735413 232.08509827]
[162.82586670 245.75352478]
[169.00439453 259.42196655]
[175.18290710 273.09039307]
[187.91766357 282.47848511]
[186.10958862 297.26293945]
[192.28811646 310.93136597]
[198.46662903 324.59979248]
[204.64515686 338.26821899]
[217.37991333 347.65634155]
[215.57183838 362.44079590]
[221.75035095 376.10922241]
[245.10321045 381.90832520]
[256.77154541 402.66857910]
[249.73269653 425.16009521]
[258.39422607 437.40664673]
[267.05572510 449.65319824]
[275.71722412 461.89978027]
[290.83068848 468.26495361]
[292.60623169 484.56771851]
[279.21737671 494.03713989]
[264.43737793 486.93191528]
[263.47067261 470.56127930]
[254.80915833 458.31472778]
[246.14765930 446.06817627]
[237.48614502 433.82159424]
[230.74589539 435.56011963]
[223.76770020 435.67703247]
[216.93717957 434.15734863]
[210.63385010 431.07669067]
[205.20996094 426.59765625]
[200.97080994 420.96133423]
[198.15762329 414.47415161]
[196.93377686 407.49133301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[6 122]
[7 121]
[8 120]
[9 119]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[25 107]
[26 106]
[28 58]
[29 57]
[30 56]
[31 55]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[41 47]
[42 46]
[59 99]
[60 98]
[61 97]
[62 96]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[128 139]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
