%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:03:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUUCUCACAAGACUUUCAGGAUUAAGCGAUUCCUGGCCAAGAAACAAAAGCAAAAUCGUCCCAUUCCCCAGUGGAUUCGGAUGAAAACUGGAAAUAAAAUCAGGUACAACUCCAAAAGGAGACAUUGGAGAAGAACCAAGCUGGGUCUAUAA\
) } def
/len { sequence length } bind def

/coor [
[109.57479095 292.06912231]
[123.22961426 285.86059570]
[138.17153931 287.17932129]
[150.52899170 295.68481445]
[146.09400940 281.35546875]
[141.65902710 267.02609253]
[137.22404480 252.69671631]
[132.78906250 238.36734009]
[128.35408020 224.03796387]
[123.91909790 209.70858765]
[118.90908813 204.21789551]
[119.54183197 195.04795837]
[115.39444733 180.63272095]
[111.24706268 166.21748352]
[82.46823883 164.83740234]
[56.91547012 151.52644348]
[39.29078674 128.73399353]
[25.10096359 133.59701538]
[10.91114235 138.46002197]
[-3.17853498 143.60600281]
[-17.16242790 149.03285217]
[-31.14631844 154.45971680]
[-45.13021088 159.88656616]
[-59.11410141 165.31341553]
[-73.09799194 170.74028015]
[-76.07740021 185.87721252]
[-86.78393555 196.98457336]
[-101.80119324 200.51805115]
[-116.33721924 195.35012817]
[-125.75362396 183.12985229]
[-127.04565430 167.75668335]
[-119.80104065 154.13615417]
[-106.33151245 146.61450195]
[-90.93513489 147.59187317]
[-78.52484894 156.75637817]
[-64.54096222 151.32952881]
[-50.55706787 145.90267944]
[-36.57317352 140.47581482]
[-22.58928299 135.04896545]
[-8.60539055 129.62210083]
[-5.87611103 125.64093781]
[-0.59235501 123.36356354]
[6.04812193 124.27021027]
[20.23794365 119.40718842]
[34.42776489 114.54416656]
[33.30490494 107.93820190]
[32.84584808 101.25322723]
[33.05516052 94.55577850]
[33.93076706 87.91251373]
[35.46394730 81.38955688]
[37.63944244 75.05181885]
[40.43560028 68.96239471]
[43.82458878 63.18187714]
[47.77268219 57.76780701]
[52.24058533 52.77406311]
[57.18382645 48.25035095]
[62.55321121 44.24169159]
[68.29529572 40.78798676]
[74.35293579 37.92360687]
[80.66583252 35.67705917]
[77.97903442 20.91964912]
[75.29224396 6.16223907]
[72.60545349 -8.59517097]
[69.91866302 -23.35258102]
[67.23187256 -38.10999298]
[53.40633392 -44.90415573]
[46.31530380 -58.37897110]
[48.49267197 -73.26934052]
[58.89605331 -83.89514160]
[56.20926285 -98.65254974]
[53.52247238 -113.40995789]
[41.20109177 -123.68434906]
[41.69571686 -139.71977234]
[54.62691498 -149.21522522]
[70.07497406 -144.88661194]
[76.18946838 -130.05447388]
[68.27988434 -116.09674835]
[70.96667480 -101.33934021]
[73.65346527 -86.58193207]
[87.13430023 -80.30458069]
[94.41999054 -67.13709259]
[92.53310394 -52.02772522]
[81.98928070 -40.79678345]
[84.67607880 -26.03937149]
[87.36286926 -11.28196239]
[90.04965973 3.47544813]
[92.73645020 18.23285866]
[95.42324066 32.99026871]
[108.77269745 33.40953064]
[121.77526093 36.46191025]
[133.91679382 42.02671051]
[144.71717834 49.88388824]
[155.89109802 39.87670517]
[167.06500244 29.86952400]
[178.23892212 19.86234093]
[176.52421570 4.44029760]
[184.23107910 -9.02758503]
[198.39605713 -15.36263084]
[213.57244873 -12.12888527]
[223.92459106 -0.56979042]
[225.47189331 14.86994648]
[217.61938477 28.25343132]
[203.38650513 34.43444061]
[188.24609375 31.03625298]
[177.07218933 41.04343414]
[165.89826965 51.05061722]
[154.72436523 61.05780029]
[157.74296570 65.69255829]
[160.36999512 70.55997467]
[162.58761597 75.62703705]
[164.38079834 80.85938263]
[165.73739624 86.22152710]
[166.64817810 91.67711639]
[167.10700989 97.18914032]
[182.07023621 98.23881531]
[197.03346252 99.28849030]
[211.99668884 100.33816528]
[226.49263000 92.67005920]
[240.23559570 101.61783600]
[239.08801270 117.97678375]
[224.23040771 124.91822052]
[210.94700623 115.30139160]
[195.98377991 114.25171661]
[181.02055359 113.20204163]
[166.05732727 112.15236664]
[161.01953125 128.06898499]
[152.21176147 142.25141907]
[140.17819214 153.82344055]
[125.66230774 162.07009888]
[129.80969238 176.48533630]
[133.95707703 190.90057373]
[138.24847412 205.27360535]
[142.68345642 219.60298157]
[147.11843872 233.93235779]
[151.55342102 248.26173401]
[155.98840332 262.59109497]
[160.42338562 276.92047119]
[164.85836792 291.24984741]
[170.70245361 305.06457520]
[177.89717102 318.22650146]
[185.09188843 331.38839722]
[200.32661438 335.59301758]
[208.05329895 349.37973022]
[203.68785095 364.56915283]
[189.82020569 372.14965820]
[174.67779541 367.62387085]
[167.24433899 353.67684937]
[171.92997742 338.58312988]
[164.73526001 325.42120361]
[157.54054260 312.25930786]
[155.03919983 327.04925537]
[145.58047485 338.69110107]
[131.61589050 344.16744995]
[116.76481628 342.05892944]
[104.87641144 332.91204834]
[99.03192139 319.09747314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[12 131]
[13 130]
[14 129]
[17 45]
[18 44]
[19 43]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[69 79]
[70 78]
[71 77]
[92 107]
[93 106]
[94 105]
[95 104]
[114 125]
[115 124]
[116 123]
[117 122]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
