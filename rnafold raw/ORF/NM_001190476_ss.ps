%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACACAAGGGUUCAGCUGUCUCUUACUUUCAGUCAGUGAAAUUGACCUAUCCAUGAAGAGGCAGUAUAAACAAAUAAGAUGA\
) } def
/len { sequence length } bind def

/coor [
[102.44544220 140.99530029]
[98.93484497 126.41189575]
[99.57798767 111.43052673]
[89.75508118 122.76676941]
[79.93216705 134.10301208]
[70.10926056 145.43925476]
[72.75850677 160.85078430]
[64.83699799 174.33351135]
[50.08501053 179.52127075]
[35.46799088 173.96458435]
[27.88764572 160.28715515]
[30.92318344 144.94702148]
[43.14131546 135.18734741]
[58.77301407 135.61634827]
[68.59592438 124.28009796]
[78.41883850 112.94385529]
[88.24174500 101.60761261]
[88.29202271 97.12271881]
[90.01863861 92.90677643]
[93.22658539 89.57314301]
[94.29667664 74.61136627]
[95.36676025 59.64958191]
[96.43685150 44.68780136]
[97.50693512 29.72601891]
[98.57702637 14.76423740]
[99.64710999 -0.19754454]
[100.71720123 -15.15932655]
[101.78728485 -30.12110710]
[102.85737610 -45.08288956]
[87.75008392 -51.55647659]
[75.73319244 -62.73246002]
[68.20573425 -77.28642273]
[66.03620911 -93.50205994]
[69.46240997 -109.47358704]
[78.06547546 -123.32968903]
[90.82102203 -133.45281982]
[106.22109222 -138.66796875]
[106.22109222 -153.66796875]
[106.22109222 -168.66796875]
[106.22109222 -183.66796875]
[106.22109222 -198.66796875]
[106.22109222 -213.66796875]
[100.17475128 -229.50709534]
[113.72109222 -239.70185852]
[127.26743317 -229.50709534]
[121.22109222 -213.66796875]
[121.22109222 -198.66796875]
[121.22109222 -183.66796875]
[121.22109222 -168.66796875]
[121.22109222 -153.66796875]
[121.22109222 -138.66796875]
[134.31079102 -134.62689209]
[145.71453857 -127.00509644]
[154.47628784 -116.42984772]
[159.85818481 -103.77649689]
[161.40261841 -90.09603882]
[158.97122192 -76.52779388]
[152.75706482 -64.20452118]
[143.26950073 -54.15789032]
[131.29234314 -47.23206329]
[117.81916046 -44.01280212]
[116.74906921 -29.05101967]
[115.67897797 -14.08923817]
[114.60889435 0.87254322]
[113.53880310 15.83432484]
[112.46871948 30.79610634]
[111.39862823 45.75788879]
[110.32854462 60.71966934]
[109.25845337 75.68144989]
[108.18836975 90.64323425]
[118.33078766 79.59193420]
[131.12588501 71.76343536]
[145.58287048 67.76395416]
[160.58221436 67.90319061]
[174.96246338 72.17037201]
[187.61001587 80.23505402]
[197.54553223 91.47274017]
[203.99961853 105.01322174]
[206.47250366 119.80798340]
[204.77270508 134.71136475]
[199.03181458 148.56929016]
[189.69442749 160.30867004]
[177.48356628 169.02044678]
[163.34481812 174.02999878]
[148.37301636 174.94943237]
[133.72753906 171.70751953]
[120.54248047 164.55531311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
