%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:58:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUUCUCACAAGACUUUCACCAUUAAGCGAUUCCUGGCCAAGAAACAAAAGCAAAAUCGUCCCAUCCCCCAGUGGAUUCAGAUGAAACCUGGUAGUAAAAUCAGGUACAACUCCAAAAGGAGGCAUUGGAGAAGAACCAAGCUGGGUCUAUAA\
) } def
/len { sequence length } bind def

/coor [
[105.04317474 276.31838989]
[118.69799805 270.10986328]
[133.63992310 271.42858887]
[145.99739075 279.93408203]
[141.56240845 265.60470581]
[137.12741089 251.27534485]
[132.69242859 236.94596863]
[128.25744629 222.61660767]
[123.82246399 208.28723145]
[119.38748169 193.95785522]
[114.37747955 188.46716309]
[115.01021576 179.29722595]
[110.86283112 164.88198853]
[106.71545410 150.46673584]
[83.20914459 148.06304932]
[63.31965256 135.30639648]
[51.33124161 114.94461060]
[36.49984741 117.18730927]
[21.66844940 119.43001556]
[6.83705473 121.67271423]
[4.75923920 136.62472534]
[-1.44133651 150.37155151]
[-11.25437069 161.80262756]
[-23.87810516 169.99710083]
[-38.28482819 174.29808044]
[-53.30453491 174.36515808]
[-67.71995544 170.20146179]
[-80.36519623 162.15263367]
[-90.22005463 150.87818909]
[-96.49229431 137.29745483]
[-111.32369232 139.54016113]
[-118.34512329 153.37776184]
[-132.17442322 160.41552734]
[-147.49394226 157.94729614]
[-158.41299438 146.92214966]
[-160.73300171 131.57949829]
[-153.56187439 117.81887817]
[-139.65704346 110.93154907]
[-124.36521149 113.56581879]
[-113.56639099 124.70876312]
[-98.73499298 122.46606445]
[-96.75852966 107.63801575]
[-90.67774200 93.95389557]
[-80.97760773 82.52615356]
[-68.43773651 74.28646851]
[-54.06970215 69.90973663]
[-39.03543472 69.75885010]
[-24.55326271 73.85456848]
[-11.79918003 81.87319946]
[-1.81136048 93.17212677]
[4.59435415 106.84131622]
[19.42574883 104.59861755]
[34.25714493 102.35591888]
[49.08853912 100.11321259]
[50.15745163 89.62166595]
[53.36496735 79.57543182]
[58.57346344 70.40554810]
[65.55945587 62.50548553]
[74.02320099 56.21421051]
[83.60153961 51.80166245]
[80.91474152 37.04425049]
[78.22795105 22.28684044]
[75.54116058 7.52943087]
[72.85437012 -7.22797918]
[58.30281067 -16.88898849]
[55.27244949 -33.74840164]
[65.15254211 -47.32683182]
[62.17101288 -62.02753067]
[59.18947983 -76.72822571]
[56.20795059 -91.42892456]
[42.89750671 -99.94993591]
[39.59252548 -115.40479279]
[48.25379181 -128.62440491]
[63.74272919 -131.76580811]
[76.87002563 -122.96525574]
[79.84748840 -107.44396973]
[70.90864563 -94.41045380]
[73.89017487 -79.70975494]
[76.87171173 -65.00906372]
[79.85324097 -50.30836487]
[91.50998688 -44.74176025]
[97.91249847 -33.29847717]
[96.51711273 -20.06427574]
[87.61178589 -9.91477013]
[90.29857635 4.84263992]
[92.98536682 19.60004997]
[95.67215729 34.35746002]
[98.35894775 49.11487198]
[116.50560760 51.83824539]
[132.50807190 60.81818008]
[143.68197632 50.81099701]
[154.85589600 40.80381393]
[166.02980042 30.79663277]
[177.20372009 20.78945160]
[188.37762451 10.78226852]
[199.55154419 0.77508569]
[200.17041016 -15.01708126]
[211.83132935 -25.68472481]
[227.61607361 -24.89892006]
[238.15983582 -13.12587070]
[237.20718384 2.64968014]
[225.32331848 13.06837940]
[209.55871582 11.94899750]
[198.38481140 21.95618057]
[187.21089172 31.96336174]
[176.03698730 41.97054291]
[164.86306763 51.97772598]
[153.68916321 61.98490906]
[142.51525879 71.99209595]
[145.12117004 76.41886902]
[147.26774597 81.08571625]
[148.93310547 85.94510651]
[150.10032654 90.94758606]
[150.75752258 96.04222107]
[165.72074890 97.09189606]
[180.68397522 98.14157104]
[195.64720154 99.19124603]
[210.14314270 91.52313995]
[223.88610840 100.47091675]
[222.73852539 116.82986450]
[207.88092041 123.77130127]
[194.59751892 114.15447235]
[179.63429260 113.10479736]
[164.67106628 112.05512238]
[149.70783997 111.00544739]
[145.86273193 122.10427094]
[139.57641602 132.02650452]
[131.18348694 140.24400330]
[121.13069153 146.31936646]
[125.27807617 160.73460388]
[129.42546082 175.14984131]
[133.71685791 189.52287292]
[138.15184021 203.85224915]
[142.58682251 218.18162537]
[147.02180481 232.51098633]
[151.45678711 246.84036255]
[155.89176941 261.16973877]
[160.32675171 275.49911499]
[166.17083740 289.31384277]
[173.36555481 302.47573853]
[180.56027222 315.63766479]
[195.79499817 319.84228516]
[203.52169800 333.62899780]
[199.15623474 348.81842041]
[185.28858948 356.39892578]
[170.14617920 351.87313843]
[162.71272278 337.92611694]
[167.39836121 322.83239746]
[160.20364380 309.67047119]
[153.00892639 296.50857544]
[150.50758362 311.29852295]
[141.04885864 322.94036865]
[127.08426666 328.41671753]
[112.23320770 326.30819702]
[100.34479523 317.16128540]
[94.50030518 303.34674072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[12 131]
[13 130]
[14 129]
[17 54]
[18 53]
[19 52]
[20 51]
[30 41]
[31 40]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[67 80]
[68 79]
[69 78]
[70 77]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[114 125]
[115 124]
[116 123]
[117 122]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
