%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGACAAACCAGACAUGGGGGAAAUCGCCAGCUUCGAUAAGGCCAAGCUGAAGAAAACGGAGACGCAGGAGAAGAACACCCUGCCGACCAAAGAGACCAUUGAGCAGGAGAAGCGGAGUGAAAUUUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[93.10845184 252.59939575]
[101.97236633 264.70025635]
[105.97458649 279.15649414]
[104.59600830 294.09301758]
[98.01543427 307.57247925]
[87.08640289 317.84652710]
[73.22647095 323.58258057]
[58.23334503 324.03662109]
[44.05171585 319.14978027]
[32.52101517 309.55587769]
[25.13683891 296.49929810]
[22.85695457 281.67358398]
[25.97805023 266.99929810]
[15.12928867 277.35809326]
[4.28052616 287.71685791]
[0.19315131 303.59848022]
[-15.67487526 307.73825073]
[-26.99988747 295.87756348]
[-22.13168526 280.21765137]
[-6.07825565 276.86810303]
[4.77050638 266.50933838]
[15.61926842 256.15054321]
[24.51993179 244.07667542]
[31.20600700 230.64923096]
[37.89208221 217.22178650]
[44.57815933 203.79432678]
[51.26423264 190.36688232]
[57.95030975 176.93943787]
[64.32445526 163.36112976]
[70.38327026 149.63922119]
[76.44208527 135.91731262]
[82.50090027 122.19541168]
[88.40082550 108.40443420]
[86.76640320 94.51846313]
[97.74098206 85.85530853]
[103.48123169 71.99711609]
[109.22148132 58.13892365]
[114.96173859 44.28073120]
[120.70198822 30.42253876]
[111.84280396 20.89064598]
[107.29290771 8.74893951]
[107.70319366 -4.16381407]
[112.97625732 -15.90654278]
[122.28639984 -24.72764969]
[134.20870972 -29.32627487]
[146.93708801 -29.04405785]
[153.31123352 -42.62236023]
[159.52813721 -56.27337265]
[165.58694458 -69.99528503]
[171.64576721 -83.71719360]
[160.46319580 -92.25896454]
[151.49024963 -103.08837891]
[145.18284607 -115.64961243]
[141.86019897 -129.29902649]
[141.68872070 -143.33810425]
[144.67361450 -157.04919434]
[150.65887451 -169.73222351]
[159.33534241 -180.74041748]
[170.25675964 -189.51327515]
[182.86265564 -195.60516357]
[196.50714111 -198.70787048]
[210.49200439 -198.66625977]
[224.10243225 -195.48600769]
[230.78851318 -208.91345215]
[223.50679016 -220.67639160]
[223.01556396 -234.39344788]
[229.33650208 -246.45483398]
[240.71263123 -253.73974609]
[254.09539795 -254.42370605]
[261.08984375 -267.69314575]
[268.08425903 -280.96255493]
[275.07870483 -294.23199463]
[282.07315063 -307.50143433]
[273.81964111 -320.45425415]
[273.16433716 -335.79916382]
[280.28350830 -349.40844727]
[293.26211548 -357.62130737]
[308.60900879 -358.22851562]
[322.19592285 -351.06674194]
[330.36804199 -338.06243896]
[330.92715454 -322.71371460]
[323.72280884 -309.14932251]
[310.69296265 -301.01797485]
[295.34259033 -300.50698853]
[288.34814453 -287.23757935]
[281.35369873 -273.96813965]
[274.35925293 -260.69869995]
[267.36483765 -247.42926025]
[275.07968140 -232.98599243]
[272.67340088 -216.62173462]
[260.89385986 -204.77575684]
[244.21595764 -202.22737122]
[237.52989197 -188.79992676]
[249.64826965 -178.36752319]
[258.69180298 -165.16729736]
[264.05102539 -150.07917786]
[265.36227417 -134.11062622]
[262.53240967 -118.32938385]
[255.74533081 -103.79206848]
[245.45010376 -91.47345734]
[232.33120728 -82.20108795]
[217.26306152 -76.59967041]
[201.25170898 -75.04904938]
[185.36767578 -77.65837097]
[179.30885315 -63.93646622]
[173.25004578 -50.21455765]
[173.42756653 -42.75821304]
[166.88954163 -36.24821091]
[160.51539612 -22.66991234]
[170.84332275 -8.98700809]
[172.88265991 8.12347031]
[165.98963928 24.01273537]
[151.95956421 34.31855774]
[134.56018066 36.16279221]
[128.81993103 50.02098465]
[123.07967377 63.87917709]
[117.33942413 77.73736572]
[111.59917450 91.59556580]
[113.23359680 105.48153687]
[102.25901794 114.14469147]
[101.85270691 123.36210632]
[96.22280884 128.25422668]
[90.16399384 141.97613525]
[84.10517883 155.69804382]
[78.04636383 169.41995239]
[78.38469696 176.16854858]
[75.62363434 181.26521301]
[71.37776184 183.62550354]
[64.69168091 197.05296326]
[58.00560760 210.48040771]
[51.31953049 223.90785217]
[44.63345718 237.33531189]
[37.94738007 250.76275635]
[51.03929138 243.44142151]
[65.87580109 241.23281860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 22]
[14 21]
[15 20]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 125]
[30 124]
[31 123]
[32 122]
[33 120]
[35 118]
[36 117]
[37 116]
[38 115]
[39 114]
[46 109]
[47 108]
[48 106]
[49 105]
[50 104]
[63 93]
[64 92]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
