%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:12:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCCGCGACGUUGACUUCGAAAUUGUACUCCCUGCUGUUCCGCAGGACCUCCACCUUCGCCCUCACCAUCAUCGUGGGCGUCAUGUUCUUCGAGCGCGCCUUCGAUCAAGGCGCGGACGCUAUCUACGACCACAUCAACGAGGGGGUGAGGGCCUGUGCCAUCCCUGACCUUGGACCCGCCUGA\
) } def
/len { sequence length } bind def

/coor [
[82.82725525 211.76016235]
[82.73303223 195.95616150]
[93.90080261 184.77330017]
[93.65279388 169.77534485]
[93.40478516 154.77738953]
[93.15677643 139.77944946]
[92.90876770 124.78149414]
[85.81513977 122.34625244]
[71.62787628 117.47576141]
[64.53424835 115.04051208]
[55.12660217 126.72367096]
[45.71895981 138.40682983]
[36.31131363 150.08999634]
[37.81439972 165.59413147]
[28.10727882 177.30850220]
[13.31718445 178.64591980]
[3.90953898 190.32908630]
[-5.49810648 202.01223755]
[-7.48282528 218.29084778]
[-22.67675018 224.46147156]
[-35.44967270 214.17631531]
[-32.66190720 198.01585388]
[-17.18126488 192.60459900]
[-7.77362013 180.92143250]
[1.63402510 169.23828125]
[-0.21405774 154.50328064]
[9.16020107 142.52087402]
[24.62815475 140.68234253]
[34.03580093 128.99919128]
[43.44344330 117.31602478]
[52.85108948 105.63286591]
[49.17291260 99.09673309]
[36.10053635 106.45288849]
[28.74458885 93.38039398]
[41.81656265 86.02446747]
[38.13838577 79.48834229]
[23.26942444 81.46672058]
[8.40046310 83.44510651]
[-6.46849823 85.42348480]
[-21.33745956 87.40187073]
[-30.74095726 100.10422516]
[-46.38426590 102.35420227]
[-58.98649216 92.81693268]
[-61.07095337 77.15071106]
[-51.40097809 64.65002441]
[-35.71359253 62.73130798]
[-23.31584167 72.53290558]
[-8.44688034 70.55452728]
[6.42208052 68.57614136]
[21.29104233 66.59776306]
[36.16000366 64.61937714]
[56.97650146 48.44424438]
[80.35761261 41.92182922]
[102.39391327 44.58120346]
[119.89575958 54.53126907]
[130.85284424 68.92238617]
[134.65809631 84.53395081]
[141.79730225 71.34184265]
[148.93650818 58.14973450]
[143.38323975 47.61371231]
[143.61163330 35.82596970]
[149.44889832 25.72078896]
[159.34043884 19.75759125]
[170.76216125 19.32266808]
[178.33364868 6.37382030]
[185.90513611 -6.57502699]
[193.47660828 -19.52387428]
[201.04809570 -32.47272110]
[208.61958313 -45.42156982]
[216.19105530 -58.37041473]
[223.76254272 -71.31925964]
[231.33403015 -84.26811218]
[227.53050232 -90.10051727]
[225.76329041 -96.97497559]
[226.30232239 -104.18777466]
[229.17669678 -110.97181702]
[234.16276550 -116.57818604]
[239.26716614 -130.68298340]
[244.37156677 -144.78776550]
[249.47596741 -158.89256287]
[254.58036804 -172.99734497]
[259.68475342 -187.10214233]
[264.43780518 -201.32917786]
[268.83654785 -215.66972351]
[273.23529053 -230.01025391]
[277.63403320 -244.35079956]
[282.03280640 -258.69131470]
[272.36849976 -268.23147583]
[270.08020020 -283.36813354]
[278.05694580 -298.43048096]
[278.05694580 -313.43048096]
[278.05694580 -328.43048096]
[278.05694580 -343.43048096]
[272.01062012 -359.26959229]
[285.55694580 -369.46435547]
[299.10330200 -359.26959229]
[293.05694580 -343.43048096]
[293.05694580 -328.43048096]
[293.05694580 -313.43048096]
[293.05694580 -298.43048096]
[307.59796143 -294.74816895]
[314.73715210 -307.94027710]
[321.87637329 -321.13238525]
[329.01559448 -334.32449341]
[336.15478516 -347.51660156]
[343.29400635 -360.70870972]
[350.43322754 -373.90081787]
[347.25207520 -389.62530518]
[357.67254639 -401.82339478]
[373.70092773 -401.13775635]
[383.04165649 -388.09432983]
[378.52926636 -372.69894409]
[363.62533569 -366.76159668]
[356.48611450 -353.56951904]
[349.34689331 -340.37741089]
[342.20770264 -327.18530273]
[335.06848145 -313.99319458]
[327.92926025 -300.80108643]
[320.79006958 -287.60897827]
[316.30224609 -262.45129395]
[296.37332153 -254.29257202]
[291.97457886 -239.95204163]
[287.57583618 -225.61151123]
[283.17709351 -211.27096558]
[278.77832031 -196.93043518]
[280.11242676 -193.64830017]
[279.91213989 -189.55397034]
[277.81182861 -185.38070679]
[273.78955078 -181.99774170]
[268.68515015 -167.89295959]
[263.58074951 -153.78816223]
[258.47634888 -139.68336487]
[253.37196350 -125.57858276]
[248.26756287 -111.47379303]
[256.98370361 -99.26605988]
[271.98165894 -99.51406860]
[280.52825928 -102.78975677]
[287.22915649 -99.64012909]
[296.24057007 -112.27238464]
[310.96667480 -117.16338348]
[325.74496460 -112.43242645]
[334.89288330 -99.89866638]
[334.89288330 -84.38159180]
[325.74496460 -71.84783173]
[310.96667480 -67.11687469]
[296.24057007 -72.00786591]
[287.22915649 -84.64012909]
[272.22967529 -84.51612091]
[257.23171997 -84.26811218]
[244.28288269 -76.69662476]
[236.71139526 -63.74777985]
[229.13990784 -50.79893112]
[221.56842041 -37.85008621]
[213.99694824 -24.90123749]
[206.42546082 -11.95239162]
[198.85397339 0.99645603]
[191.28250122 13.94530296]
[183.71101379 26.89414978]
[189.41650391 44.27482224]
[180.46846008 60.59484482]
[162.12861633 65.28894806]
[154.98941040 78.48104858]
[147.85018921 91.67315674]
[148.71778870 106.64804840]
[157.33271790 118.92742157]
[165.94764709 131.20678711]
[181.23957825 129.77421570]
[195.19236755 136.19412231]
[204.05279541 148.73957825]
[205.43742371 164.03591919]
[198.97383118 177.96852112]
[186.40065002 186.78958130]
[171.10003662 188.12626648]
[157.18775940 181.61901855]
[148.40617371 169.01826477]
[147.11744690 153.71353149]
[153.66827393 139.82171631]
[145.05334473 127.54235077]
[136.43841553 115.26297760]
[129.30548096 117.58060455]
[115.03964233 122.21585846]
[107.90671539 124.53348541]
[108.15472412 139.53143311]
[108.40273285 154.52938843]
[108.65074158 169.52732849]
[108.89875031 184.52528381]
[120.43016052 195.33279419]
[120.85852051 211.13127136]
[109.92970276 222.54777527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 186]
[4 185]
[5 184]
[6 183]
[7 182]
[10 31]
[11 30]
[12 29]
[13 28]
[16 25]
[17 24]
[18 23]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[57 163]
[58 162]
[59 161]
[64 158]
[65 157]
[66 156]
[67 155]
[68 154]
[69 153]
[70 152]
[71 151]
[72 150]
[77 134]
[78 133]
[79 132]
[80 131]
[81 130]
[82 129]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[90 100]
[91 99]
[92 98]
[93 97]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[135 149]
[136 148]
[138 147]
[164 179]
[165 178]
[166 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
