%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUCAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGACAUAA\
) } def
/len { sequence length } bind def

/coor [
[105.46521759 243.05236816]
[110.85038757 228.72552490]
[122.28444672 218.55101013]
[111.65954590 208.11257935]
[115.77234650 192.83529663]
[112.09006500 178.29428101]
[108.40778351 163.75328064]
[95.52089691 156.37332153]
[91.57939911 141.67912292]
[99.40756226 128.21221924]
[95.72528076 113.67121887]
[86.11436462 103.51631927]
[89.73371887 90.01106262]
[86.05143738 75.47006226]
[82.36914825 60.92905807]
[77.72769165 55.57411575]
[76.85742188 49.58351898]
[79.03650665 45.03494263]
[76.56758881 30.23952103]
[74.09867096 15.44410229]
[69.91526794 9.72416210]
[69.54267120 3.68216014]
[72.08992767 -0.67093498]
[70.85124207 -15.61970234]
[69.61254883 -30.56847000]
[54.76815414 -41.96145630]
[52.70008850 -60.24591827]
[64.22808075 -74.18651581]
[61.75916290 -88.98194122]
[59.29024124 -103.77735901]
[56.82132339 -118.57277679]
[54.35240555 -133.36819458]
[40.79125595 -141.15467834]
[35.45642471 -155.85411072]
[40.86686325 -170.52589417]
[54.46792221 -178.24244690]
[69.83760071 -175.36026001]
[79.71880341 -163.24020386]
[79.44593048 -147.60499573]
[69.14782715 -135.83711243]
[71.61674500 -121.04169464]
[74.08566284 -106.24627686]
[76.55458069 -91.45085907]
[79.02349854 -76.65544128]
[89.81482697 -72.02117920]
[96.99558258 -62.57450104]
[98.60603333 -50.69539261]
[94.10925293 -39.45177078]
[84.56131744 -31.80715942]
[85.80001068 -16.85839272]
[87.03869629 -1.90962517]
[88.89408875 12.97518349]
[91.36300659 27.77060318]
[93.83192444 42.56602097]
[96.91015625 57.24677658]
[100.59243774 71.78778076]
[104.27471924 86.32878113]
[113.88563538 96.48368073]
[110.26628113 109.98893738]
[113.94856262 124.52993774]
[127.24276733 132.64793396]
[130.76998901 147.44703674]
[122.94878387 160.07099915]
[126.63106537 174.61199951]
[130.31335449 189.15301514]
[141.20162964 200.63150024]
[136.82545471 214.86872864]
[151.72393799 218.37493896]
[163.27888489 228.41195679]
[168.83503723 242.67337036]
[167.11561584 257.88198853]
[158.51576233 270.54299927]
[145.01164246 277.74697876]
[129.70642090 277.83853149]
[116.11709595 270.79656982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[5 65]
[6 64]
[7 63]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[18 54]
[19 53]
[20 52]
[23 51]
[24 50]
[25 49]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
