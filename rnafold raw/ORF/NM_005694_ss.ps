%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGGGUCUGGUUGACUCAAACCCUGCCCCGCCUGAGUCUCAGGAGAAGAAGCCGCUGAAGCCCUGCUGCGCUUGCCCGGAGACCAAGAAGGCGCGCGAUGCGUGUAUCAUCGAGAAAGGAGAAGAACACUGUGGACAUCUAAUUGAGGCCCACAAGGAAUGCAUGAGAGCCCUAGGAUUUAAAAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[85.62512970 144.71263123]
[89.38199615 130.19071960]
[97.16458893 117.36311340]
[88.66682434 129.72386169]
[87.22469330 145.47920227]
[73.63854218 151.58377075]
[65.14077759 163.94451904]
[56.64300537 176.30525208]
[48.14523315 188.66600037]
[50.81576920 204.01220703]
[42.02173615 216.42669678]
[27.37501907 218.87806702]
[18.87724876 231.23881531]
[10.37947750 243.59954834]
[1.88170743 255.96029663]
[5.00578260 271.45272827]
[-3.80943894 284.57019043]
[-19.33404350 287.53027344]
[-32.35755539 278.57687378]
[-35.15336227 263.02185059]
[-26.06275368 250.09370422]
[-10.47903252 247.46252441]
[-1.98126256 235.10177612]
[6.51650763 222.74104309]
[15.01427841 210.38029480]
[12.05786514 195.82711792]
[20.49972916 183.17051697]
[35.78449249 180.16822815]
[44.28226471 167.80749512]
[52.78003311 155.44674683]
[61.27780533 143.08601379]
[62.11211777 128.21478271]
[76.30608368 121.22608185]
[84.80384827 108.86534119]
[81.05931091 94.34024811]
[67.64469147 87.62847137]
[52.81346512 92.39002228]
[39.30474091 85.39222717]
[34.85673141 71.22357178]
[21.44211006 64.51179504]
[8.02749062 57.80001831]
[-5.38713074 51.08824158]
[-18.80175209 44.37646484]
[-34.60542679 45.12108231]
[-42.52545929 32.50671005]
[-55.94007874 25.79493523]
[-70.77130890 30.55648422]
[-84.28002930 23.55869102]
[-88.72804260 9.39003658]
[-102.14266205 2.67825937]
[-115.55728149 -4.03351736]
[-128.02893066 -0.70534450]
[-139.06849670 -6.58364868]
[-143.00686646 -18.03117943]
[-156.31045532 -24.96041679]
[-172.12416077 -24.47313309]
[-179.83781433 -37.21474838]
[-193.14141846 -44.14398575]
[-206.48278809 -36.39728928]
[-221.89340210 -37.11607742]
[-234.45578003 -46.07098007]
[-240.16130066 -60.40452194]
[-237.18937683 -75.54292297]
[-226.48832703 -86.65557098]
[-211.47280884 -90.19647217]
[-196.93423462 -85.03572083]
[-187.51181030 -72.82010651]
[-186.21217346 -57.44758224]
[-172.90858459 -50.51834488]
[-158.04644775 -51.50125122]
[-149.38122559 -38.26401520]
[-136.07762146 -31.33477592]
[-118.61878967 -33.04642105]
[-108.84550476 -17.44813919]
[-95.43088531 -10.73636150]
[-82.01626587 -4.02458429]
[-68.00990295 -8.95990944]
[-54.30995941 -2.34430957]
[-49.22830200 12.38031387]
[-35.81368256 19.09209061]
[-20.96951103 17.86740112]
[-12.08997440 30.96184349]
[1.32464635 37.67361832]
[14.73926735 44.38539505]
[28.15388870 51.09717560]
[41.56850815 57.80895233]
[55.57487106 52.87362671]
[69.27481842 59.48922729]
[74.35646820 74.21385193]
[87.77108765 80.92562866]
[101.67086792 81.55949402]
[109.80676270 89.49064636]
[123.89750671 84.34759521]
[137.98825073 79.20455170]
[144.98963928 73.31367493]
[152.35041809 74.09451294]
[166.52301025 69.18149567]
[171.20898438 52.93671417]
[184.51872253 42.78224564]
[201.09214783 42.55857849]
[214.40158081 52.15590668]
[228.49232483 47.01285934]
[242.58306885 41.86981583]
[256.67379761 36.72676849]
[269.03454590 28.22899628]
[278.88259888 16.91458511]
[288.73065186 5.60017300]
[298.57870483 -5.71423864]
[301.85943604 -14.25581837]
[308.68029785 -17.13098526]
[318.71121216 -28.28360176]
[322.18701172 -43.71828079]
[336.45083618 -48.00696182]
[346.48175049 -59.15958023]
[342.31079102 -74.01241302]
[346.85385132 -88.75569153]
[358.66128540 -98.68487549]
[373.96533203 -100.63159943]
[387.88253784 -93.97467804]
[395.97198486 -80.83831024]
[395.65237427 -65.41426086]
[387.02566528 -52.62428284]
[372.84463501 -46.54961777]
[357.63436890 -49.12866974]
[347.60345459 -37.97605515]
[344.84512329 -23.33908463]
[329.86383057 -18.25269127]
[319.83291626 -7.10007572]
[309.89309692 4.13381100]
[300.04507446 15.44822311]
[290.19702148 26.76263428]
[280.34896851 38.07704544]
[286.50942993 51.75361633]
[301.50894165 51.87569809]
[316.50845337 51.99777985]
[331.50793457 52.11986160]
[346.50744629 52.24194336]
[360.37014771 44.61721420]
[373.03402710 52.45784378]
[386.89669800 44.83311462]
[399.56057739 52.67374039]
[414.56008911 52.79582214]
[426.95858765 42.61462402]
[442.61822510 46.10107422]
[449.52624512 60.58066177]
[442.38345337 74.94589233]
[426.66912842 78.17698669]
[414.43798828 67.79532623]
[399.43850708 67.67324829]
[386.64868164 75.30670166]
[372.91192627 67.45734406]
[360.12210083 75.09080505]
[346.38537598 67.24144745]
[331.38586426 67.11936188]
[316.38635254 66.99728394]
[301.38687134 66.87519836]
[286.38735962 66.75312042]
[285.29699707 81.71343994]
[274.92083740 92.54556274]
[260.02117920 94.27786255]
[247.43659973 86.11525726]
[242.94302368 71.80415344]
[248.60289001 57.91293335]
[261.81686401 50.81751251]
[247.72610474 55.96055984]
[233.63536072 61.10360336]
[219.54461670 66.24665070]
[217.07998657 79.37644958]
[208.37672424 89.65382385]
[195.62893677 94.32219696]
[182.13316345 92.06033325]
[171.43601990 83.35408783]
[157.26342773 88.26709747]
[143.13130188 93.29529572]
[129.04055786 98.43833923]
[114.94981384 103.58139038]
[129.31022644 99.24799347]
[144.31022644 99.23412323]
[158.67863464 103.54093933]
[171.19784546 111.80347443]
[180.80691528 123.32153320]
[186.69155884 137.11903381]
[188.35307312 152.02671814]
[185.65068054 166.78128052]
[178.81335449 180.13235474]
[168.42054749 190.94851685]
[155.35296631 198.31318665]
[140.71800232 201.60223389]
[125.75587463 200.53695679]
[111.73453522 195.20761108]
[99.84218597 186.06582642]
[91.08663940 173.88632202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[6 31]
[7 30]
[8 29]
[9 28]
[12 25]
[13 24]
[14 23]
[15 22]
[35 90]
[36 89]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[45 80]
[46 79]
[49 76]
[50 75]
[51 74]
[54 72]
[55 71]
[57 69]
[58 68]
[92 176]
[93 175]
[94 174]
[96 173]
[97 172]
[101 167]
[102 166]
[103 165]
[104 164]
[105 132]
[106 131]
[107 130]
[108 129]
[110 128]
[111 127]
[113 125]
[114 124]
[133 157]
[134 156]
[135 155]
[136 154]
[137 153]
[139 151]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
