%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAUAAACACCCGGGAGCUGUUUCUCAACUUCACUAUUGUCUUGAUUACGGUUAUUCUUAUGUGGCUCCUUGUGAGGUCCUAUCAGUACUGA\
) } def
/len { sequence length } bind def

/coor [
[89.71333313 158.09901428]
[81.90859222 161.18721008]
[73.61837006 160.82626343]
[64.95954132 173.07470703]
[56.30070877 185.32316589]
[61.41386414 199.97360229]
[56.90695572 214.82174683]
[44.51298141 224.15818787]
[28.99768257 224.39286804]
[16.32700348 215.43554688]
[11.37307835 200.73051453]
[16.04079437 185.93212891]
[28.53532028 176.73069763]
[44.05225372 176.66433716]
[52.71108246 164.41587830]
[61.36991501 152.16741943]
[60.76003647 130.61009216]
[80.66571808 120.55397034]
[87.66963196 107.28954315]
[87.33339691 93.31175232]
[99.06593323 85.70654297]
[106.06985474 72.44210815]
[113.07376862 59.17767715]
[120.07768250 45.91324615]
[111.36955261 35.70491028]
[106.71660614 23.15393257]
[106.66619110 9.80059147]
[111.20224762 -2.72449756]
[119.75003052 -12.89949608]
[131.24879456 -19.49624634]
[144.28343201 -21.72849274]
[157.25854492 -19.34554672]
[165.10638428 -32.12879944]
[172.95420837 -44.91205215]
[180.80204773 -57.69530487]
[188.64987183 -70.47855377]
[196.49771118 -83.26181030]
[204.34553528 -96.04505920]
[196.33595276 -110.40585327]
[196.60375977 -126.75384521]
[204.98332214 -140.68479919]
[219.13627625 -148.49249268]
[235.20323181 -148.15460205]
[242.63299561 -161.18527222]
[250.06277466 -174.21595764]
[239.32865906 -184.81977844]
[231.70559692 -197.84097290]
[227.71337891 -212.39173889]
[227.62416077 -227.47996521]
[231.44404602 -242.07690430]
[238.91258240 -255.18733215]
[249.52055359 -265.91735840]
[262.54467773 -273.53536987]
[277.09698486 -277.52197266]
[292.18524170 -277.60537720]
[306.78073120 -273.77984619]
[319.88827515 -266.30624390]
[330.61419678 -255.69413757]
[338.22717285 -242.66706848]
[342.20816040 -228.11322021]
[342.28573608 -213.02494812]
[338.45458984 -198.43095398]
[330.97592163 -185.32629395]
[320.35964966 -174.60446167]
[307.32965088 -166.99650574]
[292.77426147 -163.02113342]
[277.68594360 -162.94938660]
[263.09344482 -166.78617859]
[255.66366577 -153.75550842]
[248.23390198 -140.72483826]
[255.92977905 -129.31971741]
[257.92984009 -115.63984680]
[253.78149414 -102.38183594]
[244.24995422 -92.18445587]
[231.17776489 -87.10343933]
[217.12879944 -88.19722748]
[209.28096008 -75.41397858]
[201.43313599 -62.63072586]
[193.58529663 -49.84747314]
[185.73747253 -37.06422043]
[177.88963318 -24.28096771]
[170.04180908 -11.49771595]
[179.54173279 2.27590132]
[182.16743469 18.85585022]
[177.35705566 34.99533844]
[166.00953674 47.51319885]
[150.31718445 53.92089462]
[133.34211731 52.91716003]
[126.33819580 66.18159485]
[119.33428192 79.44602966]
[112.33036804 92.71045685]
[112.66660309 106.68824768]
[100.93406677 114.29345703]
[93.93014526 127.55789185]
[98.03739929 135.31262207]
[98.61692047 143.97308350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[18 94]
[19 93]
[21 91]
[22 90]
[23 89]
[24 88]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[43 70]
[44 69]
[45 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
