%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:46:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCCAGUUCCUGCUUGGAUUUACACUGGGCAACGUGGUUGGAAUGUAUCUGGCUCAGAACUAUGAUAUACCAAACCUGGCUAAAAAACUUGAAGAAAUUAAAAAGGACUUGGAUGCCAAGAAGAAACCCCCUAGUGCAUGA\
) } def
/len { sequence length } bind def

/coor [
[64.51142883 264.31735229]
[55.80666733 269.57556152]
[46.05274963 272.39236450]
[35.91918945 272.58370972]
[26.09914398 270.14538574]
[18.08920097 282.82769775]
[10.07925892 295.51000977]
[2.06931543 308.19232178]
[-5.80277205 320.96063232]
[-13.53607941 333.81350708]
[-13.29099464 350.21081543]
[-27.50580406 358.38830566]
[-41.55752945 349.93365479]
[-40.99096298 333.54428101]
[-26.38893700 326.08020020]
[-18.65563011 313.22732544]
[-17.89666367 305.81951904]
[-10.61298752 300.18237305]
[-2.60304451 287.50006104]
[5.40689850 274.81774902]
[13.41684151 262.13546753]
[2.79637003 245.07032776]
[2.15657711 224.90560913]
[11.74471855 207.06976318]
[29.04451180 196.40194702]
[49.43604279 195.83911133]
[55.73437881 182.22547913]
[62.03271484 168.61184692]
[68.33105469 154.99821472]
[74.62938690 141.38458252]
[80.92772675 127.77095032]
[87.22605896 114.15731812]
[75.85066223 123.93486023]
[60.85533905 123.56035614]
[49.98220825 113.22715759]
[48.84508896 98.27031708]
[58.03108215 86.41209412]
[72.79743958 83.77490234]
[85.52148438 91.72197723]
[77.23867035 79.21618652]
[68.95584869 66.71038818]
[60.67303085 54.20459366]
[52.25522614 41.78926086]
[43.70341873 29.46584129]
[37.79036331 26.24881744]
[34.88117599 21.25826073]
[35.06171417 16.41818428]
[27.05177307 3.73588061]
[19.04183006 -8.94642258]
[11.03188610 -21.62872505]
[3.02194309 -34.31102753]
[-4.98799992 -46.99333191]
[-13.13485909 -59.58811951]
[-21.41767693 -72.09391785]
[-29.70049477 -84.59970856]
[-45.25747681 -86.18536377]
[-56.11844254 -97.43585205]
[-57.15517807 -113.03903198]
[-47.87816620 -125.62756348]
[-32.66772842 -129.25752258]
[-18.70577049 -122.21495819]
[-12.58469963 -107.82514954]
[-17.19470024 -92.88253021]
[-8.91188145 -80.37673187]
[-0.62906319 -67.87094116]
[5.73386765 -64.00250244]
[7.69430304 -55.00327301]
[15.70424652 -42.32097244]
[23.71418953 -29.63866806]
[31.72413254 -16.95636559]
[39.73407364 -4.27406263]
[47.74401855 8.40824032]
[56.02683640 20.91403580]
[64.57864380 33.23745346]
[71.02388763 36.96712875]
[73.17882538 45.92177582]
[81.46164703 58.42757034]
[89.74446106 70.93336487]
[98.02728271 83.43916321]
[112.29312897 88.07441711]
[126.34479523 82.82553101]
[140.39645386 77.57665253]
[154.44812012 72.32776642]
[154.08155823 55.75844193]
[159.37554932 40.08027649]
[169.67980957 27.16480446]
[183.74699402 18.54750443]
[199.88381958 15.24525928]
[216.15478516 17.63638496]
[230.61433411 25.41738319]
[241.53950500 37.64133072]
[255.35060120 31.78867340]
[269.16171265 25.93601799]
[269.84219360 10.68807793]
[277.07870483 -2.75051212]
[289.43441772 -11.71151161]
[304.45605469 -14.41570663]
[319.16110229 -10.32617760]
[330.62985229 -0.25490373]
[336.58517456 13.79845715]
[335.84463501 29.04359818]
[328.55526733 42.45358658]
[316.16436768 51.36585999]
[301.13220215 54.01087952]
[286.44335938 49.86347580]
[275.01437378 39.74711609]
[261.20324707 45.59977341]
[247.39216614 51.45242691]
[248.77958679 64.92517853]
[246.29498291 78.25649261]
[240.13201904 90.35498047]
[230.78591919 100.22740173]
[219.01370239 107.06025696]
[205.77276611 110.28679657]
[192.14312744 109.63400269]
[179.23927307 105.14570618]
[168.11906433 97.17973328]
[159.69700623 86.37943268]
[145.64533997 91.62831879]
[131.59367371 96.87719727]
[117.54201508 102.12608337]
[132.19235229 98.90621185]
[146.75183105 102.51476288]
[158.20271301 112.20378876]
[164.17158508 125.96506500]
[163.42126465 140.94628906]
[156.10729980 154.04231262]
[143.74563599 162.53874207]
[128.89846802 164.67451477]
[114.64315796 160.00695801]
[103.93439484 149.50350952]
[98.99177551 135.34121704]
[100.83969116 120.45565796]
[94.54135895 134.06929016]
[88.24301910 147.68292236]
[81.94467926 161.29655457]
[75.64634705 174.91018677]
[69.34800720 188.52381897]
[63.04967499 202.13745117]
[70.49103546 209.24388123]
[75.82662201 218.02197266]
[78.69912720 227.86676025]
[78.92065430 238.10253906]
[76.48493195 248.02912903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 16]
[10 15]
[26 139]
[27 138]
[28 137]
[29 136]
[30 135]
[31 134]
[32 133]
[39 79]
[40 78]
[41 77]
[42 76]
[43 74]
[44 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 65]
[54 64]
[55 63]
[80 121]
[81 120]
[82 119]
[83 118]
[91 108]
[92 107]
[93 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
