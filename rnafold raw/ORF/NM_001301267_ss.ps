%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:29:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCCCAACUGCUCCUGUGCCGCUGCAGGUGUCUCCUGCACCUGCGCCAGCUCCUGCAAGUGCAAAGAGUGCAAAUGCACCUCCUGCAAGAAGAGCUGCUGCUCCUGCUGCCCUGUGGGCUGUGCCAAGUGUGCCCAGGGCUGCAUCUGCAAAGGGGCAUCGGAGAAGUGCAGCUGCUGCGCCUGA\
) } def
/len { sequence length } bind def

/coor [
[122.58948517 351.05377197]
[115.12635803 351.79660034]
[112.16960907 366.50231934]
[109.21285248 381.20800781]
[112.01839447 397.92822266]
[96.72827911 405.25271606]
[85.45727539 392.58779907]
[94.50714874 378.25125122]
[97.46390533 363.54556274]
[100.42066193 348.83984375]
[92.98657990 334.96612549]
[91.84736633 320.21359253]
[96.45545197 307.14791870]
[105.32221985 297.75845337]
[116.37947845 293.15676880]
[114.64720917 278.25711060]
[112.91493988 263.35748291]
[111.18267059 248.45783997]
[102.02733612 236.70925903]
[108.11915588 222.10787964]
[106.38688660 207.20825195]
[104.65461731 192.30860901]
[102.92234802 177.40896606]
[101.19007874 162.50932312]
[92.03474426 150.76075745]
[98.12656403 136.15937805]
[96.39429474 121.25973511]
[83.76940155 113.15960693]
[69.50355530 117.79486084]
[55.23770523 122.43011475]
[40.97185898 127.06536865]
[26.70601082 131.70062256]
[12.44016361 136.33587646]
[-1.82568431 140.97113037]
[-16.09153175 145.60639954]
[-24.62676620 159.19055176]
[-40.58441162 160.84376526]
[-51.72312927 149.29783630]
[-49.49824524 133.40980530]
[-35.61650467 125.36761475]
[-20.72678757 131.34054565]
[-6.46093941 126.70529175]
[7.80490875 122.07003784]
[22.07075691 117.43477631]
[36.33660507 112.79952240]
[50.60245132 108.16426849]
[64.86830139 103.52901459]
[79.13414764 98.89376068]
[83.65130615 84.59008026]
[74.63508606 72.60225677]
[66.96144104 67.61332703]
[65.57084656 60.34086990]
[56.75407028 48.20561600]
[47.93729019 36.07036209]
[39.12051392 23.93510628]
[30.30373383 11.79985142]
[18.58082008 14.58178425]
[6.64171505 13.24393368]
[-4.11250067 7.96685266]
[-12.42775726 -0.60801148]
[-17.34322548 -11.45620918]
[-18.30231285 -23.29264450]
[-15.21558952 -34.72380829]
[-8.46856403 -44.41181946]
[-16.67278671 -56.96931839]
[-24.87700844 -69.52681732]
[-33.08123016 -82.08431244]
[-49.69570160 -90.00485992]
[-49.99837112 -107.54359436]
[-58.40909576 -119.96372223]
[-65.82593536 -125.32701111]
[-66.85421753 -132.65946960]
[-75.05844116 -145.21696472]
[-83.26266479 -157.77445984]
[-91.46688843 -170.33195496]
[-106.33544922 -177.24990845]
[-107.50888824 -193.60700989]
[-93.78006744 -202.57649231]
[-79.27202606 -194.93132019]
[-78.90939331 -178.53617859]
[-70.70516968 -165.97868347]
[-62.50094604 -153.42118835]
[-54.29672241 -140.86369324]
[-45.98896408 -128.37445068]
[-37.57823944 -115.95431519]
[-25.75264549 -113.35536194]
[-18.64618301 -103.06119537]
[-20.52373505 -90.28853607]
[-12.31951237 -77.73104095]
[-4.11528969 -65.17353821]
[4.08893299 -52.61604309]
[22.09679222 -54.45371246]
[38.62900162 -46.87558365]
[49.08835602 -31.89426231]
[50.51848602 -13.59389114]
[42.43898773 2.98307228]
[51.25576782 15.11832714]
[60.07254791 27.25358200]
[68.88932800 39.38883591]
[77.70610809 51.52409363]
[86.62290955 63.58604050]
[95.63912201 75.57386017]
[110.23902130 79.01522064]
[123.65996552 72.31608582]
[137.08090210 65.61695862]
[139.74601746 50.44450378]
[150.70600891 39.87417221]
[165.61231995 37.80876923]
[178.71961975 44.83277130]
[192.14056396 38.13363647]
[205.56150818 31.43450546]
[214.45338440 18.34843826]
[229.29638672 19.58711624]
[242.71733093 12.88798332]
[256.13827515 6.18885183]
[269.55920410 -0.51028043]
[282.98016357 -7.20941257]
[286.95645142 -12.52782345]
[292.23245239 -14.70001507]
[296.95742798 -13.89988613]
[310.59252930 -20.15161324]
[324.22763062 -26.40334129]
[337.86270142 -32.65507126]
[338.09960938 -47.91634750]
[344.94235229 -61.55965424]
[357.03228760 -70.87609863]
[371.96896362 -74.01589203]
[386.78671265 -70.35562897]
[398.54342651 -60.62205505]
[404.90481567 -46.74777985]
[404.60781860 -31.48755455]
[397.71139526 -17.87130165]
[385.58486938 -8.60254002]
[370.63595581 -5.52159071]
[355.83273315 -9.24017715]
[344.11444092 -19.01997185]
[330.47933960 -12.76824379]
[316.84423828 -6.51651573]
[303.20913696 -0.26478785]
[289.67929077 6.21152735]
[276.25833130 12.91065979]
[262.83740234 19.60979080]
[249.41645813 26.30892372]
[235.99551392 33.00805664]
[228.06359863 45.61495590]
[212.26063538 44.85544586]
[198.83970642 51.55457687]
[185.41876221 58.25371170]
[183.15370178 72.95090485]
[172.54315186 83.62237549]
[157.50762939 86.02784729]
[143.78002930 79.03789520]
[130.35910034 85.73703003]
[116.93815613 92.43615723]
[119.55418396 106.33338165]
[111.29393768 119.52746582]
[113.02620697 134.42710876]
[122.30544281 147.24140930]
[116.08971405 160.77705383]
[117.82198334 175.67669678]
[119.55426025 190.57633972]
[121.28652954 205.47598267]
[123.01879883 220.37561035]
[132.29803467 233.18991089]
[126.08230591 246.72557068]
[127.81457520 261.62521362]
[129.54684448 276.52484131]
[131.27911377 291.42449951]
[150.78074646 297.80718994]
[162.81877136 317.57055664]
[158.81320190 343.02774048]
[164.61068726 356.86209106]
[170.40817261 370.69644165]
[176.20565796 384.53079224]
[182.00314331 398.36514282]
[187.80062866 412.19949341]
[199.49891663 424.47085571]
[190.94554138 439.10900879]
[174.51162720 434.94213867]
[173.96629333 417.99697876]
[168.16879272 404.16262817]
[162.37130737 390.32827759]
[156.57382202 376.49392700]
[150.77633667 362.65957642]
[144.97885132 348.82525635]
[137.51573181 349.56808472]
[139.00140381 364.49432373]
[140.48686218 379.42059326]
[125.56056976 380.90582275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 10]
[3 9]
[4 8]
[15 168]
[16 167]
[17 166]
[18 165]
[20 163]
[21 162]
[22 161]
[23 160]
[24 159]
[26 157]
[27 156]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[49 102]
[50 101]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[64 91]
[65 90]
[66 89]
[67 88]
[69 85]
[70 84]
[72 83]
[73 82]
[74 81]
[75 80]
[103 154]
[104 153]
[105 152]
[109 148]
[110 147]
[111 146]
[113 144]
[114 143]
[115 142]
[116 141]
[117 140]
[120 139]
[121 138]
[122 137]
[123 136]
[171 185]
[172 184]
[173 183]
[174 182]
[175 181]
[176 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
