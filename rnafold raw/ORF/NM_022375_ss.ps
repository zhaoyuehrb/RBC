%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAUGUAUCCACCAUUAUUGUUAAAGAUUUACCUUAGCAGACACAUUAGUAUACUCUUCUAUUUAAAAAUCCUUUAUAAAAGUGGUAUUAUAUGGCUAUCCUGGUAUUCUUUCAUAUUGUUAGUACUUUGA\
) } def
/len { sequence length } bind def

/coor [
[252.75099182 320.15216064]
[244.27395630 307.77719116]
[230.69805908 301.64984131]
[229.28233337 285.89212036]
[220.80528259 273.51715088]
[212.32823181 261.14218140]
[203.85118103 248.76722717]
[195.37414551 236.39225769]
[186.89709473 224.01730347]
[176.61709595 223.02511597]
[168.43994141 216.36146545]
[165.26246643 206.07173157]
[168.38377380 195.53440857]
[160.48728943 182.78115845]
[151.58662415 170.70729065]
[141.73992920 159.39169312]
[131.89323425 148.07611084]
[122.04653931 136.76051331]
[112.19984436 125.44492340]
[102.35314941 114.12933350]
[89.19440460 109.40290070]
[86.33126068 95.71736145]
[76.48456573 84.40177155]
[66.63787079 73.08618164]
[56.79117584 61.77058792]
[41.89529419 56.43923950]
[39.37733078 41.75901031]
[29.53063583 30.44341850]
[14.63475513 25.11206818]
[12.11679173 10.43183899]
[2.27009654 -0.88375169]
[-7.57659864 -12.19934273]
[-17.42329407 -23.51493263]
[-27.26998901 -34.83052444]
[-43.42105484 -31.49467278]
[-58.96994781 -36.70415497]
[-69.72782135 -48.95628357]
[-72.84653473 -64.86467743]
[-67.57228088 -80.09491730]
[-77.67771149 -91.18005371]
[-87.78314972 -102.26519012]
[-102.79820251 -107.25105286]
[-105.65457153 -121.86920166]
[-115.76000977 -132.95434570]
[-125.86544037 -144.03947449]
[-140.30639648 -139.20431519]
[-155.46487427 -140.66731262]
[-168.71458435 -148.17497253]
[-177.75993347 -160.42657471]
[-181.03375244 -175.29942322]
[-177.96884155 -190.21673584]
[-169.09620667 -202.59399414]
[-155.95309448 -210.28674316]
[-140.81661987 -211.96218872]
[-126.30928040 -207.33003235]
[-114.94454956 -197.19284058]
[-108.69143677 -183.30693054]
[-108.63333130 -168.07812500]
[-114.78031158 -154.14491272]
[-104.67487335 -143.05976868]
[-94.56944275 -131.97463989]
[-80.27719879 -127.78165436]
[-76.69801331 -112.37062073]
[-66.59258270 -101.28549194]
[-56.48714447 -90.20035553]
[-43.31946945 -93.99997711]
[-29.73730659 -91.72564697]
[-18.41714478 -83.76742554]
[-11.61479759 -71.64109802]
[-10.71598148 -57.69974518]
[-15.95439911 -44.67721939]
[-6.10770369 -33.36162949]
[3.73899174 -22.04603767]
[13.58568764 -10.73044682]
[23.43238258 0.58514345]
[37.62396240 5.10712719]
[40.84622574 20.59672356]
[50.69292068 31.91231346]
[64.88449860 36.43429947]
[68.10676575 51.92389297]
[77.95346069 63.23948288]
[87.80015564 74.55507660]
[97.64685059 85.87066650]
[110.80559540 90.59709930]
[113.66873932 104.28263855]
[123.51543427 115.59822845]
[133.36212158 126.91381836]
[143.20883179 138.22941589]
[153.05552673 149.54499817]
[162.90222168 160.86059570]
[164.52178955 145.94828796]
[175.21258545 135.42654419]
[190.14880371 134.04484558]
[202.58831787 142.42687988]
[206.91598511 156.78903198]
[201.17828369 170.64828491]
[187.96522522 177.74862671]
[173.24053955 174.88467407]
[181.13702393 187.63792419]
[199.29441833 196.25671387]
[199.27206421 215.54025269]
[207.74909973 227.91522217]
[216.22615051 240.29017639]
[224.70320129 252.66514587]
[233.18023682 265.04010010]
[241.65728760 277.41506958]
[255.83952332 284.42755127]
[256.64892578 299.30014038]
[265.12594604 311.67510986]
[279.08758545 306.02822876]
[293.93676758 303.51513672]
[308.97900391 304.25341797]
[323.51074219 308.20849609]
[336.85229492 315.19540405]
[348.37966919 324.88735962]
[357.55371094 336.83102417]
[363.94528198 350.46780396]
[367.25552368 365.15988159]
[367.32952881 380.22003174]
[364.16387939 394.94390869]
[357.90661621 408.64285278]
[348.85043335 420.67611694]
[337.41888428 430.48089600]
[324.14663696 437.59860229]
[309.65447998 441.69635010]
[294.62023926 442.58242798]
[279.74707031 440.21542358]
[265.73062134 434.70605469]
[253.22645569 426.31198120]
[242.81945801 415.42581177]
[234.99635315 402.55673218]
[230.12304688 388.30667114]
[228.42747498 373.34207153]
[229.98893738 358.36288452]
[234.73440552 344.06973267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[4 106]
[5 105]
[6 104]
[7 103]
[8 102]
[9 101]
[13 99]
[14 98]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[22 83]
[23 82]
[24 81]
[25 80]
[27 78]
[28 77]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[39 65]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
