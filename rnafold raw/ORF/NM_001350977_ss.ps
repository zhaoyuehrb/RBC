%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sat Sep 12 09:46:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUACUACAGCCAUCUUUCUGGUGGCCUGGGCUGCGGCUUGGCUGUGGCUGUGACUAUGGGAAGGACUGUGGCUGUGGCUGAGUAUGGCAGGUGCAGACAUGGCUGCCACUCAUCUUACUCUGCCAGGUAA\
) } def
/len { sequence length } bind def

/coor [
[83.99079895 195.29789734]
[69.21466827 192.71607971]
[56.02888107 185.56520081]
[45.80509949 174.58912659]
[39.60684586 160.92962646]
[38.07888794 146.00765991]
[41.38018036 131.37544250]
[49.16729736 118.55512238]
[60.63019180 108.88030243]
[74.57643890 103.35742188]
[89.55481720 102.56093597]
[76.62256622 94.96113586]
[63.69032288 87.36132812]
[50.75807571 79.76152802]
[37.82582855 72.16172791]
[24.89358139 64.56192017]
[11.96133423 56.96212006]
[-1.22642958 49.81489182]
[-14.65387917 43.12881851]
[-28.08132744 36.44274139]
[-41.50877762 29.75666618]
[-54.93622589 23.07059097]
[-68.36367798 16.38451576]
[-81.79112244 9.69844055]
[-97.59334564 10.47332191]
[-105.53752136 -2.12585878]
[-118.96496582 -8.81193447]
[-132.39242554 -15.49800968]
[-145.81987000 -22.18408394]
[-161.62208557 -21.40920448]
[-169.56626892 -34.00838470]
[-184.38835144 -29.21844101]
[-197.91044617 -36.19034958]
[-202.38557434 -50.35046387]
[-215.81303406 -57.03653717]
[-229.24047852 -63.72261429]
[-242.66792297 -70.40869141]
[-256.09536743 -77.09476471]
[-269.52282715 -83.78083801]
[-282.95028687 -90.46691132]
[-296.37771606 -97.15299225]
[-309.80517578 -103.83906555]
[-326.67886353 -105.48670959]
[-329.76672363 -122.15708923]
[-314.60263062 -129.73908997]
[-303.11911011 -117.26651764]
[-289.69165039 -110.58043671]
[-276.26419067 -103.89436340]
[-262.83676147 -97.20829010]
[-249.40930176 -90.52221680]
[-235.98185730 -83.83613586]
[-222.55439758 -77.15006256]
[-209.12695312 -70.46398926]
[-195.69950867 -63.77791214]
[-181.70262146 -68.74005127]
[-167.99003601 -62.15069962]
[-162.88018799 -47.43583298]
[-148.03839111 -48.68894577]
[-139.13378906 -35.61153412]
[-125.70634460 -28.92545891]
[-112.27889252 -22.23938370]
[-98.85144806 -15.55330849]
[-84.00964355 -16.80642128]
[-75.10504913 -3.72900891]
[-61.67760086 2.95706654]
[-48.25015259 9.64314175]
[-34.82270050 16.32921791]
[-21.39525223 23.01529312]
[-7.96780348 29.70136833]
[5.45964575 36.38744354]
[8.97517204 35.56243515]
[13.07083702 36.45680618]
[16.90693092 39.32641983]
[19.56113625 44.02987671]
[32.49338531 51.62967682]
[45.42562866 59.22948074]
[58.35787582 66.82928467]
[71.29012299 74.42908478]
[84.22236633 82.02888489]
[97.15461731 89.62869263]
[111.32102203 94.55950928]
[126.17717743 96.63185120]
[141.03334045 98.70420074]
[155.77012634 92.94767761]
[167.30639648 102.36913300]
[182.16255188 104.44147491]
[197.01870728 106.51382446]
[211.87486267 108.58616638]
[226.73101807 110.65851593]
[241.46780396 104.90199280]
[253.00407410 114.32344818]
[267.86022949 116.39579773]
[280.39175415 107.14382935]
[295.42846680 109.45711517]
[304.17160034 121.46101379]
[319.02774048 123.53335571]
[333.88391113 125.60570526]
[348.74005127 127.67804718]
[363.61917114 129.57867432]
[378.51922607 131.30731201]
[393.41928101 133.03596497]
[405.65084839 123.02774811]
[421.36822510 124.68299866]
[431.24655151 137.01969910]
[429.42520142 152.71868896]
[416.98477173 162.46603394]
[401.30590820 160.47882080]
[391.69064331 147.93601990]
[376.79055786 146.20738220]
[361.89050293 144.47872925]
[354.82037354 146.85394287]
[346.66772461 142.53421021]
[331.81155396 140.46185303]
[316.95541382 138.38951111]
[302.09924316 136.31716919]
[290.40487671 145.47016907]
[275.30911255 143.58013916]
[265.78787231 131.25195312]
[250.93173218 129.17961121]
[237.25755310 135.08435059]
[224.65867615 125.51467133]
[209.80252075 123.44232178]
[194.94636536 121.36997986]
[180.09020996 119.29763794]
[165.23405457 117.22528839]
[151.55986023 123.13003540]
[138.96098328 113.56035614]
[124.10483551 111.48800659]
[109.24868011 109.41566467]
[120.49575043 119.34054565]
[127.99867249 132.32923889]
[130.97695923 147.03059387]
[129.12078857 161.91529846]
[122.62325287 175.43499756]
[112.16025543 186.18328857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[17 74]
[18 70]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[26 62]
[27 61]
[28 60]
[29 59]
[31 57]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[81 129]
[82 128]
[83 127]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
[91 119]
[92 118]
[95 115]
[96 114]
[97 113]
[98 112]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
