%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:58:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGCCUACUGGAGACAGGCUGGACUCAGCUACAUCCGAUACUCCCAGAUCUGUGCAAAAGCAGUGAGAGAUGCACUGAAGACAGAAUUCAAAGCAAAUGCUGAGAAGACUUCUGGCAGCAACGUAAAAAUUGUGAAAGUAAAGAAGGAAUAA\
) } def
/len { sequence length } bind def

/coor [
[72.34610748 134.30326843]
[66.33699799 128.42980957]
[53.39693069 136.01629639]
[40.45686340 143.60276794]
[32.46511078 157.25715637]
[17.57240105 157.01942444]
[4.63233471 164.60591125]
[0.98938477 170.23146057]
[-4.18272400 172.75213623]
[-8.98073959 172.22512817]
[-22.21397781 179.28779602]
[-30.74563789 192.61151123]
[-45.61690903 191.77812195]
[-58.85014725 198.84080505]
[-72.08338928 205.90347290]
[-85.31662750 212.96615601]
[-86.20022583 226.75320435]
[-93.73335266 238.20446777]
[-105.85079956 244.37586975]
[-119.32607269 243.74459839]
[-130.63029480 236.58341980]
[-144.00219727 243.37989807]
[-157.37409973 250.17637634]
[-170.74600220 256.97286987]
[-184.11790466 263.76934814]
[-192.60491943 277.80154419]
[-208.99291992 277.19720459]
[-216.42335510 262.57803345]
[-207.25242615 248.98295593]
[-190.91438293 250.39744568]
[-177.54248047 243.60095215]
[-164.17057800 236.80447388]
[-150.79867554 230.00799561]
[-137.42677307 223.21151733]
[-135.37829590 206.94990540]
[-123.94081116 194.97976685]
[-107.46237183 192.13728333]
[-92.37930298 199.73291016]
[-79.14606476 192.67024231]
[-65.91282654 185.60755920]
[-52.67958832 178.54487610]
[-45.09445572 165.72633362]
[-29.27665520 166.05456543]
[-16.04341698 158.99188232]
[-2.95414448 151.66584778]
[9.98592281 144.07936096]
[17.05211449 130.96760559]
[32.87038422 130.66270447]
[45.81045151 123.07622528]
[58.75051880 115.48974609]
[56.29323578 94.41691589]
[63.96884155 74.63846588]
[79.99783325 60.73977280]
[75.56285095 46.41040039]
[71.12786865 32.08102798]
[66.69288635 17.75165558]
[62.25790024 3.42228222]
[51.60196304 2.12913561]
[42.03091812 -2.64512300]
[34.64150238 -10.32464600]
[30.27077484 -20.00237274]
[29.40135765 -30.54712486]
[32.10826492 -40.73581314]
[38.05317307 -49.39529419]
[46.52650070 -55.53746033]
[43.25142288 -70.17556000]
[39.97634506 -84.81365204]
[36.70126724 -99.45175171]
[33.42618942 -114.08984375]
[19.45915985 -121.12234497]
[13.32772255 -135.50773621]
[17.92695427 -150.45367432]
[31.08523941 -158.90315247]
[46.58963776 -156.86656189]
[57.11944580 -145.30555725]
[57.70281219 -129.67884827]
[48.06428528 -117.36492157]
[51.33936310 -102.72682953]
[54.61444092 -88.08872986]
[57.88951874 -73.45063782]
[61.16459656 -58.81253815]
[79.56163788 -52.35456848]
[90.47790527 -36.02726746]
[89.39957428 -16.27346802]
[76.58727264 -1.01270139]
[81.02225494 13.31667137]
[85.45724487 27.64604378]
[89.89222717 41.97541809]
[94.32720947 56.30479050]
[112.60581207 57.77979660]
[128.70094299 66.56785583]
[140.26628113 57.01575089]
[151.83163452 47.46364212]
[153.47779846 31.97403908]
[165.34278870 22.45159721]
[180.09960938 24.11642456]
[191.66496277 14.56431866]
[203.23030090 5.01221323]
[208.44877625 -10.53447914]
[224.57333374 -13.52285671]
[235.01643372 -0.87873363]
[229.03509521 14.39070034]
[212.78240967 16.57756042]
[201.21705627 26.12966728]
[189.65171814 35.68177414]
[188.49819946 50.48734665]
[176.90536499 60.33929062]
[161.38374329 59.02899170]
[149.81838989 68.58110046]
[138.25303650 78.13320160]
[143.00190735 90.39337158]
[143.92196655 103.50889587]
[140.93128967 116.31199646]
[153.71697998 124.15586853]
[166.50265503 131.99974060]
[179.28833008 139.84362793]
[192.07402039 147.68750000]
[210.46223450 147.72738647]
[218.26625061 163.41903687]
[231.20632935 171.00550842]
[244.55363464 163.53579712]
[259.74743652 163.74845886]
[272.70864868 171.48623657]
[280.00769043 184.58509827]
[279.77178955 199.47837830]
[292.71185303 207.06484985]
[305.65191650 214.65133667]
[320.32003784 209.23101807]
[335.02307129 214.55595398]
[342.81869507 228.11186218]
[340.02603149 243.49804688]
[327.96368408 253.44964600]
[312.32717896 253.26780701]
[300.49954224 243.03837585]
[298.06542969 227.59140015]
[285.12536621 220.00492859]
[272.18530273 212.41844177]
[259.30438232 219.89822388]
[244.30920410 219.92646790]
[231.22677612 212.39543152]
[223.62049866 199.24090576]
[223.61984253 183.94557190]
[210.67977905 176.35910034]
[198.86322021 179.10583496]
[188.00621033 172.84445190]
[184.23013306 160.47317505]
[171.44445801 152.62930298]
[158.65878296 144.78543091]
[145.87309265 136.94155884]
[133.08741760 129.09767151]
[126.96199036 134.84971619]
[119.85600281 139.33435059]
[112.02790070 142.38845825]
[103.76235962 143.90098572]
[95.35998535 143.81692505]
[87.12636566 142.13931274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[6 46]
[7 45]
[10 44]
[11 43]
[13 41]
[14 40]
[15 39]
[16 38]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[53 89]
[54 88]
[55 87]
[56 86]
[57 85]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[91 110]
[92 109]
[93 108]
[96 105]
[97 104]
[98 103]
[113 150]
[114 149]
[115 148]
[116 147]
[117 146]
[119 143]
[120 142]
[125 137]
[126 136]
[127 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
