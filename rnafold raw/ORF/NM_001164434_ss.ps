%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:05:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGCUACUACCACAACUAUUAUGGUAGCCUGGACUAUGGUUGCAGCUAUGGCUCUGAAUAUGGUAACUCUGGAUAUGCCUGCAACUUUCCGUGCUCCUAUGGAAGAUUCCUAUUGGCUCCUAGAAAGAAAUUCUGA\
) } def
/len { sequence length } bind def

/coor [
[75.00754547 113.16915894]
[67.50754547 113.16915894]
[61.57211304 126.94488525]
[55.63668442 140.72061157]
[49.70125198 154.49633789]
[56.88641739 168.38545227]
[53.41239929 183.63226318]
[40.91952896 193.03768921]
[25.30655098 192.16078186]
[13.94543934 181.41558838]
[12.20056438 165.87567139]
[20.89580154 152.87847900]
[35.92552567 148.56091309]
[41.86095428 134.78518677]
[47.79638672 121.00945282]
[53.73181915 107.23372650]
[42.25545120 97.57489777]
[36.94538879 83.54624176]
[39.14965820 68.70908356]
[48.30867386 56.83000565]
[62.09731674 50.92464828]
[77.01519012 52.49214935]
[89.27522278 61.13457870]
[95.76506805 74.65796661]
[94.83630371 89.63198853]
[97.53371429 74.87651825]
[95.99282837 65.78540802]
[100.46242523 59.81969452]
[103.49261475 45.12894821]
[106.52280426 30.43820572]
[109.55299377 15.74746227]
[101.47431183 -4.04057026]
[115.56413269 -19.05875206]
[117.59202576 -33.92104340]
[119.61992645 -48.78332901]
[107.11214447 -57.51790237]
[100.58607483 -71.83749390]
[102.29940033 -87.96424103]
[112.26110840 -101.36584473]
[128.09576416 -108.02895355]
[124.40483856 -122.56776428]
[120.71391296 -137.10658264]
[117.02297974 -151.64538574]
[113.33205414 -166.18420410]
[109.64112091 -180.72300720]
[105.95018768 -195.26182556]
[102.25926208 -209.80062866]
[91.36415100 -221.27265930]
[95.73186493 -235.51246643]
[92.04093170 -250.05128479]
[88.35000610 -264.59008789]
[84.65907288 -279.12890625]
[73.95523834 -286.42364502]
[71.21350861 -298.67175293]
[77.37880707 -309.14050293]
[74.01738739 -323.75900269]
[63.38432312 -335.47433472]
[68.07273102 -349.61178589]
[64.71131134 -364.23031616]
[50.00415802 -368.65695190]
[39.49240112 -379.85510254]
[36.00365829 -394.81250000]
[40.47637558 -409.50570679]
[51.70742035 -419.98233032]
[66.67569733 -423.42416382]
[81.35481262 -418.90542603]
[91.79615784 -407.64160156]
[95.19107056 -392.66259766]
[90.62632751 -377.99771118]
[79.32982635 -367.59173584]
[82.69124603 -352.97320557]
[93.08387756 -342.30352783]
[88.63589478 -327.12042236]
[91.99731445 -312.50192261]
[104.63077545 -300.37341309]
[99.19788361 -282.81982422]
[102.88881683 -268.28103638]
[106.57974243 -253.74221802]
[110.27067566 -239.20339966]
[120.90177917 -228.77130127]
[116.79807281 -213.49156189]
[120.48899841 -198.95275879]
[124.17993164 -184.41394043]
[127.87086487 -169.87513733]
[131.56179810 -155.33631897]
[135.25271606 -140.79751587]
[138.94364929 -126.25869751]
[142.63458252 -111.71988678]
[155.73649597 -104.41646576]
[170.04365540 -108.92256165]
[184.35083008 -113.42865753]
[198.65800476 -117.93475342]
[212.96516418 -122.44084930]
[227.27233887 -126.94694519]
[241.57951355 -131.45304871]
[252.25755310 -143.89938354]
[268.32333374 -140.60955811]
[273.24975586 -124.96786499]
[261.96890259 -113.06513214]
[246.08560181 -117.14587402]
[231.77844238 -112.63977814]
[217.47126770 -108.13368225]
[203.16409302 -103.62758636]
[188.85693359 -99.12149048]
[174.54975891 -94.61539459]
[160.24258423 -90.10929871]
[162.72845459 -74.85948944]
[158.04795837 -60.70334244]
[147.73626709 -50.69691467]
[134.48220825 -46.75543594]
[132.45431519 -31.89314651]
[130.42642212 -17.03085709]
[136.97770691 -10.82298565]
[139.93588257 -2.14980388]
[138.50076294 7.04102898]
[132.87437439 14.62188721]
[124.24373627 18.77765083]
[121.21354675 33.46839523]
[118.18335724 48.15913773]
[115.15316772 62.84988403]
[112.28918457 77.57392883]
[109.59177399 92.32940674]
[111.28327179 107.23372650]
[117.21870422 121.00945282]
[123.15413666 134.78518677]
[129.08956909 148.56091309]
[135.02499390 162.33663940]
[149.34066772 169.57826233]
[152.46339417 185.31446838]
[141.99769592 197.47377014]
[125.97196198 196.72860718]
[116.67975616 183.65058899]
[121.24926758 168.27206421]
[115.31384277 154.49633789]
[109.37841034 140.72061157]
[103.44297791 126.94488525]
[97.50754547 113.16915894]
[90.00754547 113.16915894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[25 122]
[26 121]
[28 120]
[29 119]
[30 118]
[31 117]
[33 112]
[34 111]
[35 110]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[49 79]
[50 78]
[51 77]
[52 76]
[55 74]
[56 73]
[58 71]
[59 70]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[123 137]
[124 136]
[125 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
