%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGUGAAAUGCCCAGGAUGCUAUAAAAUCACCACGGUCUUUAGCCAUGCACAAACGGUAGUUUUGUGUGUUGGCUGCUCCACUGUCCUCUGCCAGCCUACAGGAGGAAAAGCAAGGCUUACAGAAGGAUGUUCCUUCAGGAGGAAGCAGCACUAA\
) } def
/len { sequence length } bind def

/coor [
[97.72503662 301.49307251]
[82.39278412 300.58886719]
[69.57559204 292.12628174]
[62.72122574 278.38171387]
[63.67346954 263.05236816]
[72.17617798 250.26177979]
[85.94216919 243.45053101]
[86.82522583 228.47654724]
[87.70829010 213.50256348]
[80.22116089 206.45602417]
[77.82561493 196.23109436]
[81.55654144 186.17913818]
[90.39894867 179.73359680]
[91.86920166 164.80583191]
[93.33946228 149.87805176]
[86.29435730 147.43426514]
[79.82007599 144.02371216]
[74.04472351 139.76042175]
[69.07540131 134.77470398]
[64.99629211 129.20932007]
[52.05527878 136.79417419]
[39.11426163 144.37904358]
[37.72739792 159.83401489]
[27.49585915 171.50000000]
[12.35388279 174.89118958]
[-1.87613308 168.70359802]
[-9.72245693 155.31648254]
[-8.16801643 139.87745667]
[2.18947411 128.32315063]
[17.36734772 125.09642792]
[31.52940369 131.43801880]
[44.47041702 123.85316467]
[57.41143417 116.26830292]
[55.23820114 108.65013885]
[54.41656494 100.77079010]
[54.97133636 92.86816406]
[56.88576508 85.18088531]
[60.10203934 77.94107056]
[64.52304840 71.36734009]
[54.55926132 60.15471268]
[42.72009659 61.78052139]
[31.68770027 57.51005554]
[24.18278885 48.52131653]
[21.99540520 37.13993454]
[25.55899620 26.23811531]
[16.04309654 14.64295864]
[6.52719736 3.04780149]
[-2.98870206 -8.54735565]
[-12.50460148 -20.14251137]
[-22.02050018 -31.73766899]
[-31.64977455 -43.23884583]
[-41.39149475 -54.64493561]
[-51.13321686 -66.05102539]
[-60.87493515 -77.45711517]
[-70.61666107 -88.86320496]
[-80.35837555 -100.26929474]
[-90.10009766 -111.67538452]
[-99.84181976 -123.08147430]
[-109.69504547 -134.39137268]
[-125.42015839 -139.04464722]
[-128.98925781 -155.05068970]
[-116.73075104 -165.94386292]
[-101.25514984 -160.51820374]
[-98.48242188 -144.35516357]
[-91.65313721 -141.42895508]
[-88.43572998 -132.82319641]
[-78.69400787 -121.41710663]
[-68.95228577 -110.01101685]
[-59.21056747 -98.60492706]
[-49.46884918 -87.19883728]
[-39.72712708 -75.79274750]
[-29.98540497 -64.38665771]
[-20.24368477 -52.98056793]
[-13.47317123 -49.92083740]
[-10.42534351 -41.25356674]
[-0.90944451 -29.65841103]
[8.60645485 -18.06325531]
[18.12235451 -6.46809769]
[27.63825417 5.12705898]
[37.15415192 16.72221565]
[55.41083527 17.38017654]
[67.63780975 31.37873650]
[65.77188873 50.19092560]
[75.73567200 61.40354919]
[92.61041260 55.01291656]
[110.64276123 55.66970444]
[127.00788116 63.27101898]
[139.14208984 76.62608337]
[153.11032104 71.15902710]
[167.07853699 65.69197083]
[181.04676819 60.22491074]
[195.01498413 54.75785446]
[208.92886353 49.15393066]
[222.78706360 43.41367722]
[236.64526367 37.67342758]
[242.76176453 23.34770966]
[256.89770508 17.72369385]
[270.51739502 23.64312744]
[284.37557983 17.90287590]
[298.23379517 12.16262436]
[312.09197998 6.42237329]
[325.95016479 0.68212181]
[325.57025146 -14.49088383]
[330.70083618 -28.77520561]
[340.64797974 -40.23900604]
[354.06643677 -47.33189774]
[369.14147949 -49.09462738]
[383.83435059 -45.28879929]
[396.15792847 -36.42912292]
[404.44555664 -23.71379471]
[407.57641602 -8.86245728]
[405.12707520 6.11636543]
[397.42877197 19.19691277]
[385.52267456 28.61014557]
[371.01895142 33.08300400]
[355.87911987 32.01057053]
[342.15072632 25.53787994]
[331.69042969 14.54031467]
[317.83221436 20.28056717]
[303.97402954 26.02081871]
[290.11584473 31.76106834]
[276.25765991 37.50131989]
[270.81274414 51.31756592]
[256.84033203 57.33641434]
[242.38551331 51.53162003]
[228.52731323 57.27187347]
[214.66912842 63.01212311]
[209.66694641 68.50575256]
[200.48205566 68.72608185]
[186.51382446 74.19313812]
[172.54559326 79.66019440]
[158.57737732 85.12725067]
[144.60914612 90.59430695]
[145.65809631 114.66478729]
[133.98399353 137.11161804]
[143.72570801 148.51770020]
[153.46742249 159.92379761]
[163.20915222 171.32987976]
[172.95086670 182.73597717]
[182.69259644 194.14205933]
[197.57696533 202.25944519]
[193.89720154 218.80924988]
[176.97552490 219.85473633]
[171.28649902 203.88378906]
[161.54478455 192.47769165]
[151.80305481 181.07160950]
[142.06134033 169.66551208]
[132.31962585 158.25942993]
[122.57789612 146.85333252]
[108.26723480 151.34831238]
[106.79697418 166.27609253]
[105.32672119 181.20385742]
[114.49738312 199.11723328]
[102.68227386 214.38562012]
[101.79920959 229.35960388]
[100.91615295 244.33358765]
[113.78614044 252.71565247]
[120.72653961 266.41696167]
[119.87041473 281.75198364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 156]
[8 155]
[9 154]
[13 152]
[14 151]
[15 150]
[20 33]
[21 32]
[22 31]
[39 84]
[40 83]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 64]
[88 133]
[89 132]
[90 131]
[91 130]
[92 129]
[93 127]
[94 126]
[95 125]
[98 122]
[99 121]
[100 120]
[101 119]
[102 118]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
[140 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
