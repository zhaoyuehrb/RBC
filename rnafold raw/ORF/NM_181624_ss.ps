%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sat Sep 12 04:53:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUACAACUGCUGCUGUGGAAACUUCUCCUCCCAUUCCUGUGAGGGCUACCUGUGCUACUCAGGCUACUCCCGUGGUGGCUCCUCGUACCCCAGCAACCUGGUCUACAGCACUGAACCUUUGAUCUCCCAGCACCUGCCAGCUGGGUUCCUCUCUCUGCAAGGGCUUUCAGGAGACUUGCUGGGAAACCCCUAG\
) } def
/len { sequence length } bind def

/coor [
[115.50558472 189.41523743]
[104.28054810 179.46542358]
[97.18725586 166.24858093]
[95.10037994 151.39445496]
[98.27617645 136.73736572]
[97.64366913 121.75070190]
[91.01376343 135.20597839]
[84.38385773 148.66123962]
[77.75395203 162.11651611]
[71.12404633 175.57179260]
[71.96495819 191.37063599]
[59.39908218 199.36738586]
[61.01634979 215.68659973]
[47.53620911 225.02565002]
[32.82587433 217.77732849]
[32.01807785 201.39808655]
[45.94380951 192.73748779]
[44.62868500 177.90104675]
[57.66877365 168.94187927]
[64.29867554 155.48661804]
[70.92858124 142.03134155]
[77.55848694 128.57606506]
[84.18839264 115.12079620]
[71.91930389 123.75036621]
[59.65021515 132.37992859]
[47.38112259 141.00949097]
[35.11203384 149.63906860]
[26.50467110 161.92373657]
[14.45180321 170.85281372]
[0.19254892 175.50831604]
[-14.80713940 175.41162109]
[-29.00518799 170.57266235]
[-40.94193649 161.48893738]
[-49.39020157 149.09431458]
[-53.48144531 134.66304016]
[-52.79505539 119.67875671]
[-47.40159988 105.68194580]
[-37.85556030 94.11158752]
[-25.13834381 86.15719604]
[-10.55736446 82.63653564]
[4.38834810 83.91156006]
[18.16061592 89.85012817]
[33.13323212 90.75609589]
[48.10584641 91.66207123]
[63.07846069 92.56803894]
[78.05107880 93.47401428]
[65.34571838 85.50069427]
[52.64035797 77.52737427]
[39.93499756 69.55405426]
[27.16709518 61.68127060]
[14.33744907 53.90951538]
[1.50780284 46.13776016]
[-11.32184315 38.36600494]
[-24.15148926 30.59424973]
[-36.98113632 22.82249451]
[-56.04589081 32.46163559]
[-76.93186951 28.66452980]
[-91.20178986 13.13029575]
[-93.19085693 -7.73411036]
[-106.69804382 -14.25760174]
[-120.20523071 -20.78109360]
[-135.76637268 -16.87845993]
[-148.43185425 -26.72554588]
[-148.48580933 -42.76850891]
[-135.88684082 -52.70055771]
[-120.29980469 -48.90267944]
[-113.68173981 -34.28827667]
[-100.17455292 -27.76478767]
[-86.66736603 -21.24129486]
[-80.06777191 -27.51923943]
[-71.97737122 -31.75486374]
[-63.01200104 -33.61122131]
[-53.85808563 -32.93302917]
[-45.22012711 -29.75956917]
[-37.76644516 -24.32264900]
[-32.07749557 -17.02973175]
[-28.60066605 -8.43340111]
[-27.61510849 0.81048745]
[-29.20937920 9.99284840]
[-16.37973404 17.76460266]
[-3.55008769 25.53635979]
[9.27955818 33.30811310]
[22.10920525 41.07986832]
[34.93885040 48.85162354]
[42.29593277 49.62910461]
[47.90831375 56.84869385]
[60.61367416 64.82201385]
[73.31903839 72.79533386]
[86.02439880 80.76864624]
[93.58792114 79.31338501]
[100.53313446 80.46524811]
[106.05957031 83.66098785]
[109.66302490 88.12356567]
[111.18022156 92.99145508]
[125.67420197 89.12823486]
[140.16818237 85.26500702]
[154.66217041 81.40178680]
[169.15614319 77.53856659]
[183.65013123 73.67534637]
[198.14411926 69.81212616]
[201.12123108 66.62085724]
[204.60974121 64.73828125]
[208.13345337 64.16412354]
[211.26559448 64.74287415]
[213.67518616 66.19348145]
[228.38406372 63.25261307]
[243.09295654 60.31174469]
[257.80184937 57.37087250]
[272.51071167 54.43000412]
[275.68328857 51.43296814]
[279.28363037 49.77429199]
[282.83657837 49.42364883]
[285.92593384 50.19889450]
[288.23919678 51.79867172]
[296.33438110 47.54553223]
[303.35464478 49.87944794]
[318.24960327 48.10757065]
[333.14459229 46.33568954]
[348.03958130 44.56381226]
[362.93457031 42.79193115]
[377.79971313 40.78513718]
[392.63131714 38.54393005]
[407.46295166 36.30271912]
[422.29458618 34.06151199]
[437.12619019 31.82030106]
[451.95782471 29.57909203]
[458.39941406 9.02420807]
[474.28521729 -5.41687393]
[495.21859741 -9.84557343]
[515.45532227 -3.12089014]
[529.47973633 12.84776878]
[543.91088867 8.75622368]
[558.34210205 4.66467857]
[572.77331543 0.57313323]
[587.20446777 -3.51841187]
[601.63568115 -7.60995722]
[606.85968018 -22.22123528]
[619.69323730 -30.94359207]
[635.20159912 -30.42310333]
[647.42144775 -20.85990715]
[651.65399170 -5.93125010]
[646.27185059 8.62249756]
[633.34442139 17.20512199]
[617.84259033 16.51642799]
[605.72723389 6.82123327]
[591.29602051 10.91277885]
[576.86486816 15.00432396]
[562.43365479 19.09586906]
[548.00244141 23.18741417]
[533.57128906 27.27895927]
[533.43212891 36.30941772]
[531.29638672 45.09691238]
[527.26483154 53.20498657]
[521.53247070 60.22975540]
[514.37908936 65.81999969]
[506.15588379 69.69474792]
[497.26785278 71.65738678]
[488.15405273 71.60562897]
[479.26596069 69.53681946]
[471.04492188 65.54836273]
[463.90036011 59.83310699]
[458.18942261 52.67004776]
[454.19903564 44.41071320]
[439.36740112 46.65192032]
[424.53576660 48.89313126]
[409.70416260 51.13433838]
[394.87252808 53.37554932]
[380.04092407 55.61675644]
[376.53082275 58.86843872]
[370.93777466 59.94334793]
[364.70642090 57.68691254]
[349.81146240 59.45878983]
[334.91647339 61.23067093]
[320.02148438 63.00254822]
[305.12652588 64.77442932]
[290.24597168 66.66382599]
[275.45159912 69.13889313]
[260.74270630 72.07975769]
[246.03381348 75.02062988]
[231.32493591 77.96149445]
[216.61605835 80.90236664]
[202.00733948 84.30610657]
[187.51335144 88.16932678]
[173.01937866 92.03254700]
[158.52539062 95.89577484]
[144.03140259 99.75899506]
[129.53742981 103.62221527]
[115.04344177 107.48543549]
[129.61523438 111.04392242]
[144.61331177 110.80385590]
[158.76966858 115.76343536]
[170.33868408 125.31110382]
[177.89376831 138.26953125]
[180.50329590 153.04080200]
[177.84548950 167.80345154]
[170.24807739 180.73710632]
[158.64790344 190.24690247]
[144.47540283 195.16017151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[12 17]
[46 89]
[47 88]
[48 87]
[49 86]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[59 69]
[60 68]
[61 67]
[94 188]
[95 187]
[96 186]
[97 185]
[98 184]
[99 183]
[100 182]
[105 181]
[106 180]
[107 179]
[108 178]
[109 177]
[114 176]
[116 175]
[117 174]
[118 173]
[119 172]
[120 171]
[121 168]
[122 167]
[123 166]
[124 165]
[125 164]
[126 163]
[131 150]
[132 149]
[133 148]
[134 147]
[135 146]
[136 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
