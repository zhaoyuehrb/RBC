%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 13:14:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGCUAUGGCUACGGCUGUGGAUGUGGCAGCUUCUGCAGACUGGGCUAUGGCUGCGGCUAUGAAGGAUGCAGAUAUGGUUGUGGCCACAGAGGCUGUGGAGAUGGCUGCUGCUGCCCAUCAUGCUACAGAAGAUAUAGAUUCACUGGCUUCUACUAA\
) } def
/len { sequence length } bind def

/coor [
[69.63989258 133.48944092]
[76.22930908 120.01429749]
[89.25202179 112.56990051]
[75.39382935 118.31015015]
[61.59265518 124.18618011]
[47.84983826 130.19740295]
[34.10701752 136.20864868]
[20.36419868 142.21987915]
[6.62137842 148.23110962]
[-7.12144089 154.24234009]
[-20.86425972 160.25357056]
[-34.60707855 166.26480103]
[-48.34989929 172.27603149]
[-55.00038910 178.61494446]
[-62.42205048 178.26744080]
[-76.28024292 184.00769043]
[-90.13843536 189.74794006]
[-103.93960571 195.62396240]
[-117.68242645 201.63519287]
[-131.42524719 207.64642334]
[-145.16806030 213.65766907]
[-158.91088867 219.66889954]
[-172.65370178 225.68013000]
[-186.39653015 231.69136047]
[-195.93936157 244.31057739]
[-210.70065308 242.32220459]
[-224.44346619 248.33343506]
[-233.72831726 261.85095215]
[-250.05389404 260.29922485]
[-256.62582397 245.27453613]
[-246.68348694 232.23298645]
[-230.45469666 234.59062195]
[-216.71188354 228.57937622]
[-208.15202332 216.39012146]
[-192.40776062 217.94853210]
[-178.66493225 211.93730164]
[-164.92211914 205.92607117]
[-151.17930603 199.91484070]
[-137.43647766 193.90361023]
[-123.69365692 187.89237976]
[-109.95084381 181.88114929]
[-105.05748749 176.29035950]
[-95.87868500 175.88973999]
[-82.02049255 170.14949036]
[-68.16230011 164.40924072]
[-54.36112976 158.53321838]
[-40.61831284 152.52198792]
[-26.87549210 146.51075745]
[-13.13267326 140.49952698]
[0.61014593 134.48828125]
[14.35296535 128.47705078]
[28.09578514 122.46582031]
[41.83860397 116.45458984]
[55.58142471 110.44335938]
[60.47478104 104.85256958]
[69.65357208 104.45195770]
[83.51177216 98.71170807]
[94.62603760 88.63832092]
[101.69698334 75.40950775]
[108.76793671 62.18068695]
[110.06629944 53.08535385]
[116.10979462 48.76355362]
[123.43911743 35.67611313]
[130.76843262 22.58867455]
[138.09774780 9.50123405]
[138.09004211 -6.31997061]
[151.05963135 -13.64385509]
[158.38894653 -26.73129463]
[158.68780518 -33.42004395]
[161.87081909 -38.20681381]
[166.27163696 -40.18046951]
[174.10911560 -52.97007370]
[181.94659424 -65.75967407]
[189.78407288 -78.54927826]
[184.01060486 -92.83119965]
[187.71057129 -107.60156250]
[199.26177979 -117.24696350]
[214.10000610 -118.22926331]
[221.93748474 -131.01887512]
[229.77496338 -143.80847168]
[237.61244202 -156.59806824]
[245.44992065 -169.38768005]
[253.28739929 -182.17727661]
[261.12487793 -194.96687317]
[257.65277100 -210.15182495]
[265.78329468 -223.01065063]
[280.28121948 -226.22717285]
[288.11868286 -239.01678467]
[295.95617676 -251.80638123]
[303.79364014 -264.59597778]
[311.63113403 -277.38558960]
[319.46859741 -290.17520142]
[322.58917236 -306.83947754]
[339.46606445 -308.45397949]
[345.68948364 -292.68359375]
[332.25820923 -282.33770752]
[324.42071533 -269.54809570]
[316.58325195 -256.75851440]
[308.74575806 -243.96890259]
[300.90829468 -231.17930603]
[293.07080078 -218.38969421]
[296.78677368 -204.01168823]
[289.02066040 -190.92956543]
[273.91448975 -187.12939453]
[266.07699585 -174.33979797]
[258.23953247 -161.55020142]
[250.40203857 -148.76058960]
[242.56455994 -135.97099304]
[234.72708130 -123.18138885]
[226.88960266 -110.39178467]
[232.75077820 -96.72486877]
[229.40080261 -82.05375671]
[217.92005920 -72.05145264]
[202.57368469 -70.71179962]
[194.73620605 -57.92219925]
[186.89872742 -45.13259506]
[179.06124878 -32.34299088]
[171.47637939 -19.40197754]
[164.14706421 -6.31453657]
[164.67901611 8.57056618]
[151.18519592 16.83055305]
[143.85588074 29.91799164]
[136.52655029 43.00543213]
[129.19723511 56.09287262]
[121.99675751 69.25163269]
[114.92580414 82.48045349]
[107.85485077 95.70927429]
[113.61560822 96.97605896]
[118.90693665 101.19020081]
[122.53643036 108.08070374]
[132.27815247 119.48679352]
[142.01986694 130.89288330]
[151.76159668 142.29896545]
[161.50331116 153.70506287]
[172.44311523 153.93701172]
[181.25157166 160.05035400]
[185.13275146 169.80863953]
[183.01942444 179.87068176]
[192.30583191 191.65043640]
[201.59223938 203.43019104]
[217.29096985 206.73616028]
[224.36520386 221.13526917]
[217.38821411 235.58177185]
[201.71214294 238.99351501]
[189.36231995 228.75332642]
[189.81248474 212.71659851]
[180.52607727 200.93684387]
[171.23966980 189.15708923]
[152.81625366 183.38661194]
[150.09722900 163.44677734]
[140.35549927 152.04069519]
[130.61378479 140.63459778]
[120.87206268 129.22851562]
[111.13034058 117.82241821]
[119.35388184 130.36727905]
[119.10771179 145.36524963]
[110.47689819 157.63346863]
[96.44402313 162.93237305]
[81.85844421 159.43078613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[15 45]
[16 44]
[17 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[27 32]
[58 127]
[59 126]
[60 125]
[62 124]
[63 123]
[64 122]
[65 121]
[67 119]
[68 118]
[71 117]
[72 116]
[73 115]
[74 114]
[78 110]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
[130 154]
[131 153]
[132 152]
[133 151]
[134 150]
[138 148]
[139 147]
[140 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
