%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:12:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUAGGAGAUUGACUUUUGCACAACUGCUUUUUGCCACUGUCCUUGGAAUUGCUGGAGGAGUAUAUAUUUUUCAACCAGUAUUUGAACAGUAUGCCAAAGAUCAGAAGGAAUUAAAAGAAAAGAUGCAGUUGGUACAAGAAUCAGAAGAGAAGAAAAGUUAA\
) } def
/len { sequence length } bind def

/coor [
[97.06468201 557.46368408]
[89.03360748 544.73626709]
[83.64013672 530.68646240]
[81.09158325 515.85437012]
[81.48590088 500.81005859]
[84.80792999 486.13183594]
[90.92998505 472.38388062]
[99.61676025 460.09460449]
[110.53433990 449.73638916]
[123.26309204 441.70736694]
[137.31376648 436.31619263]
[134.77119446 421.53323364]
[132.22860718 406.75030518]
[129.68603516 391.96734619]
[126.33567047 388.50769043]
[125.15119934 382.89260864]
[127.33805084 376.57772827]
[125.35670471 361.70916748]
[123.37535858 346.84057617]
[114.02471161 335.24685669]
[119.87136078 320.54559326]
[117.89001465 305.67700195]
[115.90866852 290.80844116]
[111.89035034 284.56604004]
[114.03327179 275.64007568]
[112.33365631 260.73666382]
[110.63404083 245.83326721]
[108.93442535 230.92987061]
[107.23481750 216.02647400]
[105.53520203 201.12307739]
[103.83558655 186.21968079]
[101.99501801 171.33302307]
[100.01367950 156.46446228]
[98.03233337 141.59588623]
[96.05098724 126.72732544]
[94.06964111 111.85875702]
[87.34329224 103.01230621]
[89.76230621 92.38116455]
[85.28933716 78.06360626]
[71.46271515 65.93284607]
[75.91796875 48.97824097]
[71.17485046 34.74789047]
[66.43173981 20.51753998]
[61.55418015 6.33270931]
[56.54261780 -7.80533314]
[44.63923645 -18.22743034]
[47.67968750 -32.80840683]
[42.66812515 -46.94644928]
[37.65656281 -61.08449173]
[32.64500046 -75.22253418]
[19.87668419 -79.59246826]
[12.08182049 -90.36950684]
[11.93358326 -103.47434998]
[19.26158524 -114.10401917]
[14.51846981 -128.33436584]
[9.77535439 -142.56471252]
[5.03223991 -156.79505920]
[0.28912482 -171.02542114]
[-14.35706425 -175.79986572]
[-23.27926064 -188.13873291]
[-23.22569084 -203.18736267]
[-14.42648029 -215.17535400]
[-19.16959572 -229.40570068]
[-23.91271019 -243.63604736]
[-28.65582466 -257.86639404]
[-33.39894104 -272.09674072]
[-38.14205551 -286.32708740]
[-53.30716705 -287.37008667]
[-66.91654205 -294.14160156]
[-76.89484406 -305.60903931]
[-81.72046661 -320.02368164]
[-80.65752411 -335.18740845]
[-73.86811829 -348.78784180]
[-62.38757324 -358.75106812]
[-47.96659851 -363.55770874]
[-32.80428314 -362.47482300]
[-19.21277046 -355.66754150]
[-9.26467037 -344.17388916]
[-4.47699213 -329.74661255]
[-5.57982349 -314.58572388]
[-12.40499115 -301.00317383]
[-23.91170502 -291.07022095]
[-19.16859055 -276.83987427]
[-14.42547512 -262.60952759]
[-9.68236065 -248.37916565]
[-4.93924570 -234.14881897]
[-0.19613050 -219.91847229]
[14.03584957 -215.60699463]
[23.10737038 -203.59985352]
[23.37229347 -188.37542725]
[14.51947498 -175.76852417]
[19.26259041 -161.53817749]
[24.00570488 -147.30783081]
[28.74881935 -133.07748413]
[33.49193573 -118.84712982]
[48.82893753 -111.99538422]
[54.59872437 -95.86089325]
[46.78304291 -80.23410034]
[51.79460526 -66.09605408]
[56.80616760 -51.95801163]
[61.81772995 -37.81996918]
[73.36264801 -28.40912056]
[70.68065643 -12.81689548]
[75.69222260 1.32114673]
[80.91394806 6.59829378]
[80.66208649 15.77442551]
[85.40520477 30.00477600]
[90.14831543 44.23512650]
[100.84453583 49.94357300]
[104.89677429 61.79554367]
[99.60689545 73.59063721]
[104.07986450 87.90819550]
[110.12619781 74.18078613]
[122.03022003 65.05422211]
[136.85665894 62.77893066]
[150.94960022 67.91595459]
[160.83401489 79.19860840]
[164.07261658 93.84481812]
[159.86682129 108.24312592]
[149.25370789 118.84320831]
[134.85023499 123.03129578]
[120.20801544 119.77468872]
[108.93820953 109.87741089]
[110.91955566 124.74597931]
[112.90090179 139.61454773]
[114.88224030 154.48310852]
[116.86358643 169.35168457]
[121.11593628 177.48693848]
[118.73898315 184.52006531]
[120.43859863 199.42346191]
[122.13821411 214.32685852]
[123.83782959 229.23025513]
[125.53744507 244.13365173]
[127.23706055 259.03704834]
[128.93667603 273.94046021]
[130.77723694 288.82711792]
[132.75857544 303.69567871]
[134.73992920 318.56423950]
[144.23228455 331.22146606]
[138.24392700 344.85925293]
[140.22526550 359.72781372]
[142.20661926 374.59637451]
[144.46897888 389.42477417]
[147.01155090 404.20773315]
[149.55412292 418.99066162]
[152.09669495 433.77359009]
[167.14118958 434.16061401]
[181.82102966 437.47552490]
[195.57196045 443.59091187]
[207.86544800 452.27169800]
[218.22897339 463.18426514]
[226.26416016 475.90911865]
[231.66217041 489.95715332]
[234.21553040 504.78842163]
[233.82609558 519.83282471]
[230.50880432 534.51214600]
[224.39120483 548.26208496]
[215.70841980 560.55419922]
[204.79418945 570.91595459]
[192.06802368 578.94903564]
[178.01910400 584.34478760]
[163.18742371 586.89575195]
[148.14306641 586.50390625]
[133.46430969 583.18420410]
[119.71534729 577.06439209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 146]
[12 145]
[13 144]
[14 143]
[17 142]
[18 141]
[19 140]
[21 138]
[22 137]
[23 136]
[25 135]
[26 134]
[27 133]
[28 132]
[29 131]
[30 130]
[31 129]
[32 127]
[33 126]
[34 125]
[35 124]
[36 123]
[38 112]
[39 111]
[41 108]
[42 107]
[43 106]
[44 104]
[45 103]
[47 101]
[48 100]
[49 99]
[50 98]
[54 95]
[55 94]
[56 93]
[57 92]
[58 91]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
