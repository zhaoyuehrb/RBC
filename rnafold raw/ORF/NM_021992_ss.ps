%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 06:44:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUGAUAAGCCAGACUUGUCGGAAGUGGAGAAGUUUGACAGGUCAAAACUGAAGAAAACUAAUACUGAAGAAAAAAAUACUCUUCCCUCAAAGGAAACUAUCCAGCAAGAGAAAGAGUGUGUUCAAACAUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[91.92602539 278.49517822]
[77.49813843 272.46438599]
[70.36820984 258.54684448]
[73.90277863 243.31396484]
[86.43292236 233.95823669]
[87.11073303 218.97355652]
[87.78854370 203.98887634]
[88.46635437 189.00419617]
[89.14416504 174.01953125]
[76.90139771 171.15612793]
[65.31107330 166.28286743]
[54.70056534 159.53738403]
[45.36957550 151.11022949]
[37.58166504 141.23942566]
[31.55680656 130.20378113]
[27.46518326 118.31501007]
[12.62675858 120.51073456]
[-2.21166492 122.70645142]
[-17.05008888 124.90216827]
[-31.88851357 127.09788513]
[-46.72693634 129.29359436]
[-61.56536102 131.48931885]
[-76.40378571 133.68502808]
[-91.24221039 135.88075256]
[-106.08063507 138.07646179]
[-120.91905975 140.27218628]
[-130.33749390 152.67906189]
[-145.41705322 154.69445801]
[-157.18707275 145.63894653]
[-169.69268799 156.24751282]
[-185.03950500 150.46760559]
[-187.44003296 134.24510193]
[-174.42480469 124.26832581]
[-159.38279724 130.80052185]
[-150.73973083 118.72438812]
[-135.72273254 116.28623962]
[-123.11477661 125.43376160]
[-108.27635193 123.23804474]
[-93.43792725 121.04232788]
[-78.59950256 118.84661102]
[-63.76107788 116.65089417]
[-48.92265320 114.45517731]
[-34.08422852 112.25946045]
[-19.24580574 110.06374359]
[-4.40738201 107.86802673]
[10.43104172 105.67230988]
[25.26946640 103.47659302]
[26.58627892 85.60677338]
[32.11456299 68.56265259]
[41.53718567 53.32196808]
[54.31360245 40.75902939]
[69.71087646 31.59452820]
[65.04339600 17.33919334]
[51.22544479 10.14877701]
[46.69502258 -4.37465048]
[53.63514328 -17.50363922]
[48.96765518 -31.75897408]
[33.92091370 -34.83974075]
[22.44109154 -45.04313278]
[17.61620140 -59.62448883]
[20.74411583 -74.66149902]
[30.98344231 -86.10928345]
[45.57985306 -90.88845062]
[60.60698700 -87.71341705]
[72.02262115 -77.43825531]
[76.75600433 -62.82693481]
[73.53388214 -47.80982971]
[63.22299194 -36.42646027]
[67.89048004 -22.17112541]
[81.25161743 -15.68917847]
[86.18817902 -1.29873216]
[79.29872894 12.67170715]
[83.96621704 26.92704201]
[100.53517914 25.19055557]
[117.07760620 27.16391945]
[132.77314758 32.74927139]
[146.84344482 41.66963196]
[158.59072876 53.48263550]
[167.43247986 67.60246277]
[172.93020630 83.32891083]
[187.81445312 81.46909332]
[202.69871521 79.60928345]
[217.58297729 77.74946594]
[232.46722412 75.88964844]
[247.35148621 74.02983093]
[262.23574829 72.17001343]
[277.11999512 70.31020355]
[285.68560791 60.59341431]
[298.17913818 59.39146042]
[307.80267334 66.80718231]
[322.72515869 65.28421783]
[337.64764404 63.76124954]
[346.22091675 47.86414719]
[362.45114136 40.30231094]
[379.83160400 43.90153503]
[391.51651001 57.05368042]
[406.35494995 54.85796356]
[421.19335938 52.66224670]
[431.87088013 40.68851471]
[447.88107300 41.71486282]
[456.94229126 54.95396423]
[452.10354614 70.24991608]
[437.07669067 75.86897278]
[423.38906860 67.50067139]
[408.55065918 69.69638824]
[393.71221924 71.89210510]
[389.70590210 83.45181274]
[381.09033203 92.23979187]
[369.47622681 96.52452087]
[357.07312012 95.42478180]
[346.26901245 89.09006500]
[339.17062378 78.68373871]
[324.24813843 80.20670319]
[309.32565308 81.72966766]
[295.72433472 92.76184845]
[278.97979736 85.19445801]
[264.09555054 87.05427551]
[249.21130371 88.91408539]
[234.32704163 90.77390289]
[219.44277954 92.63372040]
[204.55853271 94.49353790]
[189.67427063 96.35335541]
[174.79002380 98.21316528]
[174.00270081 110.96990967]
[171.05545044 123.40646362]
[166.03427124 135.15985107]
[159.08570862 145.88700867]
[150.41261292 155.27484131]
[140.26808167 163.04934692]
[128.94824219 168.98361206]
[116.78347015 172.90441895]
[104.12883759 174.69734192]
[103.45102692 189.68200684]
[102.77321625 204.66668701]
[102.09540558 219.65136719]
[101.41759491 234.63604736]
[113.05191040 245.08482361]
[115.19677734 260.57461548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 136]
[6 135]
[7 134]
[8 133]
[9 132]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[29 34]
[52 73]
[53 72]
[56 69]
[57 68]
[80 123]
[81 122]
[82 121]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[90 114]
[91 113]
[92 112]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
