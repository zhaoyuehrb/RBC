%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sat Sep 12 09:05:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUCAACCAGUGAAAUUGACCUGCCCGUGAAGAGACUUUUAAGUUCAGUUUUUUAA\
) } def
/len { sequence length } bind def

/coor [
[139.42285156 224.34947205]
[124.63973999 221.80792236]
[112.95990753 212.39614868]
[107.33344269 198.49136353]
[109.18147278 183.60565186]
[118.03723145 171.49880981]
[131.66392517 165.22879028]
[146.62101746 166.37971497]
[136.79811096 155.04347229]
[126.97519684 143.70722961]
[117.15228271 132.37098694]
[110.23638916 129.30911255]
[107.18989563 120.45034027]
[97.77786255 108.77072144]
[93.77479553 107.81636810]
[90.26782990 104.99034882]
[88.13285828 100.58654022]
[88.06528473 95.30164337]
[79.95567322 82.68283844]
[71.84605408 70.06403351]
[65.83296967 66.51209259]
[63.10332870 61.19895554]
[63.64562607 56.24294662]
[56.45689011 43.07776260]
[49.26815414 29.91257668]
[31.04072762 25.45994568]
[21.80610466 9.48700333]
[26.86779404 -7.92955923]
[18.75818062 -20.54836273]
[10.64856911 -33.16716385]
[2.53895688 -45.78596878]
[-5.57065535 -58.40476990]
[-21.10429764 -60.20476151]
[-31.80912018 -71.60391998]
[-32.63063431 -87.21990967]
[-23.18094254 -99.67933655]
[-7.92190409 -103.09924316]
[5.94163084 -95.86485291]
[11.86372566 -81.39202881]
[7.04814768 -66.51438141]
[15.15775967 -53.89558029]
[23.26737213 -41.27677917]
[31.37698364 -28.65797424]
[39.48659515 -16.03917122]
[51.15976715 -16.05196953]
[61.44368744 -10.27690315]
[67.63482666 -0.09569043]
[68.03900909 11.93469334]
[62.43334198 22.72384071]
[69.62207794 35.88902664]
[76.81081390 49.05421066]
[84.46485901 61.95442581]
[92.57447052 74.57322693]
[100.68408203 87.19203186]
[109.45748138 99.35868073]
[118.86952209 111.03830719]
[128.48852539 122.54807281]
[138.31143188 133.88432312]
[148.13435364 145.22056580]
[157.95726013 156.55680847]
[169.63688660 165.96884155]
[182.80206299 173.15757751]
[195.96725464 180.34631348]
[209.13243103 187.53504944]
[222.29762268 194.72378540]
[235.46279907 201.91252136]
[248.62799072 209.10124207]
[261.79318237 216.28997803]
[275.28387451 208.80635071]
[290.67742920 209.82713318]
[303.06182861 219.02661133]
[308.48522949 233.46926880]
[305.21707153 248.54649353]
[294.30020142 259.44720459]
[279.21813965 262.69302368]
[264.78353882 257.24822998]
[255.60243225 244.85021973]
[254.60444641 229.45516968]
[241.43925476 222.26643372]
[228.27407837 215.07769775]
[215.10888672 207.88896179]
[201.94369507 200.70022583]
[188.77851868 193.51148987]
[175.61332703 186.32275391]
[162.44815063 179.13401794]
[166.75207520 193.50331116]
[163.52256775 208.15151978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 60]
[9 59]
[10 58]
[11 57]
[13 56]
[14 55]
[18 54]
[19 53]
[20 52]
[23 51]
[24 50]
[25 49]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
