%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:38:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCGACGAGGUUUCAGCUGUCUCUUACUUUCAACCACUGCAACUGACCUGCCCGUGAAGAGGCGGACAUAA\
) } def
/len { sequence length } bind def

/coor [
[111.54036713 248.51440430]
[116.92553711 234.18756104]
[128.35960388 224.01303101]
[117.73469543 213.57460022]
[121.84749603 198.29731750]
[118.16521454 183.75631714]
[114.48292542 169.21531677]
[99.95343018 156.72503662]
[104.93845367 137.39653015]
[100.06796265 123.20927429]
[95.19747162 109.02201843]
[89.65933990 102.82076263]
[90.43207550 94.14668274]
[86.15203094 79.77027130]
[81.87198639 65.39385986]
[66.58358765 52.56006622]
[71.15058899 33.95211411]
[65.69796753 19.97824669]
[60.24534988 6.00438023]
[54.79272842 -7.96948576]
[42.56825638 -18.01303291]
[45.14979172 -32.68221664]
[39.69717407 -46.65608215]
[34.24455261 -60.62994766]
[19.14298439 -59.73674774]
[4.50503635 -63.55586243]
[-8.23521519 -71.71314240]
[-17.82960892 -83.40940857]
[-23.33818626 -97.49879456]
[-24.22126961 -112.60095978]
[-20.39234543 -127.23634338]
[-12.22653294 -139.97113037]
[-0.52383482 -149.55767822]
[13.56923866 -155.05682373]
[28.67198944 -155.92977905]
[43.30480576 -152.09104919]
[56.03411484 -143.91670227]
[65.61282349 -132.20759583]
[71.10251617 -118.11083221]
[71.96536255 -103.00749969]
[68.11682892 -88.37725830]
[59.93395615 -75.65343475]
[48.21841812 -66.08256531]
[53.67103958 -52.10870361]
[59.12365723 -38.13483429]
[70.95812225 -29.09079361]
[68.76659393 -13.42210579]
[74.21921539 0.55176079]
[79.67183685 14.52562714]
[85.12445831 28.49949265]
[95.13095093 31.90592194]
[101.61782837 40.53279877]
[102.13354492 51.53757477]
[96.24839783 61.11381531]
[100.52844238 75.49022675]
[104.80848694 89.86663818]
[109.38472748 104.15152740]
[114.25522614 118.33878326]
[119.12571716 132.52604675]
[129.47987366 136.89993286]
[135.45477295 146.15582275]
[135.18830872 156.94616699]
[129.02392578 165.53303528]
[132.70622253 180.07403564]
[136.38850403 194.61503601]
[147.27677917 206.09353638]
[142.90060425 220.33074951]
[157.79908752 223.83695984]
[169.35403442 233.87399292]
[174.91017151 248.13540649]
[173.19076538 263.34402466]
[164.59091187 276.00503540]
[151.08679199 283.20901489]
[135.78155518 283.30053711]
[122.19224548 276.25860596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[5 65]
[6 64]
[7 63]
[9 59]
[10 58]
[11 57]
[13 56]
[14 55]
[15 54]
[17 50]
[18 49]
[19 48]
[20 47]
[22 45]
[23 44]
[24 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
