%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sat Sep 12 09:12:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCCACGAGGGUUCAGCUGUCUCUUACUUCCAACCAGUGAAACUGACCUGCCUGUGAAGAGGCGAACAUGA\
) } def
/len { sequence length } bind def

/coor [
[21.10181236 234.65756226]
[13.52063179 230.77284241]
[2.07437062 240.46733093]
[-9.37189007 250.16181946]
[-14.90197086 264.98507690]
[-29.61456108 267.30648804]
[-41.06082153 277.00097656]
[-52.50708389 286.69546509]
[-57.53277206 302.30554199]
[-73.61912537 305.49322510]
[-84.21788025 292.97927856]
[-78.42594910 277.63699341]
[-62.20157242 275.24920654]
[-50.75531006 265.55471802]
[-39.30904770 255.86021423]
[-34.59768295 241.73037720]
[-19.06637955 238.71556091]
[-7.62011814 229.02107239]
[3.82614303 219.32658386]
[2.35149479 197.01719666]
[17.16107368 179.94805908]
[39.93433762 178.22488403]
[48.13856125 165.66738892]
[56.34278488 153.10989380]
[64.54700470 140.55239868]
[72.75122833 127.99489594]
[80.95545197 115.43740082]
[89.15967560 102.87990570]
[97.10261536 90.15553284]
[104.78089142 77.26972198]
[112.45916748 64.38391876]
[106.50903320 50.17469025]
[110.02555847 35.35958099]
[121.45626068 25.57168007]
[136.28117371 24.40544510]
[143.95944214 11.51963520]
[139.31468201 -5.20083094]
[147.90638733 -19.89280891]
[164.10804749 -23.88341141]
[171.24725342 -37.07551956]
[178.38645935 -50.26762390]
[185.52568054 -63.45973206]
[187.74667358 -80.26757050]
[204.51249695 -82.78624725]
[211.57397461 -67.37287903]
[198.71778870 -56.32051849]
[191.57856750 -43.12841415]
[184.43936157 -29.93630791]
[177.30015564 -16.74420166]
[182.70117188 -4.86201906]
[180.14524841 8.13755703]
[170.36204529 17.35993195]
[156.84524536 19.19791031]
[149.16697693 32.08372116]
[155.19717407 45.67690277]
[152.02938843 60.38843536]
[140.67356873 70.53233337]
[125.34497833 72.06218719]
[117.66670227 84.94799805]
[109.98842621 97.83380890]
[108.83563995 106.06773376]
[101.71717072 111.08412933]
[93.51294708 123.64162445]
[85.30872345 136.19912720]
[77.10449982 148.75662231]
[68.90028381 161.31411743]
[60.69605637 173.87161255]
[52.49183655 186.42910767]
[57.32671356 193.74183655]
[59.84342575 202.11056519]
[59.84402466 210.82199097]
[57.34432220 219.13829041]
[52.57121658 226.35972595]
[45.94219589 231.88343811]
[38.02883530 235.25379944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 60]
[30 59]
[31 58]
[35 54]
[36 53]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
