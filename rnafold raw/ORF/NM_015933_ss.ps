%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 00:52:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCGGCCGCGAAGGUGGCAAGAAGAAGCCACUGAAACAGCCCAAGAAGCAGGCCAAGGAGAUGGACGAGGAAGAUAAGGCUUUCAAGCAGAAACAAAAAGAGGAGCAGAAGAAACUCGAGGAGCUAAAAGCGAAGGCCGCGGGGAAGGGGCCCUUGGCCACAGGUGGAAUUAAGAAAUCUGGCAAAAAGUAA\
) } def
/len { sequence length } bind def

/coor [
[32.95026398 380.56661987]
[37.67126465 366.32891846]
[48.21130753 355.65206909]
[52.89355850 341.40158081]
[57.57580566 327.15109253]
[62.25805664 312.90060425]
[54.76985550 312.48007202]
[43.82874298 322.74127197]
[32.88763428 333.00247192]
[38.18061066 347.22427368]
[37.62688065 362.34832764]
[31.34194374 376.07104492]
[20.31183815 386.31430054]
[6.23856878 391.54000854]
[-8.72247887 390.98101807]
[-22.29263687 384.75366211]
[-33.23374557 395.01483154]
[-44.17485809 405.27603149]
[-55.11596680 415.53723145]
[-66.05707550 425.79843140]
[-76.99819183 436.05963135]
[-74.92971039 451.43820190]
[-82.32520294 465.07955933]
[-96.34094238 471.73828125]
[-111.58759308 468.85397339]
[-122.20250702 457.53570557]
[-124.10403442 442.13558960]
[-116.56099701 428.57525635]
[-102.47384644 422.06896973]
[-87.25938416 425.11849976]
[-76.31827545 414.85729980]
[-65.37715912 404.59613037]
[-54.43605042 394.33493042]
[-43.49494171 384.07373047]
[-32.55382919 373.81253052]
[-37.89896011 359.87127686]
[-37.49823761 344.90515137]
[-31.38159752 331.19561768]
[-20.45268250 320.84445190]
[-6.35547352 315.45166016]
[8.77296448 315.86804199]
[22.62644005 322.06134033]
[33.56755066 311.80017090]
[44.50865936 301.53897095]
[38.95319748 293.48043823]
[35.62219620 284.49981689]
[34.62435913 275.18399048]
[35.91941833 266.11621094]
[39.32661819 257.83959961]
[44.54187012 250.82458496]
[51.16203308 245.44229126]
[58.71461487 241.94529724]
[66.69070435 240.45677185]
[74.57888794 240.96839905]
[79.30551147 226.73255920]
[84.03213501 212.49671936]
[88.75875854 198.26087952]
[93.48538208 184.02505493]
[98.21200562 169.78921509]
[102.93862915 155.55337524]
[107.66525269 141.31753540]
[93.73983765 141.25242615]
[80.69955444 136.65623474]
[69.96571350 128.09875488]
[62.68552399 116.57762909]
[59.60967255 103.40235138]
[61.01528931 90.04556274]
[66.68227386 77.97843933]
[75.92478180 68.50868988]
[74.48443604 53.57800293]
[73.04409027 38.64731598]
[71.60374451 23.71662903]
[57.48529053 20.86374664]
[44.75818253 14.15315914]
[34.45103836 4.13737249]
[27.39401627 -8.36439514]
[24.15197372 -22.33321571]
[24.97925377 -36.63349533]
[29.79975510 -50.10528564]
[38.21384430 -61.65838242]
[49.53145981 -70.36054230]
[62.82870865 -75.51271057]
[61.62785339 -90.46456146]
[60.42700195 -105.41641235]
[59.22614670 -120.36827087]
[57.90550613 -135.31002808]
[56.46516037 -150.24070740]
[41.84334564 -154.31095886]
[29.68159294 -163.39149475]
[21.62468147 -176.25425720]
[18.76224136 -191.15965271]
[21.48139381 -206.09185791]
[29.41439629 -219.03140259]
[41.48837662 -228.22833252]
[56.07042313 -232.43882751]
[71.18843842 -231.09346008]
[84.79783630 -224.37417603]
[95.05805206 -213.18971252]
[100.58148193 -199.05265808]
[100.62112427 -183.87495422]
[95.17161560 -169.70924377]
[84.96996307 -158.47132874]
[71.39585114 -151.68104553]
[72.83618927 -136.75036621]
[76.61248016 -130.38638306]
[74.17800140 -121.56912231]
[75.37885284 -106.61727142]
[76.57971191 -91.66541290]
[77.78056335 -76.71356201]
[93.04859161 -73.24436951]
[106.51497650 -65.21858215]
[116.85638428 -53.41090012]
[123.05227661 -38.96835327]
[124.48560333 -23.29886627]
[121.00419617 -7.93401098]
[112.93689728 5.62069082]
[101.06245422 16.03328896]
[86.53443146 22.27628326]
[87.97477722 37.20697021]
[89.41512299 52.13765717]
[90.85546875 67.06834412]
[97.55970764 70.43035889]
[104.28395844 57.02198410]
[117.69222260 63.74645996]
[110.96819305 77.15438843]
[117.67243195 80.51640320]
[130.49957275 72.74051666]
[143.32672119 64.96462250]
[153.73706055 51.58325195]
[169.47735596 57.88242340]
[167.78170776 74.75135803]
[151.10260010 77.79176331]
[138.27546692 85.56765747]
[125.44831848 93.34354401]
[127.52458954 100.55042267]
[141.93841553 96.39810944]
[146.09049988 110.81200409]
[131.67712402 114.96417999]
[133.75338745 122.17106628]
[148.75146484 121.93064117]
[163.74952698 121.69022369]
[177.42391968 113.73273468]
[190.27357483 121.26505280]
[201.08691406 109.73911285]
[216.88560486 109.31874847]
[228.29656982 120.25334930]
[228.54988098 136.05560303]
[217.49525452 147.35032654]
[201.69120789 147.43655396]
[190.51399231 136.26312256]
[177.91236877 144.20341492]
[163.98994446 136.68829346]
[148.99188232 136.92871094]
[133.99380493 137.16912842]
[121.90108490 146.04415894]
[117.17446136 160.27999878]
[112.44783783 174.51583862]
[107.72121429 188.75167847]
[102.99459076 202.98750305]
[98.26796722 217.22334290]
[93.54134369 231.45918274]
[88.81472015 245.69502258]
[107.82512665 270.89501953]
[96.14434814 304.43875122]
[105.86777496 315.86044312]
[115.59120178 327.28213501]
[125.31462860 338.70382690]
[135.03805542 350.12551880]
[149.95401001 346.69433594]
[164.75302124 350.59918213]
[176.03437805 360.94274902]
[181.20573425 375.34814453]
[179.07872009 390.50515747]
[170.14213562 402.93075562]
[156.44950867 409.76968384]
[141.14733887 409.45037842]
[127.75192261 402.04620361]
[119.34145355 389.25860596]
[117.84857941 374.02609253]
[123.61636353 359.84893799]
[113.89293671 348.42724609]
[104.16950989 337.00555420]
[94.44608307 325.58386230]
[84.72265625 314.16220093]
[77.23445892 313.74166870]
[80.29171753 328.42678833]
[83.34897614 343.11193848]
[86.40623474 357.79705811]
[95.68331146 369.58416748]
[98.78183746 384.26065063]
[95.06114960 398.79187012]
[85.29056549 410.17324829]
[71.49032593 416.05145264]
[56.51388168 415.21109009]
[43.45789337 407.82586670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[9 42]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[54 162]
[55 161]
[56 160]
[57 159]
[58 158]
[59 157]
[60 156]
[61 155]
[69 121]
[70 120]
[71 119]
[72 118]
[82 109]
[83 108]
[84 107]
[85 106]
[86 104]
[87 103]
[126 134]
[127 133]
[128 132]
[139 154]
[140 153]
[141 152]
[143 150]
[164 184]
[165 183]
[166 182]
[167 181]
[168 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
