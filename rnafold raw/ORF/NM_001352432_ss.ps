%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:25:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGUUCAUCUAUGGCCACUACAAACAAGCAACUGUGGGCGACAUAAAUACAGAACGGCCCGGGAUGUUGGACUUCACGGGCAAGGCCAAGUGGGAUGCCUGGAAUGAGCUGAAAGGGACUUCCAAGGAAGAUGCCAUGAAAGCUUACAUCAACAAAGUAGAAGAGCUAAAGAAAAAAUACGGGAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[134.26390076 480.69421387]
[133.28793335 465.72598267]
[124.73892975 453.52911377]
[131.56193542 439.25476074]
[130.58595276 424.28656006]
[129.60998535 409.31832886]
[128.63401794 394.35012817]
[112.28759766 385.32119751]
[104.60817719 368.13479614]
[108.85471344 349.64215088]
[123.49198914 337.33480835]
[121.78652954 322.43206787]
[120.08106232 307.52932739]
[110.94688416 295.76431274]
[117.06496429 281.17391968]
[115.35950470 266.27117920]
[113.65404510 251.36845398]
[111.94858551 236.46571350]
[110.12188721 221.57736206]
[98.71183777 208.25251770]
[105.89114380 191.30316162]
[103.70150757 176.46383667]
[101.51187134 161.62451172]
[99.32224274 146.78518677]
[90.51348114 145.81832886]
[82.04499054 143.20799255]
[74.22054291 139.04782104]
[67.32077789 133.48703003]
[61.59319687 126.72509003]
[57.24324036 119.00453949]
[54.42693710 110.60231018]
[53.24530792 101.81977844]
[38.35694885 99.99308014]
[23.46859169 98.16638947]
[8.58023357 96.33969879]
[-5.87623072 108.56580353]
[-24.36351395 106.39566803]
[-35.21699524 91.66757965]
[-50.15692139 90.32646179]
[-65.09684753 88.98534393]
[-80.03677368 87.64423370]
[-94.97669983 86.30311584]
[-101.13468933 100.13633728]
[-111.45247650 111.21883392]
[-124.81088257 118.34848022]
[-139.76087952 120.75188446]
[-154.68080139 118.16835785]
[-167.95225525 110.87813568]
[-178.13563538 99.67200470]
[-184.12634277 85.76552582]
[-185.27455139 70.66716766]
[-181.45570374 56.01469421]
[-173.08403015 43.39748764]
[-161.06764221 34.18416977]
[-146.70999146 29.37413406]
[-131.56848145 29.48913574]
[-117.28553772 34.51670456]
[-105.41048431 43.91147995]
[-97.23143768 56.65439606]
[-93.63558960 71.36318970]
[-78.69566345 72.70430756]
[-63.75573349 74.04541779]
[-48.81580734 75.38653564]
[-33.87588120 76.72765350]
[-26.90015602 67.67726135]
[-16.30947685 63.07685471]
[-4.69492531 64.17831421]
[5.04038048 70.82273865]
[10.40692711 81.45133972]
[25.29528427 83.27803040]
[40.18364334 85.10472870]
[55.07199860 86.93141937]
[60.94478226 72.43999481]
[71.44812012 60.41154480]
[85.59280396 52.30805969]
[101.93518066 49.20613098]
[99.50429535 34.40441513]
[97.07341766 19.60269928]
[92.58841705 11.62732697]
[94.72547150 4.54044008]
[92.53583527 -10.29888248]
[90.34619904 -25.13820457]
[88.15656281 -39.97752762]
[85.96693420 -54.81685257]
[83.77729797 -69.65617371]
[72.10532379 -76.39593506]
[66.53199005 -88.45359802]
[68.89074707 -101.32803345]
[78.09884644 -110.35397339]
[76.15103912 -125.22696686]
[65.75263214 -137.90786743]
[71.78781891 -153.15609741]
[88.04811859 -155.28558350]
[97.80632782 -142.10569763]
[91.02404022 -127.17477417]
[92.97183990 -112.30177307]
[106.73003387 -102.64149475]
[109.30249786 -85.68697357]
[98.61661530 -71.84580994]
[100.80625153 -57.00648499]
[102.99588776 -42.16716385]
[105.18552399 -27.32784081]
[107.37516022 -12.48851776]
[109.56479645 2.35080481]
[111.87512970 17.17181587]
[114.30601501 31.97353172]
[116.73690033 46.77524567]
[130.31138611 53.15751648]
[143.26087952 45.58714294]
[156.21037292 38.01676941]
[169.15986633 30.44639778]
[182.10935974 22.87602234]
[195.05886841 15.30564976]
[194.79641724 -1.21964765]
[202.85346985 -15.54252911]
[216.95072937 -23.80405235]
[233.19654846 -23.83321571]
[247.16110229 -15.71666145]
[259.98565674 -23.49681091]
[267.77124023 -37.26980209]
[282.66586304 -37.25597763]
[295.42666626 -45.14024353]
[308.12289429 -53.12810516]
[320.81909180 -61.11597061]
[333.51531982 -69.10383606]
[340.68701172 -83.85168457]
[357.06182861 -84.74468994]
[365.79476929 -70.86421204]
[357.90213013 -56.48928833]
[341.50317383 -56.40761185]
[328.80697632 -48.41975021]
[316.11074829 -40.43188477]
[303.41452026 -32.44402313]
[299.42111206 -26.21154976]
[290.44598389 -24.43141747]
[283.57769775 -11.21491623]
[267.76580811 -10.67225361]
[254.94125366 -2.89210415]
[256.13629150 10.72076416]
[251.32337952 23.58107948]
[241.38931274 33.15648270]
[228.23516846 37.53527451]
[214.41268921 35.80788422]
[202.62924194 28.25514603]
[189.67973328 35.82551956]
[176.73023987 43.39589310]
[163.78074646 50.96626663]
[150.83125305 58.53664017]
[137.88175964 66.10701752]
[143.05599976 73.68013763]
[146.75137329 82.00211334]
[148.86839294 90.78984833]
[149.36076355 99.74905396]
[148.23622131 108.58408356]
[145.55545044 117.00769806]
[141.42933655 124.75038910]
[136.01457214 131.56900024]
[129.50784302 137.25439453]
[122.13870239 141.63772583]
[114.16156006 144.59555054]
[116.35119629 159.43487549]
[118.54083252 174.27420044]
[120.73046875 189.11352539]
[130.60643005 197.42520142]
[132.11763000 209.84062195]
[124.99488831 219.62956238]
[129.21791077 227.74668884]
[126.85131073 234.76025391]
[128.55677795 249.66299438]
[130.26223755 264.56573486]
[131.96769714 279.46844482]
[141.22386169 292.29943848]
[134.98379517 305.82388306]
[136.68925476 320.72662354]
[138.39471436 335.62933350]
[149.22770691 339.45718384]
[157.80639648 347.02252197]
[162.91271973 357.20004272]
[163.84083557 368.49728394]
[160.49447632 379.27359009]
[153.39535522 387.97839355]
[143.60223389 393.37414551]
[144.57820129 408.34234619]
[145.55416870 423.31057739]
[146.53015137 438.27877808]
[155.14895630 451.54629517]
[148.25614929 464.75003052]
[149.23211670 479.71823120]
[160.29338074 491.33837891]
[157.96232605 507.21118164]
[144.02711487 515.16040039]
[129.17767334 509.08804321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 188]
[2 187]
[4 185]
[5 184]
[6 183]
[7 182]
[11 175]
[12 174]
[13 173]
[15 171]
[16 170]
[17 169]
[18 168]
[19 166]
[21 163]
[22 162]
[23 161]
[24 160]
[32 72]
[33 71]
[34 70]
[35 69]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[76 107]
[77 106]
[78 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[89 96]
[90 95]
[108 149]
[109 148]
[110 147]
[111 146]
[112 145]
[113 144]
[118 138]
[119 137]
[121 135]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
