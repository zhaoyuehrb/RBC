%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:29:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCCCAACUGCUCCUGCGCCGCUGGUGUCUCCUGCACCUGCGCUGGUUCCUGCAAGUGCAAAGAGUGCAAAUGCACCUCCUGCAAGAAGAGUGAGUGUGAGGCCAUCUCCAUGGUCUGGGGCUGUGGCUAA\
) } def
/len { sequence length } bind def

/coor [
[101.33634949 335.15951538]
[107.38269043 319.32037354]
[107.38269043 304.32037354]
[107.38269043 289.32037354]
[104.20851898 282.57107544]
[107.55993652 273.97491455]
[107.90640259 258.97891235]
[105.66569519 256.14715576]
[104.73487091 252.05963135]
[105.70237732 247.36770630]
[108.83215332 242.96636963]
[110.21617889 228.03034973]
[103.68621063 214.64346313]
[112.66382599 201.61607361]
[114.04785156 186.68005371]
[115.43187714 171.74404907]
[116.81590271 156.80802917]
[118.19992828 141.87200928]
[88.11322021 139.43731689]
[69.18769836 119.97988129]
[55.20061874 125.39850616]
[41.21353531 130.81713867]
[27.22645187 136.23576355]
[13.23936844 141.65438843]
[0.65400708 153.01417542]
[-13.74582100 144.06536865]
[-9.13299751 127.75100708]
[7.82074356 127.66729736]
[21.80782700 122.24867249]
[35.79491043 116.83004761]
[49.78199387 111.41142273]
[63.76907730 105.99279785]
[63.28549957 99.20071411]
[64.06420898 92.43611145]
[66.07843781 85.93156433]
[69.25892639 79.91070557]
[73.49633026 74.58054352]
[65.01927948 62.20557785]
[56.54223633 49.83061600]
[48.06518936 37.45565414]
[39.58814621 25.08069420]
[30.96873665 12.80446434]
[22.20811653 0.62860548]
[13.16859627 -11.34165287]
[3.85500097 -23.09992409]
[-5.45859480 -34.85819626]
[-14.77219009 -46.61646652]
[-24.08578491 -58.37473679]
[-38.71955109 -64.38834381]
[-40.55684662 -79.16919708]
[-49.87044144 -90.92746735]
[-65.30715942 -96.46277618]
[-67.96516418 -112.64508057]
[-55.11012650 -122.82741547]
[-39.96620178 -116.53506470]
[-38.11217117 -100.24105835]
[-28.79857445 -88.48278809]
[-14.83097839 -83.31021881]
[-12.32751465 -67.68833160]
[-3.01391912 -55.93006134]
[6.29967642 -44.17179108]
[15.61327171 -32.41352081]
[24.92686844 -20.65524864]
[29.56849098 -19.22214699]
[33.32207870 -14.80513000]
[34.38397598 -8.13201427]
[43.14459610 4.04384422]
[49.66302109 7.66858006]
[51.96310806 16.60364723]
[60.44015121 28.97860909]
[68.91719818 41.35357285]
[77.39424896 53.72853470]
[85.87129211 66.10349274]
[99.07138824 61.50136566]
[113.69216156 62.10105896]
[127.66957855 68.29225159]
[138.86151123 79.64476013]
[145.37187195 94.91113281]
[158.30412292 87.31133270]
[171.23635864 79.71153259]
[184.07997131 71.96287537]
[196.83322144 64.06639099]
[209.58648682 56.16990662]
[222.24769592 48.12665558]
[234.81515503 39.93770599]
[235.46887207 24.43440628]
[245.13670349 12.29716587]
[260.10116577 8.19299984]
[274.60815430 13.70004463]
[283.07937622 26.70072746]
[282.25750732 42.19602203]
[272.45858765 54.22767258]
[257.45046997 58.16926193]
[243.00410461 52.50516891]
[230.43664551 60.69411850]
[226.51472473 67.03818512]
[217.48297119 68.92316437]
[204.72970581 76.81964874]
[191.97645569 84.71612549]
[187.90905762 90.96791840]
[178.83616638 92.64377594]
[165.90391541 100.24358368]
[152.97167969 107.84338379]
[153.31814575 122.83937836]
[166.58757019 129.83381653]
[179.85700989 136.82826233]
[193.12643433 143.82269287]
[206.39587402 150.81712341]
[219.66529846 157.81156921]
[232.93473816 164.80599976]
[249.29197693 163.63446045]
[258.25988770 177.36430359]
[250.61302185 191.87145996]
[234.21784973 192.23220825]
[225.94030762 178.07543945]
[212.67086792 171.08099365]
[199.40142822 164.08656311]
[186.13200378 157.09213257]
[172.86256409 150.09768677]
[159.59313965 143.10325623]
[146.32369995 136.10881042]
[133.13594055 143.25604248]
[131.75190735 158.19206238]
[130.36788940 173.12806702]
[128.98385620 188.06408691]
[127.59983826 203.00009155]
[134.03080750 217.45530701]
[125.15219116 229.41438293]
[123.76816559 244.35038757]
[122.90240479 259.32537842]
[122.55593109 274.32138062]
[122.38269043 289.32037354]
[122.38269043 304.32037354]
[122.38269043 319.32037354]
[128.42903137 335.15951538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[6 131]
[7 130]
[11 129]
[12 128]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 67]
[43 66]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[50 57]
[51 56]
[78 103]
[79 102]
[80 101]
[81 99]
[82 98]
[83 97]
[84 95]
[85 94]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
