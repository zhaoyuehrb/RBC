%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 22:33:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGAGGAGCAGCCAGAAUGCAGAGAAGAAAAAAGAGGUUCUCUGCAUGUUUGGAAGUCGGAAUUGGUUGAAGUUGAAGAUGAUGUGUAUCUGAGGCACAGCUCUUCCCUGACUUAUAGGCUUUGA\
) } def
/len { sequence length } bind def

/coor [
[99.27957916 117.11527252]
[93.15593719 130.80838013]
[87.03229523 144.50148010]
[80.90865326 158.19458008]
[88.76146698 171.57789612]
[87.21450806 187.01765442]
[76.86261749 198.57698059]
[61.68630600 201.81106567]
[47.52117920 195.47633362]
[39.81401825 182.00862122]
[41.52837753 166.58654785]
[52.00505447 155.14019775]
[67.21555328 152.07093811]
[73.33919525 138.37783813]
[79.46283722 124.68473816]
[85.58647156 110.99163055]
[88.54983521 108.26462555]
[91.64445496 105.70275879]
[76.67312622 104.77571106]
[61.70180511 103.84867096]
[46.73047638 102.92162323]
[31.75915146 101.99458313]
[16.78782654 101.06753540]
[1.81650126 100.14048767]
[-13.15482426 99.21344757]
[-28.12615013 98.28639984]
[-43.09747696 97.35935974]
[-50.97967529 110.47917175]
[-64.06211853 118.42324066]
[-79.33856201 119.36607361]
[-93.29858398 113.09101868]
[-102.73427582 101.04003143]
[-105.47738647 85.98234558]
[-100.89756775 71.37810516]
[-90.04723358 60.58325577]
[-75.41970062 56.07838058]
[-60.37627792 58.89865875]
[-48.37382889 68.39601898]
[-42.17042923 82.38803101]
[-27.19910622 83.31507874]
[-12.22777939 84.24211884]
[2.74354577 85.16916656]
[17.71487045 86.09620667]
[32.68619537 87.02325439]
[47.65752411 87.95030212]
[62.62884903 88.87734222]
[77.60017395 89.80438995]
[92.57150269 90.73143005]
[107.20129395 87.41946411]
[120.31358337 80.13470459]
[133.42587280 72.84993744]
[146.53817749 65.56517792]
[159.65046692 58.28041458]
[167.95629883 44.81476974]
[182.83950806 45.39734268]
[195.95179749 38.11257935]
[209.06410217 30.82781982]
[222.17639160 23.54305840]
[235.28868103 16.25829697]
[248.21678162 8.65143871]
[260.95278931 0.72713846]
[273.68875122 -7.19716120]
[286.42474365 -15.12146091]
[290.13912964 -27.54656410]
[300.99923706 -33.86839294]
[312.85363770 -31.14190865]
[325.78170776 -38.74876785]
[338.70980835 -46.35562515]
[351.63790894 -53.96248245]
[364.56600952 -61.56933975]
[368.58657837 -73.89877319]
[379.59973145 -79.95004272]
[391.38305664 -76.93118286]
[404.49536133 -84.21595001]
[417.60763550 -91.50070953]
[422.04873657 -106.43102264]
[435.45025635 -113.63201904]
[449.65664673 -109.30609131]
[462.76895142 -116.59085846]
[475.88125610 -123.87561798]
[488.99353027 -131.16038513]
[502.10583496 -138.44514465]
[507.87786865 -153.41387939]
[523.22241211 -158.09634399]
[536.36834717 -148.90055847]
[537.23138428 -132.88072205]
[525.14935303 -122.32590485]
[509.39059448 -125.33284760]
[496.27828979 -118.04808044]
[483.16601562 -110.76332092]
[470.05371094 -103.47856140]
[456.94140625 -96.19380188]
[453.10937500 -81.84629059]
[439.91540527 -74.27172089]
[424.89239502 -78.38841248]
[411.78012085 -71.10365295]
[398.66781616 -63.81888962]
[390.53427124 -48.32051849]
[372.17288208 -48.64124298]
[359.24478149 -41.03438568]
[346.31668091 -33.42752838]
[333.38858032 -25.82066917]
[320.46047974 -18.21381187]
[312.71276855 -2.51900387]
[294.34906006 -2.38546991]
[281.61306763 5.53882980]
[268.87707520 13.46313000]
[256.14108276 21.38743019]
[254.18995667 25.85416603]
[249.35400391 29.09107971]
[242.57344055 29.37059021]
[229.46115112 36.65534973]
[216.34886169 43.94011307]
[203.23657227 51.22487640]
[190.12426758 58.50963593]
[182.75631714 71.45423126]
[166.93522644 71.39270782]
[153.82293701 78.67747498]
[140.71064758 85.96223450]
[127.59835052 93.24699402]
[114.48605347 100.53175354]
[129.39875793 102.14766693]
[139.37815857 113.34639740]
[139.27186584 128.34602356]
[129.13475037 139.40219116]
[114.20064545 140.80659485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[55 115]
[56 114]
[57 113]
[58 112]
[59 111]
[60 108]
[61 107]
[62 106]
[63 105]
[66 103]
[67 102]
[68 101]
[69 100]
[70 99]
[73 97]
[74 96]
[75 95]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
