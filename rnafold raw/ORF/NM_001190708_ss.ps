%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 06:46:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCACACGAGGGUUCAGCUGUCUCCUACUUUUAAUCAGGGAAAUUGACCUAUCCGCGAAGAGGCGGAUAUAA\
) } def
/len { sequence length } bind def

/coor [
[128.80928040 177.59349060]
[117.68544006 187.65629578]
[103.67871857 193.02397156]
[88.67881012 192.97232056]
[74.70937347 187.50836182]
[63.65507507 177.36920166]
[57.00726318 163.92276001]
[55.66281509 148.98313904]
[59.80311203 134.56585693]
[68.86957550 122.61599731]
[81.64261627 114.74435425]
[66.69384766 115.98303986]
[53.57975006 124.83352661]
[40.25700760 118.17366028]
[25.30823898 119.41235352]
[10.35947132 120.65103912]
[-4.92625904 127.98471832]
[-16.20484161 115.32652283]
[-7.16355515 100.98457336]
[9.12078190 105.70227814]
[24.06954956 104.46358490]
[39.01831818 103.22489166]
[51.06317520 94.46301270]
[65.45515442 101.03427887]
[80.40392303 99.79558563]
[89.12007904 87.58785248]
[85.43778992 73.04685211]
[81.75550842 58.50584793]
[78.07322693 43.96484375]
[63.17473602 40.45862961]
[51.61979675 30.42160034]
[46.06365204 16.16019058]
[47.78305817 0.95156705]
[56.38291168 -11.70943928]
[69.88703156 -18.91342163]
[85.19226837 -19.00495911]
[98.78158569 -11.96301460]
[107.53226471 0.59422308]
[109.43346405 15.78119278]
[104.04829407 30.10803986]
[92.61423492 40.28255844]
[96.29651642 54.82356262]
[99.97879791 69.36457062]
[103.66107941 83.90557098]
[104.75312042 68.94537354]
[114.06241608 57.18370056]
[128.37193298 52.68505478]
[142.73669434 57.00404739]
[152.19262695 68.64815521]
[153.47203064 83.59349060]
[146.13278198 96.67536163]
[132.71112061 103.37303162]
[117.84487152 101.37182617]
[131.32073975 107.95977783]
[144.79660034 114.54772949]
[158.27246094 121.13567352]
[171.74832153 127.72362518]
[185.22419739 134.31156921]
[198.70005798 140.89952087]
[213.56475830 135.53146362]
[227.83578491 142.32215881]
[233.04638672 157.24278259]
[226.10519409 171.44122314]
[211.13031006 176.49377441]
[197.00605774 169.40286255]
[192.11210632 154.37538147]
[178.63624573 147.78744507]
[165.16038513 141.19949341]
[151.68450928 134.61154175]
[138.20864868 128.02359009]
[124.73278809 121.43564606]
[111.25691986 114.84769440]
[123.97188568 122.80568695]
[132.95585632 134.81768799]
[136.99679565 149.26313782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 25]
[12 24]
[14 22]
[15 21]
[16 20]
[26 44]
[27 43]
[28 42]
[29 41]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
