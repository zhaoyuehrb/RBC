%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:46:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGCGGCAGCUACUACGGAAACUACUACGGCGACCAUGGCUAUGGGUGCUGUGGAUACGAAGGCCUAGGCUAUGGCUAUGGAAGCCUGCGCUGUGGCUAUAGCUCCUGCUGUGGCUAUGGUCAUGGCUACGGCUCCCGCUUCUUCUGUGGCUGUGGCUAUGGAUGCGGCUCUGGCUACUACUAUUGA\
) } def
/len { sequence length } bind def

/coor [
[194.29121399 171.43251038]
[195.56918335 156.48706055]
[202.01428223 142.94229126]
[212.80551147 132.52359009]
[226.56594849 126.55866241]
[211.73173523 124.33470154]
[197.99797058 130.09950256]
[185.49746704 120.40164948]
[170.66325378 118.17769623]
[155.82904053 115.95374298]
[140.99482727 113.72978210]
[126.16059875 111.50582886]
[117.98979187 126.52500153]
[101.25977325 135.49879456]
[80.45617676 133.74063110]
[80.09353638 150.13575745]
[65.58549500 157.78094482]
[51.85668182 148.81146240]
[53.03011703 132.45434570]
[67.89868164 125.53639984]
[65.69930267 118.36613464]
[52.47903442 125.45306396]
[43.94380951 137.78796387]
[29.30297661 141.05078125]
[16.33772659 133.50743103]
[11.93872738 119.16696167]
[18.44392204 105.65095520]
[32.39598465 100.14278412]
[46.38030624 105.57035828]
[61.30055237 104.02559662]
[59.10117722 96.85533142]
[45.26683044 91.05783844]
[31.43248367 85.26035309]
[16.95378113 91.00534821]
[3.00637484 84.92879486]
[-2.38136888 71.09015656]
[-16.21571541 65.29267120]
[-30.05006218 59.49518204]
[-43.88440704 53.69769669]
[-57.71875381 47.90020752]
[-71.55310059 42.10271835]
[-85.38744354 36.30523300]
[-99.22179413 30.50774384]
[-113.05613708 24.71025658]
[-126.89048767 18.91276932]
[-140.72483826 13.11528206]
[-154.55917358 7.31779480]
[-170.27738953 9.12007236]
[-179.02516174 -2.93504047]
[-192.99903870 -8.38766003]
[-207.10382080 -13.49205780]
[-221.20861816 -18.59645462]
[-239.24758911 -14.93981934]
[-250.03167725 -28.77463150]
[-264.21893311 -33.64512253]
[-280.20141602 -29.97189522]
[-291.17416382 -42.15921402]
[-285.84936523 -57.66981125]
[-269.70471191 -60.54771423]
[-259.34844971 -47.83238220]
[-245.16119385 -42.96189117]
[-234.14813232 -47.99297714]
[-222.28111267 -44.03756714]
[-216.10421753 -32.70124435]
[-201.99943542 -27.59684944]
[-187.89463806 -22.49245071]
[-184.55039978 -23.66216278]
[-180.47102356 -23.25910187]
[-176.40702820 -20.95446777]
[-173.22767639 -16.76938629]
[-158.49899292 -18.98633957]
[-148.76168823 -6.51655149]
[-134.92733765 -0.71906418]
[-121.09299469 5.07842350]
[-107.25865173 10.87591076]
[-93.42430878 16.67339897]
[-79.58995819 22.47088623]
[-65.75561523 28.26837349]
[-51.92126846 34.06586075]
[-38.08692169 39.86334991]
[-24.25257492 45.66083527]
[-10.41822720 51.45832443]
[3.41611862 57.25580978]
[17.06015968 51.39272690]
[31.17274094 57.07513046]
[37.22997284 71.42601013]
[51.06431961 77.22349548]
[64.89866638 83.02098083]
[83.30364227 67.66761017]
[105.61279297 66.68387604]
[122.59540558 78.51081848]
[128.38455200 96.67161560]
[143.21878052 98.89556885]
[158.05299377 101.11952209]
[172.88720703 103.34347534]
[187.72143555 105.56742859]
[202.51623535 99.96170807]
[213.95568848 109.50048828]
[228.78990173 111.72444153]
[235.86279297 108.15184784]
[242.96728516 108.74198151]
[248.05537415 112.52127075]
[263.02258301 111.52990723]
[277.98977661 110.53855133]
[292.95700073 109.54718781]
[307.92419434 108.55583191]
[316.24633789 95.59249878]
[330.44006348 90.07962036]
[344.98626709 93.93599701]
[354.36022949 105.48012543]
[369.32742310 104.48876190]
[384.29464722 103.49740601]
[399.26184082 102.50604248]
[414.22903442 101.51468658]
[424.61779785 89.90815735]
[439.81079102 89.11599731]
[450.81182861 99.09161377]
[465.77902222 98.10025024]
[480.74624634 97.10889435]
[495.71343994 96.11753845]
[510.68063354 95.12617493]
[525.64782715 94.13481903]
[540.61505127 93.14346313]
[555.58227539 92.15209961]
[570.54943848 91.16074371]
[585.51666260 90.16938019]
[600.48388672 89.17802429]
[615.45104980 88.18666840]
[630.41827393 87.19530487]
[645.38549805 86.20394897]
[660.35266113 85.21259308]
[675.31988525 84.22122955]
[690.28710938 83.22987366]
[705.25427246 82.23851013]
[710.90557861 68.06015015]
[722.15472412 57.74420547]
[736.76831055 53.33891296]
[751.84472656 55.71895218]
[764.39056396 64.41176605]
[771.91479492 77.69138336]
[772.92358398 92.92112732]
[767.21649170 107.07712555]
[755.92675781 117.34869385]
[741.29602051 121.69640350]
[726.22906494 119.25701141]
[713.71759033 110.51486206]
[706.24566650 97.20571899]
[691.27844238 98.19707489]
[676.31127930 99.18843842]
[661.34405518 100.17979431]
[646.37683105 101.17115021]
[631.40966797 102.16251373]
[616.44244385 103.15386963]
[601.47521973 104.14522552]
[586.50799561 105.13658905]
[571.54083252 106.12794495]
[556.57360840 107.11930847]
[541.60638428 108.11066437]
[526.63922119 109.10202026]
[511.67199707 110.09338379]
[496.70480347 111.08473969]
[481.73760986 112.07609558]
[466.77038574 113.06745911]
[451.80319214 114.05881500]
[442.21395874 125.39823914]
[427.04922485 126.61682892]
[415.22039795 116.48189545]
[400.25320435 117.47325134]
[385.28601074 118.46460724]
[370.31878662 119.45597076]
[355.35159302 120.44732666]
[347.58209229 133.12695312]
[333.67156982 138.86817932]
[318.87475586 135.27549744]
[308.91555786 123.52303314]
[293.94833374 124.51439667]
[278.98114014 125.50575256]
[264.01394653 126.49711609]
[249.04673767 127.48847198]
[262.26943970 134.57083130]
[272.16281128 145.84564209]
[277.46658325 159.87667847]
[277.50515747 174.87663269]
[272.27362061 188.93475342]
[262.43835449 200.26028442]
[249.25224304 207.41055298]
[234.39494324 209.47473145]
[219.75904846 206.18988037]
[207.20889282 197.97442627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[15 20]
[31 88]
[32 87]
[33 86]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[49 70]
[50 66]
[51 65]
[52 64]
[54 61]
[55 60]
[102 179]
[103 178]
[104 177]
[105 176]
[106 175]
[110 171]
[111 170]
[112 169]
[113 168]
[114 167]
[117 164]
[118 163]
[119 162]
[120 161]
[121 160]
[122 159]
[123 158]
[124 157]
[125 156]
[126 155]
[127 154]
[128 153]
[129 152]
[130 151]
[131 150]
[132 149]
[133 148]
[134 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
