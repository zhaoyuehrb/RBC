%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCCCCGCUCAGACGCGCGCAAACCCGGAAGCAGAUCGCGUGGAGUGAAGGUCCCUCAGCGGCGCGAUUGACAUCUAAAGACUCUUGGUACAUGAGGAAGAAACCCGGAAAAGGAAAGCAGAGGAGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[87.65818787 511.15466309]
[72.64470673 516.80932617]
[58.93729019 508.47344971]
[57.05110168 492.54168701]
[68.43305969 481.23544312]
[69.82730103 466.30038452]
[71.22154999 451.36532593]
[63.02912140 435.89022827]
[73.68502808 420.92456055]
[74.73137665 405.96112061]
[75.77772522 390.99765015]
[76.82407379 376.03417969]
[64.39958191 367.81848145]
[57.71108627 354.39761353]
[58.64450073 339.33126831]
[67.04908752 326.67187500]
[80.75112915 319.87472534]
[81.79747009 304.91125488]
[67.25036621 299.21966553]
[55.14996338 289.31015015]
[46.68142319 276.13790894]
[42.67895126 260.97836304]
[43.54360962 245.30380249]
[49.20316696 230.64031982]
[59.11798096 218.41928101]
[72.33241272 209.83753967]
[87.56694031 205.74028015]
[88.26481628 190.75651550]
[88.96269989 175.77276611]
[89.66057587 160.78901672]
[68.55823517 153.04359436]
[51.63439178 138.24885559]
[41.13817978 118.37098694]
[38.46449661 96.05167389]
[43.96867371 74.25708008]
[56.91922379 55.88362885]
[47.82246017 43.95681763]
[38.72569275 32.03000641]
[29.62892532 20.10319328]
[20.53215981 8.17638206]
[11.43539333 -3.75042987]
[2.33862686 -15.67724133]
[-6.75813961 -27.60405350]
[-20.52843666 -26.26301765]
[-33.05411911 -31.87861252]
[-41.08600616 -42.87625504]
[-42.59925461 -56.30103683]
[-37.30290222 -68.61128235]
[-46.11967850 -80.74653625]
[-54.93645859 -92.88179016]
[-70.54752350 -93.79205322]
[-81.88565063 -104.56149292]
[-83.59732819 -120.10511780]
[-74.87434387 -133.08369446]
[-59.83542633 -137.36914062]
[-45.58149719 -130.93800354]
[-38.84282684 -116.82686615]
[-42.80120468 -101.69857025]
[-33.98442459 -89.56331635]
[-25.16764641 -77.42806244]
[-8.80295944 -77.97216797]
[4.81654310 -68.58819580]
[10.24450207 -52.78969574]
[5.16867256 -36.70082092]
[14.26543903 -24.77400780]
[23.36220551 -12.84719563]
[32.45897293 -0.92038411]
[41.55573654 11.00642776]
[50.65250397 22.93323898]
[59.74927139 34.86005020]
[68.84603882 46.78686523]
[75.18591309 43.55118942]
[81.85643005 41.06768036]
[88.76870728 39.36943436]
[95.83063507 38.47908020]
[102.94812012 38.40847397]
[110.02632904 39.15856552]
[116.97093201 40.71935654]
[123.68939972 43.07004547]
[130.09220886 46.17931747]
[136.09405518 50.00573730]
[141.61495972 54.49832153]
[146.58134460 59.59720230]
[150.92704773 65.23444366]
[164.25228882 58.34695053]
[177.57754517 51.45945358]
[186.28422546 38.24944305]
[201.14320374 39.27893829]
[214.46846008 32.39144135]
[225.76287842 19.74737740]
[241.03942871 27.10018158]
[238.20294189 43.81516647]
[221.35595703 45.71669769]
[208.03070068 52.60419464]
[200.27714539 65.32156372]
[184.46504211 64.78470612]
[171.13978577 71.67220306]
[157.81454468 78.55970001]
[160.97415161 90.81523895]
[161.56501770 103.45772552]
[159.56224060 115.95453644]
[155.05018616 127.77921295]
[148.21894836 138.43357849]
[139.35632324 147.46881104]
[128.83566284 154.50424194]
[117.10019684 159.24348450]
[104.64433289 161.48689270]
[103.94644928 176.47064209]
[103.24857330 191.45440674]
[102.55069733 206.43815613]
[116.15541077 211.28771973]
[127.82160187 219.77569580]
[136.60307312 231.20246887]
[141.79072571 244.63056946]
[142.96987915 258.96151733]
[140.05334473 273.02569580]
[133.28784180 285.67785645]
[123.23313141 295.89031982]
[110.71571350 302.83645630]
[96.76093292 305.95761108]
[95.71458435 320.92108154]
[108.33728790 329.55905151]
[114.89823914 343.26489258]
[113.72573853 358.31454468]
[105.23451233 370.67395020]
[91.78753662 377.08053589]
[90.74118805 392.04400635]
[89.69483948 407.00744629]
[88.64849091 421.97091675]
[96.53255463 432.25442505]
[95.29741669 444.74945068]
[86.15661621 452.75958252]
[84.76236725 467.69464111]
[83.36811829 482.62969971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 134]
[6 133]
[7 132]
[9 129]
[10 128]
[11 127]
[12 126]
[17 121]
[18 120]
[27 110]
[28 109]
[29 108]
[30 107]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[48 60]
[49 59]
[50 58]
[84 98]
[85 97]
[86 96]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
