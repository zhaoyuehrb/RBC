%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCGCCACCGGCCCAUGAGCCCCGGCCUCAAAGUUUGCGGCGGGCGGGCGGGCGCGGAGCCUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[126.84090424 261.12573242]
[124.85559845 246.25770569]
[122.87029266 231.38966370]
[120.88497925 216.52162170]
[117.91795349 201.81799316]
[113.98226929 187.34352112]
[110.04658508 172.86904907]
[106.11090088 158.39457703]
[95.63097382 151.96203613]
[92.36576080 139.68714905]
[98.65229797 128.18623352]
[95.36071777 113.55184174]
[86.02518463 103.14322662]
[90.00488281 89.73973083]
[86.71331024 75.10533905]
[83.42173004 60.47094345]
[80.13014984 45.83654785]
[76.47927094 42.25313187]
[74.58706665 38.06081009]
[74.40826416 33.97291946]
[75.64073944 30.59485054]
[77.79392242 28.34043312]
[77.13041687 13.35511494]
[76.46691895 -1.63020360]
[75.80342102 -16.61552238]
[72.31529999 -22.84532547]
[72.70030212 -28.92830467]
[75.80342102 -32.94252396]
[76.46691895 -47.92784119]
[77.13041687 -62.91315842]
[70.01112366 -77.04206848]
[78.30381775 -89.41464233]
[78.96731567 -104.39995575]
[79.63082123 -119.38527679]
[74.29101562 -135.47634888]
[88.27503967 -145.06193542]
[101.35717773 -134.27795410]
[94.61613464 -118.72177887]
[93.95263672 -103.73645782]
[93.28913879 -88.75113678]
[100.45589447 -75.69407654]
[92.11573792 -62.24966049]
[91.45223999 -47.26433945]
[90.78873444 -32.27902222]
[90.78873444 -17.27902222]
[91.45223999 -2.29370379]
[92.11573792 12.69161415]
[92.77923584 27.67693329]
[94.76454926 42.54497147]
[98.05612183 57.17936707]
[101.34770203 71.81375885]
[104.63928223 86.44815826]
[113.97481537 96.85677338]
[109.99511719 110.26026917]
[113.28668976 124.89466095]
[126.07231140 137.93617249]
[120.58537292 154.45889282]
[124.52105713 168.93336487]
[128.45674133 183.40783691]
[132.39242554 197.88230896]
[136.59878540 201.99916077]
[138.37783813 206.87185669]
[137.88572693 211.34686279]
[135.75302124 214.53631592]
[137.73832703 229.40435791]
[139.72363281 244.27239990]
[141.70893860 259.14044189]
[152.13929749 271.79507446]
[146.14257812 287.05847168]
[129.88771057 289.22897339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 60]
[6 59]
[7 58]
[8 57]
[11 55]
[12 54]
[14 52]
[15 51]
[16 50]
[17 49]
[22 48]
[23 47]
[24 46]
[25 45]
[28 44]
[29 43]
[30 42]
[32 40]
[33 39]
[34 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
