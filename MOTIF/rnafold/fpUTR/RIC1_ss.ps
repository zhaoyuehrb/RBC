%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGCUUGGGGGUGCCUUCGUCGCGCAGCCUUGCGUCGGCCCGGCCCGGCCAGGCCAGCGGGCAGAUGCCCCGAGCUGCCGCCGCCGCCGCCGCCGACUCGGCCGGUGGCGGUGUGGGAGGUGGGCGACCAGCCCGGGGCCGCUGAGUGUGACGGACGCAACUGGGGGCGCCGGGGGCUCCGCACGGACC\
) } def
/len { sequence length } bind def

/coor [
[74.35672760 670.65863037]
[74.11130524 655.66064453]
[73.86587524 640.66259766]
[64.12805939 634.68182373]
[58.43403244 624.63549805]
[58.30275726 612.96844482]
[63.88282394 602.58514404]
[73.88665009 596.12628174]
[74.13208008 581.12829590]
[66.60405731 568.27612305]
[74.56611633 554.60443115]
[74.81153870 539.60644531]
[75.05696869 524.60845947]
[72.01801300 517.85815430]
[75.43110657 509.36758423]
[75.92189026 494.37561035]
[76.41268158 479.38363647]
[76.90346527 464.39169312]
[77.39424896 449.39971924]
[77.88504028 434.40774536]
[78.37582397 419.41577148]
[75.81160736 415.36932373]
[75.77313995 409.66613770]
[79.13592529 403.94357300]
[80.11697388 388.97570801]
[81.09802246 374.00781250]
[82.07906342 359.03991699]
[72.09587097 348.04577637]
[72.87757111 332.85223389]
[84.47693634 322.45550537]
[85.45798492 307.48760986]
[86.19400024 292.50567627]
[86.68478394 277.51370239]
[87.17557526 262.52172852]
[87.66635895 247.52976990]
[88.15714264 232.53779602]
[88.64793396 217.54583740]
[89.13871765 202.55386353]
[75.50524139 196.46636963]
[65.21320343 185.59349060]
[59.85357666 171.57067871]
[60.27216339 156.52368164]
[66.43630981 142.74627686]
[77.43511963 132.35063171]
[91.61394501 126.94354248]
[92.10472870 111.95156860]
[85.68372345 99.53133392]
[92.90330505 87.55764008]
[93.39408875 72.56567383]
[93.88487244 57.57370377]
[94.37566376 42.58173370]
[91.58998108 36.55711746]
[92.18726349 30.88517380]
[95.13576508 27.10954285]
[96.11680603 12.14165878]
[97.09785461 -2.82622528]
[98.07890320 -17.79410934]
[90.17214966 -27.99791718]
[91.30710602 -40.45397186]
[100.33072662 -48.52521133]
[101.55654907 -63.47504044]
[102.78236389 -78.42487335]
[104.00817871 -93.37470245]
[105.23399353 -108.32452393]
[92.26316071 -119.16859436]
[88.34478760 -135.44416809]
[94.82907867 -150.69761658]
[108.98120880 -159.00141907]
[109.96224976 -173.96929932]
[110.94329834 -188.93719482]
[111.92434692 -203.90507507]
[112.90539551 -218.87295532]
[103.46284485 -226.12771606]
[98.74997711 -236.93231201]
[99.83425903 -248.54957581]
[106.33023834 -258.09701538]
[116.52423859 -263.26202393]
[117.99449921 -278.18978882]
[111.64710999 -292.68188477]
[120.59464264 -304.58950806]
[122.06490326 -319.51727295]
[123.53515625 -334.44503784]
[125.00541687 -349.37280273]
[122.72976685 -358.23623657]
[126.62380219 -364.53210449]
[128.33810425 -379.43380737]
[130.05241394 -394.33554077]
[131.76672363 -409.23724365]
[133.48101807 -424.13897705]
[135.19532776 -439.04067993]
[136.90963745 -453.94238281]
[138.62393188 -468.84411621]
[140.33824158 -483.74581909]
[142.05253601 -498.64755249]
[143.64488220 -513.56280518]
[145.11512756 -528.49053955]
[146.58538818 -543.41833496]
[142.12066650 -559.77386475]
[156.60104370 -568.59173584]
[169.08290100 -557.11828613]
[161.51316833 -541.94805908]
[160.04290771 -527.02032471]
[158.57264709 -512.09252930]
[161.04978943 -505.11648560]
[156.95425415 -496.93325806]
[155.23995972 -482.03152466]
[153.52565002 -467.12982178]
[151.81134033 -452.22808838]
[150.09704590 -437.32638550]
[148.38273621 -422.42465210]
[146.66842651 -407.52294922]
[144.95413208 -392.62121582]
[143.23982239 -377.71951294]
[141.52551270 -362.81777954]
[139.93318176 -347.90255737]
[138.46293640 -332.97479248]
[136.99267578 -318.04699707]
[135.52241516 -303.11923218]
[141.97496033 -289.69485474]
[132.92227173 -276.71954346]
[131.45201111 -261.79174805]
[143.89613342 -248.38154602]
[142.58004761 -229.81460571]
[127.87327576 -217.89190674]
[126.89222717 -202.92402649]
[125.91118622 -187.95614624]
[124.93013763 -172.98825073]
[123.94908905 -158.02037048]
[134.96784973 -150.46614075]
[140.85861206 -138.35482788]
[139.98463440 -124.80675507]
[132.46762085 -113.37169647]
[120.18382263 -107.09870911]
[118.95800781 -92.14888000]
[117.73219299 -77.19905090]
[116.50637817 -62.24922562]
[115.28055573 -47.29939651]
[123.63108063 -31.87229347]
[113.04678345 -16.81306267]
[112.06574249 -1.84517837]
[111.08469391 13.12270546]
[110.10364532 28.09058952]
[109.36763000 43.07252121]
[108.87684631 58.06449127]
[108.38605499 73.05645752]
[107.89527130 88.04843140]
[114.31627655 100.46866608]
[107.09669495 112.44235992]
[106.60591125 127.43432617]
[120.40073395 133.75718689]
[130.69609070 144.84991455]
[135.94595337 159.00097656]
[135.37951660 174.04315186]
[129.11422729 187.68539429]
[118.13311005 197.86186218]
[104.13068390 203.04464722]
[103.63990021 218.03662109]
[103.14911652 233.02857971]
[102.65832520 248.02055359]
[102.16754150 263.01251221]
[101.67675781 278.00448608]
[101.18596649 292.99645996]
[103.97164917 299.02108765]
[103.37436676 304.69302368]
[100.42586517 308.46865845]
[99.44482422 323.43652344]
[109.58790588 335.25836182]
[108.37976074 350.42395020]
[97.04695129 360.02096558]
[96.06590271 374.98886108]
[95.08485413 389.95675659]
[94.10380554 404.92462158]
[93.36779022 419.90655518]
[92.87700653 434.89852905]
[92.38622284 449.89050293]
[91.89543152 464.88247681]
[91.40464783 479.87445068]
[90.91386414 494.86639404]
[90.42307281 509.85836792]
[90.05495453 524.85388184]
[89.80953217 539.85186768]
[89.56410980 554.84985352]
[97.07457733 568.77478027]
[89.13007355 581.37371826]
[88.88464355 596.37170410]
[102.56788635 609.45642090]
[102.36226654 628.06878662]
[88.86386871 640.41717529]
[89.10929108 655.41522217]
[89.35472107 670.41320801]
[91.86035919 689.63220215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 190]
[2 189]
[3 188]
[8 185]
[9 184]
[11 182]
[12 181]
[13 180]
[15 179]
[16 178]
[17 177]
[18 176]
[19 175]
[20 174]
[21 173]
[24 172]
[25 171]
[26 170]
[27 169]
[30 166]
[31 165]
[32 162]
[33 161]
[34 160]
[35 159]
[36 158]
[37 157]
[38 156]
[45 149]
[46 148]
[48 146]
[49 145]
[50 144]
[51 143]
[54 142]
[55 141]
[56 140]
[57 139]
[60 137]
[61 136]
[62 135]
[63 134]
[64 133]
[68 128]
[69 127]
[70 126]
[71 125]
[72 124]
[77 121]
[78 120]
[80 118]
[81 117]
[82 116]
[83 115]
[85 114]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
