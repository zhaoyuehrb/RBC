%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCACCAGGCAGGCGGUUGGAGUACGGGGCGGGGGUCGGCCGAGGGCGCGGGGCCCCGGGGCUCCGGGCUCGCCCCCGCCGCUCGGGGCAGGCGCGCCGAUGGCGUUUCUGAGGUGACGCCGCCCACACCGGGCUUCUCCGGGGGCGGAGGAAACACCU\
) } def
/len { sequence length } bind def

/coor [
[173.18684387 192.07009888]
[164.51098633 179.83369446]
[155.83512878 167.59730530]
[147.15927124 155.36090088]
[138.48341370 143.12449646]
[129.80755615 130.88809204]
[107.41668701 139.85951233]
[85.15075684 135.15472412]
[76.71233368 147.55606079]
[68.27391052 159.95738220]
[59.83548355 172.35871887]
[65.20980072 186.91537476]
[60.96912003 201.84175110]
[48.74408340 211.39831543]
[33.23545837 211.91040039]
[20.40663338 203.18109131]
[15.19054985 188.56698608]
[19.59289932 173.68750000]
[31.92088890 164.26411438]
[47.43415451 163.92030334]
[55.87257767 151.51896667]
[64.31099701 139.11763000]
[72.74942017 126.71630096]
[69.05161285 122.32827759]
[66.05355072 117.43540955]
[63.82302856 112.14832306]
[62.41047668 106.58655548]
[61.84783554 100.87586212]
[62.14781952 95.14537048]
[63.30365372 89.52464294]
[65.28919983 84.14076233]
[53.13697815 75.34738922]
[40.98475266 66.55401611]
[28.83252525 57.76064301]
[16.68029976 48.96726990]
[4.52807474 40.17389679]
[-7.62415075 31.38052368]
[-19.77637672 22.58715057]
[-31.92860222 13.79377651]
[-29.82150269 28.64504433]
[-37.61548615 41.46119690]
[-51.77128601 46.42238998]
[-65.86071014 41.27572632]
[-73.48571014 28.35832214]
[-71.18376160 13.53600788]
[-60.00017929 3.53963399]
[-45.01509857 2.90807271]
[-55.87413406 -7.43994188]
[-66.73316193 -17.78795624]
[-77.59220123 -28.13597107]
[-92.92034912 -32.05495453]
[-96.79635620 -46.43639755]
[-107.65538788 -56.78440857]
[-118.51442719 -67.13242340]
[-129.37345886 -77.48043823]
[-140.23248291 -87.82845306]
[-151.09152222 -98.17646790]
[-161.95056152 -108.52448273]
[-178.00729370 -111.85810089]
[-182.89103699 -127.51316833]
[-171.57778931 -139.38510132]
[-155.70567322 -135.26106262]
[-151.60253906 -119.38351440]
[-140.74351501 -109.03549957]
[-129.88447571 -98.68748474]
[-119.02544403 -88.33946991]
[-108.16641235 -77.99145508]
[-97.30737305 -67.64344025]
[-86.44834137 -57.29542923]
[-71.89690399 -54.11660385]
[-67.24418640 -38.99500275]
[-56.38515091 -28.64698982]
[-45.52611923 -18.29897499]
[-34.66708374 -7.95096016]
[-23.13522911 1.64155102]
[-10.98300266 10.43492413]
[1.16922271 19.22829819]
[13.32144833 28.02167130]
[25.47367287 36.81504440]
[37.62590027 45.60841751]
[49.77812576 54.40179062]
[61.93035126 63.19516373]
[74.08257294 71.98854065]
[85.25758362 64.80033875]
[98.21978760 61.87932587]
[111.39780426 63.57960892]
[118.60383606 50.42388153]
[125.80986023 37.26815414]
[133.01588440 24.11242867]
[132.85952759 8.29199409]
[145.75971985 0.84657454]
[152.96575928 -12.30915260]
[152.05628967 -28.68306160]
[165.92799377 -37.42995071]
[180.31083679 -29.55176735]
[180.40899658 -13.15291309]
[166.12149048 -5.10312319]
[158.91545105 8.05260372]
[159.58723450 22.93205261]
[146.17161560 31.31845665]
[138.96559143 44.47418594]
[131.75956726 57.62990952]
[124.55352783 70.78563690]
[135.38659668 80.21168518]
[142.45649719 93.67460632]
[156.79211426 89.25985718]
[171.12773132 84.84510803]
[185.46336365 80.43035889]
[199.79898071 76.01560974]
[214.13459778 71.60086060]
[219.02899170 56.87589645]
[231.66334534 47.86740112]
[247.17945862 48.03931808]
[259.61108398 57.32554626]
[264.17803955 72.15534210]
[259.12417603 86.82633972]
[246.39285278 95.69725037]
[230.87951660 95.35701752]
[218.54934692 85.93647766]
[204.21372986 90.35122681]
[189.87811279 94.76597595]
[175.54248047 99.18072510]
[161.20686340 103.59547424]
[146.87124634 108.01022339]
[142.04394531 122.21224213]
[150.71981812 134.44863892]
[159.39567566 146.68504333]
[168.07153320 158.92143250]
[176.74739075 171.15783691]
[185.42324829 183.39424133]
[198.90148926 184.11851501]
[209.33975220 192.36515808]
[213.05273438 204.93620300]
[208.89550781 217.16174316]
[217.33392334 229.56306458]
[236.03457642 232.35298157]
[246.61779785 247.63580322]
[242.78437805 265.50057983]
[251.69445801 277.56750488]
[260.60452271 289.63442993]
[269.51458740 301.70132446]
[278.42465210 313.76824951]
[287.33474731 325.83517456]
[296.24481201 337.90209961]
[311.48522949 343.95700073]
[313.59371948 360.22003174]
[300.40124512 369.96121216]
[285.47906494 363.15963745]
[284.17788696 346.81216431]
[275.26782227 334.74526978]
[266.35775757 322.67834473]
[257.44766235 310.61141968]
[248.53759766 298.54449463]
[239.62753296 286.47756958]
[230.71745300 274.41064453]
[219.27941895 275.19470215]
[208.78408813 270.28945923]
[201.90747070 260.81716919]
[200.46479797 249.08009338]
[204.93260193 238.00149536]
[196.49417114 225.60015869]
[179.87260437 223.18444824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[8 23]
[9 22]
[10 21]
[11 20]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[47 74]
[48 73]
[49 72]
[50 71]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[86 103]
[87 102]
[88 101]
[89 100]
[91 98]
[92 97]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[134 161]
[135 160]
[138 155]
[139 154]
[140 153]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
