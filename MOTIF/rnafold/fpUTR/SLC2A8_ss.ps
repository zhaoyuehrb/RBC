%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAUUGGCUGCGAGAGGCCGGUGCGGGCCGCACUCGCAGGGCCCGUGGCGGUUCAGGCGCCAGAGCUGGCCGAUCGGCGUUGGCCGCCGAC\
) } def
/len { sequence length } bind def

/coor [
[217.48599243 239.13558960]
[207.80157471 227.68080139]
[198.11715698 216.22602844]
[179.96324158 215.93850708]
[167.42019653 202.38078308]
[168.58151245 183.63293457]
[158.15362549 172.85058594]
[147.72573853 162.06822205]
[137.29785156 151.28587341]
[126.86996460 140.50350952]
[119.81504822 137.83050537]
[116.28127289 129.18229675]
[106.21950531 118.05751801]
[91.75382233 117.22663116]
[82.03447723 106.48044586]
[82.65571594 92.00424957]
[72.59394073 80.87947083]
[62.53217316 69.75468445]
[54.28112411 65.37301636]
[52.32769775 58.08597565]
[42.64328003 46.63119125]
[32.95886230 35.17641068]
[18.14048004 29.63329506]
[15.83200550 14.91866875]
[6.14758730 3.46388602]
[-3.53683043 -7.99089670]
[-13.22124767 -19.44568062]
[-22.90566635 -30.90046310]
[-32.59008408 -42.35524750]
[-42.27450180 -53.81002808]
[-51.95891953 -65.26480865]
[-62.02069092 -76.38959503]
[-72.44857788 -87.17195129]
[-88.35597229 -91.15776825]
[-92.59705353 -106.99901581]
[-80.80895996 -118.39958191]
[-65.11827087 -113.63153839]
[-61.66622162 -97.59983826]
[-51.23833466 -86.81748199]
[-46.36976242 -85.85761261]
[-42.12627411 -81.69956970]
[-40.50413513 -74.94922638]
[-30.81971931 -63.49444580]
[-21.13530159 -52.03966522]
[-11.45088291 -40.58488083]
[-1.76646519 -29.13009834]
[7.91795254 -17.67531395]
[17.60237122 -6.22053194]
[27.28678894 5.23425102]
[41.41247559 9.95804405]
[44.41364670 25.49199295]
[54.09806442 36.94677353]
[63.78248215 48.40155792]
[73.65695190 59.69291687]
[83.71872711 70.81769562]
[93.78049469 81.94248199]
[108.24617767 82.77336884]
[117.96552277 93.51955414]
[117.34428406 107.99575043]
[127.40605927 119.12052917]
[137.65231323 130.07562256]
[148.08020020 140.85798645]
[158.50808716 151.64033508]
[168.93597412 162.42269897]
[179.36386108 173.20504761]
[191.30314636 171.06788635]
[202.64489746 175.01171875]
[210.52177429 183.91389465]
[213.00418091 195.41456604]
[209.57192993 206.54161072]
[219.25634766 217.99638367]
[228.94076538 229.45117188]
[242.52447510 229.04257202]
[253.66452026 236.47889709]
[258.35726929 248.81460571]
[255.07525635 261.39593506]
[264.37152100 273.16790771]
[273.66775513 284.93991089]
[282.96401978 296.71188354]
[292.26025391 308.48388672]
[301.55648804 320.25588989]
[317.25799561 323.54873657]
[324.34426880 337.94192505]
[317.37933350 352.39425659]
[301.70611572 355.81909180]
[289.34774780 345.58923340]
[289.78451538 329.55212402]
[280.48825073 317.78015137]
[271.19201660 306.00814819]
[261.89575195 294.23614502]
[252.59951782 282.46417236]
[243.30326843 270.69216919]
[226.61923218 269.51153564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[12 60]
[13 59]
[16 56]
[17 55]
[18 54]
[20 53]
[21 52]
[22 51]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 39]
[33 38]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
