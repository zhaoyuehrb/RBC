%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACAACGGGGGCGAAGCGCAGGCGCAAGGAGCAAGCGCAGAUUGUGGGCGGCUGUGUCAGCUGACCCAAGGGGCCUUCGAGGUGCCUUAGGCCGCUUGCCUUGCUCUCAGAAUCGCUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[38.61021042 478.22766113]
[24.46359825 484.20837402]
[9.22390270 482.29861450]
[-3.00947309 473.01205444]
[-8.94581318 458.84677124]
[-6.98827219 443.61312866]
[2.33658171 431.40893555]
[16.52040863 425.51699829]
[18.38556480 410.63342285]
[20.25072098 395.74984741]
[14.15602398 382.15924072]
[23.54924202 369.42825317]
[25.41439629 354.54467773]
[27.27955246 339.66110229]
[29.14470863 324.77749634]
[31.00986290 309.89392090]
[23.62450027 305.93414307]
[17.51878929 300.19448853]
[4.00425625 306.70275879]
[-9.51027679 313.21099854]
[-18.29615021 327.05804443]
[-34.66743851 326.10250854]
[-41.78276062 311.32739258]
[-32.32248688 297.93206787]
[-16.01853371 299.69647217]
[-2.50399995 293.18820190]
[11.01053333 286.67996216]
[12.72330570 266.94168091]
[25.79128456 251.81437683]
[45.41714859 247.16986084]
[50.19445038 232.95094299]
[54.97174835 218.73204041]
[59.74905014 204.51312256]
[64.52635193 190.29421997]
[69.30364990 176.07530212]
[74.08094788 161.85639954]
[78.85824585 147.63748169]
[77.99674225 140.21363831]
[83.93595886 133.12623596]
[89.06625366 119.03084564]
[94.19655609 104.93545532]
[90.63190460 104.60413361]
[87.02970886 102.74896240]
[83.93383789 99.37157440]
[81.87473297 94.64952087]
[81.31610870 88.92719269]
[82.60594177 82.69136047]
[79.26812744 68.06744385]
[75.93031311 53.44352722]
[72.59249878 38.81960678]
[69.07263947 24.23843575]
[65.37127686 9.70227623]
[61.66991806 -4.83388329]
[57.96855927 -19.37004280]
[54.26719666 -33.90620041]
[50.56583405 -48.44235992]
[40.79804230 -62.29972458]
[51.40986252 -75.52188873]
[67.05294037 -68.98504639]
[65.10199738 -52.14372253]
[68.80335236 -37.60756302]
[72.50471497 -23.07140350]
[76.20607758 -8.53524399]
[79.90744019 6.00091505]
[83.60880280 20.53707504]
[88.36026764 26.30588341]
[87.21642303 35.48179245]
[90.55423737 50.10571289]
[93.89205170 64.72962952]
[97.22986603 79.35354614]
[110.90245056 85.52285767]
[124.07577515 78.34904480]
[132.49499512 64.95399475]
[147.37274170 65.66219330]
[160.54606628 58.48838043]
[173.71939087 51.31457138]
[186.89271545 44.14076233]
[200.06604004 36.96695328]
[203.93464661 31.38702774]
[209.26089478 29.03606415]
[214.07966614 29.78258324]
[227.59420776 23.27432632]
[241.10873413 16.76607132]
[249.89460754 2.91903234]
[266.26589966 3.87455249]
[273.38122559 18.64967346]
[263.92095947 32.04501724]
[247.61698914 30.28060341]
[234.10246277 36.78886032]
[220.58793640 43.29711533]
[207.23985291 50.14027405]
[194.06652832 57.31408691]
[180.89320374 64.48789215]
[167.71987915 71.66170502]
[154.54655457 78.83551788]
[147.06958008 91.71744537]
[131.24958801 91.52236938]
[118.07626343 98.69618225]
[108.29194641 110.06575775]
[103.16164398 124.16114807]
[98.03134155 138.25653076]
[93.07715607 152.41477966]
[88.29985809 166.63369751]
[83.52256012 180.85260010]
[78.74526215 195.07151794]
[73.96795654 209.29042053]
[69.19065857 223.50933838]
[64.41336060 237.72824097]
[59.63605881 251.94715881]
[69.28383636 261.31991577]
[74.34019470 273.72045898]
[74.00008392 287.04879761]
[68.36804199 299.06820679]
[58.43266678 307.78070068]
[45.89345169 311.75906372]
[44.02829742 326.64266968]
[42.16313934 341.52624512]
[40.29798508 356.40982056]
[38.43283081 371.29342651]
[44.39411926 385.94857788]
[35.13430786 397.61499023]
[33.26915359 412.49856567]
[31.40399742 427.38217163]
[43.69535065 436.59185791]
[49.72037506 450.71963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 123]
[9 122]
[10 121]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[18 27]
[19 26]
[20 25]
[30 109]
[31 108]
[32 107]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[39 101]
[40 100]
[41 99]
[47 70]
[48 69]
[49 68]
[50 67]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[71 98]
[72 97]
[74 95]
[75 94]
[76 93]
[77 92]
[78 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
