%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCACUUCCUGUGUCCACGGCUGUCGCGAGAGCCCGGGGCGAGUGGGCCUCUGCUCGUGGGUGGUUCUCGUGGAGGUCAGCUCCCGCGUGUCUCCGCUCGACAGGGUGCUUGGGCAGAGCCCAUCGGGUAGGCGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[75.14424133 334.58782959]
[66.72866058 347.24667358]
[54.10656357 355.71728516]
[39.20272446 358.70791626]
[24.28986740 355.76257324]
[11.64209938 347.33032227]
[3.18811202 334.69711304]
[0.21707729 319.78933716]
[3.18205619 304.88037109]
[11.63091087 292.24371338]
[24.27525139 283.80633545]
[39.18690872 280.85491943]
[42.09334183 266.13919067]
[44.99977112 251.42347717]
[47.90620041 236.70774841]
[50.81263351 221.99201965]
[53.71906281 207.27629089]
[56.62549210 192.56056213]
[59.53192520 177.84483337]
[54.40731812 163.85955811]
[64.67193604 151.82011414]
[67.57836151 137.10438538]
[86.86994934 95.73139954]
[75.43751526 86.02060699]
[64.00508881 76.30980682]
[52.57265472 66.59901428]
[37.04566574 63.56204987]
[32.35444641 49.42551041]
[20.92201424 39.71471786]
[9.48958302 30.00392342]
[-1.94284785 20.29312897]
[-13.37527847 10.58233452]
[-24.80770874 0.87154055]
[-36.24013901 -8.83925343]
[-47.67256927 -18.55004883]
[-59.10500336 -28.26084137]
[-70.53742981 -37.97163773]
[-81.96986389 -47.68243027]
[-96.40821075 -42.63452530]
[-111.33611298 -45.47260284]
[-122.76319122 -55.33608246]
[-127.68598938 -69.50019073]
[-124.87699890 -84.12808228]
[-136.30943298 -93.83887482]
[-147.74186707 -103.54966736]
[-159.17430115 -113.26046753]
[-170.60671997 -122.97126007]
[-182.03915405 -132.68205261]
[-193.47158813 -142.39285278]
[-204.90402222 -152.10363770]
[-221.12496948 -154.51457214]
[-226.89503479 -169.86509705]
[-216.27844238 -182.36390686]
[-200.19665527 -179.15330505]
[-195.19322205 -163.53607178]
[-183.76078796 -153.82527161]
[-172.32835388 -144.11448669]
[-160.89593506 -134.40368652]
[-149.46350098 -124.69289398]
[-138.03106689 -114.98210144]
[-126.59864044 -105.27130890]
[-115.16620636 -95.56051636]
[-101.18546295 -100.69902039]
[-86.41152191 -98.13257599]
[-74.82927704 -88.45175934]
[-69.61352539 -74.17966461]
[-72.25907135 -59.11486053]
[-60.82663727 -49.40406799]
[-49.39420700 -39.69327164]
[-37.96177673 -29.98247910]
[-26.52934647 -20.27168465]
[-15.09691525 -10.56089020]
[-3.66448426 -0.85009599]
[7.76794624 8.86069870]
[19.20037651 18.57149315]
[30.63280869 28.28228760]
[42.06523895 37.99308014]
[56.77450562 40.33546448]
[62.28345108 55.16658401]
[73.71588135 64.87738037]
[85.14831543 74.58817291]
[96.58074188 84.29896545]
[111.45417786 86.24343109]
[124.99877930 79.79798889]
[138.54338074 73.35255432]
[147.67988586 60.43609238]
[162.49696350 61.95381165]
[176.04156494 55.50836945]
[189.58616638 49.06292725]
[192.62304688 44.63557816]
[196.66770935 42.11731339]
[200.80329895 41.56912613]
[204.22642517 42.67095566]
[218.16107178 37.11888123]
[232.09573364 31.56681061]
[246.03038025 26.01473808]
[250.76206970 11.11020565]
[263.99484253 2.77784657]
[279.48052979 4.95194626]
[289.90734863 16.60596085]
[290.35198975 32.23722076]
[280.60455322 44.46512222]
[265.26748657 47.51602554]
[251.58245850 39.94938660]
[237.64779663 45.50146103]
[223.71315002 51.05353165]
[209.77850342 56.60560608]
[196.03161621 62.60753250]
[182.48701477 69.05297089]
[168.94241333 75.49841309]
[160.77470398 87.95384979]
[144.98883057 86.89715576]
[131.44422913 93.34259796]
[117.89962006 99.78804016]
[117.24983978 114.77395630]
[130.18571472 122.36757660]
[143.12159729 129.96119690]
[156.05746460 137.55482483]
[168.99334717 145.14843750]
[185.71379089 147.95254517]
[187.64794922 164.79580688]
[171.99835205 171.31706238]
[161.39971924 158.08432007]
[148.46385193 150.49069214]
[135.52796936 142.89707947]
[122.59209442 135.30345154]
[109.65621948 127.70983124]
[102.81568909 130.78507996]
[108.96596527 144.46623230]
[95.28471375 150.61630249]
[89.13462067 136.93557739]
[82.29409027 140.01081848]
[79.38766479 154.72654724]
[84.30438232 169.76438904]
[74.24765015 180.75125122]
[71.34122467 195.46697998]
[68.43479156 210.18270874]
[65.52835846 224.89843750]
[62.62192917 239.61416626]
[59.71549988 254.32989502]
[56.80907059 269.04562378]
[53.90263748 283.76135254]
[66.57254791 292.16027832]
[75.05974579 304.77120972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[21 133]
[22 132]
[23 82]
[24 81]
[25 80]
[26 79]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[83 114]
[84 113]
[85 112]
[87 110]
[88 109]
[89 108]
[93 107]
[94 106]
[95 105]
[96 104]
[115 127]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
