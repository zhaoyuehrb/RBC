%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUCUGGGACAGCCCACUGGAAAGCUUCAAUACAGCUGUGGAAAUCUGCACCCUAGAAGAUCCUAGUACAGAAAUUCUACAACCAACCAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[57.27366257 149.07290649]
[48.61739731 139.91889954]
[35.79025650 147.69479370]
[22.96311569 155.47067261]
[10.13597393 163.24656677]
[-2.69116735 171.02246094]
[-11.55413818 192.39241028]
[-33.95664978 193.44586182]
[-45.37833786 203.16928101]
[-56.80002594 212.89271545]
[-68.22171783 222.61613464]
[-73.20787811 238.23887634]
[-89.28611755 241.46726990]
[-99.91651154 228.98019409]
[-94.16342163 213.62330627]
[-77.94514465 211.19444275]
[-66.52345276 201.47102356]
[-55.10176468 191.74758911]
[-43.68007278 182.02416992]
[-44.98618317 174.54667664]
[-43.49505615 167.03329468]
[-39.35833359 160.50436401]
[-33.09029388 155.86473083]
[-25.50433540 153.77857971]
[-17.60755348 154.57458496]
[-10.46705532 158.19531250]
[2.36008573 150.41941833]
[15.18722725 142.64353943]
[28.01436806 134.86764526]
[40.84151077 127.09175873]
[35.73984528 110.21385193]
[35.35696793 92.58592224]
[39.72098923 75.50242615]
[48.51145554 60.21784210]
[61.08285141 47.85456848]
[76.51203918 39.32046509]
[93.66600037 35.24221420]
[111.28508759 35.91929245]
[128.07548523 41.30197906]
[142.80421448 50.99501038]
[153.90838623 40.91049576]
[165.01255798 30.82598305]
[176.11672974 20.74147034]
[187.22090149 10.65695667]
[198.32507324 0.57244343]
[209.42924500 -9.51206970]
[214.53472900 -27.11324501]
[231.69911194 -30.35782242]
[242.47434998 -40.79306030]
[253.24958801 -51.22829819]
[264.02484131 -61.66353607]
[261.88079834 -73.58365631]
[265.80270386 -84.91445160]
[274.67590332 -92.79769135]
[286.15310669 -95.30638885]
[297.27456665 -91.91480255]
[308.69625854 -101.63822937]
[320.11795044 -111.36165619]
[331.53964233 -121.08508301]
[332.55490112 -136.85671997]
[344.48001099 -147.22817993]
[360.24005127 -146.04623413]
[370.48483276 -134.01211548]
[369.13632202 -118.26546478]
[356.99456787 -108.14848328]
[341.26306152 -109.66339111]
[329.84136963 -99.93996429]
[318.41967773 -90.21653748]
[306.99798584 -80.49311066]
[306.76226807 -62.32713699]
[293.22140503 -49.74864197]
[274.46008301 -50.88829803]
[263.68484497 -40.45305634]
[252.90959167 -30.01782036]
[242.13435364 -19.58258057]
[241.58883667 -7.38099480]
[232.53288269 1.40430307]
[219.51374817 1.59210002]
[208.40957642 11.67661381]
[197.30541992 21.76112747]
[186.20124817 31.84564018]
[175.09707642 41.93015289]
[163.99290466 52.01466751]
[152.88873291 62.09917831]
[159.20144653 73.00222778]
[163.29460144 84.91745758]
[165.01477051 97.39815521]
[164.29745483 109.97640228]
[161.16952515 122.18061066]
[155.74827576 133.55325317]
[148.23693848 143.66792297]
[138.91714478 152.14543152]
[128.13829041 158.66793823]
[116.30449677 162.99090576]
[103.85942078 164.95225525]
[91.26965332 164.47845459]
[79.00720215 161.58728027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[8 19]
[9 18]
[10 17]
[11 16]
[40 84]
[41 83]
[42 82]
[43 81]
[44 80]
[45 79]
[46 78]
[48 75]
[49 74]
[50 73]
[51 72]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
