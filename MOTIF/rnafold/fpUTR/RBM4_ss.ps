%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUCUUGAGUGGCCAAUCCGGUUGUAGGCUCACCUCCCCCUUCUACUCAGAGCACUGCUGCGGCCGCCGCCAUUUUAGCGUUUUGUCAGAAGCGUCCGCGCCGCGAGGAGGAGGCCCUGCUGGUUUCUGUGCGGGCUCUUGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[29.39274406 120.95021820]
[17.37760735 120.42874908]
[6.28531122 115.87229156]
[-2.57546949 107.84395599]
[-8.16801739 97.31491852]
[-9.84884644 85.54698181]
[-24.41005898 81.94543457]
[-39.66428757 86.14293671]
[-50.16150665 75.57611847]
[-64.72271729 71.97457886]
[-79.28392792 68.37303162]
[-93.84513855 64.77148438]
[-108.40634918 61.16994095]
[-122.96755981 57.56839752]
[-137.52877808 53.96685410]
[-145.08699036 61.66286469]
[-155.09523010 65.46376038]
[-165.69482422 64.73624420]
[-174.94747925 59.68135834]
[-181.18962097 51.28524399]
[-183.33146667 41.12746048]
[-197.63589478 36.61268234]
[-211.94033813 32.09790802]
[-226.24476624 27.58312988]
[-240.54919434 23.06835556]
[-254.85363770 18.55357933]
[-269.15805054 14.03880215]
[-283.46249390 9.52402592]
[-297.76693726 5.00925016]
[-312.24896240 1.10151291]
[-326.88287354 -2.19223762]
[-341.51678467 -5.48598814]
[-356.15069580 -8.77973938]
[-363.85494995 4.23945427]
[-375.20666504 14.23917103]
[-389.09362793 20.23974037]
[-404.15542603 21.65328979]
[-418.91638184 18.34132957]
[-431.93041992 10.62833691]
[-441.92251587 -0.73005009]
[-447.91378784 -14.62105274]
[-449.31723022 -29.68377113]
[-445.99539185 -44.44251633]
[-438.27368164 -57.45137024]
[-426.90859985 -67.43586731]
[-413.01358032 -73.41782379]
[-397.94992065 -74.81118011]
[-383.19342041 -71.47944641]
[-370.18972778 -63.74901962]
[-360.21286011 -52.37725067]
[-354.24020386 -38.47822952]
[-352.85693359 -23.41364479]
[-338.22302246 -20.11989403]
[-323.58914185 -16.82614326]
[-308.95523071 -13.53239346]
[-306.48040771 -14.98130989]
[-303.26367188 -15.50288200]
[-299.66824341 -14.80221558]
[-296.15969849 -12.72611141]
[-293.25216675 -9.29518223]
[-278.94772339 -4.78040648]
[-264.64328003 -0.26563036]
[-250.33885193 4.24914551]
[-236.03442383 8.76392174]
[-221.72999573 13.27869797]
[-207.42555237 17.79347420]
[-193.12112427 22.30825043]
[-178.81669617 26.82302666]
[-162.32929993 16.55493355]
[-143.28588867 21.69841957]
[-133.92723083 39.40564346]
[-119.36602020 43.00718689]
[-104.80480957 46.60873032]
[-90.24359894 50.21027374]
[-75.68238831 53.81182098]
[-61.12117386 57.41336441]
[-46.55996323 61.01490784]
[-32.34724808 56.55979919]
[-20.80851364 67.38422394]
[-6.24730253 70.98577118]
[5.62238932 57.39218521]
[22.80945015 51.61872101]
[40.64385986 55.32395935]
[54.23424530 67.57865143]
[59.80941391 85.09690857]
[74.56916046 87.77081299]
[89.32891083 90.44472504]
[102.55339050 85.90547943]
[113.34499359 94.79552460]
[128.10473633 97.46943665]
[134.55166626 95.56906891]
[140.13021851 97.03730774]
[143.42468262 100.57977295]
[158.05859375 103.87351990]
[173.22093201 99.35534668]
[183.93859863 109.69850922]
[198.57250977 112.99225616]
[213.20640564 116.28601074]
[227.84031677 119.57975769]
[242.47422791 122.87351227]
[257.10812378 126.16725922]
[271.74203491 129.46101379]
[286.37594604 132.75476074]
[306.32638550 125.05471039]
[321.05014038 139.46527100]
[335.86297607 141.82740784]
[350.70938110 136.35983276]
[362.05941772 146.00482178]
[376.87228394 148.36695862]
[391.71868896 142.89939880]
[403.06872559 152.54438782]
[417.88156128 154.90652466]
[432.69442749 157.26866150]
[447.80880737 150.90571594]
[460.71121216 161.02795410]
[458.12875366 177.22248840]
[442.71801758 182.82975769]
[430.33227539 172.08149719]
[415.51943970 169.71936035]
[400.70660400 167.35723877]
[386.91967773 172.99375916]
[374.51013184 163.17980957]
[359.69729614 160.81767273]
[345.91036987 166.45419312]
[333.50082397 156.64024353]
[318.68798828 154.27810669]
[312.35583496 160.66879272]
[303.64941406 163.43330383]
[294.51815796 161.81819153]
[287.06936646 156.06599426]
[283.08218384 147.38867188]
[268.44827271 144.09492493]
[253.81437683 140.80116272]
[239.18046570 137.50741577]
[224.54656982 134.21366882]
[209.91265869 130.91992188]
[195.27874756 127.62616730]
[180.64485168 124.33241272]
[166.52922058 129.08618164]
[154.76483154 118.50743103]
[140.13093567 115.21367645]
[125.43083954 112.22918701]
[110.67108917 109.55527496]
[97.44660950 114.09452057]
[86.65500641 105.20447540]
[71.89525604 102.53056335]
[57.13550568 99.85665894]
[50.53828430 110.03663635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 80]
[7 79]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[15 71]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 55]
[31 54]
[32 53]
[33 52]
[85 147]
[86 146]
[87 145]
[89 143]
[90 142]
[93 141]
[94 140]
[96 138]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[103 131]
[105 126]
[106 125]
[108 123]
[109 122]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
