%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGAGGCCACGCCCCCGGAAGCGGCGGUGCAGGUUUCUUGCCUUGAUGUACUGGAGCAAUCAGAUCACACGGCGGCUUGGAGAGUGAGUGCAAGGUUUU\
) } def
/len { sequence length } bind def

/coor [
[67.98919678 113.02770233]
[53.19976044 115.53224182]
[38.41032791 118.03678131]
[26.09577370 127.96966553]
[12.25527477 122.46604919]
[-2.53415656 124.97058105]
[-17.32358742 127.47512054]
[-32.11301804 129.97966003]
[-46.90245056 132.48420715]
[-61.69188309 134.98873901]
[-76.48131561 137.49327087]
[-90.28323364 149.56257629]
[-106.48737335 143.01831055]
[-121.19355011 145.97270203]
[-135.89971924 148.92709351]
[-150.60589600 151.88148499]
[-162.61181641 162.18530273]
[-176.61370850 157.10632324]
[-191.31988525 160.06071472]
[-206.02606201 163.01512146]
[-217.97071838 174.25154114]
[-233.59394836 169.26692200]
[-236.82392883 153.18899536]
[-224.33790588 142.55737305]
[-208.98045349 148.30894470]
[-194.27427673 145.35455322]
[-179.56809998 142.40014648]
[-168.61407471 132.30764771]
[-153.56028748 137.17532349]
[-138.85411072 134.22091675]
[-124.14794159 131.26652527]
[-109.44177246 128.31213379]
[-102.39560699 118.34873962]
[-90.04042053 115.84515381]
[-78.98585510 122.70384216]
[-64.19641876 120.19931030]
[-49.40699005 117.69477081]
[-34.61755753 115.19023132]
[-19.82812691 112.68569183]
[-5.03869534 110.18115234]
[9.75073624 107.67661285]
[21.00745392 97.92286682]
[35.90579224 103.24734497]
[50.69522476 100.74280548]
[65.48465729 98.23827362]
[68.17388916 86.52738190]
[74.71015930 76.44502258]
[84.30339050 69.20991516]
[95.79397583 65.69661713]
[107.79296875 66.32980347]
[118.84997559 71.03292847]
[127.62845612 79.23751068]
[133.06729126 89.95178986]
[148.02371216 88.80911255]
[162.98011780 87.66643524]
[170.58946228 76.42961121]
[183.11834717 71.74733734]
[195.85406494 75.13896942]
[204.14488220 85.13124084]
[219.12918091 84.44521332]
[234.11349487 83.75917816]
[247.54534912 75.39881897]
[260.61315918 82.54593658]
[275.59747314 81.85990906]
[290.58178711 81.17387390]
[302.04421997 68.06787109]
[319.09985352 67.23741913]
[331.29244995 78.70832062]
[346.24884033 77.56564331]
[354.73406982 73.73587036]
[361.67761230 76.62329102]
[376.66189575 75.93726349]
[385.08615112 62.90608215]
[399.57315063 57.34669876]
[414.55233765 61.39681625]
[424.26391602 73.49907684]
[424.97360229 88.99991608]
[416.40847778 101.93894196]
[401.86203003 107.34083557]
[386.92767334 103.12846375]
[377.34793091 90.92156219]
[362.36361694 91.60759735]
[347.39154053 92.52205658]
[332.43511963 93.66473389]
[325.42199707 104.59173584]
[313.19372559 109.50810242]
[300.18814087 106.38541412]
[291.26782227 96.15818024]
[276.28350830 96.84420776]
[261.29919434 97.53024292]
[248.93911743 105.84152985]
[234.79951477 98.74348450]
[219.81521606 99.42951202]
[204.83091736 100.11554718]
[194.12498474 112.98503113]
[177.09503174 114.23644257]
[164.12280273 102.62284851]
[149.16638184 103.76552582]
[134.20997620 104.90820312]
[127.19569397 121.32620239]
[112.92374420 132.05291748]
[95.20285034 134.22572327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[13 32]
[14 31]
[15 30]
[16 29]
[18 27]
[19 26]
[20 25]
[53 99]
[54 98]
[55 97]
[59 94]
[60 93]
[61 92]
[63 90]
[64 89]
[65 88]
[68 84]
[69 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
