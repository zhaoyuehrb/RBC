%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCGAUUGGCUUCGCCGAGGCGGGAUCCUUGAGCUUCUCCGGCGGCGAGGGGAUAGCUGGUUACCAGAAGGACUUCUUUGCAGGGCCAGUGGUUUCUGUCAGAUUUUCGCCGGUCACGACUGCUGAAU\
) } def
/len { sequence length } bind def

/coor [
[2.02366495 247.55001831]
[-14.27328205 245.99395752]
[-23.82363510 257.56076050]
[-33.37398911 269.12756348]
[-42.92433929 280.69436646]
[-52.47469330 292.26113892]
[-52.03875732 305.21554565]
[-60.31250381 314.66482544]
[-72.41076660 315.86328125]
[-82.23368073 327.19952393]
[-92.05658722 338.53576660]
[-101.87950134 349.87200928]
[-111.70240784 361.20825195]
[-117.50531769 377.13818359]
[-134.41909790 375.97189331]
[-137.98060608 359.39624023]
[-123.03865051 351.38534546]
[-113.21574402 340.04910278]
[-103.39282990 328.71286011]
[-93.56992340 317.37661743]
[-83.74700928 306.04037476]
[-81.41023254 288.68963623]
[-64.04148865 282.71078491]
[-54.49113464 271.14401245]
[-44.94078445 259.57720947]
[-35.39043045 248.01040649]
[-25.84007835 236.44361877]
[-30.36547661 223.82618713]
[-28.02226067 210.51789856]
[-19.32078171 200.03785706]
[-6.46694803 195.21130371]
[7.19621134 197.40850830]
[17.01912308 186.07226562]
[19.50625229 171.38677979]
[34.39090347 166.02415466]
[44.21381378 154.68791199]
[54.03672791 143.35166931]
[56.37350845 126.00094604]
[73.74224854 120.02209473]
[83.29260254 108.45529938]
[85.14437866 88.60088348]
[103.84299469 81.67350006]
[112.54385376 69.45485687]
[121.24470520 57.23622131]
[129.94555664 45.01758194]
[138.64640808 32.79894257]
[147.34725952 20.58030319]
[156.04812622 8.36166382]
[156.00944519 -14.80769920]
[176.45196533 -24.07325172]
[183.64070129 -37.23843765]
[183.46354675 -53.05865097]
[196.35394287 -60.52101517]
[203.54267883 -73.68620300]
[210.73141479 -86.85138702]
[217.92015076 -100.01657104]
[212.67312622 -116.65558624]
[220.87901306 -131.66970825]
[237.06756592 -136.06181335]
[243.94096375 -149.39433289]
[250.81436157 -162.72686768]
[257.68774414 -176.05940247]
[264.56115723 -189.39193726]
[271.43453979 -202.72447205]
[278.30795288 -216.05699158]
[270.12524414 -228.97947693]
[269.51342773 -244.16244507]
[276.53674316 -257.52429199]
[289.22039795 -265.52313232]
[304.10455322 -266.09542847]
[310.97793579 -279.42794800]
[317.85134888 -292.76046753]
[324.72473145 -306.09301758]
[321.22909546 -321.75061035]
[331.40301514 -334.15505981]
[347.44195557 -333.79077148]
[357.04217529 -320.93716431]
[352.83923340 -305.45443726]
[338.05728149 -299.21960449]
[331.18386841 -285.88708496]
[324.31048584 -272.55456543]
[317.43707275 -259.22201538]
[325.60455322 -246.76577759]
[326.44613647 -231.79421997]
[319.63583374 -218.32254028]
[306.91326904 -210.01393127]
[291.64047241 -209.18359375]
[284.76708984 -195.85107422]
[277.89367676 -182.51853943]
[271.02029419 -169.18600464]
[264.14688110 -155.85346985]
[257.27349854 -142.52093506]
[250.40010071 -129.18841553]
[256.01446533 -117.52799225]
[253.82519531 -104.57485199]
[244.41511536 -95.13061523]
[231.08534241 -92.82783508]
[223.89660645 -79.66265106]
[216.70787048 -66.49746704]
[209.51913452 -53.33228302]
[210.21046448 -38.45373154]
[196.80587769 -30.04970169]
[189.61714172 -16.88451767]
[193.38903809 -10.57056141]
[194.69465637 -3.26278949]
[193.31723022 4.10166836]
[189.38725281 10.56089497]
[183.37174988 15.25381374]
[176.01927185 17.53487206]
[168.26675415 17.06251717]
[159.56590271 29.28115654]
[150.86505127 41.49979782]
[142.16419983 53.71843338]
[133.46334839 65.93707275]
[124.76248932 78.15571594]
[116.06163788 90.37435150]
[118.68895721 98.83715820]
[117.13096619 107.56037140]
[111.73657990 114.59047699]
[103.71383667 118.35311127]
[94.85939789 118.00565338]
[85.30904388 129.57244873]
[85.74497986 142.52685547]
[77.47123718 151.97612000]
[65.37297058 153.17457581]
[55.55006027 164.51081848]
[45.72714615 175.84706116]
[42.53741837 191.34339905]
[28.35536575 195.89517212]
[18.53245544 207.23141479]
[22.59544563 223.60255432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[32 130]
[33 129]
[35 127]
[36 126]
[37 125]
[39 122]
[40 121]
[42 116]
[43 115]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[50 103]
[51 102]
[53 100]
[54 99]
[55 98]
[56 97]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
