%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGCAGCCUGUCCUGGCAAGGGAUGGUCAUCCUCUCAACCUACAGACCCAGUGAGCCCUAGGCCCUCACCCCAGACCCAGCUGCUGGAUAGGACCCAGCCCCGCUCCCAGAGACA\
) } def
/len { sequence length } bind def

/coor [
[106.22814941 330.93945312]
[105.25579834 346.17153931]
[97.76328278 359.46911621]
[85.23825836 368.19186401]
[70.16757965 370.60791016]
[55.54353333 366.23754883]
[44.26973724 355.94851685]
[38.58461761 341.78369141]
[39.61695099 326.55554199]
[47.16176987 313.28759766]
[59.72104645 304.61422729]
[74.80112457 302.25753784]
[79.09614563 287.88558960]
[83.39117432 273.51364136]
[87.68619537 259.14169312]
[91.79113770 244.71430969]
[95.70529175 230.23399353]
[99.61944580 215.75369263]
[103.53359222 201.27337646]
[92.84412384 188.89122009]
[91.58345795 172.41604614]
[100.44007874 158.27128601]
[116.11932373 152.08883667]
[119.64987946 137.51025391]
[123.18042755 122.93166351]
[97.93305969 130.16125488]
[77.70838928 116.70676422]
[75.10977173 94.53700256]
[62.05389023 87.15160370]
[48.99801636 79.76621246]
[35.94213867 72.38081360]
[24.43249702 82.24509430]
[10.24209976 87.57505035]
[-4.91549587 87.72706604]
[-19.20993614 82.68277740]
[-30.91509628 73.05132294]
[-38.61752319 59.99573135]
[-41.38711166 45.09253693]
[-38.88941956 30.14137077]
[-31.42605400 16.94766045]
[-19.89825439 7.10460997]
[-5.69805861 1.80081487]
[9.45979118 1.67673469]
[23.74491119 6.74735260]
[35.43230438 16.40036583]
[43.11065674 29.47012901]
[45.85277557 44.37840271]
[43.32753372 59.32493973]
[56.38341141 66.71033478]
[69.43928528 74.09573364]
[82.49516296 81.48112488]
[95.27684021 72.54597473]
[112.23110962 72.35269165]
[127.49727631 82.47592163]
[130.25352478 67.73133087]
[133.00976562 52.98673248]
[135.76600647 38.24213409]
[138.13208008 23.42992020]
[140.10632324 8.56040955]
[142.08058167 -6.30910015]
[138.17152405 -22.80624199]
[152.94181824 -31.12938499]
[165.02851868 -19.24039268]
[156.95008850 -4.33484983]
[154.97583008 10.53466034]
[153.00158691 25.40417099]
[155.22254944 29.76187897]
[154.63954163 35.57520676]
[150.51060486 40.99837875]
[147.75436401 55.74297333]
[144.99810791 70.48757172]
[142.24186707 85.23217010]
[151.72964478 73.61398315]
[161.21740723 61.99579239]
[166.99072266 48.15134048]
[178.54502869 38.58589172]
[193.22389221 35.49864578]
[207.65246582 39.59939575]
[218.51348877 49.94532776]
[223.30987549 64.15781403]
[220.93890381 78.96923828]
[211.94566345 90.97431946]
[198.39782715 97.41294098]
[183.41136169 96.80516052]
[168.87472534 100.50460052]
[154.33807373 104.20404053]
[168.86878967 107.92671967]
[183.39950562 111.64939117]
[197.93022156 115.37207031]
[212.46093750 119.09474945]
[225.06480408 109.83858490]
[240.66624451 110.90115356]
[251.89872742 121.78073120]
[253.45863342 137.34031677]
[244.60940552 150.23315430]
[229.52938843 154.37162781]
[215.33889771 147.80169678]
[208.73825073 133.62545776]
[194.20753479 129.90278625]
[179.67681885 126.18010712]
[165.14610291 122.45743561]
[150.61538696 118.73475647]
[137.75901794 126.46221161]
[134.22846985 141.04080200]
[130.69790649 155.61938477]
[140.42623901 165.48410034]
[143.95011902 178.77078247]
[140.44499207 191.95001221]
[130.93888855 201.57601929]
[118.01390839 205.18753052]
[114.09975433 219.66784668]
[110.18560028 234.14814758]
[106.27145386 248.62846375]
[107.05081940 257.85900879]
[102.05813599 263.43670654]
[97.76311493 277.80865479]
[93.46809387 292.18060303]
[89.17307281 306.55255127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 118]
[13 117]
[14 116]
[15 115]
[16 113]
[17 112]
[18 111]
[19 110]
[23 105]
[24 104]
[25 103]
[28 51]
[29 50]
[30 49]
[31 48]
[54 72]
[55 71]
[56 70]
[57 69]
[58 66]
[59 65]
[60 64]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
