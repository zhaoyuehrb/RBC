%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGCGCGGCGUGGCCACGCCCCUUCAGUGCUUGUGACGCAGGCGCCCUGGGCUUUUUGGGCGCGAAAAAGAAGCAGUCCUGGGUUGUACCCGGCGCAGCUGGGAGCGGCUGCUUCCUCCGGGGUCGUAUCUCCGCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[-14.89341450 198.80139160]
[-22.72386742 211.59529114]
[-20.47172356 224.34663391]
[-27.31957626 234.85993958]
[-39.11284256 237.76155090]
[-47.22245407 250.38034058]
[-55.33206558 262.99914551]
[-56.28397369 278.79168701]
[-69.67388916 285.31546021]
[-77.78350067 297.93426514]
[-85.89311218 310.55307007]
[-89.36988831 327.14669800]
[-106.27749634 328.39935303]
[-112.16169739 312.49926758]
[-98.51191711 302.44345093]
[-90.40229797 289.82464600]
[-82.29268646 277.20584106]
[-81.92083740 262.31588745]
[-67.95086670 254.88954163]
[-59.84125900 242.27073669]
[-51.73164368 229.65193176]
[-51.87858582 212.13658142]
[-35.51777267 203.76484680]
[-27.68731880 190.97093201]
[-31.02601814 184.25505066]
[-44.45788956 190.93223572]
[-51.13487244 177.50027466]
[-37.70341492 170.82328796]
[-41.04211426 164.10740662]
[-55.96887207 162.62689209]
[-70.89562988 161.14639282]
[-85.82238770 159.66587830]
[-100.74914551 158.18537903]
[-115.67590332 156.70487976]
[-130.60266113 155.22436523]
[-145.52941895 153.74386597]
[-161.88798523 158.19735718]
[-170.69593811 143.71093750]
[-159.21392822 131.23696899]
[-144.04891968 138.81710815]
[-129.12216187 140.29760742]
[-114.19539642 141.77812195]
[-99.26863861 143.25862122]
[-84.34188080 144.73912048]
[-69.41512299 146.21963501]
[-54.48836899 147.70013428]
[-39.56161118 149.18064880]
[-13.74874401 135.53692627]
[7.54570246 146.46444702]
[20.42484856 138.77500916]
[33.30399323 131.08555603]
[46.18313980 123.39611053]
[59.06228638 115.70666504]
[71.94142914 108.01721191]
[70.82481384 100.60619354]
[71.63262939 93.15518951]
[74.31159973 86.15568542]
[78.68501282 80.06935883]
[84.46439362 75.29769135]
[91.26852417 72.15542603]
[90.60965729 57.16990280]
[89.95079803 42.18437958]
[89.29193115 27.19885635]
[88.46849823 12.22147560]
[87.48060608 -2.74595785]
[73.93167114 -10.12361717]
[66.54228973 -23.66616821]
[67.67040253 -39.05223083]
[76.95601654 -51.37216949]
[91.43613434 -56.69473267]
[106.49020386 -53.32151794]
[117.31452179 -42.32889938]
[120.45508575 -27.22458076]
[114.90976715 -12.82830048]
[102.44803619 -3.73385549]
[103.43593597 11.23357773]
[107.04294586 17.75113106]
[104.27745819 26.53999329]
[104.93631744 41.52551651]
[105.59518433 56.51103973]
[106.25404358 71.49655914]
[120.52078247 79.25255585]
[128.43301392 93.43324280]
[143.42488098 93.92745972]
[158.41673279 94.42167664]
[173.40858459 94.91589355]
[188.40496826 95.24539948]
[203.40406799 95.41017151]
[214.65618896 84.63856506]
[229.86505127 85.01932526]
[240.06478882 95.81288910]
[255.06388855 95.97765350]
[270.06298828 96.14241791]
[285.06207275 96.30718231]
[300.06115723 96.47194672]
[318.59707642 83.95049286]
[336.98086548 95.32055664]
[351.93655396 94.16831207]
[366.89224243 93.01605988]
[381.84793091 91.86381531]
[396.80358887 90.71157074]
[411.75927734 89.55932617]
[426.71496582 88.40708160]
[439.93209839 78.69940186]
[454.83694458 85.53880310]
[456.09667969 101.88949585]
[442.41537476 110.93128967]
[427.86718750 103.36276245]
[412.91152954 104.51500702]
[397.95584106 105.66725159]
[383.00015259 106.81949615]
[368.04449463 107.97174072]
[353.08880615 109.12398529]
[338.13311768 110.27623749]
[334.31591797 117.36060333]
[327.90686035 122.38199615]
[319.93185425 124.44054413]
[311.70645142 123.11853790]
[304.61901855 118.56246948]
[299.89639282 111.47104645]
[284.89730835 111.30628204]
[269.89822388 111.14151001]
[254.89912415 110.97674561]
[239.90002441 110.81198120]
[229.46565247 121.37887573]
[214.25207520 121.42545319]
[203.23930359 110.40926361]
[188.24020386 110.24449921]
[181.46482849 113.34019470]
[172.91436768 109.90774536]
[157.92251587 109.41352844]
[142.93066406 108.91931152]
[127.93880463 108.42509460]
[116.34201050 124.17639160]
[97.40306854 129.06570435]
[79.63088226 120.89636230]
[66.75173187 128.58581543]
[53.87258911 136.27525330]
[40.99344254 143.96470642]
[28.11429596 151.65414429]
[15.23514938 159.34359741]
[17.02731705 176.15626526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[5 21]
[6 20]
[7 19]
[9 17]
[10 16]
[11 15]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[49 141]
[50 140]
[51 139]
[52 138]
[53 137]
[54 136]
[60 81]
[61 80]
[62 79]
[63 78]
[64 76]
[65 75]
[83 133]
[84 132]
[85 131]
[86 130]
[87 128]
[88 127]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
