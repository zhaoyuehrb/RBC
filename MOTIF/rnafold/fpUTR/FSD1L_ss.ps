%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCACCCUGGCAACCGCGGCGUGACUACGGCGCGCGCGGUCUGGGCGCGGACGGGUGGGGCCGGGCGGUGCCGGUGCGGGCUGGGGCAGUGCAGUGAGUAGCGGUCUUGGGGUGUGCGAUCUCGCUGAGCCUCCUCACACGGUUCGUCGUCUCGGGUUCGAGCCCAGUGGGCUUAGCCACUCGCC\
) } def
/len { sequence length } bind def

/coor [
[313.52679443 227.92268372]
[306.73764038 225.08309937]
[301.31167603 220.01129150]
[297.95993042 213.30697632]
[297.14410400 205.78742981]
[283.64514160 199.24693298]
[270.14617920 192.70643616]
[256.64721680 186.16593933]
[243.14826965 179.62544250]
[229.64930725 173.08493042]
[216.15034485 166.54443359]
[202.65139771 160.00393677]
[191.11219788 163.67480469]
[179.80603027 158.32008362]
[175.03796387 146.32157898]
[161.65019226 139.55642700]
[148.26240540 132.79127502]
[134.87461853 126.02612305]
[121.48683929 119.26097107]
[98.17366791 131.85186768]
[71.47758484 120.20246887]
[59.40153503 129.10015869]
[47.32548523 137.99786377]
[35.24943542 146.89555359]
[34.44354248 162.51235962]
[23.75012779 173.92222595]
[8.21829414 175.73774719]
[-4.81830215 167.10171509]
[-9.20417881 152.09178162]
[-2.86845946 137.79518127]
[11.19732380 130.96234131]
[26.35173798 134.81950378]
[38.42778778 125.92181396]
[50.50383759 117.02411652]
[62.57989120 108.12641907]
[62.32924271 93.12850952]
[49.96261978 84.63930511]
[37.59599686 76.15010071]
[25.22937202 67.66089630]
[9.47303486 66.22967529]
[3.35904503 52.64776230]
[-9.00757790 44.15855789]
[-21.37420082 35.66934967]
[-33.74082565 27.18014336]
[-49.49716187 25.74892807]
[-55.61115265 12.16701412]
[-67.97777557 3.67780733]
[-80.34439850 -4.81139898]
[-96.10073853 -6.24261475]
[-102.21472931 -19.82452965]
[-114.58135223 -28.31373596]
[-130.33769226 -29.74495125]
[-136.45167542 -43.32686615]
[-148.81829834 -51.81607056]
[-164.57464600 -53.24728775]
[-170.68862915 -66.82920074]
[-183.05525208 -75.31840515]
[-195.42187500 -83.80761719]
[-200.66581726 -84.21353149]
[-204.80665588 -86.38385773]
[-207.35499573 -89.59787750]
[-208.18087769 -93.04503632]
[-220.10656738 -102.14328003]
[-232.03225708 -111.24152374]
[-248.35728455 -112.79895782]
[-254.92396545 -127.82595825]
[-244.97706604 -140.86402893]
[-228.74911499 -138.50073242]
[-222.93400574 -123.16721344]
[-211.00833130 -114.06896973]
[-199.08264160 -104.97072601]
[-186.93266296 -96.17424011]
[-174.56604004 -87.68502808]
[-162.19941711 -79.19582367]
[-147.32762146 -78.37181091]
[-140.32910156 -64.18269348]
[-127.96247101 -55.69348907]
[-113.09067535 -54.86948013]
[-106.09214020 -40.68035889]
[-93.72551727 -32.19115067]
[-78.85372925 -31.36714172]
[-71.85519409 -17.17802238]
[-59.48857117 -8.68881607]
[-47.12194443 -0.19960964]
[-32.25015259 0.62440097]
[-25.25161934 14.81352043]
[-12.88499546 23.30272675]
[-0.51837182 31.79193306]
[11.84825134 40.28113937]
[26.72004700 41.10515213]
[33.71857834 55.29426956]
[46.08520126 63.78347778]
[58.45182419 72.27268219]
[70.81845093 80.76188660]
[78.42511749 73.36731720]
[87.73210144 68.72222900]
[97.80561829 67.15296936]
[107.67584991 68.68412018]
[116.43019867 73.04764557]
[123.29771423 79.71964264]
[127.71665955 87.98015594]
[129.37954712 96.98953247]
[128.25198364 105.87319183]
[141.63977051 112.63834381]
[155.02755737 119.40349579]
[168.41534424 126.16864777]
[181.80311584 132.93379211]
[200.15014648 131.47445679]
[209.19189453 146.50497437]
[222.69085693 153.04547119]
[236.18980408 159.58598328]
[249.68876648 166.12648010]
[263.18771362 172.66697693]
[276.68667603 179.20747375]
[290.18563843 185.74797058]
[303.68460083 192.28848267]
[326.58392334 188.62211609]
[338.67593384 207.53820801]
[352.67364502 212.92932129]
[366.67135620 218.32043457]
[380.66906738 223.71156311]
[391.65789795 215.37208557]
[405.22552490 213.57083130]
[417.80892944 218.67277527]
[426.15682983 229.24415588]
[428.16970825 242.45339966]
[442.07537842 248.07766724]
[455.98104858 253.70193481]
[469.88671875 259.32620239]
[483.79238892 264.95046997]
[497.69805908 270.57470703]
[511.60372925 276.19897461]
[525.50939941 281.82324219]
[529.82916260 281.05636597]
[533.76739502 281.65548706]
[536.93872070 283.32995605]
[539.09320068 285.69317627]
[540.13562012 288.31573486]
[553.63458252 294.85623169]
[567.13354492 301.39672852]
[581.90295410 296.44680786]
[595.49963379 303.27209473]
[600.12762451 317.38299561]
[613.62658691 323.92349243]
[627.12554932 330.46398926]
[640.62451172 337.00448608]
[654.12347412 343.54501343]
[667.62243652 350.08551025]
[681.22875977 356.39950562]
[694.93872070 362.48529053]
[709.59509277 356.57192993]
[724.10711670 362.83096313]
[729.86523438 377.54898071]
[723.45312500 391.99407959]
[708.67504883 397.59622192]
[694.29852295 391.03173828]
[688.85296631 376.19528198]
[675.14300537 370.10949707]
[670.42645264 370.96768188]
[665.12249756 368.85812378]
[661.08190918 363.58444214]
[647.58294678 357.04394531]
[634.08398438 350.50344849]
[620.58502197 343.96295166]
[607.08605957 337.42245483]
[593.58709717 330.88195801]
[579.64471436 335.99514771]
[565.86169434 329.55444336]
[560.59301758 314.89569092]
[547.09405518 308.35519409]
[533.59509277 301.81469727]
[519.88513184 295.72891235]
[505.97946167 290.10464478]
[492.07379150 284.48037720]
[478.16812134 278.85614014]
[464.26245117 273.23187256]
[450.35678101 267.60760498]
[436.45111084 261.98333740]
[422.54544067 256.35906982]
[408.91641235 265.49298096]
[392.36254883 264.70272827]
[379.40847778 254.10176086]
[375.27795410 237.70927429]
[361.28024292 232.31814575]
[347.28253174 226.92703247]
[333.28482056 221.53591919]
[327.67910767 225.98143005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[21 35]
[22 34]
[23 33]
[24 32]
[36 94]
[37 93]
[38 92]
[39 91]
[41 89]
[42 88]
[43 87]
[44 86]
[46 84]
[47 83]
[48 82]
[50 80]
[51 79]
[53 77]
[54 76]
[56 74]
[57 73]
[58 72]
[62 71]
[63 70]
[64 69]
[118 186]
[119 185]
[120 184]
[121 183]
[126 179]
[127 178]
[128 177]
[129 176]
[130 175]
[131 174]
[132 173]
[133 172]
[138 171]
[139 170]
[140 169]
[143 166]
[144 165]
[145 164]
[146 163]
[147 162]
[148 161]
[149 158]
[150 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
