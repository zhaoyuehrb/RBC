%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGACUUCCGCUUUGGAGGCGAGGACCCGAGCGAGUGUAGGGGGUGCGGCGUCUGGUCAGCCAGGGGUGAAUUCUCAGGACUGGUCGGCAGUCAAGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[92.13302612 122.39234161]
[80.90536499 132.33918762]
[69.67770386 142.28602600]
[58.45004272 152.23286438]
[57.34120560 167.77018738]
[45.81306458 177.69775391]
[31.00743866 176.54489136]
[19.77977753 186.49172974]
[8.55211639 196.43856812]
[-2.67554498 206.38540649]
[-13.90320587 216.33224487]
[-16.30321121 232.19476318]
[-30.27281952 240.08334351]
[-45.09574509 233.94653320]
[-49.40110397 218.49197388]
[-39.88619995 205.57507324]
[-23.85004616 205.10458374]
[-12.62238503 195.15774536]
[-1.39472353 185.21090698]
[9.83293724 175.26406860]
[21.06059837 165.31723022]
[21.70076561 150.48059082]
[32.94551468 140.23313904]
[48.50320435 141.00520325]
[59.73086548 131.05836487]
[70.95852661 121.11151886]
[82.18618774 111.16468048]
[81.28050995 96.19204712]
[68.93575287 87.67107391]
[56.59099197 79.15010834]
[43.67556381 80.69367218]
[33.53710556 73.20510101]
[31.36000252 61.19972610]
[19.27823639 52.30979156]
[2.92864347 51.03586960]
[-3.89781046 36.12508392]
[5.82134438 22.91637230]
[22.08787346 24.99772644]
[28.16816902 40.22802734]
[40.24993515 49.11795807]
[57.70311737 50.03259659]
[65.11196136 66.80535126]
[77.45672607 75.32631683]
[89.80148315 83.84729004]
[104.66310883 85.88002777]
[118.84260559 80.98699188]
[133.02209473 76.09394836]
[139.99241638 62.16367340]
[154.44213867 57.40342331]
[167.67956543 64.13439178]
[181.85906982 59.24135208]
[196.03857422 54.34831238]
[203.00888062 40.41803360]
[217.45860291 35.65778732]
[230.69602966 42.38875580]
[244.87553406 37.49571609]
[259.05502319 32.60267258]
[273.23452759 27.70963287]
[287.41403198 22.81658936]
[301.59353638 17.92354774]
[315.77301025 13.03050613]
[329.95251465 8.13746452]
[344.05648804 3.03082466]
[358.08172607 -2.28824854]
[368.24145508 -14.41635895]
[382.88534546 -11.69501019]
[396.91058350 -17.01408386]
[410.93582153 -22.33315659]
[424.96105957 -27.65222931]
[432.83001709 -41.63288879]
[448.68917847 -44.05514145]
[460.37271118 -33.06084061]
[458.91802979 -17.08387566]
[445.44104004 -8.38040447]
[430.28012085 -13.62698650]
[416.25488281 -8.30791283]
[402.22964478 -2.98883963]
[388.20440674 2.33023357]
[379.04788208 14.07788754]
[363.40081787 11.73699474]
[349.37557983 17.05606842]
[344.15060425 22.46095657]
[334.84555054 22.31696129]
[320.66607666 27.21000290]
[306.48657227 32.10304642]
[292.30706787 36.99608612]
[278.12756348 41.88912964]
[263.94805908 46.78216934]
[249.76856995 51.67521286]
[235.58908081 56.56825638]
[229.31990051 70.03054047]
[215.00958252 75.19477081]
[200.93161011 68.52780914]
[186.75210571 73.42085266]
[172.57261658 78.31388855]
[166.30343628 91.77617645]
[151.99311829 96.94040680]
[137.91514587 90.27344513]
[123.73564911 95.16648865]
[109.55615234 100.05953217]
[111.47678375 104.67355347]
[110.96159363 110.56967163]
[107.41670227 116.47008514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[28 44]
[29 43]
[30 42]
[33 40]
[34 39]
[45 100]
[46 99]
[47 98]
[50 95]
[51 94]
[52 93]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 81]
[64 80]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
