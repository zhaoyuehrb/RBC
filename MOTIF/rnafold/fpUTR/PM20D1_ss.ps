%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCCAAGAAACGCUAGUCUGGGCGUUUAGGUCAGAACUACCCCGGUAGCCUGACAGCAGGAGCUCGAGAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[36.25951767 277.82061768]
[34.19772339 292.88107300]
[26.52516937 306.00357056]
[14.41186428 315.18704224]
[-0.29500028 319.03109741]
[-15.35273457 316.94949341]
[-28.46514320 309.25967407]
[-37.63268280 297.13430786]
[-41.45736313 282.42239380]
[-39.35595322 267.36740112]
[-31.64890099 254.26512146]
[-19.51147842 245.11354065]
[-4.79455137 241.30822754]
[10.25765419 243.42942810]
[17.84581375 230.49035645]
[25.43397522 217.55126953]
[21.44007874 203.24797058]
[28.95122910 190.01780701]
[43.98092651 185.92562866]
[51.56908417 172.98654175]
[59.15724564 160.04745483]
[66.47988892 146.95628357]
[73.53396606 133.71846008]
[80.58804321 120.48063660]
[87.64212799 107.24281311]
[87.35881042 93.26384735]
[99.12004852 85.70310974]
[106.17413330 72.46528625]
[113.22821045 59.22746277]
[107.79080200 42.74467468]
[115.67627716 27.65871811]
[131.67350769 22.90502357]
[138.18176270 9.39049053]
[144.69003296 -4.12404203]
[151.19828796 -17.63857460]
[157.70654297 -31.15310860]
[154.17820740 -43.75084686]
[160.09880066 -54.96131897]
[171.72621155 -58.89004135]
[178.78028870 -72.12786102]
[185.83436584 -85.36568451]
[192.88845825 -98.60350800]
[191.79052734 -114.96586609]
[205.56059265 -123.87188721]
[220.03318787 -116.15982819]
[220.32015991 -99.76319122]
[206.12628174 -91.54943085]
[199.07220459 -78.31160736]
[192.01811218 -65.07378387]
[184.96403503 -51.83596039]
[186.62583923 -34.48880768]
[171.22106934 -24.64485168]
[164.71281433 -11.13031864]
[158.20455933 2.38421392]
[151.69630432 15.89874744]
[145.18804932 29.41328049]
[151.14337158 41.02376938]
[149.20736694 54.12657166]
[139.87632751 63.80140686]
[126.46603394 66.28153992]
[119.41195679 79.51936340]
[112.35787201 92.75718689]
[112.64118958 106.73615265]
[100.87995148 114.29689026]
[93.82586670 127.53471375]
[86.77178955 140.77253723]
[79.71771240 154.01036072]
[78.37295532 163.33940125]
[72.09632874 167.63562012]
[64.50817108 180.57470703]
[56.92000580 193.51377869]
[60.68571091 208.62858582]
[52.80591583 221.64256287]
[38.37305450 225.13943481]
[30.78489494 238.07850647]
[23.19673538 251.01759338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 76]
[15 75]
[16 74]
[19 71]
[20 70]
[21 69]
[22 67]
[23 66]
[24 65]
[25 64]
[27 62]
[28 61]
[29 60]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
