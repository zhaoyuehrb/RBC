%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCGCGGACGCUGCUGGAGUCGCCUGGCAACGAUGUCGCCUGGCAACUGAAUAGGUUGGCCAGUGGCGCGGGCUACUGGAAGCAGAAAGGGCUGCGGAGGCAGUGAGUGGUUUCUGCAGAGCUUCAUUUGGAAAGGCCUCUGUAGUUGGGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[206.07171631 268.02716064]
[218.47850037 259.59674072]
[233.12893677 256.37734985]
[247.92880249 258.83016968]
[237.06350708 248.48873901]
[226.19819641 238.14730835]
[215.33290100 227.80587769]
[204.46759033 217.46443176]
[194.25099182 218.63302612]
[184.89479065 213.85974121]
[179.62762451 204.51872253]
[180.41650391 193.60322571]
[169.96824646 182.84062195]
[159.51997375 172.07801819]
[149.07171631 161.31539917]
[138.62344360 150.55279541]
[128.17518616 139.79019165]
[117.72691345 129.02757263]
[95.20696259 136.68763733]
[71.09185791 127.62665558]
[57.18021774 103.63043976]
[42.34461594 105.84513855]
[27.50901413 108.05983734]
[15.00247478 117.74988556]
[1.27230537 111.97651672]
[-13.56329727 114.19121552]
[-28.39890099 116.40591431]
[-40.90544128 126.09596252]
[-54.63560867 120.32260132]
[-69.47121429 122.53730011]
[-84.30681610 124.75199890]
[-96.81335449 134.44204712]
[-110.54352570 128.66868591]
[-125.37912750 130.88337708]
[-140.15194702 139.20205688]
[-152.23503113 127.30939484]
[-144.15208435 112.40630341]
[-127.59382629 116.04778290]
[-112.75822449 113.83308411]
[-101.31282043 104.30144501]
[-86.52151489 109.91639709]
[-71.68591309 107.70169830]
[-56.85030746 105.48699951]
[-45.40491104 95.95536041]
[-30.61359787 101.57031250]
[-15.77799606 99.35561371]
[-0.94239306 97.14091492]
[10.50300407 87.60927582]
[25.29431534 93.22422791]
[40.12991714 91.00952911]
[54.96552277 88.79483032]
[59.03165436 82.49272919]
[44.95040512 77.32373810]
[30.86915588 72.15475464]
[16.13869476 69.32393646]
[7.67685366 56.93857193]
[10.39469814 42.18685150]
[22.71485138 33.63034058]
[37.48696899 36.23505402]
[46.13778305 48.48987579]
[56.65084839 59.18919373]
[67.16391754 69.88851166]
[71.23004913 63.58640289]
[67.13349152 49.15663528]
[63.03693008 34.72686768]
[58.94037247 20.29709816]
[54.84381104 5.86733103]
[50.74725342 -8.56243706]
[46.65069199 -22.99220467]
[42.55413055 -37.42197037]
[30.41713715 -48.45036316]
[34.16344070 -64.41586304]
[49.93916702 -68.89453888]
[61.51560211 -57.27910614]
[56.98389816 -41.51853180]
[61.08045959 -27.08876419]
[65.17701721 -12.65899658]
[69.27358246 1.77077115]
[73.37014008 16.20053864]
[77.46669769 30.63030624]
[81.56326294 45.06007385]
[85.65982056 59.48984146]
[94.30693054 60.42094421]
[102.01560211 63.05553436]
[108.47633362 67.06072998]
[115.32577515 53.71587372]
[122.17521667 40.37101746]
[129.02465820 27.02616119]
[123.94744110 12.05961609]
[131.01509094 -2.07629490]
[146.03446960 -6.99498653]
[160.09486389 0.22171396]
[164.85449219 15.29226589]
[157.48954773 29.27557945]
[142.36950684 33.87559891]
[135.52006531 47.22045517]
[128.67063904 60.56531143]
[121.82118988 73.91017151]
[129.66380310 83.35961151]
[133.63963318 94.97818756]
[133.23042297 107.25136566]
[128.48951721 118.57931519]
[138.93778992 129.34191895]
[149.38604736 140.10452271]
[159.83432007 150.86714172]
[170.28257751 161.62974548]
[180.73085022 172.39234924]
[191.17910767 183.15496826]
[210.77807617 187.71948242]
[214.80902100 206.59913635]
[225.67433167 216.94056702]
[236.53962708 227.28199768]
[247.40493774 237.62342834]
[258.27023315 247.96485901]
[265.93679810 249.06475830]
[271.35305786 253.46418762]
[273.44702148 259.31542969]
[286.43740845 266.81542969]
[299.42779541 274.31542969]
[312.41818237 281.81542969]
[325.40856934 289.31542969]
[338.39892578 296.81542969]
[351.38931274 304.31542969]
[364.37969971 311.81542969]
[377.44354248 319.18673706]
[390.57955933 326.42861938]
[403.71557617 333.67050171]
[417.23641968 326.24145508]
[432.62573242 327.32446289]
[444.97283936 336.57391357]
[450.33782959 351.03836060]
[447.00875854 366.10223389]
[436.04794312 376.95874023]
[420.95288086 380.14358521]
[406.54040527 374.64050293]
[397.40945435 362.20547485]
[396.47369385 346.80651855]
[383.33767700 339.56463623]
[370.20166016 332.32275391]
[362.78622437 331.84494019]
[356.87969971 324.80581665]
[343.88931274 317.30581665]
[330.89892578 309.80581665]
[317.90856934 302.30581665]
[304.91818237 294.80581665]
[291.92779541 287.30581665]
[278.93740845 279.80581665]
[265.94702148 272.30581665]
[272.48175049 285.80758667]
[273.53439331 300.77059937]
[268.95431519 315.05426025]
[259.39678955 326.61511230]
[246.22909546 333.79928589]
[231.33505249 335.57894897]
[216.84539795 331.69952393]
[204.83303833 322.71603394]
[197.01649475 309.91363525]
[194.51399231 295.12384033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[21 51]
[22 50]
[23 49]
[25 47]
[26 46]
[27 45]
[29 43]
[30 42]
[31 41]
[33 39]
[34 38]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[85 98]
[86 97]
[87 96]
[88 95]
[117 148]
[118 147]
[119 146]
[120 145]
[121 144]
[122 143]
[123 142]
[124 141]
[125 139]
[126 138]
[127 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
