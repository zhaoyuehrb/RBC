%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUCAUCUUACAUCAGCACAAGAAGAAGAGUGAGCAUAGCACACCGAUGUCAGACCCUGCCACUAGCCUCCUUAACAGAAGUUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[75.90569305 388.47259521]
[60.90141296 387.59393311]
[46.20713043 384.43505859]
[32.16729736 379.07000732]
[19.11102867 371.62460327]
[7.34438181 362.27331543]
[-2.85681581 351.23538208]
[-11.25343418 338.76953125]
[-17.64864349 325.16799927]
[-21.89253235 310.74963379]
[-23.88561630 295.85238647]
[-23.58117676 280.82546997]
[-20.98634720 266.02117920]
[-16.16195679 251.78649902]
[-9.22109509 238.45515442]
[-0.32646525 226.33963013]
[10.31342888 215.72392273]
[22.44917297 206.85690308]
[35.79628754 199.94641113]
[50.04190063 195.15443420]
[64.85206604 192.59330750]
[79.87962341 192.32308960]
[81.90029144 177.45980835]
[83.92096710 162.59654236]
[77.96870422 148.94297791]
[87.49451447 136.31089783]
[89.51519012 121.44761658]
[78.94136810 111.24569702]
[76.34436798 96.78400421]
[82.70790863 83.54049683]
[95.62153625 76.53170776]
[97.64221191 61.66843414]
[99.66287994 46.80516052]
[101.68355560 31.94188881]
[99.71520233 22.80514717]
[104.03169250 16.61402321]
[106.55320740 1.82747579]
[109.07472229 -12.95907116]
[95.42445374 -19.40675926]
[84.02069092 -29.29901886]
[75.70967102 -41.90177917]
[71.10813904 -56.27983475]
[70.55754089 -71.36623383]
[74.09873962 -86.04146576]
[81.46896362 -99.21652985]
[92.12128448 -109.91375732]
[105.26523590 -117.33933258]
[119.92544556 -120.94223785]
[135.01402283 -120.45510101]
[149.41130066 -115.91408539]
[162.04891968 -107.65615082]
[171.98905945 -96.29410553]
[178.49411011 -82.67107391]
[181.08134460 -67.79798889]
[179.55877686 -52.77851868]
[174.03941345 -38.72721863]
[164.93278503 -26.68678284]
[152.91470337 -17.55069351]
[138.87696838 -11.99691010]
[123.86126709 -10.43755817]
[121.33975983 4.34898901]
[118.81824493 19.13553619]
[116.54682922 33.96256256]
[114.52615356 48.82583237]
[112.50548553 63.68910599]
[110.48480988 78.55238342]
[121.05863190 88.75430298]
[123.65563202 103.21599579]
[117.29209137 116.45950317]
[104.37846375 123.46829224]
[102.35778809 138.33155823]
[108.16551971 153.04824829]
[98.78424072 164.61720276]
[96.76356506 179.48048401]
[94.74289703 194.34375000]
[109.15289307 198.61604309]
[122.74179840 205.03804016]
[135.19107056 213.45919800]
[146.20889282 223.68211365]
[155.53697205 235.46716309]
[162.95664978 248.53808594]
[168.29400635 262.58843994]
[171.42393494 277.28894043]
[172.27304077 292.29492188]
[170.82142639 307.25463867]
[167.10313416 321.81741333]
[161.20530701 335.64190674]
[153.26622009 348.40399170]
[143.47195435 359.80456543]
[132.05210876 369.57635498]
[119.27439880 377.49026489]
[105.43832397 383.36083984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 75]
[23 74]
[24 73]
[26 71]
[27 70]
[31 66]
[32 65]
[33 64]
[34 63]
[36 62]
[37 61]
[38 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
