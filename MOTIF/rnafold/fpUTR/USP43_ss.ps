%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCACCAGGAGCCUUAGAGAAGCUGUAGGGCCUGCUGGCCGCUCGUCCGCCUCGCGCCCGGGGGCUCCGCGCCUGGAGCUGCGCCGGCGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[95.98347473 111.15161133]
[91.13526154 109.21659088]
[76.37261200 111.87445831]
[61.60996628 114.53231812]
[56.07352448 118.69009399]
[50.16877747 119.19747162]
[45.80783463 116.85182953]
[30.90410423 118.54853821]
[16.00037384 120.24524689]
[3.16396689 129.49388123]
[-10.35681725 123.24586487]
[-25.26054764 124.94257355]
[-40.13484955 126.88039398]
[-54.97582245 129.05882263]
[-69.81679535 131.23725891]
[-84.65776825 133.41567993]
[-99.49874115 135.59411621]
[-112.02892303 145.25355530]
[-125.74494171 139.44665527]
[-140.58590698 141.62507629]
[-155.37901306 149.90760803]
[-167.43301392 137.98545837]
[-159.31364441 123.10216522]
[-142.76434326 126.78411102]
[-127.92337036 124.60568237]
[-116.45470428 115.10205078]
[-101.67716980 120.75314331]
[-86.83619690 118.57471466]
[-71.99522400 116.39628601]
[-57.15425110 114.21785736]
[-42.31327820 112.03942871]
[-36.03336716 107.87416840]
[-26.95725632 110.03884125]
[-12.05352497 108.34214020]
[-0.28313187 99.21486664]
[14.30366707 105.34151459]
[29.20739746 103.64480591]
[44.11112976 101.94810486]
[58.95209885 99.76967621]
[73.71474457 97.11180878]
[88.47739410 94.45394135]
[103.09355164 91.08230591]
[117.52873230 87.00485992]
[131.96391296 82.92740631]
[136.84071350 72.93672180]
[146.27479553 67.48621368]
[156.92289734 68.22126770]
[165.16810608 74.64382172]
[179.83694458 71.50930786]
[194.50578308 68.37479401]
[209.17462158 65.24028015]
[223.84346008 62.10577011]
[237.10371399 49.45781708]
[253.57214355 55.27839661]
[268.13180542 51.67052078]
[282.69143677 48.06264496]
[297.19073486 44.21947861]
[311.62591553 40.14202881]
[325.99319458 35.83136368]
[340.28875732 31.28861046]
[354.58432007 26.74585915]
[368.87991333 22.20310783]
[383.17547607 17.66035843]
[393.98431396 6.10703135]
[408.45715332 9.62651920]
[422.75271606 5.08376789]
[436.01687622 -5.47550726]
[449.83538818 4.34718990]
[444.22189331 20.34485054]
[427.29547119 19.37934113]
[412.99990845 23.92209244]
[403.21356201 35.15048981]
[387.71823120 31.95593071]
[373.42266846 36.49868011]
[359.12707520 41.04143143]
[344.83151245 45.58418274]
[330.53594971 50.12693405]
[325.00976562 55.25021362]
[315.70336914 54.57720566]
[301.26818848 58.65465927]
[295.57901001 63.59630203]
[286.29931641 62.62229156]
[271.73965454 66.23016357]
[257.18002319 69.83803558]
[250.57557678 80.11484528]
[238.32872009 83.15854645]
[226.97796631 76.77460480]
[212.30912781 79.90911865]
[197.64028931 83.04363251]
[182.97145081 86.17814636]
[168.30261230 89.31266022]
[155.15899658 103.33853912]
[136.04136658 97.36258698]
[121.60618591 101.44003296]
[107.17100525 105.51748657]
[104.74004364 108.78585815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[7 38]
[8 37]
[9 36]
[11 34]
[12 33]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[19 25]
[20 24]
[42 95]
[43 94]
[44 93]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[54 84]
[55 83]
[56 82]
[57 80]
[58 79]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
