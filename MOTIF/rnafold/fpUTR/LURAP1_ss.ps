%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUUGCUCCGCUUUAGCAGCGGCGAAGGGAGGACCCCCGGGAGCCGGUCCCCGGCGUCCGGUCGCCCAGCCCUUUUCAGGCUUGGGCCCGC\
) } def
/len { sequence length } bind def

/coor [
[75.19005585 115.54867554]
[60.86351395 119.99281311]
[46.53697586 124.43694305]
[32.21044159 128.88107300]
[17.88390160 133.32521057]
[3.55736494 137.76934814]
[-7.33084106 149.24790955]
[-21.77906418 145.62878418]
[-36.10560226 150.07292175]
[-50.10330963 155.46403503]
[-63.70967484 161.77804565]
[-77.31604004 168.09207153]
[-90.92240143 174.40609741]
[-104.52876282 180.72012329]
[-111.37184143 195.23052979]
[-127.01569366 198.78712463]
[-139.45970154 188.66159058]
[-139.15788269 172.62138367]
[-126.34176636 162.97116089]
[-110.84278870 167.11375427]
[-97.23641968 160.79972839]
[-83.63005829 154.48571777]
[-70.02369690 148.17169189]
[-56.41733170 141.85766602]
[-55.37100220 139.04727173]
[-53.03366089 136.53018188]
[-49.53049469 134.84692383]
[-45.19759369 134.47401428]
[-40.54973602 135.74638367]
[-26.22319794 131.30224609]
[-16.35972023 120.14154816]
[-0.88676888 123.44281006]
[13.43976879 118.99867249]
[27.76630592 114.55454254]
[42.09284210 110.11040497]
[56.41938019 105.66627502]
[70.74591827 101.22213745]
[78.95313263 79.64504242]
[100.24393463 70.72142029]
[104.20686340 56.25437927]
[108.16979980 41.78734207]
[112.13272858 27.32030487]
[116.09565735 12.85326672]
[112.27921295 -2.50073338]
[123.10408783 -12.73163605]
[127.06701660 -27.19867325]
[131.02995300 -41.66571045]
[134.99287415 -56.13274765]
[138.95581055 -70.59978485]
[137.30892944 -87.47355652]
[153.06736755 -93.72720337]
[163.43898010 -80.31579590]
[153.42285156 -66.63685608]
[149.45991516 -52.16981888]
[145.49699402 -37.70278168]
[141.53405762 -23.23574257]
[137.57112122 -8.76870441]
[141.67102051 5.55051613]
[130.56269836 16.81619835]
[126.59976196 31.28323555]
[122.63683319 45.75027466]
[118.67390442 60.21731186]
[114.71096802 74.68434906]
[123.71656036 82.82968140]
[128.64311218 93.92815399]
[128.64329529 106.07093048]
[142.03108215 112.83608246]
[155.41886902 119.60123444]
[168.80665588 126.36638641]
[182.19442749 133.13153076]
[195.69338989 139.67204285]
[209.29975891 145.98605347]
[222.90611267 152.30007935]
[236.98857117 145.50164795]
[252.13349915 149.39587402]
[261.18994141 162.14399719]
[259.88171387 177.72677612]
[248.82653809 188.78646851]
[233.24430847 190.10104370]
[220.49249268 181.04978943]
[216.59210205 165.90644836]
[202.98573303 159.59242249]
[189.37936401 153.27839661]
[181.83515930 153.31958008]
[175.42927551 146.51931763]
[162.04150391 139.75416565]
[148.65371704 132.98901367]
[135.26593018 126.22386169]
[121.87815094 119.45870972]
[114.92096710 125.19245148]
[106.54916382 128.53775024]
[97.55644989 129.17745972]
[88.79540253 127.05091095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[8 30]
[9 29]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
