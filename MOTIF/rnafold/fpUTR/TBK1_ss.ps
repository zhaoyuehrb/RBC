%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCCGCACCGGCGCGCCGGCCGUCGGUCACGUGGCCUCCGGCCAGGGCUUGCGAAGCCGGAAGUGUCCUGAGUCUCGAGGAGGCCGCGGGAGCCCGCCGGCGGUGGCGCGGCGGAGACCCGGCUGGUAUAACAAGAGGAUUGCCUGAUCCAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[96.69774628 138.37773132]
[94.06080627 153.14413452]
[100.14183044 168.37414551]
[89.78161621 181.08625793]
[73.63785553 178.20335388]
[68.31787872 162.69110107]
[79.29441071 150.50718689]
[81.93135071 135.74079895]
[66.69940948 107.91471100]
[77.14690399 83.12545776]
[67.86048889 71.34570312]
[58.57408142 59.56595230]
[43.95424652 53.51855850]
[42.15110397 38.73350143]
[32.86469269 26.95374680]
[23.57828331 15.17399311]
[14.29187489 3.39423895]
[5.00546503 -8.38551521]
[-4.28094387 -20.16526794]
[-13.56735325 -31.94502258]
[-21.38006783 -36.77951050]
[-22.91772461 -44.04844666]
[-31.97106361 -56.00825500]
[-41.02440262 -67.96806335]
[-50.07774353 -79.92787933]
[-59.13108063 -91.88768768]
[-68.18441772 -103.84749603]
[-77.23776245 -115.80730438]
[-86.29109955 -127.76711273]
[-108.02112579 -129.01925659]
[-121.66151428 -145.61936951]
[-118.75357056 -166.62379456]
[-128.93557739 -177.63864136]
[-139.11759949 -188.65347290]
[-149.29960632 -199.66830444]
[-159.48161316 -210.68315125]
[-169.66362000 -221.69798279]
[-179.84564209 -232.71282959]
[-190.02764893 -243.72766113]
[-200.20965576 -254.74249268]
[-210.39167786 -265.75732422]
[-220.99827576 -276.36392212]
[-232.01310730 -286.54595947]
[-243.02795410 -296.72796631]
[-254.14221191 -306.80133057]
[-265.35482788 -316.76513672]
[-276.56747437 -326.72891235]
[-287.78009033 -336.69268799]
[-299.18618774 -346.43441772]
[-310.78134155 -355.95031738]
[-322.37649536 -365.46621704]
[-333.97164917 -374.98211670]
[-349.54782104 -377.75585938]
[-354.47763062 -391.81094360]
[-366.07278442 -401.32684326]
[-382.33224487 -403.46289062]
[-388.36129761 -418.71353149]
[-377.95779419 -431.39025879]
[-361.82394409 -428.45230103]
[-356.55688477 -412.92199707]
[-344.96173096 -403.40609741]
[-330.21493530 -401.31301880]
[-324.45574951 -386.57727051]
[-312.86059570 -377.06137085]
[-301.26544189 -367.54547119]
[-289.67028809 -358.02957153]
[-284.86572266 -357.60668945]
[-280.29010010 -354.12698364]
[-277.81631470 -347.90533447]
[-266.60366821 -337.94152832]
[-255.39105225 -327.97775269]
[-244.17842102 -318.01397705]
[-237.05253601 -315.91073608]
[-232.84593201 -307.74279785]
[-221.83110046 -297.56079102]
[-210.81626892 -287.37878418]
[-207.96366882 -287.38348389]
[-204.93803406 -286.22875977]
[-202.19219971 -283.84304810]
[-200.19622803 -280.32400513]
[-199.37683105 -275.93933105]
[-189.19482422 -264.92449951]
[-179.01281738 -253.90966797]
[-168.83079529 -242.89483643]
[-158.64878845 -231.87998962]
[-148.46678162 -220.86515808]
[-138.28475952 -209.85032654]
[-128.10275269 -198.83547974]
[-117.92074585 -187.82064819]
[-107.73873138 -176.80580139]
[-99.38738251 -179.42858887]
[-90.59413910 -179.16673279]
[-82.33210754 -176.02061462]
[-75.52498627 -170.31137085]
[-70.94380951 -162.64831543]
[-69.11964417 -153.86407471]
[-70.28219604 -144.92407227]
[-74.33129120 -136.82044983]
[-65.27794647 -124.86064148]
[-56.22460938 -112.90083313]
[-47.17127228 -100.94102478]
[-38.11793137 -88.98121643]
[-29.06459427 -77.02140808]
[-20.01125526 -65.06159210]
[-10.95791531 -53.10178757]
[-1.78759921 -41.23143387]
[7.49880981 -29.45167732]
[16.78521919 -17.67192459]
[26.07162857 -5.89216995]
[35.35803604 5.88758373]
[44.64444733 17.66733742]
[53.93085480 29.44709206]
[67.88646698 34.65191650]
[70.35383606 50.27954102]
[79.64024353 62.05929565]
[88.92665863 73.83905029]
[98.46590424 69.96823883]
[109.32749176 69.66792297]
[120.15026855 73.36710358]
[129.44628906 80.97110748]
[135.80236816 91.83046722]
[138.08590698 104.78684235]
[135.62576294 118.29442596]
[146.43855286 128.69073486]
[157.25135803 139.08705139]
[168.06416321 149.48335266]
[178.87696838 159.87966919]
[189.68977356 170.27597046]
[198.27394104 166.31430054]
[207.59632874 164.88911438]
[216.92535400 166.09906006]
[225.53254700 169.83653259]
[232.74943542 175.79702759]
[238.01948547 183.50399780]
[240.94100952 192.34687805]
[241.29772949 201.62947083]
[239.07475281 210.62475586]
[234.45874023 218.63185120]
[243.97462463 230.22702026]
[253.49052429 241.82217407]
[269.02084351 247.08921814]
[271.95877075 263.22305298]
[259.28207397 273.62655640]
[244.03140259 267.59750366]
[241.89537048 251.33807373]
[232.37947083 239.74291992]
[222.86357117 228.14775085]
[202.17428589 231.19200134]
[183.67248535 221.16329956]
[174.81935120 201.92465210]
[179.29347229 181.08877563]
[168.48066711 170.69247437]
[157.66786194 160.29615784]
[146.85505676 149.89985657]
[136.04225159 139.50354004]
[125.22944641 129.10722351]
[118.09651947 131.42485046]
[122.73153687 145.69078064]
[108.46553802 150.32556152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 116]
[11 115]
[12 114]
[14 112]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 76]
[43 75]
[44 74]
[45 72]
[46 71]
[47 70]
[48 69]
[49 66]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
[123 156]
[124 155]
[125 154]
[126 153]
[127 152]
[128 151]
[138 147]
[139 146]
[140 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
