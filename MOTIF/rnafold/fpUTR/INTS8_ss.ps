%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGGAUUGUGUGAGUUUCCGGGACGUUCGGAGGGUGGCCUCUCUCCCACCGGGUUCCGCAUACCCCAGGCACCGGCCCGCAUCCAAGUGUCAGGUUGGAGCCGGGAAGCGGCCCUGGUGGUAGCGGCGGCGGGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[113.49406433 134.11286926]
[105.35472107 141.32133484]
[96.69866180 153.57174683]
[88.04260254 165.82215881]
[79.38655090 178.07257080]
[70.73049164 190.32299805]
[62.07443619 202.57341003]
[53.41837692 214.82382202]
[60.43864822 228.42436218]
[60.32270813 243.72943115]
[53.09720612 257.22204590]
[40.42250443 265.80169678]
[25.21115685 267.49685669]
[10.95862389 261.91796875]
[0.94003063 250.34704590]
[-2.54242373 235.44299316]
[1.31150365 220.63063049]
[11.61620808 209.31375122]
[26.00374413 204.09289551]
[41.16796112 206.16777039]
[49.82402039 193.91735840]
[58.48007584 181.66693115]
[67.13613129 169.41651917]
[75.79219055 157.16610718]
[84.44824219 144.91569519]
[93.10430145 132.66526794]
[90.06381226 125.80921936]
[78.90183258 135.82971191]
[65.92263794 128.31036377]
[69.06334686 113.64285278]
[83.98284149 112.09712219]
[80.94235229 105.24106598]
[66.05171967 103.43302155]
[51.16109085 101.62496948]
[36.27045441 99.81691742]
[21.37982368 98.00886536]
[6.51324606 104.93107605]
[-6.75769758 95.29706573]
[-4.78099871 79.01748657]
[10.40988445 72.83937073]
[23.18787384 83.11823273]
[38.07850647 84.92628479]
[52.96913910 86.73433685]
[67.85977173 88.54238129]
[82.75040436 90.35043335]
[97.18835449 86.28279114]
[108.94512177 76.96730042]
[120.70188141 67.65180206]
[132.45864868 58.33630753]
[144.21542358 49.02081299]
[150.22665405 34.38607407]
[165.00721741 32.54639435]
[176.76397705 23.23089981]
[188.52075195 13.91540527]
[190.02062988 9.65180016]
[192.57406616 6.44934845]
[195.70179749 4.51274061]
[198.90795898 3.86388922]
[201.74310303 4.35311174]
[214.27206421 -3.89462090]
[226.80102539 -12.14235306]
[239.32998657 -20.39008522]
[244.83106995 -27.78131104]
[252.22601318 -28.67785645]
[264.93313599 -36.64836884]
[277.64025879 -44.61888123]
[290.34738159 -52.58939743]
[302.96618652 -60.69900894]
[315.49514771 -68.94673920]
[328.02410889 -77.19447327]
[340.55307007 -85.44220734]
[353.08203125 -93.68994141]
[356.46798706 -106.18809509]
[367.13757324 -112.78984070]
[379.04492188 -110.39919281]
[391.75204468 -118.36970520]
[404.45916748 -126.34021759]
[412.98693848 -144.54968262]
[432.27774048 -144.60899353]
[444.62249756 -153.12995911]
[456.96725464 -161.65093994]
[469.31201172 -170.17190552]
[472.28558350 -185.46228027]
[484.92630005 -193.92790222]
[499.48501587 -190.99882507]
[511.82977295 -199.51980591]
[524.17456055 -208.04077148]
[536.51928711 -216.56175232]
[548.86407471 -225.08271790]
[549.10437012 -240.59793091]
[558.44531250 -252.98851013]
[573.29510498 -257.49002075]
[587.94366455 -252.37156677]
[596.75836182 -239.60125732]
[596.34973145 -224.08956909]
[586.87493896 -211.80104065]
[571.97723389 -207.46087646]
[557.38500977 -212.73796082]
[545.04028320 -204.21697998]
[532.69549561 -195.69601440]
[520.35076904 -187.17504883]
[508.00598145 -178.65406799]
[505.58212280 -164.00277710]
[493.18417358 -155.18544006]
[477.83297729 -157.82714844]
[465.48822021 -149.30618286]
[453.14346313 -140.78520203]
[440.79870605 -132.26423645]
[439.84658813 -121.99559021]
[433.22857666 -113.80100250]
[422.96969604 -110.57621002]
[412.42968750 -113.63310242]
[399.72256470 -105.66259003]
[387.01544189 -97.69207001]
[379.69772339 -81.77793121]
[361.32977295 -81.16098022]
[348.80081177 -72.91324615]
[336.27185059 -64.66551208]
[323.74288940 -56.41777802]
[311.21389771 -48.17004776]
[307.32641602 -41.81580353]
[298.31790161 -39.88227463]
[285.61077881 -31.91176224]
[272.90365601 -23.94124985]
[260.19653320 -15.97073555]
[247.57772827 -7.86112356]
[235.04876709 0.38660926]
[222.51980591 8.63434219]
[209.99084473 16.88207436]
[197.83624268 25.67217255]
[186.07948303 34.98766708]
[174.32270813 44.30316162]
[169.15238953 58.27159119]
[153.53091431 60.77758026]
[141.77413940 70.09307098]
[130.01737976 79.40856934]
[118.26061249 88.72406769]
[106.50384521 98.03955841]
[111.76298523 99.47086334]
[116.41326141 103.37603760]
[119.56832123 109.46884155]
[120.46325684 117.18311310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[46 138]
[47 137]
[48 136]
[49 135]
[50 134]
[52 132]
[53 131]
[54 130]
[59 129]
[60 128]
[61 127]
[62 126]
[64 125]
[65 124]
[66 123]
[67 122]
[68 120]
[69 119]
[70 118]
[71 117]
[72 116]
[75 114]
[76 113]
[77 112]
[79 108]
[80 107]
[81 106]
[82 105]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
