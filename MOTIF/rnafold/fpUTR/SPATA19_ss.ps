%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUCAAUGACCUUCCUGUCCCAUAGGAGUUCUCAGGCAGCUUCAAUGGAAGGAGGGAGCCAAGAAGGGGGCCUGGUAUACAUUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[187.80824280 242.08531189]
[179.23922729 229.77386475]
[170.67019653 217.46241760]
[162.10118103 205.15095520]
[153.53215027 192.83950806]
[144.96313477 180.52806091]
[136.39410400 168.21661377]
[127.82508087 155.90515137]
[115.85874176 153.40121460]
[108.64454651 143.03541565]
[110.57177734 130.14598083]
[102.42344666 117.55213928]
[85.45717621 110.12210083]
[84.38211823 91.63145447]
[75.40217590 79.61643982]
[66.42223358 67.60142517]
[57.44229126 55.58640671]
[48.46234894 43.57138824]
[39.48240662 31.55637169]
[30.50246239 19.54135704]
[19.40876389 18.56566048]
[10.93106079 11.69170475]
[7.81345987 1.46415651]
[10.88518143 -8.54508877]
[2.73685551 -21.13892746]
[-5.41147041 -33.73276901]
[-13.55979633 -46.32660675]
[-27.55250359 -53.71001434]
[-27.97007942 -68.59876251]
[-36.11840439 -81.19260406]
[-44.26673126 -93.78644562]
[-52.41505814 -106.38027954]
[-60.56338501 -118.97412109]
[-68.71170807 -131.56796265]
[-84.25080872 -133.32023621]
[-94.99058533 -144.68647766]
[-95.86004639 -160.29986572]
[-86.44866180 -172.78825378]
[-71.20020294 -176.25500488]
[-57.31451416 -169.06321716]
[-51.34800339 -154.60864258]
[-56.11787033 -139.71629333]
[-47.96954346 -127.12244415]
[-39.82121658 -114.52861023]
[-31.67289162 -101.93476868]
[-23.52456665 -89.34092712]
[-15.37624073 -76.74709320]
[-1.96635592 -70.26448059]
[-0.96595699 -54.47493362]
[7.18236876 -41.88109207]
[15.33069420 -29.28725433]
[23.47902107 -16.69341469]
[41.26076889 -9.41839695]
[42.51747894 10.56141281]
[51.49742126 22.57642937]
[60.47736359 34.59144592]
[69.45730591 46.60646057]
[78.43724823 58.62147903]
[87.41719818 70.63649750]
[96.39714050 82.65151215]
[106.55559540 83.53868866]
[114.54282379 89.87789917]
[117.71342468 99.56957245]
[115.01728821 109.40381622]
[123.16561890 121.99765015]
[139.70005798 129.88142395]
[140.13653564 147.33613586]
[148.70555115 159.64758301]
[157.27458191 171.95903015]
[165.84359741 184.27049255]
[174.41262817 196.58193970]
[182.98164368 208.89338684]
[191.55067444 221.20484924]
[200.11968994 233.51629639]
[214.51557922 228.90652466]
[229.63066101 228.74649048]
[244.12092590 233.05039978]
[256.69790649 241.43557739]
[266.24325562 253.15640259]
[271.90823364 267.17065430]
[273.18908691 282.23223877]
[269.97192383 297.00183105]
[262.54281616 310.16616821]
[251.56237793 320.55468750]
[238.00695801 327.24365234]
[223.08190918 329.63824463]
[208.11433411 327.52557373]
[194.43516541 321.09350586]
[183.26072693 310.91394043]
[175.58465576 297.89205933]
[172.08949280 283.18576050]
[173.08602905 268.10272217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[11 65]
[12 64]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[24 52]
[25 51]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
