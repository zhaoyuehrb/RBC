%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCUGGCAGUCAAGGCUGUAGGAGGGCAUGGAGAGUUGAAGAAAAAAGCAGUAUCUUGAGGCAGACUGGAAGAGUCAUCACAGCAUCCAAAUCAACAAGAAAACAUCAUUCCAGGGUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[60.83100510 196.19602966]
[57.38608932 197.34759521]
[49.50847244 210.11251831]
[41.63085175 222.87744141]
[33.75323105 235.64234924]
[25.87561226 248.40727234]
[32.63238144 262.27627563]
[30.79569054 277.59393311]
[20.95162201 289.47238159]
[6.24138021 294.12130737]
[-8.64104843 290.05718994]
[-18.94673538 278.57693481]
[-21.38717461 263.34384155]
[-15.18362904 249.21868896]
[-2.31562829 240.70880127]
[13.11069489 240.52964783]
[20.98831367 227.76473999]
[28.86593437 214.99981689]
[36.74355316 202.23489380]
[44.62117386 189.46998596]
[52.01208115 176.41722107]
[58.90578079 163.09518433]
[65.79947662 149.77313232]
[72.69317627 136.45108032]
[79.58687592 123.12903595]
[71.58457947 112.00882721]
[69.18672180 98.52008057]
[72.86624908 85.32322693]
[61.80355072 75.19323730]
[46.68342972 78.14079285]
[32.88817596 71.69529724]
[25.61946297 58.51843262]
[27.48132324 43.76473999]
[16.41862679 33.63474655]
[5.35592890 23.50475502]
[-5.70676756 13.37476349]
[-23.73152542 9.87074375]
[-28.46701431 -6.97751331]
[-39.78078461 -16.82629967]
[-51.09455490 -26.67508698]
[-65.59389496 -21.60904312]
[-80.68070984 -24.48715591]
[-92.29673004 -34.53522491]
[-97.31729889 -49.05036926]
[-94.39191437 -64.12808990]
[-84.30747986 -75.71255493]
[-69.77667236 -80.68760681]
[-54.70819092 -77.71496582]
[-43.15539169 -67.59427643]
[-38.22591782 -53.04794312]
[-41.24576950 -37.98885727]
[-29.93199921 -28.14006996]
[-18.61822701 -18.29128456]
[-6.46216011 -18.79684258]
[3.05477023 -10.58677864]
[4.42322445 2.31206679]
[15.48592091 12.44205856]
[26.54861832 22.57205009]
[37.61131287 32.70204163]
[52.14439774 29.55125237]
[65.90888214 35.63425827]
[73.54138184 48.80992889]
[71.93354034 64.13053894]
[82.99623871 74.26052856]
[96.04572296 69.40569305]
[109.90072632 70.78315735]
[121.73886871 78.11233521]
[129.14862061 89.90020752]
[144.09063721 88.58244324]
[159.03263855 87.26467133]
[173.97463989 85.94690704]
[188.91664124 84.62913513]
[203.85864258 83.31137085]
[218.78291321 81.80594635]
[233.68708801 80.11309814]
[248.56880188 78.23310089]
[263.42572021 76.16624451]
[272.95147705 63.84157181]
[288.04797363 61.95713043]
[299.73895264 71.11444855]
[314.59588623 69.04759216]
[317.00296021 54.12454605]
[323.70324707 40.57472992]
[334.10095215 29.60298729]
[347.27151489 22.18491173]
[362.04382324 18.98011971]
[377.10430908 20.27357483]
[391.11383057 25.95026779]
[402.82666016 35.50542831]
[411.20129395 48.08941650]
[415.49307251 62.58327866]
[415.32037354 77.69822693]
[410.69857788 92.09024811]
[402.03860474 104.47961426]
[390.11053467 113.76467133]
[375.97497559 119.11980438]
[360.88885498 120.06883240]
[346.19363403 116.52736664]
[333.19601440 108.81031799]
[323.05169678 97.60387421]
[316.66271973 83.90451813]
[301.80581665 85.97136688]
[293.05825806 97.97203827]
[278.02066040 100.27976227]
[265.49258423 91.02316284]
[250.63565063 93.09001923]
[244.37423706 97.17352295]
[235.37992859 95.01726532]
[220.47575378 96.71011353]
[214.11369324 100.63497162]
[205.17640686 98.25337219]
[190.23440552 99.57114410]
[175.29240417 100.88890839]
[160.35040283 102.20668030]
[145.40840149 103.52444458]
[130.46640015 104.84221649]
[123.47498322 120.01432800]
[109.59948730 129.31719971]
[92.90892029 130.02273560]
[86.01522064 143.34478760]
[79.12152863 156.66682434]
[72.22782898 169.98887634]
[65.33412933 183.31092834]
[65.59907532 188.75056458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[28 64]
[29 63]
[33 59]
[34 58]
[35 57]
[36 56]
[38 53]
[39 52]
[40 51]
[68 116]
[69 115]
[70 114]
[71 113]
[72 112]
[73 111]
[74 109]
[75 108]
[76 106]
[77 105]
[80 102]
[81 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
