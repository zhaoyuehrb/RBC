%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCGUCGCGGCGCGCGGUGCGGCCUGGGAGAGUCGGAAGCGCGGCGGCCGCGGAGCCCUGCGAGUAGGCAGCGUUGGGCCC\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 171.24783325]
[82.21823120 155.56034851]
[92.50000000 143.24511719]
[92.50000000 128.24511719]
[92.50000000 113.24511719]
[83.28910828 96.70304871]
[97.63842773 81.30365753]
[86.64264679 71.10106659]
[75.64686584 60.89847183]
[64.65109253 50.69588089]
[53.65531158 40.49328995]
[42.65953445 30.29069901]
[31.66375732 20.08810806]
[23.02180672 16.42275620]
[20.45666695 9.29251575]
[9.85006523 -1.31408608]
[-0.75653607 -11.92068768]
[-15.98582935 -16.20778656]
[-19.51427269 -30.67842293]
[-30.12087440 -41.28502655]
[-40.72747421 -51.89162827]
[-51.33407593 -62.49822998]
[-66.90999603 -62.66692352]
[-77.51550293 -73.57462311]
[-77.25868988 -88.42284393]
[-87.86529541 -99.02944183]
[-96.36414337 -103.01536560]
[-98.66088104 -110.23653412]
[-108.86347198 -121.23230743]
[-124.77702332 -123.26663208]
[-132.98500061 -137.05099487]
[-127.19093323 -152.01123047]
[-111.83954620 -156.67111206]
[-98.70710754 -147.45597839]
[-97.86769867 -131.43490601]
[-87.66510773 -120.43912506]
[-77.25868988 -109.63604736]
[-66.65209198 -99.02944183]
[-51.80386734 -99.28625488]
[-40.89617157 -88.68074799]
[-40.72747421 -73.10482788]
[-30.12087440 -62.49822998]
[-19.51427269 -51.89162827]
[-8.90767002 -41.28502655]
[5.56296778 -37.75658417]
[9.85006523 -22.52729034]
[20.45666695 -11.92068768]
[31.06326866 -1.31408608]
[41.86634827 9.09232998]
[52.86212540 19.29491997]
[63.85790253 29.49751282]
[74.85368347 39.70010376]
[85.84945679 49.90269470]
[96.84523773 60.10528564]
[107.84101868 70.30787659]
[120.96936798 77.56365967]
[135.45825195 81.44594574]
[149.94714355 85.32823181]
[165.27964783 81.42632294]
[175.57067871 92.19403839]
[190.05957031 96.07632446]
[204.54846191 99.95861053]
[219.03735352 103.84089661]
[232.59722900 95.72268677]
[247.90539551 99.65151215]
[255.87977600 113.29646301]
[251.78932190 128.56224060]
[238.06083679 136.39192200]
[222.83915710 132.14028931]
[215.15505981 118.32978058]
[200.66616821 114.44749451]
[186.17729187 110.56520844]
[171.68840027 106.68292236]
[157.39224243 110.86252594]
[146.06484985 99.81711578]
[131.57597351 95.93482971]
[117.08708191 92.05254364]
[116.22056580 105.19779968]
[107.50000000 113.24511719]
[107.50000000 128.24511719]
[107.50000000 143.24511719]
[117.78176880 155.56034851]
[114.42288971 171.24783325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[5 79]
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[15 48]
[16 47]
[17 46]
[19 44]
[20 43]
[21 42]
[22 41]
[25 38]
[26 37]
[28 36]
[29 35]
[56 77]
[57 76]
[58 75]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
