%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAUAAGUCAAAAGCUGCGUCAGAAGGUUCUAACUUUUGUCAUCACUAUUACCAGCAUUGUCAUCGUUAUCGUUAUCUUCGUCAUCAUCAUUACCACCGUUAUACCUGAUACUGCCAUAACAAUCAGAACAUU\
) } def
/len { sequence length } bind def

/coor [
[114.83277130 185.60156250]
[104.97779083 186.73442078]
[95.05792236 186.73646545]
[85.20248413 185.60766602]
[75.53997040 183.36273193]
[66.19635773 180.03094482]
[57.29346848 175.65574646]
[48.94737244 170.29415894]
[41.26688766 164.01609802]
[34.35214615 156.90341187]
[28.29330254 149.04884338]
[23.16935158 140.55477905]
[19.04709435 131.53198242]
[15.98027611 122.09808350]
[14.00888348 112.37607574]
[13.15861702 102.49270630]
[13.44056320 92.57684326]
[-1.33814168 90.00976562]
[-16.11684608 87.44268799]
[-30.89555168 84.87561798]
[-39.97642136 86.49695587]
[-45.98204422 82.07651520]
[-60.69800186 79.17124939]
[-75.66252136 78.14015198]
[-90.63787842 78.99961090]
[-105.61323547 79.85906219]
[-120.58859253 80.71851349]
[-135.56394958 81.57797241]
[-150.53930664 82.43742371]
[-159.74241638 95.08008575]
[-174.93132019 98.79909515]
[-188.93429565 91.83844757]
[-195.13957214 77.48474884]
[-190.61718750 62.51537323]
[-177.50248718 53.99840927]
[-161.98783875 55.95530319]
[-151.39875793 67.46206665]
[-136.42340088 66.60261536]
[-121.44805145 65.74315643]
[-106.47268677 64.88370514]
[-91.49732971 64.02424622]
[-76.52197266 63.16479492]
[-88.86855316 54.64645767]
[-95.96702576 41.43238831]
[-96.25281525 26.43511009]
[-89.66293335 12.96019077]
[-77.64985657 3.97765017]
[-62.86140442 1.46733892]
[-48.55710983 5.98255682]
[-37.88980103 16.52810097]
[-33.21066284 30.77961540]
[-35.55103683 45.59591293]
[-44.39507294 57.71131516]
[-57.79273605 64.45529175]
[-43.07677841 67.36055756]
[-28.32847595 70.09690857]
[-13.54977036 72.66398621]
[1.22893429 75.23106384]
[16.00763893 77.79814148]
[24.15431213 57.63172150]
[37.05465698 40.12076569]
[53.90013504 26.36277008]
[73.63494873 17.22002983]
[95.02220917 13.26557255]
[116.72145081 14.74724388]
[137.37266541 21.57217979]
[155.68153381 33.31262207]
[170.50051880 49.23273468]
[180.90086365 68.33471680]
[195.28884888 64.09372711]
[209.67681885 59.85273743]
[224.06480408 55.61175156]
[238.45278931 51.37076187]
[249.50230408 40.04739761]
[263.89788818 43.87059402]
[278.28585815 39.62960434]
[292.57281494 35.05982590]
[306.75122070 30.16365814]
[320.92965698 25.26748848]
[335.10806274 20.37132072]
[333.06082153 5.46176100]
[333.96191406 -9.56069756]
[337.77673340 -24.11863136]
[344.35861206 -37.65247345]
[353.45462036 -49.64201355]
[364.71508789 -59.62641525]
[377.70718384 -67.22189331]
[391.93154907 -72.13651276]
[406.84146118 -74.18135071]
[421.86376953 -73.27782440]
[436.42108154 -69.46065521]
[449.95385742 -62.87656784]
[461.94192505 -53.77863693]
[471.92449951 -42.51655960]
[479.51788330 -29.52322006]
[484.43020630 -15.29805183]
[486.47262573 -0.38783005]
[485.56665039 14.63433552]
[481.74713135 29.19103432]
[475.16085815 42.72274399]
[466.06097412 54.70934296]
[454.79730225 64.69009399]
[441.80273438 72.28137207]
[427.57675171 77.19138336]
[412.66619873 79.23139954]
[397.64419556 78.32300568]
[383.08810425 74.50112152]
[369.55746460 67.91265869]
[357.57235718 58.81084061]
[347.59341431 47.54553223]
[340.00424194 34.54973984]
[325.82583618 39.44590759]
[311.64739990 44.34207535]
[297.46899414 49.23824310]
[294.58078003 53.14213562]
[289.17269897 55.22176743]
[282.52685547 54.01758575]
[268.13885498 58.25857544]
[258.11846924 69.27859497]
[242.69377136 65.75874329]
[228.30578613 69.99973297]
[213.91781616 74.24072266]
[199.52983093 78.48171234]
[185.14184570 82.72269440]
[186.55636597 92.54119873]
[186.84240723 102.45694733]
[185.99620056 112.34066772]
[184.02880859 122.06348419]
[180.96588135 131.49865723]
[176.84733582 140.52314758]
[171.72688293 149.01931763]
[165.67127991 156.87637329]
[158.75947571 163.99191284]
[151.08157349 170.27313232]
[142.73768616 175.63815308]
[133.83659363 180.01702881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 59]
[18 58]
[19 57]
[20 56]
[22 55]
[23 54]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[69 124]
[70 123]
[71 122]
[72 121]
[73 120]
[75 118]
[76 117]
[77 114]
[78 113]
[79 112]
[80 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
