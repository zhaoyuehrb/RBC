%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUCAAAGGGCGUCGCCCAAAGCGGGACAGGUCCAGCGGUUGUUCUGUGUGAAGUCGCGCGGCUUCCACCCACGCAGUGUUCUAAGUGAAGGCCAGAAACUCGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[25.51996994 310.72964478]
[22.46613884 316.63333130]
[18.30056953 321.79818726]
[13.19509697 326.01843262]
[7.35887718 329.12713623]
[1.02982903 331.00268555]
[-5.53507137 331.57369995]
[-12.07022095 330.82168579]
[-18.31213379 328.78155518]
[-24.01006699 325.54003906]
[-35.19469833 335.53524780]
[-46.37933350 345.53042603]
[-57.56396484 355.52563477]
[-65.34532928 370.58837891]
[-81.97352600 367.28091431]
[-83.39844513 350.38693237]
[-67.55916595 344.34100342]
[-56.37453079 334.34579468]
[-45.18989944 324.35061646]
[-34.00526428 314.35540771]
[-36.90590286 289.56970215]
[-21.35827446 269.77404785]
[3.83854842 266.66574097]
[11.09433174 253.53739929]
[18.35011482 240.40904236]
[25.60589790 227.28068542]
[32.86168289 214.15234375]
[40.11746597 201.02398682]
[31.89046478 185.52732849]
[34.52830505 168.02453613]
[47.17724228 155.42155457]
[64.99695587 152.80221558]
[71.50521088 139.28768921]
[71.57298279 131.78845215]
[78.39021301 125.48928833]
[85.27494049 112.16260529]
[80.97492981 98.32583618]
[87.62535095 85.45268250]
[101.39837646 80.95266724]
[108.28310394 67.62598419]
[107.74295807 51.81400299]
[120.45871735 44.05779266]
[127.34344482 30.73110771]
[134.22817993 17.40442276]
[127.02342224 -1.20378315]
[135.48728943 -18.94316483]
[153.91452026 -24.86668587]
[159.65478516 -38.72488022]
[165.39503479 -52.58307266]
[171.13528442 -66.44126129]
[176.87553406 -80.29945374]
[182.61578369 -94.15765381]
[187.37092590 -108.38398743]
[191.11756897 -122.90853882]
[194.86421204 -137.43309021]
[198.61085510 -151.95764160]
[202.35751343 -166.48219299]
[206.10415649 -181.00675964]
[201.19290161 -196.65321350]
[212.48524475 -208.54501343]
[228.36460876 -204.44888306]
[232.49563599 -188.57858276]
[220.62870789 -177.26010132]
[216.88206482 -162.73554993]
[213.13542175 -148.21099854]
[209.38876343 -133.68644714]
[205.64212036 -119.16189575]
[201.89547729 -104.63734436]
[216.21298218 -109.11048889]
[228.79559326 -100.94485474]
[230.54197693 -86.04686737]
[220.18890381 -75.19264984]
[205.22505188 -76.23337555]
[196.47398376 -88.41739655]
[190.73371887 -74.55920410]
[184.99346924 -60.70101166]
[179.25321960 -46.84281921]
[173.51296997 -32.98462677]
[167.77272034 -19.12643433]
[174.24699402 -10.84537792]
[176.64350891 -0.52694148]
[174.44819641 9.91952133]
[168.00331116 18.53108788]
[158.45603943 23.66008949]
[147.55485535 24.28915215]
[140.67013550 37.61583710]
[133.78540039 50.94252014]
[134.81799316 65.80129242]
[121.60978699 74.51071167]
[114.72505951 87.83739471]
[119.02507019 101.67416382]
[112.37464905 114.54731750]
[98.60162354 119.04733276]
[91.71689606 132.37400818]
[85.01974487 145.79594421]
[78.51148987 159.31047058]
[85.91622162 169.58456421]
[88.17929840 181.97120667]
[84.92372131 194.05941772]
[76.84049988 203.52354431]
[65.54313660 208.57060242]
[53.24581528 208.27976990]
[45.99003220 221.40812683]
[38.73424911 234.53646851]
[31.47846603 247.66482544]
[24.22268295 260.79318237]
[16.96689987 273.92153931]
[21.44818306 278.92279053]
[24.83306503 284.70932007]
[26.98874283 291.04504395]
[27.83245468 297.67254639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 20]
[11 19]
[12 18]
[13 17]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[32 96]
[33 95]
[35 94]
[36 93]
[39 90]
[40 89]
[42 87]
[43 86]
[44 85]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
