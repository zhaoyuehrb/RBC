%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGGCCUCGGGGGUUGGGGGGCUGUGUGAGUCUCGCAGUGGGGCUGAGGCAGGCAGCCGGGAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[81.65408325 121.69261932]
[75.65924835 111.24045563]
[74.78876495 99.91045380]
[78.63425446 89.94863892]
[67.79232788 79.58270264]
[56.95040894 69.21676636]
[46.10848618 58.85082245]
[35.26655960 48.48488235]
[24.42463875 38.11894226]
[13.58271503 27.75300407]
[2.74079251 17.38706398]
[-2.30105662 16.42188263]
[-6.20845366 13.96702385]
[-8.62141418 10.64724636]
[-9.45686817 7.13990021]
[-8.89760399 4.06584835]
[-17.71438217 -8.06940651]
[-26.53116035 -20.20466232]
[-40.90230560 -26.82136536]
[-42.12360001 -41.66581345]
[-50.94038010 -53.80107117]
[-59.75716019 -65.93632507]
[-68.57393646 -78.07157898]
[-77.39071655 -90.20683289]
[-86.20749664 -102.34208679]
[-101.76432800 -106.26184082]
[-108.26781464 -120.92759705]
[-100.72903442 -135.08903503]
[-84.93109131 -137.88272095]
[-72.99282074 -127.16556549]
[-74.07224274 -111.15886688]
[-65.25546265 -99.02361298]
[-56.43868256 -86.88835907]
[-47.62190247 -74.75310516]
[-38.80512619 -62.61784744]
[-29.98834610 -50.48259354]
[-16.24783707 -44.73388672]
[-14.39590645 -29.02144051]
[-5.57912731 -16.88618469]
[3.23765135 -4.75093079]
[13.10673237 6.54514122]
[23.94865608 16.91108131]
[34.79057693 27.27702141]
[45.63249969 37.64295959]
[56.47442245 48.00889969]
[67.31634521 58.37483978]
[78.15827179 68.74077606]
[89.00019073 79.10671997]
[113.62475586 75.98526001]
[131.56292725 98.29199982]
[146.18684387 101.62980652]
[160.81076050 104.96762085]
[175.10513306 97.68403625]
[189.65188599 104.44950104]
[193.29199219 120.07413483]
[183.23309326 132.57205200]
[167.19149780 132.35592651]
[157.47294617 119.59154510]
[142.84902954 116.25373077]
[128.22511292 112.91591644]
[118.87276459 124.64338684]
[125.38101959 138.15791321]
[139.98794556 144.79246521]
[143.76824951 160.38377380]
[133.82199097 172.97152710]
[117.77910614 172.89947510]
[107.94631195 160.22290039]
[111.86648560 144.66618347]
[105.35823059 131.15164185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[16 40]
[17 39]
[18 38]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[50 60]
[51 59]
[52 58]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
