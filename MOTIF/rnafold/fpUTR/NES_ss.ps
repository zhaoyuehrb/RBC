%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUACUCCCACCCCGCCCCGCCCCGUCAUUGUCCCCGUCGGUCUCUUUUCUCUUCCGUCCUAAAAGCUCUGCGAGCCGCUCCCUUCUCCCGGUGCCCCGCGUCUGUCCAUCCUCAGUGGGUCAGACGAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[101.85624695 186.19781494]
[100.80210876 171.23489380]
[99.74796295 156.27198792]
[92.80216217 153.44252014]
[87.14323425 167.33412170]
[81.48430634 181.22572327]
[75.82537842 195.11730957]
[74.73596954 210.07769775]
[60.17110825 213.66444397]
[52.25928116 200.92070007]
[61.93378067 189.45838928]
[67.59270477 175.56678772]
[73.25163269 161.67518616]
[78.91056061 147.78358459]
[71.96476746 144.95413208]
[60.75505829 154.92120361]
[52.93587875 169.96435547]
[36.31604385 166.61512756]
[34.93356705 149.71763611]
[50.78798676 143.71148682]
[61.99769211 133.74441528]
[55.45996857 109.36322021]
[61.73226929 87.66938019]
[46.76935577 88.72352600]
[31.80644226 89.77767181]
[26.64498520 104.10523987]
[16.09752655 115.09027863]
[1.99148047 120.82955170]
[-13.22919750 120.32871246]
[-26.92743301 113.67452240]
[-36.72992325 102.01986694]
[-40.93832779 87.38397980]
[-38.82351303 72.30261230]
[-30.75188828 59.38871765]
[-18.12190628 50.87969589]
[-3.12179112 48.24978638]
[11.64959812 51.95463943]
[23.63302994 61.35236740]
[30.75229836 74.81475830]
[45.71521378 73.76061249]
[60.67812729 72.70646667]
[47.04154968 66.45796204]
[33.40497589 60.20945740]
[19.76840210 53.96095276]
[4.77590513 54.43535233]
[-9.79346085 50.86693954]
[-22.86976242 43.51776505]
[-33.49271011 32.92753601]
[-40.88218307 19.87396622]
[-44.49552155 5.31567764]
[-44.06737137 -9.67821026]
[-39.62917328 -24.00658798]
[-31.50685501 -36.61721802]
[-20.29690170 -46.58400726]
[-6.82253742 -53.17502594]
[7.92671490 -55.90624619]
[22.86771011 -54.57709122]
[36.90322495 -49.28517532]
[49.00252533 -40.41912079]
[58.27707291 -28.63002777]
[64.04577637 -14.78365231]
[65.88498688 0.10316364]
[63.66042328 14.93450546]
[68.27117920 29.20829010]
[72.88192749 43.48207474]
[77.49268341 57.75586319]
[80.28958130 43.01892471]
[83.08648682 28.28198624]
[85.88338470 13.54504776]
[82.89644623 -3.14370751]
[98.10613251 -10.63382053]
[109.51399231 1.90799487]
[100.62032318 16.34194756]
[97.82342529 31.07888603]
[95.02651978 45.81582642]
[92.22962189 60.55276108]
[109.28836060 63.74701309]
[122.21443939 73.41744995]
[134.09687805 64.26279449]
[140.30670166 49.71120834]
[155.11091614 48.07282257]
[166.99336243 38.91816711]
[166.42227173 23.41160583]
[175.10270691 10.54965782]
[189.69685364 5.27800655]
[204.59298706 9.62370872]
[214.06321716 21.91575241]
[214.46604919 37.42759705]
[205.64660645 50.19462204]
[190.99612427 55.30764771]
[176.14801025 50.80060577]
[164.26557922 59.95526123]
[158.90567017 73.85204315]
[143.25152588 76.14523315]
[131.36909485 85.29988098]
[137.15470886 92.63063812]
[141.06965637 101.91627502]
[142.51028442 112.64173889]
[141.02194214 124.11700439]
[136.34710693 135.52110291]
[148.64558411 144.10874939]
[160.94406128 152.69638062]
[173.24253845 161.28401184]
[185.54101562 169.87165833]
[197.83949280 178.45928955]
[210.23779297 186.90216064]
[222.73419189 195.19914246]
[235.23060608 203.49610901]
[247.72702026 211.79307556]
[260.22344971 220.09004211]
[276.17034912 218.33628845]
[287.38159180 229.81179810]
[285.25689697 245.71353149]
[271.42611694 253.84304810]
[256.49905396 247.96406555]
[251.92646790 232.58645630]
[239.43005371 224.28948975]
[226.93363953 215.99250793]
[214.43722534 207.69554138]
[201.94081116 199.39857483]
[194.55943298 198.30937195]
[189.25184631 190.75776672]
[176.95338440 182.17012024]
[164.65490723 173.58248901]
[152.35643005 164.99485779]
[140.05795288 156.40722656]
[127.75947571 147.81958008]
[114.71087646 155.21783447]
[115.76502228 170.18075562]
[116.81916046 185.14366150]
[126.43995667 198.42419434]
[119.50296021 213.28387451]
[103.14435577 214.43634033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[15 21]
[16 20]
[23 41]
[24 40]
[25 39]
[66 76]
[67 75]
[68 74]
[69 73]
[78 95]
[79 94]
[81 92]
[82 91]
[100 127]
[101 126]
[102 125]
[103 124]
[104 123]
[105 122]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
