%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGACGGGGCGGGGCUUCGGGCGAGAGGGAGGGCAGCAGGAGAAAGGAUAAGAAAGGGAGUGGGACUGGCGCCUACGGUGGCCGAAGUGGGACGCGCCGAGCCGGAGGCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[126.92774200 280.18994141]
[138.74684143 270.58636475]
[134.80030823 256.11486816]
[130.85377502 241.64334106]
[117.83460236 234.49934387]
[113.62609863 219.87937927]
[121.20765686 206.27210999]
[117.26111603 191.80059814]
[113.31458282 177.32908630]
[102.50130463 167.08592224]
[106.33514404 151.73625183]
[102.38860321 137.26473999]
[98.44206238 122.79322052]
[82.46871185 114.64963531]
[77.29261017 97.48355865]
[86.10166168 81.86732483]
[81.39051056 67.62635803]
[76.67935944 53.38539505]
[71.96820831 39.14442825]
[67.25705719 24.90346527]
[62.54590607 10.66250134]
[57.83475494 -3.57846308]
[46.15466690 -14.25020790]
[49.50310135 -28.76355553]
[44.79195023 -43.00452042]
[32.59748840 -43.94400024]
[21.48908424 -48.97768784]
[12.79300213 -57.47841263]
[7.53852081 -68.40666199]
[6.33614969 -80.43765259]
[9.30677509 -92.12194824]
[16.06997681 -102.06004333]
[25.79256439 -109.07001495]
[22.23266411 -123.64146423]
[18.67276192 -138.21290588]
[15.11286259 -152.78436279]
[1.88737988 -161.01383972]
[-1.51528955 -175.84207153]
[6.41176796 -188.39984131]
[2.85186744 -202.97128296]
[-0.70803314 -217.54272461]
[-15.77097034 -217.30677795]
[-30.50864410 -220.42906189]
[-44.18182373 -226.75297546]
[-56.10466003 -235.96131897]
[-65.67911530 -247.59220886]
[-72.42494202 -261.06222534]
[-76.00376129 -275.69577026]
[-76.23606873 -290.75875854]
[-73.11021423 -305.49566650]
[-66.78298187 -319.16729736]
[-57.57174683 -331.08792114]
[-45.93853760 -340.65954590]
[-32.46687698 -347.40213013]
[-17.83249664 -350.97738647]
[-2.76944661 -351.20605469]
[11.96671391 -348.07662964]
[25.63682556 -341.74606323]
[37.55519867 -332.53195190]
[47.12401962 -320.89642334]
[53.86331177 -307.42312622]
[57.43504333 -292.78787231]
[57.66005325 -277.72479248]
[54.52705383 -262.98937988]
[48.19319534 -249.32080078]
[38.97618484 -237.40466309]
[27.33834267 -227.83866882]
[13.86341476 -221.10263062]
[17.42331505 -206.53118896]
[20.98321533 -191.95973206]
[33.80759811 -184.47167969]
[37.62541580 -169.74487305]
[29.68431091 -156.34425354]
[33.24420929 -141.77281189]
[36.80411148 -127.20136261]
[40.36401367 -112.62991333]
[57.85371017 -108.46714020]
[70.95268250 -96.03118896]
[76.06466675 -78.62042236]
[71.72814941 -60.91428375]
[59.03291702 -47.71567154]
[63.74406815 -33.47470474]
[75.08718109 -23.82156944]
[72.07572174 -8.28961372]
[76.78687286 5.95135021]
[81.49801636 20.19231415]
[86.20916748 34.43327713]
[90.92031860 48.67424393]
[95.63146973 62.91520691]
[100.34262085 77.15617371]
[111.35534668 80.17542267]
[119.53127289 88.14726257]
[122.82787323 99.08016205]
[120.42160034 110.24285889]
[112.91358185 118.84667969]
[116.86012268 133.31819153]
[120.80665588 147.78971863]
[131.90222168 159.06797791]
[127.78609467 173.38253784]
[131.73263550 187.85406494]
[135.67916870 202.32557678]
[149.11904907 210.20007324]
[152.91523743 224.93246460]
[145.32528687 237.69680786]
[149.27182007 252.16831970]
[153.21836853 266.63983154]
[168.27656555 268.91369629]
[181.10456848 277.12112427]
[189.47984314 289.84020996]
[191.95130920 304.86724854]
[188.09078979 319.59869385]
[178.56712341 331.48229980]
[165.03036499 338.45910645]
[149.82582092 339.32037354]
[135.58778381 333.91683960]
[124.78306580 323.18475342]
[119.28366089 308.98345947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[7 101]
[8 100]
[9 99]
[11 97]
[12 96]
[13 95]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[24 82]
[25 81]
[33 76]
[34 75]
[35 74]
[36 73]
[39 70]
[40 69]
[41 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
