%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCGCGCUCGCUCAGCUCCCGCCCGCCUGUGCCGCCUGUGCGGCCGCCGGGAGCCAAGUUUGCGCGGACCCCGUCCCGAGCCCGCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[155.36289978 216.90408325]
[149.33061218 207.79360962]
[146.76661682 197.13224792]
[148.00558472 186.19804382]
[152.92462158 176.31115723]
[143.40872192 164.71600342]
[133.89282227 153.12084961]
[124.37692261 141.52568054]
[114.86102295 129.93052673]
[105.34512329 118.33537292]
[90.93604279 116.81073761]
[81.74398804 105.61018372]
[83.05971527 91.18052673]
[73.54381561 79.58537292]
[64.02791595 67.99021149]
[48.54353714 66.29562378]
[39.05823898 54.40092850]
[40.76919556 39.64937592]
[31.25329781 28.05422020]
[21.73739815 16.45906448]
[12.22149944 4.86390686]
[2.70560002 -6.73124981]
[-6.81029892 -18.32640648]
[-16.32619858 -29.92156410]
[-21.59259605 -31.87771225]
[-25.10875320 -35.38792801]
[-26.57090759 -39.46479034]
[-26.13857460 -43.15202332]
[-34.47212982 -55.62406540]
[-44.22874069 -56.24461746]
[-52.42302704 -61.31623840]
[-57.19030762 -69.53028870]
[-57.51912689 -78.88220215]
[-53.46320343 -87.16012573]
[-60.53415298 -100.38894653]
[-67.60510254 -113.61775970]
[-74.67605591 -126.84658051]
[-81.74700928 -140.07539368]
[-95.95134735 -148.27105713]
[-95.68528748 -164.66804504]
[-81.22253418 -172.39854431]
[-67.44111633 -163.51008606]
[-68.51818848 -147.14634705]
[-61.44723511 -133.91752625]
[-54.37628555 -120.68871307]
[-47.30533600 -107.45989227]
[-40.23438263 -94.23107147]
[-21.77531624 -85.25175476]
[-22.00008392 -63.95761871]
[-13.66653156 -51.48557663]
[-4.73104143 -39.43746185]
[4.78485775 -27.84230614]
[14.30075645 -16.24714851]
[23.81665611 -4.65199232]
[33.33255386 6.94316435]
[42.84845352 18.53832054]
[52.36435318 30.13347816]
[67.16624451 31.33328056]
[76.98190308 42.95685959]
[75.62307739 58.47431183]
[85.13897705 70.06947327]
[94.65487671 81.66462708]
[109.06395721 83.18926239]
[118.25601196 94.38981628]
[116.94028473 108.81947327]
[126.45618439 120.41462708]
[135.97207642 132.00978088]
[145.48797607 143.60494995]
[155.00387573 155.20010376]
[164.51977539 166.79525757]
[184.11874390 164.37530518]
[201.23800659 173.93734741]
[209.33963013 191.64131165]
[205.44108582 210.57466125]
[216.38903809 220.82853699]
[227.33700562 231.08242798]
[238.28495789 241.33630371]
[253.85806274 240.99528503]
[264.81478882 251.55014038]
[265.04391479 266.39880371]
[275.99188232 276.65270996]
[292.07681274 279.84756470]
[297.09552002 295.45989990]
[285.88519287 307.42904663]
[269.97805786 303.44219971]
[265.73800659 287.60064697]
[254.79003906 277.34677124]
[239.95817566 278.08926392]
[228.70932007 267.84634399]
[228.03108215 252.28427124]
[217.08311462 242.03038025]
[206.13516235 231.77650452]
[195.18719482 221.52261353]
[185.30619812 225.81047058]
[174.51596069 226.46498108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[13 62]
[14 61]
[15 60]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[28 50]
[29 49]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[74 93]
[75 92]
[76 91]
[77 90]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
