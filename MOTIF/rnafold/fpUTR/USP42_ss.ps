%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGUGCCCGGAUGGAGGCACGUCAUUGUCCCCCGCCGGGCGGCUGGGCUGUGUGCGGCGGCGGCGGCGGCGGCCGAGGGGGAUGGAGCGAGCGCCGAGCCGGGUCAGAGUUGAACA\
) } def
/len { sequence length } bind def

/coor [
[91.45626068 439.60183716]
[81.37941742 427.92019653]
[79.24043274 412.64184570]
[85.72185516 398.64202881]
[98.75548553 390.38806152]
[98.75548553 375.38806152]
[98.75548553 360.38806152]
[98.75548553 345.38806152]
[88.07461548 335.07037354]
[87.86093140 319.85824585]
[98.75548553 308.72512817]
[98.75548553 293.72512817]
[98.56547546 278.72631836]
[98.18548584 263.73114014]
[97.80549622 248.73594666]
[97.42549896 233.74076843]
[97.04550934 218.74557495]
[87.07899475 204.36073303]
[95.86231232 188.23667908]
[95.10256958 173.25592041]
[94.34283447 158.27517700]
[85.54244232 149.87207031]
[84.85093689 137.32078552]
[93.19154358 127.38476562]
[92.81155396 112.38957977]
[85.68064880 100.36286163]
[92.19326019 87.99040985]
[91.81327057 72.99522400]
[91.43328094 58.00004196]
[82.60012817 48.49921036]
[82.65502930 35.92902374]
[91.01851654 27.09096146]
[91.01851654 12.09096146]
[91.01851654 -2.90903878]
[91.01851654 -17.90903854]
[91.01851654 -32.90903854]
[91.01851654 -47.90903854]
[91.01851654 -62.90903854]
[91.01851654 -77.90904236]
[91.01851654 -92.90904236]
[90.44860840 -107.89820862]
[89.30960846 -122.85490417]
[88.17061615 -137.81159973]
[87.03161621 -152.76829529]
[76.28158569 -167.65347290]
[84.35088348 -183.18222046]
[82.83335876 -198.10525513]
[73.73961639 -211.05184937]
[80.14962006 -224.49659729]
[78.63209534 -239.41963196]
[77.11457062 -254.34268188]
[75.59704590 -269.26571655]
[64.47338104 -283.87380981]
[72.14670563 -299.60195923]
[70.25163269 -314.48178101]
[68.35655212 -329.36160278]
[66.46147156 -344.24139404]
[56.10807419 -356.95907593]
[62.19726944 -372.18582153]
[78.46501160 -374.25765991]
[88.17644501 -361.04327393]
[81.34127808 -346.13647461]
[83.23635864 -331.25665283]
[85.13143921 -316.37686157]
[87.02651215 -301.49703979]
[96.43957520 -293.78643799]
[98.08213806 -281.32391357]
[90.52008820 -270.78323364]
[92.03761292 -255.86019897]
[93.55513763 -240.93716431]
[95.07266235 -226.01411438]
[104.05786133 -214.13491821]
[97.75640106 -199.62278748]
[99.27392578 -184.69973755]
[108.48863220 -176.75314331]
[109.81495667 -164.25300598]
[101.98831177 -153.90728760]
[103.12730408 -138.95059204]
[104.26630402 -123.99389648]
[105.40529633 -109.03720856]
[107.93939972 -106.43194580]
[109.27799225 -102.42549133]
[108.75626373 -97.62221527]
[106.01851654 -92.90904236]
[106.01851654 -77.90904236]
[106.01851654 -62.90903854]
[106.01851654 -47.90903854]
[106.01851654 -32.90903854]
[106.01851654 -17.90903854]
[106.01851654 -2.90903878]
[106.01851654 12.09096146]
[106.01851654 27.09096146]
[115.61743164 41.72366714]
[106.42846680 57.62004852]
[106.80845642 72.61523438]
[107.18844604 87.61042023]
[114.31935120 99.63713837]
[107.80673981 112.00959015]
[108.18672943 127.00477600]
[118.16904449 142.41534424]
[109.32358551 157.51544189]
[110.08332062 172.49618530]
[110.84305573 187.47694397]
[119.91405487 196.75094604]
[120.17760468 209.31849670]
[112.04069519 218.36558533]
[112.42068481 233.36077881]
[112.80068207 248.35595703]
[113.18067169 263.35113525]
[113.56066132 278.34634399]
[116.93803406 286.95925903]
[113.75548553 293.72512817]
[113.75548553 308.72512817]
[124.65003967 319.85824585]
[124.43635559 335.07037354]
[113.75548553 345.38806152]
[113.75548553 360.38806152]
[113.75548553 375.38806152]
[113.75548553 390.38806152]
[126.78911591 398.64202881]
[133.27053833 412.64184570]
[131.13156128 427.92019653]
[121.05471039 439.60183716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 119]
[6 118]
[7 117]
[8 116]
[11 113]
[12 112]
[13 110]
[14 109]
[15 108]
[16 107]
[17 106]
[19 103]
[20 102]
[21 101]
[24 99]
[25 98]
[27 96]
[28 95]
[29 94]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[41 80]
[42 79]
[43 78]
[44 77]
[46 74]
[47 73]
[49 71]
[50 70]
[51 69]
[52 68]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
