%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGCCUGACUCCUGGAGAUUGUGAAUAGCUCCAUCCAGCCUGAGAAACAAGCCGGGUGGCUGAGCCAGGCUGUGCACGGAGUGCCUGACGGGCCCAACAGACCC\
) } def
/len { sequence length } bind def

/coor [
[100.00650787 313.10900879]
[99.55230713 297.95745850]
[104.31058502 283.56527710]
[113.70674896 271.67041016]
[126.60617065 263.70922852]
[123.54496002 249.02491760]
[120.48374176 234.34060669]
[117.42253113 219.65629578]
[114.36132050 204.97198486]
[110.02021790 190.61389160]
[104.43289948 176.69332886]
[98.84557343 162.77278137]
[93.25824738 148.85221863]
[87.67092133 134.93167114]
[74.82982635 127.17885590]
[59.90895462 128.71757507]
[44.98808670 130.25630188]
[30.06721687 131.79502869]
[15.14634895 133.33375549]
[6.77774048 137.38270569]
[-0.23418763 134.69201660]
[-15.19379711 135.79205322]
[-30.15340614 136.89208984]
[-43.40435791 146.55357361]
[-58.28524780 139.66218567]
[-59.48789215 123.30720520]
[-45.77511215 114.31321716]
[-31.25344467 121.93247986]
[-16.29383469 120.83244324]
[-1.33422470 119.73240662]
[13.60762501 118.41287994]
[28.52849388 116.87416077]
[43.44936371 115.33543396]
[58.37023163 113.79670715]
[73.29109955 112.25798798]
[72.76171112 95.01275635]
[81.74906921 81.48976135]
[95.96140289 76.03962708]
[98.15555573 61.20096970]
[100.34970093 46.36231613]
[102.54385376 31.52365875]
[104.73800659 16.68500328]
[106.93215179 1.84634745]
[109.12630463 -12.99230862]
[98.61578369 -19.34229851]
[90.93852234 -28.88141441]
[87.00491333 -40.44023132]
[87.26829529 -52.61220169]
[91.67284393 -63.92482376]
[99.66317749 -73.01776886]
[110.25432587 -78.80644989]
[122.15306091 -80.61137390]
[125.64403534 -95.19949341]
[129.13500977 -109.78760529]
[132.62599182 -124.37572479]
[127.44068909 -139.93350220]
[138.52243042 -152.02180481]
[154.47128296 -148.20520020]
[158.88041687 -132.40989685]
[147.21409607 -120.88475037]
[143.72312927 -106.29663086]
[140.23214722 -91.70851898]
[136.74118042 -77.12040710]
[150.38247681 -65.46265411]
[156.38462830 -48.46376038]
[153.05691528 -30.66127396]
[141.21101379 -16.85169029]
[123.96495819 -10.79815865]
[121.77080536 4.04049730]
[119.57666016 18.87915230]
[117.38250732 33.71780777]
[115.18836212 48.55646515]
[112.99420929 63.39511871]
[110.80005646 78.23377991]
[119.67282867 84.33704376]
[125.28266907 93.95745087]
[126.29061890 105.41713715]
[122.19422913 116.55937958]
[113.48128510 125.15444183]
[101.59147644 129.34434509]
[107.17880249 143.26490784]
[112.76612854 157.18545532]
[118.35344696 171.10600281]
[123.94077301 185.02656555]
[131.72840881 172.20654297]
[146.23365784 168.38583374]
[159.32624817 175.70593262]
[163.66772461 190.06390381]
[156.82467651 203.41204834]
[142.63265991 208.26864624]
[129.04562378 201.91076660]
[132.10684204 216.59507751]
[135.16806030 231.27938843]
[138.22926331 245.96369934]
[141.29048157 260.64801025]
[156.29647827 262.79180908]
[169.66281128 269.94140625]
[179.77543640 281.23348999]
[185.41320801 295.30441284]
[185.89532471 310.45510864]
[181.16357422 324.85601807]
[171.78935242 336.76818848]
[158.90461731 344.75314331]
[144.06529236 347.84667969]
[129.06326294 345.67523193]
[115.71012878 338.50100708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[21 30]
[22 29]
[23 28]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
