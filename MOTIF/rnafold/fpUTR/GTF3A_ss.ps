%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCGAUCUCCCGGAGCAUGCGCAGCAGCGGCGCCGACGCGGGGCGGUGCCUGGUGACCGCGCGCGCUCCCGGAAGUGUGCCGGCGUCGCGCGAAGGUUCAGCAGGGAGCCGUGGGCCGGGCGCGCCGGUUCCCGGCACGUGUCUCGGCACGUGGCAGCGCGCCUGGCCCUGGGCUUGGAGGCGCCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[39.45523453 266.29879761]
[36.24857712 267.79498291]
[29.70923233 281.29449463]
[23.16988945 294.79400635]
[16.63054657 308.29351807]
[10.09120369 321.79306030]
[3.55186057 335.29257202]
[8.50305367 350.06155396]
[1.67892444 363.65884399]
[-12.43157482 368.28802490]
[-18.97091866 381.78756714]
[-25.51026154 395.28707886]
[-26.97391701 412.17773438]
[-43.60965347 415.44705200]
[-51.35645676 400.36648560]
[-39.00978088 388.74774170]
[-32.47043610 375.24819946]
[-25.93109322 361.74868774]
[-31.04547882 347.80670166]
[-24.60596085 334.02313232]
[-9.94765759 328.75323486]
[-3.40831470 315.25369263]
[3.13102841 301.75418091]
[9.67037106 288.25466919]
[16.20971489 274.75515747]
[22.74905777 261.25564575]
[28.96029282 247.60203552]
[34.83979034 233.80235291]
[29.05779457 220.12374878]
[34.82386017 206.04513550]
[49.21043777 200.07319641]
[55.08993912 186.27349854]
[60.96943665 172.47381592]
[66.84893799 158.67411804]
[72.72843933 144.87443542]
[78.60793304 131.07473755]
[84.48743439 117.27504730]
[76.97452545 113.07286835]
[70.81810760 105.72269440]
[67.27684021 95.75247192]
[52.45218277 98.03929901]
[37.62752914 100.32612610]
[22.89534378 108.71654510]
[10.75455379 96.88279724]
[18.76492691 81.94056702]
[35.34070206 85.50146484]
[50.16535950 83.21464539]
[64.99001312 80.92781830]
[68.09563446 74.10102081]
[59.37663651 61.89531708]
[74.30686188 60.44742966]
[77.41248322 53.62063217]
[69.39549255 40.94277954]
[61.37850952 28.26492882]
[53.36152267 15.58707809]
[39.44631195 8.05863190]
[39.18350983 -6.83365488]
[31.16652107 -19.51150513]
[23.14953423 -32.18935776]
[15.03068256 -44.80221939]
[6.81049490 -57.34926987]
[-9.81511784 -65.25139618]
[-10.13487816 -82.79179382]
[-18.55613136 -95.20478821]
[-26.97738647 -107.61778259]
[-35.39863968 -120.03077698]
[-43.81989670 -132.44377136]
[-52.24114990 -144.85676575]
[-67.63310242 -145.48442078]
[-79.56465149 -154.94441223]
[-83.59033966 -169.44468689]
[-78.36825562 -183.36833191]
[-86.78950500 -195.78132629]
[-95.21076202 -208.19432068]
[-103.63201141 -220.60731506]
[-119.20565796 -222.02003479]
[-130.19094849 -233.14915466]
[-131.40098572 -248.73985291]
[-122.26441193 -261.43066406]
[-107.09523773 -265.22940063]
[-93.05589294 -258.34240723]
[-86.77532196 -244.02148438]
[-91.21901703 -229.02857971]
[-82.79776764 -216.61557007]
[-74.37651062 -204.20257568]
[-65.95525360 -191.78958130]
[-51.08745575 -191.49537659]
[-39.10204697 -182.39515686]
[-34.72214890 -167.81195068]
[-39.82815170 -153.27803040]
[-31.40689850 -140.86503601]
[-22.98564339 -128.45202637]
[-14.56439018 -116.03903961]
[-6.14313555 -103.62603760]
[2.27811861 -91.21304321]
[14.10325050 -88.62553406]
[21.21903038 -78.34141541]
[19.35754776 -65.56945801]
[27.57773399 -53.02240753]
[33.88145828 -49.14507675]
[35.82738495 -40.20634460]
[43.84437180 -27.52849388]
[51.86135864 -14.85064220]
[65.20314026 -8.22900105]
[66.03937531 7.57009077]
[74.05635834 20.24794197]
[82.07334900 32.92579269]
[90.09033203 45.60364532]
[103.48274994 52.35961533]
[118.44335175 51.27309418]
[133.40394592 50.18657303]
[148.36454773 49.10005188]
[163.32513428 48.01352692]
[173.63987732 36.34116745]
[188.82752991 35.45240021]
[199.89176941 45.35785675]
[214.85237122 44.27133560]
[229.81297302 43.18481064]
[244.77355957 42.09828949]
[259.73416138 41.01176834]
[274.69476318 39.92524719]
[289.65536499 38.83872223]
[304.61596680 37.75220108]
[319.57653809 36.66567993]
[334.53713989 35.57915878]
[349.49774170 34.49263763]
[364.45834351 33.40611267]
[379.41894531 32.31959152]
[393.95367432 28.61265564]
[407.60726929 22.40142059]
[421.26086426 16.19018555]
[433.17459106 4.12786484]
[448.06353760 12.23680973]
[444.39318848 28.78869057]
[427.47210693 29.84377861]
[413.81851196 36.05501175]
[400.16491699 42.26624680]
[401.60586548 49.62652206]
[405.92871094 71.70735168]
[420.91653442 72.31134033]
[435.90438843 72.91532898]
[450.89221191 73.51931763]
[465.88006592 74.12330627]
[480.86788940 74.72729492]
[495.85571289 75.33128357]
[510.11709595 67.23526764]
[524.12023926 75.77016449]
[523.45989990 92.15601349]
[508.81539917 99.53645325]
[495.25173950 90.31912231]
[480.26388550 89.71513367]
[465.27606201 89.11114502]
[450.28823853 88.50715637]
[435.30038452 87.90316772]
[420.31256104 87.29917145]
[405.32473755 86.69518280]
[390.87207031 79.53619385]
[381.75534058 68.91538239]
[378.46936035 57.35561371]
[380.50546265 47.28018951]
[365.54486084 48.36671066]
[350.58425903 49.45323181]
[335.62365723 50.53975677]
[320.66308594 51.62627792]
[305.70248413 52.71279907]
[290.74188232 53.79932022]
[275.78128052 54.88584137]
[260.82067871 55.97236633]
[245.86009216 57.05888748]
[230.89949036 58.14540863]
[215.93888855 59.23192978]
[200.97828674 60.31845474]
[191.46138000 71.71862793]
[176.30468750 73.03363800]
[164.41166687 62.97412491]
[149.45106506 64.06064606]
[134.49046326 65.14717102]
[119.52986908 66.23368835]
[104.56927490 67.32021332]
[124.08482361 81.20134735]
[127.94885254 102.98446655]
[116.43973541 119.70566559]
[98.28712463 123.15454865]
[92.40762329 136.95423889]
[86.52812958 150.75393677]
[80.64862823 164.55361938]
[74.76912689 178.35331726]
[68.88963318 192.15299988]
[63.01013184 205.95269775]
[68.66908264 220.46524048]
[62.50985336 234.37634277]
[48.63948441 239.68185425]
[42.75998306 253.48153687]
[43.39551163 258.68942261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[10 18]
[11 17]
[12 16]
[27 193]
[28 192]
[31 189]
[32 188]
[33 187]
[34 186]
[35 185]
[36 184]
[37 183]
[40 48]
[41 47]
[42 46]
[52 108]
[53 107]
[54 106]
[55 105]
[57 103]
[58 102]
[59 101]
[60 99]
[61 98]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[72 86]
[73 85]
[74 84]
[75 83]
[109 179]
[110 178]
[111 177]
[112 176]
[113 175]
[116 172]
[117 171]
[118 170]
[119 169]
[120 168]
[121 167]
[122 166]
[123 165]
[124 164]
[125 163]
[126 162]
[127 161]
[128 160]
[129 137]
[130 136]
[131 135]
[139 156]
[140 155]
[141 154]
[142 153]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
