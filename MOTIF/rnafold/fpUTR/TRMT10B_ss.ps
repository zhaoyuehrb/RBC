%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGAUCCGAUGCGCGCCGCUGCCGCUGCGUGGGGGUGAGGGGAUCAGUCUGGUGGAAAGGACAGAGGACUAAGUCC\
) } def
/len { sequence length } bind def

/coor [
[140.12103271 205.46569824]
[134.43417358 191.58551025]
[135.10966492 176.60072327]
[142.02233887 163.28851318]
[153.89103699 154.11605835]
[168.51669312 150.78329468]
[155.72709656 142.94581604]
[142.93750000 135.10833740]
[130.14788818 127.27085876]
[117.35829163 119.43338013]
[105.42339325 125.48633575]
[92.05805206 124.81716919]
[80.78742981 117.60237885]
[74.58420563 105.74488831]
[75.08448792 92.37216187]
[62.61244583 84.03861237]
[50.14040375 75.70505524]
[34.36736679 74.47142029]
[28.08363914 60.96719742]
[15.61159515 52.63364410]
[0.30205074 55.50690079]
[-12.22766113 46.87782288]
[-14.87252522 32.26480484]
[-27.34456825 23.93125343]
[-39.81661224 15.59769917]
[-56.20712662 15.06565380]
[-63.70197296 0.47938201]
[-54.59109497 -13.15601063]
[-38.24698257 -11.81360149]
[-31.48305893 3.12565494]
[-19.01101494 11.45920849]
[-6.53897142 19.79276276]
[7.97384214 16.64413834]
[20.74098396 24.91787720]
[23.94514847 40.16159821]
[36.41719437 48.49515152]
[51.29814529 49.13271713]
[58.47395706 63.23301315]
[70.94599915 71.56656647]
[83.41804504 79.90011597]
[98.43266296 73.99019623]
[114.04831696 78.05435944]
[124.27680969 90.53410339]
[125.19577026 106.64377594]
[137.98536682 114.48125458]
[150.77497864 122.31873322]
[163.56457520 130.15621948]
[176.35417175 137.99369812]
[190.62002563 142.62895203]
[205.57379150 143.80583191]
[220.52754211 144.98272705]
[235.48130798 146.15960693]
[250.43505859 147.33648682]
[262.38864136 137.34901428]
[277.53710938 138.75556946]
[286.98498535 150.21302795]
[301.93875122 151.38992310]
[312.76950073 140.11033630]
[328.32217407 138.48295593]
[341.25326538 147.27615356]
[345.45712280 162.33808899]
[338.94882202 176.55694580]
[324.80136108 183.21902466]
[309.69473267 179.17869568]
[300.76187134 166.34367371]
[285.80810547 165.16679382]
[274.68420410 175.00521851]
[259.50219727 174.02471924]
[249.25817871 162.29025269]
[234.30441284 161.11337280]
[219.35066223 159.93647766]
[204.39689636 158.75959778]
[189.44314575 157.58270264]
[199.31631470 168.87519836]
[203.52709961 183.27204895]
[201.29508972 198.10505676]
[193.03396606 210.62518311]
[180.27476501 218.51205444]
[165.38217163 220.30398560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[15 40]
[16 39]
[17 38]
[19 36]
[20 35]
[23 32]
[24 31]
[25 30]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
