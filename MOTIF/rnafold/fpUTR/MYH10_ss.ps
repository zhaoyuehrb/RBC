%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUGCUAAAGGAGCCCGGCGGAGGCAGCGGUGGGUUUGGGACUGAGGCGCUGGAUCUGUGGUCGCGGCUGGGGACGUGCGCCCGCGCCACCAUCUUCGGCUGAAGAGGCAAUUGCUUUUGGAUCGUUCCAUUUACA\
) } def
/len { sequence length } bind def

/coor [
[36.83399200 173.30152893]
[49.33938599 165.01565552]
[60.11557007 154.58139038]
[45.65612793 158.57194519]
[31.19668388 162.56250000]
[16.73724174 166.55303955]
[2.27779794 170.54359436]
[-12.18164444 174.53414917]
[-26.64108849 178.52470398]
[-34.47465515 191.98846436]
[-49.19543076 195.82948303]
[-61.98279953 188.27839661]
[-76.44224548 192.26895142]
[-90.70809174 196.90420532]
[-104.75160980 202.17481995]
[-118.79513550 207.44544983]
[-132.83865356 212.71606445]
[-146.88218689 217.98669434]
[-160.92570496 223.25730896]
[-174.96922302 228.52793884]
[-185.17074585 240.62089539]
[-199.80514526 237.84901428]
[-213.84866333 243.11962891]
[-218.87924194 257.92596436]
[-232.27694702 265.99041748]
[-247.71578979 263.50524902]
[-257.90603638 251.64382935]
[-258.03613281 236.00679016]
[-248.04467773 223.97744751]
[-232.64933777 221.23570251]
[-219.11929321 229.07611084]
[-205.07577515 223.80549622]
[-195.87875366 212.08952332]
[-180.23985291 214.48442078]
[-166.19633484 209.21379089]
[-152.15280151 203.94317627]
[-138.10928345 198.67254639]
[-124.06575775 193.40193176]
[-110.02223206 188.13130188]
[-95.97871399 182.86068726]
[-94.70538330 180.27523804]
[-92.28871155 178.06085205]
[-88.87319183 176.67195129]
[-84.77085876 176.49884033]
[-80.43279266 177.80950928]
[-65.97335052 173.81895447]
[-58.86899567 160.77810669]
[-44.26191330 156.52513123]
[-30.63164139 164.06526184]
[-16.17219734 160.07470703]
[-1.71275461 156.08415222]
[12.74668789 152.09359741]
[27.20613098 148.10304260]
[41.66557312 144.11250305]
[56.12501526 140.12194824]
[62.63327408 126.60741425]
[56.73789597 112.81449127]
[50.84252167 99.02157593]
[44.94714737 85.22866058]
[33.16219330 73.04050446]
[41.61163712 58.34209061]
[58.07466507 62.39240265]
[58.74006271 79.33328247]
[64.63543701 93.12620544]
[70.53081512 106.91912079]
[76.42619324 120.71203613]
[77.09235382 82.59051514]
[111.37586212 76.43777466]
[121.49591827 65.36598969]
[131.61598206 54.29420090]
[141.73603821 43.22241592]
[151.85609436 32.15063095]
[161.97615051 21.07884789]
[172.09620667 10.00706291]
[182.21627808 -1.06472218]
[192.33633423 -12.13650703]
[202.45639038 -23.20829201]
[205.95916748 -41.24727631]
[222.82435608 -45.96922684]
[232.69343567 -57.26530075]
[242.56251526 -68.56137085]
[245.89064026 -77.15863037]
[252.78201294 -79.99697876]
[262.90206909 -91.06876373]
[265.90121460 -107.19133759]
[281.45138550 -112.39942932]
[293.55590820 -101.33541107]
[289.76266479 -85.38098907]
[273.97384644 -80.94870758]
[263.85379028 -69.87692261]
[253.85859680 -58.69229126]
[243.98951721 -47.39622116]
[234.12043762 -36.10014725]
[234.60862732 -23.96176910]
[226.40713501 -14.46225452]
[213.52816772 -13.08823395]
[203.40811157 -2.01644897]
[193.28805542 9.05533600]
[183.16799927 20.12712097]
[173.04794312 31.19890594]
[162.92788696 42.27069092]
[152.80781555 53.34247589]
[142.68775940 64.41426086]
[132.56770325 75.48604584]
[122.44764709 86.55783081]
[126.97093964 110.02093506]
[109.86415100 129.78945923]
[123.52130890 135.99282837]
[137.17846680 142.19621277]
[150.83563232 148.39958191]
[164.49279785 154.60296631]
[178.14996338 160.80633545]
[194.41021729 158.67654419]
[204.16868591 171.85624695]
[197.38667297 186.78729248]
[181.04095459 188.10992432]
[171.94657898 174.46350098]
[158.28942871 168.26013184]
[144.63226318 162.05674744]
[130.97509766 155.85337830]
[117.31793213 149.64999390]
[103.66076660 143.44660950]
[93.79168701 154.74269104]
[101.77217102 167.44355774]
[109.75264740 180.14440918]
[124.49633026 187.32466125]
[125.37982178 203.69999695]
[111.49426270 212.42486572]
[97.12393188 204.52388000]
[97.05178833 188.12489319]
[89.07130432 175.42402649]
[81.09082794 162.72317505]
[82.00524139 177.69526672]
[85.64550781 192.24685669]
[81.19252777 206.57064819]
[69.94364929 216.49348450]
[55.17617798 219.12440491]
[41.19253922 213.69689941]
[32.06678772 201.79225159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[12 46]
[13 45]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[22 32]
[23 31]
[56 66]
[57 65]
[58 64]
[59 63]
[68 105]
[69 104]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[79 93]
[80 92]
[81 91]
[83 90]
[84 89]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
