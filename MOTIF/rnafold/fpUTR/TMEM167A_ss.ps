%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUGGUAGGCGGUGCCGUGACAAGCCCAACCGGACGGCUGGAGAGGGCGAGAAGGGCAGACGGGACAUGCAGCCUCUUCCGCCUGAGCCCCGGAAGGGUGAUGUGGCUGCGGCAUCGCCGGCCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[96.44548798 519.15850830]
[85.00069427 508.99609375]
[79.60040283 494.67492676]
[81.48556519 479.48596191]
[90.22298431 466.91949463]
[103.80485535 459.86322021]
[103.80485535 444.86322021]
[103.80485535 429.86322021]
[96.06755829 417.13592529]
[103.80485535 403.33575439]
[103.80485535 388.33575439]
[103.80485535 373.33575439]
[103.80485535 358.33575439]
[103.80485535 343.33575439]
[103.80485535 328.33575439]
[103.80485535 313.33575439]
[103.80485535 298.33575439]
[103.80485535 283.33575439]
[103.80485535 268.33575439]
[103.80485535 253.33576965]
[103.80485535 238.33576965]
[103.26538849 223.34547424]
[102.18714905 208.38427734]
[101.10890198 193.42308044]
[90.48463440 179.50894165]
[98.52685547 162.99505615]
[97.09016418 148.06402588]
[95.65347290 133.13298035]
[94.21678162 118.20194244]
[83.10398865 108.90398407]
[81.71618652 94.48107910]
[90.85218048 83.23474884]
[89.41548920 68.30371094]
[87.97879028 53.37267303]
[86.54209900 38.44163513]
[82.93399811 32.70991516]
[82.85189819 26.90172577]
[85.41214752 22.76291847]
[84.69297791 7.78016949]
[83.97380066 -7.20258045]
[83.25463104 -22.18532944]
[75.95100403 -26.66733932]
[71.11834717 -33.62883377]
[69.50901794 -41.85261154]
[71.31971741 -49.93737411]
[76.17087555 -56.53643799]
[83.18313599 -60.58206177]
[83.90230560 -75.56481171]
[84.62148285 -90.54756165]
[85.34065247 -105.53031158]
[86.05982208 -120.51306152]
[83.32527161 -129.33522034]
[86.98014832 -135.84518433]
[88.05839539 -150.80638123]
[89.13663483 -165.76757812]
[90.21488190 -180.72877502]
[91.11364746 -195.70181274]
[91.83282471 -210.68457031]
[92.55199432 -225.66731262]
[78.78833008 -232.11943054]
[68.54516602 -243.35092163]
[63.38452148 -257.64904785]
[64.09335327 -272.83343506]
[70.56357574 -286.58859253]
[81.80851746 -296.81698608]
[96.11341095 -301.95880127]
[111.29685974 -301.23001099]
[125.04351044 -294.74169922]
[135.25708008 -283.48330688]
[140.38009644 -269.17166138]
[139.63131714 -253.98918152]
[133.12493896 -240.25108337]
[121.85311890 -230.05232239]
[107.53474426 -224.94815063]
[106.81557465 -209.96539307]
[106.09639740 -194.98265076]
[108.94631195 -188.08222961]
[105.17607117 -179.65052795]
[104.09783173 -164.68933105]
[103.01959229 -149.72813416]
[101.94134521 -134.76693726]
[101.04257202 -119.79389191]
[100.32340240 -104.81114197]
[99.60423279 -89.82839203]
[98.88505554 -74.84564209]
[98.16588593 -59.86289215]
[110.10297394 -41.85261154]
[98.23738098 -22.90450287]
[98.95655060 -7.92175341]
[99.67572784 7.06099653]
[100.39489746 22.04374695]
[101.47314453 37.00494385]
[102.90983582 51.93598175]
[104.34652710 66.86701965]
[105.78321838 81.79805756]
[116.89601135 91.09601593]
[118.28381348 105.51892090]
[109.14781952 116.76525116]
[110.58451080 131.69628906]
[112.02120972 146.62733459]
[113.45790100 161.55836487]
[122.93349457 170.40446472]
[123.77281189 182.93725586]
[116.07009888 192.34483337]
[117.14834595 207.30603027]
[118.22658539 222.26722717]
[121.27763367 226.74731445]
[122.14675140 231.47482300]
[121.11959839 235.55221558]
[118.80485535 238.33576965]
[118.80485535 253.33576965]
[118.80485535 268.33575439]
[118.80485535 283.33575439]
[118.80485535 298.33575439]
[118.80485535 313.33575439]
[118.80485535 328.33575439]
[118.80485535 343.33575439]
[118.80485535 358.33575439]
[118.80485535 373.33575439]
[118.80485535 388.33575439]
[118.80485535 403.33575439]
[126.54216003 417.13592529]
[118.80485535 429.86322021]
[118.80485535 444.86322021]
[118.80485535 459.86322021]
[132.38673401 466.91949463]
[141.12414551 479.48596191]
[143.00930786 494.67492676]
[137.60902405 508.99609375]
[126.16423035 519.15850830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 106]
[23 105]
[24 104]
[26 101]
[27 100]
[28 99]
[29 98]
[32 95]
[33 94]
[34 93]
[35 92]
[38 91]
[39 90]
[40 89]
[41 88]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 76]
[58 75]
[59 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
