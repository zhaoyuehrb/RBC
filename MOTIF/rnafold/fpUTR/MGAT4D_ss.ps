%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGGUGCAGAAGUUCUGUGGCAAGGCGGCUUCCCAGGGCGGGUGUGCUGGGGACCCACGCGGCACCGCGGGGAGGGGGCUCUGCGCGCUCAACCCCGUCCCUGGCAUUAUCCGCCGCCUCCACCCGCCGGCCUCCCGCAGCCUGGCCAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[118.98224640 146.11108398]
[121.86396790 160.83168030]
[108.75426483 168.12110901]
[97.77061462 157.90545654]
[104.09161377 144.30303955]
[105.89966583 129.41241455]
[107.70771790 114.52177429]
[100.26239777 113.61775208]
[92.24541473 126.29560089]
[84.22842407 138.97344971]
[76.21144104 151.65130615]
[68.19445038 164.32916260]
[64.83927917 180.94779968]
[47.94130325 182.32424927]
[41.94081879 166.46768188]
[55.51659775 156.31216431]
[63.53358841 143.63432312]
[71.55057526 130.95646667]
[79.56755829 118.27861023]
[87.58454895 105.60076141]
[91.61252594 91.15170288]
[91.31047058 76.15473938]
[91.00841522 61.15778351]
[82.24417877 51.64363861]
[82.33293152 39.10991287]
[90.67929077 30.30451393]
[90.67929077 15.30451298]
[90.67929077 0.30451334]
[90.67929077 -14.69548702]
[90.67929077 -29.69548607]
[76.31838989 -34.40949631]
[64.13416290 -43.31944656]
[55.31242752 -55.54259491]
[50.70692062 -69.87452698]
[50.75669098 -84.90782928]
[55.44427872 -99.17028046]
[64.29866791 -111.26903534]
[76.44255066 -120.02667236]
[90.67929077 -124.59572601]
[90.67929077 -139.59571838]
[90.67929077 -154.59571838]
[90.67929077 -169.59571838]
[90.67929077 -184.59571838]
[90.67929077 -199.59571838]
[90.67929077 -214.59571838]
[90.67929077 -229.59571838]
[90.52825165 -244.59497070]
[90.22619629 -259.59191895]
[89.92414093 -274.58886719]
[89.62208557 -289.58584595]
[89.32003021 -304.58279419]
[89.01797485 -319.57974243]
[88.71591949 -334.57672119]
[88.41386414 -349.57366943]
[88.11180878 -364.57061768]
[87.80975342 -379.56759644]
[83.03742218 -378.61911011]
[77.69998169 -379.02786255]
[72.15973663 -380.96069336]
[66.81875610 -384.49246216]
[62.09646606 -389.59762573]
[54.85957336 -402.73638916]
[47.62268448 -415.87518311]
[33.31631851 -423.89138794]
[33.37598038 -440.29043579]
[47.74029160 -448.20236206]
[61.63248444 -439.48806763]
[60.76145935 -423.11206055]
[67.99835205 -409.97329712]
[75.23523712 -396.83450317]
[90.12587738 -398.64257812]
[94.00815582 -413.13143921]
[97.89044189 -427.62033081]
[101.77272797 -442.10922241]
[96.57922363 -459.74816895]
[109.40072632 -471.69464111]
[112.99045563 -486.25875854]
[116.58019257 -500.82290649]
[112.37032318 -516.07373047]
[122.92862701 -526.57952881]
[126.51836395 -541.14361572]
[119.48258972 -555.56158447]
[126.49813080 -569.98937988]
[142.18325806 -573.35925293]
[154.50569153 -563.08612061]
[154.01271057 -547.05065918]
[141.08248901 -537.55389404]
[137.49275208 -522.98974609]
[141.95938110 -508.78067017]
[131.14431763 -497.23315430]
[127.55458832 -482.66903687]
[123.96485138 -468.10491943]
[129.96141052 -457.55795288]
[127.04806519 -445.36718750]
[116.26161957 -438.22692871]
[112.37933350 -423.73806763]
[108.49704742 -409.24917603]
[104.61476135 -394.76028442]
[102.80670929 -379.86965942]
[103.10876465 -364.87268066]
[103.41082001 -349.87573242]
[103.71287537 -334.87878418]
[104.01493073 -319.88180542]
[104.31699371 -304.88485718]
[104.61904907 -289.88790894]
[104.92110443 -274.89093018]
[105.22315979 -259.89398193]
[105.52521515 -244.89701843]
[108.82312775 -238.23463440]
[105.67929077 -229.59571838]
[105.67929077 -214.59571838]
[105.67929077 -199.59571838]
[105.67929077 -184.59571838]
[105.67929077 -169.59571838]
[105.67929077 -154.59571838]
[105.67929077 -139.59571838]
[105.67929077 -124.59572601]
[119.91603088 -120.02667236]
[132.05992126 -111.26903534]
[140.91430664 -99.17028046]
[145.60188293 -84.90782928]
[145.65165710 -69.87452698]
[141.04615784 -55.54259491]
[132.22441101 -43.31944656]
[120.04019165 -34.40949631]
[105.67929077 -29.69548607]
[105.67929077 -14.69548702]
[105.67929077 0.30451334]
[105.67929077 15.30451298]
[105.67929077 30.30451393]
[115.26923370 44.97224045]
[106.00537109 60.85572815]
[106.30742645 75.85268402]
[106.60948181 90.84964752]
[108.80169678 76.01070404]
[118.49415588 64.56272125]
[132.76824951 59.95292664]
[147.32575989 63.56943130]
[157.78309631 74.32322693]
[160.99133301 88.97611237]
[155.98442078 103.11579895]
[144.27171326 112.48383331]
[149.02172852 126.71187592]
[153.77175903 140.93992615]
[158.52177429 155.16796875]
[172.17424011 163.59350586]
[173.95594788 179.53730774]
[162.50012207 190.76867676]
[146.59468079 188.67184448]
[138.44093323 174.85533142]
[144.29373169 159.91798401]
[139.54370117 145.68994141]
[134.79368591 131.46189880]
[130.04367065 117.23384857]
[122.59835052 116.32982635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[21 134]
[22 133]
[23 132]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 108]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[61 70]
[62 69]
[63 68]
[71 98]
[72 97]
[73 96]
[74 95]
[76 92]
[77 91]
[78 90]
[80 88]
[81 87]
[142 154]
[143 153]
[144 152]
[145 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
