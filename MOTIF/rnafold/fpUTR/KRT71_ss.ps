%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCAGCAGAACCUUUUGGGAUUUUGCCUUCCUCCCUCCUGCAUCUGAGCUUUGUCUCCACCAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[116.66575623 159.61723328]
[101.05949402 161.89376831]
[85.38445282 160.15269470]
[70.65813446 154.50703430]
[57.83643723 145.32322693]
[47.75164032 133.19743347]
[41.05835342 118.91674805]
[38.19105530 103.40814972]
[23.22408104 102.41330719]
[8.25710869 101.41846466]
[-6.70986414 100.42362213]
[-21.67683792 99.42877197]
[-36.64381027 98.43392944]
[-51.62912750 97.77043152]
[-66.62545776 97.43859863]
[-81.62178802 97.10676575]
[-97.59079742 102.80123138]
[-107.48339081 89.03267670]
[-96.99145508 75.71518707]
[-81.28995514 82.11043549]
[-66.29362488 82.44226837]
[-51.29729843 82.77410126]
[-44.31994629 79.67370605]
[-35.64896774 83.46695709]
[-20.68199348 84.46179962]
[-5.71501970 85.45664215]
[9.25195312 86.45149231]
[24.21892548 87.44633484]
[39.18589783 88.44117737]
[43.41704941 74.89360809]
[50.62266541 62.66583252]
[60.42396164 52.40065002]
[72.30569458 44.63767624]
[85.64327240 39.78500748]
[99.73555756 38.09772873]
[113.84174347 39.66454315]
[127.22029114 44.40308380]
[139.16792297 52.06425858]
[149.05656433 62.24532700]
[156.36637878 74.41109467]
[160.71311951 87.92201996]
[161.86828613 102.06786346]
[176.68876648 104.38159943]
[191.50924683 106.69533539]
[201.61801147 93.80558014]
[216.72656250 87.72003937]
[232.76361084 89.97869873]
[245.45730591 99.88636017]
[251.47317505 114.72286224]
[266.38150024 116.37877655]
[281.28982544 118.03468323]
[293.47238159 107.96689606]
[309.19766235 109.54542542]
[319.13607788 121.83376312]
[317.39138794 137.54145813]
[304.99865723 147.34939575]
[289.31030273 145.43873596]
[279.63391113 132.94300842]
[264.72558594 131.28709412]
[249.81727600 129.63117981]
[242.34922791 141.26812744]
[230.50286865 148.52796936]
[216.61096191 149.91288757]
[203.43902588 145.08872986]
[193.63467407 134.96322632]
[189.19551086 121.51581573]
[174.37503052 119.20207977]
[159.55455017 116.88834381]
[153.35395813 131.38975525]
[143.69007874 143.85359192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 22]
[15 21]
[16 20]
[42 68]
[43 67]
[44 66]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
