%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUCUUUUUACAGGAUACAGCCAAAACUAAAAUUUAGACUAUAUAAUGGAGAAUAAUUUUUAAGUUUCUUUUCCUCCAAUCUCAUAUAAAUUGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[86.11322784 147.83081055]
[74.68630981 142.89341736]
[65.20426178 154.51628113]
[55.72221375 166.13912964]
[46.24016571 177.76199341]
[36.75812149 189.38484192]
[27.27607536 201.00770569]
[17.79402733 212.63056946]
[17.97602654 228.67257690]
[5.45673704 238.70487976]
[-10.16011429 235.03152466]
[-16.89461517 220.47041321]
[-9.58063316 206.19157410]
[6.17117167 203.14851379]
[15.65321827 191.52566528]
[25.13526535 179.90280151]
[34.61730957 168.27995300]
[44.09935760 156.65708923]
[53.58140182 145.03422546]
[63.06344986 133.41137695]
[54.26799774 119.72847748]
[50.35028076 103.94136047]
[51.72816086 87.73385620]
[58.25467300 72.83464813]
[69.23370361 60.83287430]
[83.49423981 53.00863266]
[80.71102142 38.26910400]
[77.92780304 23.52957535]
[75.14459229 8.79004574]
[72.36137390 -5.94948244]
[69.34926605 -20.64394379]
[66.10900116 -35.28978729]
[62.86873245 -49.93562698]
[59.62846375 -64.58146667]
[49.09276581 -76.38441467]
[53.89806366 -90.48258209]
[50.65779877 -105.12842560]
[47.41753006 -119.77426910]
[31.13041306 -129.17289734]
[26.77853203 -147.14332581]
[36.62077332 -162.42320251]
[32.47624588 -176.83927917]
[28.33172035 -191.25534058]
[24.18719482 -205.67140198]
[13.99985313 -219.22331238]
[24.20201874 -232.76406860]
[40.03783798 -226.70907593]
[38.60325623 -209.81593323]
[42.74778366 -195.39985657]
[46.89231110 -180.98379517]
[51.03683472 -166.56773376]
[62.16871262 -163.25250244]
[70.34333038 -154.83164978]
[73.38906860 -143.37243652]
[70.41413879 -131.76968384]
[62.06336975 -123.01453400]
[65.30364227 -108.36869049]
[68.54390717 -93.72285461]
[78.84783936 -82.96747589]
[74.27430725 -67.82173920]
[77.51457214 -53.17589569]
[80.75484467 -38.53005219]
[83.99510956 -23.88421249]
[88.59449768 -17.92844772]
[87.10089874 -8.73269939]
[89.88411713 6.00682974]
[92.66733551 20.74635887]
[95.45055389 35.48588562]
[98.23376465 50.22541428]
[113.39913177 52.03030014]
[127.30461884 58.34562683]
[138.64273071 68.57759094]
[146.34739685 81.76409912]
[149.69415283 96.66528320]
[148.36831665 111.88001251]
[142.49456787 125.97769928]
[153.96855164 135.63935852]
[165.44253540 145.30101013]
[176.91651917 154.96267700]
[188.39051819 164.62432861]
[199.86450195 174.28598022]
[211.33848572 183.94763184]
[226.04731750 179.29426575]
[240.93098450 183.35383606]
[251.24015808 194.83096313]
[253.68522644 210.06333923]
[247.48596191 224.19035339]
[234.62055969 232.70414734]
[219.19429016 232.88798523]
[206.12962341 224.68321228]
[199.59547424 210.70794678]
[201.67683411 195.42163086]
[190.20285034 185.75996399]
[178.72885132 176.09831238]
[167.25486755 166.43666077]
[155.78088379 156.77500916]
[144.30690002 147.11334229]
[132.83290100 137.45169067]
[122.52053070 144.42358398]
[110.80141449 148.62055969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 63]
[32 62]
[33 61]
[34 60]
[36 58]
[37 57]
[38 56]
[41 51]
[42 50]
[43 49]
[44 48]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
