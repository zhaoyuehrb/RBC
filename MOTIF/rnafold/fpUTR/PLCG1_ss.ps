%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCGCCGCCGGGUCCCGCUCGUCUGCCGCCUCAGCCUCAGCCCCAACCUCAGCCGCCGCCGUUGCGCUUGCUCCCGGGCGGUCCUGGCCUGUGCCGCCGCCGCCCCCAGCGUCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[20.22382927 253.44577026]
[11.85017300 265.89093018]
[3.47651768 278.33609009]
[-4.89713812 290.78125000]
[-5.25070763 310.85769653]
[-22.78959274 318.83099365]
[-30.51148415 331.69070435]
[-38.23337555 344.55044556]
[-37.97373199 360.94750977]
[-52.18127441 369.13763428]
[-66.24050140 360.69546509]
[-65.68849182 344.30560303]
[-51.09309387 336.82855225]
[-43.37120438 323.96881104]
[-35.64931107 311.10910034]
[-39.03417587 301.31439209]
[-36.35074615 291.07604980]
[-28.26614571 283.90722656]
[-17.34229279 282.40759277]
[-8.96863747 269.96243286]
[-0.59498179 257.51727295]
[7.77867413 245.07211304]
[7.19185686 224.50733948]
[26.30266571 214.98918152]
[33.69088745 201.93490601]
[41.07910919 188.88063049]
[48.46732712 175.82635498]
[48.00246429 160.93901062]
[61.53337097 152.73991394]
[68.92159271 139.68562317]
[76.30981445 126.63135529]
[66.85740662 113.11573792]
[64.50124359 96.79188538]
[69.74578857 81.15493011]
[81.46813202 69.55293274]
[76.53999329 55.38559723]
[71.61186218 41.21825790]
[61.43010712 36.98607254]
[55.43776703 27.99469566]
[55.45022964 17.41054916]
[61.21791458 8.80082417]
[57.02562714 -5.60142374]
[52.83334351 -20.00367165]
[41.86680603 -26.93923759]
[38.71527100 -39.11106110]
[44.55284882 -49.79052353]
[40.73278427 -64.29593658]
[36.91271591 -78.80135345]
[33.09264755 -93.30677032]
[24.19375801 -97.01443481]
[18.14390564 -104.34108734]
[16.24313736 -113.50894928]
[18.80451012 -122.37025452]
[25.11088943 -128.91029358]
[22.42167854 -143.66726685]
[11.40207577 -155.81224060]
[16.66710281 -171.34321594]
[32.80054855 -174.28326416]
[43.20571136 -161.60791016]
[37.17864990 -146.35647583]
[39.86785889 -131.59950256]
[54.64117050 -117.28156281]
[47.59806442 -97.12683868]
[51.41813278 -82.62142181]
[55.23819733 -68.11600494]
[59.05826569 -53.61058807]
[72.06717682 -41.90781403]
[67.23559570 -24.19595718]
[71.42787933 -9.79370880]
[75.62016296 4.60853958]
[90.55018616 16.78557396]
[85.77919769 36.29012299]
[90.70733643 50.45746231]
[95.63546753 64.62480164]
[109.18064117 65.55918884]
[121.39369202 71.49098969]
[130.50248718 81.55949402]
[135.18531799 94.30374146]
[150.16543579 95.07592773]
[165.14553833 95.84810638]
[180.12565613 96.62028503]
[195.10575867 97.39247131]
[210.08587646 98.16464996]
[225.06597900 98.93682861]
[236.74519348 88.62984467]
[251.92614746 89.62634277]
[261.68032837 100.82419586]
[276.66043091 101.59637451]
[291.64053345 102.36855316]
[306.62063599 103.14073944]
[320.97198486 95.20529938]
[334.87841797 103.89684296]
[334.03421021 120.27424622]
[319.30780029 127.48984528]
[305.84848022 118.12084961]
[290.86834717 117.34867096]
[275.88824463 116.57648468]
[260.90814209 115.80430603]
[250.05429077 125.93987274]
[234.85133362 125.37017059]
[224.29380798 113.91694641]
[209.31369019 113.14476013]
[194.33358765 112.37258148]
[179.35346985 111.60039520]
[164.37335205 110.82821655]
[149.39324951 110.05603790]
[134.41313171 109.28385162]
[128.02464294 122.02438354]
[117.15526581 131.24340820]
[103.54291534 135.46690369]
[89.36408997 134.01957703]
[81.97586823 147.07385254]
[74.58764648 160.12812805]
[74.52405548 175.94920349]
[61.52160645 183.21456909]
[54.13338470 196.26884460]
[46.74516678 209.32313538]
[39.35694504 222.37741089]
[43.14216232 231.24359131]
[42.36118317 240.71304321]
[37.32376480 248.60527039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[6 15]
[7 14]
[8 13]
[24 118]
[25 117]
[26 116]
[27 115]
[29 113]
[30 112]
[31 111]
[35 74]
[36 73]
[37 72]
[41 70]
[42 69]
[43 68]
[46 66]
[47 65]
[48 64]
[49 63]
[54 61]
[55 60]
[78 107]
[79 106]
[80 105]
[81 104]
[82 103]
[83 102]
[84 101]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
