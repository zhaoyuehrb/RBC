%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAACUCGGUGGUGGCCACUGCGCAGACCAGACUUCGCUCGUACUCGUGCGCCUCGCUUCGCUUUUCCUCCGCAACC\
) } def
/len { sequence length } bind def

/coor [
[66.99897003 358.63607788]
[52.08375931 361.56945801]
[37.18231964 358.56686401]
[24.56702232 350.08615112]
[16.16160393 337.42053223]
[13.24782944 322.50149536]
[16.27003098 307.60400391]
[24.76734161 294.99987793]
[37.44398499 286.61111450]
[52.36686707 283.71697998]
[55.32977676 269.01251221]
[58.29269028 254.30805969]
[61.25559998 239.60359192]
[56.18473053 225.59875488]
[66.49549866 213.59881592]
[69.45840454 198.89434814]
[58.54206467 190.44978333]
[52.35179901 178.03994751]
[52.17026138 164.10636902]
[58.09153366 151.41857910]
[68.99087524 142.52374268]
[82.73791504 139.23526001]
[86.28308105 124.66022491]
[89.82824707 110.08518219]
[86.08186340 96.61461639]
[95.59671021 86.36965179]
[99.14187622 71.79460907]
[88.75695801 65.13936615]
[80.75895691 55.77532959]
[75.82553101 44.51347351]
[74.36955261 32.32479095]
[76.50463104 20.25657082]
[82.03630066 9.34243393]
[90.47969055 0.51378167]
[101.10198975 -5.47967005]
[112.98606873 -8.13355446]
[125.10963440 -7.23128319]
[130.91870117 -21.06077194]
[136.72776794 -34.89025879]
[134.93864441 -50.60998154]
[147.00108337 -59.34765625]
[152.81015015 -73.17714691]
[150.21479797 -89.36962128]
[163.10916138 -99.50212097]
[178.22860718 -93.15120697]
[180.01956177 -76.85014343]
[166.63963318 -67.36808014]
[160.83056641 -53.53858948]
[163.03518677 -38.80804443]
[150.55725098 -29.08119202]
[144.74818420 -15.25170326]
[138.93911743 -1.42221570]
[151.58383179 11.38879490]
[157.63511658 28.39305115]
[155.91703796 46.40882111]
[146.71151733 62.04658890]
[131.71304321 72.34676361]
[113.71691895 75.33977509]
[110.17175293 89.91481781]
[113.91813660 103.38538361]
[104.40328979 113.63034821]
[100.85812378 128.20538330]
[97.31295776 142.78042603]
[109.32418823 153.95362854]
[114.11071014 169.54714966]
[110.47834015 185.35383606]
[99.49133301 197.15744019]
[84.16286469 201.85726929]
[81.19995880 216.56172180]
[86.05889893 231.61833191]
[75.96006012 242.56651306]
[72.99714661 257.27096558]
[70.03424072 271.97543335]
[67.07132721 286.67990112]
[79.70889282 295.12741089]
[88.14760590 307.77084351]
[91.10062408 322.68218994]
[88.11762238 337.58755493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 74]
[11 73]
[12 72]
[13 71]
[15 69]
[16 68]
[22 63]
[23 62]
[24 61]
[26 59]
[27 58]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
