%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCCUCCACUUCUUGCCUGAGCCGCCUGCUCCUCUUGGAAACACGUUGAGCCUCCCCGCUGGAGAGGGAGCCAGAACAGGGAAGAACGGAUUCACACAGG\
) } def
/len { sequence length } bind def

/coor [
[87.41606903 394.70858765]
[77.45755005 383.32073975]
[71.50733185 369.41210938]
[70.14836121 354.34530640]
[73.51377869 339.59643555]
[81.27387238 326.61044312]
[92.66838837 316.65954590]
[106.58100891 310.71865845]
[105.22352600 295.78021240]
[103.86604309 280.84176636]
[94.71836853 272.76782227]
[93.55479431 260.21737671]
[101.55738831 249.96315002]
[100.65171051 234.99050903]
[99.74603271 220.01788330]
[98.84035492 205.04524231]
[97.93468475 190.07261658]
[89.44304657 177.83572388]
[96.33299255 163.59356689]
[95.42731476 148.62094116]
[94.52163696 133.64830017]
[93.61595917 118.67566681]
[80.40722656 102.37899017]
[89.33209229 83.39481354]
[86.62826538 68.64051819]
[73.90536499 59.65354919]
[71.37348175 44.65207672]
[80.01958466 32.57811737]
[77.31575775 17.82381821]
[74.61193085 3.06952024]
[69.91535950 -4.96459246]
[72.05632019 -12.17078972]
[69.79935455 -27.00002098]
[67.54238892 -41.82925415]
[65.28541565 -56.65848541]
[49.88905716 -62.46484756]
[39.54274368 -75.13976288]
[36.96670151 -91.20273590]
[42.76383972 -106.30310059]
[55.28194046 -116.39839172]
[52.57811356 -131.15269470]
[49.87428665 -145.90699768]
[35.06346130 -149.45089722]
[22.97848129 -158.71768188]
[15.71314907 -172.10180664]
[14.52622318 -187.28439331]
[19.62334633 -201.63497925]
[30.12141418 -212.66722107]
[44.20156860 -218.46974182]
[59.42433929 -218.03718567]
[73.15229034 -211.44451904]
[83.00697327 -199.83395386]
[87.28099823 -185.21710205]
[85.23387146 -170.12640381]
[77.22026825 -157.17642212]
[64.62858582 -148.61082458]
[67.33241272 -133.85652161]
[70.03623962 -119.10221863]
[83.25617981 -115.33531952]
[93.58914185 -106.16914368]
[98.95706177 -93.37008667]
[98.24713898 -79.44252777]
[91.54197693 -67.13883972]
[80.11464691 -58.91545105]
[82.37162018 -44.08621979]
[84.62858582 -29.25698853]
[86.88555145 -14.42775726]
[89.36623383 0.36569473]
[92.07006073 15.11999321]
[94.77388000 29.87429237]
[107.13961792 38.09768677]
[110.09185791 53.02212906]
[101.38256073 65.93669128]
[104.08638763 80.69098663]
[111.50554657 83.96382904]
[116.98252106 89.94364166]
[119.59277344 97.62100983]
[118.89569092 105.69995880]
[115.00892639 112.81673431]
[108.58859253 117.76998901]
[109.49427032 132.74263000]
[110.39994812 147.71525574]
[111.30562592 162.68789673]
[119.86204529 175.99571228]
[112.90731812 189.16693115]
[113.81298828 204.13957214]
[114.71866608 219.11219788]
[115.62434387 234.08483887]
[116.53002167 249.05746460]
[127.05095673 264.07501221]
[118.80448914 279.48428345]
[120.16197205 294.42272949]
[121.51945496 309.36117554]
[136.27507019 312.69692993]
[149.27662659 320.43090820]
[159.25041199 331.80541992]
[165.21925354 345.70605469]
[166.59841919 360.77102661]
[163.25276184 375.52438354]
[155.51008606 388.52078247]
[144.12890625 398.48690796]
[130.22427368 404.44644165]
[115.15838623 405.81552124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 93]
[9 92]
[10 91]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[19 83]
[20 82]
[21 81]
[22 80]
[24 74]
[25 73]
[28 70]
[29 69]
[30 68]
[32 67]
[33 66]
[34 65]
[35 64]
[40 58]
[41 57]
[42 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
