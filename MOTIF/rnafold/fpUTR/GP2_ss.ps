%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAGCCCAGUGUAUGGCCUAGAACUCCCAUCAUACCUGUGCACCAAUUGAGGAGAGACACAUGGGUGGGAAAUUGCAAUAAAAAGACGGCCCACAGCAGGCUGCAUUCCCAUGGCUGGCCAGAGGAGGAACGCUUUGUGUUCUCAUCGGAGCUGCAUGGGAAGUCUGCAUACAGCAAAGUGACCUGC\
) } def
/len { sequence length } bind def

/coor [
[90.29541016 159.72027588]
[90.00954437 174.71754456]
[75.77052307 179.43455505]
[66.58740234 167.57411194]
[74.72061920 154.96946716]
[79.70671844 140.82243347]
[72.53303528 138.63423157]
[61.37486267 148.65896606]
[56.28017426 163.63743591]
[41.64167786 166.38766479]
[30.48350716 176.41238403]
[19.32533455 186.43711853]
[15.02329350 194.51480103]
[7.90021849 196.53311157]
[-3.42132449 206.37297058]
[-14.74286747 216.21281433]
[-26.06440926 226.05267334]
[-37.38595200 235.89251709]
[-48.70749664 245.73237610]
[-44.21598434 260.28387451]
[-46.03785706 275.40341187]
[-53.85746384 288.47146606]
[-66.32001495 297.22387695]
[-81.26629639 300.14425659]
[-96.10677338 296.72662354]
[-108.27024078 287.56311035]
[-115.64930725 274.24136353]
[-116.96550751 259.06942749]
[-111.99079895 244.67594910]
[-101.58708191 233.55467224]
[-87.55685425 227.63244629]
[-72.33095551 227.93533325]
[-58.54734802 234.41082764]
[-47.22580338 224.57096863]
[-35.90426254 214.73112488]
[-24.58271790 204.89126587]
[-13.26117516 195.05142212]
[-1.93963242 185.21157837]
[9.30060482 175.27894592]
[20.45877647 165.25421143]
[31.61694908 155.22949219]
[35.91353226 140.96804810]
[51.35013199 137.50079346]
[62.50830460 127.47605896]
[56.40039444 109.60512543]
[58.03446579 91.54730225]
[43.65158463 87.28903961]
[29.26870537 83.03078461]
[15.50082302 90.31660461]
[0.97519833 85.79323578]
[-5.88587189 72.62276459]
[-20.26875114 68.36450958]
[-32.49552155 77.91886139]
[-48.00423813 78.42813110]
[-60.83148193 69.69649506]
[-66.04491425 55.08144379]
[-61.63986588 40.20276260]
[-49.31016922 30.78160667]
[-33.79684067 30.44060516]
[-21.06507492 39.31087875]
[-16.01049232 53.98162460]
[-1.62761331 58.23988342]
[11.29771328 50.92746353]
[25.94465828 55.04105377]
[33.52696228 68.64790344]
[47.90984344 72.90616608]
[62.29272461 77.16442108]
[72.13257599 65.84288025]
[65.91155243 52.19374466]
[59.69052887 38.54460907]
[53.46950912 24.89547348]
[47.24848557 11.24633884]
[29.39328384 8.17401886]
[17.05512047 -4.87785339]
[15.02649212 -22.56542015]
[23.93079567 -37.80063248]
[17.26421547 -51.23777390]
[1.94309711 -53.69601822]
[-8.98314667 -64.71404266]
[-11.31315327 -80.05518341]
[-4.15098763 -93.82046509]
[9.74935150 -100.71685791]
[25.04290009 -98.09255219]
[35.84897614 -86.95664978]
[38.01242447 -71.59113312]
[30.70135307 -57.90435410]
[37.36793518 -44.46721649]
[49.52464676 -44.23412323]
[60.49054718 -38.81646347]
[68.15222168 -29.18976593]
[71.00398254 -17.14714050]
[68.44346619 -4.96541214]
[60.89762115 5.02531672]
[67.11864471 18.67445183]
[73.33966064 32.32358551]
[79.56068420 45.97272110]
[85.78170776 59.62185669]
[114.80353546 62.82531738]
[133.11079407 83.00165558]
[147.56176758 78.98053741]
[162.01274109 74.95941162]
[176.46371460 70.93829346]
[190.91468811 66.91716766]
[205.36564636 62.89604950]
[219.81661987 58.87492752]
[222.76884460 55.63834763]
[226.25018311 53.71358490]
[229.77984619 53.10531616]
[232.92549133 53.66050720]
[235.35081482 55.09817505]
[250.03488159 52.03583145]
[264.71896362 48.97348785]
[279.40304565 45.91114807]
[294.08712769 42.84880447]
[308.77117920 39.78646469]
[323.45526123 36.72412109]
[338.08697510 33.42067719]
[352.66238403 29.87702942]
[367.23779297 26.33337975]
[372.29702759 22.03449249]
[377.92291260 21.09078789]
[382.35083008 22.92127228]
[397.03491211 19.85893059]
[404.81268311 15.03576946]
[411.98559570 16.86907196]
[426.71804810 14.04865837]
[438.81726074 3.85454965]
[452.77233887 9.06076813]
[467.50479126 6.24035454]
[482.23727417 3.41994143]
[490.09332275 -1.27464247]
[497.23510742 0.67638743]
[512.01196289 -1.90133381]
[526.78881836 -4.47905493]
[541.56567383 -7.05677652]
[556.34252930 -9.63449764]
[570.90698242 -18.31281281]
[583.27795410 -6.71994543]
[575.56280518 8.37682056]
[558.92022705 5.14235449]
[544.14337158 7.72007561]
[529.36651611 10.29779720]
[514.58966064 12.87551785]
[499.81283569 15.45323944]
[485.05767822 18.15239716]
[470.32522583 20.97281075]
[455.59277344 23.79322433]
[444.54733276 33.78559875]
[429.53848267 28.78111458]
[414.80599976 31.60152817]
[400.09725952 34.54300308]
[385.41317749 37.60534668]
[370.78146362 40.90879059]
[356.20605469 44.45243835]
[341.63064575 47.99608612]
[338.41870117 51.55144501]
[332.93307495 53.11641312]
[326.51760864 51.40819550]
[311.83352661 54.47053909]
[297.14944458 57.53287888]
[282.46539307 60.59522247]
[267.78131104 63.65756607]
[253.09722900 66.71990967]
[238.41316223 69.78224945]
[223.83775330 73.32589722]
[209.38677979 77.34702301]
[194.93580627 81.36814117]
[180.48483276 85.38926697]
[166.03385925 89.41038513]
[151.58288574 93.43151093]
[137.13191223 97.45262909]
[138.34481812 105.67824554]
[137.68695068 114.29429626]
[135.05133057 122.86635590]
[130.43327332 130.93348694]
[123.93653107 138.03251648]
[115.77355194 143.72363281]
[119.43695068 158.26940918]
[123.10034943 172.81518555]
[137.55090332 178.46858215]
[145.89028931 191.55422974]
[144.91184998 207.04042053]
[134.99180603 218.97241211]
[119.94461060 222.76210022]
[105.55622864 216.95225525]
[97.35928345 203.77691650]
[98.50566864 188.30224609]
[108.55457306 176.47857666]
[104.89118195 161.93280029]
[101.22778320 147.38702393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[10 41]
[11 40]
[12 39]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[46 67]
[47 66]
[48 65]
[51 62]
[52 61]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[76 87]
[77 86]
[99 171]
[100 170]
[101 169]
[102 168]
[103 167]
[104 166]
[105 165]
[110 164]
[111 163]
[112 162]
[113 161]
[114 160]
[115 159]
[116 158]
[117 155]
[118 154]
[119 153]
[122 152]
[123 151]
[125 150]
[126 149]
[128 147]
[129 146]
[130 145]
[132 144]
[133 143]
[134 142]
[135 141]
[136 140]
[177 190]
[178 189]
[179 188]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
