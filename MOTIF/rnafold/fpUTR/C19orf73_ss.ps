%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUCACCUGGAGCGAGUAGCGCGCGGCGUGGAACGCGAGUCGCGACCCCGGCUCCCGGCAGUGGCGCGCACUAGCCCUCGCGCCGCACGGGACACGAGGGCUGGGCGGGCAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[104.00987244 129.76101685]
[96.83473969 129.86265564]
[89.84033966 128.25912476]
[83.42606354 125.04199219]
[77.95816803 120.39495850]
[73.74886322 114.58336639]
[71.03850555 107.93906403]
[69.98185730 100.84143066]
[55.35794067 97.50361633]
[40.18205643 101.97609711]
[29.49559402 91.60070801]
[14.87167549 88.26289368]
[0.24775709 84.92507935]
[-14.37616158 81.58726501]
[-29.00008011 78.24945068]
[-36.23463440 89.73327637]
[-46.66083908 98.38714600]
[-59.23807144 103.36582947]
[-72.71675873 104.19001770]
[-85.76250458 100.79238129]
[-97.08821869 93.52286530]
[-105.58106995 83.11266327]
[-110.41186523 70.60072327]
[-111.11594391 57.23004913]
[-125.54332733 53.12510681]
[-139.97071838 49.02016068]
[-154.39810181 44.91521454]
[-168.82548523 40.81027222]
[-183.25286865 36.70532608]
[-198.64364624 40.37066269]
[-208.76763916 29.44574547]
[-223.19502258 25.34080124]
[-237.85386658 31.85984993]
[-252.02330017 24.33610344]
[-254.83375549 8.54113770]
[-244.12927246 -3.40850139]
[-228.12144470 -2.34607410]
[-219.09008789 10.91341686]
[-204.66270447 15.01836109]
[-190.30386353 11.05941105]
[-179.14791870 22.27794075]
[-164.72053528 26.38288689]
[-150.29315186 30.48783112]
[-135.86576843 34.59277725]
[-121.43838501 38.69771957]
[-107.01100159 42.80266571]
[-97.07353210 29.57763863]
[-82.81443024 21.11958122]
[-66.37194061 18.72911644]
[-50.22407532 22.79455757]
[-36.81513596 32.72914505]
[-28.18573761 47.05555344]
[-25.66226578 63.62553024]
[-11.03834724 66.96334839]
[3.58557105 70.30116272]
[18.20948982 73.63897705]
[32.83340836 76.97678375]
[46.96329117 72.26556396]
[58.69575500 82.87969971]
[73.31967163 86.21751404]
[91.29042053 71.26082611]
[114.54073334 73.72521973]
[128.97676086 92.11682892]
[143.97544861 91.91883850]
[157.67228699 84.00005341]
[170.50057983 91.56868744]
[185.49928284 91.37068939]
[199.19612122 83.45191193]
[212.02441406 91.02053833]
[227.02310181 90.82254791]
[242.02178955 90.62455750]
[250.68669128 87.34887695]
[257.41778564 90.62455750]
[272.41647339 90.82254791]
[287.41516113 91.02053833]
[302.41384888 91.21853638]
[317.41256714 91.41652679]
[332.41125488 91.61452484]
[347.40994263 91.81251526]
[362.40863037 92.01051331]
[377.40731812 92.20850372]
[392.40603638 92.40650177]
[404.64483643 79.99191284]
[421.74044800 80.20240021]
[433.20971680 92.42460632]
[448.20840454 92.22660828]
[460.38684082 81.78318024]
[476.11730957 84.93470001]
[483.33273315 99.26359558]
[476.49804688 113.77796173]
[460.85626221 117.34362030]
[448.40640259 107.22530365]
[433.40771484 107.42330170]
[425.74035645 117.86952972]
[413.25787354 122.01686859]
[400.48980713 118.12231445]
[392.20803833 107.40518951]
[377.20935059 107.20719910]
[362.21063232 107.00920105]
[347.21194458 106.81121063]
[332.21325684 106.61322021]
[317.21456909 106.41522217]
[302.21588135 106.21723175]
[287.21716309 106.01923370]
[272.21847534 105.82124329]
[257.21978760 105.62324524]
[242.21978760 105.62324524]
[227.22109985 105.82124329]
[212.22239685 106.01923370]
[199.59837341 113.92385864]
[185.69726562 106.36938477]
[170.69857788 106.56738281]
[158.07453918 114.47200012]
[144.17344666 106.91753387]
[129.17474365 107.11552429]
[126.65368652 113.83393860]
[122.61068726 119.76242828]
[117.27661133 124.56248474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 60]
[9 59]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[31 39]
[32 38]
[63 115]
[64 114]
[66 112]
[67 111]
[69 109]
[70 108]
[71 107]
[73 106]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
