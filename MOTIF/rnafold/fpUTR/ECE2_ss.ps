%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGCGGCCGCGGCCGAGCGGGGGUGCUGCGCGGCGGCCGUGAUGGCUGGUGACGGCGGGGCCGGGCAGGGGACCGGGGCCGCGGCCCGGGAGCGGGCCAGCUGCCGGGAGCCCUGAAUCACCGCCUGGCCCGACUCCACC\
) } def
/len { sequence length } bind def

/coor [
[97.49104309 176.39411926]
[96.50999451 161.42622375]
[95.52894592 146.45834351]
[94.54790497 131.49046326]
[84.62810516 128.01927185]
[76.37062073 121.51806641]
[63.21972275 128.73289490]
[50.06882095 135.94772339]
[36.91791916 143.16256714]
[23.76701736 150.37739563]
[10.61611652 157.59222412]
[-2.53478479 164.80705261]
[-15.68568611 172.02188110]
[-24.06311226 185.44311523]
[-38.94300461 184.78129578]
[-52.09390640 191.99612427]
[-56.61445999 206.90257263]
[-70.05412292 214.03210449]
[-84.23728943 209.63058472]
[-97.38819122 216.84541321]
[-110.53909302 224.06024170]
[-123.68999481 231.27508545]
[-131.73022461 245.56797791]
[-148.12913513 245.48078918]
[-156.01693726 231.10322571]
[-147.27934265 217.22567749]
[-130.90481567 218.12417603]
[-117.75392151 210.90934753]
[-104.60301971 203.69451904]
[-91.45211792 196.47967529]
[-87.54370880 182.15278625]
[-74.30960846 174.64857483]
[-59.30873871 178.84521484]
[-46.15783691 171.63038635]
[-38.72105408 158.72521973]
[-22.90051842 158.87098694]
[-9.74961662 151.65615845]
[3.40128517 144.44132996]
[16.55218697 137.22648621]
[29.70308685 130.01165771]
[42.85398865 122.79682922]
[56.00489044 115.58199310]
[69.15579224 108.36716461]
[68.22238922 103.39968109]
[68.08381653 98.34716797]
[68.74355316 93.33599854]
[70.18508148 88.49150848]
[72.37236786 83.93486786]
[61.53690338 73.56217194]
[50.70144653 63.18947983]
[39.86598587 52.81678391]
[23.81686974 49.44663620]
[18.96876717 33.78049850]
[30.30899048 21.93434525]
[46.17169189 26.09448433]
[50.23868179 41.98132324]
[61.07414246 52.35401917]
[71.90959930 62.72671509]
[82.74506378 73.09941101]
[104.86170197 68.41300201]
[124.54549408 79.53311157]
[137.99858093 72.89878082]
[151.45167542 66.26445007]
[164.90476990 59.63012314]
[178.35784912 52.99579239]
[191.81094360 46.36146164]
[205.26403809 39.72713089]
[218.71713257 33.09280014]
[232.17022705 26.45846939]
[244.99389648 18.67687035]
[257.09057617 9.80722618]
[269.18722534 0.93758154]
[281.28390503 -7.93206310]
[283.82009888 -23.30104065]
[296.21420288 -32.12380219]
[310.85052490 -29.61121368]
[322.94720459 -38.48085785]
[325.69754028 -51.13298035]
[336.01885986 -58.26502609]
[348.03091431 -56.48017120]
[360.31820679 -65.08381653]
[372.60546875 -73.68746185]
[379.47198486 -87.94094086]
[394.33547974 -88.90298462]
[406.62277222 -97.50662994]
[418.81546021 -106.24379730]
[430.91213989 -115.11344147]
[443.00881958 -123.98308563]
[455.10546875 -132.85272217]
[467.20214844 -141.72236633]
[479.29882812 -150.59201050]
[485.40466309 -165.81208801]
[501.67465210 -167.86614990]
[511.37164307 -154.64114380]
[504.52017212 -139.74183655]
[488.16845703 -138.49534607]
[476.07180786 -129.62570190]
[463.97512817 -120.75605774]
[451.87844849 -111.88641357]
[439.78179932 -103.01676941]
[427.68511963 -94.14712524]
[424.12390137 -87.60588074]
[415.22640991 -85.21934509]
[402.93914795 -76.61569977]
[396.95150757 -62.97761154]
[381.20913696 -61.40018463]
[368.92184448 -52.79653931]
[356.63455200 -44.19289017]
[350.13095093 -27.92829514]
[331.81686401 -26.38418961]
[319.72018433 -17.51454353]
[317.71524048 -2.80006742]
[305.57385254 6.36733532]
[290.15356445 4.16460562]
[278.05688477 13.03425026]
[265.96020508 21.90389442]
[253.86354065 30.77354050]
[268.74127197 32.68484497]
[279.76898193 42.85290909]
[282.87884521 57.52699280]
[276.92370605 71.29421234]
[264.10028076 79.07620239]
[249.13876343 78.00238037]
[237.55809021 68.46886444]
[233.63006592 53.99230957]
[238.80455017 39.91156006]
[225.35145569 46.54589081]
[211.89836121 53.18022156]
[198.44528198 59.81455231]
[184.99218750 66.44888306]
[171.53909302 73.08321381]
[158.08599854 79.71754456]
[144.63291931 86.35187531]
[131.17982483 92.98620605]
[130.75540161 108.68792725]
[122.90166473 122.29099274]
[109.51578522 130.50941467]
[110.49683380 145.47729492]
[111.47788239 160.44519043]
[112.45892334 175.41307068]
[122.01473999 188.74043274]
[115.00524139 203.56604004]
[98.64121246 204.63859558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[3 138]
[4 137]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[15 34]
[16 33]
[19 30]
[20 29]
[21 28]
[22 27]
[48 59]
[49 58]
[50 57]
[51 56]
[61 134]
[62 133]
[63 132]
[64 131]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
[70 117]
[71 116]
[72 115]
[73 114]
[76 111]
[77 110]
[80 108]
[81 107]
[82 106]
[84 104]
[85 103]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
