%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGGGGGCCACCCGGGCUGUGCGUGGGAGUCGGGUUGGGGCGGAGCGGAGGGGAGUCAGUGCGCAGCAGGGCAGGUUCCUGCGGAGCCGCCGGAGACGGUCGGGUUUGCCAGGGCCGGGCGGGACCGCGGGGACC\
) } def
/len { sequence length } bind def

/coor [
[108.21106720 131.20991516]
[93.21736145 132.88333130]
[78.50268555 127.46667480]
[71.90666199 140.93858337]
[65.31063843 154.41050720]
[58.71462250 167.88241577]
[52.11859894 181.35433960]
[55.93750763 196.93623352]
[46.02246857 209.54858398]
[29.97944832 209.51628113]
[20.11528015 196.86410522]
[23.99691010 181.29771423]
[38.64668274 174.75831604]
[45.24270630 161.28639221]
[51.83872604 147.81448364]
[58.43474579 134.34257507]
[65.03076935 120.87065125]
[59.84702301 106.79483032]
[46.08885193 100.81881714]
[32.33068466 94.84279633]
[18.57251358 88.86678314]
[4.81434393 82.89076233]
[-8.94382572 76.91474915]
[-22.70199585 70.93873596]
[-36.46016312 64.96271515]
[-48.38809967 71.32885742]
[-61.60846329 69.65937805]
[-71.29146576 60.79130936]
[-74.03100586 48.14962387]
[-87.64958191 41.86197662]
[-103.42211914 43.10200119]
[-111.73397064 30.74229431]
[-125.35253906 24.45464706]
[-139.95681763 32.90571213]
[-156.55957031 31.03710175]
[-168.67726135 19.77669334]
[-171.69575500 3.68100834]
[-185.45393372 -2.29500794]
[-199.21209717 -8.27102470]
[-212.51017761 -0.27473214]
[-227.96569824 -1.65554774]
[-239.63568115 -11.88251972]
[-243.03279114 -27.02316856]
[-236.85078430 -41.25560379]
[-223.46673584 -49.10716629]
[-208.02711487 -47.55876923]
[-196.46875000 -37.20580292]
[-193.23608398 -22.02919388]
[-179.47790527 -16.05317688]
[-165.71974182 -10.07716084]
[-154.85345459 -17.91525459]
[-141.42317200 -19.35034370]
[-128.94714355 -13.89833546]
[-120.74731445 -2.89355326]
[-119.06489563 10.83607483]
[-105.44632721 17.12372208]
[-90.64788055 15.43396473]
[-81.36193085 28.24340439]
[-67.74336243 34.53105164]
[-52.27025223 28.04145432]
[-36.56558990 34.84624481]
[-30.48414803 51.20454788]
[-16.72597885 57.18056107]
[-2.96780944 63.15657806]
[10.79036045 69.13259888]
[24.54853058 75.10861206]
[38.30669785 81.08462524]
[52.06486893 87.06064606]
[65.82303619 93.03665924]
[71.90663147 80.61166382]
[82.16135406 71.77536774]
[94.78143311 67.77539062]
[107.66112518 69.03409576]
[118.74553680 75.11594391]
[126.35848236 84.83482361]
[129.45501709 96.47798920]
[144.31530762 98.52048492]
[159.17559814 100.56298828]
[174.03588867 102.60548401]
[188.89617920 104.64798737]
[203.75646973 106.69048309]
[218.61676025 108.73298645]
[233.47705078 110.77548218]
[248.33734131 112.81798553]
[263.19763184 114.86048889]
[278.05792236 116.90298462]
[290.57083130 107.62586212]
[305.61218262 109.90894318]
[314.37936401 121.89525604]
[329.23965454 123.93775177]
[344.09994507 125.98025513]
[358.96023560 128.02275085]
[373.82052612 130.06524658]
[367.42028809 116.49923706]
[373.82595825 102.93578339]
[388.36877441 99.26063538]
[400.44915771 108.15244293]
[401.26232910 123.13038635]
[390.21520996 133.27787781]
[404.74734497 136.99499512]
[419.27947998 140.71211243]
[433.81161499 144.42922974]
[448.34375000 148.14634705]
[465.90606689 142.74461365]
[478.01272583 155.39793396]
[492.62570190 158.78329468]
[508.14559937 153.48559570]
[520.31372070 164.47961426]
[516.61260986 180.45564270]
[500.84960938 184.97891235]
[489.24035645 173.39628601]
[474.62738037 170.01092529]
[464.14743042 176.15936279]
[451.90292358 173.39628601]
[444.62661743 162.67848206]
[430.09448242 158.96136475]
[415.56234741 155.24424744]
[401.03021240 151.52714539]
[386.49807739 147.81002808]
[371.77804565 144.92553711]
[356.91775513 142.88304138]
[342.05746460 140.84054565]
[327.19717407 138.79804993]
[312.33688354 136.75553894]
[300.66091919 145.93200684]
[285.56137085 144.07231140]
[276.01541138 131.76327515]
[261.15512085 129.72077942]
[246.29483032 127.67827606]
[231.43455505 125.63577271]
[216.57426453 123.59327698]
[201.71397400 121.55077362]
[186.85368347 119.50827789]
[171.99339294 117.46577454]
[157.13310242 115.42327881]
[142.27281189 113.38077545]
[127.41252136 111.33827972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[29 59]
[30 58]
[32 56]
[33 55]
[37 50]
[38 49]
[39 48]
[76 137]
[77 136]
[78 135]
[79 134]
[80 133]
[81 132]
[82 131]
[83 130]
[84 129]
[85 128]
[86 127]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
