%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCUUCCGCCGGCUGCGCACUCACAGUGAUCCCUGCGCGCGUCUCCUGCUCGGGUCAGUGCGCCGCGCUGCGCUGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[90.85010529 306.51684570]
[75.65190887 307.48373413]
[61.37666702 302.17926025]
[50.49764633 291.52249146]
[44.89970398 277.35977173]
[45.55271912 262.14486694]
[52.34354782 248.51383972]
[64.09564209 238.82838440]
[78.77288055 234.76652527]
[80.95689392 219.92637634]
[83.14091492 205.08622742]
[85.05352783 190.20866394]
[86.69409180 175.29864502]
[88.06207275 160.36116028]
[89.15699768 145.40118408]
[90.25193024 130.44119263]
[91.34686279 115.48120880]
[82.27642822 99.35226440]
[92.50000000 83.92845154]
[92.50000000 68.92845154]
[92.50000000 53.92845154]
[92.50000000 38.92845154]
[92.50000000 23.92845154]
[92.50000000 8.92845249]
[92.50000000 -6.07154799]
[80.19412231 2.50547814]
[65.37239838 0.19973375]
[56.25358200 -11.71022892]
[57.89412689 -26.62024498]
[69.38433838 -36.26260376]
[84.35280609 -35.29053879]
[94.49942780 -24.24301529]
[97.76087952 -38.88415146]
[101.02233887 -53.52529144]
[104.28379059 -68.16642761]
[107.54524231 -82.80757141]
[99.33200836 -96.04314423]
[102.84815216 -110.84487915]
[115.51686859 -118.59337616]
[118.77832031 -133.23451233]
[122.03977203 -147.87565613]
[111.11262512 -158.76606750]
[107.83024597 -173.84019470]
[113.24003601 -188.28796387]
[125.61573792 -197.49911499]
[141.00833130 -198.53442383]
[154.50607300 -191.06352234]
[161.80189514 -177.47033691]
[160.56773376 -162.09242249]
[151.19738770 -149.83680725]
[136.68090820 -144.61419678]
[133.41946411 -129.97306824]
[130.15800476 -115.33192444]
[138.33998108 -102.93874359]
[135.24096680 -88.04408264]
[122.18637848 -79.54611206]
[118.92492676 -64.90497589]
[115.66347504 -50.26383972]
[112.40202332 -35.62269974]
[109.14057159 -20.98156166]
[107.50000000 -6.07154799]
[107.50000000 8.92845249]
[107.50000000 23.92845154]
[107.50000000 38.92845154]
[107.50000000 53.92845154]
[107.50000000 68.92845154]
[107.50000000 83.92845154]
[115.13079071 90.74776459]
[117.72357178 100.64773560]
[114.41505432 110.33203125]
[106.30684662 116.57614136]
[105.21191406 131.53611755]
[104.11698151 146.49610901]
[103.02205658 161.45608521]
[105.55858612 170.48384094]
[101.60411072 176.93922424]
[99.96353912 191.84922791]
[102.16867065 200.96359253]
[97.98106384 207.27024841]
[95.79705048 222.11039734]
[93.61302948 236.95054626]
[106.49774933 245.06867981]
[114.96118927 257.72924805]
[117.53700256 272.73873901]
[113.77893066 287.49667358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 81]
[10 80]
[11 79]
[12 77]
[13 76]
[14 74]
[15 73]
[16 72]
[17 71]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[39 53]
[40 52]
[41 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
