%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGAGUCUGCGGAGCCGCGGGCAGUGGCAGUCAGGCCUCCCCGCUCUGUGCUACCUGCGGCCCGGCUCUCCUCCGCGCCCCCACUCGCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[188.54476929 220.57655334]
[178.73855591 209.22586060]
[163.91104126 208.40092468]
[153.80445862 197.02940369]
[154.77024841 181.48254395]
[144.96403503 170.13185120]
[135.15782166 158.78115845]
[125.35161591 147.43046570]
[121.68602753 146.86531067]
[118.14876556 144.37455750]
[115.70078278 140.05834961]
[115.21042633 134.46957397]
[106.55159760 122.22112274]
[97.89276886 109.97266388]
[90.90463257 105.62941742]
[89.15944672 97.18443298]
[80.90178680 84.66201019]
[72.64411926 72.13959503]
[64.38645935 59.61717224]
[56.12879944 47.09474945]
[47.87113571 34.57233047]
[39.61347580 22.04990959]
[31.35581207 9.52748775]
[26.32866859 7.03697491]
[23.19922447 3.18614078]
[22.16648293 -1.01498854]
[22.97399902 -4.63491440]
[15.97008324 -17.89934731]
[8.96616745 -31.16378021]
[1.96225178 -44.42821121]
[-5.04166365 -57.69264221]
[-10.68089390 -61.70989990]
[-12.95269775 -67.18369293]
[-12.03792381 -72.05021667]
[-18.16854668 -85.74018860]
[-24.29916954 -99.43016815]
[-30.65067101 -113.01907349]
[-37.22138596 -126.50334930]
[-52.24258804 -131.41650391]
[-59.31544113 -145.54980469]
[-54.24374771 -160.51821899]
[-40.03645325 -167.44125366]
[-25.12249565 -162.21159363]
[-18.35005951 -147.93190002]
[-23.73711014 -133.07406616]
[-17.16639519 -119.58979034]
[-11.29487228 -114.86624146]
[-10.60919285 -105.56079102]
[-4.47856951 -91.87081146]
[1.65205336 -78.18083954]
[8.22276878 -64.69655609]
[15.22668457 -51.43212891]
[22.23060036 -38.16769409]
[29.23451614 -24.90326309]
[36.23843002 -11.63883018]
[43.87823486 1.26982653]
[52.13589478 13.79224682]
[60.39355850 26.31466866]
[68.65122223 38.83708954]
[76.90888214 51.35950851]
[85.16654205 63.88193130]
[93.42420197 76.40435028]
[101.68186188 88.92677307]
[110.14122009 101.31383514]
[118.80004883 113.56228638]
[127.45888519 125.81074524]
[136.70231628 137.62425232]
[146.50851440 148.97494507]
[156.31472778 160.32563782]
[166.12094116 171.67633057]
[181.64324951 172.97862244]
[191.42643738 184.62953186]
[190.08924866 199.41964722]
[199.89546204 210.77033997]
[219.80146790 210.95841980]
[233.17733765 225.29811096]
[232.01765442 244.57577515]
[242.87875366 254.92163086]
[253.73983765 265.26748657]
[264.60092163 275.61334229]
[279.83862305 272.68206787]
[293.87481689 279.29757690]
[301.31231689 292.91604614]
[299.29122925 308.30093384]
[288.58874512 319.53643799]
[273.32015991 322.30224609]
[259.35653687 315.53485107]
[252.06721497 301.83648682]
[254.25506592 286.47442627]
[243.39398193 276.12857056]
[232.53288269 265.78271484]
[221.67179871 255.43685913]
[211.53526306 258.51165771]
[200.97010803 256.98797607]
[191.97863770 251.08451843]
[186.29446411 241.85659790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[5 70]
[6 69]
[7 68]
[8 67]
[12 66]
[13 65]
[14 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[34 50]
[35 49]
[36 48]
[37 46]
[38 45]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
