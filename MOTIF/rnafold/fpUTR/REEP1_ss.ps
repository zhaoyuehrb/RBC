%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCCGGGCAGGGCGGCGGGCGCGCUCAGUCUGGCGGCGGCUGCCGUGAGCUGACUGACGUUCCGGGAACGCCGCAGCAGCCCGCGCCGCCCGCAGCCUAGCCGAGCCGCGCCGCCCGGGCCUCGCCCGCCCGCCUGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[64.46173859 405.86862183]
[48.97742844 404.86074829]
[37.06431961 394.91806030]
[33.30324173 379.86367798]
[39.14040756 365.48635864]
[52.33130646 357.31448364]
[53.30559921 342.34616089]
[54.27988815 327.37783813]
[55.25418091 312.40951538]
[56.22846985 297.44119263]
[57.20275879 282.47286987]
[58.17705154 267.50454712]
[59.15134048 252.53620911]
[49.16318512 241.54655457]
[49.93802643 226.35267639]
[61.53269958 215.95068359]
[62.50698853 200.98236084]
[63.48128128 186.01403809]
[64.45557404 171.04571533]
[65.42986298 156.07739258]
[66.40415192 141.10905457]
[67.37844086 126.14073944]
[88.25302124 89.09144592]
[84.71185303 74.51543427]
[81.17068481 59.93942261]
[77.47182465 45.40262604]
[73.61570740 30.90675354]
[69.75958252 16.41088104]
[58.73464966 5.06357479]
[62.94005203 -9.22501659]
[59.08393097 -23.72089005]
[45.69348526 -31.67913437]
[41.98933029 -46.43494415]
[49.65882111 -59.15164566]
[45.80270004 -73.64752197]
[41.94658279 -88.14339447]
[30.92164612 -99.49069977]
[35.12704849 -113.77928925]
[31.27092934 -128.27516174]
[27.41481018 -142.77104187]
[23.55868912 -157.26690674]
[12.53375435 -168.61421204]
[16.73915672 -182.90280151]
[12.88303757 -197.39868164]
[1.85810149 -208.74598694]
[6.06350422 -223.03457642]
[2.20738482 -237.53045654]
[-1.64873469 -252.02632141]
[-5.50485420 -266.52218628]
[-16.52979088 -277.86950684]
[-12.32438755 -292.15811157]
[-16.18050575 -306.65396118]
[-20.03662682 -321.14984131]
[-23.89274597 -335.64572144]
[-29.16011238 -343.20114136]
[-27.67174530 -350.49746704]
[-31.21291542 -365.07348633]
[-34.75408554 -379.64947510]
[-49.32982254 -393.50387573]
[-43.27493668 -411.82199097]
[-47.44419479 -426.23089600]
[-51.61345291 -440.63983154]
[-55.78271484 -455.04876709]
[-59.95197296 -469.45770264]
[-70.16255951 -482.99212646]
[-59.98364258 -496.55035400]
[-44.13745499 -490.52255249]
[-45.54304504 -473.62695312]
[-41.37378311 -459.21801758]
[-37.20452499 -444.80911255]
[-33.03526306 -430.40017700]
[-28.86600494 -415.99124146]
[-19.43195343 -411.83587646]
[-13.75743771 -402.96664429]
[-13.94586372 -392.21862793]
[-20.17807198 -383.19064331]
[-16.63690186 -368.61465454]
[-13.09573364 -354.03863525]
[-9.39687252 -339.50183105]
[-5.54075289 -325.00595093]
[-1.68463326 -310.51010132]
[2.17148614 -296.01422119]
[12.92060661 -285.70376587]
[8.99101925 -270.37832642]
[12.84713840 -255.88244629]
[16.70325851 -241.38656616]
[20.55937767 -226.89070129]
[31.30849838 -216.58023071]
[27.37891006 -201.25480652]
[31.23502922 -186.75892639]
[41.98414993 -176.44845581]
[38.05456161 -161.12303162]
[41.91068268 -146.62715149]
[45.76680374 -132.13128662]
[49.62292099 -117.63540649]
[60.37204361 -107.32494354]
[56.44245529 -91.99951172]
[60.29857254 -77.50363922]
[64.15469360 -63.00776291]
[77.12901306 -55.78262711]
[81.24616241 -41.13668060]
[73.57980347 -27.57700920]
[77.43592834 -13.08113670]
[88.18504333 -2.77067208]
[84.25545502 12.55476189]
[88.11157990 27.05063438]
[91.96769714 41.54650879]
[96.76235199 47.24413300]
[95.74669647 56.39825439]
[99.28786469 70.97426605]
[102.82903290 85.55027771]
[112.78522491 96.76964569]
[126.83689117 102.01853180]
[140.88854980 107.26741028]
[156.02302551 101.94509125]
[169.54336548 110.58106995]
[171.07791138 126.55056763]
[159.44949341 137.60314941]
[143.57844543 135.26022339]
[135.63966370 121.31907654]
[121.58800507 116.07019043]
[107.53634644 110.82131195]
[101.23895264 114.89473724]
[101.99725342 129.87556458]
[88.64416504 123.04159546]
[82.34677124 127.11502838]
[81.37247467 142.08335876]
[80.39818573 157.05168152]
[79.42389679 172.02000427]
[78.44960785 186.98832703]
[77.47531128 201.95664978]
[76.50102234 216.92497253]
[86.64944458 228.74221802]
[85.44814301 243.90835571]
[74.11966705 253.51049805]
[73.14537811 268.47882080]
[72.17108917 283.44714355]
[71.19679260 298.41546631]
[70.22250366 313.38378906]
[69.24821472 328.35211182]
[68.27392578 343.32043457]
[67.29962921 358.28878784]
[79.31990051 368.10165405]
[83.24406433 383.11434937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 142]
[7 141]
[8 140]
[9 139]
[10 138]
[11 137]
[12 136]
[13 135]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 111]
[24 110]
[25 109]
[26 107]
[27 106]
[28 105]
[30 103]
[31 102]
[34 99]
[35 98]
[36 97]
[38 95]
[39 94]
[40 93]
[41 92]
[43 90]
[44 89]
[46 87]
[47 86]
[48 85]
[49 84]
[51 82]
[52 81]
[53 80]
[54 79]
[56 78]
[57 77]
[58 76]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
