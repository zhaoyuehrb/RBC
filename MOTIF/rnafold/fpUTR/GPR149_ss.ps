%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGUAGGAGGAAUGAAAUCUGAUUUGCAGCAGCCGGUCUUUCUUUUGAGAAAAUUAUCAGACUCAUUGAUAAGGGAAAUUAAAUAUUGACCAAGGACA\
) } def
/len { sequence length } bind def

/coor [
[103.46018219 188.10272217]
[101.59870148 173.21867371]
[99.73722076 158.33462524]
[97.87574005 143.45057678]
[96.01425934 128.56652832]
[94.15277863 113.68247986]
[83.14189911 103.49618530]
[68.15822601 102.79657745]
[53.17454910 102.09696960]
[38.19087219 101.39736938]
[23.20719528 100.69776154]
[8.22352028 99.99815369]
[-6.76015615 99.29854584]
[-20.90618134 106.38378143]
[-33.25873184 98.06130219]
[-48.24240875 97.36169434]
[-56.58580399 110.18101501]
[-70.13608551 117.05754852]
[-85.20883179 116.23381805]
[-97.76153564 108.03103638]
[-104.47775269 94.73600006]
[-119.46142578 94.03639221]
[-134.44509888 93.33678436]
[-147.22647095 103.03298187]
[-162.74023438 98.94608307]
[-169.08555603 84.21121216]
[-161.39485168 70.13169861]
[-145.56777954 67.50814056]
[-133.74549866 78.35311127]
[-118.76181793 79.05271912]
[-103.77814484 79.75231934]
[-95.85232544 67.14093781]
[-82.58990479 60.14348984]
[-67.50598145 60.72781372]
[-54.65540314 68.83703613]
[-47.54280090 82.37801361]
[-32.55912781 83.07762146]
[-19.48483467 75.94234467]
[-6.06055069 84.31487274]
[8.92312527 85.01448059]
[23.90680122 85.71408844]
[38.89047623 86.41368866]
[53.87415314 87.11329651]
[68.85783386 87.81290436]
[83.84150696 88.51250458]
[108.95944977 79.08309937]
[121.01190186 70.15346527]
[133.06436157 61.22383118]
[145.11680603 52.29420090]
[157.16926575 43.36456680]
[153.98022461 27.49497795]
[157.97515869 11.86852551]
[168.31489563 -0.43486711]
[182.91491699 -7.01272440]
[198.86538696 -6.60906267]
[213.01110840 0.64610511]
[224.78001404 -8.65403843]
[236.54893494 -17.95418167]
[248.31784058 -27.25432396]
[260.08676147 -36.55446625]
[271.85568237 -45.85461044]
[283.62457275 -55.15475464]
[286.91223145 -70.85733032]
[301.30310059 -77.94836426]
[315.75772095 -70.98822784]
[319.18774414 -55.31613541]
[308.96197510 -42.95438004]
[292.92474365 -43.38584137]
[281.15582275 -34.08569717]
[269.38690186 -24.78555298]
[257.61798096 -15.48541069]
[245.84907532 -6.18526745]
[234.08015442 3.11487579]
[222.31124878 12.41501904]
[226.01016235 25.88132095]
[224.25898743 39.78005219]
[217.29214478 51.98358536]
[206.14501953 60.61091232]
[192.50027466 64.31755066]
[178.43379211 62.50497818]
[166.09889221 55.41702271]
[154.04644775 64.34665680]
[141.99398804 73.27628326]
[129.94154358 82.20591736]
[117.88908386 91.13555145]
[132.81234741 89.62023926]
[143.99642944 99.61604309]
[144.15989685 114.61515808]
[133.19630432 124.85232544]
[118.24356842 123.66260529]
[109.03682709 111.82099915]
[110.89830780 126.70504761]
[112.75978851 141.58909607]
[114.62126923 156.47314453]
[116.48274994 171.35719299]
[118.34423065 186.24124146]
[130.07482910 197.18530273]
[128.68870544 213.16836548]
[115.24918365 221.92958069]
[100.06591797 216.74809265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[15 37]
[16 36]
[21 31]
[22 30]
[23 29]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
