%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCCGGGACGGGUCCAAGAUGGACGGCCGCUCAGGUUCUGCUUUUACCUGCGGCCCAGAGCCCCAUUCAUUGCCCCGGUGCUGAGCGGCGCCGCGAGUCGGCCCGAGGCCUCCGGGGACUGCCGUGCCGGGCGGGAGACCGCC\
) } def
/len { sequence length } bind def

/coor [
[93.22447968 264.37643433]
[89.39399719 249.87374878]
[96.76778412 236.81130981]
[111.16376495 232.59754944]
[124.41749573 239.62268066]
[121.53071594 224.90309143]
[118.64394379 210.18348694]
[115.75717163 195.46389771]
[105.71512604 184.46359253]
[110.65192413 169.43234253]
[107.76515198 154.71273804]
[104.87837219 139.99314880]
[101.99160004 125.27354431]
[87.81819153 120.36290741]
[76.44360352 130.14138794]
[65.06901550 139.91987610]
[53.69442749 149.69836426]
[42.31983948 159.47685242]
[34.25053787 174.38732910]
[17.68895149 170.76101685]
[16.58884621 153.84280396]
[32.54135513 148.10226440]
[43.91594315 138.32377625]
[55.29053116 128.54528809]
[66.66511536 118.76680756]
[78.03970337 108.98831940]
[74.52233124 94.40654755]
[59.94055939 90.88917542]
[45.35878754 87.37180328]
[30.77701569 83.85443115]
[16.19524193 80.33705902]
[1.61346889 76.81969452]
[-4.93947744 78.34835815]
[-10.42920399 76.55722046]
[-13.51333237 72.82456970]
[-27.93027878 68.68311310]
[-42.34722519 64.54165649]
[-56.76417160 60.40020370]
[-68.29586029 70.64831543]
[-83.54099274 73.01249695]
[-97.63491058 66.73834991]
[-106.08029938 53.82792664]
[-106.18225861 38.40090179]
[-97.90825653 25.37997818]
[-83.89849854 18.92008591]
[-68.62344360 21.08255577]
[-56.95730972 31.17735100]
[-52.62271881 45.98325729]
[-38.20577240 50.12471008]
[-23.78882408 54.26616669]
[-9.37187767 58.40761948]
[5.13083982 62.23791885]
[19.71261215 65.75528717]
[34.29438400 69.27265930]
[48.87615967 72.79003143]
[63.45793152 76.30740356]
[78.03970337 79.82477570]
[63.51838684 76.06559753]
[50.93368530 67.90316772]
[41.57981491 56.17691040]
[36.41873550 42.09276199]
[35.98121643 27.09914589]
[40.31224823 12.73801136]
[48.96642685 0.48627019]
[61.05375290 -8.39610195]
[75.33116150 -12.99563694]
[90.33034515 -12.83931446]
[104.50878143 -7.94321203]
[116.40836334 1.18915308]
[124.80531311 13.61860180]
[128.83609009 28.06688309]
[128.08616638 43.04812622]
[122.63267517 57.02164841]
[113.03643799 68.55040741]
[100.28495026 76.44852448]
[113.16641235 68.76295471]
[126.04786682 61.07738495]
[138.92932129 53.39181137]
[151.81079102 45.70624161]
[164.69224548 38.02067184]
[173.25102234 21.75432396]
[190.76560974 22.10455322]
[203.47871399 14.14360237]
[216.19183350 6.18265152]
[218.03437805 -4.62961912]
[225.40257263 -12.45404720]
[235.65538025 -14.84174347]
[245.30917358 -11.23179817]
[258.35302734 -18.63843155]
[271.39685059 -26.04506493]
[277.36804199 -33.05532837]
[284.80200195 -33.46727753]
[298.00216675 -40.59154129]
[311.20236206 -47.71580887]
[324.40255737 -54.84007645]
[330.35675049 -69.73728943]
[345.75726318 -74.23222351]
[358.79006958 -64.87674713]
[359.45758057 -48.84758759]
[347.24771118 -38.44094086]
[331.52682495 -41.63989258]
[318.32662964 -34.51562500]
[305.12643433 -27.39135933]
[291.92626953 -20.26709366]
[278.80349731 -13.00122356]
[265.75964355 -5.59459019]
[252.71580505 1.81204307]
[244.26179504 19.15509605]
[224.15278625 18.89576530]
[211.43966675 26.85671616]
[198.72656250 34.81766510]
[195.68835449 46.57329559]
[185.09963989 53.29809189]
[172.37782288 50.90213013]
[159.49635315 58.58769989]
[146.61489868 66.27326965]
[133.73344421 73.95884705]
[120.85198212 81.64441681]
[107.97052002 89.32998657]
[113.78289795 91.40746307]
[118.83595276 96.46122742]
[121.70787811 104.08591461]
[121.22126007 113.23970795]
[116.71119690 122.38677216]
[119.59796906 137.10636902]
[122.48474884 151.82597351]
[125.37152100 166.54556274]
[135.62004089 178.59870911]
[130.47676086 192.57711792]
[133.36354065 207.29670715]
[136.25032043 222.01631165]
[139.13708496 236.73590088]
[142.96739197 251.23863220]
[147.72526550 265.46405029]
[152.48312378 279.68948364]
[157.24099731 293.91488647]
[169.87382507 304.37164307]
[166.86802673 320.49298096]
[151.31570435 325.69464111]
[139.21575928 314.62561035]
[143.01557922 298.67276001]
[138.25770569 284.44735718]
[133.49983215 270.22192383]
[128.74195862 255.99649048]
[120.68591309 268.64956665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 132]
[6 131]
[7 130]
[8 129]
[10 127]
[11 126]
[12 125]
[13 124]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[35 51]
[36 50]
[37 49]
[38 48]
[75 119]
[76 118]
[77 117]
[78 116]
[79 115]
[80 114]
[82 111]
[83 110]
[84 109]
[88 107]
[89 106]
[90 105]
[92 104]
[93 103]
[94 102]
[95 101]
[133 144]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
