%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGGAAUUUUGGCGGGUUCAGCUGUGAACGAAGAAGGCGUCCCGGCAUCGGCCAAGAUUCUACAUUGCUCAUCUGGGCAUCUGAGCCUCCUUCGAAGUUUCCUGUCACAACUGUCCUCUUGACAGC\
) } def
/len { sequence length } bind def

/coor [
[78.53778076 139.35688782]
[66.95570374 130.29299927]
[58.93028259 117.96858215]
[55.32532501 103.71014404]
[40.37978363 102.43313599]
[25.43424034 101.15612793]
[10.48869705 99.87911987]
[-4.45684576 98.60211182]
[-19.40238762 97.32510376]
[-34.34793091 96.04809570]
[-49.29347229 94.77108765]
[-64.23901367 93.49407959]
[-79.18456268 92.21707916]
[-94.13010406 90.94007111]
[-109.07564545 89.66306305]
[-123.48442078 96.19741058]
[-135.50679016 87.40467834]
[-150.45233154 86.12767029]
[-165.39787292 84.85066223]
[-170.30764771 87.16675568]
[-175.11978149 87.28309631]
[-178.98930359 85.62430573]
[-181.37434387 82.89557648]
[-196.18681335 80.53102112]
[-210.99926758 78.16646576]
[-225.81172180 75.80191040]
[-240.65904236 81.26705933]
[-252.00749207 71.62020874]
[-266.81994629 69.25565338]
[-275.89373779 71.00253296]
[-281.96252441 66.64893341]
[-296.71301270 63.92438126]
[-308.65731812 74.01732635]
[-324.29489136 74.01962280]
[-336.24215698 63.93018723]
[-338.85797119 48.51294327]
[-330.90725708 35.04743958]
[-316.14404297 29.89167595]
[-301.53912354 35.48004913]
[-293.98843384 49.17389679]
[-279.23797607 51.89844894]
[-264.45538330 54.44319153]
[-249.64294434 56.80774689]
[-235.85510254 51.17347717]
[-223.44715881 60.98945618]
[-208.63470459 63.35401154]
[-193.82225037 65.71856689]
[-179.00979614 68.08312225]
[-164.12086487 69.90512085]
[-149.17532349 71.18212891]
[-134.22978210 72.45913696]
[-120.89000702 65.83344269]
[-107.79863739 74.71751404]
[-92.85309601 75.99452209]
[-77.90755463 77.27153015]
[-62.96200943 78.54853821]
[-48.01646805 79.82554626]
[-33.07092285 81.10255432]
[-18.12538147 82.37956238]
[-3.17983794 83.65657043]
[11.76570511 84.93357849]
[26.71124840 86.21058655]
[41.65679169 87.48759460]
[56.60233307 88.76460266]
[64.65306854 72.42852783]
[78.53778076 60.64310837]
[95.96482086 55.35351181]
[114.05786133 57.43278122]
[121.07842255 44.17715073]
[128.09898376 30.92152023]
[135.11953735 17.66588974]
[142.14010620 4.41026115]
[141.00077820 -11.94926167]
[154.74826050 -20.89009857]
[169.24034119 -13.21468353]
[169.56878662 3.18117428]
[155.39573669 11.43082237]
[148.37516785 24.68645287]
[141.35461426 37.94208145]
[134.33404541 51.19771194]
[127.31349182 64.45333862]
[132.23513794 68.84735107]
[136.45852661 73.91615295]
[139.89219666 79.54996490]
[142.46176147 85.62674713]
[157.27421570 83.26219177]
[172.08666992 80.89763641]
[186.89913940 78.53308105]
[199.30708313 68.71710205]
[213.09490967 74.35137177]
[227.90736389 71.98681641]
[240.29136658 61.23653030]
[255.70300293 66.84128571]
[258.28811646 83.03540039]
[245.38735962 93.15975189]
[230.27192688 86.79927826]
[215.45945740 89.16383362]
[204.11100769 98.81068420]
[189.26368713 93.34553528]
[174.45123291 95.71009064]
[159.63877869 98.07464600]
[144.82632446 100.43920135]
[141.67240906 116.52275848]
[132.94804382 130.39767456]
[142.11564636 142.27011108]
[151.28324890 154.14256287]
[160.45085144 166.01501465]
[169.61846924 177.88746643]
[178.78607178 189.75990295]
[193.70709229 186.54653931]
[208.54269409 190.13371277]
[220.34722900 199.80923462]
[226.77693176 213.65197754]
[226.55514526 228.91348267]
[219.72593689 242.56356812]
[207.64523315 251.89198303]
[192.71166992 255.04656982]
[177.89031982 251.40098572]
[166.12396240 241.67907715]
[159.74884033 227.81111145]
[160.03070068 212.55059814]
[166.91362000 198.92750549]
[157.74601746 187.05506897]
[148.57841492 175.18261719]
[139.41079712 163.31016541]
[130.24319458 151.43772888]
[121.07559204 139.56527710]
[107.13683319 144.25671387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[17 51]
[18 50]
[19 49]
[23 48]
[24 47]
[25 46]
[26 45]
[28 43]
[29 42]
[31 41]
[32 40]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[85 102]
[86 101]
[87 100]
[88 99]
[90 97]
[91 96]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
