%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGCCCCGCCCCUGUAUCCCAAGACCCUGCCUCCUCUUGCGGUGGGGGGAAAGCGGCCUCUUACUCUAGGCCUUUCGGUUUGCGCGAGCGGGCAGGAAAGCGUGCGUGCGGCUAAGAGAGUGGGCGCUCUCGCGGCCGCUGACG\
) } def
/len { sequence length } bind def

/coor [
[91.59171295 140.75439453]
[85.96270752 154.65815735]
[80.33370209 168.56190491]
[74.70469666 182.46565247]
[69.07569122 196.36940002]
[76.56658173 210.09603882]
[73.43095398 225.41603088]
[61.14936066 235.09571838]
[45.52079773 234.56468201]
[33.92459106 224.07363892]
[31.83611488 208.57614136]
[40.24148560 195.38964844]
[55.17194366 190.74040222]
[60.80094910 176.83665466]
[66.42995453 162.93289185]
[72.05895996 149.02914429]
[77.68796539 135.12539673]
[71.85550690 130.65138245]
[66.90128326 125.22092438]
[62.97988510 119.00345612]
[60.21368027 112.19299316]
[58.68898773 105.00205231]
[58.45338058 97.65502930]
[59.51421738 90.38117981]
[61.83839035 83.40747833]
[65.35337830 76.95153809]
[69.94948578 71.21481323]
[75.48331451 66.37631226]
[68.97505951 52.86177826]
[62.46680069 39.34724426]
[55.95854568 25.83271217]
[49.45029068 12.31818008]
[42.94203186 -1.19635308]
[36.43377686 -14.71088600]
[25.89301682 -17.73551941]
[18.93065262 -25.92054367]
[17.68817520 -36.37213898]
[22.33884621 -45.56771469]
[16.41400719 -59.34799957]
[10.48916817 -73.12828827]
[4.56432867 -86.90856934]
[-1.36051059 -100.68885803]
[-7.28534985 -114.46914673]
[-49.37774277 -116.74758148]
[-60.04086304 -127.29736328]
[-70.70397949 -137.84715271]
[-81.36710358 -148.39692688]
[-92.03022003 -158.94671631]
[-102.69334412 -169.49649048]
[-113.35646057 -180.04626465]
[-124.01957703 -190.59605408]
[-139.57237244 -188.96987915]
[-152.50279236 -197.76409912]
[-156.70549011 -212.82633972]
[-150.19607544 -227.04469299]
[-136.04809570 -233.70567322]
[-120.94178772 -229.66416931]
[-112.00990295 -216.82846069]
[-113.46980286 -201.25917053]
[-102.80667877 -190.70939636]
[-92.14356232 -180.15960693]
[-81.48043823 -169.60983276]
[-70.81732178 -159.06004333]
[-60.15420151 -148.51026917]
[-49.49108124 -137.96047974]
[-38.82796478 -127.41070557]
[-31.73570442 -129.84994507]
[-17.55118752 -134.72840881]
[-10.45892906 -137.16764832]
[-8.54077148 -152.04449463]
[-6.62261391 -166.92134094]
[-4.70445633 -181.79820251]
[-2.78629899 -196.67504883]
[-0.86814147 -211.55189514]
[-7.68017864 -226.46926880]
[2.05173945 -239.66857910]
[18.31624985 -237.57150269]
[24.38181877 -222.33534241]
[14.00870895 -209.63374329]
[12.09055138 -194.75688171]
[10.17239380 -179.88003540]
[8.25423622 -165.00318909]
[6.33607912 -150.12634277]
[4.41792154 -135.24948120]
[6.49493599 -120.39398193]
[12.41977501 -106.61370087]
[18.34461403 -92.83341217]
[24.26945305 -79.05312347]
[30.19429398 -65.27284241]
[36.11913300 -51.49255371]
[52.42537689 -41.17776489]
[49.94831085 -21.21914291]
[56.45656586 -7.70460939]
[62.96482086 5.80992365]
[69.47307587 19.32445717]
[75.98133087 32.83898926]
[82.48959351 46.35352325]
[88.99784851 59.86805725]
[107.68196869 59.10247421]
[124.81479645 66.59571838]
[136.93653870 80.83460236]
[141.59933472 98.94374084]
[137.86158752 117.26618195]
[150.16416931 125.84793091]
[162.46675110 134.42967224]
[171.36376953 136.79858398]
[174.93788147 143.32859802]
[187.05426025 152.17129517]
[195.89862061 154.72978210]
[199.33236694 161.33468628]
[211.25701904 170.43428040]
[223.18167114 179.53387451]
[235.10632324 188.63348389]
[247.03097534 197.73307800]
[258.95562744 206.83267212]
[274.41528320 204.92555237]
[286.37893677 214.32371521]
[288.10180664 229.07386780]
[300.02645874 238.17347717]
[311.95111084 247.27307129]
[323.87576294 256.37268066]
[335.80041504 265.47225952]
[347.72506714 274.57186890]
[364.04992676 276.13116455]
[370.61489868 291.15890503]
[360.66650391 304.19583130]
[344.43881226 301.83068848]
[338.62545776 286.49652100]
[326.70080566 277.39691162]
[314.77615356 268.29733276]
[302.85150146 259.19772339]
[290.92684937 250.09812927]
[279.00219727 240.99851990]
[264.32046509 243.23045349]
[252.09753418 234.17204285]
[249.85603333 218.75732422]
[237.93138123 209.65773010]
[226.00672913 200.55812073]
[214.08207703 191.45852661]
[202.15742493 182.35893250]
[190.23277283 173.25933838]
[178.21156311 164.28767395]
[166.09518433 155.44497681]
[153.88499451 146.73226929]
[141.58241272 138.15051270]
[129.27983093 129.56875610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[103 146]
[104 145]
[105 144]
[107 143]
[108 142]
[110 141]
[111 140]
[112 139]
[113 138]
[114 137]
[115 136]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
