%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCACUCAGCCCGGCCCGCCGGUCGCCACAGCAACACCAAUCCCGGGUUCAAGCCCGCCUAGGAAGUGCGGUCCCCGCCUGACCGCCCCGGGCUUAAGGGAGCCUGGCUAGGCCGGCAGCCGGAUGGUCCCGCAGCUCGGGGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[112.37873840 145.07611084]
[110.84144592 130.15509033]
[109.30415344 115.23407745]
[101.84364319 116.00272369]
[96.42501831 129.98980713]
[104.12212372 143.60188293]
[101.21795654 158.96742249]
[89.08378601 168.83128357]
[73.44898987 168.53607178]
[61.69584274 158.22114563]
[59.37382126 142.75692749]
[67.57931519 129.44512939]
[82.43793488 124.57118225]
[87.85655975 110.58409882]
[88.93363190 95.62281799]
[85.57437134 81.00380707]
[82.21511841 66.38480377]
[78.85585785 51.76579666]
[75.49659729 37.14678955]
[64.97167969 29.62151527]
[62.49995422 17.33079147]
[68.87638855 7.00590563]
[65.81799316 -7.67899227]
[62.75960159 -22.36388969]
[59.70120621 -37.04878616]
[56.64281082 -51.73368454]
[53.58441162 -66.41857910]
[50.52601624 -81.10347748]
[37.85450363 -89.13047791]
[23.27075195 -85.62130737]
[11.76016140 -73.94062805]
[-4.04062891 -78.33005524]
[-7.87711859 -94.27412415]
[4.19734287 -105.37094879]
[19.76158524 -100.20506287]
[34.34533310 -103.71422577]
[19.70557022 -100.44661713]
[5.29895592 -104.62387085]
[-5.32212925 -115.21597290]
[-9.53874302 -129.61111450]
[-6.31115341 -144.25975037]
[3.56478095 -155.54983521]
[17.65385628 -160.69744873]
[32.48199463 -158.43330383]
[44.39287567 -149.31570435]
[50.44952393 -135.59283447]
[49.15889359 -120.64965057]
[50.69618607 -135.57066345]
[52.23347855 -150.49168396]
[53.77077103 -165.41268921]
[55.30806351 -180.33370972]
[56.84535599 -195.25473022]
[58.38264847 -210.17575073]
[59.91994095 -225.09675598]
[60.84335327 -240.06831360]
[61.15133286 -255.06515503]
[61.45930862 -270.06198120]
[61.76728821 -285.05883789]
[62.07526398 -300.05566406]
[62.38324356 -315.05249023]
[62.69121933 -330.04934692]
[49.65833664 -338.05502319]
[42.43019867 -351.42108154]
[42.85993195 -366.51019287]
[50.73202896 -379.27288818]
[63.84709549 -386.33407593]
[64.15507507 -401.33093262]
[54.89689636 -417.21539307]
[64.48753357 -431.88046265]
[64.48753357 -446.88046265]
[61.34260941 -455.52368164]
[64.64469147 -462.18765259]
[64.95266724 -477.18450928]
[65.26064301 -492.18133545]
[65.56862640 -507.17816162]
[59.84876633 -523.13812256]
[73.60156250 -533.05261230]
[86.93572998 -522.58184814]
[80.56546021 -506.87020874]
[80.25748444 -491.87335205]
[79.94950867 -476.87652588]
[79.64152527 -461.87966919]
[79.48753357 -446.88046265]
[79.48753357 -431.88046265]
[87.83518982 -423.07260132]
[87.92138672 -410.53610229]
[79.15190887 -401.02294922]
[78.84393311 -386.02609253]
[91.65804291 -378.43240356]
[98.99952698 -365.35729980]
[98.80941772 -350.26324463]
[91.03862762 -337.20523071]
[77.68805695 -329.74136353]
[77.38008118 -314.74453735]
[77.07210541 -299.74768066]
[76.76412201 -284.75085449]
[76.45614624 -269.75399780]
[76.14817047 -254.75717163]
[75.84019470 -239.76033020]
[77.74721527 -237.62625122]
[78.89663696 -234.58518982]
[78.92988586 -230.93202209]
[77.60551453 -227.08889771]
[74.84095764 -223.55946350]
[73.30366516 -208.63845825]
[71.76637268 -193.71743774]
[70.22908020 -178.79641724]
[68.69178772 -163.87539673]
[67.15449524 -148.95439148]
[65.61720276 -134.03337097]
[64.07991028 -119.11235809]
[71.06638336 -112.63307190]
[74.21067810 -103.09233093]
[72.25946808 -92.71128845]
[65.21091461 -84.16187286]
[68.26931000 -69.47697449]
[71.32770538 -54.79207993]
[74.38610077 -40.10718155]
[77.44449615 -25.42228508]
[80.50289154 -10.73738766]
[83.56128693 3.94751000]
[95.94055939 16.34904861]
[90.11560822 33.78752899]
[93.47486115 48.40653610]
[96.83412170 63.02554321]
[100.19338226 77.64455414]
[103.55264282 92.26355743]
[115.36627197 86.40205383]
[130.98890686 90.12351990]
[144.27412415 104.77146912]
[152.43078613 117.35990906]
[160.58744812 129.94834900]
[168.74411011 142.53678894]
[176.90078735 155.12522888]
[185.05744934 167.71366882]
[193.21411133 180.30210876]
[208.53962708 185.04641724]
[214.25125122 200.03829956]
[205.96754456 213.77728271]
[190.04304504 215.72398376]
[178.69366455 204.38507080]
[180.62567139 188.45877075]
[172.46900940 175.87033081]
[164.31234741 163.28189087]
[156.15567017 150.69345093]
[147.99900818 138.10501099]
[139.84234619 125.51657867]
[131.68568420 112.92813873]
[124.22517395 113.69678497]
[125.76246643 128.61779785]
[127.29975891 143.53881836]
[128.83682251 158.45985413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[15 127]
[16 126]
[17 125]
[18 124]
[19 123]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[28 115]
[29 36]
[30 35]
[47 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[66 88]
[67 87]
[69 84]
[70 83]
[72 82]
[73 81]
[74 80]
[75 79]
[130 148]
[131 147]
[132 146]
[133 145]
[134 144]
[135 143]
[136 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
