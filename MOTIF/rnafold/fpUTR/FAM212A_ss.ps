%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGCUACGGAGAGCGAGGAGUCGCGCAGGCAGGCGGAGGCUGAGGGCGCCGCUGGCCGGCCCUCCCAGCCCUCUCCGCGCGGCUCCGCCGGGGUUCCAAGAGGAGCUAGUAGGUUCGGUGGGGGCCCUGGC\
) } def
/len { sequence length } bind def

/coor [
[302.57839966 223.62799072]
[298.95343018 217.91828918]
[286.08184814 210.21617126]
[273.21026611 202.51405334]
[260.33871460 194.81195068]
[247.46713257 187.10983276]
[234.59555054 179.40771484]
[215.35218811 180.61657715]
[205.62838745 163.02906799]
[192.40994263 155.93873596]
[179.19149780 148.84840393]
[165.97305298 141.75808716]
[152.75460815 134.66775513]
[139.53616333 127.57743073]
[126.15514374 120.79892731]
[112.61888885 114.33596802]
[98.92393494 119.06825256]
[85.84834290 112.82524872]
[80.91815948 99.20028687]
[67.38190460 92.73732758]
[53.84564590 86.27437592]
[40.30939102 79.81141663]
[31.76812172 84.18404388]
[22.31173897 84.07993317]
[14.11262989 79.65185547]
[8.99445057 72.03115845]
[8.02691746 63.04167175]
[-5.02167845 55.64341736]
[-20.84270287 55.56766510]
[-28.09807205 42.55963516]
[-41.14666748 35.16138077]
[-54.19526291 27.76312828]
[-70.01628876 27.68737602]
[-77.27165222 14.67934418]
[-90.32025146 7.28109074]
[-103.36884308 -0.11716271]
[-116.41744232 -7.51541615]
[-129.46603394 -14.91366959]
[-142.14567566 -12.23635578]
[-152.88632202 -18.74172211]
[-156.16886902 -30.44514847]
[-169.04043579 -38.14726257]
[-181.91201782 -45.84937286]
[-198.60829163 -48.79396439]
[-200.40077209 -65.65289307]
[-184.69689941 -72.04232788]
[-174.20989990 -58.72095108]
[-161.33833313 -51.01883698]
[-148.46675110 -43.31672287]
[-130.97227478 -44.03075409]
[-122.06778717 -27.96226501]
[-109.01918793 -20.56401253]
[-95.97059631 -13.16575813]
[-82.92199707 -5.76750469]
[-69.87340546 1.63074851]
[-54.98569870 1.17732716]
[-46.79700851 14.71453190]
[-33.74841309 22.11278534]
[-20.69981766 29.51103973]
[-5.81211567 29.05761719]
[2.37657499 42.59482193]
[15.42517090 49.99307632]
[35.90396881 47.87840271]
[46.77235031 66.27516174]
[60.30860519 72.73812103]
[73.84485626 79.20107269]
[87.38111115 85.66403198]
[101.07606506 80.93174744]
[114.15165710 87.17475128]
[119.08184052 100.79971313]
[132.61810303 107.26267242]
[139.37991333 107.12440491]
[144.39535522 110.03993988]
[146.62649536 114.35898590]
[159.84494019 121.44931030]
[173.06338501 128.53964233]
[186.28182983 135.62997437]
[199.50027466 142.72029114]
[212.71871948 149.81062317]
[223.04675293 146.04055786]
[233.51771545 148.57728577]
[240.67550659 156.33190918]
[242.29766846 166.53614807]
[255.16923523 174.23825073]
[268.04080200 181.94036865]
[280.91238403 189.64248657]
[293.78396606 197.34458923]
[306.65554810 205.04670715]
[319.70413208 212.44496155]
[332.92257690 219.53529358]
[346.14102173 226.62561035]
[359.35946655 233.71594238]
[372.57791138 240.80627441]
[385.79635620 247.89659119]
[399.01480103 254.98692322]
[412.23324585 262.07723999]
[425.45169067 269.16757202]
[438.67013550 276.25790405]
[451.88858032 283.34823608]
[463.42593384 275.34985352]
[477.22137451 273.13354492]
[490.55618286 277.07800293]
[500.82757568 286.35345459]
[506.05648804 299.09555054]
[505.26898193 312.77984619]
[518.31756592 320.17810059]
[531.36621094 327.57635498]
[544.41479492 334.97460938]
[557.46337891 342.37286377]
[573.84887695 341.70370483]
[582.39129639 355.70220947]
[574.30297852 369.96795654]
[557.90441895 369.82550049]
[550.06512451 355.42144775]
[537.01654053 348.02319336]
[523.96795654 340.62493896]
[510.91934204 333.22668457]
[497.87072754 325.82843018]
[484.18939209 334.34564209]
[467.98721313 334.83078003]
[453.65628052 327.05819702]
[445.12878418 313.05352783]
[444.79824829 296.56668091]
[431.57980347 289.47634888]
[418.36135864 282.38601685]
[405.14291382 275.29568481]
[391.92446899 268.20538330]
[378.70602417 261.11505127]
[365.48757935 254.02471924]
[352.26913452 246.93438721]
[339.05068970 239.84405518]
[325.83224487 232.75373840]
[312.61380005 225.66340637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[7 83]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 71]
[16 70]
[19 67]
[20 66]
[21 65]
[22 64]
[27 62]
[28 61]
[30 59]
[31 58]
[32 57]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[41 49]
[42 48]
[43 47]
[89 133]
[90 132]
[91 131]
[92 130]
[93 129]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[99 123]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
