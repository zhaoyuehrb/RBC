%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCGUUUUCGCCCGCUUCCGCUCUCUGGCCGGGCUUGGGCUGCGUGGAGAAUACUUUUUGCG\
) } def
/len { sequence length } bind def

/coor [
[168.76408386 305.17578125]
[174.07208252 290.95645142]
[184.16117859 279.61737061]
[177.28778076 266.28485107]
[170.41438293 252.95230103]
[163.54098511 239.61978149]
[148.66897583 240.94352722]
[134.38447571 236.46038818]
[122.87355804 226.82380676]
[115.91029358 213.47837830]
[114.58338928 198.44331360]
[119.12606049 184.00700378]
[128.87577820 172.37864685]
[122.00238037 159.04611206]
[115.12898254 145.71357727]
[108.25558472 132.38104248]
[101.38218689 119.04851532]
[87.61299133 114.53678894]
[80.97351074 101.65798950]
[85.28528595 87.82488251]
[78.41188812 74.49235535]
[71.53849030 61.15982056]
[64.66509247 47.82728958]
[57.47635651 34.66210556]
[49.97635651 21.67172432]
[35.51146698 13.94520855]
[35.24089050 -2.45170665]
[49.44296646 -10.65128040]
[63.50782394 -2.21849442]
[62.96673584 14.17172432]
[70.46673584 27.16210556]
[76.76199341 31.53229904]
[77.99761963 40.95389175]
[84.87101746 54.28642273]
[91.74441528 67.61895752]
[98.61781311 80.95148468]
[112.38700867 85.46321106]
[119.02648926 98.34201050]
[114.71471405 112.17511749]
[121.58811188 125.50764465]
[128.46151733 138.84017944]
[135.33491516 152.17271423]
[142.20831299 165.50524902]
[157.33587646 164.30847168]
[171.73036194 168.98200989]
[183.20787048 178.78405762]
[190.03965759 192.19728088]
[191.21240234 207.16355896]
[186.57843018 221.39984131]
[176.87351990 232.74638367]
[183.74691772 246.07890320]
[190.62031555 259.41143799]
[197.49371338 272.74395752]
[212.58250427 271.10293579]
[227.24417114 275.02719116]
[239.49586487 283.98602295]
[247.68061829 296.76782227]
[250.69152832 311.64392090]
[248.12139893 326.60250854]
[240.31781006 339.62051392]
[228.33613586 348.93737793]
[213.79678345 353.29306030]
[198.66610718 352.09848022]
[184.99038696 345.51522827]
[174.61917114 334.43362427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 53]
[4 52]
[5 51]
[6 50]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[20 36]
[21 35]
[22 34]
[23 33]
[24 31]
[25 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
