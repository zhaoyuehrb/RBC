%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGGCAGCCAGCGAGGGAGAGAGCGAGCGGGCGAGCCGGAGCGAGGAAGGGAAAGCGCAAGAGAGAGCGCACACGCACACACCCGCCGCGCGCACUCGCGCACGGACCCGCACGGGGACAGCUCGGAAGUCAUCAGUUCCAUGGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[59.50603104 675.93994141]
[45.14755630 681.11651611]
[29.96586609 679.54199219]
[16.97529984 671.52899170]
[8.75514030 658.66851807]
[6.93750715 643.51403809]
[11.88329315 629.07440186]
[22.61050797 618.21673584]
[36.98925781 613.09674072]
[38.53662491 598.17675781]
[40.08399582 583.25677490]
[37.78078461 579.00738525]
[38.16696548 573.25756836]
[42.01607513 567.75671387]
[44.17869186 552.91345215]
[38.35717773 539.20361328]
[48.00326920 526.66314697]
[50.16588593 511.81985474]
[52.32850266 496.97659302]
[54.49111938 482.13330078]
[45.40938187 470.38351440]
[47.39113617 455.29949951]
[59.77697754 445.85339355]
[61.93959427 431.01010132]
[63.79498291 416.12530518]
[65.34235382 401.20532227]
[54.15487289 391.40847778]
[50.84220505 376.72888184]
[56.87919617 362.75006104]
[70.14309692 354.91583252]
[71.69046783 339.99584961]
[73.23783875 325.07586670]
[74.78520966 310.15591431]
[76.33258057 295.23593140]
[62.67737961 284.11633301]
[58.34610748 266.88601685]
[65.24034119 250.34225464]
[80.79479980 241.12721252]
[81.72428131 226.15603638]
[82.65376282 211.18486023]
[74.86753082 201.87576294]
[75.55926514 189.35711670]
[84.90314484 180.40611267]
[86.14183044 165.45733643]
[87.38052368 150.50857544]
[84.78214264 143.53883362]
[88.80242157 135.26472473]
[90.34979248 120.34474945]
[79.67414093 109.68993378]
[78.11821747 94.68747711]
[86.38012695 82.06862640]
[81.80387878 67.78373718]
[77.22763062 53.49885178]
[55.40896225 48.43761826]
[40.96840668 31.47922897]
[39.46558762 9.38092136]
[51.34317398 -9.16697598]
[44.47813034 -22.50380898]
[37.61308289 -35.84064484]
[30.74803734 -49.17747879]
[15.39216042 -51.40832901]
[4.30378151 -62.26316452]
[1.74660730 -77.56807709]
[8.70392418 -91.43802643]
[22.50050163 -98.53971863]
[37.83127213 -96.14241791]
[48.80124664 -85.16793823]
[51.19224167 -69.83618164]
[44.08486938 -56.04252243]
[50.94991684 -42.70568848]
[57.81496429 -29.36885643]
[64.68000793 -16.03202248]
[72.98866272 -17.26641083]
[81.36831665 -16.48855019]
[89.33772278 -13.73555183]
[96.43740082 -9.15817928]
[102.25611115 -3.01260400]
[106.45470428 4.35391521]
[108.78585815 12.52265453]
[109.10865021 21.02722359]
[107.39703369 29.38018799]
[103.74179840 37.10101700]
[98.34576416 43.74372101]
[91.51251984 48.92260742]
[96.08876801 63.20749283]
[100.66500854 77.49237823]
[106.42504120 78.41866302]
[111.75377655 80.79364777]
[123.39794922 71.33779144]
[135.04211426 61.88192749]
[140.87736511 47.17613220]
[155.63479614 45.15927505]
[167.27896118 35.70341873]
[178.92314148 26.24755859]
[190.56730652 16.79169846]
[195.91453552 1.28882182]
[212.06332397 -1.56572282]
[222.40119934 11.16457558]
[216.29342651 26.38387871]
[200.02316284 28.43587112]
[188.37899780 37.89173126]
[176.73481750 47.34758759]
[165.09065247 56.80344772]
[160.08827209 70.83290100]
[144.49798584 73.52610016]
[132.85380554 82.98195648]
[121.20963287 92.43782043]
[119.80349731 110.71711731]
[105.26976776 121.89212036]
[103.72239685 136.81208801]
[102.32929230 151.74725342]
[101.09059906 166.69602966]
[99.85191345 181.64479065]
[108.10604095 198.07266235]
[97.62493134 212.11433411]
[96.69544983 227.08551025]
[95.76596832 242.05668640]
[106.42682648 248.72151184]
[113.18176270 259.23953247]
[114.78919220 271.56301880]
[111.00258636 283.32394409]
[102.60597992 292.28890991]
[91.25255585 296.78329468]
[89.70518494 311.70327759]
[88.15781403 326.62326050]
[86.61044312 341.54321289]
[85.06307220 356.46319580]
[96.43697357 366.85263062]
[99.47680664 381.77285767]
[93.22216797 395.46020508]
[80.26232910 402.75271606]
[78.71495819 417.67266846]
[81.09590912 423.95010376]
[80.05877686 429.61874390]
[76.78287506 433.17272949]
[74.62026215 448.01602173]
[83.79588318 460.60354614]
[81.39122772 475.62594604]
[69.33440399 484.29589844]
[67.17179108 499.13919067]
[65.00917053 513.98248291]
[62.84655380 528.82574463]
[68.51338959 543.59729004]
[59.02197647 555.07604980]
[56.85935974 569.91937256]
[55.00397110 584.80413818]
[53.45660019 599.72412109]
[51.90922928 614.64410400]
[64.93125153 622.60589600]
[73.20199585 635.43389893]
[75.07929230 650.58111572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 148]
[10 147]
[11 146]
[14 145]
[15 144]
[17 142]
[18 141]
[19 140]
[20 139]
[23 136]
[24 135]
[25 132]
[26 131]
[30 127]
[31 126]
[32 125]
[33 124]
[34 123]
[38 117]
[39 116]
[40 115]
[43 113]
[44 112]
[45 111]
[47 110]
[48 109]
[51 86]
[52 85]
[53 84]
[57 72]
[58 71]
[59 70]
[60 69]
[88 107]
[89 106]
[90 105]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
