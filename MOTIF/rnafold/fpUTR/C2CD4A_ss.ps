%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGUGCUGAACCCCGCCGCGCGCGCUUUGAAUUUCCCAGCCGCUAAGCGCCUCUCCUGGUCGGUGUCCCAGGCAGAAAGGUGCAGAGACCCAUCUGACGCAGGACUCCAGGUAGACAAGCUCCAGCAGAGAGUGGCCAG\
) } def
/len { sequence length } bind def

/coor [
[92.28886414 213.40734863]
[85.56024170 219.25442505]
[77.32115936 222.54112244]
[68.50286865 222.92700195]
[62.68605804 236.75323486]
[56.86924744 250.57946777]
[61.57076263 265.91815186]
[52.39130402 279.07553101]
[36.37256241 279.95843506]
[25.80274773 267.88952637]
[28.79011536 252.12704468]
[43.04301453 244.76264954]
[48.85982513 230.93641663]
[54.67663956 217.11018372]
[44.74181366 198.40133667]
[51.77099991 178.12336731]
[71.66349792 169.35217285]
[75.91842651 154.96830750]
[80.17335510 140.58444214]
[84.42827606 126.20057678]
[88.68320465 111.81671143]
[83.06891632 105.63320923]
[80.93570709 96.83300018]
[83.44091034 87.40045929]
[68.53259277 85.74454498]
[53.62427521 84.08863831]
[38.71595764 82.43272400]
[23.80763817 80.77681732]
[8.89931870 79.12091064]
[2.45095325 92.82117462]
[-8.09828091 103.68360138]
[-21.60408211 110.52992249]
[-36.60144043 112.61749268]
[-51.46355820 109.71986389]
[-64.57830048 102.15135956]
[-74.52307892 90.73294830]
[-80.21915436 76.70321655]
[-81.04866791 61.58400345]
[-76.92163849 47.01532745]
[-68.28572845 34.57748795]
[-56.07770157 25.61965370]
[-41.62179184 21.11350060]
[-26.48607063 21.54782295]
[-12.31234455 26.87550735]
[-0.63807583 36.51864624]
[7.27039957 49.43122864]
[10.55522919 64.21258545]
[25.46354675 65.86849976]
[40.37186432 67.52440643]
[55.28018570 69.18032074]
[70.18849945 70.83622742]
[85.09682465 72.49214172]
[99.61394501 68.71680450]
[111.82675171 60.00776291]
[124.03955078 51.29872131]
[136.25234985 42.58967590]
[142.99597168 28.27764893]
[157.85064697 27.18776703]
[170.06346130 18.47872353]
[182.27626038 9.76968002]
[194.48905945 1.06063688]
[193.12718201 -14.17394638]
[199.53137207 -27.95375252]
[211.89091492 -36.62025070]
[226.82897949 -37.92792511]
[240.32502747 -31.62533569]
[252.53782654 -40.33438110]
[264.75064087 -49.04342270]
[276.96343994 -57.75246429]
[288.98059082 -66.72955322]
[300.79620361 -75.97028351]
[306.90014648 -90.56659698]
[321.69207764 -92.31248474]
[333.50769043 -101.55321503]
[338.38961792 -109.36928558]
[345.68847656 -110.86421204]
[357.70562744 -119.84130096]
[356.00704956 -135.04202271]
[362.10482788 -148.96012878]
[374.26962280 -157.89793396]
[389.17510986 -159.53575134]
[402.80728149 -153.53326416]
[414.82443237 -162.51034546]
[426.84158325 -171.48742676]
[438.75869751 -180.59689331]
[450.57431030 -189.83763123]
[462.38992310 -199.07835388]
[474.20556641 -208.31909180]
[475.87487793 -224.03497314]
[488.22039795 -233.90226746]
[503.91775513 -232.06687927]
[513.65399170 -219.61770630]
[511.65274048 -203.94064331]
[499.10131836 -194.33659363]
[483.44628906 -196.50347900]
[471.63067627 -187.26274109]
[459.81506348 -178.02200317]
[447.99942017 -168.78128052]
[444.64181519 -162.13037109]
[435.81866455 -159.47027588]
[423.80151367 -150.49319458]
[411.78436279 -141.51611328]
[413.67337036 -126.74122620]
[407.87472534 -112.91257477]
[395.85336304 -103.78276825]
[380.77722168 -101.88348389]
[366.68270874 -107.82415009]
[354.66555786 -98.84706116]
[342.74844360 -89.73759460]
[330.93280029 -80.49686432]
[325.67401123 -66.56150818]
[310.03692627 -64.15466309]
[298.22131348 -54.91393280]
[296.75988770 -50.29141617]
[292.33282471 -46.57072830]
[285.67248535 -45.53966141]
[273.45968628 -36.83061981]
[261.24685669 -28.12157631]
[249.03407288 -19.41253281]
[250.59576416 -4.59947443]
[244.49259949 9.09751225]
[232.27221680 17.95914650]
[217.15776062 19.52445221]
[203.19810486 13.27344036]
[190.98530579 21.98248291]
[178.77250671 30.69152641]
[166.55969238 39.40056992]
[160.68962097 53.08966827]
[144.96139526 54.80248260]
[132.74859619 63.51152420]
[120.53578949 72.22056580]
[108.32299042 80.92961121]
[118.46923828 102.06739044]
[103.06707001 116.07164001]
[98.81214905 130.45550537]
[94.55722046 144.83937073]
[90.30229187 159.22323608]
[86.04736328 173.60710144]
[92.74848938 179.81217957]
[97.00980377 187.84042358]
[98.38063812 196.78129578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[53 132]
[54 131]
[55 130]
[56 129]
[58 127]
[59 126]
[60 125]
[61 124]
[66 119]
[67 118]
[68 117]
[69 116]
[70 113]
[71 112]
[73 110]
[74 109]
[76 108]
[77 107]
[82 102]
[83 101]
[84 100]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
