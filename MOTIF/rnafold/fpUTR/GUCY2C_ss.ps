%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAGAGAGAAGCGUGGGGAAGAGUGGGCUGAGGGACUCCACUAGAGGCUGUCCAUCUGGAUUCCCUGCCUCCCUAGGAGCCCAACAGAGCAAAGCAAGUGGGCACAAGGAGUAUGGUUCUAACGUGAUUGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[67.14665222 310.95504761]
[67.14665222 295.95504761]
[67.14665222 280.95504761]
[67.14665222 265.95504761]
[56.81755829 258.16870117]
[52.82508469 245.66017151]
[56.85102463 232.95753479]
[67.63078308 224.79664612]
[67.97222900 209.80053711]
[57.82305527 201.78108215]
[54.11634827 189.18492126]
[58.43039703 176.57720947]
[69.39312744 168.66381836]
[70.07585144 153.67936707]
[70.75856781 138.69491577]
[71.44128418 123.71045685]
[64.38916779 110.47158813]
[51.57287598 102.67782593]
[38.75658417 94.88407135]
[25.94029236 87.09030914]
[13.12400150 79.29654694]
[15.04897785 94.17251587]
[6.05882788 106.17990112]
[-8.75727272 108.52151489]
[-21.01217461 99.87181091]
[-23.76858139 85.12724304]
[-15.46613503 72.63446808]
[-0.80310714 69.46572113]
[-12.43877697 59.99940491]
[-24.07444572 50.53308487]
[-30.66712570 49.07912445]
[-34.85242844 45.07552338]
[-36.01139832 40.36143875]
[-47.20415497 30.37533760]
[-58.39691162 20.38923645]
[-69.58966827 10.40313435]
[-80.78241730 0.41703230]
[-96.23091125 -2.99684882]
[-100.57676697 -17.24335098]
[-111.76952362 -27.22945404]
[-122.96228027 -37.21555710]
[-134.15502930 -47.20165634]
[-139.43769836 -48.28805542]
[-143.33973694 -51.05680084]
[-145.44549561 -54.67621231]
[-145.74085999 -58.27163696]
[-156.22605896 -68.99828339]
[-166.83265686 -79.60488129]
[-177.55929565 -90.09007263]
[-193.57237244 -93.62748718]
[-198.25675964 -109.34335327]
[-186.79354858 -121.07054138]
[-170.97511292 -116.74511719]
[-167.07411194 -100.81671143]
[-156.34747314 -90.33152771]
[-149.30482483 -87.88437653]
[-145.49940491 -79.48346710]
[-135.01422119 -68.75682831]
[-124.16893005 -58.39441299]
[-112.97617340 -48.40830994]
[-101.78341675 -38.42220688]
[-90.59066772 -28.43610764]
[-75.94274902 -25.73649788]
[-70.79631805 -10.77572346]
[-59.60356140 -0.78962117]
[-48.41080856 9.19648075]
[-37.21805191 19.18258286]
[-26.02529716 29.16868401]
[-14.60812664 38.89741516]
[-2.97245741 48.36373520]
[8.66321182 57.83005524]
[20.91776085 66.48025513]
[33.73405075 74.27401733]
[46.55034256 82.06777954]
[59.36663437 89.86153412]
[72.18292236 97.65529633]
[74.38072205 85.07746887]
[82.28026581 74.10043335]
[94.83283997 67.29177094]
[109.85282135 66.57537079]
[124.39360046 72.74202728]
[137.71188354 65.84104919]
[151.03015137 58.94007492]
[164.34843445 52.03910065]
[177.66671753 45.13812256]
[177.90441895 32.54155731]
[183.47434998 21.32174683]
[193.25076294 13.60690022]
[205.31678772 10.83067513]
[217.34011841 13.46606922]
[227.02388000 20.94614029]
[240.64244080 14.65849209]
[252.48838806 2.52959919]
[267.42254639 10.55498409]
[263.84500122 27.12717247]
[246.93008423 28.27706337]
[233.31152344 34.56471252]
[230.73667908 51.96688461]
[218.16671753 64.49601746]
[200.44721985 67.05899048]
[184.56768799 58.45640182]
[171.24940491 65.35737610]
[157.93113708 72.25835419]
[144.61285400 79.15933228]
[131.29457092 86.06030273]
[131.03851318 93.55593109]
[143.76527405 101.49504089]
[130.52639771 108.54718781]
[130.27033997 116.04281616]
[143.08662415 123.83657837]
[155.90292358 131.63034058]
[168.71920776 139.42408752]
[184.01286316 135.43916321]
[197.60241699 143.50759888]
[201.42543030 158.84252930]
[193.21377563 172.34600830]
[177.83929443 176.00668335]
[164.42337036 167.65272522]
[160.92546082 152.24038696]
[148.10916138 144.44662476]
[135.29287720 136.65286255]
[122.47657776 128.85910034]
[102.47901154 132.15208435]
[86.42574310 124.39317322]
[85.74302673 139.37762451]
[85.06030273 154.36207581]
[84.37758636 169.34654236]
[96.39521027 182.00175476]
[95.60089111 199.09886169]
[82.96834564 210.14198303]
[82.62689209 225.13809204]
[94.92948151 237.51647949]
[94.52455139 254.62722778]
[82.14665222 265.95504761]
[82.14665222 280.95504761]
[82.14665222 295.95504761]
[82.14665222 310.95504761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[3 135]
[4 134]
[8 131]
[9 130]
[13 127]
[14 126]
[15 125]
[16 124]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[28 71]
[29 70]
[30 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[39 62]
[40 61]
[41 60]
[42 59]
[46 58]
[47 57]
[48 55]
[49 54]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[91 97]
[92 96]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
