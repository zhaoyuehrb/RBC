%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGAGCCGCGGCCGGCGCCGCUGCAGAGCCGAGCGAAUCCCGAGCCCGGGCAGCAGGGCACUAUAUUUGUAUGUGUCUUGUAGAACCCACGCUUGGAAAUGCUGACAGCAGGCUUCAGGACAGCUGAGCCCCACUAAACACCAAGAAAACCC\
) } def
/len { sequence length } bind def

/coor [
[103.39479065 148.71740723]
[102.84266663 133.72756958]
[96.14069366 147.14709473]
[89.43871307 160.56660461]
[82.73673248 173.98612976]
[87.50911713 188.81387329]
[80.52119446 202.32771301]
[66.35578918 206.78607178]
[59.65381241 220.20558167]
[61.18352890 236.53323364]
[47.65349197 245.79985046]
[32.98224640 238.47273254]
[32.26231384 222.08940125]
[46.23429489 213.50361633]
[52.93627167 200.08409119]
[47.99071884 186.08132935]
[54.59630966 172.37655640]
[69.31721497 167.28414917]
[76.01919556 153.86463928]
[82.72116852 140.44511414]
[89.42314911 127.02559662]
[75.90047455 105.24026489]
[85.41717529 85.87258148]
[79.26098633 72.19408417]
[73.10478973 58.51558685]
[66.94860077 44.83708954]
[60.65499115 31.22126961]
[54.22460175 17.66951370]
[47.79421616 4.11775732]
[28.57118607 -1.53904569]
[19.75736237 -19.19675636]
[26.57883263 -37.39244843]
[19.34194183 -50.53122330]
[12.10505104 -63.66999817]
[4.86815977 -76.80877686]
[-2.36873150 -89.94754791]
[-9.60562325 -103.08632660]
[-16.84251404 -116.22509766]
[-38.29081726 -114.92381287]
[-57.52729797 -124.30609894]
[-69.61015320 -141.86840820]
[-71.48130035 -163.01799011]
[-85.61080933 -168.05355835]
[-99.74031830 -173.08912659]
[-113.86982727 -178.12469482]
[-129.89404297 -174.63804626]
[-140.72395325 -186.95246887]
[-135.21868896 -202.39993286]
[-119.04158783 -205.08941650]
[-108.83426666 -192.25419617]
[-94.70475006 -187.21862793]
[-80.57524109 -182.18307495]
[-66.44573212 -177.14750671]
[-62.09841919 -183.31370544]
[-56.71012878 -188.59455872]
[-50.45763016 -192.81681824]
[-55.20765305 -207.04487610]
[-59.95767212 -221.27291870]
[-64.70769501 -235.50096130]
[-69.45771027 -249.72900391]
[-74.20773315 -263.95706177]
[-78.95774841 -278.18511963]
[-83.70777130 -292.41314697]
[-88.45779419 -306.64120483]
[-93.35083008 -320.82070923]
[-98.38639832 -334.95019531]
[-103.42196655 -349.07971191]
[-116.25717926 -359.28704834]
[-113.56769562 -375.46414185]
[-98.12023926 -380.96942139]
[-85.80581665 -370.13949585]
[-89.29245758 -354.11529541]
[-84.25688934 -339.98577881]
[-79.22132111 -325.85626221]
[-73.98336792 -320.58108521]
[-74.22974396 -311.39120483]
[-69.47972107 -297.16317749]
[-64.72970581 -282.93511963]
[-59.97968292 -268.70709229]
[-55.22966385 -254.47903442]
[-50.47964478 -240.25099182]
[-45.72962570 -226.02293396]
[-40.97960663 -211.79489136]
[-36.22958374 -197.56684875]
[-24.22212601 -197.60038757]
[-12.68259621 -194.20411682]
[-2.57172871 -187.64805603]
[5.26506042 -178.46583557]
[10.16836166 -167.41122437]
[11.72024155 -155.39634705]
[9.77984428 -143.41636658]
[4.49607658 -132.46702576]
[-3.70373917 -123.46199036]
[3.53315210 -110.32321930]
[10.77004337 -97.18444061]
[18.00693512 -84.04566956]
[25.24382591 -70.90689087]
[32.48071671 -57.76811600]
[39.71760941 -44.62934113]
[50.08051300 -44.52630234]
[59.52615356 -40.06902695]
[66.29830170 -32.01138687]
[69.10670471 -21.78329659]
[67.37248993 -11.23721027]
[61.34597015 -2.31263089]
[67.77635956 11.23912525]
[74.20674896 24.79088211]
[79.94844818 29.51280594]
[80.62709808 38.68089676]
[86.78329468 52.35939407]
[92.93948364 66.03788757]
[99.09567261 79.71639252]
[119.90333557 85.43618011]
[127.24269867 110.00439453]
[141.73158264 113.88668060]
[156.22047424 117.76896667]
[170.70936584 121.65125275]
[179.86758423 120.85045624]
[185.44940186 125.76034546]
[199.85717773 129.93360901]
[214.26493835 134.10687256]
[228.95451355 127.65735626]
[243.08813477 135.24815369]
[245.82369995 151.05625916]
[235.06272888 162.95504761]
[219.06010437 161.81677246]
[210.09167480 148.51464844]
[195.68391418 144.34138489]
[181.27613831 140.16812134]
[166.82707214 136.14013672]
[152.33819580 132.25785828]
[137.84930420 128.37556458]
[123.36041260 124.49328613]
[134.21434021 134.84664917]
[145.06826782 145.20002747]
[155.92219543 155.55339050]
[166.77612305 165.90675354]
[180.45864868 172.05401611]
[191.84078979 181.82368469]
[199.99107361 194.41625977]
[204.24247742 208.80117798]
[204.24707031 223.80117798]
[200.00448608 238.18869019]
[191.86192322 250.78625488]
[180.48576355 260.56289673]
[166.80700684 266.71853638]
[151.94512939 268.74938965]
[137.11637878 266.48922729]
[123.53433228 260.12304688]
[112.31053162 250.17185974]
[104.36351776 237.45002747]
[100.34365845 222.99871826]
[100.57993317 208.00057983]
[105.05115509 193.68692017]
[104.49903107 178.69708252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[8 15]
[9 14]
[23 112]
[24 111]
[25 110]
[26 109]
[27 107]
[28 106]
[29 105]
[32 99]
[33 98]
[34 97]
[35 96]
[36 95]
[37 94]
[38 93]
[42 53]
[43 52]
[44 51]
[45 50]
[56 84]
[57 83]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 74]
[66 73]
[67 72]
[114 133]
[115 132]
[116 131]
[117 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
