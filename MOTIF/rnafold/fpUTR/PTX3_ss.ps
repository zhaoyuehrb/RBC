%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUCCCCAUUCAGGCUUUCCUCAGCAUUUAUUAAGGACUCUCUGCUCCAGCCUCUCACUCUCACUCUCCUCCGCUCAAACUCAGCUCACUUGAGAGUCUCCUCCCGCCAGCUGUGGAAAGAACUUUGCGUCUCUCCAGCA\
) } def
/len { sequence length } bind def

/coor [
[102.60061646 291.76333618]
[94.08401489 290.00134277]
[85.96910095 286.86035156]
[78.47763824 282.42459106]
[71.81462097 276.81362915]
[66.16265106 270.17932129]
[61.67695999 262.70144653]
[58.48112869 254.58314514]
[56.66369247 246.04512024]
[56.27568054 237.31979370]
[57.32919312 228.64497375]
[59.79701614 220.25729370]
[63.61333847 212.38583374]
[68.67549896 205.24584961]
[74.84674835 199.03282166]
[81.95993805 193.91720581]
[89.82205200 190.03967285]
[98.21943665 187.50730896]
[97.23839569 172.53942871]
[96.25734711 157.57154846]
[95.27629852 142.60366821]
[94.29524994 127.63578033]
[93.31420135 112.66789246]
[85.70672607 100.93682861]
[91.71791077 88.31315613]
[90.73686218 73.34526825]
[89.75581360 58.37738419]
[88.77477264 43.40950012]
[73.44752502 40.04551697]
[59.69453812 32.51945496]
[48.61883545 21.44420433]
[41.10612488 7.71693420]
[37.75394440 -7.55357647]
[38.82415771 -23.13650131]
[44.22250366 -37.77816772]
[53.50685501 -50.30292511]
[65.92340088 -59.70752716]
[80.46785736 -65.24151611]
[79.16052246 -80.18443298]
[77.85317993 -95.12735748]
[76.54584503 -110.07027435]
[75.23851013 -125.01319885]
[73.93117523 -139.95611572]
[72.62384033 -154.89903259]
[71.31650543 -169.84196472]
[57.87978363 -174.35087585]
[47.21811676 -183.62319946]
[40.92761230 -196.22683716]
[39.93315506 -210.23442078]
[44.35256577 -223.51795959]
[53.48373032 -234.07218933]
[65.91593170 -240.31724548]
[64.93488312 -255.28512573]
[63.95383835 -270.25302124]
[49.01664352 -272.04043579]
[34.66229248 -276.54235840]
[21.37968636 -283.60543823]
[9.62122917 -292.98910522]
[-0.21259242 -304.37374878]
[-7.78684139 -317.37167358]
[-12.84354210 -331.54010010]
[-15.21046448 -346.39648438]
[-14.80699253 -361.43484497]
[-11.64686871 -376.14294434]
[-5.83772516 -390.01983643]
[2.42258048 -402.59289551]
[12.85270596 -413.43389893]
[25.09740448 -422.17358398]
[38.73962402 -428.51428223]
[53.31472015 -432.24002075]
[68.32627106 -433.22393799]
[83.26297760 -431.43249512]
[97.61611938 -426.92669678]
[110.89682007 -419.86004639]
[122.65274811 -410.47320557]
[132.48350525 -399.08587646]
[140.05424500 -386.08593750]
[145.10713196 -371.91616821]
[147.47004700 -357.05911255]
[147.06251526 -342.02090454]
[143.89842224 -327.31362915]
[138.08554077 -313.43829346]
[129.82185364 -300.86746216]
[119.38880157 -290.02926636]
[107.14175415 -281.29290771]
[93.49781799 -274.95587158]
[78.92172241 -271.23406982]
[79.90277100 -256.26617432]
[80.88381195 -241.29829407]
[95.78649139 -235.62838745]
[106.77775574 -223.99725342]
[111.63130951 -208.68728638]
[109.33209991 -192.73318481]
[100.28820801 -179.32044983]
[86.25942230 -171.14929199]
[87.56675720 -156.20637512]
[88.87409210 -141.26345825]
[90.18143463 -126.32053375]
[91.48876953 -111.37761688]
[92.79610443 -96.43469238]
[94.10343933 -81.49177551]
[95.41077423 -66.54885101]
[109.55380249 -64.00256348]
[122.56106567 -57.86498642]
[133.53700256 -48.55170822]
[141.72413635 -36.69718933]
[146.55528259 -23.11155891]
[147.69287109 -8.72524261]
[145.05252075 5.47475195]
[138.80923462 18.51255608]
[129.38589478 29.49049950]
[117.42454529 37.65092087]
[103.74265289 42.42845535]
[104.72370148 57.39633942]
[105.70475006 72.36421967]
[106.68579865 87.33210754]
[114.29327393 99.06317139]
[108.28208923 111.68684387]
[109.26313782 126.65473175]
[110.24418640 141.62261963]
[111.22522736 156.59049988]
[112.20627594 171.55838013]
[113.18732452 186.52626038]
[134.81173706 193.08401489]
[151.72218323 208.01559448]
[160.87620544 228.59272766]
[160.64425659 251.07522583]
[151.09976196 271.39080811]
[134.00004578 285.87280273]
[139.13034058 299.96820068]
[144.26065063 314.06359863]
[159.33128357 317.36203003]
[170.21003723 328.30075073]
[173.42556763 343.38931274]
[167.95178223 357.81292725]
[155.53535461 366.96914673]
[140.13833618 367.93618774]
[126.67384338 360.40554810]
[119.43835449 346.78015137]
[120.74067688 331.40783691]
[130.16525269 319.19387817]
[125.03495789 305.09851074]
[119.90465546 291.00311279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[23 118]
[25 116]
[26 115]
[27 114]
[28 113]
[38 102]
[39 101]
[40 100]
[41 99]
[42 98]
[43 97]
[44 96]
[45 95]
[52 89]
[53 88]
[54 87]
[129 143]
[130 142]
[131 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
