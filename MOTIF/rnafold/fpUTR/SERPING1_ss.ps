%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUUUACAGGAACUCACACCAGCGAUCAAUCUUCCUUAAUUUGUAACUGGGCAGUGUCCCGGGCCAGCCAAUAGCUAAGACUGCCCCCCCCGCACCCCACCCUCCCUGACCCUGGGGGACUCUCUACUCAGUCUGCACUGGAGCUGCCUGGUGACCAGAAGUUUGGAGUCCGCUGACGUCGCCGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[-56.19568634 245.04498291]
[-61.91638565 247.10234070]
[-69.41638184 260.09271240]
[-76.91638184 273.08309937]
[-84.41638184 286.07348633]
[-91.91638184 299.06387329]
[-85.38576508 311.21264648]
[-85.71246338 324.89328003]
[-92.70401764 336.53079224]
[-104.44035339 343.13711548]
[-117.79985046 343.07794189]
[-125.51139069 355.94387817]
[-119.30913544 370.16751099]
[-122.68471527 385.31295776]
[-134.34014893 395.55651855]
[-149.79368591 396.95932007]
[-163.10311890 388.98193359]
[-169.15071106 374.69186401]
[-165.61103821 359.58392334]
[-153.84516907 349.46740723]
[-138.37731934 348.23233032]
[-130.66578674 335.36639404]
[-137.57693481 320.48446655]
[-134.22801208 304.25183105]
[-121.74362946 293.09887695]
[-104.90676117 291.56387329]
[-97.40676117 278.57348633]
[-89.90676117 265.58309937]
[-82.40676117 252.59271240]
[-74.90676117 239.60234070]
[-87.83239746 247.21337891]
[-102.45168304 250.57144165]
[-117.40298462 249.36376953]
[-131.29376221 243.70281982]
[-142.83023071 234.11585999]
[-150.93791199 221.49580383]
[-154.86163330 207.01808167]
[-154.23597717 192.03114319]
[-149.11920166 177.93083191]
[-139.98786926 166.03047180]
[-127.69247437 157.43841553]
[-113.37820435 152.95494080]
[-98.37826538 152.99763489]
[-84.08973694 157.56251526]
[-71.84345245 166.22441101]
[-62.78001404 178.17657471]
[-57.74357986 192.30577087]
[-57.20323563 207.29603577]
[-61.20963287 221.75189209]
[-50.60303116 211.14527893]
[-39.99642944 200.53868103]
[-29.38982773 189.93208313]
[-18.78322601 179.32548523]
[-8.17662430 168.71887207]
[-4.64818144 154.24824524]
[10.58111191 149.96113586]
[21.18771362 139.35453796]
[31.79431534 128.74794006]
[96.62754822 81.34668732]
[102.14028931 67.39643097]
[107.53871918 53.40153885]
[112.82246399 39.36294937]
[118.10621643 25.32435989]
[123.38996887 11.28577042]
[128.67372131 -2.75281835]
[133.95747375 -16.79140663]
[134.05339050 -25.94181061]
[139.44422913 -31.01528740]
[144.95697021 -44.96554565]
[150.46969604 -58.91580582]
[143.72227478 -70.58398438]
[144.91481018 -83.81431580]
[153.38804626 -93.79096222]
[165.87376404 -97.01232910]
[171.61401367 -110.87052155]
[177.35426331 -124.72871399]
[169.41767883 -137.93162537]
[170.76150513 -153.09895325]
[180.66162109 -164.43260193]
[195.16349792 -167.72402954]
[200.90374756 -181.58221436]
[206.64399719 -195.44041443]
[212.38426208 -209.29859924]
[218.12451172 -223.15679932]
[223.86476135 -237.01498413]
[211.74418640 -245.96916199]
[202.12477112 -257.55706787]
[195.56234741 -271.10229492]
[192.43446350 -285.81564331]
[192.91870117 -300.84094238]
[196.98255920 -315.30487061]
[204.38563538 -328.36791992]
[214.69383240 -339.27282715]
[227.30477905 -347.38870239]
[241.48309326 -352.24746704]
[256.40316772 -353.57077026]
[271.19735718 -351.28601074]
[276.93762207 -365.14422607]
[282.67788696 -379.00241089]
[288.41812134 -392.86059570]
[294.15838623 -406.71881104]
[286.22180176 -419.92172241]
[287.56561279 -435.08901978]
[297.46572876 -446.42266846]
[311.96762085 -449.71411133]
[317.70785522 -463.57229614]
[318.18316650 -480.51959229]
[334.59970093 -484.75433350]
[343.21353149 -470.15167236]
[331.56607056 -457.83206177]
[325.82580566 -443.97384644]
[333.75280762 -431.39208984]
[332.73913574 -416.37753296]
[322.96444702 -404.70239258]
[308.01657104 -400.97854614]
[302.27630615 -387.12036133]
[296.53607178 -373.26214600]
[290.79580688 -359.40396118]
[285.05557251 -345.54577637]
[297.13220215 -336.70025635]
[306.74658203 -325.21444702]
[313.33648682 -311.75320435]
[316.51498413 -297.09710693]
[316.09304810 -282.09719849]
[312.09085083 -267.62545776]
[304.73687744 -254.52432251]
[294.45480347 -243.55744934]
[281.83914185 -235.36528015]
[267.62088013 -230.42768860]
[252.62504578 -229.03575134]
[237.72294617 -231.27473450]
[231.98269653 -217.41654968]
[226.24244690 -203.55834961]
[220.50219727 -189.70016479]
[214.76194763 -175.84196472]
[209.02169800 -161.98377991]
[216.94868469 -149.40200806]
[215.93501282 -134.38746643]
[206.16032410 -122.71232605]
[191.21244812 -118.98846436]
[185.47219849 -105.13027191]
[179.73194885 -91.27207947]
[186.82716370 -76.03223419]
[180.58940125 -60.05885696]
[164.41996765 -53.40306473]
[158.90722656 -39.45280838]
[153.39448547 -25.50254822]
[147.99606323 -11.50765610]
[142.71231079 2.53093243]
[137.42855835 16.56952095]
[132.14480591 30.60811043]
[126.86105347 44.64669800]
[121.57730103 58.68528748]
[122.16451263 66.06475067]
[116.09054565 72.90917206]
[110.57781219 86.85942841]
[114.93208313 101.21353149]
[127.26610565 109.75003052]
[139.60012817 118.28653717]
[151.93414307 126.82303619]
[168.31376648 127.62319183]
[175.56895447 142.33013916]
[166.23619080 155.81463623]
[149.91622925 154.20498657]
[143.39764404 139.15705872]
[131.06362915 130.62055969]
[118.72959900 122.08406067]
[106.39557648 113.54755402]
[101.00621796 118.76337433]
[84.83812714 134.41082764]
[92.96649933 147.01756287]
[101.09487915 159.62428284]
[115.92146301 166.63172913]
[116.99627686 182.99562073]
[103.21363831 191.88218689]
[88.75194550 184.14968872]
[88.48815155 167.75265503]
[80.35977936 155.14593506]
[72.23139954 142.53921509]
[64.77378082 141.74304199]
[49.85853958 140.15071106]
[42.40091705 139.35453796]
[31.79431534 149.96113586]
[21.18771362 160.56774902]
[16.90061569 175.79704285]
[2.42997766 179.32548523]
[-8.17662430 189.93208313]
[-18.78322601 200.53868103]
[-29.38982773 211.14527893]
[-39.99642944 221.75189209]
[-50.60303116 232.35848999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[11 22]
[12 21]
[49 191]
[50 190]
[51 189]
[52 188]
[53 187]
[54 186]
[56 184]
[57 183]
[58 182]
[59 156]
[60 155]
[61 153]
[62 152]
[63 151]
[64 150]
[65 149]
[66 148]
[68 147]
[69 146]
[70 145]
[74 142]
[75 141]
[76 140]
[80 136]
[81 135]
[82 134]
[83 133]
[84 132]
[85 131]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[105 111]
[106 110]
[157 168]
[158 167]
[159 166]
[160 165]
[170 179]
[171 178]
[172 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
