%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCUCCUGGGGUGUCCACGUGAGCGCGCGUGAGUCCGCCCCCCCAGUCACGUGACCGCUGACUCGGGGCGUUCUCCACUAUCGCUUACCUACCUCCCUCUGCAGGAACCCGGCGAU\
) } def
/len { sequence length } bind def

/coor [
[143.05723572 465.55651855]
[142.80711365 449.75421143]
[153.86401367 438.46170044]
[153.46806335 423.46694946]
[153.07211304 408.47216797]
[151.88536072 393.51919556]
[149.91110229 378.64968872]
[147.93685913 363.78015137]
[145.96260071 348.91064453]
[143.98835754 334.04113770]
[141.23210144 319.29653931]
[137.70155334 304.71795654]
[134.17100525 290.13937378]
[120.17110443 288.48394775]
[107.55960083 282.11734009]
[97.87322998 271.79232788]
[92.30017090 258.74539185]
[91.53432465 244.54869080]
[95.68895721 230.92057800]
[104.28052521 219.51765442]
[116.28484344 211.73339844]
[113.14035034 197.06669617]
[109.99585724 182.39999390]
[106.85136414 167.73329163]
[103.70687103 153.06658936]
[100.56237793 138.39988708]
[97.41788483 123.73319244]
[84.00891113 117.72615814]
[76.65721893 105.00461578]
[78.14756012 90.38737488]
[87.91541290 79.41130066]
[84.77091980 64.74459839]
[81.62642670 50.07789993]
[78.28861237 35.45397949]
[74.75805664 20.87539291]
[61.54917526 12.61929703]
[58.17636871 -2.21575713]
[66.12870026 -14.75753117]
[62.59814453 -29.33611679]
[59.06759262 -43.91470337]
[55.53703690 -58.49328995]
[52.00648499 -73.07187653]
[48.47593307 -87.65046692]
[38.74525070 -92.85527039]
[33.65343475 -102.39556885]
[34.70197296 -112.93643188]
[41.29261017 -120.94495392]
[38.53636551 -135.68954468]
[35.78012466 -150.43414307]
[33.02388000 -165.17874146]
[30.26763725 -179.92333984]
[27.31701279 -194.63026428]
[24.17251968 -209.29696655]
[12.78243542 -221.09519958]
[17.56442261 -236.78164673]
[33.59918594 -240.21943665]
[44.39152908 -227.87208557]
[38.83922195 -212.44146729]
[41.98371506 -197.77476501]
[46.51945496 -191.81953430]
[45.01223373 -182.67958069]
[47.76847839 -167.93498230]
[50.52471924 -153.19038391]
[53.28096390 -138.44580078]
[56.03720474 -123.70119476]
[69.70018005 -110.12387085]
[63.05451965 -91.18101501]
[66.58507538 -76.60243225]
[70.11562347 -62.02384567]
[73.64617920 -47.44525909]
[77.17672729 -32.86666870]
[80.70728302 -18.28808403]
[93.51656342 -10.77422810]
[97.30471802 3.96023822]
[89.33664703 17.34483910]
[92.86720276 31.92342567]
[97.55856323 37.75685120]
[96.29312897 46.93340302]
[99.43762207 61.60010529]
[102.58211517 76.26680756]
[115.99108887 82.27384186]
[123.34278107 94.99538422]
[121.85243988 109.61262512]
[112.08458710 120.58869934]
[115.22908020 135.25540161]
[118.37357330 149.92210388]
[121.51806641 164.58880615]
[124.66255951 179.25550842]
[127.80705261 193.92221069]
[130.95155334 208.58891296]
[146.72830200 211.36538696]
[160.21327209 219.94107056]
[169.37406921 232.98873901]
[172.84336853 248.50982666]
[170.12284851 264.14056396]
[161.65460205 277.51196289]
[148.74958801 286.60882568]
[152.28013611 301.18740845]
[155.81069946 315.76599121]
[159.14170837 318.98709106]
[161.00416565 322.74301147]
[161.41613770 326.47845459]
[160.58337402 329.70657349]
[158.85786438 332.06689453]
[160.83210754 346.93640137]
[162.80636597 361.80590820]
[164.78060913 376.67541504]
[166.75486755 391.54492188]
[169.72781372 395.09918213]
[171.18400574 399.03048706]
[171.19995117 402.78854370]
[170.03157043 405.91091919]
[168.06687927 408.07620239]
[168.46282959 423.07098389]
[168.85879517 438.06576538]
[180.49624634 448.75897217]
[181.08044434 464.55245972]
[170.26478577 476.07623291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[11 99]
[12 98]
[13 97]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[31 80]
[32 79]
[33 78]
[34 76]
[35 75]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
