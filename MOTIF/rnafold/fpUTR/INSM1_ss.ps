%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCAGAGCUGGGCCGAGCCGUCGCCGGCGCCACGCGAGUCCCGCAGCCGCCGCGCCCGGGCAAUGGGCCGGGGGCACUGAGGGCCGCCGGGGCCGAGCGCGGAGGGGGGACCGAGCCAGUGCCGUGCCCUCGGGCCGCGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[77.14434052 260.88046265]
[86.89417267 248.13995361]
[86.25755310 233.15347290]
[85.62094116 218.16699219]
[84.98432159 203.18049622]
[84.34770203 188.19401550]
[73.88814545 198.94564819]
[58.98372269 200.63629150]
[46.38173294 192.50057983]
[41.78714371 178.22158813]
[47.27994156 164.26345825]
[60.37351990 156.94511414]
[75.14035797 159.57957458]
[84.89611816 170.97596741]
[86.48515320 156.06037903]
[88.07418823 141.14477539]
[89.66322327 126.22917938]
[78.21916962 117.90012360]
[72.26512146 105.05920410]
[73.30184937 90.94307709]
[81.06803894 79.10981750]
[74.31497955 65.71592712]
[67.56192780 52.32204056]
[60.85742188 46.01423264]
[60.81108475 38.57142639]
[54.34384155 25.03721809]
[47.87659454 11.50301075]
[41.26607132 -1.96179450]
[34.51301575 -15.35568237]
[27.75996017 -28.74957085]
[21.00690460 -42.14345932]
[7.88517952 -50.98262787]
[9.06414986 -65.83049774]
[2.31109357 -79.22438812]
[-9.71056461 -84.02140808]
[-15.04407406 -95.37246704]
[-11.30947113 -106.92366028]
[-17.77671623 -120.45786285]
[-24.24395943 -133.99206543]
[-30.81306839 -140.44076538]
[-30.70141792 -147.88287354]
[-36.87993622 -161.55130005]
[-43.05845642 -175.21972656]
[-49.23697281 -188.88816833]
[-55.56021118 -202.49024963]
[-62.02745819 -216.02444458]
[-76.65744019 -221.37246704]
[-83.02334595 -235.19020081]
[-77.83467102 -249.10470581]
[-84.30191040 -262.63891602]
[-90.76915741 -276.17312622]
[-103.70030975 -285.28881836]
[-102.20645905 -300.10830688]
[-108.67369843 -313.64251709]
[-115.14094543 -327.17672729]
[-121.71005249 -333.62542725]
[-121.59840393 -341.06753540]
[-127.77692413 -354.73596191]
[-133.95544434 -368.40438843]
[-140.13395691 -382.07281494]
[-146.31248474 -395.74124146]
[-160.75418091 -402.72814941]
[-164.15516663 -418.40658569]
[-153.90649414 -430.74935913]
[-137.87007141 -430.28817749]
[-128.34767151 -417.37683105]
[-132.64404297 -401.91976929]
[-126.46553040 -388.25134277]
[-120.28701019 -374.58291626]
[-114.10849762 -360.91448975]
[-107.92997742 -347.24606323]
[-101.60673523 -333.64398193]
[-95.13949585 -320.10977173]
[-88.67224884 -306.57556152]
[-76.20367432 -298.42791748]
[-77.23495483 -282.64035034]
[-70.76770782 -269.10614014]
[-64.30046082 -255.57194519]
[-50.21485519 -250.86755371]
[-43.46334839 -237.23408508]
[-48.49324799 -222.49169922]
[-42.02600479 -208.95748901]
[-36.26434326 -204.24571228]
[-35.56854630 -195.06668091]
[-29.39002800 -181.39825439]
[-23.21150970 -167.72982788]
[-17.03299141 -154.06140137]
[-10.70975304 -140.45932007]
[-4.24250889 -126.92510986]
[2.22473574 -113.39089966]
[17.20009232 -104.29862976]
[15.70498180 -85.97743988]
[22.45803833 -72.58355713]
[35.09673691 -64.70240784]
[34.40079117 -48.89651489]
[41.15384674 -35.50262451]
[47.90690613 -22.10873795]
[54.65996170 -8.71485043]
[60.52033615 -4.12643242]
[61.41080093 5.03576660]
[67.87804413 18.56997299]
[74.34529114 32.10417938]
[80.95581055 45.56898499]
[87.70886993 58.96287537]
[94.46192932 72.35675812]
[112.09852600 74.53542328]
[124.92815399 86.83162689]
[127.85337067 104.35987091]
[141.52180481 110.53839111]
[155.19023132 116.71691132]
[168.85865784 122.89543152]
[182.52708435 129.07394409]
[197.15937805 123.73226929]
[210.93309021 130.19287109]
[215.93539429 144.17546082]
[229.60382080 150.35397339]
[238.78286743 151.04977417]
[243.49462891 156.81143188]
[257.02883911 163.27867126]
[273.32736206 161.46482849]
[282.82821655 174.83142090]
[275.75772095 189.62805176]
[259.38940430 190.63322449]
[250.56159973 176.81288147]
[237.02738953 170.34564209]
[223.42530823 164.02239990]
[209.75688171 157.84388733]
[195.95564270 163.32673645]
[182.00590515 157.25555420]
[176.34857178 142.74237061]
[162.68013000 136.56385803]
[149.01170349 130.38533020]
[135.34327698 124.20681763]
[121.67485809 118.02829742]
[114.00980377 124.46516418]
[104.57881927 127.81822205]
[102.98978424 142.73381042]
[101.40074921 157.64941406]
[99.81171417 172.56500244]
[99.33419037 187.55740356]
[99.97080231 202.54388428]
[100.60742188 217.53036499]
[101.24404144 232.51684570]
[101.88066101 247.50334167]
[112.67583466 259.37109375]
[109.98577881 275.18701172]
[95.87406158 282.81845093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 144]
[3 143]
[4 142]
[5 141]
[6 140]
[14 139]
[15 138]
[16 137]
[17 136]
[21 105]
[22 104]
[23 103]
[25 102]
[26 101]
[27 100]
[28 98]
[29 97]
[30 96]
[31 95]
[33 93]
[34 92]
[37 90]
[38 89]
[39 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 82]
[46 81]
[49 78]
[50 77]
[51 76]
[53 74]
[54 73]
[55 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[108 134]
[109 133]
[110 132]
[111 131]
[112 130]
[115 127]
[116 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
