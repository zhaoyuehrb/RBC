%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCACGUCGGCUUCCGGGAAGAGCUUUACGAUACAUUGACCGACAUUUUACGACAGGCGGGAUUGUUUUGUGGCUGUCAGCUUUCCCCGUGGUCUGAGUUUGUGGCUGCAUUUUUAUCUCUGGUGGCUCUGCUACGGCGGCGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[85.94481659 229.25907898]
[84.68124390 214.31239319]
[83.41767120 199.36570740]
[82.15409851 184.41902161]
[78.43143463 177.97528076]
[81.02484894 169.14445496]
[80.07668304 154.17445374]
[79.12850952 139.20445251]
[78.18033600 124.23444366]
[71.04844666 111.03837585]
[59.04463959 102.04345703]
[47.04082870 93.04854584]
[35.03701782 84.05362701]
[22.13713837 85.10171509]
[12.31334686 77.30678558]
[10.52161598 65.30081177]
[-1.28988636 56.05481720]
[-13.10138893 46.80882263]
[-24.91289139 37.56282806]
[-40.54887772 35.14901733]
[-45.80148697 21.21132088]
[-57.61299133 11.96532726]
[-69.42449188 2.71933246]
[-81.23599243 -6.52666235]
[-93.04750061 -15.77265644]
[-104.85900116 -25.01865196]
[-99.68213654 -10.94029522]
[-97.70397949 3.92869544]
[-99.01998138 18.87085533]
[-103.56663513 33.16518784]
[-111.12454987 46.12195587]
[-121.32904816 57.11596298]
[-133.68774414 65.61672211]
[-147.60427856 71.21404266]
[-162.40715027 73.63785553]
[-177.38209534 72.77118683]
[-191.80651855 68.65587616]
[-204.98442078 61.49047852]
[-216.27993774 51.62075043]
[-225.14801025 39.52293015]
[-231.16075134 25.78077126]
[-234.02801514 11.05736351]
[-233.61146545 -3.93685174]
[-229.93119812 -18.47836494]
[-223.16479492 -31.86551285]
[-213.63874817 -43.45233154]
[-201.81271362 -52.67972946]
[-188.25732422 -59.10245895]
[-173.62666321 -62.41061020]
[-158.62670898 -62.44455338]
[-143.98121643 -59.20265198]
[-130.39691162 -52.84133530]
[-118.52757263 -43.66595840]
[-123.78973389 -57.71265411]
[-129.05189514 -71.75935364]
[-134.31405640 -85.80604553]
[-139.57621765 -99.85274506]
[-151.66304016 -110.06153870]
[-148.88233948 -124.69427490]
[-154.14450073 -138.74096680]
[-166.23130798 -148.94975281]
[-163.45060730 -163.58248901]
[-168.71276855 -177.62919617]
[-182.66140747 -185.55477905]
[-185.01933289 -201.42361450]
[-173.97775269 -213.06246948]
[-158.00682068 -211.54301453]
[-149.35806274 -198.03085327]
[-154.66607666 -182.89135742]
[-149.40391541 -168.84465027]
[-137.69348145 -159.64057922]
[-140.09779358 -144.00312805]
[-134.83563232 -129.95643616]
[-123.12520599 -120.75234985]
[-125.52952576 -105.11490631]
[-120.26736450 -91.06820679]
[-115.00520325 -77.02151489]
[-109.74304199 -62.97481537]
[-104.48088074 -48.92811966]
[-95.61300659 -36.83015442]
[-83.80150604 -27.58415985]
[-71.98999786 -18.33816528]
[-60.17849731 -9.09216976]
[-48.36699677 0.15382481]
[-36.55549240 9.39981937]
[-21.76434517 11.15229607]
[-15.66689587 25.75132561]
[-3.85539389 34.99732208]
[7.95610809 44.24331665]
[19.76761055 53.48931122]
[37.22471237 54.97382736]
[44.03193665 72.04981232]
[56.03574753 81.04473114]
[68.03955841 90.03964996]
[80.04336548 99.03456879]
[85.51850128 71.03893280]
[125.10351562 62.91840363]
[140.00277710 61.18282700]
[154.90202332 59.44725037]
[163.48747253 42.42208099]
[180.43003845 34.00404739]
[198.89161682 37.39158249]
[211.53965759 51.05791092]
[226.29940796 48.38400269]
[241.05915833 45.71009827]
[253.21556091 34.70309448]
[268.74108887 39.98422241]
[271.66439819 56.12070847]
[258.97827148 66.51271820]
[243.73307800 60.46984482]
[228.97332764 63.14375305]
[214.21357727 65.81766510]
[211.31735229 76.70837402]
[204.50956726 85.75350189]
[194.75735474 91.60366058]
[183.47052002 93.36793518]
[172.29783630 90.74940491]
[162.88613892 84.09423828]
[156.63760376 74.34650421]
[141.73834229 76.08207703]
[126.83909607 77.81765747]
[124.43141937 84.92069244]
[119.61606598 99.12676239]
[117.20838928 106.22978973]
[127.98138428 116.66735077]
[138.75437927 127.10490417]
[149.52737427 137.54246521]
[160.30036926 147.98001099]
[175.88330078 154.65899658]
[173.77911377 171.48185730]
[157.03120422 174.11694336]
[149.86280823 158.75300598]
[139.08981323 148.31546021]
[128.31681824 137.87789917]
[117.54383087 127.44034576]
[106.77083588 117.00278473]
[93.15033722 123.28627014]
[94.09851074 138.25627136]
[95.04668427 153.22627258]
[95.99485016 168.19627380]
[97.10078430 183.15545654]
[98.36435699 198.10214233]
[99.62792969 213.04882812]
[100.89150238 227.99551392]
[112.17413330 239.40084839]
[110.14867401 255.31552124]
[96.36888123 263.53115845]
[81.40543365 257.74545288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[6 140]
[7 139]
[8 138]
[9 137]
[10 95]
[11 94]
[12 93]
[13 92]
[16 90]
[17 89]
[18 88]
[19 87]
[21 85]
[22 84]
[23 83]
[24 82]
[25 81]
[26 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[59 73]
[60 72]
[62 70]
[63 69]
[97 121]
[98 120]
[99 119]
[103 112]
[104 111]
[105 110]
[124 136]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
