%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGCCGGGGCAGGCGCCGGGACUCCCUCCUGGCCGCCCACAGCCUGUGCGCAUUCCUGCAUUCCUGCCGCCGCCCGGGACCCGAGUGCCCCGGAGGUGUCCAGGCGCGGUGCCAGGCGGGUACUGUGCAGGUUCAUUCUGCCACCCAUCUGCAUUAAGACACAAGGUGCUGACCGCAGAGACCUGCC\
) } def
/len { sequence length } bind def

/coor [
[322.95773315 243.76486206]
[320.94277954 224.75050354]
[307.63442993 217.83038330]
[294.32608032 210.91026306]
[281.01776123 203.99014282]
[267.70941162 197.07003784]
[254.40106201 190.14991760]
[242.76379395 193.49255371]
[231.61436462 187.82141113]
[227.18650818 175.69458008]
[213.99440002 168.55537415]
[200.80229187 161.41615295]
[187.61019897 154.27694702]
[170.12773132 155.71289062]
[160.60054016 139.96461487]
[147.29219055 133.04449463]
[133.98385620 126.12438202]
[120.67550659 119.20426178]
[107.36716461 112.28414917]
[93.39177704 112.70853424]
[85.71271515 101.02419281]
[72.40437317 94.10408020]
[59.09603500 87.18395996]
[45.78769302 80.26383972]
[33.26379395 83.39723206]
[22.31638718 77.34530640]
[18.55893898 65.83527374]
[5.36683178 58.69606781]
[-7.82527447 51.55685425]
[-21.01737976 44.41764450]
[-34.20948792 37.27843475]
[-50.02892303 37.51502991]
[-57.53967667 24.65276527]
[-70.73178101 17.51355362]
[-86.55122375 17.75015068]
[-94.06197357 4.88788652]
[-107.25408173 -2.25132442]
[-120.44618988 -9.39053535]
[-132.26760864 0.12418214]
[-146.79205322 4.37662411]
[-161.79750061 2.74867129]
[-175.00070190 -4.48064280]
[-184.40466309 -16.18237114]
[-188.60063171 -30.55384445]
[-186.97909546 -45.39634705]
[-200.17120361 -52.53556061]
[-213.36331177 -59.67477036]
[-226.55541992 -66.81398010]
[-242.37486267 -66.57738495]
[-249.88560486 -79.43965149]
[-263.07772827 -86.57885742]
[-276.26983643 -93.71807098]
[-284.72134399 -87.23853302]
[-294.81365967 -83.96071625]
[-305.38305664 -84.23574829]
[-315.21972656 -88.00658417]
[-323.20632935 -94.81754303]
[-328.44470215 -103.86916351]
[-330.35705566 -114.11203003]
[-328.74945068 -124.36837769]
[-341.44088745 -132.36386108]
[-354.13232422 -140.35932922]
[-370.53121948 -140.45083618]
[-378.41522217 -154.83049011]
[-369.67395020 -168.70573425]
[-353.29968262 -167.80290222]
[-346.13684082 -153.05076599]
[-333.44540405 -145.05528259]
[-320.75399780 -137.05981445]
[-303.14752197 -145.53605652]
[-283.84909058 -141.65707397]
[-270.69424438 -126.82096863]
[-269.13061523 -106.91017914]
[-255.93850708 -99.77096558]
[-242.74639893 -92.63175201]
[-227.87054443 -93.37899780]
[-219.41621399 -80.00608826]
[-206.22410583 -72.86687469]
[-193.03199768 -65.72766876]
[-179.83988953 -58.58845520]
[-168.30113220 -68.06402588]
[-153.97483826 -72.41175079]
[-139.03507996 -70.93931580]
[-125.76146698 -63.84009171]
[-116.19139862 -52.16844177]
[-111.80727386 -37.68318939]
[-113.30697632 -22.58264160]
[-100.11486816 -15.44343090]
[-86.92276764 -8.30421925]
[-72.04691315 -9.05146027]
[-63.59257126 4.32144833]
[-50.40046692 11.46065903]
[-35.52461624 10.71341896]
[-27.07027626 24.08632660]
[-13.87817001 31.22553825]
[-0.68606335 38.36474991]
[12.50604248 45.50395966]
[25.69814873 52.64316940]
[43.18061447 51.20722198]
[52.70780945 66.95549774]
[66.01615143 73.87561798]
[79.32449341 80.79573822]
[92.63283539 87.71585083]
[106.60822296 87.29146576]
[114.28728485 98.97580719]
[127.59562683 105.89591980]
[140.90396118 112.81604004]
[154.21231079 119.73616028]
[167.52064514 126.65627289]
[180.04454041 123.52288055]
[190.99195862 129.57481384]
[194.74940491 141.08483887]
[207.94151306 148.22404480]
[221.13362122 155.36326599]
[234.32572937 162.50247192]
[252.70747375 161.56077576]
[261.32116699 176.84156799]
[274.62951660 183.76168823]
[287.93786621 190.68180847]
[301.24621582 197.60192871]
[314.55453491 204.52203369]
[327.86288452 211.44215393]
[337.09829712 204.59944153]
[348.17254639 201.71868896]
[359.46978760 203.18054199]
[369.35641479 208.73490906]
[376.41735840 217.54269409]
[379.65847778 228.30242920]
[378.64648438 239.44247437]
[391.59533691 247.01396179]
[404.54418945 254.58544922]
[417.49301147 262.15692139]
[430.44186401 269.72839355]
[443.39071655 277.29989624]
[456.33956909 284.87136841]
[461.59527588 284.89669800]
[465.87991333 286.75933838]
[468.65405273 289.77722168]
[469.72940063 293.15301514]
[482.28689575 301.35723877]
[494.84439087 309.56146240]
[507.40188599 317.76568604]
[519.95941162 325.96987915]
[532.90826416 333.54138184]
[546.21655273 340.46148682]
[559.52490234 347.38162231]
[572.83325195 354.30172729]
[591.62219238 347.23159790]
[609.29406738 356.09606934]
[614.69250488 374.79852295]
[628.32763672 381.05023193]
[641.96270752 387.30197144]
[656.68969727 381.56692505]
[671.12475586 388.00161743]
[676.70379639 402.78845215]
[670.11682129 417.15463257]
[655.27185059 422.57699585]
[640.97607422 415.83856201]
[635.71099854 400.93707275]
[622.07586670 394.68533325]
[608.44079590 388.43362427]
[600.10931396 394.48275757]
[589.93743896 396.53454590]
[579.75506592 394.15127563]
[571.42248535 387.69934082]
[566.49078369 378.29464722]
[565.91314697 367.61007690]
[552.60479736 360.68994141]
[539.29644775 353.76983643]
[525.98809814 346.84973145]
[529.34436035 361.46942139]
[521.51007080 374.26098633]
[506.96194458 377.91497803]
[494.01309204 370.34347534]
[490.06283569 355.87295532]
[497.36840820 342.77227783]
[511.75515747 338.52740479]
[499.19766235 330.32318115]
[486.64016724 322.11895752]
[474.08267212 313.91473389]
[461.52517700 305.71051025]
[448.76809692 297.82022095]
[435.81924438 290.24874878]
[422.87039185 282.67724609]
[409.92153931 275.10577393]
[396.97268677 267.53430176]
[384.02383423 259.96279907]
[371.07501221 252.39132690]
[354.44555664 260.88150024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[10 115]
[11 114]
[12 113]
[13 112]
[15 109]
[16 108]
[17 107]
[18 106]
[19 105]
[21 103]
[22 102]
[23 101]
[24 100]
[27 98]
[28 97]
[29 96]
[30 95]
[31 94]
[33 92]
[34 91]
[36 89]
[37 88]
[38 87]
[45 80]
[46 79]
[47 78]
[48 77]
[50 75]
[51 74]
[52 73]
[60 69]
[61 68]
[62 67]
[129 188]
[130 187]
[131 186]
[132 185]
[133 184]
[134 183]
[135 182]
[139 181]
[140 180]
[141 179]
[142 178]
[143 177]
[144 170]
[145 169]
[146 168]
[147 167]
[150 161]
[151 160]
[152 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
