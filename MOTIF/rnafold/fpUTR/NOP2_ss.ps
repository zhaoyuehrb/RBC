%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGGCUAGCGCUACCCGUGCGCCUGCGUGGAACGAUUCUGUGGCGAGUGCCGGCCGAAAGCUAGGUCCGGAUUGCACGUGGAGGGCCGCCCGAAGGGCACUCUCGGACAUUAACCCGCAUUCUGUACC\
) } def
/len { sequence length } bind def

/coor [
[-94.40251160 114.12237549]
[-109.39280701 114.66184998]
[-121.65975189 128.99650574]
[-140.18791199 129.90150452]
[-153.33662415 117.26918030]
[-168.28381348 118.52674103]
[-183.23100281 119.78429413]
[-198.17820740 121.04185486]
[-211.28111267 129.90888977]
[-224.61225891 123.26583862]
[-239.55944824 124.52339935]
[-254.50663757 125.78095245]
[-269.45382690 127.03851318]
[-284.40103149 128.29606628]
[-273.37609863 138.46717834]
[-271.26864624 153.31838989]
[-279.02865601 166.15515137]
[-293.15808105 171.19094849]
[-307.28771973 166.15577698]
[-315.04830933 153.31936646]
[-312.94149780 138.46804810]
[-301.91613770 128.29606628]
[-316.86334229 127.03851318]
[-331.81051636 125.78095245]
[-346.75772095 124.52339935]
[-355.67251587 126.93889618]
[-362.04681396 123.05225372]
[-376.95956421 121.43663025]
[-391.87228394 119.82101440]
[-400.84246826 122.02204895]
[-407.12170410 117.98367310]
[-421.99142456 116.01091766]
[-436.86114502 114.03816223]
[-451.80340576 120.79540253]
[-464.96691895 111.01509857]
[-462.81015015 94.75839233]
[-447.55181885 88.74879456]
[-434.88839722 99.16845703]
[-420.01867676 101.14120483]
[-405.14895630 103.11396027]
[-390.25668335 104.90827179]
[-375.34393311 106.52389526]
[-360.43118286 108.13951111]
[-345.50015259 109.57620239]
[-330.55297852 110.83376312]
[-315.60577393 112.09132385]
[-300.65856934 113.34887695]
[-285.65856934 113.34887695]
[-270.71139526 112.09132385]
[-255.76419067 110.83376312]
[-240.81700134 109.57620239]
[-225.86981201 108.31864929]
[-213.83601379 99.54157257]
[-199.43576050 106.09466553]
[-184.48857117 104.83710480]
[-169.54138184 103.57955170]
[-154.59417725 102.32199097]
[-149.22770691 92.12296295]
[-139.47883606 85.75342560]
[-127.74279022 84.91823578]
[-116.97174072 89.94489288]
[-109.93227386 99.67155457]
[-94.94197845 99.13208008]
[-86.41876984 90.46090698]
[-73.86848450 89.94546509]
[-64.05325317 98.41313934]
[-49.05433273 98.23328400]
[-34.05540848 98.05342865]
[-21.42182732 90.16407776]
[-7.52987289 97.73535156]
[7.46904898 97.55548859]
[22.46796989 97.37563324]
[37.46689224 97.19577789]
[50.10047531 89.30642700]
[63.99242783 96.87769318]
[78.99134827 96.69783783]
[93.99027252 96.51798248]
[92.45137024 92.08811951]
[93.13249207 86.74896240]
[96.34624481 81.44170380]
[102.04407501 77.18718719]
[109.80342102 74.95658112]
[118.85890961 75.54324341]
[133.61692810 72.85983276]
[148.37495422 70.17642975]
[163.13298035 67.49301910]
[177.89100647 64.80960846]
[185.91156006 54.62574005]
[198.32986450 52.73865891]
[208.35009766 59.62554932]
[223.16822815 57.29679871]
[237.98635864 54.96804810]
[252.80447388 52.63930130]
[267.51287842 44.20724487]
[279.68707275 56.00660324]
[271.71902466 70.97142792]
[255.13322449 67.45742798]
[240.31510925 69.78617859]
[225.49697876 72.11492920]
[210.67884827 74.44367981]
[197.70440674 86.19706726]
[180.57441711 79.56763458]
[165.81639099 82.25104523]
[151.05836487 84.93444824]
[136.30033875 87.61785889]
[121.54232025 90.30126953]
[117.80500031 104.82822418]
[129.43572998 114.30061340]
[144.40020752 110.19642639]
[158.90718079 115.70344543]
[167.37843323 128.70411682]
[166.55659485 144.19941711]
[156.75769043 156.23107910]
[141.74957275 160.17268372]
[127.30319214 154.50862122]
[118.97347260 141.41680908]
[119.96334839 125.93134308]
[108.33261871 116.45896149]
[94.17012787 111.51689911]
[79.17121124 111.69676208]
[64.17228699 111.87661743]
[50.46588135 119.77883148]
[37.64675140 112.19469452]
[22.64782906 112.37455750]
[7.64890671 112.55441284]
[-7.35001516 112.73426819]
[-21.05642128 120.63648224]
[-33.87555313 113.05234528]
[-48.87447357 113.23220825]
[-63.87339401 113.41206360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[5 57]
[6 56]
[7 55]
[8 54]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[22 47]
[23 46]
[24 45]
[25 44]
[27 43]
[28 42]
[29 41]
[31 40]
[32 39]
[33 38]
[66 130]
[67 129]
[68 128]
[70 126]
[71 125]
[72 124]
[73 123]
[75 121]
[76 120]
[77 119]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[90 100]
[91 99]
[92 98]
[93 97]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
