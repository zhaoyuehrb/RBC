%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAACCAAUCUUCAACUUGCCUGCAUUUGGUAUUAGUAUUUUAUUAACCUUUCAUUGAUCCAAUUACGGCUCUUUGACACAAUUUUCAUCAGUGAUGGACUAAGUGUGAUCCGGCCUGACCCGCCUCCGGCCGGCGUGAGAAGGGGC\
) } def
/len { sequence length } bind def

/coor [
[-47.35756683 235.24975586]
[-52.29056549 249.41540527]
[-57.22356796 263.58105469]
[-62.15656662 277.74670410]
[-67.08956909 291.91235352]
[-61.42977142 306.92388916]
[-69.76091766 320.63415527]
[-85.69205475 322.52581787]
[-97.00218201 311.14773560]
[-95.01513672 295.22821045]
[-81.25521088 286.97933960]
[-76.32221222 272.81369019]
[-71.38921356 258.64804077]
[-66.45621490 244.48240662]
[-61.52321243 230.31675720]
[-69.68478394 224.31845093]
[-76.18371582 216.54963684]
[-90.01166534 222.36236572]
[-103.83960724 228.17509460]
[-117.54279327 234.27615356]
[-131.11520386 240.66284180]
[-144.68760681 247.04953003]
[-158.26000977 253.43621826]
[-162.07936096 268.60018921]
[-174.78260803 277.71951294]
[-190.37164307 276.48828125]
[-201.48580933 265.48785400]
[-202.87734985 249.91230774]
[-193.88920593 237.11593628]
[-178.76530457 233.14079285]
[-164.64669800 239.86381531]
[-151.07429504 233.47712708]
[-137.50189209 227.09043884]
[-123.92948151 220.70373535]
[-121.48133850 216.53294373]
[-116.35552216 213.89106750]
[-109.65234375 214.34715271]
[-95.82439423 208.53442383]
[-81.99645233 202.72167969]
[-83.06333160 192.81546021]
[-81.77993774 182.92068481]
[-78.21100616 173.58798218]
[-72.54865265 165.33830261]
[-65.10202789 158.63375854]
[-56.28046036 153.85182190]
[-46.57095337 151.26400757]
[-36.51129532 151.02050781]
[-26.66027451 153.14147949]
[-17.56664658 157.51554871]
[-9.73855495 163.90567017]
[2.75526333 155.60479736]
[15.24908161 147.30392456]
[27.74290085 139.00305176]
[40.23671722 130.70217896]
[52.73053741 122.40130615]
[47.79886246 103.35583496]
[50.25128555 83.83566284]
[59.74090195 66.60201263]
[74.92535400 54.09267426]
[69.69677734 40.03344345]
[57.63438797 29.79579544]
[60.45005035 15.16974640]
[55.22146988 1.11051702]
[40.74911499 -5.23979330]
[35.08387375 -19.99379730]
[41.58684158 -34.39820480]
[56.39991760 -39.90713882]
[70.73476410 -33.25224304]
[76.08677673 -18.38175392]
[69.28070068 -4.11806393]
[74.50927734 9.94116592]
[86.19768524 19.17320251]
[83.75600433 34.80486298]
[88.98458862 48.86408997]
[97.94276428 47.73157501]
[106.96224213 48.15650940]
[115.77426147 50.12622833]
[124.11625671 53.58204269]
[131.73965454 58.42098236]
[142.45674133 47.92603302]
[153.17382812 37.43107986]
[163.89093018 26.93613052]
[160.18667603 12.09612656]
[164.38008118 -2.50908041]
[175.24873352 -12.98471737]
[189.80418396 -16.58950996]
[204.11331177 -12.45254135]
[214.83039856 -22.94749069]
[225.54750061 -33.44244003]
[236.26458740 -43.93739319]
[246.98167419 -54.43234253]
[257.69876099 -64.92729187]
[264.78500366 -80.32929993]
[281.54675293 -77.78370667]
[283.74075317 -60.97231674]
[268.19372559 -54.21020126]
[257.47662354 -43.71525192]
[246.75953674 -33.22030258]
[236.04244995 -22.72535133]
[225.32534790 -12.23040104]
[214.60826111 -1.73545098]
[218.44465637 12.65717411]
[214.53582764 27.13394928]
[203.83486938 37.78082275]
[189.14505005 41.66744995]
[174.38587952 37.65322113]
[163.66877747 48.14817047]
[152.95169067 58.64311981]
[142.23460388 69.13806915]
[148.50738525 80.42312622]
[151.82492065 92.90087128]
[151.98510742 105.81111908]
[148.97817993 118.36733246]
[162.12277222 125.59363556]
[175.26737976 132.81994629]
[188.41197205 140.04624939]
[201.55657959 147.27255249]
[214.70117188 154.49885559]
[230.52183533 154.36689758]
[237.94735718 167.27854919]
[251.09194946 174.50485229]
[266.19686890 169.85546875]
[280.12600708 177.32240295]
[284.61541748 192.47563171]
[277.00164795 206.32504272]
[261.80178833 210.65400696]
[248.03366089 202.89422607]
[243.86564636 187.64945984]
[230.72105408 180.42315674]
[215.84057617 181.07199097]
[207.47486877 167.64346313]
[194.33027649 160.41714478]
[181.18566895 153.19084167]
[168.04107666 145.96453857]
[154.89646912 138.73823547]
[141.75187683 131.51193237]
[130.82344055 142.26269531]
[117.24764252 149.38359070]
[102.19046783 152.26301575]
[86.94515991 150.65364075]
[72.82111359 144.69371033]
[61.03141022 134.89512634]
[48.53759384 143.19599915]
[36.04377365 151.49687195]
[23.54995537 159.79774475]
[11.05613613 168.09861755]
[-1.43768215 176.39949036]
[1.63748610 198.80537415]
[-7.09730101 219.57182312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[17 39]
[18 38]
[19 37]
[20 34]
[21 33]
[22 32]
[23 31]
[50 147]
[51 146]
[52 145]
[53 144]
[54 143]
[55 142]
[59 74]
[60 73]
[62 71]
[63 70]
[79 109]
[80 108]
[81 107]
[82 106]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
[113 136]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
