%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGACGGCGCGCCCCGCCCCCGUACGCCUAAGUUCUCGCGCGACUCCCACUUCCGCCCUUUUGGCUCUCUGACCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[72.74343872 204.61354065]
[69.27971649 190.01892090]
[70.16610718 175.04513550]
[75.32936859 160.95767212]
[62.33898926 168.45767212]
[49.34860611 175.95767212]
[36.35822678 183.45767212]
[27.67982483 199.55979919]
[10.24784851 199.17396545]
[-2.44194746 207.17202759]
[-15.13174343 215.17008972]
[-25.30749893 228.73071289]
[-41.15509033 222.70657349]
[-39.75343704 205.81066895]
[-23.12981033 202.48030090]
[-10.44001389 194.48222351]
[2.24978232 186.48416138]
[5.31531477 174.61408997]
[16.04663849 167.89007568]
[28.85822487 170.46728516]
[41.84860611 162.96728516]
[54.83898926 155.46728516]
[67.82936859 147.96728516]
[69.25415802 144.08680725]
[72.12062073 140.69596863]
[76.23773956 138.33236694]
[81.91073608 124.44650269]
[87.58373260 110.56064606]
[84.79397583 94.12909698]
[97.90204620 83.83554840]
[103.03234863 69.74016571]
[108.16265106 55.64477158]
[102.94239044 48.39596939]
[101.19735718 39.73307800]
[103.16092682 31.21555710]
[108.40603638 24.34358597]
[115.93496704 20.29386711]
[124.36836243 19.71845627]
[131.61505127 6.58508253]
[138.86174011 -6.54829073]
[140.33671570 -15.83462048]
[146.65260315 -20.04247284]
[154.40309143 -32.88497543]
[148.24397278 -47.12733459]
[151.66542053 -62.26250076]
[163.35183716 -72.47069550]
[178.80955505 -73.82666016]
[192.09477234 -65.80899811]
[198.09902954 -51.50066376]
[194.51358032 -36.40350342]
[182.71711731 -26.32268333]
[167.24560547 -25.13448715]
[159.49511719 -12.29198265]
[151.99511719 0.69839823]
[144.74842834 13.83177185]
[137.50173950 26.96514511]
[140.66166687 48.26173782]
[122.25804138 60.77507401]
[117.12773895 74.87046814]
[111.99743652 88.96585083]
[116.29998779 99.96369934]
[112.04646301 110.98059845]
[101.46959686 116.23364258]
[95.79660034 130.11950684]
[90.12359619 144.00535583]
[103.37903595 136.98443604]
[118.09489441 134.07865906]
[133.02409363 135.53427124]
[146.90150452 141.22793579]
[158.55107117 150.67712402]
[166.98561096 163.08111572]
[171.49031067 177.38871765]
[171.68345642 192.38746643]
[167.54866028 206.80633545]
[159.43634033 219.42338562]
[148.03395081 229.16943359]
[134.30775452 235.21855164]
[119.42098236 237.05812073]
[104.63518524 234.53224182]
[91.20335388 227.85496521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[9 17]
[10 16]
[11 15]
[26 65]
[27 64]
[28 63]
[30 60]
[31 59]
[32 58]
[38 56]
[39 55]
[40 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
