%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUCCGCCUGGGCUAGGAAGCCCAGAGCUGCGGUUCGCAGGCCUGCUAAGCAGCCGGCGGCCGGAAGUCUAUCCCGCAGAAGCGCAGCCAUUCACGGCCUCACGCAAUGCGACACUUCCGCCUGCACGAGUUCUUCCGGGGCGGAGGUCACC\
) } def
/len { sequence length } bind def

/coor [
[80.90648651 243.99371338]
[78.15404510 228.81387329]
[84.06649017 214.56443787]
[96.75719452 205.79234314]
[96.15320587 190.80450439]
[95.54921722 175.81666565]
[94.94522858 160.82884216]
[94.34123993 145.84100342]
[93.73725128 130.85316467]
[93.13326263 115.86533356]
[79.16229248 110.40531158]
[68.55568695 121.01190948]
[57.94908524 131.61851501]
[47.34248352 142.22511292]
[36.73588181 152.83171082]
[26.12928009 163.43832397]
[15.52267838 174.04492188]
[11.80322552 190.01669312]
[-3.96494675 194.52189636]
[-15.56089497 182.92594910]
[-11.05570126 167.15777588]
[4.91607666 163.43832397]
[15.52267838 152.83171082]
[26.12928009 142.22511292]
[36.73588181 131.61851501]
[47.34248352 121.01190948]
[57.94908524 110.40531158]
[68.55568695 99.79870605]
[65.40888214 92.99079895]
[59.11527252 79.37498474]
[55.96846771 72.56707001]
[41.01710892 73.77407074]
[26.06575012 74.98107147]
[11.11438942 76.18806458]
[-3.83696985 77.39506531]
[-19.13821220 84.69631958]
[-30.38993645 72.01424408]
[-21.31826782 57.69149399]
[-5.04396820 62.44370651]
[9.90739155 61.23670959]
[24.85875130 60.02970886]
[39.81011200 58.82271194]
[54.76147079 57.61571121]
[87.25092316 67.35958099]
[100.59200287 91.92939758]
[109.60313416 79.93775177]
[118.61427307 67.94611359]
[127.62540436 55.95447159]
[126.59389496 43.06002426]
[134.39355469 33.24842072]
[146.39411926 31.46430969]
[155.64489746 19.65655899]
[164.89567566 7.84880590]
[167.74868774 -0.89046353]
[174.45356750 -4.10109854]
[183.94024658 -15.72017288]
[193.42692566 -27.33924675]
[202.79614258 -39.05325317]
[212.04692078 -50.86100769]
[221.17834473 -62.76130676]
[230.18946838 -74.75294495]
[239.20060730 -86.74459076]
[248.21174622 -98.73622894]
[250.31655884 -114.41680145]
[264.14788818 -119.94340515]
[273.15902710 -131.93504333]
[282.17016602 -143.92668152]
[291.18130493 -155.91833496]
[300.19244385 -167.90997314]
[309.20358276 -179.90161133]
[318.21469116 -191.89324951]
[314.07723999 -200.81127930]
[313.50863647 -210.56762695]
[316.54571533 -219.79542542]
[322.72323608 -227.21755981]
[331.14437866 -231.82341003]
[340.61102295 -233.00633240]
[349.79397583 -230.64329529]
[359.74081421 -241.87095642]
[369.68765259 -253.09861755]
[379.63449097 -264.32626343]
[377.27954102 -277.62268066]
[382.94677734 -289.66409302]
[394.35467529 -296.13113403]
[407.20928955 -294.84805298]
[417.38021851 -305.87313843]
[427.55111694 -316.89822388]
[426.03271484 -335.73730469]
[438.50866699 -349.50878906]
[456.77014160 -349.84118652]
[466.48889160 -361.26684570]
[476.20761108 -372.69253540]
[474.68624878 -388.42343140]
[484.79821777 -400.56933594]
[500.54434204 -401.92431641]
[512.58264160 -391.68447876]
[513.77105713 -375.92492676]
[503.40454102 -363.99554443]
[487.63330078 -362.97381592]
[477.91458130 -351.54812622]
[468.19583130 -340.12243652]
[471.56781006 -329.15313721]
[469.17556763 -317.80648804]
[461.50463867 -308.95040894]
[450.38961792 -304.88092041]
[438.57620239 -306.72732544]
[428.40530396 -295.70223999]
[418.23437500 -284.67715454]
[419.64385986 -267.94448853]
[408.31329346 -255.09851074]
[390.86215210 -254.37944031]
[380.91531372 -243.15177917]
[370.96847534 -231.92411804]
[361.02163696 -220.69645691]
[364.04913330 -200.53134155]
[351.12478638 -184.38525391]
[330.20632935 -182.88212585]
[321.19522095 -170.89047241]
[312.18408203 -158.89883423]
[303.17294312 -146.90719604]
[294.16180420 -134.91555786]
[285.15066528 -122.92391205]
[276.13952637 -110.93227386]
[274.67926025 -96.10942078]
[260.20336914 -89.72509766]
[251.19224548 -77.73345947]
[242.18112183 -65.74181366]
[233.16998291 -53.75017166]
[231.65722656 -46.47176361]
[223.85467529 -41.61022568]
[214.60388184 -29.80247116]
[212.94487000 -22.55600166]
[205.04600525 -17.85256767]
[195.55932617 -6.23349237]
[186.07264709 5.38558197]
[176.70343018 17.09958839]
[167.45265198 28.90734100]
[158.20187378 40.71509171]
[156.70504761 58.17558670]
[139.61705017 64.96560669]
[130.60591125 76.95724487]
[121.59477997 88.94889069]
[112.58364105 100.94052887]
[108.12110138 115.26134491]
[108.72509003 130.24917603]
[109.32907867 145.23701477]
[109.93306732 160.22485352]
[110.53705597 175.21267700]
[111.14104462 190.20051575]
[111.74503326 205.18835449]
[125.10044861 212.91082764]
[132.14031982 226.63829041]
[130.61827087 241.99040222]
[121.01997375 254.06831360]
[106.40821075 259.01803589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[45 143]
[46 142]
[47 141]
[48 140]
[51 138]
[52 137]
[53 136]
[55 135]
[56 134]
[57 133]
[58 131]
[59 130]
[60 128]
[61 127]
[62 126]
[63 125]
[65 123]
[66 122]
[67 121]
[68 120]
[69 119]
[70 118]
[71 117]
[78 114]
[79 113]
[80 112]
[81 111]
[85 108]
[86 107]
[87 106]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
