%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCGUGGCCCCGGCCCCGGCCCCGGCCCCCUGGCCCGGGCUGUGAGAUGAAUCUCUAAUCGGUGGCCGCCAGACACCCGCGGCGAAGGCGGCUCGGGCUCGGGCUCCGGAUGUGCUAGGUGUGGGCCGGCCCCCACCCGACCCUGACAAGUGACC\
) } def
/len { sequence length } bind def

/coor [
[251.65487671 749.14953613]
[260.95806885 737.18182373]
[273.79504395 729.12036133]
[270.61947632 714.46032715]
[260.36315918 703.65954590]
[265.00350952 688.53417969]
[261.82797241 673.87414551]
[251.81005859 667.03936768]
[249.06625366 654.81469727]
[255.60758972 643.66101074]
[252.71690369 628.94219971]
[249.82621765 614.22332764]
[246.93553162 599.50451660]
[232.59809875 590.75634766]
[228.92834473 574.02124023]
[238.66505432 559.51635742]
[235.48950195 544.85632324]
[232.31393433 530.19635010]
[229.13838196 515.53631592]
[225.96282959 500.87631226]
[222.78726196 486.21630859]
[219.61170959 471.55630493]
[206.98863220 463.73367310]
[203.55932617 448.91156006]
[211.85002136 435.72436523]
[208.67446899 421.06436157]
[205.49890137 406.40435791]
[201.19685364 392.03451538]
[195.79418945 378.04125977]
[190.39152527 364.04800415]
[184.98886108 350.05474854]
[171.30865479 344.27655029]
[165.63023376 330.16238403]
[171.78369141 315.85247803]
[166.38101196 301.85922241]
[160.97834778 287.86596680]
[149.17626953 278.77972412]
[151.42375183 263.11895752]
[146.02108765 249.12570190]
[140.61842346 235.13244629]
[135.21575928 221.13919067]
[129.81309509 207.14593506]
[124.41043091 193.15267944]
[119.00776672 179.15942383]
[113.60509491 165.16616821]
[108.20243073 151.17291260]
[102.79976654 137.17965698]
[97.39710236 123.18640137]
[91.99443054 109.19314575]
[82.57725525 97.51766968]
[70.04493713 89.27503204]
[57.51261902 81.03240204]
[44.98030090 72.78976440]
[28.58635139 72.37693024]
[20.98563004 57.84554672]
[29.99710846 44.14426041]
[46.35055161 45.36777496]
[53.22293472 60.25745010]
[65.75524902 68.50008392]
[78.28756714 76.74272156]
[90.81988525 84.98535156]
[97.35113525 81.29850769]
[89.97743988 68.23601532]
[82.60375214 55.17352676]
[71.55455017 45.02881622]
[77.78852081 31.38558960]
[92.69037628 33.09864426]
[95.66624451 47.79983521]
[103.03993225 60.86232376]
[110.41362762 73.92481995]
[116.94487000 70.23796844]
[116.36323547 55.24925232]
[115.78160858 40.26053238]
[115.19998169 25.27181244]
[114.61834717 10.28309345]
[101.27446747 2.54071236]
[94.25507355 -11.19725037]
[95.80002594 -26.54706001]
[105.41632843 -38.61064911]
[120.03546906 -43.53857040]
[134.99252319 -39.75833893]
[145.51473999 -28.47621918]
[148.24453735 -13.29228783]
[142.31083679 0.94831413]
[129.60707092 9.70146275]
[130.18869019 24.69018173]
[130.77032471 39.67890167]
[131.35195923 54.66762161]
[131.93359375 69.65634155]
[132.25755310 82.58537292]
[128.49340820 93.32308197]
[121.85923004 100.75813293]
[113.83486176 104.27229309]
[105.98768616 103.79048157]
[111.39035797 117.78373718]
[116.79302216 131.77699280]
[122.19568634 145.77024841]
[127.59835052 159.76350403]
[133.00102234 173.75675964]
[138.40368652 187.75001526]
[143.80635071 201.74327087]
[149.20901489 215.73652649]
[154.61167908 229.72978210]
[160.01434326 243.72303772]
[165.41700745 257.71627808]
[177.60552979 267.80343628]
[174.97160339 282.46331787]
[180.37426758 296.45657349]
[185.77694702 310.44982910]
[199.95019531 316.91174316]
[205.22993469 331.17987061]
[198.98211670 344.65206909]
[204.38478088 358.64532471]
[209.78744507 372.63858032]
[215.19010925 386.63183594]
[220.71726990 372.68728638]
[233.30442810 364.52865601]
[248.29040527 365.17715454]
[260.12570190 374.39266968]
[264.42758179 388.76257324]
[259.60299683 402.96548462]
[247.43853760 411.74194336]
[232.43887329 411.84188843]
[220.15892029 403.22879028]
[223.33447266 417.88879395]
[226.51002502 432.54879761]
[239.51457214 441.12316895]
[242.52619934 456.03573608]
[234.27171326 468.38073730]
[237.44728088 483.04074097]
[240.62283325 497.70077515]
[243.79838562 512.36077881]
[246.97395325 527.02075195]
[250.14950562 541.68078613]
[253.32505798 556.34082031]
[265.43753052 562.29870605]
[271.80017090 573.98211670]
[270.27886963 587.00219727]
[261.65435791 596.61383057]
[264.54504395 611.33264160]
[267.43572998 626.05151367]
[270.32641602 640.77032471]
[282.75299072 654.32849121]
[276.48797607 670.69860840]
[279.66354370 685.35858154]
[290.14700317 697.20794678]
[285.27947998 711.28479004]
[288.45504761 725.94476318]
[303.47729492 727.97155762]
[316.89895630 735.01678467]
[327.09927368 746.22973633]
[332.84652710 760.25628662]
[333.44668579 775.40277100]
[328.82733154 789.84008789]
[319.54620361 801.82495117]
[306.72409058 809.91009521]
[291.90933228 813.11920166]
[276.89083862 811.06469727]
[263.48220825 803.99475098]
[253.30256653 792.76306152]
[247.58116150 778.72595215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[6 145]
[7 144]
[10 142]
[11 141]
[12 140]
[13 139]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 126]
[26 125]
[27 124]
[28 115]
[29 114]
[30 113]
[31 112]
[34 109]
[35 108]
[36 107]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[49 94]
[50 61]
[51 60]
[52 59]
[53 58]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
