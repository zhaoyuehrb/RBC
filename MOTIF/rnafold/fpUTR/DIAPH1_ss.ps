%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUGAGGCGCGCGCAGCCCGGCAUGCUAAUGAGGCGGGGCGCGGCGGCUGGCUAAAGAGCGACUGGGCGGCGGCGGGCGCGGAGCUGCCAGGCGGGAGCGGCGUAGGCGCGGGGUCGCCGGCCAGCGUGAACCGGGAC\
) } def
/len { sequence length } bind def

/coor [
[101.99440765 231.82971191]
[113.82093048 221.92330933]
[111.83562469 207.05526733]
[109.85031128 192.18722534]
[107.86500549 177.31919861]
[105.87969971 162.45115662]
[103.89439392 147.58311462]
[91.49191284 139.14637756]
[76.93391418 142.76089478]
[65.40483093 153.59559631]
[51.18815613 149.15315247]
[36.63015747 152.76766968]
[22.07216072 156.38218689]
[14.42563915 161.52560425]
[7.15213346 159.91183472]
[-7.48226166 163.20341492]
[-22.11665726 166.49499512]
[-29.87508965 171.46798706]
[-37.11111450 169.69372559]
[-51.81474686 172.66075134]
[-66.51837921 175.62777710]
[-81.22200775 178.59480286]
[-93.21906281 188.90893555]
[-107.22531891 183.84199524]
[-121.92895508 186.80902100]
[-126.15930176 201.51829529]
[-136.74920654 212.56874084]
[-151.26518250 217.42106628]
[-166.37156677 214.96022034]
[-178.59701538 205.75170898]
[-185.13223267 191.91156006]
[-184.47544861 176.62014771]
[-176.77758789 163.39132690]
[-163.80758667 155.26498413]
[-148.54582214 154.10848999]
[-134.49937439 160.18760681]
[-124.89598083 172.10539246]
[-110.19235229 169.13836670]
[-99.24699402 159.03645325]
[-84.18903351 163.89117432]
[-69.48540497 160.92414856]
[-54.78177643 157.95712280]
[-40.07814407 154.99009705]
[-25.40823364 151.86059570]
[-10.77383900 148.56901550]
[3.86055565 145.27745056]
[18.45764542 141.82418823]
[33.01564026 138.20967102]
[47.57363892 134.59515381]
[58.06143951 124.01898956]
[73.31940460 128.20289612]
[87.87739563 124.58837891]
[75.87162781 105.42308044]
[82.72754669 86.29961395]
[74.84766388 73.53609467]
[66.96778870 60.77257156]
[52.28130722 53.47604752]
[51.52722931 37.09424591]
[65.48129272 28.47936058]
[79.78874207 36.49364471]
[79.73130798 52.89269257]
[87.61119080 65.65621185]
[95.49106598 78.41973877]
[114.20082855 80.85649872]
[125.52504730 97.73910522]
[119.94876862 118.80405426]
[133.64292908 112.68280029]
[147.33711243 106.56154633]
[161.03128052 100.44029236]
[170.47259521 87.74494171]
[185.24935913 89.61488342]
[198.94352722 83.49362946]
[212.63769531 77.37237549]
[226.33186340 71.25111389]
[240.02603149 65.12985992]
[253.72019958 59.00860977]
[267.41436768 52.88735580]
[273.32537842 36.46311569]
[288.96234131 29.49612427]
[304.50292969 35.83087921]
[318.05831909 29.40817833]
[331.61370850 22.98547745]
[345.16912842 16.56277847]
[348.04559326 -0.06686225]
[360.12710571 -11.61201000]
[376.54138184 -13.68917561]
[390.82891846 -5.67951918]
[404.23892212 -12.40052128]
[417.64892578 -19.12152290]
[431.05892944 -25.84252548]
[444.46893311 -32.56352615]
[446.00805664 -47.91392136]
[455.61978149 -59.98116684]
[470.23703003 -64.91464233]
[485.19552612 -61.14009476]
[495.72204590 -49.86197281]
[498.45761108 -34.67908096]
[492.52932739 -20.43622398]
[479.82885742 -11.67824841]
[464.40893555 -11.19979095]
[451.18994141 -19.15352440]
[437.77993774 -12.43252277]
[424.36993408 -5.71152163]
[410.95993042 1.00948024]
[397.54992676 7.73048210]
[396.59347534 21.09063911]
[389.08349609 32.31237411]
[376.90341187 38.38814163]
[363.20474243 37.62576294]
[351.59182739 30.11818123]
[338.03640747 36.54088211]
[324.48101807 42.96358109]
[310.92562866 49.38628006]
[308.31362915 62.05079651]
[298.72442627 71.01421356]
[285.52615356 72.81989288]
[273.53561401 66.58152008]
[259.84146118 72.70277405]
[246.14729309 78.82402802]
[232.45312500 84.94528961]
[218.75895691 91.06654358]
[205.06478882 97.18779755]
[191.37062073 103.30905151]
[182.90878296 115.56656647]
[167.15252686 114.13446045]
[153.45835876 120.25571442]
[139.76419067 126.37696838]
[126.07002258 132.49822998]
[118.76242828 145.59780884]
[120.74773407 160.46585083]
[122.73304749 175.33389282]
[124.71835327 190.20191956]
[126.70365906 205.06996155]
[128.68896484 219.93800354]
[142.70037842 226.39430237]
[150.97770691 239.41311646]
[150.87969971 254.84016418]
[142.43760681 267.75274658]
[128.34529114 274.03048706]
[113.09955597 271.67022705]
[101.56525421 261.42504883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[6 130]
[7 129]
[8 52]
[9 51]
[11 49]
[12 48]
[13 47]
[15 46]
[16 45]
[17 44]
[19 43]
[20 42]
[21 41]
[22 40]
[24 38]
[25 37]
[54 63]
[55 62]
[56 61]
[66 128]
[67 127]
[68 126]
[69 125]
[71 123]
[72 122]
[73 121]
[74 120]
[75 119]
[76 118]
[77 117]
[80 113]
[81 112]
[82 111]
[83 110]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
