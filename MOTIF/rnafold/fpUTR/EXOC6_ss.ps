%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGGACUGAGAGGAGCAGAAGACAGUGGGGUGGGAGUAGAGGGAGGGUGGGGAGAGCUGAGGAGCAGAGGGAAGCAACUGGGCCACCAGGACAGAAGACCUUGAAUCUCCAGGCUGAGCCGGCUGUACCGGAAGAGGAUGA\
) } def
/len { sequence length } bind def

/coor [
[-28.35825920 288.94567871]
[-39.12705231 282.40426636]
[-49.49974823 293.23971558]
[-46.88803482 308.42144775]
[-53.63769913 322.07046509]
[-66.97243500 329.04534912]
[-81.68123627 326.85693359]
[-92.05393219 337.69238281]
[-102.42662811 348.52786255]
[-112.79932404 359.36331177]
[-106.64517975 373.26278687]
[-106.28359222 388.45941162]
[-111.76968384 402.63583374]
[-122.26687622 413.63027954]
[-136.17442322 419.76611328]
[-151.37152100 420.10772705]
[-165.54072571 414.60296631]
[-176.52133179 404.09133911]
[-182.63887024 390.17572021]
[-182.96049500 374.97821045]
[-177.43711853 360.81625366]
[-166.91104126 349.84948730]
[-152.98739624 343.75024414]
[-137.78945923 343.44860840]
[-123.63478088 348.99063110]
[-113.26208496 338.15515137]
[-102.88938904 327.31970215]
[-92.51669312 316.48425293]
[-95.34460449 301.88488770]
[-88.95801544 288.25860596]
[-75.61641693 280.92001343]
[-60.33520889 282.86700439]
[-49.96251297 272.03155518]
[-59.11819458 257.11123657]
[-63.80730820 240.23257446]
[-63.65955734 222.70286560]
[-58.67954636 205.88182068]
[-49.24697113 191.07604980]
[-36.08766556 179.43762207]
[-20.21775246 171.87435913]
[-2.86519289 168.97908020]
[14.62523556 170.98309326]
[30.89615631 177.73779297]
[40.02757645 165.83747864]
[35.62709427 151.63278198]
[40.49226761 137.39219666]
[52.95563889 128.64476013]
[68.35798645 128.91658020]
[77.48941040 117.01627350]
[86.62082672 105.11597443]
[88.63604736 91.28013611]
[101.47886658 85.75260162]
[110.61029053 73.85230255]
[106.36131287 59.04512787]
[111.58493805 44.74243164]
[124.08107758 36.35729980]
[138.94070435 36.93139267]
[148.07212830 25.03109360]
[157.20353699 13.13079262]
[166.33496094 1.23049247]
[165.43498230 -11.68579769]
[173.34822083 -21.42112541]
[185.37985229 -23.06889725]
[194.76870728 -34.76716614]
[204.15756226 -46.46543121]
[213.54640198 -58.16370010]
[210.72665405 -76.83769989]
[222.19346619 -91.44238281]
[240.37118530 -93.07699585]
[249.24082947 -105.17366028]
[258.11047363 -117.27033234]
[266.98010254 -129.36700439]
[257.58514404 -143.01849365]
[253.41082764 -159.02969360]
[254.94003296 -175.47962952]
[261.97235107 -190.40083313]
[273.65026855 -202.01463318]
[288.56369019 -208.94317627]
[304.92007446 -210.37286377]
[320.76000977 -206.14991760]
[329.09356689 -218.62196350]
[337.42712402 -231.09400940]
[345.76068115 -243.56604004]
[346.29272461 -259.95657349]
[360.87899780 -267.45141602]
[374.51437378 -258.34051514]
[373.17196655 -241.99641418]
[358.23272705 -235.23249817]
[349.89916992 -222.76045227]
[341.56561279 -210.28840637]
[333.23205566 -197.81636047]
[341.78659058 -187.31373596]
[347.02584839 -174.80401611]
[348.51266479 -161.30622864]
[346.11599731 -147.92282104]
[340.02236938 -135.74961853]
[330.72143555 -125.78610992]
[318.96661377 -118.85337830]
[305.71398926 -115.52641296]
[292.04473877 -116.08648682]
[279.07678223 -120.49735260]
[270.20715332 -108.40068817]
[261.33749390 -96.30401611]
[252.46784973 -84.20734406]
[256.62692261 -73.48876190]
[255.04475403 -61.97943878]
[248.00331116 -52.58811951]
[237.17898560 -47.74532700]
[225.24467468 -48.77484894]
[215.85581970 -37.07658005]
[206.46696472 -25.37831306]
[197.07812500 -13.68004608]
[195.38563538 3.75467587]
[178.23526001 10.36191368]
[169.10385132 22.26221466]
[159.97242737 34.16251373]
[150.84100342 46.06281281]
[155.24148560 60.26752090]
[150.37631226 74.50810242]
[137.91293335 83.25554657]
[122.51058960 82.98372650]
[113.37917328 94.88402557]
[111.36395264 108.71986389]
[98.52113342 114.24739838]
[89.38970947 126.14769745]
[80.25828552 138.04800415]
[84.50726318 152.85516357]
[79.28364563 167.15786743]
[66.78749847 175.54299927]
[51.92787552 174.96890259]
[42.79645538 186.86920166]
[50.91633224 196.61267090]
[56.92668152 207.77473450]
[60.58803177 219.90567017]
[61.75550842 232.51721191]
[60.38455200 245.10227966]
[56.53262711 257.15527344]
[50.35681534 268.19250488]
[42.10741043 277.77154541]
[32.11777496 285.50894165]
[20.79086685 291.09558105]
[8.58298588 294.30905151]
[-4.01460409 295.02249146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[7 28]
[8 27]
[9 26]
[10 25]
[43 131]
[44 130]
[48 126]
[49 125]
[50 124]
[52 122]
[53 121]
[57 117]
[58 116]
[59 115]
[60 114]
[63 112]
[64 111]
[65 110]
[66 109]
[69 104]
[70 103]
[71 102]
[72 101]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
