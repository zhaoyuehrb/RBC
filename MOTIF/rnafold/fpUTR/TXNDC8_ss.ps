%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGAUACUGUAAUAAAUAGGAGACAGCUACAGUGAUCCAACUAAACCAACAGGGGAUUUUCAUCAGCACUUCCCUGGUGUAAUC\
) } def
/len { sequence length } bind def

/coor [
[83.00761414 151.59779358]
[70.88308716 145.86152649]
[60.53364563 137.32934570]
[52.59022522 126.52143860]
[47.53708649 114.09667969]
[45.68229294 100.81253052]
[30.79662514 98.96405029]
[15.91095638 97.11557770]
[1.02528703 95.26709747]
[-13.89068604 93.68162537]
[-28.83231735 92.35963440]
[-43.77394867 91.03765106]
[-58.71557999 89.71566010]
[-73.65721130 88.39366913]
[-88.59884644 87.07168579]
[-94.99600983 100.81403351]
[-105.70973206 111.53746033]
[-119.44627380 117.94706726]
[-134.54689026 119.26885986]
[-149.18811035 115.34322357]
[-161.60192871 106.64420319]
[-170.28930664 94.22223663]
[-174.20121765 79.57735443]
[-172.86528015 64.47798157]
[-166.44279480 50.74744415]
[-155.70933533 40.04377365]
[-141.96099854 33.65949631]
[-126.85797119 32.36553192]
[-112.22401428 36.31814575]
[-99.82624817 45.04003143]
[-91.16177368 57.47798157]
[-87.27685547 72.13005066]
[-72.33522797 73.45204163]
[-57.39359283 74.77402496]
[-42.45196152 76.09601593]
[-27.51033020 77.41800690]
[-12.56869888 78.73999023]
[-5.47155952 76.13527679]
[2.87376308 80.38143158]
[17.75943184 82.22990417]
[32.64509964 84.07838440]
[47.53076935 85.92685699]
[54.22288895 70.75056458]
[65.18243408 58.30095291]
[79.38773346 49.73860550]
[95.51454926 45.86171341]
[112.05950165 47.03169250]
[127.48025513 53.13947296]
[140.33923340 63.61567688]
[149.43772888 77.48368835]
[153.92755127 93.45072174]
[168.92521667 93.71544647]
[182.85978699 86.22290039]
[195.44851685 94.18361664]
[210.44618225 94.44834137]
[225.44384766 94.71307373]
[240.44151306 94.97779846]
[255.43917847 95.24252319]
[270.43682861 95.50724792]
[285.43450928 95.77198029]
[291.83496094 81.95336914]
[303.30688477 71.93762970]
[317.86267090 67.46004486]
[332.98046875 69.29639435]
[346.04101562 77.12850952]
[354.78149414 89.59943390]
[357.68756104 104.54850006]
[354.25573730 119.38569641]
[345.08056641 131.54039001]
[331.75177002 138.90670776]
[316.57858276 140.20837402]
[302.18988037 135.21989441]
[291.07858276 124.80552673]
[285.16976929 110.76964569]
[270.17211914 110.50491333]
[255.17445374 110.24018860]
[240.17678833 109.97546387]
[225.17912292 109.71073151]
[210.18145752 109.44600677]
[195.18379211 109.18128204]
[182.32196045 116.69275665]
[168.66047668 108.71311188]
[153.66282654 108.44837952]
[149.95704651 121.33931732]
[143.20570374 132.92932129]
[133.82037354 142.51182556]
[122.37322235 149.50265503]
[109.56211090 153.47560120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 42]
[7 41]
[8 40]
[9 39]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[51 83]
[52 82]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
