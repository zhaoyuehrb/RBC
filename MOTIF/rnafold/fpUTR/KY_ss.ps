%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAGCUGCGCGCACGGGGCCAUUUGCAGCGCAAGCAGCCUAGCGUGCGGCCGCGGCGCCCAGGUCGGAAAGGAGGCGGCAUC\
) } def
/len { sequence length } bind def

/coor [
[189.72814941 222.45639038]
[192.66662598 211.77275085]
[182.25550842 200.97421265]
[171.84439087 190.17565918]
[161.43328857 179.37710571]
[154.35797119 176.68455505]
[150.84809875 167.98887634]
[140.83831787 156.81729126]
[130.82853699 145.64570618]
[120.81875610 134.47412109]
[110.80897522 123.30253601]
[100.79919434 112.13095856]
[90.38807678 101.33240509]
[79.58952332 90.92128754]
[68.79097748 80.51017761]
[57.99242020 70.09906769]
[47.19387054 59.68795395]
[36.39531708 49.27684021]
[25.22373581 39.26705933]
[13.69402790 29.67196274]
[2.16432071 20.07686615]
[-9.36538601 10.48177147]
[-24.89178276 11.73427868]
[-36.44786072 1.83924282]
[-37.54624939 -12.97052193]
[-49.07595825 -22.56561661]
[-60.60566330 -32.16071320]
[-72.13536835 -41.75580597]
[-83.66507721 -51.35090256]
[-99.70746613 -56.83526611]
[-98.87840271 -73.76892853]
[-82.37700653 -77.65998077]
[-74.06998444 -62.88061142]
[-62.54027557 -53.28551483]
[-51.01057053 -43.69041824]
[-39.48086166 -34.09532547]
[-27.95115471 -24.50022888]
[-13.18823242 -26.11010742]
[-1.35878372 -16.54356194]
[0.22970904 -1.04793561]
[11.75941658 8.54716015]
[23.28912354 18.14225578]
[34.81882858 27.73735046]
[39.79498672 28.16032982]
[44.48817825 31.87449646]
[46.80643082 38.47828674]
[57.60498428 48.88940048]
[68.40353394 59.30051422]
[79.20208740 69.71162415]
[90.00064087 80.12274170]
[100.79919434 90.53385162]
[106.18731689 91.65863037]
[110.47320557 95.83378601]
[111.97077179 102.12117767]
[121.98055267 113.29275513]
[131.99034119 124.46434021]
[142.00012207 135.63592529]
[152.00990295 146.80751038]
[162.01968384 157.97909546]
[172.23184204 168.96598816]
[182.64294434 179.76454163]
[193.05406189 190.56309509]
[203.46517944 201.36164856]
[223.30335999 200.41658020]
[237.49308777 213.88711548]
[237.57749939 233.15701294]
[249.10719299 242.75210571]
[260.63690186 252.34719849]
[272.16662598 261.94229126]
[286.84826660 257.20388794]
[301.75518799 261.17724609]
[312.13058472 272.59451294]
[314.66375732 287.81250000]
[308.54635620 301.97515869]
[295.73043823 310.56326294]
[280.30548096 310.83636475]
[267.19357300 302.70733643]
[260.57864380 288.77011108]
[262.57153320 273.47201538]
[251.04180908 263.87689209]
[239.51210022 254.28181458]
[227.98239136 244.68672180]
[217.99990845 248.45486450]
[207.28143311 247.60533142]
[197.87463379 242.23030090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 43]
[20 42]
[21 41]
[22 40]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[66 82]
[67 81]
[68 80]
[69 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
