%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGGAGAAAGCGGCGCGCGGAGGGUGUGAGAUGGCAGACAGGUUUGCAGGAAACCCUCAGAAAGGGGGCUGGAGGAUUUAGCCACUCUGUCCUCCCCUUCCGGCAGUCCAGGGCCUCCUCCCGAGCACAGCGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[-66.03540802 613.68670654]
[-70.95578003 627.85675049]
[-75.87615204 642.02673340]
[-66.89881897 654.68328857]
[-67.10897064 670.19891357]
[-76.42580414 682.60760498]
[-91.26680756 687.13800049]
[-105.92530823 682.04803467]
[-114.76481628 669.29486084]
[-114.38636017 653.78240967]
[-104.93546295 641.47552490]
[-90.04618835 637.10638428]
[-85.12581635 622.93634033]
[-80.20544434 608.76629639]
[-75.44323730 594.54235840]
[-70.83977509 580.26617432]
[-66.23632050 565.99005127]
[-61.63286209 551.71392822]
[-57.02940369 537.43780518]
[-57.97798538 530.04675293]
[-52.16108704 522.89691162]
[-47.24071503 508.72686768]
[-54.37081909 499.70004272]
[-56.24084091 488.22796631]
[-52.26504898 477.17752075]
[-43.33356476 469.36795044]
[-31.61605644 466.85159302]
[-26.06933594 452.91479492]
[-20.52261734 438.97802734]
[-14.97589874 425.04122925]
[-10.05552578 410.87118530]
[-5.77126789 396.49603271]
[-1.48701012 382.12088013]
[-8.77605057 369.18234253]
[-4.63598347 354.54287720]
[8.98455524 346.98516846]
[13.26881313 332.61001587]
[17.55307198 318.23486328]
[8.77394867 309.71966553]
[4.45264482 298.20071411]
[5.47685671 285.86785889]
[11.71169758 275.09402466]
[22.01374626 267.97885132]
[34.44028473 265.93936157]
[39.36065674 251.76933289]
[36.22632980 237.20825195]
[48.06231689 226.70967102]
[52.98268890 212.53964233]
[57.90306091 198.36959839]
[62.82343674 184.19956970]
[59.68910980 169.63847351]
[71.52509308 159.13990784]
[76.44547272 144.96987915]
[81.36584473 130.79983521]
[86.28621674 116.62979889]
[71.46477509 100.40842438]
[76.62547302 73.25315857]
[72.34121704 58.87799835]
[68.05695343 44.50284195]
[63.77269745 30.12768555]
[59.48844147 15.75252819]
[46.11753082 6.88695860]
[44.85587692 -9.10640812]
[56.67131042 -19.95882988]
[72.50004578 -17.34525681]
[80.19962311 -3.27059913]
[73.86359406 11.46827030]
[78.14785767 25.84342766]
[82.43211365 40.21858597]
[86.71636963 54.59374237]
[91.00062561 68.96889496]
[98.35034180 70.46279144]
[113.04976654 73.45058441]
[120.39948273 74.94448090]
[129.95568848 63.38251877]
[139.51190186 51.82056046]
[149.06809998 40.25860214]
[158.62431335 28.69664574]
[168.18052673 17.13468742]
[177.73672485 5.57272863]
[171.76327515 -8.51898861]
[173.03436279 -23.77162552]
[181.25787354 -36.68024063]
[194.54412842 -44.27852631]
[209.84004211 -44.82044983]
[223.63072205 -38.18148804]
[232.74716187 -25.88722038]
[235.09448242 -10.76278019]
[230.13328552 3.71634555]
[219.00361633 14.22296047]
[204.26298523 18.34272194]
[189.29869080 15.12893677]
[179.74247742 26.69089508]
[170.18627930 38.25285339]
[160.63006592 49.81481171]
[151.07385254 61.37677002]
[141.51763916 72.93872833]
[131.96144104 84.50068665]
[130.15174866 106.60100555]
[116.64789581 120.24436188]
[100.45625305 121.55017853]
[95.53588104 135.72021484]
[90.61550903 149.89024353]
[85.69512939 164.06028748]
[88.47752380 179.63490295]
[76.99346924 189.11993408]
[72.07309723 203.28997803]
[67.15272522 217.46000671]
[62.23235321 231.63005066]
[65.01473999 247.20466614]
[53.53069305 256.68969727]
[48.61032104 270.85974121]
[59.40120697 285.34704590]
[59.39843369 303.25531006]
[48.78971863 317.48873901]
[31.92822838 322.51913452]
[27.64397049 336.89428711]
[23.35971260 351.26943970]
[30.62062836 365.05047607]
[26.07100105 379.56790161]
[12.88814640 386.40515137]
[8.60388851 400.78030396]
[4.31963110 415.15545654]
[5.54024506 419.51550293]
[5.28452969 423.61007690]
[3.82892275 426.99462891]
[1.56899476 429.36566162]
[-1.03911614 430.58795166]
[-6.58583498 444.52471924]
[-12.13255405 458.46151733]
[-17.67927361 472.39828491]
[-9.50750923 489.42004395]
[-16.17947769 506.74417114]
[-33.07067871 513.64721680]
[-37.99105072 527.81726074]
[-42.75326157 542.04125977]
[-47.35671997 556.31738281]
[-51.96017838 570.59350586]
[-56.56363678 584.86968994]
[-61.16709518 599.14581299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[21 135]
[22 134]
[27 131]
[28 130]
[29 129]
[30 128]
[31 123]
[32 122]
[33 121]
[36 118]
[37 117]
[38 116]
[44 112]
[45 111]
[47 109]
[48 108]
[49 107]
[50 106]
[52 104]
[53 103]
[54 102]
[55 101]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
