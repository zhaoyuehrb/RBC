%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGUGCGGCGCCAGCUCUGCAGAGCCCAGACAGGGUCCGGUUGGGGAGGUCCUCAGGUUCUGAAUCUUGUGCCUGGAGAACCAGAGAGGACCCUGGAGCAGGAGGAGAAAGAGAAGCUUGUCUCAGAAGCUCCACCUCCUCCUGGGGCA\
) } def
/len { sequence length } bind def

/coor [
[90.24837494 199.06904602]
[87.92678070 207.10295105]
[83.34040833 214.05511475]
[76.92081451 219.30796814]
[69.26128387 222.40211487]
[61.06200409 223.07644653]
[53.06607819 221.29008484]
[44.14992523 233.35250854]
[35.23377609 245.41494751]
[26.56716728 257.65789795]
[18.15375710 270.07620239]
[9.74034691 282.49453735]
[9.10314178 298.88128662]
[-5.53092194 306.28237915]
[-19.10757256 297.08419800]
[-17.66031647 280.74905396]
[-2.67796731 274.08111572]
[5.73544264 261.66281128]
[14.14885330 249.24449158]
[14.12718105 244.41242981]
[17.18283081 239.52870178]
[23.17134285 236.49879456]
[32.08749390 224.43635559]
[41.00364685 212.37393188]
[35.43051910 191.19828796]
[47.31989288 172.48884583]
[69.39066315 168.44392395]
[76.75690460 155.37724304]
[84.12314606 142.31054688]
[91.48938751 129.24385071]
[78.86807251 119.97173309]
[73.01358795 106.22662354]
[74.88925934 92.13170624]
[83.24779510 81.53223419]
[76.97839355 67.90525818]
[70.70898438 54.27827454]
[64.43958282 40.65129852]
[58.17017746 27.02431870]
[51.90077209 13.39733887]
[45.63136673 -0.22964039]
[39.36196136 -13.85661983]
[20.67372894 -13.74677944]
[4.03706551 -23.73741531]
[-5.31793404 -41.55422211]
[-4.00926018 -62.35420609]
[-16.84291458 -70.11934662]
[-29.67656708 -77.88447571]
[-42.51022339 -85.64961243]
[-55.34387589 -93.41474915]
[-71.74174500 -93.21029663]
[-79.88397980 -107.44532776]
[-71.39453888 -121.47605896]
[-55.00663757 -120.86888123]
[-47.57873917 -106.24840546]
[-34.74508667 -98.48326874]
[-21.91143227 -90.71813202]
[-9.07777882 -82.95299530]
[3.75587535 -75.18785858]
[16.08716011 -83.72831726]
[13.33091640 -98.47291565]
[10.57467365 -113.21751404]
[7.81843090 -127.96211243]
[5.06218815 -142.70671082]
[2.30594540 -157.45130920]
[-12.61874771 -160.21136475]
[-25.53650665 -168.17980957]
[-34.70030975 -180.27894592]
[-38.87082672 -194.87248230]
[-37.48403168 -209.98675537]
[-30.72747612 -223.57768250]
[-19.51492882 -233.80720520]
[-5.36279392 -239.29187012]
[9.81496716 -239.28991699]
[23.96568680 -233.80160522]
[35.17559814 -223.56918335]
[41.92864990 -209.97651672]
[43.31155014 -194.86189270]
[39.13727188 -180.26942444]
[29.97035408 -168.17265320]
[17.05054092 -160.20755005]
[19.80678368 -145.46295166]
[22.56302834 -130.71835327]
[25.31927109 -115.97375488]
[28.07551384 -101.22915649]
[30.83175659 -86.48456573]
[46.70367813 -82.82509613]
[59.38600922 -73.20825958]
[66.83513641 -59.56534958]
[68.00930786 -44.43885040]
[63.00531006 -30.51051331]
[52.98894119 -20.12602425]
[59.25834656 -6.49904537]
[65.52774811 7.12793350]
[71.79715729 20.75491333]
[78.06655884 34.38189316]
[84.33596802 48.00886917]
[90.60536957 61.63584900]
[96.87477875 75.26283264]
[111.58976746 76.37508392]
[123.85415649 85.92816162]
[129.04167175 101.41781616]
[124.60062408 117.95668793]
[138.41419983 123.80347443]
[152.22778320 129.65026855]
[166.04136658 135.49705505]
[179.85494995 141.34384155]
[193.66853333 147.19062805]
[207.48211670 153.03741455]
[221.29570007 158.88420105]
[235.10928345 164.73098755]
[244.93382263 156.88816833]
[257.09600830 154.00762939]
[269.25289917 156.58074951]
[279.08963013 164.05438232]
[284.76022339 174.94828796]
[285.23370361 187.14808655]
[298.79559326 193.55706787]
[307.95388794 194.40660095]
[312.56808472 200.23937988]
[325.99554443 206.92546082]
[339.42297363 213.61152649]
[352.85043335 220.29760742]
[367.11465454 213.88931274]
[382.14666748 218.19883728]
[390.84887695 231.19137573]
[389.11230469 246.73223877]
[377.75692749 257.48348999]
[362.14443970 258.36874390]
[349.64651489 248.97000122]
[346.16436768 233.72505188]
[332.73690796 227.03898621]
[319.30944824 220.35290527]
[305.88201904 213.66683960]
[292.38662720 207.11895752]
[278.82473755 200.70999146]
[263.80371094 209.90345764]
[246.11120605 208.27192688]
[232.79222107 196.27714539]
[229.26249695 178.54457092]
[215.44891357 172.69778442]
[201.63533020 166.85099792]
[187.82174683 161.00421143]
[174.00816345 155.15742493]
[160.19458008 149.31063843]
[146.38099670 143.46385193]
[132.56741333 137.61705017]
[118.75382996 131.77026367]
[104.55607605 136.61009216]
[97.18984222 149.67678833]
[89.82360077 162.74346924]
[82.45735931 175.81016541]
[87.40473175 182.67816162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 19]
[11 18]
[12 17]
[27 151]
[28 150]
[29 149]
[30 148]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[102 147]
[103 146]
[104 145]
[105 144]
[106 143]
[107 142]
[108 141]
[109 140]
[110 139]
[116 135]
[117 134]
[119 133]
[120 132]
[121 131]
[122 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
