%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:24 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DUXB)
} def

/sequence { (\
UUACUCGCUGAUCUCCGUGGAGUCCAGGUCUUCUGCCCAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 11 0.007999992 ubox
1 20 0.005076761 ubox
1 21 0.003211370 ubox
1 22 0.006703763 ubox
1 27 0.009197188 ubox
1 28 0.004721991 ubox
1 40 0.042260060 ubox
1 41 0.026726982 ubox
2 10 0.008852078 ubox
2 19 0.006467015 ubox
2 21 0.008200245 ubox
2 26 0.017810059 ubox
2 27 0.005695136 ubox
2 35 0.016904708 ubox
2 39 0.045417662 ubox
2 40 0.041057181 ubox
3 9 0.008544951 ubox
3 18 0.007388218 ubox
3 23 0.280767756 ubox
3 29 0.046821959 ubox
3 34 0.017547924 ubox
4 17 0.007617305 ubox
4 20 0.021593468 ubox
4 22 0.303354797 ubox
4 27 0.006536884 ubox
4 28 0.050501315 ubox
4 41 0.253548311 ubox
5 11 0.010483441 ubox
5 19 0.005024005 ubox
5 20 0.091604045 ubox
5 21 0.295861749 ubox
5 26 0.006057266 ubox
5 27 0.023350770 ubox
5 28 0.013790273 ubox
5 40 0.254649483 ubox
6 10 0.011108780 ubox
6 17 0.016670398 ubox
6 19 0.173528681 ubox
6 20 0.261097355 ubox
6 27 0.018122352 ubox
6 35 0.017735121 ubox
7 16 0.018316980 ubox
7 18 0.222662700 ubox
7 23 0.014347356 ubox
7 29 0.068353888 ubox
7 34 0.015577522 ubox
7 36 0.884432328 ubox
8 17 0.228828086 ubox
8 20 0.003520563 ubox
8 22 0.014851997 ubox
8 27 0.291252629 ubox
8 28 0.061740340 ubox
8 35 0.884061757 ubox
8 41 0.007667022 ubox
9 17 0.185264473 ubox
9 19 0.004351678 ubox
9 21 0.014288307 ubox
9 26 0.302848942 ubox
9 27 0.049248606 ubox
9 35 0.006776702 ubox
9 39 0.005950185 ubox
9 40 0.007639468 ubox
10 16 0.202154556 ubox
10 18 0.004194875 ubox
10 24 0.067465051 ubox
10 25 0.303068813 ubox
10 30 0.056554867 ubox
10 32 0.026637865 ubox
10 33 0.867130553 ubox
10 34 0.007807374 ubox
10 38 0.006311330 ubox
11 18 0.005667153 ubox
11 23 0.074407948 ubox
11 29 0.056823597 ubox
11 31 0.027759250 ubox
11 32 0.866039651 ubox
12 17 0.005806016 ubox
12 20 0.007710461 ubox
12 21 0.024718189 ubox
12 22 0.017804198 ubox
12 28 0.054401521 ubox
13 19 0.010948686 ubox
13 20 0.026646052 ubox
13 22 0.312725141 ubox
13 27 0.053877339 ubox
13 28 0.014896297 ubox
13 41 0.013036955 ubox
14 19 0.023824718 ubox
14 20 0.009251189 ubox
14 21 0.312869057 ubox
14 26 0.041705129 ubox
14 27 0.014144906 ubox
14 28 0.010666911 ubox
14 40 0.013044319 ubox
15 19 0.012518966 ubox
15 20 0.311657533 ubox
15 27 0.012683123 ubox
15 28 0.886183388 ubox
16 27 0.885306254 ubox
16 35 0.008787517 ubox
17 23 0.005969827 ubox
17 34 0.008459491 ubox
17 36 0.059430676 ubox
18 22 0.003189115 ubox
18 26 0.847513178 ubox
18 35 0.059282501 ubox
18 39 0.052754555 ubox
19 25 0.884127321 ubox
19 31 0.007223417 ubox
19 33 0.024600881 ubox
19 34 0.057480166 ubox
19 37 0.009221363 ubox
19 38 0.059102240 ubox
20 24 0.869932110 ubox
20 30 0.008119133 ubox
20 32 0.025492752 ubox
20 33 0.057891082 ubox
20 36 0.009577758 ubox
20 37 0.059143712 ubox
21 29 0.008058869 ubox
21 31 0.030062552 ubox
21 32 0.055627459 ubox
21 34 0.006365572 ubox
22 30 0.033731423 ubox
22 31 0.050935314 ubox
22 33 0.006553607 ubox
22 36 0.052917329 ubox
23 28 0.005784140 ubox
23 35 0.033203363 ubox
25 35 0.199199750 ubox
26 32 0.005134025 ubox
26 34 0.202383310 ubox
27 31 0.003827259 ubox
27 33 0.202395063 ubox
27 34 0.025607697 ubox
27 37 0.219730682 ubox
27 38 0.113406002 ubox
28 32 0.131141742 ubox
28 33 0.036755943 ubox
28 36 0.225628597 ubox
28 37 0.113517847 ubox
29 35 0.219322443 ubox
30 41 0.055444166 ubox
31 40 0.057052859 ubox
31 41 0.003517312 ubox
32 39 0.051787390 ubox
32 40 0.005229247 ubox
33 41 0.059557386 ubox
34 40 0.061286819 ubox
7 36 0.9500000 lbox
8 35 0.9500000 lbox
10 33 0.9500000 lbox
11 32 0.9500000 lbox
15 28 0.9500000 lbox
16 27 0.9500000 lbox
18 26 0.9500000 lbox
19 25 0.9500000 lbox
20 24 0.9500000 lbox
showpage
end
%%EOF
