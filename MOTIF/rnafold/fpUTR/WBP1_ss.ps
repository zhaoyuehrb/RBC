%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACGAUGAUGAUUGGUAGGGCAGAGCAAUCUGAGUCCUAGUUGGUGGAGUUCUGCCCGGAUGGAAGCUCCGGCCGCGGAGUGAUGGUGGCCUCAGCGAAGAUGGGCCGGGCAGGGACCAUGGCGGUGGCAGCAGAGGUGGCAGGGGCGGGGCGGCUGGCGGUAGAGGAGGCUGUGGUCCUCAGGGGGCUGUAGGUGGAGGU\
) } def
/len { sequence length } bind def

/coor [
[109.49188232 215.86413574]
[107.30520630 201.02438354]
[105.11853027 186.18461609]
[102.93185425 171.34486389]
[95.51197815 172.43820190]
[90.74510193 186.66059875]
[85.97823334 200.88301086]
[81.21135712 215.10542297]
[85.00107574 231.06068420]
[72.89412689 242.12203979]
[57.34510040 236.91053772]
[54.34950256 220.78730774]
[66.98895264 210.33854675]
[71.75582123 196.11614990]
[76.52268982 181.89373779]
[81.28956604 167.67132568]
[68.44060516 161.03665161]
[57.49283600 152.06797791]
[48.84561920 141.25665283]
[42.77916336 129.15632629]
[28.71029663 134.35891724]
[14.64142799 139.56150818]
[0.57255977 144.76409912]
[-13.49630833 149.96669006]
[-27.56517601 155.16928101]
[-41.63404465 160.37187195]
[-55.70291138 165.57446289]
[-69.77178192 170.77705383]
[-55.77336121 176.16632080]
[-47.51636887 188.68919373]
[-48.07799149 203.67866516]
[-57.24892426 215.54855347]
[-71.61137390 219.87519836]
[-85.81280518 215.04618835]
[-94.56067657 202.86116028]
[-94.59487152 187.86120605]
[-85.90257263 175.63638306]
[-100.50414276 179.07064819]
[-115.10571289 182.50489807]
[-120.98561096 196.86479187]
[-134.20075989 204.99742126]
[-149.66964722 203.77561951]
[-161.44419861 193.66920471]
[-164.99684143 178.56430054]
[-158.96151733 164.26904297]
[-145.65893555 156.28024292]
[-130.20419312 157.66978455]
[-118.53997040 167.90333557]
[-103.93840027 164.46907043]
[-89.33683014 161.03482056]
[-74.97437286 156.70819092]
[-60.90550232 151.50559998]
[-46.83663559 146.30300903]
[-32.76776886 141.10041809]
[-18.69889832 135.89782715]
[-4.63003063 130.69523621]
[9.43883801 125.49264526]
[23.50770569 120.29005432]
[37.57657242 115.08746338]
[35.77922440 100.08731842]
[37.53577805 85.08233643]
[42.74903107 70.90288544]
[51.13048553 58.33363342]
[62.21632004 48.07015228]
[75.39305878 40.68040466]
[89.93151855 36.57333755]
[105.02716064 35.97623062]
[119.84460449 38.92211914]
[126.11400604 25.29514122]
[132.38340759 11.66816235]
[138.54769897 -2.00668693]
[144.60652161 -15.72859478]
[150.66532898 -29.45050240]
[156.72415161 -43.17240906]
[162.78295898 -56.89431763]
[168.84178162 -70.61622620]
[174.90058899 -84.33813477]
[180.95941162 -98.06004333]
[173.32991028 -111.44274902]
[175.02371216 -126.57498169]
[185.18296814 -137.67694092]
[199.75700378 -140.63252258]
[205.81581116 -154.35443115]
[196.87045288 -166.76119995]
[195.34628296 -181.87985229]
[201.55300903 -195.64004517]
[213.73243713 -204.38748169]
[228.55519104 -205.85423279]
[234.61401367 -219.57612610]
[233.11015320 -235.32569885]
[245.32901001 -243.84327698]
[251.38781738 -257.56518555]
[257.44662476 -271.28707886]
[263.50546265 -285.00900269]
[269.56427002 -298.73089600]
[268.06042480 -314.48046875]
[280.27926636 -322.99804688]
[286.33807373 -336.71997070]
[277.39273071 -349.12673950]
[275.86856079 -364.24539185]
[282.07525635 -378.00558472]
[294.25469971 -386.75302124]
[309.07745361 -388.21975708]
[315.13626099 -401.94165039]
[311.21279907 -414.23245239]
[316.54595947 -425.53863525]
[327.78192139 -430.02911377]
[334.05133057 -443.65606689]
[340.32073975 -457.28305054]
[346.59014893 -470.91003418]
[352.75442505 -484.58489990]
[358.81326294 -498.30679321]
[352.87109375 -512.95147705]
[359.10156250 -527.47583008]
[373.80825806 -533.26281738]
[388.26589966 -526.87915039]
[393.89709473 -512.11206055]
[387.36090088 -497.72271729]
[372.53515625 -492.24798584]
[366.47634888 -478.52606201]
[366.65048218 -471.13327026]
[360.21713257 -464.64062500]
[353.94772339 -451.01364136]
[347.67831421 -437.38668823]
[341.40890503 -423.75970459]
[343.96963501 -406.40093994]
[328.85818481 -395.88284302]
[322.79937744 -382.16094971]
[331.70144653 -370.21865845]
[333.44226074 -355.32482910]
[327.45477295 -341.46783447]
[315.25512695 -332.40884399]
[300.05996704 -330.66113281]
[294.00115967 -316.93923950]
[295.93838501 -302.17114258]
[283.28616333 -292.67208862]
[277.22735596 -278.95019531]
[271.16854858 -265.22827148]
[265.10974121 -251.50636292]
[259.05090332 -237.78445435]
[260.98812866 -223.01637268]
[248.33592224 -213.51731873]
[242.27709961 -199.79541016]
[251.17919922 -187.85311890]
[252.91999817 -172.95930481]
[246.93252563 -159.10229492]
[234.73287964 -150.04330444]
[219.53771973 -148.29562378]
[213.47891235 -134.57371521]
[221.11317444 -121.81220245]
[219.75297546 -106.82508087]
[209.71122742 -95.37882996]
[194.68132019 -92.00122833]
[188.62249756 -78.27931976]
[182.56369019 -64.55741119]
[176.50486755 -50.83550262]
[170.44606018 -37.11359406]
[164.38723755 -23.39168739]
[158.32843018 -9.66977978]
[152.26960754 4.05212831]
[152.44374084 11.44493961]
[146.01039124 17.93756676]
[139.74098206 31.56454659]
[133.47158813 45.19152451]
[145.35174561 53.59466934]
[155.14515686 64.55915070]
[162.30320740 77.57135010]
[166.40278625 92.00110626]
[167.17074585 107.13215637]
[164.50106812 122.19769287]
[158.46368408 136.41920471]
[149.30416870 149.04672241]
[137.43444824 159.39823914]
[146.10105896 171.64118958]
[154.76765442 183.88414001]
[163.43426514 196.12710571]
[172.10087585 208.37005615]
[180.76748657 220.61300659]
[189.43409729 232.85595703]
[198.10069275 245.09890747]
[206.76730347 257.34185791]
[215.43391418 269.58480835]
[229.52035522 279.01925659]
[224.35414124 295.16690063]
[207.40739441 294.67269897]
[203.19096375 278.25143433]
[194.52435303 266.00848389]
[185.85774231 253.76551819]
[177.19113159 241.52256775]
[168.52453613 229.27961731]
[159.85792542 217.03666687]
[151.19131470 204.79370117]
[142.52470398 192.55075073]
[133.85809326 180.30780029]
[125.19149017 168.06484985]
[117.77161407 169.15818787]
[119.95829010 183.99794006]
[122.14496613 198.83770752]
[124.33163452 213.67745972]
[126.51831055 228.51722717]
[133.18353271 241.95503235]
[122.46295166 252.44641113]
[109.17229462 245.49238586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[37 50]
[38 49]
[39 48]
[68 164]
[69 163]
[70 162]
[71 160]
[72 159]
[73 158]
[74 157]
[75 156]
[76 155]
[77 154]
[78 153]
[82 149]
[83 148]
[88 143]
[89 142]
[91 140]
[92 139]
[93 138]
[94 137]
[95 136]
[97 134]
[98 133]
[103 128]
[104 127]
[107 125]
[108 124]
[109 123]
[110 122]
[111 120]
[112 119]
[173 195]
[174 194]
[175 193]
[176 192]
[177 191]
[178 190]
[179 189]
[180 188]
[181 187]
[182 186]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
