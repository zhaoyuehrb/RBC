%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUCAAUUGCGUGUGUUUCAGAAAGUCUGUAUAAAAUUCUCUGCAGUGGCAGAUCAUAGCAAGGGAUGGUUUAACAAA\
) } def
/len { sequence length } bind def

/coor [
[127.62174225 325.60726929]
[129.93692017 310.60714722]
[137.51782227 297.45822144]
[149.33920288 287.93878174]
[144.75932312 273.65505981]
[140.17942810 259.37133789]
[126.85833740 252.80751038]
[122.01020050 238.38702393]
[128.98527527 224.45913696]
[124.40538788 210.17543030]
[119.82550049 195.89170837]
[115.24561310 181.60798645]
[110.07036591 176.05700684]
[110.77671814 166.68084717]
[106.75412750 152.23028564]
[102.73153687 137.77972412]
[98.70895386 123.32915497]
[86.07188416 121.19213104]
[75.52840424 112.22204590]
[70.70967865 98.15346527]
[73.94042206 82.58499146]
[60.40790939 76.11419678]
[46.87540054 69.64340973]
[33.34288788 63.17261887]
[16.44503212 61.79464722]
[13.09135818 45.17570496]
[28.13243675 37.35251617]
[39.81367874 49.64010620]
[53.34619141 56.11089706]
[66.87870026 62.58168793]
[80.41120911 69.05248260]
[71.63758087 56.88599396]
[59.95541763 47.47711182]
[54.95444489 33.33531952]
[58.12470245 18.67416382]
[68.52161407 7.86193609]
[83.04741669 4.12013626]
[97.37414551 8.56363487]
[107.23316193 19.86849022]
[109.68697357 34.66642380]
[104.00402832 48.54893494]
[102.19998932 63.44005203]
[110.92237091 51.23677444]
[119.64475250 39.03349304]
[128.36712646 26.83020973]
[137.08950806 14.62692928]
[138.13772583 -1.73868382]
[152.95289612 -8.77022839]
[166.29444885 0.76574576]
[164.43774414 17.05944633]
[149.29278564 23.34930992]
[140.57040405 35.55259323]
[131.84802246 47.75587082]
[123.12564850 59.95915222]
[114.40326691 72.16243744]
[127.30404663 98.34880066]
[113.15951538 119.30656433]
[117.18210602 133.75712585]
[121.20468903 148.20768738]
[125.22727966 162.65824890]
[129.52932739 177.02809143]
[134.10922241 191.31181335]
[138.68910217 205.59553528]
[143.26899719 219.87925720]
[157.04254150 227.15435791]
[161.48373413 241.70532227]
[154.46315002 254.79145813]
[159.04304504 269.07516479]
[163.62292480 283.35888672]
[178.77571106 284.22940063]
[192.58917236 290.51849365]
[203.19514465 301.37564087]
[209.15928650 315.33248901]
[209.67498779 330.50149536]
[204.67248535 344.83114624]
[194.82833862 356.38351440]
[181.47389221 363.59622192]
[166.41522217 365.49383545]
[151.68888855 361.81967163]
[139.28649902 353.07064819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 69]
[5 68]
[6 67]
[9 64]
[10 63]
[11 62]
[12 61]
[14 60]
[15 59]
[16 58]
[17 57]
[21 31]
[22 30]
[23 29]
[24 28]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
