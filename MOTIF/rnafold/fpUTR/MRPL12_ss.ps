%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCGGCUCGAAUGCCCGGCAGCCGUGGCGGCUAGAGCGUUCCUCCCCAGCUCGAAUGCCCGGCGGCCGAGGCGGCUAGAGCGUCGCCUCCUCCCGGGGAACCGCGUGUGACCUUCCAGCCCGCGGACCG\
) } def
/len { sequence length } bind def

/coor [
[105.62052917 163.86991882]
[118.17616272 155.66284180]
[133.09082031 157.24874878]
[124.15977478 145.19734192]
[115.22872925 133.14593506]
[106.29769135 121.09452057]
[91.30187225 121.44879913]
[82.94992065 133.90852356]
[74.59796143 146.36825562]
[77.90383911 161.82292175]
[69.24334717 175.04302979]
[53.75459290 178.18533325]
[40.62678146 169.38555908]
[37.64841461 153.86444092]
[46.58650208 140.83039856]
[62.13823318 138.01629639]
[70.49018860 125.55657196]
[78.84214783 113.09684753]
[75.67727661 98.43452454]
[62.92950821 90.52918243]
[50.18173981 82.62384033]
[37.43397141 74.71850586]
[21.62814713 74.02104950]
[14.88959312 60.73793793]
[2.14182496 52.83259583]
[-10.60594273 44.92725754]
[-23.35371208 37.02191544]
[-32.38975525 35.12887573]
[-36.30610657 28.77630043]
[-48.86360550 20.57207870]
[-61.42110062 12.36785698]
[-73.97859955 4.16363430]
[-86.51262665 10.02685165]
[-100.19657135 8.91506863]
[-111.44046021 1.22791350]
[-117.34800720 -10.92415619]
[-116.46234894 -24.29821968]
[-128.82257080 -32.79674530]
[-141.18280029 -41.29527283]
[-153.54301453 -49.79380035]
[-167.05256653 -42.60000229]
[-182.35786438 -42.52000809]
[-195.94186401 -49.57219696]
[-204.68307495 -62.13603210]
[-206.57281494 -77.32443237]
[-201.17684937 -91.64720917]
[-189.73510742 -101.81310272]
[-174.87684631 -105.48606873]
[-160.01637268 -101.82206726]
[-148.56851196 -91.66307831]
[-143.16390991 -77.34355927]
[-145.04447937 -62.15401840]
[-132.68426514 -53.65549469]
[-120.32404327 -45.15696716]
[-107.96382904 -36.65843964]
[-92.72018433 -42.63110352]
[-76.75143433 -38.33113861]
[-66.36200714 -25.25235367]
[-65.77437592 -8.39386272]
[-53.21688080 -0.18964063]
[-40.65938187 8.01458168]
[-28.10188484 16.21880341]
[-15.44837093 24.27414703]
[-2.70060253 32.17948914]
[10.04716587 40.08482742]
[22.79493332 47.99016953]
[37.68895340 48.12217712]
[45.33931351 61.97073364]
[58.08708191 69.87607574]
[70.83484650 77.78141785]
[83.58261871 85.68675995]
[101.73676300 60.76614380]
[111.49867249 49.37733078]
[121.26058197 37.98851395]
[131.02249146 26.59970284]
[140.78440857 15.21088886]
[150.54632568 3.82207537]
[160.30822754 -7.56673813]
[158.84642029 -23.30327606]
[169.00431824 -35.41082001]
[184.75543213 -36.70618057]
[196.75489807 -26.42084312]
[197.88365173 -10.65691471]
[187.47203064 1.23314512]
[171.69705200 2.19517422]
[161.93513489 13.58398724]
[152.17321777 24.97280121]
[142.41131592 36.36161423]
[132.64939880 47.75042725]
[122.88748932 59.13924026]
[113.12557220 70.52805328]
[120.72762299 83.45898438]
[135.42630005 80.46749878]
[147.34257507 69.20098114]
[162.97833252 74.14617157]
[166.24885559 90.21588898]
[153.78970337 100.87898254]
[138.41778564 95.16616821]
[123.71910858 98.15765381]
[118.34909821 112.16347504]
[127.28014374 124.21488953]
[136.21118164 136.26629639]
[145.14222717 148.31770325]
[155.03796387 159.59043884]
[165.83079529 170.00747681]
[176.62362671 180.42451477]
[187.41645813 190.84156799]
[198.20928955 201.25860596]
[213.51213074 205.27525330]
[217.29637146 219.68110657]
[228.08920288 230.09815979]
[243.07957458 226.45230103]
[257.65390015 231.51121521]
[267.16156006 243.66061401]
[268.56869507 259.02368164]
[261.42630005 272.69808960]
[248.01347351 280.32040405]
[232.61021423 279.45837402]
[220.13163757 270.38708496]
[214.55961609 256.00109863]
[217.67216492 240.89099121]
[206.87933350 230.47393799]
[192.34844971 227.20239258]
[187.79225159 212.05143738]
[176.99942017 201.63439941]
[166.20658875 191.21734619]
[155.41375732 180.80030823]
[144.62092590 170.38327026]
[144.26078796 185.37893677]
[134.49559021 196.76495361]
[119.72988129 199.40570068]
[106.62360382 192.11012268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 103]
[4 102]
[5 101]
[6 100]
[7 18]
[8 17]
[9 16]
[19 71]
[20 70]
[21 69]
[22 68]
[24 66]
[25 65]
[26 64]
[27 63]
[29 62]
[30 61]
[31 60]
[32 59]
[37 55]
[38 54]
[39 53]
[40 52]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[92 99]
[93 98]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
