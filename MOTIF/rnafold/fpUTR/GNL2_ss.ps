%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCUCUGAGGCCGAGAGGGACGCGAGCGGAAGUGACGUACGUCGUGCACACGUGGUCCGGCGUGGUUCAGGCGGGUGUCUUCGGCCGGGCUUGGGAACAUAAAAGUUUGUUUCACCACGUAAGCCGGACCUCGCACUCCGGUCCCGGUCUCGUCGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[64.04328156 463.42910767]
[53.96643448 451.74746704]
[51.82745361 436.46908569]
[58.30887604 422.46929932]
[71.34250641 414.21530151]
[71.34250641 399.21530151]
[60.66163254 388.89764404]
[60.44795227 373.68548584]
[71.34250641 362.55236816]
[71.34250641 347.55236816]
[71.34250641 332.55236816]
[71.34250641 317.55236816]
[71.34250641 302.55236816]
[71.34250641 287.55236816]
[71.34250641 272.55236816]
[69.40834045 270.46243286]
[68.20555115 267.46276855]
[68.09156799 263.83551025]
[69.31233978 259.98913574]
[71.96105957 256.41513062]
[73.10929871 241.45915222]
[74.25753784 226.50317383]
[75.40577698 211.54718018]
[76.55401611 196.59118652]
[66.69429016 185.48617554]
[67.64571381 170.30232239]
[79.36053467 160.03582764]
[80.50877380 145.07984924]
[81.65701294 130.12385559]
[76.28815460 144.13011169]
[62.32618713 149.61312866]
[48.86111069 143.00315857]
[44.65942764 128.60365295]
[52.45666504 115.78946686]
[67.17595673 112.90325928]
[52.24470901 111.46875000]
[37.31345749 110.03424072]
[22.36915588 108.74280548]
[7.41316891 107.59456635]
[-7.54281807 106.44632721]
[-20.60897064 115.75521088]
[-35.99331284 111.20531464]
[-41.89429855 96.28694153]
[-33.78519058 82.44418335]
[-17.88660812 80.29602051]
[-6.39457941 91.49034119]
[8.56140804 92.63858032]
[23.51739502 93.78681946]
[30.45973206 91.15110016]
[38.74796677 95.10298920]
[53.67921448 96.53749847]
[68.61046600 97.97200775]
[83.13000488 78.80777740]
[103.65605927 77.57703400]
[110.82186127 64.39934540]
[110.61716461 48.57946777]
[123.49454498 41.09466553]
[130.66033936 27.91698074]
[137.82614136 14.73929691]
[144.99194336 1.56161296]
[152.15773010 -11.61607075]
[159.32353210 -24.79375458]
[166.48933411 -37.97143936]
[173.65512085 -51.14912033]
[180.31092834 -64.59160614]
[186.44696045 -78.27915955]
[192.58297729 -91.96671295]
[198.71900940 -105.65426636]
[204.85504150 -119.34181976]
[194.11189270 -127.79659271]
[190.95883179 -144.99774170]
[191.82037354 -159.97297668]
[192.68193054 -174.94821167]
[193.54347229 -189.92344666]
[194.40501404 -204.89869690]
[185.74209595 -221.12341309]
[195.88536072 -235.41970825]
[196.45989990 -250.40870667]
[197.03443909 -265.39770508]
[185.32841492 -275.76605225]
[183.07685852 -291.24069214]
[191.34291077 -304.51498413]
[206.22357178 -309.32116699]
[220.69267273 -303.38998413]
[227.91833496 -289.52188110]
[224.48881531 -274.26501465]
[212.02343750 -264.82315063]
[211.44889832 -249.83416748]
[210.87435913 -234.84516907]
[218.87431335 -225.73284912]
[218.48956299 -213.21157837]
[209.38026428 -204.03713989]
[208.51870728 -189.06190491]
[207.65716553 -174.08666992]
[206.79560852 -159.11143494]
[205.93406677 -144.13618469]
[219.11175537 -136.97039795]
[231.21313477 -145.83360291]
[243.31452942 -154.69680786]
[255.41590881 -163.56001282]
[267.51730347 -172.42321777]
[279.61868286 -181.28642273]
[279.42456055 -196.80229187]
[288.41497803 -209.44950867]
[303.13293457 -214.36495972]
[317.91906738 -209.65856934]
[327.08779907 -197.14001465]
[327.11358643 -181.62297058]
[317.98648071 -169.07402039]
[303.21609497 -164.31852722]
[288.48190308 -169.18504333]
[276.38049316 -160.32183838]
[264.27911377 -151.45863342]
[252.17773438 -142.59542847]
[240.07633972 -133.73220825]
[227.97496033 -124.86901093]
[218.54260254 -113.20579529]
[212.40657043 -99.51824188]
[206.27053833 -85.83068085]
[200.13450623 -72.14312744]
[193.99847412 -58.45557404]
[194.90847778 -55.75729370]
[194.77896118 -52.52806854]
[193.39916992 -49.17155075]
[190.71179199 -46.16110611]
[186.83280945 -43.98332596]
[179.66700745 -30.80564117]
[172.50122070 -17.62795639]
[165.33541870 -4.45027351]
[158.16961670 8.72741032]
[151.00382996 21.90509415]
[143.83802795 35.08277893]
[136.67222595 48.26045990]
[137.38946533 63.13778687]
[123.99954224 71.56514740]
[116.83374786 84.74282837]
[125.57060242 101.75917053]
[118.32475281 121.88393402]
[96.61299896 131.27209473]
[95.46475983 146.22808838]
[94.31652069 161.18406677]
[104.32687378 173.11849976]
[102.94934845 188.26963806]
[91.51000214 197.73942566]
[90.36176300 212.69541931]
[89.21352386 227.65141296]
[88.06528473 242.60739136]
[86.91704559 257.56338501]
[86.34250641 272.55236816]
[86.34250641 287.55236816]
[86.34250641 302.55236816]
[86.34250641 317.55236816]
[86.34250641 332.55236816]
[86.34250641 347.55236816]
[86.34250641 362.55236816]
[97.23706055 373.68548584]
[97.02337646 388.89764404]
[86.34250641 399.21530151]
[86.34250641 414.21530151]
[99.37613678 422.46929932]
[105.85755920 436.46908569]
[103.71857452 451.74746704]
[93.64173126 463.42910767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 159]
[6 158]
[9 155]
[10 154]
[11 153]
[12 152]
[13 151]
[14 150]
[15 149]
[20 148]
[21 147]
[22 146]
[23 145]
[24 144]
[27 141]
[28 140]
[29 139]
[35 52]
[36 51]
[37 50]
[38 48]
[39 47]
[40 46]
[54 136]
[55 135]
[57 133]
[58 132]
[59 131]
[60 130]
[61 129]
[62 128]
[63 127]
[64 126]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[71 96]
[72 95]
[73 94]
[74 93]
[75 92]
[77 89]
[78 88]
[79 87]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
