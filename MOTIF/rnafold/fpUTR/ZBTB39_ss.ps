%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:49:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGGCCGCGGCCGGCGGCGCCGCCUCCUCGUCGGGCCGGGCACGGCGGGCCGGGGCCUUUGUGUGAAGCGGCGGCGGCGAUGGUGCUCGGGGCGCCGCAGAGCCGGAUUAACUGUGCUGAUAAGGAGGUAAUUUCAUAGGAGCUGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[111.63948059 448.99337769]
[102.95663452 461.22482300]
[89.09425354 466.95495605]
[74.30929565 464.42410278]
[63.14205933 454.40948486]
[59.02185440 439.98510742]
[52.79063034 453.62957764]
[46.55940247 467.27407837]
[48.65602875 483.53863525]
[35.45644760 493.27017212]
[20.53925705 486.45773315]
[19.24998474 470.10934448]
[32.91492462 461.04284668]
[39.14614868 447.39834595]
[45.37737274 433.75387573]
[50.33155823 419.59564209]
[53.96698761 405.04284668]
[57.60241318 390.49005127]
[61.23783875 375.93725586]
[64.87326050 361.38446045]
[68.50868988 346.83169556]
[64.08666992 332.60864258]
[74.93792725 321.09512329]
[78.57335663 306.54232788]
[80.85940552 291.71755981]
[81.77683258 276.74563599]
[82.69425201 261.77374268]
[83.61167908 246.80180359]
[84.52910614 231.82989502]
[85.44652557 216.85797119]
[86.36395264 201.88606262]
[79.41956329 188.70938110]
[87.98641968 175.40827942]
[88.90383911 160.43635559]
[89.82126617 145.46443176]
[90.73869324 130.49252319]
[91.65611267 115.52059937]
[80.33213806 104.88901520]
[80.96495056 87.24832153]
[74.45669556 73.73378754]
[67.94843292 60.21925735]
[61.44017792 46.70472336]
[54.93192291 33.19019318]
[48.42366791 19.67565918]
[41.91541290 6.16112566]
[35.40715408 -7.35340738]
[21.39029884 -7.67951727]
[8.94672203 -13.99470997]
[0.48900369 -25.01041412]
[-2.37084222 -38.53310776]
[0.87162364 -51.90099716]
[9.52538300 -62.50794601]
[3.29415798 -76.15242767]
[-2.93706727 -89.79690552]
[-9.16829205 -103.44138336]
[-23.70319366 -109.04267120]
[-29.82817078 -122.96887970]
[-24.39862823 -136.79116821]
[-30.62985229 -150.43565369]
[-36.86107635 -164.08012390]
[-49.63197327 -173.41902161]
[-47.88097763 -188.21034241]
[-54.11220169 -201.85481262]
[-69.00575256 -207.14233398]
[-75.72271729 -221.44819641]
[-70.27803802 -236.28500366]
[-55.90195465 -242.85035706]
[-41.12353134 -237.24911499]
[-34.71055222 -222.80441284]
[-40.46772385 -208.08604431]
[-34.23649597 -194.44155884]
[-21.91130066 -186.07862854]
[-23.21659851 -170.31135559]
[-16.98537254 -156.66687012]
[-10.75414753 -143.02238464]
[3.24763513 -138.07409668]
[9.76135445 -124.32541656]
[4.47618771 -109.67260742]
[10.70741272 -96.02812958]
[16.93863869 -82.38365173]
[23.16986275 -68.73916626]
[39.26147079 -67.60884094]
[52.67427444 -58.47946167]
[59.70888519 -43.75492477]
[58.36783218 -27.39748764]
[48.92168808 -13.86166382]
[55.42994308 -0.34713054]
[61.93820190 13.16740227]
[68.44645691 26.68193626]
[74.95471191 40.19646835]
[81.46296692 53.71100235]
[87.97122192 67.22553253]
[94.47948456 80.74006653]
[108.99443054 84.52374268]
[121.27195740 75.90617371]
[133.54948425 67.28860474]
[133.66804504 51.77198410]
[142.91148376 39.30849457]
[157.72547913 34.69059753]
[172.41377258 39.69397736]
[181.32839966 52.39472580]
[181.04150391 67.90914917]
[171.66342163 80.27162933]
[156.80018616 84.72855377]
[142.16703796 79.56613159]
[129.88952637 88.18369293]
[117.61199951 96.80126190]
[130.65611267 89.39511871]
[145.60383606 88.14380646]
[159.69773865 93.27816772]
[170.33795166 103.85105896]
[175.56164551 117.91210175]
[174.40522766 132.86746216]
[167.08201599 145.95831299]
[154.94291687 154.76980591]
[140.22723389 157.67646790]
[125.64956665 154.14210510]
[113.89905548 144.81872559]
[107.14331818 131.42617798]
[106.62803650 116.43802643]
[105.71060944 131.40994263]
[104.79318237 146.38186646]
[103.87576294 161.35377502]
[102.95833588 176.32569885]
[109.83710480 190.57325745]
[101.33586884 202.80348206]
[100.41844940 217.77540588]
[99.50102234 232.74731445]
[98.58359528 247.71923828]
[97.66617584 262.69116211]
[96.74874878 277.66308594]
[95.83132172 292.63497925]
[106.24971008 281.84344482]
[120.81446075 278.25625610]
[135.05291748 282.97497559]
[144.59263611 294.55053711]
[146.50405884 309.42825317]
[140.20024109 323.03933716]
[127.61698914 331.20401001]
[112.61847687 331.41497803]
[99.81055450 323.60748291]
[93.12614441 310.17776489]
[89.49071503 324.73056030]
[93.65270233 339.99450684]
[83.06147766 350.46710205]
[79.42605591 365.01989746]
[75.79062653 379.57269287]
[72.15520477 394.12548828]
[68.51977539 408.67825317]
[64.88434601 423.23104858]
[77.09783936 414.52297974]
[92.07271576 413.65515137]
[105.21037292 420.89407349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[16 150]
[17 149]
[18 148]
[19 147]
[20 146]
[21 145]
[23 143]
[24 142]
[25 132]
[26 131]
[27 130]
[28 129]
[29 128]
[30 127]
[31 126]
[33 124]
[34 123]
[35 122]
[36 121]
[37 120]
[39 93]
[40 92]
[41 91]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[52 81]
[53 80]
[54 79]
[55 78]
[58 75]
[59 74]
[60 73]
[62 71]
[63 70]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
