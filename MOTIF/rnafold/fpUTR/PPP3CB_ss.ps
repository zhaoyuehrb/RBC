%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGGUCUUAGCCCCUCUGUAGGGAAAGAGGGUCCGCCAUGUUCCCCGGCGGCGCCGCCGCUUGGCUCUGGUAGCCGCCGCCCCCGCCCCCAACCCCGCCCGGCCCAGAGCCUAGCCGAGCCCCGGGCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[-47.76560593 216.53813171]
[-60.33306885 224.72708130]
[-72.90052795 232.91603088]
[-80.23871613 246.93251038]
[-95.12603760 247.39816284]
[-107.69350433 255.58711243]
[-120.26096344 263.77606201]
[-119.89720154 270.87997437]
[-121.78399658 277.68444824]
[-125.69617462 283.50036621]
[-131.20518494 287.74945068]
[-137.72589111 290.02188110]
[-144.57861328 290.11557007]
[-151.05993652 288.05374146]
[-156.51498413 284.07919312]
[-170.09329224 290.45333862]
[-183.67158508 296.82748413]
[-197.24989319 303.20162964]
[-210.82820129 309.57577515]
[-224.40649414 315.94992065]
[-227.19581604 331.21423340]
[-238.44778442 341.89941406]
[-253.83576965 343.89678955]
[-267.44277954 336.43832397]
[-274.03665161 322.39196777]
[-271.08190918 307.15881348]
[-259.71469116 296.59631348]
[-244.30595398 294.76599121]
[-230.78063965 302.37164307]
[-217.20234680 295.99749756]
[-203.62403870 289.62335205]
[-190.04573059 283.24920654]
[-176.46743774 276.87506104]
[-162.88912964 270.50091553]
[-152.27146912 249.92825317]
[-128.44992065 251.20860291]
[-115.88245392 243.01965332]
[-103.31498718 234.83070374]
[-96.87570953 221.39994812]
[-81.08947754 220.34857178]
[-68.52201843 212.15962219]
[-55.95455551 203.97067261]
[-57.80604172 186.04420471]
[-50.34290695 169.54791260]
[-35.51896667 159.00602722]
[-17.31930542 157.35652161]
[-0.68913800 165.13265991]
[11.28112030 156.09313965]
[23.25137901 147.05361938]
[35.22163773 138.01409912]
[47.19189453 128.97457886]
[50.66510391 122.37417603]
[59.54465866 119.86832428]
[71.72052002 111.10770416]
[83.89637756 102.34708405]
[86.48521423 90.93434906]
[96.06285858 84.20967102]
[107.67649078 85.65054321]
[120.05145264 77.17350006]
[123.31647491 71.25760651]
[128.34703064 68.37785339]
[133.19947815 68.60625458]
[145.95274353 60.70977020]
[158.70599365 52.81328583]
[166.36598206 38.97004700]
[181.26008606 38.84838867]
[194.01333618 30.95190430]
[206.76660156 23.05542183]
[219.51985168 15.15894032]
[232.27311707 7.26245785]
[245.02636719 -0.63402462]
[257.77963257 -8.53050709]
[270.53289795 -16.42698860]
[274.06762695 -22.18577385]
[279.22583008 -24.83013153]
[284.06253052 -24.37787056]
[297.16687012 -31.67693710]
[310.27120972 -38.97600555]
[323.37554932 -46.27507401]
[327.68032837 -58.49580383]
[338.81884766 -64.28845215]
[350.52124023 -61.01098251]
[363.79067993 -68.00541687]
[361.71038818 -83.02035522]
[364.89401245 -97.84062195]
[372.95709229 -110.67660522]
[384.92596436 -119.97830200]
[399.35537720 -124.62247467]
[414.50283813 -124.04833221]
[428.53927612 -118.32518768]
[439.76971436 -108.14415741]
[446.83798218 -94.73463440]
[448.89059448 -79.71589661]
[445.67965698 -64.90151978]
[437.59295654 -52.08041382]
[425.60693359 -42.80079269]
[411.16900635 -38.18321609]
[396.02261353 -38.78527451]
[381.99673462 -44.53427124]
[370.78509521 -54.73598480]
[357.51568604 -47.74154663]
[349.03195190 -32.42326355]
[330.67462158 -33.17073822]
[317.57028198 -25.87166977]
[304.46594238 -18.57260132]
[291.36160278 -11.27353477]
[278.42935181 -3.67373252]
[265.67611694 4.22275019]
[252.92285156 12.11923218]
[240.16960144 20.01571465]
[227.41633606 27.91219711]
[214.66308594 35.80868149]
[201.90982056 43.70516205]
[189.15657043 51.60164642]
[182.40878296 64.88007355]
[166.60247803 65.56654358]
[153.84922791 73.46302795]
[141.09596252 81.35951233]
[128.52850342 89.54846191]
[116.15354156 98.02550507]
[109.35134888 113.31870270]
[92.65699768 114.52294159]
[80.48114014 123.28356171]
[68.30528259 132.04417419]
[56.23141479 140.94483948]
[44.26115799 149.98435974]
[32.29089737 159.02388000]
[20.32064056 168.06340027]
[8.35038185 177.10292053]
[11.36997128 188.88940430]
[10.20239353 200.96539307]
[5.01056290 211.89215088]
[-3.56457520 220.37593079]
[-14.48307896 225.42123413]
[-26.43209839 226.44749451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[5 38]
[6 37]
[7 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[47 129]
[48 128]
[49 127]
[50 126]
[51 125]
[53 124]
[54 123]
[55 122]
[58 120]
[59 119]
[62 118]
[63 117]
[64 116]
[66 114]
[67 113]
[68 112]
[69 111]
[70 110]
[71 109]
[72 108]
[73 107]
[76 106]
[77 105]
[78 104]
[79 103]
[82 101]
[83 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
