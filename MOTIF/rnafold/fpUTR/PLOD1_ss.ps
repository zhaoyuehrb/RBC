%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCGCCCCCGGGGCGGGCCCAGUGCGUGGCAGCGGGACCUGCGGCCCCGUCGCGAAGUUUCCAGCCCUGCGAGCGCCGCCGGGUCGGCCGAUCGUCCCCCAUACCUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[119.95596313 131.65875244]
[104.99151611 132.69085693]
[103.95919800 117.72691345]
[96.47698975 118.24321747]
[87.92987061 130.56988525]
[79.38274384 142.89654541]
[70.83562469 155.22322083]
[62.28850555 167.54988098]
[53.74138641 179.87655640]
[49.68486786 196.33805847]
[32.74373245 196.99707031]
[27.42070389 180.90042114]
[41.41471863 171.32943726]
[49.96183777 159.00276184]
[58.50896072 146.67610168]
[67.05608368 134.34942627]
[75.60320282 122.02276611]
[84.15032196 109.69609833]
[80.76382446 103.00418854]
[73.99082184 89.62037659]
[70.60432434 82.92846680]
[55.61001587 82.51515198]
[44.18092728 93.09880066]
[28.98045731 92.46604156]
[18.96099854 81.50492859]
[3.96669316 81.09161377]
[-11.02761173 80.67829895]
[-27.02733231 86.28590393]
[-36.84495544 72.46379852]
[-26.28081131 59.20351410]
[-10.61429596 65.68399811]
[4.38000822 66.09731293]
[19.37431335 66.51062775]
[29.98238182 56.11810684]
[45.19462585 56.32366562]
[56.02333069 67.52085114]
[71.01763916 67.93416595]
[83.22536469 59.21801376]
[87.70308685 44.90193558]
[92.18080902 30.58586121]
[96.65853119 16.26978683]
[101.13625336 1.95371211]
[105.61397552 -12.36236286]
[109.89402008 -26.73877525]
[113.97557068 -41.17279434]
[118.05712891 -55.60681534]
[122.13867950 -70.04083252]
[114.33410645 -79.22597504]
[112.02102661 -90.93201447]
[115.67094421 -102.16555786]
[124.24569702 -110.11225128]
[135.48922729 -112.84177399]
[140.35972595 -127.02902985]
[145.23020935 -141.21629333]
[150.10070801 -155.40354919]
[154.97119141 -169.59080505]
[148.28186035 -183.65815735]
[153.42333984 -197.97668457]
[166.87564087 -204.26724243]
[171.74612427 -218.45449829]
[176.61662292 -232.64176941]
[176.04084778 -249.58593750]
[192.16343689 -254.82981873]
[201.66557312 -240.78895569]
[190.80387878 -227.77127075]
[185.93338013 -213.58401489]
[181.06289673 -199.39675903]
[187.81489563 -186.17004395]
[183.07763672 -171.71275330]
[169.15846252 -164.72030640]
[164.28796387 -150.53305054]
[159.41748047 -136.34579468]
[154.54698181 -122.15853882]
[149.67648315 -107.97127533]
[158.72286987 -92.17356110]
[153.39259338 -74.43710327]
[136.57269287 -65.95928192]
[132.49114990 -51.52526474]
[128.40959167 -37.09124374]
[124.32804108 -22.65722275]
[125.55303955 -15.26254559]
[119.93005371 -7.88464069]
[115.45233154 6.43143415]
[110.97460938 20.74750900]
[106.49688721 35.06358337]
[102.01916504 49.37965775]
[97.54144287 63.69573593]
[137.44168091 106.01879120]
[147.60090637 117.05464935]
[157.76013184 128.09051514]
[167.91935730 139.12637329]
[178.07856750 150.16223145]
[188.23779297 161.19808960]
[202.49794006 155.93342590]
[217.68710327 156.53163147]
[231.48904419 162.90148926]
[241.79905701 174.07162476]
[247.04495239 188.33868408]
[246.42675781 203.52705383]
[240.03875732 217.32058716]
[228.85507202 227.61590576]
[214.58111572 232.84303284]
[199.39358521 232.20486450]
[185.60845947 225.79872131]
[175.32786560 214.60148621]
[170.11952209 200.32067871]
[170.77766418 185.13400269]
[177.20193481 171.35731506]
[167.04270935 160.32144165]
[156.88348389 149.28558350]
[146.72427368 138.24972534]
[136.56504822 127.21387482]
[126.40582275 116.17801666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[21 37]
[22 36]
[25 33]
[26 32]
[27 31]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 80]
[45 79]
[46 78]
[47 77]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[59 67]
[60 66]
[61 65]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
