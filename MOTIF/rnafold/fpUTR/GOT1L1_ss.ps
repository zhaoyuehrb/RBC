%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAGGACUGCCCGGCCCAGCCUUGGAGGAAGACUUCUGGGCAGAAGCGGAACACAGGAGCAGAGACACAUAGUCUUGGCUCCAGUUUCGUUUCAGUU\
) } def
/len { sequence length } bind def

/coor [
[102.42688751 129.10754395]
[95.03770447 128.78392029]
[87.96671295 126.61463165]
[78.48466492 138.23748779]
[69.00261688 149.86035156]
[66.27433014 165.44453430]
[52.23365402 170.41532898]
[42.75160980 182.03817749]
[42.93360901 198.08020020]
[30.41431808 208.11250305]
[14.79746628 204.43914795]
[8.06296539 189.87803650]
[15.37694836 175.59919739]
[31.12875175 172.55613708]
[40.61079788 160.93327332]
[42.66086960 146.18043518]
[57.37976456 140.37829590]
[66.86180878 128.75544739]
[76.34385681 117.13258362]
[72.49996948 109.84312439]
[70.84514618 101.77012634]
[71.51111603 93.55622864]
[58.22094727 86.60127258]
[44.93077469 79.64632416]
[31.64060593 72.69136810]
[15.82599258 73.14806366]
[8.13698864 60.39155960]
[-5.15318155 53.43660736]
[-18.44335175 46.48165512]
[-31.73352242 39.52669907]
[-47.41223145 42.92634201]
[-59.75413895 32.67661667]
[-59.29158783 16.64023399]
[-46.37940598 7.11893415]
[-30.92271805 11.41664505]
[-24.77857018 26.23653030]
[-11.48839855 33.19148254]
[1.80177152 40.14643478]
[15.09194183 47.10139084]
[29.95595360 46.14722443]
[38.59555817 59.40119934]
[51.88573074 66.35614777]
[65.17590332 73.31110382]
[78.46607208 80.26605988]
[102.72163391 70.91854095]
[124.82158661 84.60430145]
[139.17144775 80.23608398]
[153.52131653 75.86785889]
[167.87118530 71.49964142]
[182.22105408 67.13142395]
[196.57092285 62.76319885]
[210.92077637 58.39498138]
[225.27064514 54.02676010]
[239.62051392 49.65853882]
[253.97038269 45.29031754]
[258.63558960 35.21848297]
[267.93783569 29.57943916]
[278.58218384 30.08136940]
[286.95632935 36.30633926]
[301.54998779 32.83869553]
[316.14367676 29.37104988]
[330.73736572 25.90340424]
[345.33102417 22.43575859]
[356.96868896 11.71777534]
[371.13989258 16.30324173]
[385.73358154 12.83559704]
[400.32723999 9.36795235]
[414.92092896 5.90030766]
[429.51461792 2.43266296]
[439.11932373 -10.41758060]
[455.15838623 -10.77626133]
[465.32794189 1.63177025]
[461.82684326 17.28813362]
[447.34078979 24.18260765]
[432.98223877 17.02634048]
[418.38858032 20.49398613]
[403.79489136 23.96162987]
[389.20120239 27.42927551]
[374.60754395 30.89692116]
[364.01370239 41.36687469]
[348.79867554 37.02943802]
[334.20498657 40.49708176]
[319.61132812 43.96472549]
[305.01763916 47.43237305]
[290.42395020 50.90001678]
[277.58624268 65.21804810]
[258.33859253 59.64018250]
[243.98873901 64.00840759]
[229.63887024 68.37662506]
[215.28900146 72.74484253]
[200.93913269 77.11306763]
[186.58926392 81.48128510]
[172.23941040 85.84951019]
[157.88954163 90.21772766]
[143.53967285 94.58595276]
[129.18980408 98.95417023]
[128.51664734 106.31974030]
[126.01496124 113.28007507]
[121.84514618 119.38887024]
[116.27457428 124.25441742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[5 17]
[7 15]
[8 14]
[22 44]
[23 43]
[24 42]
[25 41]
[27 39]
[28 38]
[29 37]
[30 36]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
