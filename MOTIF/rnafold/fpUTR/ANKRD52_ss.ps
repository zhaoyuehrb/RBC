%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGCCGCCGCCUGGGCCGCUCCGUGUCCCCGGUGGAGCCGCCGCCGCCGCCGCCGGGAGCUCGAUGCGGACGGAGCCCGGGCCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[82.65383148 312.63040161]
[66.93422699 310.99649048]
[57.03914642 298.67321777]
[58.83916092 282.97177124]
[71.26635742 273.20751953]
[72.81711578 258.28790283]
[74.11012268 243.34373474]
[75.14498901 228.37947083]
[72.59196472 224.11119080]
[72.84786224 218.16004944]
[76.80280304 212.42991638]
[78.86759949 197.57270813]
[80.93240356 182.71549988]
[82.99720764 167.85829163]
[85.06201172 153.00109863]
[87.12681580 138.14389038]
[89.19161224 123.28667450]
[91.25641632 108.42947388]
[92.80717468 93.50984955]
[93.84204102 78.54559326]
[91.27324677 69.55047607]
[95.17968750 63.08552933]
[96.73044586 48.16590881]
[98.28120422 33.24628448]
[99.83196259 18.32666206]
[101.38272095 3.40703893]
[102.93347931 -11.51258373]
[104.48423767 -26.43220711]
[106.03499603 -41.35182953]
[106.29390717 -56.34959412]
[105.25904083 -71.31385040]
[104.22417450 -86.27811432]
[103.18930817 -101.24237061]
[102.15444183 -116.20663452]
[101.11957550 -131.17088318]
[100.08470917 -146.13514709]
[99.04983521 -161.09941101]
[88.52761841 -167.16098022]
[82.38893890 -177.49761963]
[82.10753632 -189.39509583]
[87.63686371 -199.79626465]
[97.45249176 -206.08666992]
[97.45249176 -221.08666992]
[88.78879547 -235.01048279]
[96.75292206 -249.34591675]
[113.15206909 -249.34591675]
[121.11619568 -235.01048279]
[112.45249176 -221.08666992]
[112.45249176 -206.08666992]
[126.12852478 -194.15855408]
[126.97396851 -175.71743774]
[114.01409912 -162.13427734]
[115.04896545 -147.17001343]
[116.08383179 -132.20576477]
[117.11869812 -117.24150085]
[118.15356445 -102.27723694]
[119.18843079 -87.31298065]
[120.22330475 -72.34872437]
[121.25817108 -57.38446045]
[123.27196503 -55.83289337]
[124.81346130 -53.40742874]
[125.56031799 -50.27630234]
[125.25355530 -46.71587753]
[123.73139954 -43.08696365]
[120.95462036 -39.80107117]
[119.40386200 -24.88144684]
[117.85310364 -9.96182537]
[116.30234528 4.95779800]
[114.75158691 19.87742043]
[113.20082855 34.79704285]
[111.65007019 49.71666718]
[110.09931183 64.63629150]
[108.80630493 79.58045959]
[107.77143860 94.54471588]
[110.35957336 99.37492371]
[109.92863464 105.31513977]
[106.11362457 110.49427795]
[104.04882050 125.35147858]
[101.98401642 140.20869446]
[99.91921997 155.06588745]
[97.85441589 169.92309570]
[95.78961182 184.78030396]
[93.72480774 199.63751221]
[91.66000366 214.49472046]
[90.10924530 229.41433716]
[89.07437897 244.37860107]
[91.64318085 253.37371826]
[87.73674011 259.83865356]
[86.18598175 274.75827026]
[96.33940887 286.86956787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[7 86]
[8 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 74]
[20 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
