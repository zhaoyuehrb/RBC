%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCGCCUGCGCCAGAACCGCUGCCUCGCUCCCGGAAGUGGAGGGUCUACACGAAGCGCCGCUGGGUCUGGGUGCCCGGAGGCAGCAGCGUUCGCGGAGUUCGCCCGCUGGCCCCCGAUCACC\
) } def
/len { sequence length } bind def

/coor [
[116.89682770 281.46191406]
[115.39140320 266.53765869]
[113.88597107 251.61338806]
[112.38054657 236.68911743]
[99.91462708 221.99411011]
[108.16876221 203.68447876]
[105.91538239 188.85470581]
[103.66199493 174.02493286]
[94.10054016 162.60443115]
[99.67689514 147.79852295]
[97.42350769 132.96875000]
[95.17012787 118.13897705]
[83.13662720 110.59511566]
[79.31344604 96.05076599]
[86.87236786 82.09147644]
[102.72666168 76.81044769]
[97.20479584 62.86379623]
[91.68292999 48.91714859]
[86.16106415 34.97050476]
[69.80896759 23.30935860]
[73.17781830 4.33586931]
[66.96218109 -9.31572056]
[60.74655151 -22.96730995]
[54.53091812 -36.61890030]
[48.31528473 -50.27048874]
[42.09964752 -63.92207718]
[35.88401413 -77.57366943]
[29.66838264 -91.22525787]
[22.94263458 -104.63288116]
[15.71632862 -117.77748108]
[2.28779697 -126.14318848]
[2.93663478 -141.02365112]
[-4.28967047 -154.16825867]
[-11.51597500 -167.31285095]
[-18.74228096 -180.45745850]
[-25.96858597 -193.60205078]
[-33.19488907 -206.74665833]
[-40.91148376 -219.60955811]
[-49.10739899 -232.17247009]
[-57.30331421 -244.73539734]
[-65.49922943 -257.29830933]
[-73.69514465 -269.86123657]
[-88.97305298 -269.13128662]
[-102.47588348 -276.10055542]
[-110.62321472 -288.80831909]
[-111.31126404 -303.78771973]
[-104.45529175 -317.01123047]
[-112.65120697 -329.57415771]
[-127.99144745 -334.27059937]
[-133.74984741 -349.24459839]
[-125.50905609 -363.00936890]
[-109.59070587 -365.00573730]
[-98.20598602 -353.70230103]
[-100.08828735 -337.77005005]
[-91.89237213 -325.20715332]
[-77.02735901 -326.15417480]
[-63.59481049 -319.48913574]
[-55.24674988 -306.91232300]
[-54.30858612 -291.74603271]
[-61.13222504 -278.05715942]
[-52.93630981 -265.49423218]
[-44.74039459 -252.93132019]
[-36.54447937 -240.36839294]
[-28.34856224 -227.80546570]
[-24.87579536 -226.74082947]
[-21.77638435 -223.87506104]
[-19.92212677 -219.41754150]
[-20.05029106 -213.97296143]
[-12.82398510 -200.82836914]
[-5.59768009 -187.68376160]
[1.62862480 -174.53915405]
[8.85492992 -161.39456177]
[16.08123589 -148.24995422]
[28.99289322 -140.82444763]
[28.86092949 -125.00378418]
[36.08723450 -111.85918427]
[39.46994019 -110.53597260]
[42.34467316 -107.44487000]
[43.85789490 -102.86034393]
[43.31997299 -97.44088745]
[49.53560638 -83.78929901]
[55.75123978 -70.13771057]
[61.96687317 -56.48612213]
[68.18250275 -42.83453369]
[74.39813995 -29.18294334]
[80.61377716 -15.53135395]
[86.82940674 -1.87976432]
[96.80931091 0.88149035]
[103.72028351 8.88690948]
[105.05006409 19.60153008]
[100.10770416 29.44863510]
[105.62957764 43.39528275]
[111.15144348 57.34193039]
[116.67330933 71.28857422]
[127.60784149 81.55678558]
[141.87368774 86.19203949]
[156.13954163 90.82729340]
[171.02925110 84.85436249]
[184.91099548 92.89655304]
[187.13587952 108.78458405]
[175.99716187 120.33051300]
[160.03952026 118.67729950]
[151.50428772 105.09313965]
[137.23843384 100.45788574]
[122.97258759 95.82263184]
[119.27632904 108.48252106]
[109.99990082 115.88558960]
[112.25328827 130.71536255]
[114.50666809 145.54513550]
[124.22930908 158.02636719]
[118.49177551 171.77154541]
[120.74515533 186.60131836]
[122.99854279 201.43109131]
[132.22758484 207.44915771]
[136.47488403 217.37547302]
[134.53605652 227.77207947]
[127.30481720 235.18370056]
[128.81024170 250.10795593]
[130.31565857 265.03222656]
[131.82109070 279.95648193]
[143.28692627 291.17764282]
[141.51942444 307.12304688]
[127.87446594 315.56072998]
[112.81929016 310.01803589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[6 113]
[7 112]
[8 111]
[10 109]
[11 108]
[12 107]
[16 94]
[17 93]
[18 92]
[19 91]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 76]
[30 75]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[47 55]
[48 54]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
