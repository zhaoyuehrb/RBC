%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUGUAGGGCGGGCUGAGGAGCCGGCGUGCGGCGCGGCGGGACGGGACGUGCGGCCCAGCGAGUUGGUCGGUCCCGGGGUCACCCGCUACGGGAAGCAGGCCUCGCCACAGACUAAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[113.10652161 234.35289001]
[125.03738403 224.83358765]
[121.64666748 210.22184753]
[118.25594330 195.61009216]
[114.86522675 180.99835205]
[112.43219757 179.39738464]
[110.52560425 176.68104553]
[109.59508514 173.05976868]
[109.99983215 168.91049194]
[111.95085907 164.73799133]
[110.05578613 149.85818481]
[108.16070557 134.97837830]
[106.26562500 120.09856415]
[92.63553619 113.83592987]
[80.11095428 122.09032440]
[67.58638000 130.34471130]
[55.06180191 138.59910583]
[48.20339203 153.49522400]
[31.85110474 154.73408508]
[22.82677269 141.04125977]
[30.41385460 126.50274658]
[46.80741119 126.07452393]
[59.33198929 117.82013702]
[71.85656738 109.56574249]
[84.38114166 101.31135559]
[92.47621918 88.68321991]
[94.74763489 73.85619354]
[97.01905060 59.02917099]
[91.46070099 44.21649551]
[101.03604126 32.80763245]
[103.30745697 17.98060799]
[105.57887268 3.15358257]
[93.78904724 -11.56088161]
[96.33642578 -29.92390633]
[111.17166138 -40.50597000]
[112.68918610 -55.42900848]
[106.38772583 -69.94114685]
[115.37292480 -81.82035065]
[116.89044952 -96.74339294]
[118.40797424 -111.66642761]
[119.92549896 -126.58946991]
[121.44302368 -141.51251221]
[122.96054840 -156.43554688]
[111.42279816 -176.52137756]
[124.50794220 -194.75373840]
[124.12795258 -209.74891663]
[123.74796295 -224.74411011]
[123.36797333 -239.73928833]
[122.98798370 -254.73448181]
[122.60798645 -269.72967529]
[119.75171661 -274.37197876]
[119.10848236 -279.16049194]
[120.34515381 -283.19958496]
[122.81243896 -285.86819458]
[123.57217407 -300.84893799]
[124.33191681 -315.82968140]
[125.09165192 -330.81042480]
[125.85138702 -345.79116821]
[113.25254822 -354.69470215]
[107.48851776 -369.00482178]
[110.39859009 -384.15524292]
[121.05416870 -395.31149292]
[136.05509949 -398.91369629]
[150.61462402 -393.81237793]
[160.08686829 -381.63534546]
[161.44927979 -366.26824951]
[154.26708984 -352.61468506]
[140.83213806 -345.03143311]
[140.07240295 -330.05068970]
[139.31266785 -315.06994629]
[138.55291748 -300.08920288]
[137.79318237 -285.10845947]
[137.60317993 -270.10964966]
[137.98316956 -255.11447144]
[138.36315918 -240.11927795]
[138.74314880 -225.12409973]
[139.12313843 -210.12890625]
[139.50312805 -195.13372803]
[145.97044373 -191.54052734]
[150.78460693 -185.83230591]
[153.28077698 -178.72169495]
[153.08750916 -171.11933899]
[150.18119812 -164.01741028]
[144.89547729 -158.36007690]
[137.88359070 -154.91802979]
[136.36605835 -139.99497986]
[134.84854126 -125.07194519]
[133.33100891 -110.14890289]
[131.81349182 -95.22586823]
[130.29595947 -80.30282593]
[136.70596313 -66.85808563]
[127.61222839 -53.91148376]
[126.09470367 -38.98844528]
[135.14256287 -31.82241821]
[139.60522461 -21.04750061]
[138.24595642 -9.34305096]
[131.29187012 0.31816742]
[120.40589905 5.42499924]
[118.13448334 20.25202370]
[115.86306763 35.07904816]
[121.58387756 48.83119583]
[111.84607697 61.30058670]
[109.57466125 76.12760925]
[107.30324554 90.95463562]
[119.68291473 98.21593475]
[121.14543152 118.20348358]
[123.04051208 133.08329773]
[124.93559265 147.96310425]
[126.83066559 162.84291077]
[129.47695923 177.60763550]
[132.86769104 192.21937561]
[136.25840759 206.83111572]
[139.64912415 221.44285583]
[154.55296326 224.73506165]
[166.54710388 234.17449951]
[173.25013733 247.88699341]
[173.33113098 263.14990234]
[166.77403259 276.93273926]
[154.88075256 286.49896240]
[140.01269531 289.94915771]
[125.12194824 286.59829712]
[113.16506195 277.11169434]
[106.51609039 263.37292480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[5 110]
[10 109]
[11 108]
[12 107]
[13 106]
[14 25]
[15 24]
[16 23]
[17 22]
[26 104]
[27 103]
[28 102]
[30 100]
[31 99]
[32 98]
[35 93]
[36 92]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
