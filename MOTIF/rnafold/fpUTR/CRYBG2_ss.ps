%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGAGCCCAAUCGCAUCAGGGGAGCACGGCCCAGCAGCAGGAGCUCCAGGCUGGCUGGACACCUGGGUCCCCACGCAGACUGUGAGUAGAGGGAGCUGGACCACAGUGGGACAAGGACACCUCCAGACAGGUUGCCAGGGCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[43.90037155 274.04898071]
[29.34185600 270.43655396]
[22.89590073 256.89285278]
[15.17181587 269.75125122]
[7.44773102 282.60964966]
[-0.27635393 295.46804810]
[2.08163834 308.19180298]
[-4.66853809 318.75845337]
[-16.42668915 321.76730347]
[-24.41660500 334.46221924]
[-20.66732025 349.81536865]
[-28.94376373 363.27923584]
[-44.33567047 366.86599731]
[-57.71129227 358.44766235]
[-61.13511276 343.01867676]
[-52.57583618 329.73281860]
[-37.11153412 326.47232056]
[-29.12161827 313.77737427]
[-29.42831039 296.25866699]
[-13.13475609 287.74395752]
[-5.41067123 274.88555908]
[2.31341362 262.02716064]
[10.03749847 249.16876221]
[17.08263397 235.92617798]
[23.42976379 222.33522034]
[29.77689171 208.74426270]
[29.75742531 201.30482483]
[36.40004349 194.93870544]
[43.02854156 181.48274231]
[36.93293762 165.83981323]
[44.15064240 150.30955505]
[60.67573929 144.66522217]
[67.02287292 131.07426453]
[73.36999512 117.48331451]
[68.32124329 103.35851288]
[54.79705048 96.87034607]
[41.27286148 90.38217926]
[27.74867249 83.89402008]
[14.22448254 77.40585327]
[0.63353163 71.05872345]
[-13.02270985 64.85331726]
[-26.67895126 58.64790726]
[-44.92697144 60.88164520]
[-54.61466217 46.28203583]
[-68.39704132 40.36207581]
[-84.60984039 42.82727814]
[-94.63845062 29.85195160]
[-88.16629028 14.78399754]
[-71.85137177 13.12403584]
[-62.47708130 26.57969284]
[-48.69469833 32.49965668]
[-37.30534744 28.30561829]
[-25.75141335 33.17650986]
[-20.47354317 44.99166870]
[-6.81730223 51.19707489]
[6.83893871 57.40248108]
[14.27777386 57.30562592]
[20.71264839 63.88166046]
[34.23683929 70.36982727]
[47.76102829 76.85799408]
[61.28521729 83.34616089]
[74.80941010 89.83432007]
[86.55764008 79.06868744]
[101.02670288 77.43572235]
[112.47496796 83.98647308]
[125.41302490 76.39656830]
[138.35108948 68.80665588]
[151.28913879 61.21675110]
[164.22718811 53.62684250]
[172.81123352 30.78988075]
[196.41586304 28.03952217]
[206.62933350 17.05385780]
[216.84281921 6.06819296]
[227.05630493 -4.91747189]
[237.26977539 -15.90313625]
[222.27052307 -15.75295639]
[210.57350159 -25.14335060]
[207.47755432 -39.82037735]
[214.38519287 -53.13520432]
[228.16719055 -59.05607605]
[242.58015442 -54.90078735]
[251.09487915 -42.55172348]
[249.85394287 -27.60276031]
[261.55355835 -36.98992157]
[273.25320435 -46.37708282]
[284.95281982 -55.76424408]
[296.65243530 -65.15140533]
[308.35205078 -74.53856659]
[313.12728882 -82.40299225]
[320.39413452 -83.99627686]
[332.28649902 -93.13800812]
[334.47344971 -108.56055450]
[346.66424561 -117.66216278]
[361.35382080 -115.48220062]
[373.24618530 -124.62393188]
[379.00524902 -139.97857666]
[395.22448730 -142.40113831]
[405.21893311 -129.39947510]
[398.70715332 -114.34859467]
[382.38793945 -112.73155212]
[370.49554443 -103.58982086]
[368.82489014 -88.83365631]
[356.89453125 -79.39321899]
[341.42825317 -81.24562836]
[329.53585815 -72.10389709]
[317.73922729 -62.83894730]
[306.03961182 -53.45178223]
[294.33996582 -44.06462097]
[282.64035034 -34.67745972]
[270.94073486 -25.29029846]
[259.24111938 -15.90313625]
[248.25544739 -5.68965673]
[238.04196167 5.29600811]
[227.82849121 16.28167343]
[217.61500549 27.26733780]
[207.40151978 38.25300217]
[209.01397705 42.20457840]
[209.85205078 46.38938522]
[209.88563538 50.65715408]
[223.54187012 56.86256027]
[237.19812012 63.06797028]
[253.45869446 60.94058609]
[263.21517944 74.12173462]
[256.43096924 89.05178833]
[240.08503723 90.37197876]
[230.99270630 76.72421265]
[217.33647156 70.51880646]
[203.68022156 64.31339264]
[196.83738708 69.50571442]
[188.44271851 71.80863953]
[179.67973328 70.80880737]
[171.81710815 66.56489563]
[158.87904358 74.15480804]
[145.94099426 81.74471283]
[133.00292969 89.33462524]
[120.06488037 96.92453003]
[113.61685944 119.43657684]
[86.96095276 123.83044434]
[80.61382294 137.42140198]
[74.26669312 151.01234436]
[80.30334473 163.09606934]
[78.28689575 176.25517273]
[69.17952728 185.69604492]
[56.48450851 188.11125183]
[49.85600662 201.56721497]
[43.36784363 215.09140015]
[37.02071381 228.68235779]
[30.67358398 242.27330017]
[45.50801086 240.05075073]
[56.63884735 250.10581970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[9 18]
[10 17]
[24 148]
[25 147]
[26 146]
[28 145]
[29 144]
[32 140]
[33 139]
[34 138]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 56]
[41 55]
[42 54]
[44 51]
[45 50]
[65 136]
[66 135]
[67 134]
[68 133]
[69 132]
[71 116]
[72 115]
[73 114]
[74 113]
[75 112]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[90 105]
[91 104]
[94 101]
[95 100]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
