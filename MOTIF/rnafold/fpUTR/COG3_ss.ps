%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUUUCCGGGGUCAGGGCAUUCCGUCCCGCCCCGCCGCCGGUGCAGUGUUGGAAGCUCCGGUUCUCCCGGAAGUGGCCCAGGUCUCUCUGUCGGGGUCCCCUCCAUCUCGCUGCUGCUGAAGGCCGCGAGGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[56.52302551 213.44021606]
[61.21233749 227.68838501]
[58.87685394 242.50544739]
[50.03216171 254.62037659]
[36.63082504 261.35864258]
[21.63135529 261.23269653]
[8.34505844 254.27035522]
[-0.29495662 242.00862122]
[-2.38130426 227.15441895]
[2.54725146 212.98599243]
[-9.98171139 221.23371887]
[-22.51067352 229.48146057]
[-35.03963852 237.72918701]
[-47.56859970 245.97691345]
[-50.95456314 258.47506714]
[-61.62413406 265.07681274]
[-73.53149414 262.68618774]
[-86.23861694 270.65667725]
[-98.94573975 278.62719727]
[-111.65285492 286.59771729]
[-116.62220001 301.85174561]
[-131.69651794 307.34210205]
[-145.31210327 298.85708618]
[-147.02423096 282.90567017]
[-135.51950073 271.72439575]
[-119.62337494 273.89059448]
[-106.91625214 265.92007446]
[-94.20912933 257.94955444]
[-81.50200653 249.97904968]
[-74.18428802 234.06491089]
[-55.81633377 233.44795227]
[-43.28736877 225.20022583]
[-30.75840569 216.95249939]
[-18.22944450 208.70475769]
[-5.70048094 200.45703125]
[5.74297714 190.75923157]
[15.93405914 179.75279236]
[26.12514114 168.74633789]
[36.31622314 157.73989868]
[46.50730515 146.73344421]
[56.69838715 135.72700500]
[66.88947296 124.72055817]
[62.62003708 118.66575623]
[59.46152115 111.87378693]
[57.54099274 104.54914093]
[56.94776535 96.91813660]
[57.72966766 89.22193909]
[59.89060974 81.70893860]
[63.38954926 74.62671661]
[68.14092255 68.21393585]
[74.01654816 62.69228363]
[80.84901428 58.25889969]
[88.43634796 55.07940674]
[85.16741180 40.43993759]
[72.10848236 31.94863892]
[69.00186920 17.05556870]
[77.17749786 4.65820551]
[73.90856934 -9.98126507]
[70.63963318 -24.62073517]
[67.21009827 -39.22341537]
[63.62036133 -53.78754044]
[60.03062439 -68.35166931]
[56.44089127 -82.91579437]
[43.51066589 -92.41257477]
[43.01768112 -108.44805145]
[55.34011459 -118.72118378]
[71.02524567 -115.35129547]
[78.04079437 -100.92348480]
[71.00502014 -86.50553131]
[74.59474945 -71.94140625]
[78.18448639 -57.37727737]
[81.77422333 -42.81314850]
[86.46526337 -37.02668381]
[85.27910614 -27.88966751]
[88.54803467 -13.25019741]
[91.81697083 1.38927281]
[104.48964691 9.13129520]
[108.01335144 23.93123245]
[99.80688477 37.17100525]
[103.07581329 51.81047440]
[117.71528625 55.07940674]
[126.90107727 43.22102737]
[136.08686829 31.36264420]
[145.27265930 19.50426292]
[146.95024109 3.19114637]
[162.02517700 -3.26473522]
[174.98966980 6.77787542]
[172.50695801 22.98800087]
[157.13104248 28.69005585]
[147.94525146 40.54843521]
[138.75946045 52.40681839]
[129.57366943 64.26519775]
[132.82572937 69.66362762]
[135.18914795 75.27161407]
[136.66850281 80.95181274]
[151.01361084 76.56798553]
[165.35871887 72.18415833]
[179.70382690 67.80033875]
[190.48771667 55.44558716]
[206.52482605 58.87240219]
[211.31756592 74.55557251]
[199.93556213 86.36158752]
[184.08764648 82.14543915]
[169.74255371 86.52926636]
[155.39744568 90.91309357]
[141.05233765 95.29691315]
[140.90026855 105.88056946]
[138.06440735 116.07835388]
[150.59338379 124.32608795]
[163.12234497 132.57382202]
[175.65130615 140.82154846]
[188.18026733 149.06929016]
[200.70922852 157.31701660]
[216.49035645 158.44233704]
[222.86665344 171.90310669]
[235.39561462 180.15083313]
[247.92457581 188.39857483]
[263.35113525 184.96388245]
[276.64303589 193.51380920]
[279.91442871 208.97579956]
[271.22445679 222.17655945]
[255.72871399 225.28430176]
[242.62057495 216.45524597]
[239.67684937 200.92753601]
[227.14788818 192.67979431]
[214.61892700 184.43206787]
[199.73393250 183.89668274]
[192.46150208 169.84597778]
[179.93252563 161.59825134]
[167.40356445 153.35050964]
[154.87460327 145.10278320]
[142.34564209 136.85505676]
[129.81668091 128.60731506]
[104.98068237 141.01957703]
[77.89591980 134.91163635]
[67.70483398 145.91809082]
[57.51375198 156.92453003]
[47.32266998 167.93096924]
[37.13158798 178.93742371]
[26.94050407 189.94386292]
[16.74942207 200.95031738]
[31.53316307 198.41239929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[17 29]
[18 28]
[19 27]
[20 26]
[36 141]
[37 140]
[38 139]
[39 138]
[40 137]
[41 136]
[42 135]
[53 80]
[54 79]
[57 76]
[58 75]
[59 74]
[60 72]
[61 71]
[62 70]
[63 69]
[81 92]
[82 91]
[83 90]
[84 89]
[95 106]
[96 105]
[97 104]
[98 103]
[108 133]
[109 132]
[110 131]
[111 130]
[112 129]
[113 128]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
