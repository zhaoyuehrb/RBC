%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGGUGUGGGUACUGCUGUCUGUGGUGUGGCUGUGGGACCCGUGAGCAAGCAGCGACGCCAGCGGCGGAGAACCGACGAAAGGUGUCACCACAGUG\
) } def
/len { sequence length } bind def

/coor [
[93.62402344 253.03263855]
[77.29913330 251.47380066]
[70.73374176 236.44622803]
[80.68175507 223.40901184]
[82.10758972 208.47694397]
[75.61513519 195.07182312]
[84.62918854 182.06961060]
[86.05503082 167.13752747]
[87.48086548 152.20545959]
[88.90670776 137.27337646]
[90.33255005 122.34129333]
[80.89614105 115.08760834]
[76.02659607 104.22715759]
[76.88798523 92.35619354]
[83.27439117 82.31250763]
[76.82746887 68.76861572]
[70.38054657 55.22471619]
[63.93362427 41.68081665]
[57.48669815 28.13691902]
[51.03977585 14.59302044]
[44.59285355 1.04912233]
[39.97116852 -2.10483384]
[37.40708923 -6.33883381]
[36.95832825 -10.63210487]
[38.24618530 -14.10281372]
[33.11588287 -28.19820213]
[27.98558044 -42.29359055]
[22.85527802 -56.38898087]
[17.72497559 -70.48436737]
[12.59467411 -84.57975769]
[0.60405284 -94.90136719]
[3.52175355 -109.50740051]
[-1.60854864 -123.60279083]
[-6.73885059 -137.69818115]
[-11.86915302 -151.79357910]
[-16.99945450 -165.88896179]
[-32.17459106 -166.17126465]
[-46.22152328 -171.91999817]
[-57.24052429 -182.35772705]
[-63.74135971 -196.07281494]
[-64.84484863 -211.21040344]
[-60.40174866 -225.72328186]
[-51.01295853 -237.64866638]
[-37.94823074 -245.37377930]
[-22.97446251 -247.85385132]
[-8.11673641 -244.75346375]
[4.61556578 -236.49192810]
[13.50050354 -224.18655396]
[17.33646011 -209.50152588]
[15.60465717 -194.42289734]
[8.53930473 -180.98989868]
[-2.90406585 -171.01925659]
[2.22623634 -156.92387390]
[7.35653830 -142.82849121]
[12.48684025 -128.73309326]
[17.61714363 -114.63770294]
[29.24081039 -105.32429504]
[26.69006348 -89.71006012]
[31.82036591 -75.61466980]
[36.95066833 -61.51928329]
[42.08097076 -47.42389297]
[47.21127319 -33.32850647]
[52.34157562 -19.23311615]
[58.13674927 -5.39780140]
[64.58367157 8.14609718]
[71.03060150 21.68999481]
[77.47752380 35.23389435]
[83.92444611 48.77779007]
[90.37136841 62.32168961]
[96.81829071 75.86558533]
[116.79875946 82.38197327]
[124.25846863 102.02973938]
[138.09378052 107.82492065]
[152.01930237 113.39985657]
[166.03152466 118.75315094]
[180.04373169 124.10644531]
[193.61975098 116.34590149]
[208.99867249 119.17832947]
[218.91905212 131.26634216]
[218.69679260 146.90234375]
[208.43684387 158.70350647]
[192.98361206 161.09765625]
[179.63366699 152.95437622]
[174.69044495 138.11866760]
[160.67822266 132.76536560]
[146.66601562 127.41207123]
[139.15692139 127.97592163]
[132.29859924 121.66023254]
[118.46329498 115.86505890]
[112.50457001 120.88609314]
[105.26462555 123.76713562]
[103.83879089 138.69921875]
[102.41294861 153.63130188]
[100.98710632 168.56336975]
[99.56126404 183.49545288]
[105.95174408 197.96861267]
[97.03967285 209.90278625]
[95.61383057 224.83485413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[72 89]
[73 88]
[74 86]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
