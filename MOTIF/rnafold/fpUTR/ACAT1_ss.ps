%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:21:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCUAGGGGUGCGGGGUUGGGGAGGAGGCCGCUAGUCUACGCCUGUGGAGCCGAUACUCAGCCCUCUGCGACC\
) } def
/len { sequence length } bind def

/coor [
[89.48401642 253.74661255]
[89.48401642 238.74661255]
[81.74671173 226.01934814]
[89.48401642 212.21917725]
[89.48401642 197.21917725]
[89.48401642 182.21917725]
[86.24311829 175.33802795]
[89.80247498 166.61045837]
[90.41429901 151.62294006]
[91.02613068 136.63542175]
[91.63796234 121.64791107]
[92.24978638 106.66039276]
[89.34185791 98.87682343]
[93.20464325 91.07766724]
[94.42728424 76.12757874]
[95.34470367 61.15565872]
[95.95653534 46.16814423]
[96.56836700 31.18062592]
[96.87434387 16.18374634]
[96.87434387 1.18374681]
[96.87434387 -13.81625366]
[96.87434387 -28.81625366]
[96.87434387 -43.81625366]
[82.26472473 -50.66727448]
[72.08856964 -63.11588669]
[68.30709839 -78.68424225]
[71.61504364 -94.30117798]
[81.31362915 -106.90805054]
[95.45748138 -114.05776215]
[94.84564972 -129.04528809]
[94.23382568 -144.03280640]
[93.62199402 -159.02030945]
[79.76360321 -165.51673889]
[70.52088928 -177.71636963]
[68.01776123 -192.81581116]
[72.82941437 -207.34530640]
[83.85017395 -217.96611023]
[98.54754639 -222.23762512]
[113.54418182 -219.17829895]
[125.39396667 -209.49113464]
[131.37390137 -195.40216064]
[130.10984802 -180.14894104]
[121.89227295 -167.23654175]
[108.60951233 -159.63214111]
[109.22133636 -144.64462280]
[109.83316803 -129.65710449]
[110.44499969 -114.66959381]
[123.56319427 -109.72371674]
[133.80165100 -100.08267975]
[139.56204224 -87.20541382]
[139.92738342 -73.05950165]
[134.80787659 -59.82057190]
[124.95987701 -49.53770065]
[111.87434387 -43.81625366]
[111.87434387 -28.81625366]
[111.87434387 -13.81625366]
[111.87434387 1.18374681]
[111.87434387 16.18374634]
[115.11524200 23.06489182]
[111.55587769 31.79245377]
[110.94405365 46.77997208]
[110.33222198 61.76749039]
[113.28974915 68.77510071]
[109.37737274 77.35021973]
[108.15473175 92.30030823]
[107.23730469 107.27222443]
[106.62548065 122.25974274]
[106.01364899 137.24725342]
[105.40181732 152.23477173]
[104.78999329 167.22229004]
[104.48401642 182.21917725]
[104.48401642 197.21917725]
[104.48401642 212.21917725]
[112.22131348 226.01934814]
[104.48401642 238.74661255]
[104.48401642 253.74661255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[4 73]
[5 72]
[6 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[14 65]
[15 64]
[16 62]
[17 61]
[18 60]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[29 47]
[30 46]
[31 45]
[32 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
