%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCAACGCGAGGGAAGAAGGUGGCGGCUCCCACUCGCUUCUCCCUCGGGUCGGGUCCGAGCUGCCAGGCCGC\
) } def
/len { sequence length } bind def

/coor [
[150.65348816 200.36730957]
[155.50321960 190.29177856]
[147.20234680 177.79795837]
[138.90147400 165.30413818]
[130.60060120 152.81031799]
[112.74984741 145.85935974]
[111.01969147 125.97781372]
[101.70247650 114.22241211]
[88.77442169 108.89728546]
[86.54212189 95.09480286]
[77.22490692 83.33940125]
[67.90769196 71.58399963]
[58.59047318 59.82860184]
[49.27325439 48.07319641]
[39.95603943 36.31779480]
[30.63882256 24.56239510]
[22.61413956 19.59495735]
[21.18998337 12.11400795]
[12.37320328 -0.02124703]
[3.55642486 -12.15650177]
[-5.26035404 -24.29175758]
[-20.61811829 -26.89498711]
[-29.38671494 -39.32745743]
[-26.81028938 -53.95269775]
[-35.62706757 -66.08795166]
[-49.99821472 -72.70465851]
[-51.21950912 -87.54910278]
[-60.03628540 -99.68436432]
[-74.23788452 -108.94454193]
[-69.27099609 -125.15460968]
[-52.31945038 -124.86921692]
[-47.90103149 -108.50113678]
[-39.08425522 -96.36588287]
[-25.34374237 -90.61717987]
[-23.49181366 -74.90473175]
[-14.67503357 -62.76947784]
[0.03055435 -60.70035553]
[9.14489269 -48.51908112]
[6.87490129 -33.10853577]
[15.69167995 -20.97327995]
[24.50845909 -8.83802605]
[33.32523727 3.29722905]
[42.39422226 15.24517822]
[51.71144104 27.00057983]
[61.02865601 38.75598145]
[70.34587097 50.51138306]
[79.66309357 62.26678467]
[88.98030853 74.02218628]
[98.29752350 85.77758789]
[111.22557831 91.10271454]
[113.45787811 104.90519714]
[122.77509308 116.66059875]
[134.00231934 117.33773041]
[142.72200012 124.08330536]
[146.05946350 134.35577393]
[143.09442139 144.50944519]
[151.39529419 157.00326538]
[159.69616699 169.49708557]
[167.99703979 181.99090576]
[187.62959290 184.55659485]
[199.25762939 200.21855164]
[196.12892151 219.17585754]
[205.93023682 230.53077698]
[215.73153687 241.88571167]
[231.38801575 246.76492310]
[234.72628784 262.82070923]
[222.31221008 273.53622437]
[206.91633606 267.88830566]
[204.37661743 251.68701172]
[194.57530212 240.33209229]
[184.77400208 228.97717285]
[174.20922852 231.06944275]
[163.68748474 228.41110229]
[155.25729370 221.44685364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 56]
[7 52]
[8 51]
[10 49]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[18 42]
[19 41]
[20 40]
[21 39]
[24 36]
[25 35]
[27 33]
[28 32]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
