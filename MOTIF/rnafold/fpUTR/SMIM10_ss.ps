%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGGCGCCAGUGACCGCUGGGGCCAGAGCCCUGCCGGGAAAGGAGGGCUUCCGCCUUGCAGCGCAGCUCGGAUCAGCAGCAGCCCAGGAGGCCUCCCGCCCGUACUUUCCCGCGUCCAUCCCUCUGUCCCACGGUCGGUGAGUCAGCGGAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[123.91854858 534.74261475]
[123.32595062 519.75433350]
[122.73335266 504.76602173]
[110.26502991 496.66177368]
[104.89612579 482.60336304]
[108.88140106 467.90740967]
[120.89479828 458.26455688]
[120.30220032 443.27627563]
[119.41358948 428.30261230]
[118.22931671 413.34945679]
[116.89738464 398.40869141]
[115.41790771 383.48184204]
[106.46302032 371.57977295]
[112.80146027 357.08374023]
[111.32199097 342.15689087]
[109.84251404 327.23001099]
[108.36304474 312.30316162]
[106.88356781 297.37631226]
[105.40409088 282.44943237]
[101.59458160 276.06942749]
[104.04583740 267.21350098]
[102.86156464 252.26031494]
[101.67729187 237.30712891]
[100.49301910 222.35395813]
[99.30874634 207.40078735]
[98.12447357 192.44760132]
[94.44175720 185.99357605]
[97.06750488 177.18778992]
[96.17889404 162.21414185]
[95.29028320 147.24047852]
[94.40167236 132.26683044]
[78.90811157 125.05237579]
[69.15904999 111.01477051]
[67.80970001 93.97722626]
[75.22756195 78.58001709]
[89.39234161 69.01666260]
[87.91286469 54.08980560]
[86.28600311 39.17829132]
[84.51190186 24.28357315]
[82.73780823 9.38885689]
[80.96370697 -5.50585938]
[79.18961334 -20.40057564]
[77.41551208 -35.29529190]
[75.64141846 -50.19001007]
[73.86731720 -65.08472443]
[59.93688583 -75.62380219]
[57.95109940 -92.63919067]
[68.65100861 -105.58306122]
[66.58297729 -120.43981934]
[64.51495361 -135.29658508]
[62.44692230 -150.15333557]
[47.08163452 -156.19204712]
[36.90428543 -169.07205200]
[34.60886765 -185.23175049]
[40.72626877 -200.26278687]
[53.50529099 -210.11257935]
[51.14413834 -224.92558289]
[48.78298569 -239.73858643]
[46.42183304 -254.55157471]
[44.06068039 -269.36459351]
[28.89741516 -276.80181885]
[21.21355057 -291.65512085]
[23.85123444 -308.00091553]
[35.57979584 -319.45159912]
[32.92644501 -334.21505737]
[30.12736893 -348.95159912]
[27.18284988 -363.65972900]
[16.88709641 -375.67257690]
[21.97547722 -389.67105103]
[19.03095627 -404.37921143]
[16.08643532 -419.08737183]
[2.79748440 -427.64184570]
[-0.46858689 -443.10498047]
[8.22592449 -456.30276489]
[23.72271919 -459.40515137]
[36.82782364 -450.57159424]
[39.76621246 -435.04287720]
[30.79459000 -422.03189087]
[33.73910904 -407.32373047]
[36.68363190 -392.61557007]
[46.76877213 -381.65478516]
[41.89100266 -366.60424805]
[44.83552551 -351.89611816]
[49.25572968 -345.92294312]
[47.68990326 -336.86840820]
[50.34325790 -322.10494995]
[62.87494659 -317.41625977]
[71.51230621 -307.05593872]
[73.90821075 -293.67175293]
[69.32881165 -280.75405884]
[58.87368011 -271.72573853]
[61.23483276 -256.91271973]
[63.59598541 -242.09973145]
[65.95713806 -227.28672791]
[68.31829071 -212.47373962]
[81.39276886 -208.43013000]
[91.49024200 -199.09460449]
[96.59408569 -186.25369263]
[95.65146637 -172.40142822]
[88.78994751 -160.25489807]
[77.30368042 -152.22137451]
[79.37171173 -137.36460876]
[81.43973541 -122.50785065]
[83.50776672 -107.65109253]
[94.79730225 -101.37638092]
[100.48136902 -89.56155396]
[98.27379608 -76.44003296]
[88.76203918 -66.85882568]
[90.53613281 -51.96410751]
[92.31023407 -37.06938934]
[94.08432770 -22.17467308]
[95.85842896 -7.27995682]
[97.63252258 7.61475945]
[99.40662384 22.50947571]
[101.18071747 37.40419388]
[105.11553955 43.70769882]
[102.83972931 52.61033249]
[104.31919861 67.53719330]
[116.29213715 71.59127808]
[125.83776093 79.87788391]
[131.53388977 91.16242218]
[132.53189087 103.76364899]
[128.68307495 115.80413055]
[120.56085205 125.49001312]
[109.37532806 131.37821960]
[110.26393890 146.35186768]
[111.15254974 161.32553101]
[112.04116058 176.29917908]
[113.07765198 191.26333618]
[114.26192474 206.21650696]
[115.44619751 221.16969299]
[116.63047028 236.12286377]
[117.81474304 251.07603455]
[118.99901581 266.02920532]
[120.33095551 280.96997070]
[121.81042480 295.89682007]
[123.28990173 310.82369995]
[124.76937866 325.75054932]
[126.24884796 340.67739868]
[127.72832489 355.60427856]
[136.78903198 368.57400513]
[130.34477234 382.00234985]
[131.82424927 396.92922974]
[135.80337524 405.21191406]
[133.18249512 412.16516113]
[134.36677551 427.11834717]
[137.83831787 432.84603882]
[137.85307312 438.59619141]
[135.29049683 442.68368530]
[135.88308716 457.67196655]
[148.62030029 466.33624268]
[153.75340271 480.67166138]
[149.51119995 495.11007690]
[137.72163391 504.17343140]
[138.31423950 519.16174316]
[138.90684509 534.15002441]
[145.57420349 549.73791504]
[132.44120789 560.45983887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[7 150]
[8 149]
[9 146]
[10 145]
[11 143]
[12 142]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[28 128]
[29 127]
[30 126]
[31 125]
[36 118]
[37 117]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[48 104]
[49 103]
[50 102]
[51 101]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[64 86]
[65 85]
[66 83]
[67 82]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
