%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUCAGGUCUCCAUGGAGGCGGCUUCUCCUAGCAACUCGACGGGCGUUGAGCGGAGCCGCUGACCUG\
) } def
/len { sequence length } bind def

/coor [
[93.18033600 213.31269836]
[79.84310150 221.79170227]
[64.43505859 218.27491760]
[56.09752655 204.84878540]
[59.77701950 189.47879028]
[73.29055786 181.28367615]
[76.62837219 166.65975952]
[79.96618652 152.03584290]
[83.30400085 137.41191101]
[86.64181519 122.78800201]
[89.97962189 108.16407776]
[76.45671082 114.65490723]
[61.64363861 112.29420471]
[50.80820465 101.92148590]
[47.80367661 87.22547150]
[53.69852066 73.43232727]
[66.39642334 65.44714355]
[81.38179016 66.10958862]
[93.32555389 75.18408966]
[97.98032379 89.44552612]
[106.24377441 76.92692566]
[114.50723267 64.40832520]
[122.77068329 51.88972473]
[131.03413391 39.37112808]
[139.29759216 26.85252762]
[147.56105042 14.33393002]
[155.82450867 1.81533086]
[164.08795166 -10.70326805]
[160.57376099 -16.83963585]
[158.94854736 -23.68757439]
[159.32701111 -30.68225670]
[161.65940857 -37.25220490]
[165.73709106 -42.86597824]
[171.21107483 -47.07516098]
[177.62187195 -49.55015182]
[184.43797302 -50.10593796]
[191.09994507 -48.71577835]
[197.06639099 -45.51187897]
[209.20164490 -54.32865524]
[221.33689880 -63.14543533]
[233.47215271 -71.96221161]
[245.60740662 -80.77899170]
[257.74264526 -89.59577179]
[263.91485596 -104.78906250]
[280.19366455 -106.77210236]
[289.83285522 -93.50491333]
[282.91644287 -78.63564301]
[266.55944824 -77.46051788]
[254.42417908 -68.64373779]
[242.28892517 -59.82695770]
[230.15367126 -51.01018143]
[218.01841736 -42.19340134]
[205.88316345 -33.37662125]
[200.71606445 -9.42265511]
[176.60655212 -2.43981314]
[168.34310913 10.07878590]
[160.07965088 22.59738350]
[151.81619263 35.11598206]
[143.55273438 47.63458252]
[135.28929138 60.15317917]
[127.02582550 72.67177582]
[118.76237488 85.19037628]
[110.49891663 97.70897675]
[104.60354614 111.50189209]
[101.26573181 126.12580872]
[97.92791748 140.74972534]
[94.59010315 155.37365723]
[91.25228882 169.99757385]
[87.91447449 184.62149048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
