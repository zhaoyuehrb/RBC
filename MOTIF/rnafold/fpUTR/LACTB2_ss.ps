%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGGACGCUACUCGCUAUCCCCGGCCUGUUGGCUUCUUCCGCGCUGGAGUAUCCAGAUAGGCGACACGCCGGCGGGCGGCUGAGGCGGGA\
) } def
/len { sequence length } bind def

/coor [
[75.28726959 343.64526367]
[60.06915665 345.27856445]
[45.83941650 339.64181519]
[35.86794281 328.03024292]
[32.44609833 313.11215210]
[36.36020279 298.31558228]
[46.71082687 287.04067993]
[61.11946487 281.87835693]
[63.14013672 267.01507568]
[65.16081238 252.15180969]
[62.90056610 247.73004150]
[63.54449081 241.81884766]
[67.85264587 236.36645508]
[70.87212372 221.67350769]
[73.89160156 206.98056030]
[76.66249084 192.23870850]
[79.18400574 177.45216370]
[81.70552063 162.66561890]
[76.21778870 148.81881714]
[86.16481018 136.51567078]
[88.68631744 121.72911835]
[91.20783234 106.94257355]
[93.47924805 92.11554718]
[95.49992371 77.25227356]
[97.52059174 62.38899994]
[99.54126740 47.52572632]
[101.56193542 32.66245270]
[95.75420380 17.94576836]
[105.13549042 6.37680960]
[107.15615845 -8.48646355]
[109.17683411 -23.34973717]
[111.19750214 -38.21300888]
[113.21817780 -53.07628250]
[107.41044617 -67.79296875]
[116.79172516 -79.36192322]
[118.81240082 -94.22519684]
[111.57012177 -98.60784912]
[105.87691498 -104.83544159]
[102.18391418 -112.39161682]
[100.77724457 -120.65572357]
[101.75595856 -128.95379639]
[105.02520752 -136.61349487]
[110.30518341 -143.01861572]
[117.15500641 -147.65861511]
[125.00954437 -150.16932678]
[133.22596741 -150.36151123]
[138.67237854 -164.33779907]
[144.11877441 -178.31408691]
[149.56518555 -192.29037476]
[155.01159668 -206.26666260]
[155.12899780 -223.22019958]
[171.45248413 -227.80059814]
[180.37266541 -213.38301086]
[168.98788452 -200.82025146]
[163.54147339 -186.84396362]
[158.09507751 -172.86767578]
[152.64866638 -158.89138794]
[147.20225525 -144.91510010]
[158.94578552 -125.80504608]
[153.45198059 -103.80242157]
[133.67567444 -92.20452881]
[131.65499878 -77.34125519]
[137.60726929 -63.68769073]
[128.08145142 -51.05561066]
[126.06077576 -36.19233704]
[124.04010773 -21.32906532]
[122.01943207 -6.46579123]
[119.99876404 8.39748192]
[125.95102692 22.05104637]
[116.42520905 34.68312454]
[114.40454102 49.54639816]
[112.38386536 64.40966797]
[110.36319733 79.27294159]
[108.34252167 94.13621521]
[110.49346924 102.09185028]
[105.99437714 109.46408081]
[103.47286987 124.25063324]
[100.95135498 139.03717041]
[106.25872803 153.94161987]
[96.49206543 165.18713379]
[93.97055054 179.97367859]
[91.44904327 194.76022339]
[93.10768127 203.95823669]
[88.58454895 210.00004578]
[85.56507111 224.69299316]
[82.54559326 239.38594055]
[80.02407837 254.17248535]
[78.00341034 269.03576660]
[75.98273468 283.89901733]
[88.49024963 292.72064209]
[95.45517731 306.34957886]
[95.27703094 321.65405273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 89]
[9 88]
[10 87]
[13 86]
[14 85]
[15 84]
[16 82]
[17 81]
[18 80]
[20 78]
[21 77]
[22 76]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[35 62]
[36 61]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
