%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGACCGCGGCUGAGGUACAGGUGCCUCGCGGUGCAGCCGGGUCGCCUUCCAGCCCGUCCGCCUCCCGACCAGGGCCCGCGCCCCGUCCCGCCUCUCUCCCGCCCAGCCAA\
) } def
/len { sequence length } bind def

/coor [
[92.06574249 391.12243652]
[91.23211670 376.14559937]
[90.39849854 361.16879272]
[78.49370575 354.95590210]
[71.18502045 343.56124878]
[70.49165344 329.93295288]
[76.70431519 317.66137695]
[88.28012085 310.03295898]
[87.86314392 295.03875732]
[87.44617462 280.04455566]
[87.02920532 265.05035400]
[76.06564331 255.03356934]
[75.42917633 239.83325195]
[86.01004028 228.40158081]
[85.59307098 213.40737915]
[85.17610168 198.41317749]
[83.07965088 196.35388184]
[81.73378754 193.28196716]
[81.55150604 189.50288391]
[82.81807709 185.47406006]
[85.63941956 181.75238037]
[86.88904572 166.80451965]
[88.13867188 151.85665894]
[89.38829803 136.90879822]
[90.63792419 121.96094513]
[79.55085754 112.31926727]
[76.20974731 98.01115417]
[81.88016510 84.45640564]
[94.41422272 76.78942871]
[95.66384888 61.84156799]
[89.10311127 47.44478607]
[97.87380981 35.40634155]
[99.12343597 20.45848274]
[100.37306213 5.51062536]
[101.62268829 -9.43723202]
[102.87231445 -24.38508797]
[94.61682892 -40.77154541]
[105.01737213 -54.83130646]
[105.85099792 -69.80812836]
[106.68461609 -84.78494263]
[97.97680664 -100.93557739]
[107.98249817 -115.27902985]
[108.39946747 -130.27322388]
[108.81644440 -145.26742554]
[109.23341370 -160.26164246]
[109.65038300 -175.25584412]
[98.48500824 -180.29969788]
[89.74286652 -188.83351135]
[84.46153259 -199.81103516]
[83.25638580 -211.89804077]
[86.24897003 -223.63450623]
[93.05522919 -233.61096191]
[102.83460236 -240.63775635]
[114.39377594 -243.88687134]
[116.05844116 -258.79421997]
[105.99781036 -270.98269653]
[107.58557892 -286.70703125]
[119.87974548 -296.63824463]
[135.58641052 -294.88430786]
[145.38708496 -282.48583984]
[143.46719360 -266.79858398]
[130.96578979 -257.12954712]
[129.30111694 -242.22221375]
[144.28698730 -232.31695557]
[152.32553101 -216.15893555]
[151.17572021 -198.06468201]
[141.06372070 -182.91511536]
[124.64459229 -174.83886719]
[124.22761536 -159.84466553]
[123.81064606 -144.85046387]
[123.39367676 -129.85626221]
[122.97669983 -114.86205292]
[131.09893799 -105.77919769]
[130.78778076 -93.19554901]
[121.66143036 -83.95132446]
[120.82781219 -68.97450256]
[119.99419403 -53.99768829]
[127.86079407 -44.69255829]
[127.19996643 -32.12242126]
[117.82016754 -23.13546181]
[116.57054138 -8.18760490]
[115.32091522 6.76025200]
[114.07128906 21.70810890]
[112.82166290 36.65596771]
[119.47177887 49.98357773]
[110.61170197 63.09119797]
[109.36207581 78.03905487]
[120.44914246 87.68073273]
[123.79025269 101.98884583]
[118.11983490 115.54359436]
[105.58577728 123.21057129]
[104.33615112 138.15843201]
[103.08652496 153.10629272]
[101.83689880 168.05413818]
[100.58727264 183.00199890]
[100.17030334 197.99620056]
[100.58727264 212.99040222]
[101.00424194 227.98461914]
[112.20407104 238.81059265]
[112.41333771 254.02278137]
[102.02340698 264.63339233]
[102.44037628 279.62759399]
[102.85735321 294.62179565]
[103.27432251 309.61599731]
[117.31777191 318.92160034]
[123.04008484 334.59088135]
[118.39160919 350.43936157]
[105.37531281 360.33517456]
[106.20893860 375.31198120]
[107.04255676 390.28881836]
[113.95980835 405.76742554]
[101.00097656 416.69927979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[8 104]
[9 103]
[10 102]
[11 101]
[14 98]
[15 97]
[16 96]
[21 95]
[22 94]
[23 93]
[24 92]
[25 91]
[29 87]
[30 86]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[38 77]
[39 76]
[40 75]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
