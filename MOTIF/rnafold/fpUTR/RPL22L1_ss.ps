%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCUCAGCGCGUGACGCAGCACGCUUUGAUAUAAAUGCAGACCGCGCGGCCGUAGCUUCCUCUCUGCUCUCGCGGCCGACUCGCAAG\
) } def
/len { sequence length } bind def

/coor [
[112.06433105 162.06561279]
[94.88797760 163.02027893]
[78.09005737 159.30972290]
[62.91407013 151.20861816]
[50.48345566 139.31668091]
[41.71842194 124.51422119]
[27.29949760 128.64877319]
[12.88057327 132.78334045]
[-1.53835249 136.91789246]
[-12.67124081 148.15931702]
[-27.03816795 144.22985840]
[-41.45709229 148.36441040]
[-55.87601852 152.49897766]
[-70.29494476 156.63352966]
[-84.71386719 160.76809692]
[-92.15576935 174.71060181]
[-107.30091858 179.22723389]
[-121.16397858 171.63835144]
[-125.52022552 156.44628906]
[-117.78519440 142.66424561]
[-102.54792786 138.46885681]
[-88.84843445 146.34916687]
[-74.42950439 142.21461487]
[-60.01057816 138.08004761]
[-45.59165573 133.94549561]
[-31.17272949 129.81092834]
[-21.07117844 118.86524963]
[-5.67291307 122.49897766]
[8.74601269 118.36441040]
[23.16493797 114.22985077]
[37.58386230 110.09529114]
[36.83635330 97.16402435]
[38.73971558 84.35177612]
[43.21407700 72.19625854]
[50.07164764 61.20762253]
[59.02462769 51.84703445]
[69.69728088 44.50735092]
[81.64168549 39.49660110]
[94.35655975 37.02507782]
[107.30828094 37.19651413]
[119.95328522 40.00370407]
[131.76087952 45.32884216]
[142.23553467 52.94844055]
[150.93762207 62.54271698]
[157.50193787 73.70901489]
[161.65299988 85.97869873]
[176.57083130 84.41076660]
[191.48864746 82.84284210]
[206.30398560 80.49632263]
[220.97619629 77.37764740]
[235.64840698 74.25897217]
[250.32061768 71.14029694]
[264.99282837 68.02162170]
[279.66503906 64.90294647]
[294.33724976 61.78427505]
[308.82614136 57.90198898]
[323.09201050 53.26673126]
[337.35784912 48.63147736]
[341.18023682 33.68514252]
[352.49197388 23.19476318]
[367.68353271 20.50778389]
[381.90734863 26.48160744]
[390.62466431 39.21001053]
[391.05377197 54.63140488]
[383.05780029 67.82488251]
[369.18820190 74.58044434]
[353.87069702 72.74242401]
[341.99310303 62.89732742]
[327.72726440 67.53257751]
[313.46139526 72.16783905]
[311.51574707 75.35694885]
[307.81530762 77.66851044]
[302.83801270 78.23406219]
[297.45593262 76.45648956]
[282.78372192 79.57516479]
[268.11151123 82.69384003]
[253.43930054 85.81251526]
[238.76708984 88.93119049]
[224.09486389 92.04986572]
[209.42265320 95.16854095]
[207.15429688 98.13680267]
[203.23251343 100.04890442]
[198.22335815 100.09108734]
[193.05657959 97.76067352]
[178.13874817 99.32859802]
[163.22093201 100.89652252]
[160.63922119 117.90456390]
[153.56855774 133.58717346]
[142.53236389 146.78341675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 31]
[7 30]
[8 29]
[9 28]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[46 86]
[47 85]
[48 84]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[56 70]
[57 69]
[58 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
