%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUUGUGUACUUCCGCUGCAGGAGGGCGAAGCAGCCGUCAUCUAUCCCCUCUGGGAGUUCUGCCUUCCCAGGACCCUGCCCUUCCCCAGAAGGAGCAGGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[77.26463318 159.60466003]
[72.89100647 145.25643921]
[76.59205627 130.72019958]
[87.29257202 120.21171570]
[75.72364807 129.75949097]
[64.15473175 139.30728149]
[58.43612671 154.05882263]
[43.69513702 156.19248962]
[32.12621689 165.74026489]
[20.55729866 175.28805542]
[8.98837852 184.83583069]
[9.04177761 200.47332764]
[-1.00856233 212.45350647]
[-16.41717720 215.11968994]
[-29.90859222 207.21299744]
[-35.11257172 192.46672058]
[-29.57195663 177.84361267]
[-15.90285587 170.24822998]
[-0.55940109 173.26690674]
[11.00951862 163.71913147]
[22.57843781 154.17135620]
[34.14735794 144.62356567]
[39.03847504 130.55494690]
[54.60694885 127.73835754]
[66.17587280 118.19057465]
[77.74478912 108.64279938]
[75.11597443 93.87495422]
[60.96292877 88.90592194]
[46.80987930 83.93688965]
[32.67382431 91.00424957]
[17.70738411 85.92673492]
[10.78987885 71.71674347]
[16.02534294 56.80482483]
[30.30767059 50.03794098]
[45.16340637 55.43077087]
[51.77891159 69.78384399]
[65.93195343 74.75287628]
[80.08500671 79.72190094]
[70.04681396 68.57583618]
[56.21142578 62.78083801]
[46.13639832 51.66806412]
[41.72116470 37.33259201]
[43.79813004 22.47707939]
[51.97572327 9.90222454]
[64.71222687 1.97875226]
[79.60644531 0.20046794]
[93.85037994 4.90263033]
[104.75863647 15.19874477]
[110.27468872 29.14769363]
[109.35859680 44.11969376]
[102.18188477 57.29345322]
[101.31457520 72.26835632]
[109.25506592 59.54245377]
[117.19554901 46.81654739]
[125.13603973 34.09064484]
[133.07652283 21.36473846]
[141.01701355 8.63883400]
[148.95750427 -4.08707094]
[156.89799500 -16.81297493]
[151.88429260 -31.62502670]
[157.61271667 -46.17560196]
[171.37846375 -53.59436035]
[186.68179321 -50.37839508]
[196.29690552 -38.04618835]
[195.68386841 -22.42062378]
[185.13212585 -10.87962151]
[169.62388611 -8.87248802]
[161.68341064 3.85341668]
[153.74291992 16.57932091]
[145.80242920 29.30522728]
[137.86193848 42.03113174]
[129.92144775 54.75703812]
[121.98096466 67.48294067]
[114.04048157 80.20884705]
[119.00082397 88.66525269]
[119.83546448 97.56850433]
[117.07785034 105.16927338]
[130.14100647 112.54177856]
[143.20416260 119.91429138]
[156.26733398 127.28679657]
[169.33049011 134.65930176]
[182.50047302 141.83924866]
[195.77442932 148.82508850]
[209.04838562 155.81094360]
[222.32234192 162.79678345]
[235.59631348 169.78262329]
[251.95278931 168.60047913]
[260.92959595 182.32450867]
[253.29212952 196.83662415]
[236.89718628 197.20799255]
[228.61045837 183.05657959]
[215.33650208 176.07073975]
[202.06254578 169.08489990]
[188.78858948 162.09906006]
[175.51461792 155.11322021]
[168.01165771 154.77801514]
[161.95797729 147.72245789]
[148.89482117 140.34996033]
[135.83166504 132.97744751]
[122.76850128 125.60494232]
[109.70534515 118.23243713]
[122.08348083 126.70484924]
[128.27359009 140.36802673]
[126.48092651 155.26052856]
[117.22525787 167.06445312]
[103.19013977 172.35740662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[8 22]
[9 21]
[10 20]
[11 19]
[27 38]
[28 37]
[29 36]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[77 101]
[78 100]
[79 99]
[80 98]
[81 97]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
