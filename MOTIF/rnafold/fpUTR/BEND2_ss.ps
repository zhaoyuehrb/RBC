%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCUGCCCGGGCCUCAUUGUGCCUCGGACAACGAGUGUACGCAGUUACCACACAGUUACCAAGCAGUUACCUCAGAGCCGCGGCGCAGACGUAGGCCUCAGGUCUCGGGCCUCAGGUCUCGGGCCUCAGAGCCAGACCCCGCCAUCUCACG\
) } def
/len { sequence length } bind def

/coor [
[198.70928955 352.30120850]
[193.35743713 338.28842163]
[188.00556946 324.27566528]
[182.65371704 310.26290894]
[177.30184937 296.25015259]
[160.19732666 289.84783936]
[153.02658081 272.70596313]
[160.73681641 255.45121765]
[154.82148743 241.66685486]
[148.90614319 227.88249207]
[142.99081421 214.09812927]
[137.07546997 200.31375122]
[131.02075195 186.59004211]
[124.82725525 172.92839050]
[118.63376617 159.26673889]
[112.44027710 145.60508728]
[106.24678802 131.94343567]
[88.54991913 130.46803284]
[74.26142120 119.92314148]
[67.63459778 103.44766998]
[70.64205933 85.94592285]
[58.96894073 76.52582550]
[47.29582214 67.10572052]
[35.62270737 57.68561554]
[23.94959068 48.26551437]
[12.27647305 38.84540939]
[-3.32200646 36.20003510]
[-8.36739063 22.18599319]
[-20.04050827 12.76589012]
[-31.71362495 3.34578729]
[-44.51640701 9.05940819]
[-58.46506119 8.68835640]
[-70.82795715 2.36253476]
[-79.20873260 -8.62761211]
[-82.01071167 -22.09393311]
[-78.74089050 -35.38611603]
[-90.22069550 -45.04086304]
[-101.70049286 -54.69561005]
[-110.33686829 -57.85063934]
[-113.31254578 -64.66423035]
[-124.59431458 -74.54965210]
[-135.87608337 -84.43507385]
[-155.77636719 -87.39893341]
[-161.32820129 -105.88515472]
[-173.00131226 -115.30525208]
[-193.00534058 -117.46020508]
[-199.30178833 -135.70625305]
[-211.34707642 -144.64555359]
[-227.03994751 -146.65661621]
[-232.64910889 -160.45468140]
[-244.69439697 -169.39398193]
[-260.28970337 -166.83232117]
[-273.07971191 -176.11624146]
[-275.47634888 -191.73776245]
[-266.05770874 -204.42889404]
[-250.41172791 -206.66023254]
[-237.82087708 -197.10797119]
[-235.75508118 -181.43927002]
[-223.70980835 -172.49996948]
[-208.87849426 -171.12829590]
[-202.40776062 -156.69084167]
[-190.36248779 -147.75152588]
[-180.35778809 -150.15791321]
[-170.48428345 -146.55502319]
[-164.11904907 -137.91612244]
[-163.58120728 -126.97837067]
[-151.90809631 -117.55826569]
[-141.81410217 -119.55722809]
[-132.09471130 -115.55717468]
[-126.08480835 -106.66741180]
[-125.99066162 -95.71685028]
[-114.70889282 -85.83142853]
[-103.42712402 -75.94599915]
[-92.04574585 -66.17541504]
[-80.56594849 -56.52066803]
[-69.08614349 -46.86592102]
[-54.06345749 -52.74451447]
[-38.03116226 -50.24730301]
[-25.36262894 -39.96003342]
[-19.56161499 -24.60637856]
[-22.29352188 -8.32732964]
[-10.62040520 1.09277344]
[1.05271220 10.51287651]
[15.81625175 12.48446369]
[21.69657516 27.17229462]
[33.36969376 36.59239578]
[45.04280853 46.01250076]
[56.71592712 55.43260193]
[68.38904572 64.85270691]
[80.06215668 74.27281189]
[87.35525513 70.00806427]
[95.50028229 67.76402283]
[103.94847870 67.69187164]
[112.13064575 69.79647064]
[119.49551392 73.93602753]
[125.54687500 79.83163452]
[139.14506531 73.50001526]
[152.74324036 67.16839600]
[166.34143066 60.83678055]
[179.93960571 54.50516129]
[193.53779602 48.17354202]
[196.37487793 32.91803360]
[207.66023254 22.26812363]
[223.05438232 20.31892014]
[236.63800049 27.81993294]
[243.18788147 41.88686752]
[240.18547058 57.11070251]
[228.78524780 67.63756561]
[213.37084961 69.41965485]
[199.86941528 61.77172470]
[186.27122498 68.10334778]
[172.67304993 74.43496704]
[159.07485962 80.76658630]
[145.47668457 87.09820557]
[131.87849426 93.42982483]
[130.52244568 111.30426788]
[119.90843201 125.74995422]
[126.10192108 139.41160583]
[132.29541016 153.07325745]
[138.48890686 166.73490906]
[144.68238831 180.39654541]
[151.11363220 186.96772766]
[150.85983276 194.39842224]
[156.77517700 208.18278503]
[162.69050598 221.96714783]
[168.60585022 235.75152588]
[174.52119446 249.53588867]
[186.27624512 251.73237610]
[195.40046692 259.27511597]
[199.68078613 270.18341064]
[198.15263367 281.68008423]
[191.31462097 290.89828491]
[196.66647339 304.91104126]
[202.01834106 318.92379761]
[207.37019348 332.93658447]
[212.72206116 346.94934082]
[227.80439758 345.94219971]
[242.51315308 349.42703247]
[255.54042053 357.09393311]
[265.72784424 368.26123047]
[272.16952515 381.93588257]
[274.29272461 396.90194702]
[271.90859985 411.82867432]
[265.22918701 425.38879395]
[254.84838867 436.37655640]
[241.68927002 443.81488037]
[226.92192078 447.04241943]
[211.85945129 445.77215576]
[197.84121704 440.11703491]
[186.11369324 430.57992554]
[177.71968079 418.00885010]
[173.40557861 403.52160645]
[173.55499268 388.40643311]
[178.15464783 374.00729370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[8 127]
[9 126]
[10 125]
[11 124]
[12 123]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[28 83]
[29 82]
[30 81]
[36 76]
[37 75]
[38 74]
[40 73]
[41 72]
[42 71]
[44 67]
[45 66]
[47 62]
[48 61]
[50 59]
[51 58]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
