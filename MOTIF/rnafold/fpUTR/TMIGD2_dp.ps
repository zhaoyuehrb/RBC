%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:42 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TMIGD2)
} def

/sequence { (\
GGAAGUCUGUCAACUGGGAGGGGGAGAGGGGGGUGAUGGGCCAGGA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.006001414 ubox
1 8 0.006470990 ubox
1 42 0.135657854 ubox
2 6 0.006605289 ubox
2 7 0.007700327 ubox
2 11 0.005052770 ubox
2 41 0.120548776 ubox
3 10 0.004790465 ubox
4 15 0.003864400 ubox
5 14 0.003989661 ubox
5 34 0.007197748 ubox
5 37 0.044309012 ubox
5 41 0.476415940 ubox
6 13 0.003804996 ubox
6 19 0.006540960 ubox
6 21 0.024085306 ubox
6 22 0.005018398 ubox
6 23 0.053149935 ubox
6 24 0.005475953 ubox
6 25 0.053493870 ubox
6 27 0.048464614 ubox
6 29 0.614640594 ubox
6 30 0.060717849 ubox
6 31 0.276034785 ubox
6 32 0.005699904 ubox
6 33 0.005207966 ubox
6 36 0.044846482 ubox
6 39 0.005537286 ubox
6 40 0.483743440 ubox
6 45 0.007181411 ubox
6 46 0.005252330 ubox
7 18 0.006989153 ubox
7 20 0.030655749 ubox
7 21 0.006222553 ubox
7 22 0.067555714 ubox
7 23 0.006221505 ubox
7 24 0.057147907 ubox
7 26 0.051768657 ubox
7 28 0.783620366 ubox
7 29 0.068769966 ubox
7 30 0.358681279 ubox
7 31 0.019991174 ubox
7 32 0.006008055 ubox
7 33 0.011011310 ubox
7 35 0.043489796 ubox
7 38 0.006027395 ubox
7 39 0.485114164 ubox
7 44 0.007714421 ubox
7 45 0.005491904 ubox
8 17 0.006956251 ubox
8 19 0.030692072 ubox
8 20 0.005840769 ubox
8 21 0.067478744 ubox
8 22 0.005286193 ubox
8 23 0.057064317 ubox
8 25 0.050608504 ubox
8 27 0.782619382 ubox
8 28 0.057722884 ubox
8 29 0.357866584 ubox
8 30 0.016382692 ubox
8 31 0.006216841 ubox
8 32 0.012106083 ubox
8 38 0.483235634 ubox
8 43 0.007150208 ubox
8 44 0.004213246 ubox
9 34 0.004238343 ubox
9 37 0.483232797 ubox
9 42 0.005265853 ubox
10 17 0.030403209 ubox
10 18 0.004253508 ubox
10 19 0.067951265 ubox
10 21 0.056637647 ubox
10 23 0.043192269 ubox
10 24 0.024726781 ubox
10 25 0.786450093 ubox
10 27 0.358896559 ubox
10 29 0.005993602 ubox
10 30 0.013825473 ubox
10 32 0.035983248 ubox
10 33 0.013147010 ubox
10 36 0.485050638 ubox
11 16 0.030485872 ubox
11 17 0.005856747 ubox
11 18 0.067955537 ubox
11 20 0.056939982 ubox
11 22 0.042937925 ubox
11 23 0.031307953 ubox
11 24 0.788004175 ubox
11 26 0.359251851 ubox
11 28 0.005979703 ubox
11 29 0.014087871 ubox
11 30 0.003203616 ubox
11 31 0.038363230 ubox
11 32 0.014156710 ubox
11 35 0.484889357 ubox
12 34 0.400901524 ubox
13 34 0.195635576 ubox
14 20 0.060907723 ubox
14 21 0.781573839 ubox
14 22 0.117294934 ubox
14 23 0.351743577 ubox
14 24 0.025070966 ubox
14 26 0.018723077 ubox
14 28 0.046004700 ubox
14 29 0.028039867 ubox
14 30 0.077976088 ubox
14 31 0.171731537 ubox
14 32 0.342526556 ubox
14 33 0.276586829 ubox
14 44 0.013295972 ubox
15 19 0.056495040 ubox
15 20 0.761293772 ubox
15 21 0.117027229 ubox
15 22 0.347485307 ubox
15 23 0.025166642 ubox
15 25 0.019157036 ubox
15 27 0.046271070 ubox
15 28 0.028299547 ubox
15 29 0.077924985 ubox
15 30 0.170292516 ubox
15 31 0.339417475 ubox
15 32 0.273001050 ubox
15 43 0.013343459 ubox
16 42 0.013350953 ubox
17 41 0.013337541 ubox
28 42 0.017568824 ubox
29 41 0.017869951 ubox
29 42 0.075423529 ubox
30 41 0.075487304 ubox
30 42 0.131075254 ubox
31 41 0.130539296 ubox
31 42 0.286617260 ubox
32 41 0.285172162 ubox
32 42 0.799282253 ubox
33 41 0.801013596 ubox
34 40 0.797569047 ubox
34 43 0.028679913 ubox
35 42 0.031773381 ubox
37 43 0.008619567 ubox
38 42 0.009416251 ubox
6 29 0.9500000 lbox
7 28 0.9500000 lbox
8 27 0.9500000 lbox
10 25 0.9500000 lbox
11 24 0.9500000 lbox
14 21 0.9500000 lbox
15 20 0.9500000 lbox
32 42 0.9500000 lbox
33 41 0.9500000 lbox
34 40 0.9500000 lbox
showpage
end
%%EOF
