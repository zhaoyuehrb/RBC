%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGUCCCCGGCCGGCGAGAGCGGGCGCCGGGGUUCGCUCUGAGUCGCGUGGCAGGCCGCGCUGCGUCCACCGCUGCCGAGUUCAGAGCCGCGCACCGCCCGCCGCCGCAGGUCGGGUUCCCAGCGCUACUCCCAAGACACCGCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[263.24618530 461.68765259]
[258.31088257 453.00039673]
[255.32342529 443.45663452]
[254.42289734 433.48773193]
[255.65396118 423.54501343]
[258.96463013 414.07955933]
[264.20855713 405.52151489]
[271.15139771 398.26074219]
[263.47311401 385.37493896]
[255.79484558 372.48913574]
[248.11657715 359.60333252]
[240.43829346 346.71752930]
[232.76002502 333.83169556]
[225.08174133 320.94589233]
[211.92008972 313.97308350]
[211.50274658 298.15740967]
[203.82446289 285.27157593]
[196.14619446 272.38577271]
[181.32128906 271.21954346]
[169.89057922 261.43164062]
[166.37405396 246.61653137]
[172.32418823 232.40730286]
[164.64591980 219.52149963]
[156.96763611 206.63568115]
[149.28936768 193.74987793]
[141.61108398 180.86407471]
[133.93281555 167.97825623]
[126.25453949 155.09245300]
[108.73733521 146.99237061]
[108.60015869 126.87596893]
[100.39593506 114.31847382]
[88.00847626 107.83445740]
[87.04656982 93.88574982]
[78.84234619 81.32825470]
[74.76451111 79.45699310]
[71.82453156 76.64565277]
[70.18006134 73.38069916]
[69.80976868 70.14892578]
[70.52946472 67.37743378]
[63.39025116 54.18532562]
[56.25104141 40.99322128]
[49.11183167 27.80111313]
[41.97261810 14.60900784]
[34.83340836 1.41690123]
[27.69419670 -11.77520466]
[20.41904068 -24.89282990]
[13.00871468 -37.93457413]
[5.59838820 -50.97631836]
[-1.40695298 -56.93859863]
[-1.82713163 -64.36505890]
[-8.96634293 -77.55716705]
[-16.10555267 -90.74926758]
[-23.24476433 -103.94137573]
[-30.38397598 -117.13348389]
[-48.01052856 -126.82847595]
[-46.79707336 -146.08961487]
[-54.47534943 -158.97541809]
[-68.18621063 -166.86990356]
[-68.05435181 -181.76393127]
[-75.73262787 -194.64973450]
[-83.41090393 -207.53553772]
[-96.71284485 -218.04718018]
[-90.29435730 -233.73919678]
[-73.43877411 -231.91552734]
[-70.52509308 -215.21382141]
[-62.84681702 -202.32801819]
[-55.16854095 -189.44219971]
[-42.00688171 -182.46939087]
[-41.58953857 -166.65370178]
[-33.91126251 -153.76788330]
[-23.74576950 -152.13784790]
[-16.01691246 -145.00726318]
[-13.47002792 -134.57765198]
[-17.19186974 -124.27268982]
[-10.05265808 -111.08058929]
[-2.91344714 -97.88848114]
[4.22576380 -84.69637299]
[11.36497498 -71.50426483]
[18.64013100 -58.38664246]
[26.05045700 -45.34489822]
[33.46078491 -32.30315781]
[39.53808594 -28.01419258]
[40.88630295 -18.91441536]
[48.02551270 -5.72230959]
[55.16472626 7.46979666]
[62.30393600 20.66190338]
[69.44314575 33.85400772]
[76.58235931 47.04611588]
[83.72156525 60.23822021]
[91.39984131 73.12403107]
[99.60406494 85.68152618]
[111.99152374 92.16554260]
[112.95343018 106.11425018]
[121.15765381 118.67174530]
[131.99198914 120.30310059]
[139.95239258 127.50697327]
[142.54501343 137.69807434]
[139.14035034 147.41416931]
[146.81861877 160.29998779]
[154.49690247 173.18579102]
[162.17517090 186.07160950]
[169.85345459 198.95741272]
[177.53172302 211.84321594]
[185.21000671 224.72903442]
[200.53858948 226.25888062]
[211.89440918 236.40278625]
[215.06221008 251.11431885]
[209.03199768 264.70748901]
[216.71028137 277.59332275]
[224.38854980 290.47912598]
[238.09941101 298.37359619]
[237.96755981 313.26763916]
[245.64582825 326.15344238]
[253.32411194 339.03924561]
[261.00238037 351.92504883]
[268.68066406 364.81085205]
[276.35894775 377.69668579]
[284.03720093 390.58248901]
[304.50042725 387.45034790]
[324.29168701 393.37030029]
[339.60879517 407.16580200]
[347.52593994 426.15112305]
[346.55245972 446.65414429]
[336.91342163 464.72656250]
[346.60791016 476.17282104]
[356.30239868 487.61907959]
[365.99688721 499.06533813]
[379.66436768 497.02175903]
[392.44952393 501.97448730]
[401.03659058 512.52392578]
[403.25573730 525.83422852]
[398.63058472 538.39532471]
[408.08642578 550.03948975]
[423.58929443 555.38671875]
[426.44384766 571.53552246]
[413.71356201 581.87341309]
[398.49426270 575.76562500]
[396.44226074 559.49536133]
[386.98638916 547.85119629]
[370.66098022 549.26855469]
[356.55447388 540.60858154]
[350.30599976 525.10174561]
[354.55062866 508.75982666]
[344.85614014 497.31356812]
[335.16165161 485.86730957]
[325.46716309 474.42105103]
[316.48013306 478.63861084]
[306.79510498 480.86041260]
[296.85015869 480.98202515]
[287.09582520 478.99407959]
[277.97497559 474.98287964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[16 110]
[17 109]
[18 108]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[30 94]
[31 93]
[33 91]
[34 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 81]
[47 80]
[48 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[56 70]
[57 69]
[59 67]
[60 66]
[61 65]
[124 146]
[125 145]
[126 144]
[127 143]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
