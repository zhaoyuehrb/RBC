%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAGAGCUUGGUACAGCCCAAAUAGUUUUCAGGUUAAGAAAGCCAGAAUCUUUGUUCAGCCACACUGACUGAACAGACUUUUAGUGGGGUUACCUGGCUAACAGCAGCAGCGGCAACGGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGGGCUCCUGGGAUAACUCAGGCAUAGUUCAACACU\
) } def
/len { sequence length } bind def

/coor [
[135.62190247 427.51614380]
[134.15164185 412.58834839]
[132.68138123 397.66058350]
[131.21112061 382.73281860]
[118.28914642 375.37344360]
[112.10530853 361.65396118]
[115.22219086 346.74966431]
[126.64962769 336.41912842]
[125.17936707 321.49136353]
[123.70911407 306.56356812]
[122.23885345 291.63580322]
[120.76860046 276.70803833]
[119.29833984 261.78027344]
[105.25509644 256.75506592]
[94.74309540 246.08700562]
[89.88548279 231.85449219]
[91.69643402 216.86312866]
[99.86993408 204.09281921]
[112.82992554 196.10533142]
[111.35966492 181.17756653]
[109.88941193 166.24978638]
[108.41915131 151.32202148]
[101.98619080 147.46624756]
[94.27443695 160.33204651]
[81.40876007 152.62008667]
[89.12026215 139.75471497]
[82.68729401 135.89894104]
[68.82910156 141.63919067]
[54.97090912 147.37944031]
[41.11271667 153.11968994]
[27.25452423 158.85993958]
[13.39633083 164.60018921]
[8.86688995 179.56742859]
[-4.25182390 188.07821655]
[-19.76555634 186.11399841]
[-30.34919739 174.60224915]
[-31.00547409 158.97843933]
[-21.42451477 146.61967468]
[-6.13015366 143.36135864]
[7.65607882 150.74200439]
[21.51427269 145.00175476]
[35.37246323 139.26150513]
[49.23065948 133.52124023]
[63.08885193 127.78099823]
[76.94704437 122.04074097]
[73.62274170 111.87562561]
[74.12907410 102.15541840]
[77.76019287 94.16001129]
[65.28814697 85.82645416]
[52.81610489 77.49290466]
[37.50656128 80.36615753]
[24.97684860 71.73708344]
[22.33198547 57.12406540]
[9.85994148 48.79051208]
[-2.61210275 40.45695877]
[-15.08414745 32.12340546]
[-27.55619049 23.78985214]
[-40.02823639 15.45629787]
[-52.50027847 7.12274408]
[-64.97232056 -1.21080923]
[-77.44436646 -9.54436302]
[-93.21740723 -10.77799797]
[-99.50112915 -24.28222084]
[-111.97317505 -32.61577606]
[-128.50210571 -36.38817596]
[-129.45278931 -53.31544876]
[-113.45021057 -58.91491699]
[-103.63962555 -45.08781815]
[-91.16757965 -36.75426483]
[-76.28662109 -36.11670303]
[-69.11081696 -22.01640701]
[-56.63877106 -13.68285370]
[-44.16672516 -5.34929991]
[-31.69468117 2.98425364]
[-19.22263718 11.31780720]
[-6.75059366 19.65136147]
[5.72145081 27.98491478]
[18.19349480 36.31846619]
[30.66553879 44.65201950]
[45.17835236 41.50339508]
[57.94549179 49.77713776]
[61.14965820 65.02085876]
[73.62170410 73.35441589]
[86.09375000 81.68796539]
[102.95441437 74.95478821]
[121.22770691 82.60591125]
[129.57305908 102.38436890]
[121.11260223 123.90588379]
[133.44662476 115.36938477]
[145.78063965 106.83287811]
[158.11466980 98.29637909]
[170.44868469 89.75988007]
[173.62828064 83.93353271]
[178.53982544 81.03450775]
[183.32885742 81.15361786]
[195.93559265 73.02524567]
[208.54231262 64.89687347]
[221.14904785 56.76850128]
[233.62109375 48.43494415]
[245.95510864 39.89844513]
[258.28912354 31.36194229]
[260.01641846 27.33840561]
[262.67285156 24.37979126]
[265.80633545 22.64797211]
[268.95880127 22.14021683]
[271.72082520 22.70166206]
[284.58676147 14.99012089]
[292.44577026 1.25891066]
[307.34008789 1.35228896]
[320.20602417 -6.35925198]
[328.06506348 -20.09046173]
[342.95938110 -19.99708366]
[355.82531738 -27.70862579]
[363.68432617 -41.43983459]
[378.57864380 -41.34645844]
[391.44458008 -49.05799866]
[391.29699707 -64.35262299]
[398.77539062 -77.58024597]
[411.78424072 -85.23772430]
[426.77896118 -85.35482788]
[439.73178101 -78.00023651]
[452.59771729 -85.71177673]
[460.45675659 -99.44299316]
[475.35107422 -99.34960938]
[488.21701050 -107.06114960]
[495.70581055 -121.65052032]
[512.09613037 -122.18934631]
[520.52697754 -108.12332916]
[512.32543945 -93.92238617]
[495.92852783 -94.19522095]
[483.06262207 -86.48368073]
[476.12384033 -73.30405426]
[460.30926514 -72.84584808]
[447.44332886 -65.13430786]
[447.82357788 -50.24401093]
[440.65182495 -37.07503128]
[427.76623535 -29.21198273]
[412.57519531 -28.85207367]
[399.15612793 -36.19207001]
[386.29019165 -28.48052788]
[379.35140991 -15.30089855]
[363.53683472 -14.84269619]
[350.67092896 -7.13115501]
[343.73214722 6.04847431]
[327.91757202 6.50667715]
[315.05163574 14.21821785]
[308.11285400 27.39784813]
[292.29827881 27.85605049]
[279.43237305 35.56759262]
[266.82562256 43.69596481]
[254.49160767 52.23246765]
[242.15759277 60.76897049]
[240.43495178 65.23904419]
[235.87702942 68.66731262]
[229.27742004 69.37522888]
[216.67068481 77.50360107]
[204.06396484 85.63197327]
[191.45724487 93.76034546]
[178.98519897 102.09390259]
[166.65116882 110.63040161]
[154.31715393 119.16690826]
[141.98312378 127.70340729]
[129.64910889 136.23991394]
[123.34692383 149.85176086]
[124.81718445 164.77954102]
[126.28743744 179.70730591]
[127.75769806 194.63507080]
[142.02694702 199.94071960]
[152.53475952 210.87107849]
[157.23558044 225.22108459]
[155.24794006 240.12779236]
[147.01914978 252.64164734]
[134.22612000 260.30999756]
[135.69636536 275.23779297]
[137.16662598 290.16555786]
[138.63688660 305.09332275]
[140.10714722 320.02108765]
[141.57739258 334.94885254]
[154.80064392 342.85153198]
[160.76531982 356.86138916]
[157.37684631 371.52365112]
[146.13890076 381.26257324]
[147.60916138 396.19033813]
[149.07940674 411.11810303]
[150.54966736 426.04586792]
[163.55760193 434.72503662]
[167.89373779 449.74942017]
[161.51071167 464.02496338]
[147.42237854 470.81118774]
[132.28082275 466.90383911]
[123.23542023 454.14788818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 185]
[2 184]
[3 183]
[4 182]
[8 178]
[9 177]
[10 176]
[11 175]
[12 174]
[13 173]
[19 167]
[20 166]
[21 165]
[22 164]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[48 84]
[49 83]
[50 82]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[63 69]
[64 68]
[88 163]
[89 162]
[90 161]
[91 160]
[92 159]
[95 158]
[96 157]
[97 156]
[98 155]
[99 152]
[100 151]
[101 150]
[106 149]
[107 148]
[109 146]
[110 145]
[112 143]
[113 142]
[115 140]
[116 139]
[121 134]
[122 133]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
