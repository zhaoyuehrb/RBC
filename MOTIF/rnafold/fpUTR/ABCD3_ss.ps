%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGCUCUCCUCCCAGUCUCCCCCGCGCUGCGUGCAGUAAGGUAGCCGCCGCCGCCGCCGCCGCCGCGUCCCCUCGCCGGCUCGCUGGUACCGGCAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[-15.73470402 314.17147827]
[-16.14965248 329.22610474]
[-19.79163933 343.83944702]
[-26.49032402 357.32803345]
[-35.93239212 369.06094360]
[-47.67622757 378.48944092]
[-61.17254257 385.17251587]
[-75.79010010 388.79760742]
[-90.84519958 389.19512939]
[-105.63368988 386.34652710]
[-119.46389008 380.38500977]
[-131.68893433 371.58941650]
[-141.73703003 360.37115479]
[-149.13822937 347.25488281]
[-153.54634094 332.85409546]
[-154.75520325 317.84234619]
[-152.70826721 302.92175293]
[-147.50126648 288.79019165]
[-139.37776184 276.10858154]
[-128.71769714 265.47012329]
[-116.01965332 257.37234497]
[-101.87754822 252.19404602]
[-86.95283508 250.17738342]
[-71.94355774 251.41668701]
[-57.55174637 255.85400391]
[-44.45051956 263.28176880]
[-34.42490005 252.12440491]
[-24.39928055 240.96704102]
[-14.37365913 229.80967712]
[-4.34803867 218.65229797]
[5.67758226 207.49493408]
[15.70320225 196.33755493]
[25.38390350 184.87963867]
[34.71067810 173.13180542]
[44.03745270 161.38398743]
[53.36422729 149.63616943]
[62.51076508 137.74748230]
[71.47493744 125.72070312]
[80.43910980 113.69391632]
[73.94589233 96.97595978]
[80.96364594 78.68228912]
[99.91946411 69.06874084]
[100.83392334 54.09663773]
[101.74838257 39.12453842]
[94.86678314 24.87833977]
[103.36560059 12.64643764]
[104.28005981 -2.32566166]
[97.39846039 -16.57186127]
[105.89727783 -28.80376434]
[106.81173706 -43.77586365]
[99.01300049 -58.20194244]
[107.83625793 -72.02518463]
[124.20490265 -71.02542877]
[131.28027344 -56.23113632]
[121.78383636 -42.86140442]
[120.86937714 -27.88930511]
[127.81638336 -14.71400928]
[119.25215912 -1.41120219]
[118.33769989 13.56089687]
[125.28470612 26.73619270]
[116.72048187 40.03900146]
[115.80602264 55.01110077]
[114.89156342 69.98320007]
[126.49578094 79.48804474]
[140.99449158 75.64259338]
[155.49319458 71.79714966]
[169.99191284 67.95170593]
[184.43028259 63.88560104]
[198.80497742 59.59978867]
[206.09999084 45.57986069]
[221.19685364 40.90437317]
[235.13887024 48.34720612]
[239.65449524 63.49266052]
[232.06466675 77.35520172]
[216.87231445 81.71044159]
[203.09078979 73.97447968]
[188.71609497 78.26029205]
[183.11041260 83.27288055]
[173.83735657 82.45040894]
[159.33865356 86.29586029]
[144.83993530 90.14130402]
[130.34123230 93.98674774]
[125.07917786 113.70628357]
[109.60228729 124.40814209]
[92.46589661 122.65808868]
[83.50172424 134.68487549]
[74.53755188 146.71165466]
[71.85054016 155.62490845]
[65.11204529 158.96295166]
[55.78527451 170.71076965]
[46.45849609 182.45858765]
[37.13172150 194.20640564]
[35.72888947 200.95185852]
[31.65980721 205.22409058]
[26.86057472 206.36317444]
[16.83495331 217.52055359]
[6.80933237 228.67791748]
[-3.21628809 239.83529663]
[-13.24190903 250.99266052]
[-23.26752853 262.15002441]
[-33.29314804 273.30740356]
[-24.51171112 285.54260254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 101]
[27 100]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[33 92]
[34 91]
[35 90]
[36 89]
[37 87]
[38 86]
[39 85]
[42 63]
[43 62]
[44 61]
[46 59]
[47 58]
[49 56]
[50 55]
[64 82]
[65 81]
[66 80]
[67 79]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
