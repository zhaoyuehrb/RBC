%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAACCGGAGGCCCUCGCUCUUCCAAUACUCACGCCCUAGCUACAGAGGUCAAGGAAGGUUUCCCCAGGAGCAGUUUUGGUUUCAGACGGCGCCGUCUCCCGCGAAAGUCCUGAGAGGAGCCCAGCCUUUUCCGCCUGCCGCCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[95.21940613 264.27420044]
[85.83722687 276.78454590]
[70.59690094 280.28689575]
[56.69445419 273.12759399]
[50.69418335 258.68698120]
[55.42924118 243.78352356]
[68.66387939 235.45414734]
[70.53149414 220.57086182]
[72.39910126 205.68759155]
[74.26671600 190.80430603]
[68.17426300 177.21272278]
[77.56958771 164.48327637]
[79.43719482 149.60000610]
[81.30480957 134.71672058]
[76.55062866 128.91604614]
[67.77622223 141.08198547]
[59.00181198 153.24790955]
[50.22740555 165.41383362]
[41.45299530 177.57975769]
[38.58746719 192.30349731]
[30.07285690 204.65264893]
[17.33019257 212.56620789]
[2.48612952 214.72348022]
[-11.98196697 210.76441956]
[-23.65947723 201.34976196]
[-30.59751129 188.05075073]
[-31.63816261 173.08688354]
[-26.60775375 158.95553589]
[-16.34582138 148.01512146]
[-2.56500936 142.09150696]
[12.43405056 142.17315674]
[26.08610725 135.95854187]
[39.73816299 129.74392700]
[53.39021683 123.52931976]
[67.04227448 117.31471252]
[62.28809357 111.51403809]
[47.32784653 110.42272949]
[32.81062317 118.05046082]
[19.09259987 109.06447601]
[20.28570366 92.70878601]
[35.16257095 85.80872345]
[48.41915512 95.46247864]
[63.37940598 96.55379486]
[75.27605438 77.79059601]
[94.07656097 70.91037750]
[111.06633759 76.31948090]
[121.04906464 65.12371826]
[131.03178406 53.92795181]
[134.32080078 35.84032059]
[151.13951111 30.92798042]
[160.88716125 19.52696037]
[159.84133911 3.98527265]
[169.88926697 -7.43812466]
[184.71232605 -8.33936977]
[194.45997620 -19.74039078]
[204.20762634 -31.14141273]
[213.95529175 -42.54243469]
[212.90946960 -58.08411789]
[222.95738220 -69.50751495]
[237.78045654 -70.40876007]
[247.52810669 -81.80978394]
[250.61518860 -97.32688904]
[264.76678467 -101.97244263]
[274.51443481 -113.37346649]
[284.26208496 -124.77449036]
[294.00976562 -136.17550659]
[296.72531128 -156.10723877]
[315.13507080 -161.89601135]
[324.40002441 -173.69265747]
[333.66497803 -185.48928833]
[342.92993164 -197.28593445]
[352.19488525 -209.08256531]
[352.66030884 -213.54853821]
[354.38265991 -217.23696899]
[356.95083618 -219.84202576]
[359.89596558 -221.22776794]
[362.75350952 -221.43212891]
[372.96697998 -232.41778564]
[383.18045044 -243.40345764]
[393.39395142 -254.38911438]
[397.12384033 -269.76437378]
[411.45645142 -273.81723022]
[421.66992188 -284.80288696]
[418.83694458 -299.94488525]
[425.38674927 -313.69094849]
[438.61825562 -320.85964966]
[453.35745239 -318.88610840]
[463.57092285 -329.87179565]
[473.78439331 -340.85745239]
[483.99789429 -351.84310913]
[494.21136475 -362.82879639]
[497.34695435 -378.92535400]
[512.94067383 -384.00155640]
[524.95104980 -372.83538818]
[521.02282715 -356.91369629]
[505.19702148 -352.61529541]
[494.98355103 -341.62963867]
[484.77005005 -330.64398193]
[474.55657959 -319.65829468]
[464.34310913 -308.67263794]
[467.38375854 -294.11611938]
[461.19668579 -280.39810181]
[447.96359253 -272.86560059]
[432.65557861 -274.58941650]
[422.44210815 -263.60372925]
[419.44274902 -249.01425171]
[404.37960815 -244.17564392]
[394.16613770 -233.18997192]
[383.95263672 -222.20429993]
[373.73916626 -211.21864319]
[363.99151611 -199.81762695]
[354.72656250 -188.02098083]
[345.46160889 -176.22433472]
[336.19665527 -164.42770386]
[326.93173218 -152.63105774]
[329.06445312 -142.55717468]
[325.18664551 -132.78057861]
[316.36676025 -126.65577698]
[305.41076660 -126.42785645]
[295.66311646 -115.02683258]
[285.91546631 -103.62581635]
[276.16781616 -92.22479248]
[273.77795410 -77.52317047]
[258.92913818 -72.06213379]
[249.18147278 -60.66110992]
[250.59478760 -45.87807465]
[240.87170410 -34.17695999]
[225.35630798 -32.79478073]
[215.60865784 -21.39376068]
[205.86100769 -9.99273872]
[196.11335754 1.40828216]
[197.52665710 16.19131851]
[187.80357361 27.89243317]
[172.28817749 29.27461243]
[162.54052734 40.67563248]
[163.16114807 52.79677582]
[155.07730103 62.38168716]
[142.22755432 63.91067505]
[132.24482727 75.10644531]
[122.26210785 86.30220795]
[129.14967346 105.62052155]
[119.80077362 126.69196320]
[96.18808746 136.58433533]
[94.32048035 151.46762085]
[92.45286560 166.35089111]
[98.41173553 181.00703430]
[89.14999390 192.67192078]
[87.28238678 207.55520630]
[85.41477203 222.43847656]
[83.54715729 237.32176208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 150]
[8 149]
[9 148]
[10 147]
[12 145]
[13 144]
[14 143]
[36 43]
[37 42]
[46 140]
[47 139]
[48 138]
[50 135]
[51 134]
[54 131]
[55 130]
[56 129]
[57 128]
[60 125]
[61 124]
[63 122]
[64 121]
[65 120]
[66 119]
[68 115]
[69 114]
[70 113]
[71 112]
[72 111]
[77 110]
[78 109]
[79 108]
[80 107]
[82 105]
[83 104]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
