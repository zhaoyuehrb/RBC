%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAGGAGGUGGCUGGUUCCUGUCUCACUGGCCGGAGCUUCAGCUUCAGUCAUUUCAUCUGGGUCCCUCAGCCCUUGGUGGGGAACAUCCAGGCAGGUUAGAGAGGUUGGCAGGUUGUC\
) } def
/len { sequence length } bind def

/coor [
[17.19688988 189.29421997]
[2.20187116 189.68074036]
[-11.53613758 183.65852356]
[-21.41289330 172.36917114]
[-25.55611229 157.95272827]
[-23.18038368 143.14205933]
[-14.73606396 130.74473572]
[-1.82255650 123.11043549]
[-16.69839668 121.18445587]
[-31.57423592 119.25848389]
[-46.45007706 117.33250427]
[-61.32591629 115.40653229]
[-76.20175934 113.48056030]
[-91.07759857 111.55458069]
[-105.95343781 109.62860870]
[-120.82927704 107.70262909]
[-135.70512390 105.77665710]
[-150.70014954 105.39043427]
[-165.65541077 106.54806519]
[-180.61067200 107.70570374]
[-195.56593323 108.86333466]
[-210.52119446 110.02096558]
[-223.68307495 118.80022430]
[-236.96952820 112.06822968]
[-251.92478943 113.22586060]
[-266.88003540 114.38349915]
[-278.36505127 125.58503723]
[-294.26498413 123.44686127]
[-302.38278198 109.60919952]
[-296.49114990 94.68711853]
[-281.10968018 90.12756348]
[-268.03768921 99.42823029]
[-253.08241272 98.27059937]
[-238.12715149 97.11296844]
[-226.03497314 88.41651154]
[-211.67883301 95.06570435]
[-196.72357178 93.90807343]
[-181.76829529 92.75043488]
[-166.81303406 91.59280396]
[-151.85777283 90.43517303]
[-163.26324463 80.69272614]
[-166.95632935 66.15446472]
[-161.58319092 52.14983749]
[-149.11355591 43.81269455]
[-134.11853027 44.19927216]
[-122.09503937 53.16786194]
[-117.45066071 67.43074036]
[-121.88794708 81.75939941]
[-133.77914429 90.90081787]
[-118.90330505 92.82678986]
[-104.02745819 94.75276947]
[-89.15161896 96.67874146]
[-74.27577972 98.60471344]
[-59.39994049 100.53069305]
[-44.52410126 102.45666504]
[-29.64826202 104.38264465]
[-14.77242088 106.30861664]
[0.10341878 108.23459625]
[15.09844589 107.84837341]
[29.85541534 105.15916443]
[44.61238480 102.46995544]
[59.36935425 99.78073883]
[74.12631989 97.09152985]
[80.85730743 82.35166168]
[95.00273132 74.44743347]
[111.08371735 76.44033813]
[122.87170410 87.55847931]
[137.55453491 84.49019623]
[152.19665527 81.23313141]
[166.79562378 77.78781128]
[181.39459229 74.34249878]
[195.94798279 70.70950317]
[210.45339966 66.88943481]
[224.95881653 63.06937027]
[239.46423340 59.24930191]
[253.86648560 55.05701828]
[268.15600586 50.49529648]
[282.44552612 45.93357468]
[296.73507690 41.37185287]
[311.02459717 36.81012726]
[325.25421143 32.06480789]
[339.42153931 27.13667107]
[347.67514038 13.37957668]
[363.59536743 11.39799881]
[374.96954346 22.71203232]
[373.07241821 38.64252090]
[359.35928345 46.96895599]
[344.34970093 41.30400848]
[330.18234253 46.23214340]
[324.83526611 51.46338272]
[315.58633423 51.09965897]
[301.29678345 55.66138077]
[287.00726318 60.22310257]
[272.71774292 64.78482819]
[258.42819214 69.34654999]
[255.43800354 73.20880127]
[249.94149780 75.16260529]
[243.28430176 73.75472260]
[228.77888489 77.57478333]
[214.27346802 81.39485168]
[199.76805115 85.21492004]
[194.03320312 90.01789093]
[184.83990479 88.94145966]
[170.24093628 92.38677979]
[155.64196777 95.83209229]
[149.78535461 100.48581696]
[140.62281799 99.17303467]
[125.93998718 102.24131012]
[121.44800568 114.76107788]
[111.35845947 123.42844391]
[98.30453491 125.98137665]
[85.69310760 121.75360107]
[76.81553650 111.84849548]
[62.05856323 114.53771210]
[47.30159760 117.22692108]
[32.54462814 119.91613007]
[17.78765678 122.60534668]
[31.07596970 129.56384277]
[40.14778137 141.50964355]
[43.28339386 156.17825317]
[39.88840866 170.78900146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[24 34]
[25 33]
[26 32]
[59 117]
[60 116]
[61 115]
[62 114]
[63 113]
[67 108]
[68 107]
[69 105]
[70 104]
[71 103]
[72 101]
[73 100]
[74 99]
[75 98]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
