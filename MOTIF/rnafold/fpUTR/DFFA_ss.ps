%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCUCCCGGCAGGCUGCGGAAGGGGGUCGAGUAGAAGGACCGCCGCUCCGGCCUCCCGCGACUUCUCGAAGGUGGGCAGGUCCCACCUUGUGGAGG\
) } def
/len { sequence length } bind def

/coor [
[174.34426880 190.98315430]
[159.78247070 194.58236694]
[146.79225159 187.08209229]
[142.62898254 172.67143250]
[149.61795044 159.39912415]
[163.85478210 154.67803955]
[151.63615417 145.97717285]
[136.78074646 144.89726257]
[130.02752686 130.58975220]
[117.80889130 121.88890076]
[105.59024811 113.18804169]
[91.69129944 111.66793823]
[85.70889282 99.03059387]
[73.49025726 90.32974243]
[61.27161789 81.62889099]
[49.05297852 72.92803192]
[42.22151947 71.87593079]
[37.73555756 68.01711273]
[36.35911560 63.26744843]
[24.71691704 53.80915833]
[13.07472038 44.35086823]
[1.43252337 34.89257812]
[-16.73835373 32.49514008]
[-22.52833557 16.01262283]
[-34.46476364 6.92847824]
[-50.13219833 4.72800827]
[-55.57429123 -9.13679886]
[-67.51071930 -18.22094345]
[-79.44714355 -27.30508995]
[-91.38357544 -36.38923645]
[-105.84506226 -31.01625633]
[-120.91078949 -34.33700943]
[-131.77333069 -45.29185104]
[-134.96650696 -60.38513565]
[-129.47137451 -74.80065155]
[-117.04139709 -83.93845367]
[-101.64295959 -84.88270569]
[-88.18963623 -77.33209991]
[-80.97433472 -63.69601440]
[-82.29943085 -48.32566071]
[-70.36299896 -39.24151611]
[-58.42657471 -30.15737152]
[-46.49014664 -21.07322693]
[-31.67648506 -19.52251625]
[-25.38061714 -5.00794935]
[-13.44419003 4.07619572]
[-1.30150568 2.78094435]
[8.74477673 10.41030025]
[10.89081383 23.25037956]
[22.53301048 32.70867157]
[34.17520905 42.16696167]
[45.81740570 51.62525177]
[57.75382996 60.70939636]
[69.97247314 69.41024780]
[82.19110870 78.11109924]
[94.40975189 86.81195831]
[108.30870056 88.33206177]
[114.29110718 100.96940613]
[126.50974274 109.67025757]
[138.72837830 118.37110901]
[154.45774841 120.07337952]
[160.33700562 133.75854492]
[172.55563354 142.45939636]
[185.54602051 149.95939636]
[199.19050598 156.19061279]
[212.83497620 162.42184448]
[226.47946167 168.65306091]
[240.12394714 174.88429260]
[254.77674866 169.59912109]
[268.52542114 176.11283875]
[273.47372437 190.11462402]
[287.11819458 196.34585571]
[300.76269531 202.57707214]
[314.40716553 208.80830383]
[328.05163574 215.03953552]
[341.69613647 221.27075195]
[355.34060669 227.50198364]
[368.98507690 233.73320007]
[384.45861816 229.49650574]
[397.33312988 239.06867981]
[397.73239136 255.10676575]
[385.35015869 265.30770874]
[369.68496704 261.84625244]
[362.75384521 247.37768555]
[349.10937500 241.14645386]
[335.46490479 234.91523743]
[321.82040405 228.68400574]
[308.17593384 222.45278931]
[294.53146362 216.22155762]
[280.88699341 209.99034119]
[267.24249268 203.75910950]
[253.42021179 209.18865967]
[239.49400330 203.06367493]
[233.89271545 188.52877808]
[220.24822998 182.29754639]
[206.60375977 176.06632996]
[192.95927429 169.83509827]
[179.31478882 163.60386658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[9 60]
[10 59]
[11 58]
[13 56]
[14 55]
[15 54]
[16 53]
[19 52]
[20 51]
[21 50]
[22 49]
[24 46]
[25 45]
[27 43]
[28 42]
[29 41]
[30 40]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
