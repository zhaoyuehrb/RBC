%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGUCUCCCGCCCGCGGCGCCAUCGCGCCAUUCCUAGUUAAGGCGGCACAGGGCCGAGGCGUAGUGUGGGUGACUCCUCCGUUCCUUGGGUCCCGUCGUCUGUGAUACUGCAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[87.41255188 149.88932800]
[79.91806030 149.60206604]
[72.92112732 162.87017822]
[65.92420197 176.13829041]
[58.92726898 189.40641785]
[65.89753723 203.26985168]
[63.35466385 218.57714844]
[52.27643204 229.44235229]
[36.92264557 231.68754578]
[23.19715309 224.44941711]
[16.37768364 210.51116943]
[19.08646393 195.23236084]
[30.28191185 184.48799133]
[45.65914917 182.40948486]
[52.65607834 169.14137268]
[59.65300751 155.87324524]
[66.64994049 142.60513306]
[56.95929718 131.15560913]
[42.71731186 135.86367798]
[28.47533035 140.57174683]
[14.23334694 145.27981567]
[-0.00863697 149.98788452]
[-10.50952148 162.58404541]
[-26.62023354 159.52186584]
[-31.76745415 143.95144653]
[-20.65616417 131.89028931]
[-4.71670485 135.74589539]
[9.52527809 131.03782654]
[23.76726151 126.32976532]
[38.00924683 121.62169647]
[52.25122833 116.91362762]
[51.60541153 102.58950043]
[54.98409271 89.29272461]
[61.75748444 78.07892609]
[71.04161835 69.73464966]
[81.79764557 64.72366333]
[92.93968964 63.16695023]
[103.44046783 64.85642242]
[112.42483521 69.29938507]
[121.05461121 57.03044510]
[129.68438721 44.76150513]
[138.31417847 32.49256516]
[146.78657532 20.11441994]
[155.10020447 7.62908888]
[163.41383362 -4.85624266]
[171.72746277 -17.34157372]
[180.04110718 -29.82690620]
[188.35473633 -42.31223679]
[196.66836548 -54.79756927]
[193.89128113 -65.46545410]
[197.43476868 -75.67012024]
[205.87330627 -82.05413818]
[216.21574402 -82.66220093]
[225.15603638 -94.70674133]
[234.09632874 -106.75128937]
[243.03663635 -118.79583740]
[251.97692871 -130.84037781]
[253.98928833 -146.53308105]
[267.78781128 -152.14111328]
[276.72811890 -164.18566895]
[285.66839600 -176.23020935]
[283.43963623 -187.02598572]
[287.49957275 -197.03640747]
[296.25308228 -202.98121643]
[306.61306763 -203.06039429]
[316.15670776 -214.63272095]
[325.70034790 -226.20506287]
[335.24398804 -237.77740479]
[338.05499268 -253.34687805]
[352.12185669 -258.24304199]
[361.66549683 -269.81536865]
[371.20913696 -281.38772583]
[371.11233521 -297.43048096]
[383.68472290 -307.39614868]
[399.28182983 -303.63992310]
[405.93893433 -289.04324341]
[398.54922485 -274.80343628]
[382.78146362 -271.84408569]
[373.23782349 -260.27172852]
[363.69418335 -248.69940186]
[361.56579590 -233.95765686]
[346.81631470 -228.23376465]
[337.27267456 -216.66142273]
[327.72903442 -205.08909607]
[318.18539429 -193.51675415]
[316.52291870 -174.32104492]
[297.71295166 -167.28991699]
[288.77264404 -155.24536133]
[279.83236694 -143.20082092]
[278.45947266 -128.36961365]
[264.02148438 -121.90008545]
[255.08117676 -109.85553741]
[246.14088440 -97.81098938]
[237.20059204 -85.76644897]
[228.26028442 -73.72190094]
[227.58012390 -54.46635056]
[209.15370178 -46.48393631]
[200.84007263 -33.99860382]
[192.52642822 -21.51327133]
[184.21279907 -9.02794075]
[175.89916992 3.45739079]
[167.58554077 15.94272232]
[159.27189636 28.42805290]
[158.17079163 35.82525635]
[150.58311462 41.12234497]
[141.95333862 53.39128494]
[133.32354736 65.66022491]
[124.69377136 77.92916870]
[141.22798157 107.40496826]
[123.66084290 144.79040527]
[129.62158203 158.55520630]
[135.58230591 172.32000732]
[141.54304504 186.08479309]
[153.38568115 198.21691895]
[145.00604248 212.95524597]
[128.52398682 208.98307800]
[127.77824402 192.04553223]
[121.81751251 178.28073120]
[115.85677338 164.51594543]
[109.89604187 150.75114441]
[102.40154266 150.46386719]
[101.82675934 165.45285034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[39 108]
[40 107]
[41 106]
[42 105]
[43 103]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[59 89]
[60 88]
[61 87]
[65 85]
[66 84]
[67 83]
[68 82]
[70 80]
[71 79]
[72 78]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
