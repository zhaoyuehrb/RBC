%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGGUGGCGGAGGACGUCCCGGAGGAUCCCUCUGGUCGGGCGCCUGGCUUUGUGUAGCCAGCCAGGCUGGAGUGCA\
) } def
/len { sequence length } bind def

/coor [
[82.72367096 127.95207977]
[73.31261444 119.17221832]
[59.45442200 124.91246796]
[45.71160126 130.92370605]
[32.08945465 137.20359802]
[18.46730614 143.48348999]
[4.84515905 149.76339722]
[-1.85253763 156.37059021]
[-9.43730450 156.01066589]
[-23.29549789 161.75091553]
[-37.15369034 167.49116516]
[-51.01188278 173.23143005]
[-58.45500565 187.44337463]
[-74.23374939 190.34350586]
[-86.24401093 179.70710754]
[-85.27254486 163.69349670]
[-72.06458282 154.58694458]
[-56.75213623 159.37322998]
[-42.89394379 153.63298035]
[-29.03574944 147.89273071]
[-15.17755604 142.15248108]
[-1.43473685 136.14125061]
[12.18741035 129.86134338]
[25.80955887 123.58145142]
[39.43170547 117.30155182]
[44.31594849 111.48757172]
[53.71416855 111.05427551]
[67.57236481 105.31402588]
[69.22402954 88.48348999]
[79.02706146 74.70323181]
[94.38502502 67.62311554]
[111.23017120 69.11839294]
[125.10088348 78.79301453]
[138.46597290 71.98315430]
[151.83108521 65.17330170]
[165.19618225 58.36344147]
[178.56127930 51.55358505]
[191.92637634 44.74372864]
[205.29147339 37.93386841]
[218.65657043 31.12401199]
[227.43995667 17.96487999]
[242.29269409 19.08080482]
[255.65779114 12.27094746]
[269.02288818 5.46108961]
[272.13647461 0.60441715]
[276.44497681 -2.10929680]
[280.84570312 -2.59603357]
[284.38381958 -1.25791502]
[298.45666504 -6.44967079]
[312.52954102 -11.64142704]
[326.60241699 -16.83318329]
[340.67529297 -22.02493858]
[347.06347656 -36.48062134]
[361.83224487 -42.10721207]
[376.21957397 -35.56655884]
[381.68972778 -20.73911285]
[374.99731445 -6.42173386]
[360.11285400 -1.10867047]
[345.86703491 -7.95206833]
[331.79418945 -2.76031256]
[317.72131348 2.43144345]
[303.64843750 7.62319899]
[289.57556152 12.81495476]
[275.83273315 18.82618713]
[262.46765137 25.63604546]
[249.10255432 32.44590378]
[241.27513123 45.11794662]
[225.46643066 44.48910904]
[212.10133362 51.29896927]
[198.73623657 58.10882568]
[185.37112427 64.91868591]
[172.00602722 71.72853851]
[158.64093018 78.53839874]
[145.27583313 85.34825897]
[131.91073608 92.15811157]
[132.47500610 105.01639557]
[128.05718994 117.10510254]
[119.33503723 126.56966400]
[107.64662933 131.95808411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 25]
[5 24]
[6 23]
[7 22]
[9 21]
[10 20]
[11 19]
[12 18]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[42 66]
[43 65]
[44 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
