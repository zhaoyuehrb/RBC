%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCUGAUCCGGGGCUCGGCCAAGCUGAGGCGGCGGCGCCCGGCCGUGCGCCCAGCUUGCAGGCGCCUGGCUCUCACG\
) } def
/len { sequence length } bind def

/coor [
[83.90869141 333.10476685]
[69.30363464 328.79055786]
[57.72021484 318.90399170]
[51.16531754 305.15795898]
[50.77462769 289.93408203]
[56.61582565 275.86993408]
[67.67689514 265.40222168]
[82.04144287 260.34457397]
[83.20382690 245.38967896]
[76.47605896 232.10110474]
[85.25949860 218.94200134]
[86.42189026 203.98710632]
[87.58427429 189.03222656]
[88.74665833 174.07733154]
[89.90904999 159.12243652]
[90.78121948 144.14781189]
[91.36284637 129.15908813]
[91.94448090 114.17037201]
[84.48945618 105.01137543]
[85.17611694 93.22184753]
[93.64402771 84.99025726]
[94.80641174 70.03536224]
[92.30640411 60.97106934]
[96.31489563 54.52681351]
[98.05628967 39.62823868]
[99.79768372 24.72966194]
[101.53907776 9.83108616]
[103.28047180 -5.06748915]
[105.02186584 -19.96606445]
[102.87520599 -29.12048149]
[107.13056183 -35.40445709]
[109.44834137 -50.22430801]
[111.76612854 -65.04415131]
[114.08390808 -79.86399841]
[116.11387634 -94.72600555]
[117.85527039 -109.62458038]
[119.59666443 -124.52315521]
[121.33805847 -139.42173767]
[123.07945251 -154.32031250]
[114.29691315 -167.74591064]
[119.45429230 -182.93737793]
[134.59529114 -188.24114990]
[148.10502625 -179.58859253]
[149.61997986 -163.61723328]
[137.97802734 -152.57891846]
[136.23663330 -137.68034363]
[134.49523926 -122.78176880]
[132.75384521 -107.88318634]
[131.01245117 -92.98461151]
[133.42675781 -85.78964233]
[128.90376282 -77.54621887]
[126.58597565 -62.72637177]
[124.26818848 -47.90652466]
[121.95040894 -33.08667755]
[119.92044067 -18.22467041]
[118.17904663 -3.32609558]
[116.43765259 11.57248020]
[114.69625854 26.47105598]
[112.95486450 41.36962891]
[111.21347046 56.26820755]
[109.76130676 71.19774628]
[108.59892273 86.15264130]
[116.27244568 100.94776154]
[106.93319702 114.75199890]
[106.35157013 129.74072266]
[105.76993561 144.72944641]
[108.61954498 153.68997192]
[104.86393738 160.28482056]
[103.70155334 175.23971558]
[102.53916931 190.19461060]
[101.37678528 205.14950562]
[100.21439362 220.10440063]
[106.85902405 234.46264648]
[98.15872192 246.55206299]
[96.99633026 261.50695801]
[110.40685272 268.72344971]
[119.71762085 280.77456665]
[123.31549835 295.57238770]
[120.57711792 310.55307007]
[111.97692871 323.12115479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 75]
[9 74]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 66]
[17 65]
[18 64]
[21 62]
[22 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
