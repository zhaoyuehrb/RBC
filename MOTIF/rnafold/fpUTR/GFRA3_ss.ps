%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGACCCUGGUGGGAGAGUGUGUGCGUCGCGCUGGAGGGCGGGAGGCGGGGGCGGGAGGUGCCGGUCGAGGGAGCCCCGCUCUCAGAGCUCCAGGGGAGGAGCGAGGGGAGCGCGGAGCCCGGCGCCUACAGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[142.87812805 109.69451904]
[145.65270996 124.43567657]
[138.82324219 137.79077148]
[125.24774933 144.17089844]
[110.60736084 140.90609741]
[101.02883911 129.36260986]
[100.52100372 114.37001801]
[93.16618347 127.44314575]
[85.81136322 140.51626587]
[86.53500366 156.89944458]
[72.56496429 165.48838806]
[58.27242279 157.44754028]
[58.36032104 141.04862976]
[72.73823547 133.16145325]
[80.09305573 120.08832550]
[87.44787598 107.01519775]
[83.99093628 100.35940552]
[71.26888275 108.30606842]
[58.54683304 116.25272369]
[46.66465378 125.40770721]
[33.56631470 118.09789276]
[35.11937332 103.17850494]
[49.44215393 98.72308350]
[63.25960922 92.88545227]
[77.07706451 87.04782104]
[73.62012482 80.39202881]
[58.69545746 78.89058685]
[44.19012451 85.20769501]
[32.30123901 76.23530579]
[17.37657356 74.73387146]
[2.87123752 81.05097961]
[-9.01764584 72.07859039]
[-23.94231224 70.57715607]
[-38.86698151 69.07572174]
[-53.79164886 67.57427979]
[-68.51271820 74.80075836]
[-81.97898865 65.44171143]
[-80.33750153 49.12492752]
[-65.27688599 42.63571167]
[-52.29021072 52.64961624]
[-37.36554337 54.15105057]
[-22.44087791 55.65248489]
[-7.51621008 57.15392303]
[5.92161369 50.72942352]
[18.87800789 59.80920410]
[33.80267715 61.31063843]
[47.24049759 54.88614273]
[60.19689560 63.96592331]
[75.12155914 65.46736145]
[109.78066254 85.41660309]
[123.09224701 78.50273132]
[136.32598877 71.44098663]
[149.48023987 64.23226166]
[162.63447571 57.02353668]
[175.78872681 49.81481171]
[177.87022400 34.55133820]
[188.41693115 23.56860733]
[203.23309326 20.93325615]
[216.60003662 27.44959831]
[229.75428772 20.24087334]
[242.90853882 13.03214645]
[256.06277466 5.82341957]
[269.21704102 -1.38530660]
[282.37127686 -8.59403324]
[295.52554321 -15.80275917]
[308.67977905 -23.01148605]
[321.83404541 -30.22021103]
[307.34570312 -34.10454178]
[297.77465820 -45.65422440]
[296.64889526 -60.61191940]
[304.38339233 -73.46406555]
[318.12710571 -79.47322083]
[332.81399536 -76.42433929]
[343.03027344 -65.44128418]
[345.01013184 -50.57252121]
[338.02420044 -37.29925156]
[352.24816895 -42.06146240]
[366.41821289 -46.98183823]
[380.53256226 -52.05976105]
[394.58944702 -57.29460526]
[408.58715820 -62.68572235]
[422.58486938 -68.07683563]
[436.58258057 -73.46795654]
[450.58029175 -78.85906982]
[464.57800293 -84.25019073]
[478.57571411 -89.64130402]
[482.67303467 -104.49115753]
[494.58950806 -113.97015381]
[509.62472534 -114.60718536]
[522.00384521 -106.36734772]
[536.00158691 -111.75846100]
[549.99926758 -117.14958191]
[563.99700928 -122.54069519]
[577.99468994 -127.93181610]
[584.17694092 -142.47677612]
[598.86431885 -148.31256104]
[613.34307861 -141.97692871]
[619.02325439 -127.22866821]
[612.53491211 -112.81768036]
[597.72741699 -107.29373932]
[583.38580322 -113.93410492]
[569.38812256 -108.54299164]
[555.39038086 -103.15187073]
[541.39270020 -97.76075745]
[527.39495850 -92.36963654]
[523.74114990 -77.95481110]
[512.16290283 -68.34186554]
[496.96667480 -67.37860107]
[483.96682739 -75.64359283]
[469.96911621 -70.25247955]
[455.97140503 -64.86136627]
[441.97369385 -59.47024536]
[427.97598267 -54.07912827]
[413.97827148 -48.68801498]
[399.98056030 -43.29689789]
[394.82760620 -37.91410828]
[385.61047363 -37.94541550]
[371.49612427 -32.86749268]
[366.22451782 -27.60084152]
[357.01037598 -27.83749199]
[342.78640747 -23.07528114]
[329.04275513 -17.06596375]
[315.88851929 -9.85723686]
[302.73425293 -2.64851022]
[289.58001709 4.56021595]
[276.42575073 11.76894188]
[263.27151489 18.97766876]
[250.11726379 26.18639565]
[236.96301270 33.39512253]
[223.80876160 40.60384750]
[222.10882568 55.37707138]
[211.91519165 66.44747162]
[196.98292542 69.42759705]
[182.99745178 62.96905899]
[169.84321594 70.17778778]
[156.68896484 77.38651276]
[143.53471375 84.59523773]
[139.14518738 90.61682129]
[130.00611877 91.81431580]
[116.69453430 98.72818756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[26 49]
[27 48]
[29 46]
[30 45]
[32 43]
[33 42]
[34 41]
[35 40]
[50 140]
[51 139]
[52 137]
[53 136]
[54 135]
[55 134]
[59 130]
[60 129]
[61 128]
[62 127]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[76 121]
[77 120]
[78 118]
[79 117]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
