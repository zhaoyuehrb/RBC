%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUUGUUUUCUUUCCUCCAGUCUCGGGGCUGCAGGCUGAGCGCGAUGCGCGGAGACCCCCGCGGGGGCGGCGGCGGCCGUGAGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[228.30976868 212.62435913]
[216.67410278 203.15803528]
[205.03842163 193.69171143]
[193.40275574 184.22540283]
[180.77038574 187.32426453]
[168.50120544 182.44766235]
[161.23023987 171.19342041]
[161.84532166 157.61277771]
[150.53962708 147.75473022]
[139.23393250 137.89666748]
[127.92823792 128.03862000]
[116.62254333 118.18055725]
[105.31684875 108.32250214]
[101.84656525 116.45861816]
[92.13668060 121.87767792]
[78.48891449 120.81613922]
[65.15040588 111.24826050]
[50.85323334 106.71054077]
[36.55606461 102.17282104]
[21.06185532 105.37284088]
[11.27156830 94.14788818]
[-3.02560282 89.61016846]
[-17.32277489 85.07244873]
[-31.61994553 80.53472900]
[-45.91711807 75.99700928]
[-61.80941391 80.04262543]
[-73.06389618 68.11497498]
[-68.10291290 52.48421478]
[-52.02990341 49.22992706]
[-41.37939835 61.69984055]
[-27.08222771 66.23755646]
[-12.78505611 70.77527618]
[1.51211536 75.31299591]
[15.80928707 79.85071564]
[30.28086472 76.32613373]
[41.09378052 87.87565613]
[55.39095306 92.41336823]
[69.68812561 96.95108795]
[76.02880096 92.94537354]
[68.01757812 80.26387787]
[80.69920349 72.25286102]
[88.71016693 84.93393707]
[95.05084229 80.92821503]
[97.09334564 66.06792450]
[99.13584137 51.20763779]
[101.17834473 36.34734726]
[97.34507751 19.83243370]
[112.15343475 11.57719231]
[124.18541718 23.52155304]
[116.03863525 38.38984680]
[113.99613190 53.25013733]
[111.95363617 68.11042786]
[109.91113281 82.97071838]
[115.17490387 97.01680756]
[126.48059845 106.87486267]
[137.78630066 116.73291779]
[149.09199524 126.59097290]
[160.39768982 136.44903564]
[171.70338440 146.30708313]
[189.02499390 144.74427795]
[201.93354797 155.89379883]
[202.86907959 172.58972168]
[214.50474548 182.05604553]
[226.14041138 191.52236938]
[237.77609253 200.98867798]
[249.72816467 210.05223083]
[261.98272705 218.70243835]
[274.23727417 227.35264587]
[286.49182129 236.00283813]
[299.17315674 244.01428223]
[312.24807739 251.36593628]
[325.32299805 258.71759033]
[338.39788818 266.06924438]
[351.47280884 273.42089844]
[367.85580444 272.69329834]
[376.44812012 286.66125488]
[368.41073608 300.95571899]
[352.01181030 300.87179565]
[344.12115479 286.49578857]
[331.04623413 279.14413452]
[317.97134399 271.79248047]
[304.89642334 264.44082642]
[291.82150269 257.08920288]
[288.16488647 257.81347656]
[283.96810913 256.66171265]
[280.18624878 253.39855957]
[277.84161377 248.25740051]
[265.58706665 239.60719299]
[253.33250427 230.95698547]
[241.07795715 222.30677795]
[236.10836792 222.27305603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[17 38]
[18 37]
[19 36]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[43 53]
[44 52]
[45 51]
[46 50]
[66 90]
[67 89]
[68 88]
[69 87]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
