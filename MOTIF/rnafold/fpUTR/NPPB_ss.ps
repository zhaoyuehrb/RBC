%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCAGGCUGAGGGCAGGUGGGAAGCAAACCCGGACGCAUCGCAGCAGCAGCAGCAGCAGCAGAAGCAGCAGCAGCAGCCUCCGCAGUCCCUCCAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[-33.75591278 277.34616089]
[-45.66456985 269.87918091]
[-56.35174179 280.40460205]
[-67.03890991 290.93002319]
[-77.72608185 301.45544434]
[-88.41325378 311.98086548]
[-88.70071411 327.55502319]
[-99.68895721 338.07705688]
[-114.53479004 337.70703125]
[-125.22196198 348.23245239]
[-135.90913391 358.75787354]
[-142.95147705 374.17999268]
[-159.72041321 371.68209839]
[-161.96226501 354.87704468]
[-146.43453979 348.07067871]
[-135.74737549 337.54528809]
[-125.06020355 327.01986694]
[-125.20379639 312.17010498]
[-114.51541901 301.34359741]
[-98.93866730 301.29367065]
[-88.25149536 290.76824951]
[-77.56433105 280.24285889]
[-66.87715912 269.71743774]
[-56.18998718 259.19201660]
[-64.23365021 245.45573425]
[-68.50867462 230.11143494]
[-68.72679901 214.17364502]
[-64.86816406 198.69752502]
[-57.18301392 184.70910645]
[-46.17545319 173.13717651]
[-32.57038498 164.75167847]
[-17.26578712 160.11241150]
[-1.27343178 159.53173828]
[14.34799862 163.05351257]
[28.56299400 170.44982910]
[38.58861542 159.29246521]
[48.61423492 148.13508606]
[58.63985443 136.97772217]
[68.49416351 125.66875458]
[78.17486572 114.21083069]
[73.99485016 98.57992554]
[79.85205841 83.49712372]
[93.48577881 74.78395081]
[109.63378906 75.80342102]
[118.96056366 64.05560303]
[121.48154449 48.43653488]
[135.45492554 43.27962875]
[144.78170776 31.53180695]
[147.30268860 15.91274071]
[161.27607727 10.75583172]
[170.60284424 -0.99198788]
[173.12382507 -16.61105347]
[187.09721375 -21.76796341]
[196.42399597 -33.51578140]
[198.94497681 -49.13484955]
[212.91835022 -54.29175949]
[222.24513245 -66.03958130]
[216.52821350 -80.29483795]
[218.72073364 -95.49642944]
[228.23291016 -107.55520630]
[242.50601196 -113.22741699]
[257.70065308 -110.98725891]
[269.72955322 -101.43732452]
[275.35699463 -87.14650726]
[273.06924438 -71.95896149]
[263.48165894 -59.96005249]
[249.17326355 -54.37743759]
[233.99295044 -56.71280289]
[224.66618347 -44.96498489]
[222.81231689 -30.18619919]
[208.17181396 -24.18900871]
[198.84503174 -12.44118881]
[196.99116516 2.33759522]
[182.35066223 8.33478737]
[173.02389526 20.08260727]
[171.17002869 34.86138916]
[156.52952576 40.85858154]
[147.20275879 52.60640335]
[145.34889221 67.38518524]
[130.70838928 73.38237762]
[121.38160706 85.13019562]
[125.93827057 97.65686035]
[123.70025635 110.79732513]
[115.25381470 121.10936737]
[102.81155396 125.89168549]
[89.63278961 123.89153290]
[79.95208740 135.34945679]
[76.72668457 144.08232117]
[69.79722595 147.00334167]
[59.77160645 158.16070557]
[49.74598694 169.31808472]
[39.72036362 180.47544861]
[47.73144531 192.14057922]
[52.89933777 205.30575562]
[54.96054840 219.28988647]
[53.81218338 233.37045288]
[49.51710892 246.82070923]
[42.30048370 258.94729614]
[32.53800201 269.12588501]
[20.73629951 276.83346558]
[7.50667858 281.67501831]
[-6.46655416 283.40393066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[9 17]
[10 16]
[11 15]
[35 92]
[36 91]
[37 90]
[38 89]
[39 87]
[40 86]
[44 81]
[45 80]
[47 78]
[48 77]
[50 75]
[51 74]
[53 72]
[54 71]
[56 69]
[57 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
