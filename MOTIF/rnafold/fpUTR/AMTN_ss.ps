%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGGUAAAAUUUUUCACCAGAGUAAACUUGAGAAACCAACUGGACCUUGAGUAUUGUACAUUUUGCCUCGUGGACCCAAAGGUAGCAAUCUGAAAC\
) } def
/len { sequence length } bind def

/coor [
[127.15100098 236.77668762]
[127.85761261 228.47732544]
[130.87399292 220.68400574]
[135.97221375 214.02813721]
[128.67926025 200.92039490]
[121.38630676 187.81265259]
[114.09335327 174.70491028]
[109.48287964 188.97879028]
[97.50793457 198.01210022]
[82.51670074 198.52478027]
[69.95258331 190.33070374]
[64.37770844 176.40515137]
[67.81633759 161.80461121]
[79.01988983 151.83062744]
[93.92028046 150.10481262]
[107.10692596 157.25366211]
[103.33970642 142.73443604]
[99.57248688 128.21519470]
[95.80526733 113.69596863]
[86.13515472 103.59742737]
[89.67549896 90.07125092]
[85.90827942 75.55201721]
[80.63291168 67.86470032]
[82.25968170 60.51228333]
[78.95502472 45.88083649]
[75.65036774 31.24938965]
[72.34570312 16.61794281]
[66.77076721 2.69242334]
[59.06560898 -10.17732811]
[51.36044693 -23.04707909]
[43.65528870 -35.91683197]
[35.95012665 -48.78658295]
[28.24496460 -61.65633392]
[20.53980446 -74.52608490]
[7.07931948 -76.31529236]
[-2.70954728 -85.44146729]
[-5.35766840 -98.36029053]
[-0.10684787 -110.24362183]
[-7.39979887 -123.35136414]
[-21.74027824 -131.30641174]
[-21.75066948 -147.70555115]
[-7.42028522 -155.67875671]
[6.50900507 -147.02388000]
[5.70794153 -130.64431763]
[13.00089264 -117.53657532]
[29.28806877 -113.69444275]
[38.00489426 -99.01844025]
[33.40955734 -82.23124695]
[41.11471558 -69.36149597]
[48.81987762 -56.49174118]
[56.52503967 -43.62199020]
[64.23020172 -30.75223923]
[71.93535614 -17.88248825]
[79.64051819 -5.01273775]
[82.80018616 -19.67617989]
[92.71283722 -30.93403244]
[106.85842896 -35.92425919]
[121.64076996 -33.37821198]
[133.30180359 -23.94315910]
[138.87699890 -10.01774406]
[136.94898987 4.85783291]
[128.00793457 16.90180969]
[114.32685852 23.05229187]
[99.38388062 21.74566650]
[86.97714996 13.31328392]
[90.28181458 27.94473076]
[93.58647156 42.57617950]
[96.89112854 57.20762634]
[100.42751312 71.78479767]
[104.19473267 86.30403137]
[113.86484528 96.40257263]
[110.32450104 109.92874908]
[114.09172058 124.44798279]
[117.85894012 138.96720886]
[121.62615967 153.48645020]
[127.20109558 167.41195679]
[134.49404907 180.51969910]
[141.78700256 193.62744141]
[149.07995605 206.73518372]
[171.73069763 210.41064453]
[184.73573303 229.01193237]
[180.50474548 251.05589294]
[190.50627136 262.23486328]
[200.50781250 273.41384888]
[210.50933838 284.59280396]
[226.25004578 289.19302368]
[229.87309265 305.18695068]
[217.65139771 316.12139893]
[202.15759277 310.74792480]
[199.33038330 294.59432983]
[189.32884216 283.41537476]
[179.32730103 272.23638916]
[169.32577515 261.05743408]
[161.63949585 263.73110962]
[153.48451233 264.14251709]
[145.51499939 262.24322510]
[138.37460327 258.17092896]
[132.64440918 252.23933411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[7 76]
[16 75]
[17 74]
[18 73]
[19 72]
[21 70]
[22 69]
[24 68]
[25 67]
[26 66]
[27 65]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[38 45]
[39 44]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
