%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGACGUCACCCCCAGCGGGGAUAAAGCGCCCCCGCCCGGGUCGGGGCCAGGACGCCGCCCGGCGCGGAGUGGCUGCCCUGCGCGGGGACACUUAGAGCCCGGUGGGCGGGAGGAAGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[114.60095978 139.81736755]
[94.50832367 143.24632263]
[88.98645782 157.19297791]
[83.46459198 171.13961792]
[77.94271851 185.08627319]
[80.87233734 201.22161865]
[68.19024658 211.61857605]
[52.94270706 205.58164978]
[50.81507492 189.32110596]
[63.99607468 179.56439209]
[69.51794434 165.61775208]
[75.03981018 151.67109680]
[80.56167603 137.72445679]
[68.65182495 128.60549927]
[56.62831879 137.57408142]
[44.60481262 146.54264832]
[38.62402344 161.81230164]
[22.37141991 163.99974060]
[12.56628895 150.85473633]
[19.29530716 135.89971924]
[35.63623810 134.51914978]
[47.65974426 125.55056763]
[59.68325043 116.58199310]
[57.28905106 101.78420258]
[60.05265808 87.34877777]
[67.44349670 74.98436737]
[78.39575958 66.08454132]
[91.45785522 61.57140732]
[104.98311615 61.80253601]
[117.33694458 66.55018616]
[126.75231934 54.87324905]
[136.16769409 43.19631577]
[145.58305359 31.51938057]
[154.24664307 19.27429199]
[162.12426758 6.50937462]
[170.00189209 -6.25554228]
[177.87950134 -19.02046013]
[185.75712585 -31.78537750]
[193.63475037 -44.55029297]
[201.51235962 -57.31521225]
[209.38998413 -70.08013153]
[204.33825684 -79.69798279]
[203.80026245 -90.46701050]
[207.80734253 -100.38954163]
[215.55400085 -107.65363312]
[225.55889893 -110.96395874]
[235.94772339 -109.77237701]
[244.76451111 -121.90763092]
[253.58128357 -134.04289246]
[262.39807129 -146.17814636]
[253.36676025 -157.53465271]
[247.60400391 -170.83773804]
[245.50047302 -185.16966248]
[247.19464111 -199.54345703]
[252.56364441 -212.97096252]
[261.23220825 -224.53071594]
[272.59890747 -233.43119812]
[285.87777710 -239.06506348]
[300.15280151 -241.05052185]
[314.44094849 -239.25724792]
[327.76000977 -233.81489563]
[336.87896729 -245.72474670]
[345.99792480 -257.63461304]
[348.24411011 -273.29556274]
[362.12475586 -278.69714355]
[371.24371338 -290.60699463]
[380.36267090 -302.51684570]
[389.48162842 -314.42669678]
[398.60058594 -326.33657837]
[407.71951294 -338.24642944]
[409.96572876 -353.90737915]
[423.84637451 -359.30895996]
[432.96533203 -371.21881104]
[434.55111694 -387.54110718]
[449.58950806 -394.08166504]
[462.61029053 -384.11212158]
[460.21878052 -367.88830566]
[444.87518311 -362.09985352]
[435.75622559 -350.19000244]
[434.16226196 -335.38092041]
[419.62939453 -329.12747192]
[410.51043701 -317.21762085]
[401.39147949 -305.30776978]
[392.27252197 -293.39788818]
[383.15356445 -281.48803711]
[374.03460693 -269.57818604]
[372.44064331 -254.76911926]
[357.90777588 -248.51565552]
[348.78881836 -236.60578918]
[339.66986084 -224.69593811]
[348.96847534 -212.23863220]
[354.40429688 -197.65951538]
[355.53317261 -182.12649536]
[352.25643921 -166.88632202]
[344.82922363 -153.16453552]
[333.84082031 -142.06687927]
[320.16787720 -134.49023438]
[304.90441895 -131.05010986]
[289.27435303 -132.03071594]
[274.53332520 -137.36135864]
[265.71655273 -125.22611237]
[256.89974976 -113.09085846]
[248.08299255 -100.95559692]
[252.63307190 -82.11268616]
[241.84095764 -65.64967346]
[222.15490723 -62.20251083]
[214.27728271 -49.43759155]
[206.39965820 -36.67267609]
[198.52204895 -23.90775681]
[190.64442444 -11.14284039]
[182.76679993 1.62207711]
[174.88919067 14.38699436]
[167.01156616 27.15191078]
[182.00997925 26.93361664]
[191.72933960 38.35876465]
[189.10958862 53.12822342]
[176.05368042 60.51357651]
[162.04533386 55.15016556]
[157.25999451 40.93474960]
[147.84461975 52.61168671]
[138.42926025 64.28862000]
[129.01388550 75.96555328]
[137.97268677 91.74652863]
[138.65806580 110.43962097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[14 23]
[15 22]
[16 21]
[30 122]
[31 121]
[32 120]
[33 119]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[41 106]
[47 103]
[48 102]
[49 101]
[50 100]
[61 90]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
