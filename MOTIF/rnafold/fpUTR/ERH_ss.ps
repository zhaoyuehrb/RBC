%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGUUGUAGUUAAGCUCGUGUAACGGCGGCGGUGUCGGCAGCUGCUGUAGCGAAGAGAGUUUGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[57.96586990 306.61203003]
[46.66381454 317.01199341]
[31.67247200 320.35192871]
[17.02443504 315.73339844]
[6.65995550 304.39880371]
[3.36702442 289.39706421]
[8.03142452 274.76358032]
[19.39845467 264.43469238]
[34.41044235 261.18878174]
[38.92102814 246.88304138]
[37.89547348 239.32228088]
[43.95298767 232.05937195]
[49.08328629 217.96398926]
[54.21358871 203.86859131]
[59.34389114 189.77320862]
[64.47419739 175.67781067]
[69.60449982 161.58242798]
[74.73480225 147.48703003]
[79.86510468 133.39164734]
[84.99539948 119.29625702]
[75.71577454 102.78568268]
[81.01564026 84.60267639]
[97.71311951 75.66373444]
[100.95971680 61.01929855]
[96.39272308 45.87158585]
[106.70130920 35.12065887]
[109.94789886 20.47621918]
[113.19449615 5.83177853]
[116.44109344 -8.81266117]
[119.68768311 -23.45710182]
[122.93428040 -38.10154343]
[126.18087006 -52.74598312]
[129.42745972 -67.39041901]
[124.86047363 -82.53813171]
[135.16905212 -93.28906250]
[138.41564941 -107.93350220]
[132.97097778 -123.40242004]
[143.84907532 -135.67430115]
[159.85949707 -132.12487793]
[164.53208923 -116.40548706]
[153.06008911 -104.68690491]
[149.81349182 -90.04246521]
[154.61270142 -75.94222260]
[144.07189941 -64.14382935]
[140.82531738 -49.49938583]
[137.57872009 -34.85494614]
[134.33212280 -20.21050644]
[131.08552551 -5.56606722]
[127.83893585 9.07837296]
[124.59233856 23.72281265]
[121.34574890 38.36725235]
[126.14495850 52.46749496]
[115.60415649 64.26589203]
[112.35756683 78.91033173]
[120.18362427 86.21215057]
[124.13960266 96.15769958]
[123.46695709 106.83999634]
[118.29467010 116.21075439]
[109.61448669 122.47320557]
[99.09078979 124.42655945]
[93.96048737 138.52194214]
[88.83018494 152.61734009]
[83.69988251 166.71272278]
[78.56958008 180.80812073]
[73.43928528 194.90350342]
[68.30898285 208.99890137]
[63.17867661 223.09428406]
[58.04837418 237.18968201]
[53.22678375 251.39363098]
[48.71619797 265.69937134]
[59.15152740 276.96878052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 70]
[10 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[23 54]
[24 53]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
