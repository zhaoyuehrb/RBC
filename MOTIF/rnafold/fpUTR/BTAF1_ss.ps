%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGCCUGGGCCUGCGCCGCUCAGCUCUCUGGAAACUAGCGCCUCAGCUGCGCGGCGCGUAGGUCGCGGGGAGCUCCGAACCGCCGGCGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[86.38428497 98.12583923]
[75.04804230 88.30293274]
[63.71179962 78.48001862]
[52.37555695 68.65710449]
[41.03931427 58.83419418]
[29.70306969 49.01128387]
[18.36682510 39.18837357]
[7.03058195 29.36546326]
[-4.30566168 19.54255295]
[-15.64190483 9.71964073]
[-20.36436844 9.02118778]
[-24.15332031 6.96514940]
[-26.67907143 4.05232811]
[-27.82541084 0.84034199]
[-27.68837357 -2.13719082]
[-37.68990707 -13.31615734]
[-47.69144440 -24.49512482]
[-57.69297791 -35.67409134]
[-67.69451141 -46.85305786]
[-77.69604492 -58.03202438]
[-87.69758606 -69.21099091]
[-97.69911957 -80.38996124]
[-112.66697693 -85.51574707]
[-115.38679504 -100.15991974]
[-125.38832855 -111.33888245]
[-135.38986206 -122.51785278]
[-145.39140320 -133.69682312]
[-155.39292908 -144.87579346]
[-167.38423157 -143.20436096]
[-178.54817200 -147.56719971]
[-186.07510376 -156.73922729]
[-188.13313293 -168.30155945]
[-184.31286621 -179.27880859]
[-193.58525085 -191.06961060]
[-208.93264771 -189.50080872]
[-222.68148804 -196.49885559]
[-230.44459534 -209.83068848]
[-229.74476624 -225.24217224]
[-220.80532837 -237.81555176]
[-206.47882080 -243.53871155]
[-191.33677673 -240.58541870]
[-180.21096802 -229.89805603]
[-176.65159607 -214.88690186]
[-181.79444885 -200.34199524]
[-172.52206421 -188.55119324]
[-154.37640381 -187.60745239]
[-142.33622742 -173.58210754]
[-144.21397400 -154.87731934]
[-134.21243286 -143.69834900]
[-124.21089935 -132.51939392]
[-114.20936584 -121.34042358]
[-104.20783234 -110.16145325]
[-89.95534515 -105.83526611]
[-86.52014923 -90.39149475]
[-76.51861572 -79.21252441]
[-66.51708221 -68.03356171]
[-56.51554489 -56.85459137]
[-46.51401138 -45.67562485]
[-36.51247787 -34.49665833]
[-26.51094246 -23.31769180]
[-16.50940704 -12.13872623]
[-5.81899405 -1.61660266]
[5.51724958 8.20630836]
[16.85349274 18.02921867]
[28.18973732 27.85213089]
[39.52598190 37.67504120]
[50.86222458 47.49795151]
[62.19846725 57.32086182]
[73.53471375 67.14377594]
[84.87095642 76.96668243]
[96.20719910 86.78959656]
[108.28625488 95.68321228]
[121.03213501 103.59159851]
[130.15495300 105.51475525]
[134.05136108 111.95854187]
[146.53990173 120.26734161]
[162.31535339 121.46969604]
[168.62585449 134.96142578]
[181.11439514 143.27023315]
[193.60295105 151.57902527]
[209.04608154 148.21969604]
[222.29608154 156.83441162]
[225.49194336 172.31219482]
[216.73764038 185.47036743]
[201.22691345 188.50242615]
[188.16203308 179.60948181]
[185.29414368 164.06758118]
[172.80560303 155.75877380]
[160.31704712 147.44998169]
[145.43486023 146.84193420]
[138.23110962 132.75588989]
[125.74255371 124.44709015]
[113.12374878 116.33747864]
[100.37786865 108.42910004]
[97.71842194 109.03845978]
[94.75839996 108.75764465]
[91.80532074 107.47352600]
[89.20310211 105.18012238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[33 45]
[34 44]
[72 94]
[73 93]
[75 92]
[76 91]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
