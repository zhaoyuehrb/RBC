%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUUGCACGGGCCGGCCCAGCUUCCCCGCCCCUGGCGUCCGCUCCCUCCCGCUCGCAGCUUACUUAACCUGGCCCGGGCGGCGGAGGCGCUCUCACUUCCCUGGAGCCGCCCGCUUGCCCGUCGGUCGCUAGCUCGCUCGGUGCGCGUCGUCCCGCUCC\
) } def
/len { sequence length } bind def

/coor [
[58.18933868 626.11138916]
[43.64976883 630.54638672]
[28.52023506 629.07476807]
[15.10788345 621.92095947]
[5.45800018 610.17578125]
[1.04212260 595.63043213]
[2.53363943 580.50280762]
[9.70510578 567.09991455]
[21.46292496 557.46545410]
[36.01411438 553.06872559]
[37.46627808 538.13922119]
[38.91843796 523.20965576]
[40.37060165 508.28012085]
[33.90178299 494.86355591]
[42.93874741 481.87725830]
[44.39091110 466.94772339]
[45.84307480 452.01818848]
[47.29523849 437.08865356]
[37.78073120 428.35708618]
[35.00608826 415.54544067]
[40.20776749 403.30093384]
[51.68655014 396.19839478]
[53.42794037 381.29983521]
[46.16217041 371.58996582]
[47.52367020 359.13531494]
[57.32356644 350.69995117]
[59.35353851 335.83795166]
[50.16722870 324.16973877]
[52.01419449 309.06863403]
[64.31517792 299.51229858]
[66.34515381 284.65029907]
[55.61188507 271.73171997]
[57.55746460 254.70980835]
[71.46557617 244.13812256]
[73.20697021 229.23954773]
[74.94836426 214.34097290]
[76.68975830 199.44239807]
[78.43115234 184.54382324]
[80.17254639 169.64524841]
[73.96511078 156.10578918]
[83.25219727 143.29716492]
[84.99358368 128.39859009]
[86.73497772 113.50002289]
[82.57432556 127.91143799]
[71.54342651 138.07603455]
[56.84053421 141.04673767]
[42.72856522 135.96221924]
[33.29909897 124.29666138]
[31.28608131 109.43235016]
[37.27315903 95.67899323]
[49.52446365 87.02418518]
[64.48788452 85.97728729]
[77.82318878 92.84015656]
[65.79133606 83.88278198]
[53.75949097 74.92539978]
[37.44393158 70.31683350]
[37.35579681 53.36311722]
[53.62255859 48.58517075]
[62.71686935 62.89355469]
[74.74871826 71.85092926]
[86.78056335 80.80831146]
[94.19049072 79.64942169]
[87.92594910 66.02020264]
[76.38353729 56.44039536]
[73.07056427 41.81082916]
[79.35968781 28.19293785]
[92.64514160 21.22898865]
[107.42240906 23.80433846]
[117.56885529 34.85194778]
[118.88052368 49.79448700]
[110.81438446 62.44051743]
[109.01033783 77.33163452]
[116.42025757 76.17274475]
[125.14263916 63.96946716]
[133.86502075 51.76618576]
[134.85806274 31.66457939]
[152.71948242 24.33312988]
[160.96211243 11.80081367]
[169.20475769 -0.73150355]
[177.44738770 -13.26382065]
[185.69001770 -25.79613876]
[193.93266296 -38.32845688]
[202.17529297 -50.86077118]
[210.41792297 -63.39308929]
[218.04353333 -76.31014252]
[225.03417969 -89.58156586]
[232.02484131 -102.85298920]
[239.01548767 -116.12442017]
[246.00613403 -129.39584351]
[239.02931213 -143.25598145]
[241.56494141 -158.56448364]
[252.63804626 -169.43492126]
[267.99075317 -171.68737793]
[281.71966553 -164.45573425]
[288.54574585 -150.52073669]
[285.84417725 -135.24063110]
[274.65380859 -124.49096680]
[259.27755737 -122.40519714]
[252.28691101 -109.13376617]
[245.29626465 -95.86234283]
[238.30560303 -82.59091187]
[231.31495667 -69.31948853]
[246.22958374 -70.91761780]
[256.91857910 -60.39406586]
[255.55331421 -45.45632935]
[243.13369751 -37.04485321]
[228.75588989 -41.32024002]
[222.95024109 -55.15045547]
[214.70761108 -42.61813736]
[206.46498108 -30.08582115]
[198.22233582 -17.55350304]
[189.97970581 -5.02118587]
[181.73707581 7.51113129]
[173.49443054 20.04344749]
[165.25180054 32.57576370]
[168.21923828 42.41642761]
[165.19146729 52.46887970]
[156.94412231 59.31521225]
[146.06829834 60.48856735]
[137.34591675 72.69184875]
[128.62353516 84.89512634]
[128.10554504 100.05145264]
[121.04931641 111.20661163]
[110.96558380 116.23061371]
[101.63356018 115.24141693]
[99.89216614 130.13998413]
[98.15077209 145.03855896]
[104.23365021 159.64367676]
[95.07112122 171.38664246]
[93.32972717 186.28521729]
[91.58833313 201.18379211]
[89.84693909 216.08236694]
[88.10554504 230.98094177]
[86.36415100 245.87951660]
[95.89556122 255.43780518]
[98.13325500 268.55181885]
[92.47882843 280.37826538]
[81.20715332 286.68026733]
[79.17718506 301.54226685]
[88.46485138 314.04736328]
[86.19445801 329.09060669]
[74.21554565 337.86791992]
[72.18557739 352.72991943]
[79.55372620 369.58087158]
[68.32651520 383.04122925]
[66.58512115 397.93978882]
[77.68034363 411.43395996]
[75.64795685 428.44570923]
[62.22477722 438.54080200]
[60.77261734 453.47033691]
[59.32045364 468.39990234]
[57.86828995 483.32943726]
[64.23323822 497.81384277]
[55.30014420 509.73226929]
[53.84798050 524.66180420]
[52.39581680 539.59136963]
[50.94365692 554.52087402]
[64.37477875 561.63940430]
[74.05553436 573.35913086]
[78.50965881 587.89282227]
[77.05795288 603.02429199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 157]
[11 156]
[12 155]
[13 154]
[15 152]
[16 151]
[17 150]
[18 149]
[22 146]
[23 145]
[26 143]
[27 142]
[30 139]
[31 138]
[34 134]
[35 133]
[36 132]
[37 131]
[38 130]
[39 129]
[41 127]
[42 126]
[43 125]
[53 61]
[54 60]
[55 59]
[73 121]
[74 120]
[75 119]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
