%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAUUCGGGUUCCAGACCCAAGGCUGCGUGUUCUCCACCGCUUGUUGUGGCCAGUGUUACUGCGGUGACCGCCAGAGCAGCCUCGACGCU\
) } def
/len { sequence length } bind def

/coor [
[99.87861633 163.99430847]
[99.37200165 149.00286865]
[98.86538696 134.01142883]
[92.24725342 130.48294067]
[89.62570953 145.25207520]
[74.76929474 147.32257080]
[68.20941925 133.83302307]
[79.01097107 123.42594910]
[72.39283752 119.89746094]
[59.66317368 127.83192444]
[46.93350983 135.76638794]
[34.20384598 143.70083618]
[21.47418213 151.63529968]
[11.23068905 165.14482117]
[-4.58655739 159.04145813]
[-3.10036349 142.15277100]
[13.53972149 138.90563965]
[26.26938438 130.97117615]
[38.99905014 123.03672028]
[51.72871399 115.10225677]
[64.45837402 107.16780090]
[78.78544617 79.28375244]
[104.01789856 77.30683899]
[111.29742432 64.19164276]
[118.57695770 51.07644272]
[125.85648346 37.96124649]
[133.13601685 24.84604645]
[140.41554260 11.73084641]
[147.69506836 -1.38435268]
[146.87298584 -19.68369484]
[162.06997681 -28.28068352]
[168.90240479 -41.63425827]
[159.76562500 -53.81131363]
[156.83386230 -68.68718719]
[160.63607788 -83.30099487]
[170.36627197 -94.76766205]
[184.05368042 -100.84748077]
[198.96174622 -100.38350677]
[205.79415894 -113.73708344]
[212.62658691 -127.09066010]
[219.45899963 -140.44424438]
[226.29142761 -153.79782104]
[233.12385559 -167.15139771]
[228.90005493 -174.88233948]
[228.21530151 -183.56936646]
[231.11149597 -191.68656921]
[237.00836182 -197.84011841]
[244.81782532 -201.00743103]
[253.14414978 -200.70674133]
[261.71316528 -213.01820374]
[270.28219604 -225.32965088]
[278.85122681 -237.64109802]
[287.42022705 -249.95256042]
[288.26361084 -266.32998657]
[302.98965454 -273.54635620]
[316.44949341 -264.17803955]
[314.79675293 -247.86238098]
[299.73168945 -241.38352966]
[291.16265869 -229.07208252]
[282.59365845 -216.76063538]
[274.02462769 -204.44917297]
[265.45559692 -192.13772583]
[266.25976562 -170.59428406]
[246.47743225 -160.31896973]
[239.64500427 -146.96539307]
[232.81257629 -133.61181641]
[225.98016357 -120.25823975]
[219.14773560 -106.90466309]
[212.31532288 -93.55108643]
[221.41354370 -81.73212433]
[224.49063110 -67.07466888]
[220.88383484 -52.47494507]
[211.25654602 -40.84156799]
[197.47700500 -34.51609802]
[182.25598145 -34.80183792]
[175.42355347 -21.44826126]
[178.84378052 -9.71092510]
[173.09085083 1.53176200]
[160.81027222 5.89517689]
[153.53074646 19.01037598]
[146.25120544 32.12557602]
[138.97167969 45.24077606]
[131.69215393 58.35597229]
[124.41262817 71.47117615]
[117.13309479 84.58637238]
[125.49815369 93.35865784]
[128.91734314 106.55799866]
[125.18738556 121.25064087]
[113.85683441 133.50480652]
[114.36344147 148.49626160]
[114.87005615 163.48770142]
[117.71005249 182.66018677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[31 76]
[32 75]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
