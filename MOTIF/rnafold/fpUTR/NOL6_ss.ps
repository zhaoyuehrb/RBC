%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGACUUGGGCCUGGAGUUAGGCAUUUCCGCCCACGUGGGAAGCUAUGAGGUAUAGACCCGGCUAGAAUCUGAAGUGCGGGAGAGUGCUGGACCCUGAGUG\
) } def
/len { sequence length } bind def

/coor [
[43.29359818 448.68353271]
[29.33057404 440.78329468]
[26.94379807 424.91879272]
[37.96420288 413.25988770]
[38.88761520 398.28833008]
[39.81103134 383.31677246]
[40.73444366 368.34521484]
[41.65785599 353.37368774]
[42.58127213 338.40213013]
[43.50468445 323.43057251]
[30.91427040 331.58419800]
[16.18930626 328.72491455]
[7.56530523 316.45190430]
[9.86557579 301.62933350]
[21.80360222 292.54730225]
[36.70257568 294.28527832]
[46.23015594 305.87280273]
[49.88886261 291.32583618]
[53.54756546 276.77890015]
[49.14831161 262.54879761]
[60.01797485 251.05265808]
[63.67668152 236.50570679]
[67.33538818 221.95875549]
[70.99409485 207.41178894]
[74.65280151 192.86483765]
[77.86179352 178.21211243]
[80.61803436 163.46751404]
[83.37428284 148.72291565]
[86.13052368 133.97833252]
[88.88676453 119.23372650]
[91.64300537 104.48913574]
[89.65032196 99.43271637]
[90.73551178 93.62838745]
[95.04964447 88.93394470]
[98.70835114 74.38699341]
[88.93186188 62.48210144]
[88.05026245 47.28091049]
[96.19241333 34.62510681]
[110.05955505 29.25478745]
[113.71826172 14.70783329]
[117.37696838 0.16087967]
[109.52698517 -13.29332161]
[113.44466400 -27.99388123]
[126.31956482 -35.39472580]
[129.97827148 -49.94168091]
[133.63697815 -64.48863220]
[136.84597778 -79.14135742]
[139.60221863 -93.88595581]
[138.09199524 -103.07551575]
[142.67706299 -109.03911591]
[145.88604736 -123.69184113]
[149.09504700 -138.34455872]
[143.61068726 -153.79945374]
[154.45726013 -166.09921265]
[170.47674561 -162.59089661]
[175.18966675 -146.88356018]
[163.74777222 -135.13555908]
[160.53877258 -120.48284149]
[157.32978821 -105.83011627]
[154.34681702 -91.12971497]
[151.59056091 -76.38511658]
[153.60812378 -71.88072205]
[152.69085693 -66.04825592]
[148.18392944 -60.82992935]
[144.52522278 -46.28297424]
[140.86651611 -31.73602104]
[148.70817566 -19.12475395]
[145.20495605 -4.31995392]
[131.92391968 3.81958556]
[128.26521301 18.36653900]
[124.60651398 32.91349411]
[134.28297424 44.20526886]
[135.46893311 59.20718384]
[127.50064087 72.18254089]
[113.25531006 78.04570007]
[109.59660339 92.59265137]
[106.38760376 107.24537659]
[103.63136292 121.98997498]
[100.87512207 136.73457336]
[98.11887360 151.47917175]
[95.36263275 166.22375488]
[92.60639191 180.96835327]
[94.51972198 187.59274292]
[92.91529846 193.27471924]
[89.19975281 196.52354431]
[85.54104614 211.07049561]
[81.88233948 225.61746216]
[78.22363281 240.16441345]
[74.56492615 254.71136475]
[78.70248413 269.98196411]
[68.09452057 280.43759155]
[64.43581390 294.98455811]
[60.77711105 309.53149414]
[58.47623444 324.35397339]
[57.55282211 339.32553101]
[56.62940598 354.29708862]
[55.70599365 369.26864624]
[54.78258133 384.24017334]
[53.85916519 399.21173096]
[52.93575287 414.18328857]
[62.43988419 427.10812378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[17 93]
[18 92]
[19 91]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[34 76]
[35 75]
[39 71]
[40 70]
[41 69]
[44 66]
[45 65]
[46 64]
[47 61]
[48 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
