%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCGGGCCCGGAGCCAGCGCAUGCGCCCGCCUGUGGGCGCUGUCCCGGCUGCGAGGGCCGUGAGCUCACGGACCGACGGACCGACGGGCGGCCGGCCGGACAGACGGGGCAGCGCAGGGAGCGGGGACGCGGCGGGACAGCGAC\
) } def
/len { sequence length } bind def

/coor [
[155.73191833 526.14465332]
[167.33845520 515.84570312]
[165.74942017 500.93011475]
[164.16038513 486.01452637]
[162.57135010 471.09893799]
[160.98231506 456.18334961]
[159.39328003 441.26773071]
[141.65901184 429.66799927]
[138.05982971 408.50143433]
[151.30352783 391.24871826]
[148.14334106 376.58538818]
[144.98315430 361.92205811]
[141.82296753 347.25872803]
[128.14714050 341.41833496]
[120.44158936 328.49206543]
[121.84138489 313.32983398]
[132.01841736 301.76547241]
[128.85823059 287.10214233]
[118.61322021 276.29061890]
[123.26944733 261.17010498]
[120.10925293 246.50675964]
[116.94906616 231.84344482]
[113.78887939 217.18011475]
[109.27378082 211.26306152]
[110.72071838 202.17211914]
[107.87247467 187.44502258]
[105.02423859 172.71791077]
[100.63574982 166.70635986]
[102.27532196 157.64817810]
[99.74030304 142.86395264]
[97.20529175 128.07971191]
[94.67028046 113.29547119]
[85.88209534 102.42076111]
[90.54547882 89.23954010]
[88.01046753 74.45530701]
[85.47545624 59.67106628]
[82.94044495 44.88682556]
[70.84399414 31.04569054]
[77.47756958 14.83068466]
[74.62932587 0.10358280]
[71.78108215 -14.62351894]
[68.62089539 -29.28684807]
[65.15018463 -43.87979507]
[61.67947388 -58.47274399]
[58.20875931 -73.06569672]
[54.73804855 -87.65864563]
[51.26733780 -102.25159454]
[47.79662323 -116.84454346]
[44.01695251 -131.36053467]
[39.93002701 -145.79302979]
[35.84310150 -160.22554016]
[31.60322571 -174.61384583]
[27.21088409 -188.95634460]
[22.81854248 -203.29884338]
[10.23929596 -208.22779846]
[2.92115378 -219.35188293]
[3.36182332 -232.46488953]
[11.17462730 -242.76177979]
[7.08769989 -257.19427490]
[-4.11689186 -268.36422729]
[-0.14001510 -282.71807861]
[-4.22694206 -297.15060425]
[-8.31386948 -311.58309937]
[-12.40079594 -326.01559448]
[-16.48772240 -340.44808960]
[-28.61735344 -351.48458862]
[-24.86039162 -367.44757080]
[-9.08168030 -371.91571045]
[2.48699689 -360.29257202]
[-2.05522394 -344.53500366]
[2.03170300 -330.10250854]
[6.11862993 -315.67001343]
[10.20555687 -301.23751831]
[14.29248428 -286.80502319]
[25.20475197 -276.66738892]
[21.52019882 -261.28118896]
[25.60712624 -246.84869385]
[40.60769653 -239.31407166]
[45.64882660 -222.94955444]
[37.16104507 -207.69119263]
[41.55338669 -193.34867859]
[45.94572830 -179.00617981]
[50.94635773 -173.49336243]
[50.27560043 -164.31245422]
[54.36252594 -149.87995911]
[58.44945145 -135.44746399]
[62.16766357 -132.35047913]
[63.93798065 -126.85824585]
[62.38957214 -120.31525421]
[65.86028290 -105.72230530]
[69.33099365 -91.12935638]
[72.80171204 -76.53640747]
[76.27242279 -61.94345856]
[79.74313354 -47.35050964]
[83.21384430 -32.75756073]
[86.79726410 -29.50556755]
[88.33288574 -23.94314194]
[86.50818634 -17.47176170]
[89.35643005 -2.74465942]
[92.20467377 11.98244190]
[102.07600403 19.04884720]
[104.53759003 31.34654617]
[97.72467804 42.35181427]
[100.25969696 57.13605499]
[102.79470825 71.92029572]
[105.32971954 86.70452881]
[114.11790466 97.57923889]
[109.45452118 110.76045990]
[111.98953247 125.54469299]
[114.52454376 140.32893372]
[117.05955505 155.11317444]
[119.75133514 169.86967468]
[122.59957886 184.59677124]
[125.44782257 199.32388306]
[128.45220947 214.01991272]
[131.61239624 228.68324280]
[134.77258301 243.34657288]
[137.93276978 258.00991821]
[148.40382385 269.87023926]
[143.52156067 283.94195557]
[146.68174744 298.60528564]
[160.71871948 304.95111084]
[168.23959351 318.19082642]
[166.54241943 333.14352417]
[156.48629761 344.09854126]
[159.64648438 358.76187134]
[162.80667114 373.42520142]
[165.96685791 388.08853149]
[174.79635620 390.31613159]
[182.36515808 395.30026245]
[187.84658813 402.46209717]
[190.65333557 410.98703003]
[190.50025940 419.91714478]
[187.43313599 428.25885010]
[181.82034302 435.09353638]
[174.30886841 439.67871094]
[175.89790344 454.59429932]
[177.48693848 469.50988770]
[179.07597351 484.42547607]
[180.66502380 499.34109497]
[182.25405884 514.25665283]
[195.76986694 521.87921143]
[202.19335938 536.00427246]
[199.05456543 551.20056152]
[187.56042480 561.62481689]
[172.13066101 563.26861572]
[158.69834900 555.49993896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[10 128]
[11 127]
[12 126]
[13 125]
[17 121]
[18 120]
[20 118]
[21 117]
[22 116]
[23 115]
[25 114]
[26 113]
[27 112]
[29 111]
[30 110]
[31 109]
[32 108]
[34 106]
[35 105]
[36 104]
[37 103]
[39 100]
[40 99]
[41 98]
[42 95]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 86]
[50 85]
[51 84]
[52 82]
[53 81]
[54 80]
[58 77]
[59 76]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
