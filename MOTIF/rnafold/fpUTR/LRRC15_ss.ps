%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCAUGCUGCAGCCUUGAGCCGUCCCUCGUCCUCCUCUCAGGCUCCCUCUUGUCCACGGCGGGCGGGCGCCGAGCUGCUGAUGUGUCCCUAGCAUAACCUGGCCCCAUUCCUUUGCAUCUAG\
) } def
/len { sequence length } bind def

/coor [
[227.51898193 216.96017456]
[215.79150391 207.60783386]
[204.06402588 198.25547791]
[192.33656311 188.90313721]
[180.49340820 179.69770813]
[168.53642273 170.64064026]
[156.57943726 161.58358765]
[153.68925476 161.90744019]
[150.49147034 161.04144287]
[147.46359253 158.86030579]
[145.11994934 155.42309570]
[143.94323730 150.98056030]
[132.94746399 140.77796936]
[121.95168304 130.57537842]
[110.95590973 120.37277985]
[99.96012878 110.17018890]
[92.29209137 107.39041138]
[88.82143402 99.57353973]
[78.08342743 89.09999084]
[67.34542847 78.62643433]
[58.91926575 74.81782532]
[56.47437668 67.75538635]
[46.00082397 57.01738358]
[37.67223358 52.99988556]
[35.40417099 45.87868500]
[25.20158195 34.88290787]
[14.99899006 23.88713074]
[4.79639912 12.89135170]
[-5.54247570 2.02361703]
[-16.01602745 -8.71438599]
[-26.48958015 -19.45238876]
[-36.96313095 -30.19039154]
[-47.43668365 -40.92839432]
[-57.91023636 -51.66639709]
[-70.21546173 -46.53763962]
[-83.50079346 -45.93170166]
[-96.16049194 -49.89980698]
[-106.67196655 -57.94166946]
[-113.77888489 -69.06844330]
[-116.64132690 -81.92428589]
[-114.93499756 -94.95154572]
[-108.88780975 -106.57951355]
[-118.81310272 -117.82622528]
[-128.73838806 -129.07295227]
[-138.66368103 -140.31967163]
[-154.45089722 -141.05389404]
[-165.03306580 -152.79241943]
[-164.13197327 -168.57099915]
[-152.28221130 -179.02847290]
[-136.51405334 -177.96061707]
[-126.18244171 -166.00094604]
[-127.41695404 -150.24494934]
[-117.49166870 -138.99822998]
[-107.56638336 -127.75151825]
[-97.64109802 -116.50479889]
[-81.61515808 -121.55357361]
[-64.93222046 -119.13539124]
[-50.90834808 -109.68274689]
[-42.35195923 -95.03115082]
[-41.00145721 -78.06286621]
[-47.17223358 -62.13994980]
[-36.69868088 -51.40194702]
[-26.22513008 -40.66394424]
[-15.75157738 -29.92594147]
[-5.27802563 -19.18793869]
[5.19552660 -8.44993496]
[12.19482040 -5.82973242]
[15.79217720 2.68876100]
[25.99476814 13.68453884]
[36.19736099 24.68031693]
[46.39995193 35.67609406]
[56.73882675 46.54383087]
[67.21237946 57.28183365]
[77.81897736 67.88843536]
[88.55698395 78.36198425]
[99.29498291 88.83554077]
[110.16271973 99.17441559]
[121.15850067 109.37700653]
[132.15428162 119.57959747]
[143.15005493 129.78218079]
[154.14582825 139.98477173]
[165.63650513 149.62658691]
[177.59349060 158.68365479]
[189.55047607 167.74072266]
[198.38481140 170.47203064]
[201.68890381 177.17565918]
[213.41638184 186.52801514]
[225.14384460 195.88035583]
[236.87132263 205.23269653]
[233.65563965 190.58145142]
[236.88243103 175.93263245]
[245.95648193 163.98852539]
[259.20388794 156.95246887]
[274.18090820 156.12237549]
[288.12472534 161.65139771]
[298.46313477 172.51957703]
[303.28897095 186.72209167]
[301.71206665 201.63896179]
[294.02331543 214.51850891]
[281.64099121 222.98483276]
[266.84933472 225.47615051]
[252.37963867 221.53430176]
[261.13580322 233.71337891]
[269.89193726 245.89244080]
[278.64810181 258.07150269]
[294.05142212 258.27978516]
[306.23617554 267.41137695]
[310.65521240 281.79663086]
[305.81423950 295.85729980]
[314.57040405 308.03637695]
[330.20605469 310.33886719]
[339.56686401 323.07269287]
[337.09921265 338.68316650]
[324.26712036 347.90881348]
[308.68362427 345.27624512]
[299.59414673 332.34732056]
[302.39132690 316.79254150]
[293.63516235 304.61346436]
[278.76486206 304.72424316]
[266.53610229 295.95376587]
[261.76071167 281.49523926]
[266.46902466 266.82766724]
[257.71286011 254.64860535]
[248.95672607 242.46952820]
[240.20056152 230.29046631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[4 86]
[5 84]
[6 83]
[7 82]
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[18 76]
[19 75]
[20 74]
[22 73]
[23 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[42 55]
[43 54]
[44 53]
[45 52]
[102 125]
[103 124]
[104 123]
[105 122]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
