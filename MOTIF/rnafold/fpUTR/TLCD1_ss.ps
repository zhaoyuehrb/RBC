%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGCUGGCGGCCGGCGGGAGAGGCGGCCGGCCUGGACUGGCCCGAGAGGGAUCCCGGUUCCCAGAACAGACCUAGGAGGCGGCCUCGAGGGCGGACGGCAGGGAGGGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[75.06781769 120.73695374]
[61.62973785 127.40162659]
[51.87374496 142.94590759]
[34.45839310 141.31108093]
[21.20571327 148.33720398]
[7.95303345 155.36332703]
[-5.29964733 162.38946533]
[-18.55232811 169.41558838]
[-31.80500793 176.44171143]
[-45.05768967 183.46783447]
[-58.31037140 190.49397278]
[-66.87876892 203.79408264]
[-81.74768829 202.91964722]
[-95.00036621 209.94577026]
[-108.25304413 216.97189331]
[-109.44046783 232.35350037]
[-118.77352142 244.63754272]
[-133.27404785 249.90423584]
[-148.31500244 246.47300720]
[-159.09686279 235.43873596]
[-162.17916870 220.32241821]
[-156.57836914 205.94763184]
[-144.08168030 196.90129089]
[-128.67672729 196.07008362]
[-115.27917480 203.71922302]
[-102.02649689 196.69308472]
[-88.77381134 189.66696167]
[-81.15333557 176.86940002]
[-65.33649445 177.24128723]
[-52.08381653 170.21516418]
[-38.83113480 163.18902588]
[-25.57845497 156.16290283]
[-12.32577419 149.13677979]
[0.92690670 142.11065674]
[14.17958736 135.08453369]
[27.43226814 128.05839539]
[31.33028984 116.51912689]
[42.42663574 110.58699799]
[54.96506119 113.96353912]
[68.40314484 107.29886627]
[71.43379974 84.65051270]
[88.64746857 69.62312317]
[111.49762726 69.67774200]
[119.91543579 57.26240921]
[128.33323669 44.84707260]
[136.75103760 32.43173599]
[133.98150635 17.10309029]
[142.69522095 4.63209009]
[157.32580566 2.08622599]
[165.74362183 -10.32910919]
[174.16142273 -22.74444389]
[182.57922363 -35.15977859]
[182.72302246 -39.80901337]
[184.25949097 -43.72578049]
[186.76106262 -46.54682922]
[189.72389221 -48.09631729]
[192.63973999 -48.39416504]
[202.35054016 -59.82659531]
[212.06134033 -71.25902557]
[215.09829712 -86.78601837]
[229.23483276 -91.47723389]
[238.94563293 -102.90966797]
[248.65643311 -114.34209442]
[258.36721802 -125.77452850]
[261.40417480 -141.30151367]
[275.54071045 -145.99273682]
[285.25152588 -157.42517090]
[282.45062256 -172.80987549]
[290.23898315 -186.36994934]
[304.93914795 -191.70274353]
[319.61019897 -186.29026794]
[327.32485962 -172.68815613]
[324.44055176 -157.31886292]
[312.31912231 -147.43934631]
[296.68395996 -147.71437073]
[286.97314453 -136.28195190]
[284.63076782 -121.57267761]
[269.79965210 -116.06373596]
[260.08886719 -104.63130188]
[250.37806702 -93.19887543]
[240.66726685 -81.76644135]
[238.32489014 -67.05717468]
[223.49375916 -61.54822922]
[213.78297424 -50.11579895]
[204.07217407 -38.68336868]
[194.99456787 -26.74197388]
[186.57675171 -14.32663822]
[178.15895081 -1.91130316]
[169.74114990 10.50403214]
[172.79144287 25.03783035]
[164.43144226 37.74866104]
[149.16638184 40.84954453]
[140.74856567 53.26487732]
[132.33076477 65.68021393]
[123.91296387 78.09555054]
[129.42082214 86.35999298]
[132.16917419 95.90379333]
[131.90023804 105.83180237]
[128.63922119 115.21281433]
[122.69200897 123.16694641]
[130.42530823 136.01980591]
[138.15863037 148.87266541]
[153.63230896 151.13073730]
[163.99572754 162.84115601]
[164.35557556 178.47459412]
[154.54196167 190.64942932]
[139.18855286 193.61709595]
[125.54476929 185.97631836]
[120.05279541 171.33486938]
[125.30576324 156.60597229]
[117.57245636 143.75311279]
[109.83914948 130.90025330]
[102.30738068 132.34672546]
[94.64656067 131.98399353]
[87.28516388 129.83232117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[13 27]
[14 26]
[15 25]
[43 95]
[44 94]
[45 93]
[46 92]
[49 89]
[50 88]
[51 87]
[52 86]
[57 85]
[58 84]
[59 83]
[61 81]
[62 80]
[63 79]
[64 78]
[66 76]
[67 75]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
