%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCACAGUCAGCCACGGUCCCAUCCUGCUCCGCGCCGGUCAACGAGAGCAAACCCAGUGACUCACCUCCGCCGUGCUAACUCCUCGCUAGCUCUCCCUCUCACACACGCUCACACCCGGCUCGAG\
) } def
/len { sequence length } bind def

/coor [
[94.31212616 133.33018494]
[88.57187653 147.18836975]
[82.83162689 161.04656982]
[91.71446991 173.66000366]
[92.34503174 189.07446289]
[84.52209473 202.37127686]
[70.74192810 209.30746460]
[55.40174103 207.66972351]
[43.39653015 197.98063660]
[38.55710983 183.33195496]
[42.42772293 168.39804077]
[53.77326965 157.94424438]
[68.97343445 155.30632019]
[74.71368408 141.44812012]
[80.45393372 127.58992767]
[78.10120392 125.76229095]
[75.91848755 123.73464966]
[73.92272186 121.52274323]
[60.52436066 128.26690674]
[55.80545044 143.35026550]
[41.76459122 150.60490417]
[26.73197556 145.72679138]
[19.62618828 131.61001587]
[24.66296768 116.62981415]
[38.85408020 109.67367554]
[53.78018951 114.86855316]
[67.17855835 108.12438202]
[66.54293060 95.11354828]
[70.87313080 82.82798004]
[79.52645111 73.09114838]
[91.21852112 67.34822083]
[104.21398163 66.45159912]
[116.58398438 70.53435516]
[126.65736389 59.42008591]
[130.19203186 43.99877930]
[144.47210693 39.76454544]
[154.54548645 28.65028000]
[164.61888123 17.53601265]
[174.69226074 6.42174578]
[184.76564026 -4.69252110]
[173.89924622 -25.16513062]
[172.26426697 -48.25018311]
[180.11306763 -69.98443604]
[196.07231140 -86.64804077]
[217.38310242 -95.40114594]
[240.37792969 -94.76789093]
[245.77636719 -108.76278687]
[251.17478943 -122.75767517]
[256.57321167 -136.75256348]
[261.97164917 -150.74746704]
[267.37005615 -164.74235535]
[255.02441406 -176.10548401]
[247.96456909 -191.28677368]
[247.23373413 -207.97683716]
[252.91473389 -223.64852905]
[264.12158203 -235.93945312]
[279.13760376 -243.00822449]
[295.67834473 -243.81016541]
[300.38357544 -258.05310059]
[305.08880615 -272.29602051]
[296.20129395 -282.90960693]
[293.76516724 -296.42651367]
[298.31561279 -309.27032471]
[308.55358887 -318.09680176]
[321.71435547 -320.66455078]
[326.76770020 -334.78771973]
[331.82104492 -348.91085815]
[323.77285767 -362.31832886]
[326.27676392 -377.75415039]
[338.15054321 -387.92999268]
[353.78771973 -388.04113770]
[365.80493164 -378.03509521]
[368.52798462 -362.63641357]
[360.67117310 -349.11590576]
[345.94421387 -343.85751343]
[340.89086914 -329.73434448]
[335.83752441 -315.61120605]
[345.51043701 -302.40802002]
[345.44500732 -285.87530518]
[335.47024536 -272.48358154]
[319.33172607 -267.59078979]
[314.62649536 -253.34785461]
[309.92126465 -239.10493469]
[320.57403564 -231.02850342]
[328.20874023 -220.02696228]
[332.06042480 -207.17778015]
[331.73538208 -193.74475098]
[327.25146484 -181.05371094]
[319.03778076 -170.36164856]
[307.89343262 -162.73225403]
[294.91012573 -158.93006897]
[281.36495972 -159.34393311]
[275.96652222 -145.34902954]
[270.56811523 -131.35414124]
[265.16967773 -117.35925293]
[259.77124023 -103.36435699]
[254.37283325 -89.36946869]
[261.53726196 -84.69532776]
[267.90109253 -78.97328949]
[273.31237793 -72.33842468]
[277.64169312 -64.94763184]
[280.78521729 -56.97590637]
[282.66723633 -48.61219025]
[283.24191284 -40.05491257]
[282.49447632 -31.50727463]
[280.44152832 -23.17242432]
[277.13073730 -15.24862385]
[272.63970947 -7.92454147]
[267.07415771 -1.37475395]
[260.56539917 4.24441290]
[253.26733398 8.79861546]
[245.35270691 12.17870426]
[237.00907898 14.30333900]
[228.43440247 15.12094688]
[219.83221436 14.61097336]
[211.40695190 12.78439617]
[203.35899353 9.68349266]
[195.87991333 5.38086319]
[185.80653381 16.49513054]
[175.73313904 27.60939789]
[165.65975952 38.72366333]
[155.58638000 49.83793259]
[152.77221680 64.46427155]
[137.77163696 69.49346924]
[127.69824982 80.60773468]
[133.80296326 99.21722412]
[128.56620789 118.08934784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[18 27]
[19 26]
[33 125]
[34 124]
[36 122]
[37 121]
[38 120]
[39 119]
[40 118]
[46 97]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[58 83]
[59 82]
[60 81]
[65 77]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
