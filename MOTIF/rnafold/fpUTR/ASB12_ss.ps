%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACUCCUAGUCUUUCAACGGCAUUGUUAACAGUGGGAAACGAGAGCCCCAGCUGCUCCAGGUUGGGGCCGUGGGGGCUCCCUAAGGAGGGGACACCAGGGCCCCAAUGUUUCACAGAGGGGCGGGGGGCAGCGACCCUGGGCAGCAUGGCCUCAGGCUGAAGCCCGAUCUGGCAUUUCCUUGUGCUCAUA\
) } def
/len { sequence length } bind def

/coor [
[33.16860962 348.53533936]
[19.41564178 367.23587036]
[-0.91930872 378.35293579]
[-24.00963974 379.83099365]
[-28.32030678 394.19824219]
[-32.63097382 408.56549072]
[-36.94163895 422.93276978]
[-35.70216370 439.84133911]
[-51.60683060 445.71313477]
[-61.65200043 432.05551147]
[-51.30889893 418.62210083]
[-46.99823380 404.25485229]
[-42.68756485 389.88757324]
[-38.37689972 375.52032471]
[-45.28739166 371.71679688]
[-51.56529236 366.93475342]
[-57.07302475 361.27761841]
[-61.68969345 354.86804199]
[-65.31373596 347.84515381]
[-67.86514282 340.36163330]
[-69.28725433 332.58032227]
[-69.54797363 324.67074585]
[-68.64054108 316.80535889]
[-66.58365631 309.15582275]
[-63.42114639 301.88925171]
[-59.22097397 295.16455078]
[-54.07382584 289.12896729]
[-48.09112930 283.91479492]
[-41.40264893 279.63665771]
[-34.15366745 276.38867188]
[-26.50183868 274.24273682]
[-18.61374855 273.24664307]
[-10.66128922 273.42324829]
[-2.81792355 274.76974487]
[4.74510813 277.25784302]
[12.38491058 264.34918213]
[20.02471352 251.44052124]
[27.66451645 238.53187561]
[35.30431747 225.62321472]
[32.60501862 213.82250977]
[38.87616348 203.00195312]
[51.22418976 199.24302673]
[59.07202148 186.45977783]
[66.91985321 173.67651367]
[74.76768494 160.89326477]
[82.61551666 148.11001587]
[59.67871094 102.73570251]
[86.23863220 73.71058655]
[82.86699677 59.09442520]
[79.49536133 44.47826767]
[76.12372589 29.86210823]
[72.75209045 15.24595165]
[68.51599884 10.13987064]
[67.63739777 4.50699520]
[69.51605988 0.10204566]
[66.61949158 -14.61562729]
[63.72291946 -29.33329964]
[60.82635117 -44.05097198]
[57.92978287 -58.76864624]
[55.03321457 -73.48632050]
[52.13664627 -88.20398712]
[31.32991982 -99.31547546]
[25.53849983 -121.91204071]
[38.15039062 -141.22477722]
[33.37674332 -155.44491577]
[28.60309982 -169.66505432]
[23.82945442 -183.88519287]
[19.05580902 -198.10533142]
[14.28216553 -212.32546997]
[9.50852013 -226.54560852]
[4.73487568 -240.76574707]
[-0.03876889 -254.98588562]
[-11.76560879 -265.60623169]
[-8.48094177 -280.13415527]
[-13.25458622 -294.35427856]
[-18.02823067 -308.57443237]
[-29.51573372 -311.70141602]
[-37.97613907 -319.90634155]
[-41.38370895 -331.06314087]
[-39.00086212 -342.36019897]
[-31.53427505 -351.00866699]
[-35.84494019 -365.37591553]
[-40.15560913 -379.74316406]
[-44.46627426 -394.11044312]
[-48.77693939 -408.47769165]
[-62.16411972 -417.31869507]
[-63.45515823 -433.30969238]
[-51.65968704 -444.18380737]
[-35.82617950 -441.59933472]
[-28.10074615 -427.53884888]
[-34.40967941 -412.78836060]
[-30.09901428 -398.42111206]
[-25.78834724 -384.05383301]
[-21.47768211 -369.68658447]
[-17.16701508 -355.31933594]
[-0.56082386 -347.63992310]
[5.27229404 -329.96252441]
[-3.80809355 -313.34805298]
[0.96555120 -299.12792969]
[5.73919582 -284.90777588]
[17.12459183 -275.30456543]
[14.18136883 -259.75952148]
[18.95501328 -245.53938293]
[23.72865868 -231.31925964]
[28.50230217 -217.09912109]
[33.27594757 -202.87898254]
[38.04959106 -188.65884399]
[42.82323837 -174.43870544]
[47.59688187 -160.21856689]
[52.37052536 -145.99842834]
[59.46073914 -145.60609436]
[66.25497437 -143.46687317]
[72.32836914 -139.70314026]
[77.29830933 -134.53919983]
[80.84856415 -128.28796387]
[82.74938965 -121.33196259]
[82.87232971 -114.09997559]
[81.19889832 -107.04057312]
[77.82235718 -100.59433746]
[72.94258881 -95.16629791]
[66.85431671 -91.10055542]
[69.75088501 -76.38288879]
[72.64745331 -61.66521454]
[75.54402161 -46.94754028]
[78.44058990 -32.22986984]
[81.33716583 -17.51219559]
[84.23373413 -2.79452324]
[87.36824799 11.87431526]
[90.73988342 26.49047279]
[94.11151886 41.10663223]
[97.48315430 55.72278976]
[100.85478973 70.33894348]
[108.13336945 68.28416443]
[116.32225037 68.12521362]
[124.91240692 70.15044403]
[133.31588745 74.51045990]
[140.90281677 81.19841003]
[147.04307556 90.04012299]
[151.14988708 100.69503784]
[166.05361938 102.39173889]
[180.95735168 104.08844757]
[195.86106873 105.78515625]
[210.77806091 107.36113739]
[225.70730591 108.81628418]
[240.63655090 110.27143097]
[252.68255615 100.04061890]
[268.42764282 101.40740204]
[278.53051758 113.56089020]
[276.99734497 129.29063416]
[264.73773193 139.26446533]
[249.02505493 137.56506348]
[239.18141174 125.20068359]
[224.25215149 123.74553680]
[209.32290649 122.29039001]
[202.35067749 124.77408600]
[194.16436768 120.68888855]
[179.26063538 118.99217987]
[164.35690308 117.29547119]
[149.45317078 115.59876251]
[146.11334229 122.31407928]
[160.95075989 124.51656342]
[163.44107056 139.30839539]
[150.14273071 146.24772644]
[139.43365479 135.74472046]
[136.09381104 142.46003723]
[146.43966675 153.32112122]
[156.78553772 164.18220520]
[172.58926392 164.31546021]
[183.61022949 175.64302063]
[183.30990601 191.44445801]
[171.86643982 202.34504700]
[156.06907654 201.87767029]
[145.29006958 190.31961060]
[145.92443848 174.52806091]
[135.57858276 163.66697693]
[125.23272705 152.80589294]
[117.77423859 153.59387207]
[123.88251495 167.29383850]
[112.74050903 177.33653259]
[99.74636078 169.84306335]
[102.85726166 155.16986084]
[95.39876556 155.95783997]
[87.55093384 168.74110413]
[79.70310974 181.52435303]
[71.85527802 194.30760193]
[64.00744629 207.09085083]
[63.94395828 225.49832153]
[48.21297455 233.26301575]
[40.57317352 246.17167664]
[32.93336868 259.08032227]
[25.29356766 271.98898315]
[17.65376472 284.89764404]
[32.23101044 303.10855103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[7 11]
[35 192]
[36 191]
[37 190]
[38 189]
[39 188]
[42 186]
[43 185]
[44 184]
[45 183]
[46 182]
[48 132]
[49 131]
[50 130]
[51 129]
[52 128]
[55 127]
[56 126]
[57 125]
[58 124]
[59 123]
[60 122]
[61 121]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[72 102]
[74 100]
[75 99]
[76 98]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[139 159]
[140 158]
[141 157]
[142 156]
[143 154]
[144 153]
[145 152]
[165 176]
[166 175]
[167 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
