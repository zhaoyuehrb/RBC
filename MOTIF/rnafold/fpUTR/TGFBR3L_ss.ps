%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGGAGGCUUCUCUAGGGGCGCAUGGCUCUGCAACCGGCUCAGUUGCUGGGCUGUGCGAGUCCCAGGGGUCGCCAGGGGGCACAUCACCGUCAGGGGGGAAAGUGGCGCGGAGCCCAUC\
) } def
/len { sequence length } bind def

/coor [
[129.04791260 123.94268036]
[115.80773163 116.89302826]
[102.56755066 109.84337616]
[94.43579102 109.11656189]
[89.08065796 102.43793488]
[76.02638245 95.04971313]
[60.20530319 94.98612213]
[52.93993759 81.98367310]
[39.88565826 74.59545135]
[26.83138084 67.20722961]
[13.77710247 59.81901169]
[0.72282392 52.43078995]
[-12.33145428 45.04256821]
[-25.38573265 37.65434647]
[-30.84532356 37.71612167]
[-35.28853226 35.79903030]
[-38.11636734 32.65303421]
[-39.13040161 29.15840340]
[-51.57555771 20.78474808]
[-64.02071381 12.41109180]
[-76.46586609 4.03743601]
[-88.91102600 -4.33621979]
[-101.56765747 -12.38666248]
[-114.42737579 -20.10855484]
[-127.28709412 -27.83044624]
[-140.14682007 -35.55233765]
[-153.00653076 -43.27423096]
[-165.86625671 -50.99612427]
[-178.72596741 -58.71801376]
[-191.58569336 -66.43990326]
[-204.44540405 -74.16179657]
[-220.25961304 -74.63272858]
[-227.18777466 -87.81793976]
[-240.04750061 -95.53982544]
[-252.90721130 -103.26171875]
[-265.76693726 -110.98361206]
[-278.62664795 -118.70550537]
[-293.35089111 -113.43946075]
[-307.99719238 -118.91843414]
[-315.65008545 -132.55541992]
[-312.69607544 -147.91145325]
[-300.52993774 -157.73588562]
[-284.89617920 -157.38990784]
[-273.17657471 -147.03689575]
[-270.90475464 -131.56523132]
[-258.04504395 -123.84333038]
[-245.18531799 -116.12143707]
[-232.32560730 -108.39955139]
[-219.46588135 -100.67765808]
[-204.57150269 -100.75904846]
[-196.72352600 -87.02151489]
[-183.86380005 -79.29962921]
[-171.00407410 -71.57773590]
[-158.14436340 -63.85584259]
[-145.28463745 -56.13394928]
[-132.42492676 -48.41205978]
[-119.56520081 -40.69016647]
[-106.70548248 -32.96827316]
[-93.84576416 -25.24638176]
[-88.97071838 -25.55002403]
[-83.87462616 -22.71123123]
[-80.53736877 -16.78137589]
[-68.09220886 -8.40771961]
[-55.64705658 -0.03406335]
[-43.20190048 8.33959293]
[-30.75674629 16.71324921]
[-17.99751282 24.60006905]
[-4.94323349 31.98829079]
[8.11104488 39.37651062]
[21.16532326 46.76473236]
[34.21960068 54.15295410]
[47.27388000 61.54117584]
[60.32815933 68.92939758]
[75.21550751 68.46453094]
[83.41460419 81.99543762]
[96.46887970 89.38365936]
[109.61720276 96.60319519]
[122.85738373 103.65284729]
[136.09756470 110.70249176]
[149.68310547 117.06121063]
[163.57795715 122.71212769]
[177.47282410 128.36305237]
[191.36767578 134.01396179]
[196.77413940 133.25169373]
[201.42672729 134.58242798]
[204.63510132 137.33929443]
[206.08944702 140.67478943]
[219.50674438 147.38119507]
[234.33607483 142.61370850]
[247.84759521 149.60609436]
[252.30126953 163.77297974]
[265.71856689 170.47938538]
[279.13589478 177.18579102]
[292.55319214 183.89219666]
[305.97048950 190.59860229]
[318.74215698 182.06745911]
[334.06933594 181.08110046]
[347.82913208 187.90487671]
[356.32019043 200.70320129]
[357.25851440 216.03340149]
[350.39163208 229.77172852]
[337.56674194 238.22265625]
[322.23367310 239.11289978]
[308.51693726 232.20300293]
[300.10626221 219.35169983]
[299.26409912 204.01591492]
[285.84680176 197.30949402]
[272.42947388 190.60308838]
[259.01217651 183.89668274]
[245.59486389 177.19027710]
[231.59048462 182.13121033]
[217.88789368 175.52108765]
[212.80033875 160.79850769]
[199.38304138 154.09210205]
[185.71676636 147.90882874]
[171.82189941 142.25790405]
[157.92704773 136.60699463]
[144.03218079 130.95606995]
[141.31849670 132.02577209]
[137.99392700 132.01882935]
[134.49206543 130.68754578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[80 118]
[81 117]
[82 116]
[83 115]
[87 114]
[88 113]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
