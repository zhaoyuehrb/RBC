%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACGUCAUAGAUUGCGGGCCCACCCCUCCCCCUGUCUGCCUGCCCUCCCCACUGGCCGGGCCUCAACCUCUUCUCCCCACAACCCCAACCCCAGAGGAAAAGCCCCCUCACCUGGCGUCCCGCAACC\
) } def
/len { sequence length } bind def

/coor [
[111.70608521 239.59814453]
[110.25837708 224.66818237]
[108.45032501 209.77754211]
[106.28298950 194.93495178]
[104.11565399 180.09234619]
[101.94831848 165.24975586]
[99.78098297 150.40716553]
[97.61364746 135.56455994]
[95.44631195 120.72196960]
[88.98153687 116.91976929]
[69.58721924 105.51317596]
[55.56197739 110.83224487]
[41.53673553 116.15132141]
[27.51149178 121.47039032]
[23.33785629 136.29898071]
[11.37281895 145.71658325]
[-3.66548944 146.27630615]
[-16.00209618 137.97291565]
[-30.02733994 143.29199219]
[-44.05258179 148.61106873]
[-47.14839172 163.72462463]
[-57.94009781 174.74925232]
[-72.98410797 178.16705322]
[-87.47992706 172.88740540]
[-96.80200195 160.59503174]
[-97.97568512 145.21237183]
[-90.62645721 131.64799500]
[-77.09944153 124.23023224]
[-61.71104431 125.32606506]
[-49.37165451 134.58581543]
[-35.34641266 129.26675415]
[-21.32116890 123.94767761]
[-17.59324646 109.55181885]
[-5.96574926 99.99853516]
[9.23523712 99.11342621]
[22.19241905 107.44515228]
[36.21766281 102.12607574]
[50.24290466 96.80699921]
[64.26815033 91.48793030]
[68.38334656 77.06346893]
[59.27590942 65.14479828]
[50.16847229 53.22613525]
[41.06103516 41.30746841]
[31.95359802 29.38880539]
[17.42676353 23.12129402]
[15.84712791 8.31068993]
[6.73969030 -3.60797548]
[-8.76901627 -3.09841275]
[-21.59642220 -11.82980824]
[-26.81012917 -26.44476318]
[-22.40536118 -41.32352829]
[-10.07583809 -50.74491501]
[5.43748283 -51.08620453]
[18.16941643 -42.21617126]
[23.22427177 -27.54551888]
[18.65835571 -12.71541309]
[27.76579285 -0.79674786]
[41.64120102 4.61825991]
[43.87226105 20.28136635]
[52.97970200 32.20003128]
[62.08713913 44.11869812]
[71.19457245 56.03736115]
[80.30200958 67.95603180]
[78.02359772 53.13007736]
[68.97264862 41.16845703]
[62.10625839 27.83231544]
[57.62771988 13.51649570]
[55.66963196 -1.35515130]
[56.28996658 -16.34231949]
[59.47035980 -31.00127792]
[65.11664581 -44.89802170]
[73.06165314 -57.62110519]
[83.07015991 -68.79383087]
[94.84583282 -78.08541107]
[108.04003906 -85.22074890]
[122.26212311 -89.98857880]
[137.09101868 -92.24774933]
[152.08767700 -91.93137360]
[166.80810547 -89.04880524]
[180.81645203 -83.68540192]
[193.69798279 -75.99995422]
[205.07131958 -66.22000885]
[214.59971619 -54.63511658]
[222.00105286 -41.58827591]
[227.05622864 -27.46576881]
[229.61555481 -12.68571854]
[229.60325623 2.31427598]
[227.01971436 17.09010887]
[221.94139099 31.20431137]
[214.51866150 44.23899841]
[204.97129822 55.80825424]
[193.58193970 65.56954193]
[180.68783569 73.23386383]
[166.67070007 78.57429504]
[151.94259644 81.43304443]
[137.27214050 84.56004333]
[151.64582825 88.84922791]
[166.01951599 93.13841248]
[180.39320374 97.42759705]
[192.64050293 87.89955902]
[208.15028381 87.42364502]
[220.95870972 96.18285370]
[226.14070129 110.80908966]
[221.70365906 125.67826080]
[209.35372925 135.07287598]
[193.83969116 135.38050842]
[181.12704468 126.48287201]
[176.10401917 111.80128479]
[161.73033142 107.51210022]
[147.35664368 103.22291565]
[132.98295593 98.93372345]
[127.30944824 103.83895111]
[130.13233948 118.57093811]
[115.96242523 113.64940643]
[110.28890991 118.55463409]
[112.45624542 133.39723206]
[114.62358093 148.23982239]
[116.79091644 163.08242798]
[118.95825195 177.92501831]
[121.12558746 192.76760864]
[123.29292297 207.61021423]
[127.17972565 213.16073608]
[127.54543304 218.96055603]
[125.18835449 223.22047424]
[126.63606262 238.15043640]
[138.05842590 249.41584778]
[136.22927856 265.35427856]
[122.55180359 273.73916626]
[107.51817322 268.13830566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[8 116]
[9 115]
[11 39]
[12 38]
[13 37]
[14 36]
[18 32]
[19 31]
[20 30]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[46 57]
[47 56]
[96 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
