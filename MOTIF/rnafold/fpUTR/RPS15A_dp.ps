%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:24 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RPS15A)
} def

/sequence { (\
CUCUUUCCGCCAUCUUUCCGCGCCGGUGAGUAGCACUCUCUGAGAGCUCCAAUUUCAUCCGUCUGCCAUCGGCGCCAUCCUGCAAUCUAAGCCACA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 91 0.053340336 ubox
2 90 0.052376889 ubox
3 91 0.184954360 ubox
4 85 0.014554629 ubox
4 90 0.187566318 ubox
4 91 0.042356071 ubox
5 84 0.016151733 ubox
5 85 0.024089727 ubox
5 89 0.181881745 ubox
5 90 0.053033690 ubox
5 91 0.011840797 ubox
6 84 0.023807049 ubox
6 89 0.051292671 ubox
6 90 0.013096440 ubox
8 20 0.007446640 ubox
8 82 0.010901577 ubox
9 19 0.030984284 ubox
9 21 0.011874274 ubox
9 81 0.010068117 ubox
9 83 0.368437749 ubox
9 92 0.087652910 ubox
10 20 0.012022038 ubox
10 82 0.355452380 ubox
10 91 0.087319081 ubox
11 82 0.130581461 ubox
12 78 0.033123703 ubox
12 81 0.157169178 ubox
12 86 0.013408178 ubox
13 77 0.032381482 ubox
13 85 0.013599632 ubox
14 91 0.035765514 ubox
15 85 0.009488935 ubox
15 90 0.036680556 ubox
15 91 0.005995988 ubox
16 84 0.009654263 ubox
16 85 0.037857435 ubox
16 89 0.035353468 ubox
16 90 0.008089557 ubox
17 84 0.036447463 ubox
17 89 0.007813099 ubox
17 90 0.003251875 ubox
19 82 0.044940963 ubox
20 75 0.997795835 ubox
20 81 0.005939068 ubox
20 83 0.003685161 ubox
20 92 0.006324924 ubox
21 74 0.999737496 ubox
21 82 0.003369986 ubox
21 91 0.006291239 ubox
22 73 0.999978721 ubox
23 72 0.999995351 ubox
24 71 0.999978274 ubox
25 70 0.999869189 ubox
26 69 0.999332414 ubox
27 68 0.999718150 ubox
28 67 0.999688040 ubox
30 66 0.999693466 ubox
31 65 0.999583336 ubox
32 48 0.019715542 ubox
32 64 0.999105500 ubox
33 47 0.023190118 ubox
33 62 0.016898548 ubox
33 63 0.998838436 ubox
33 66 0.015621615 ubox
34 46 0.023941755 ubox
34 61 0.113855056 ubox
34 65 0.015653248 ubox
35 62 0.970489540 ubox
35 64 0.014843429 ubox
36 44 0.025318208 ubox
36 46 0.040095136 ubox
36 61 0.970893304 ubox
37 43 0.025857503 ubox
37 45 0.042045294 ubox
38 42 0.025678934 ubox
38 44 0.042082585 ubox
38 46 0.018177459 ubox
39 43 0.037913954 ubox
39 45 0.018242460 ubox
40 44 0.018094354 ubox
41 51 0.004647416 ubox
41 57 0.966574688 ubox
41 61 0.003790038 ubox
42 49 0.004642813 ubox
42 50 0.004728272 ubox
42 54 0.014352833 ubox
42 55 0.016057690 ubox
42 56 0.997009485 ubox
42 59 0.026501660 ubox
42 60 0.010329762 ubox
43 48 0.004467709 ubox
43 53 0.014485052 ubox
43 54 0.018552747 ubox
43 55 0.996159690 ubox
43 58 0.026471885 ubox
44 53 0.018432032 ubox
44 54 0.992587332 ubox
44 55 0.020436805 ubox
44 56 0.029159222 ubox
44 59 0.010800291 ubox
45 53 0.983594918 ubox
45 54 0.034622998 ubox
45 55 0.028930573 ubox
45 58 0.010690845 ubox
46 53 0.032329519 ubox
46 54 0.025549387 ubox
47 61 0.003936978 ubox
52 58 0.004355709 ubox
53 57 0.004127557 ubox
74 83 0.015732947 ubox
74 92 0.003466350 ubox
75 82 0.015857851 ubox
75 91 0.003575212 ubox
76 82 0.073515721 ubox
77 81 0.060486381 ubox
77 86 0.030249045 ubox
78 85 0.030870069 ubox
80 91 0.254317244 ubox
81 89 0.031449656 ubox
81 90 0.257340389 ubox
81 94 0.121808206 ubox
81 96 0.030579268 ubox
82 88 0.032330364 ubox
82 92 0.533018003 ubox
82 93 0.102014234 ubox
82 95 0.037851225 ubox
83 91 0.542349593 ubox
20 75 0.9500000 lbox
21 74 0.9500000 lbox
22 73 0.9500000 lbox
23 72 0.9500000 lbox
24 71 0.9500000 lbox
25 70 0.9500000 lbox
26 69 0.9500000 lbox
27 68 0.9500000 lbox
28 67 0.9500000 lbox
30 66 0.9500000 lbox
31 65 0.9500000 lbox
32 64 0.9500000 lbox
33 63 0.9500000 lbox
35 62 0.9500000 lbox
36 61 0.9500000 lbox
41 57 0.9500000 lbox
42 56 0.9500000 lbox
43 55 0.9500000 lbox
44 54 0.9500000 lbox
45 53 0.9500000 lbox
showpage
end
%%EOF
