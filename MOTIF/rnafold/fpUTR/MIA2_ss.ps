%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGUGUUUGUCUCUCAAGUUAAACCAACAAGCCGAUAGAAAAAGGUAGUUAUCAAGAGAUUUUUAAAACUUCAACCCUUUUUCUCUUAUAGUUAGUGAAGAGAGUAGAAUAUCUCCAGUUUUGGCUGACAUCUCUACAACCUGAACAAUUGGCUUAAACUUCACUUGGGAUUCCCGGUUGCUUGUUUUAGC\
) } def
/len { sequence length } bind def

/coor [
[92.33271790 620.55798340]
[88.50881958 635.06237793]
[84.68492126 649.56683350]
[80.86103058 664.07122803]
[77.03713226 678.57562256]
[83.83971405 693.10504150]
[76.59265137 707.41796875]
[60.85526276 710.53472900]
[48.69992828 700.06439209]
[49.45118332 684.03894043]
[62.53272247 674.75170898]
[66.35662079 660.24731445]
[70.18051910 645.74291992]
[74.00441742 631.23852539]
[77.82831573 616.73413086]
[64.90614319 599.02197266]
[69.33099365 577.26739502]
[88.61750793 565.72790527]
[91.02368164 550.92218018]
[93.42984772 536.11645508]
[95.83601379 521.31066895]
[98.24218750 506.50491333]
[96.21881866 502.16543579]
[96.90937042 496.50759888]
[100.97176361 491.26412964]
[103.85366821 476.54357910]
[106.73556519 461.82302856]
[109.61746979 447.10247803]
[88.90415192 431.26437378]
[82.05614471 406.91308594]
[90.91758728 384.05334473]
[111.06862640 371.50531006]
[109.86163330 356.55395508]
[108.65463257 341.60256958]
[107.44763184 326.65121460]
[106.24063110 311.69985962]
[105.03363800 296.74850464]
[103.82663727 281.79714966]
[102.61963654 266.84579468]
[89.44020081 262.49111938]
[78.88424683 253.41160583]
[72.56848145 240.95425415]
[71.47679138 226.98663330]
[75.80708313 213.61685181]
[84.93643188 202.87545776]
[97.51042938 196.40705872]
[96.54445648 181.43818665]
[95.57847595 166.46932983]
[94.61250305 151.50045776]
[86.07164764 139.29788208]
[92.90418243 125.02807617]
[91.93820190 110.05921173]
[85.72697449 96.40562439]
[75.07773590 85.84182739]
[64.42849731 75.27803040]
[56.12025452 71.44911194]
[53.69451523 64.45722961]
[43.21684647 53.72324753]
[32.73917389 42.98926163]
[22.26150322 32.25527954]
[11.78383350 21.52129364]
[1.30616283 10.78730869]
[-11.84581947 18.18242836]
[-26.46389580 21.92063904]
[-41.55138397 21.74706650]
[-56.07959366 17.67354584]
[-69.05796051 9.97781277]
[-79.60160828 -0.81542194]
[-86.99165344 -13.97025871]
[-90.72422028 -28.58977890]
[-90.54482269 -43.67719650]
[-86.46569061 -58.20383072]
[-78.76494598 -71.17922974]
[-67.96764374 -81.71871185]
[-54.80995178 -89.10366821]
[-40.18899155 -92.83058929]
[-25.10164261 -92.64537048]
[-10.57658577 -88.56063080]
[2.39583921 -80.85487366]
[12.93114853 -70.05350494]
[20.31102753 -56.89296341]
[24.03230476 -42.27056503]
[23.84125519 -27.18329048]
[19.75090790 -12.65981007]
[12.04014683 0.30963847]
[22.51781845 11.04362297]
[32.99548721 21.77760696]
[43.47315979 32.51159286]
[53.95082855 43.24557495]
[64.42849731 53.97956085]
[74.99229431 64.62879944]
[85.64153290 75.19258881]
[96.29076385 85.75638580]
[111.13336182 83.58905029]
[118.31727600 70.42123413]
[125.50119019 57.25341797]
[132.68510437 44.08560181]
[139.86901855 30.91778755]
[147.05293274 17.74997139]
[146.86999512 1.92982256]
[159.75765991 -5.53726244]
[166.94157410 -18.70507812]
[174.12548828 -31.87289429]
[181.30940247 -45.04071045]
[188.17303467 -58.37827301]
[194.71237183 -71.87779236]
[201.25172424 -85.37731171]
[193.81167603 -98.99440765]
[195.82986450 -114.37967682]
[206.53025818 -125.61716461]
[221.79833984 -128.38583374]
[235.76319885 -121.62107086]
[243.05508423 -107.92406464]
[240.87011719 -92.56159210]
[230.04844666 -81.44084167]
[214.75123596 -78.83796692]
[208.21189880 -65.33844757]
[201.67254639 -51.83892822]
[202.48626709 -48.39522934]
[201.66407776 -44.38537598]
[198.95774841 -40.58638382]
[194.47721863 -37.85679626]
[187.29330444 -24.68898201]
[180.10939026 -11.52116489]
[172.92547607 1.64665115]
[173.62225342 16.52495003]
[160.22074890 24.93388557]
[153.03683472 38.10169983]
[145.85292053 51.26951599]
[138.66900635 64.43733215]
[131.48509216 77.60514832]
[124.30117798 90.77296448]
[139.06059265 93.44870758]
[148.42790222 105.16423798]
[147.79054260 120.15068817]
[137.46235657 131.02857971]
[122.52905273 132.44151306]
[110.34394836 123.69375610]
[106.90706635 109.09323883]
[107.87304688 124.06210327]
[116.48299408 137.33535767]
[109.58136749 150.53448486]
[110.54734039 165.50334167]
[111.51332092 180.47221375]
[112.47929382 195.44107056]
[127.60617828 201.41661072]
[138.57595825 213.34579468]
[143.23167419 228.80812073]
[140.69062805 244.69609070]
[131.51116943 257.83966064]
[117.57099915 265.63879395]
[118.77799988 280.59014893]
[119.98499298 295.54150391]
[121.19199371 310.49285889]
[122.39899445 325.44421387]
[123.60598755 340.39556885]
[124.81298828 355.34695435]
[126.01998901 370.29830933]
[132.89002991 371.39779663]
[139.50590515 373.78768921]
[145.62489319 377.41067505]
[151.01693726 382.16384888]
[155.47328186 387.90130615]
[158.81442261 394.43862915]
[160.89729309 401.55874634]
[161.62110901 409.01904297]
[160.93191528 416.55981445]
[158.82543945 423.91308594]
[155.34831238 430.81228638]
[150.59725952 437.00186157]
[159.99003601 448.69696045]
[169.38281250 460.39208984]
[184.01522827 468.95532227]
[179.83729553 485.38641357]
[162.89175415 485.92034912]
[157.68769836 469.78485107]
[148.29492188 458.08975220]
[138.90214539 446.39462280]
[124.33802032 449.98437500]
[121.45612335 464.70492554]
[118.57421875 479.42547607]
[115.69232178 494.14602661]
[113.04794312 508.91110229]
[110.64176941 523.71685791]
[108.23560333 538.52258301]
[105.82942963 553.32836914]
[103.42326355 568.13409424]
[110.30809784 572.79241943]
[115.49758911 579.24291992]
[118.54837036 586.90289307]
[119.20912170 595.08764648]
[117.44123077 603.07183838]
[113.42039490 610.15380859]
[107.51941681 615.71716309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[18 187]
[19 186]
[20 185]
[21 184]
[22 183]
[25 182]
[26 181]
[27 180]
[28 179]
[32 158]
[33 157]
[34 156]
[35 155]
[36 154]
[37 153]
[38 152]
[39 151]
[46 145]
[47 144]
[48 143]
[49 142]
[51 140]
[52 139]
[53 93]
[54 92]
[55 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[94 132]
[95 131]
[96 130]
[97 129]
[98 128]
[99 127]
[101 125]
[102 124]
[103 123]
[104 122]
[105 118]
[106 117]
[107 116]
[170 178]
[171 177]
[172 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
