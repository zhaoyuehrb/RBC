%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAAAAAAGUGAUGAGUUGUGAGGCAGGUCGCGGCCCUACUGCCUCAGGAGACGAUGCGCAGCUCAUUUGCUUAAAUUUGCAGCUGACGGCUGCCACCUCUCUAGAGGCACCUGGCGGGGAGCCUCUCAACAUAAGACAGUGACCAGUCUGGUGACUCACAGCCGGCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[69.48316956 494.43392944]
[54.91494370 498.00698853]
[40.19159317 495.13940430]
[28.02913284 486.36019897]
[20.67117500 473.28884888]
[19.47503662 458.33660889]
[24.66137314 444.26174927]
[35.27346039 433.66061401]
[49.35368729 428.48886108]
[64.30467224 429.70046997]
[77.36841583 437.07192993]
[86.13382721 449.24066162]
[86.40005493 434.24301147]
[75.90398407 423.73739624]
[75.96031952 408.52386475]
[87.05075073 397.58584595]
[87.31697845 382.58822632]
[87.58319855 367.59057617]
[87.84941864 352.59295654]
[88.11564636 337.59530640]
[88.38186646 322.59768677]
[88.64808655 307.60003662]
[88.91431427 292.60238647]
[81.40411377 279.73980713]
[89.38512421 266.07913208]
[89.65134430 251.08149719]
[89.91757202 236.08386230]
[90.18379211 221.08622742]
[82.67359924 208.22363281]
[90.65460968 194.56295776]
[90.92082977 179.56532288]
[91.18704987 164.56767273]
[91.45327759 149.57003784]
[91.71949768 134.57240295]
[91.98571777 119.57476807]
[80.96411133 109.40009308]
[66.03552246 110.86206818]
[51.10694122 112.32404327]
[41.26894760 124.69293213]
[25.55706596 126.39951324]
[13.29288197 116.43129730]
[11.75251484 100.70225525]
[21.84983826 88.54414368]
[37.59428787 87.17015839]
[49.64496231 97.39546204]
[64.57354736 95.93348694]
[79.50212860 94.47150421]
[83.48028564 88.11349487]
[76.44577789 74.86526489]
[91.43659973 75.39748383]
[95.41475677 69.03947449]
[90.20114899 54.97468185]
[84.98754883 40.90989304]
[79.77394104 26.84510231]
[74.56033325 12.78031349]
[61.73756790 8.59756374]
[53.78917313 -2.05726004]
[53.44384003 -15.15086269]
[60.60351181 -25.88567352]
[55.64035416 -40.04077911]
[49.83000183 -47.13042831]
[50.71714783 -54.49138260]
[46.00600052 -68.73234558]
[41.29484940 -82.97331238]
[36.58369827 -97.21427917]
[31.87254715 -111.45523834]
[26.90938759 -125.61034393]
[21.69578171 -139.67514038]
[16.48217583 -153.73992920]
[4.43069935 -163.99041748]
[7.26193476 -178.61344910]
[2.04832911 -192.67825317]
[-3.16527629 -206.74304199]
[-8.37888145 -220.80783081]
[-23.35568428 -224.86676025]
[-33.06014252 -236.97474670]
[-33.76068878 -252.47599792]
[-25.18795395 -265.40997314]
[-10.63832760 -270.80331421]
[4.29356289 -266.58212280]
[13.86610031 -254.36959839]
[14.39844799 -238.86164856]
[5.68590832 -226.02143860]
[10.89951420 -211.95663452]
[16.11311913 -197.89184570]
[21.32672501 -183.82705688]
[33.00529099 -174.58258057]
[30.54696655 -158.95353699]
[35.76057053 -144.88874817]
[40.97417831 -130.82395935]
[44.89136505 -128.04238892]
[47.08506393 -122.75716400]
[46.11351013 -116.16638947]
[50.82466125 -101.92543030]
[55.53581238 -87.68446350]
[60.24696350 -73.44349670]
[64.95811462 -59.20253372]
[69.79545593 -45.00394058]
[74.75862122 -30.84883308]
[90.20382690 -24.22987366]
[96.21554565 -8.17757225]
[88.62512970 7.56670761]
[93.83872986 21.63149834]
[99.05233765 35.69628906]
[104.26594543 49.76107788]
[109.47954559 63.82586670]
[123.54434204 69.03947449]
[136.66578674 61.77120972]
[149.78723145 54.50294876]
[162.90867615 47.23468399]
[176.03012085 39.96641922]
[189.15156555 32.69815826]
[197.47433472 19.24296761]
[212.35679626 19.84426117]
[225.47824097 12.57599831]
[238.59968567 5.30773592]
[246.58171082 -9.01774216]
[262.98083496 -8.99726391]
[270.92706299 5.34810495]
[262.24600220 19.26107788]
[245.86795044 18.42918205]
[232.74650574 25.69744492]
[219.62506104 32.96570969]
[212.24082947 45.90102386]
[196.41983032 45.81960297]
[183.29838562 53.08786774]
[170.17694092 60.35612869]
[157.05549622 67.62438965]
[143.93405151 74.89265442]
[130.81260681 82.16091919]
[145.51318359 79.17884827]
[160.24607849 81.99698639]
[172.80830383 90.19396210]
[181.32148743 102.54409027]
[184.51266479 117.20070648]
[181.90467834 131.97224426]
[173.88749695 144.64997864]
[161.65988159 153.33821106]
[147.05021667 156.73785400]
[132.24302673 154.34056091]
[119.45237732 146.50477600]
[110.59083557 134.40216064]
[106.98336029 119.84098816]
[106.71713257 134.83862305]
[106.45091248 149.83625793]
[106.18469238 164.83390808]
[105.91846466 179.83154297]
[105.65224457 194.82917786]
[113.14339447 208.76449585]
[105.18142700 221.35244751]
[104.91520691 236.35008240]
[104.64898682 251.34771729]
[104.38275909 266.34536743]
[111.87391663 280.28067017]
[103.91194916 292.86862183]
[103.64572906 307.86627197]
[103.37950134 322.86389160]
[103.11328125 337.86154175]
[102.84706116 352.85916138]
[102.58083344 367.85681152]
[102.31461334 382.85443115]
[102.04839325 397.85208130]
[112.74363708 409.17681885]
[112.26000214 424.38275146]
[101.39768982 434.50924683]
[101.13146973 449.50689697]
[106.34704590 459.60998535]
[102.69335938 469.02050781]
[105.34177399 483.78488159]
[107.99018097 498.54922485]
[116.73809814 513.07196045]
[105.20456696 525.49829102]
[90.07105255 517.85546875]
[93.22583771 501.19763184]
[90.57742310 486.43328857]
[87.92901611 471.66894531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 166]
[13 165]
[16 162]
[17 161]
[18 160]
[19 159]
[20 158]
[21 157]
[22 156]
[23 155]
[25 153]
[26 152]
[27 151]
[28 150]
[30 148]
[31 147]
[32 146]
[33 145]
[34 144]
[35 143]
[36 47]
[37 46]
[38 45]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[59 99]
[60 98]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 90]
[68 89]
[69 88]
[71 86]
[72 85]
[73 84]
[74 83]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
[168 176]
[169 175]
[170 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
