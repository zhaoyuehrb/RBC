%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGCGAGGCGGCGGGCGAUCCCGGGCUCCCCGGGCUGUGGGCUACAGGCGCAGAGCGGGCCAGGCGCGGAGCUGGCGGCAGUGACAGGAGGCGCGAACCCGCAGCGCUUACCGCGCGGCGCCGCACC\
) } def
/len { sequence length } bind def

/coor [
[77.76523590 346.09155273]
[65.45618439 336.64343262]
[61.08370590 321.75515747]
[66.32910919 307.15155029]
[79.17543030 298.44799805]
[79.53788757 283.45239258]
[76.87843323 279.37438965]
[76.82306671 273.56332397]
[80.29760742 267.74581909]
[81.38413239 252.78523254]
[82.47064972 237.82464600]
[83.55717468 222.86404419]
[76.76210022 209.60975647]
[85.47868347 196.40628052]
[86.56520844 181.44567871]
[79.77012634 168.19139099]
[88.48671722 154.98793030]
[89.57324219 140.02732849]
[90.65975952 125.06672668]
[79.26725769 121.57474518]
[69.47381592 112.77967072]
[63.73795700 99.55235291]
[48.95206451 102.07771301]
[34.16617203 104.60306549]
[19.38028145 107.12841797]
[4.59439087 109.65377808]
[-10.19149971 112.17913055]
[-24.78660202 120.80579376]
[-37.11645889 109.16917419]
[-29.34784508 94.09983826]
[-12.71685600 97.39324188]
[2.06903553 94.86788177]
[16.85492706 92.34252930]
[31.64081764 89.81717682]
[46.42670822 87.29181671]
[61.21260071 84.76646423]
[63.73795700 69.98057556]
[50.62843704 62.69082260]
[37.51891327 55.40106964]
[24.40939522 48.11131668]
[11.29987431 40.82156754]
[-5.48144197 38.40831757]
[-7.80803537 21.61476898]
[7.68515062 14.73018360]
[18.58962440 27.71204567]
[31.69914627 35.00179672]
[44.80866623 42.29154968]
[57.91818619 49.58129883]
[71.02770996 56.87105179]
[85.78200531 54.16722488]
[95.45463562 42.70249176]
[105.12727356 31.23775482]
[114.79990387 19.77301788]
[113.24849701 8.87838650]
[117.90646362 -0.84740603]
[126.98783875 -6.24202251]
[137.31576538 -5.70304346]
[147.53099060 -16.68707275]
[157.74623108 -27.67110443]
[167.96147156 -38.65513229]
[178.17671204 -49.63916397]
[174.52404785 -62.98944473]
[177.94357300 -76.28925323]
[187.43136597 -86.06623840]
[200.41395569 -89.82304382]
[213.44564819 -86.67462921]
[223.92332458 -97.40861511]
[234.40100098 -108.14260101]
[244.87866211 -118.87657928]
[241.54965210 -132.31123352]
[245.28955078 -145.52452087]
[255.01083374 -155.06939697]
[268.08041382 -158.51138306]
[281.03222656 -155.04899597]
[291.76620483 -165.52667236]
[302.50018311 -176.00434875]
[306.97097778 -191.18072510]
[321.48321533 -194.53407288]
[332.21719360 -205.01173401]
[336.12936401 -220.93740845]
[351.95080566 -225.25175476]
[363.40579224 -213.51654053]
[358.71041870 -197.80395508]
[342.69485474 -194.27775574]
[331.96087646 -183.80007935]
[328.25784302 -169.37313843]
[312.97787476 -165.27035522]
[302.24389648 -154.79269409]
[291.50988770 -144.31501770]
[294.41409302 -128.20549011]
[287.10357666 -113.37460327]
[272.26354980 -105.71469116]
[255.61265564 -108.39891052]
[245.13497925 -97.66492462]
[234.65730286 -86.93093872]
[224.17964172 -76.19696045]
[227.47224426 -60.16230392]
[220.52224731 -45.15909958]
[205.87164307 -37.14284134]
[189.16073608 -39.42392731]
[178.94549561 -28.43989563]
[168.73027039 -17.45586586]
[158.51502991 -6.47183561]
[148.29978943 4.51219416]
[145.48110962 23.58159065]
[126.26464081 29.44565201]
[116.59201050 40.91038895]
[106.91937256 52.37512207]
[97.24674225 63.83985901]
[117.22819519 70.26903534]
[129.30584717 86.04450989]
[130.18148804 104.77016449]
[120.80963898 119.69687653]
[105.62036133 126.15325165]
[104.53383636 141.11384583]
[103.44731140 156.07444763]
[110.16468048 170.39881897]
[101.52580261 182.53221130]
[100.43928528 197.49279785]
[107.15664673 211.81716919]
[98.51776886 223.95056152]
[97.43125153 238.91116333]
[96.34472656 253.87176514]
[95.25820923 268.83236694]
[94.53350830 283.81484985]
[94.17105103 298.81045532]
[106.58187103 308.12448120]
[111.11560059 322.96447754]
[106.02892303 337.62411499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 126]
[6 125]
[9 124]
[10 123]
[11 122]
[12 121]
[14 119]
[15 118]
[17 116]
[18 115]
[19 114]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[50 109]
[51 108]
[52 107]
[53 106]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
[66 96]
[67 95]
[68 94]
[69 93]
[74 89]
[75 88]
[76 87]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
