%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCGCCUCGCGCCGCGCGCACGUGACUGCGCCCCCGGCCCCGCCCCCGGCCUGCCCCCCGCCCCCACUGGCCGCUCGGCCGCGCGCGGGUCGGCCGGCUCU\
) } def
/len { sequence length } bind def

/coor [
[136.52171326 370.97927856]
[135.17712402 356.03964233]
[133.83253479 341.10003662]
[122.95565796 327.41824341]
[130.61584473 310.75717163]
[128.82493591 295.86447144]
[127.03401947 280.97174072]
[117.83250427 269.25930786]
[123.86679840 254.63406372]
[122.07588196 239.74136353]
[120.28497314 224.84866333]
[118.49405670 209.95594788]
[116.70314789 195.06324768]
[114.91223145 180.17054749]
[113.12131500 165.27784729]
[109.13256073 158.90863037]
[111.50647736 149.91368103]
[110.16188812 134.97407532]
[41.75919342 119.38814545]
[26.76087379 119.16374969]
[11.76255131 118.93936157]
[-3.23576999 118.71497345]
[-18.23409081 118.49057770]
[-29.39935684 129.67594910]
[-45.20349503 129.60661316]
[-56.27018738 118.32370758]
[-56.03376389 102.52118683]
[-44.63449097 91.57440186]
[-28.83535385 91.97788239]
[-18.00970078 103.49225616]
[-3.01137877 103.71665192]
[11.98694229 103.94104004]
[26.98526382 104.16543579]
[41.98358536 104.38982391]
[46.30071259 98.25692749]
[34.03506470 89.62246704]
[42.66972733 77.35696411]
[54.93497086 85.99113464]
[59.25209808 79.85823822]
[53.98147583 65.81472015]
[48.71085358 51.77119446]
[43.44023132 37.72767258]
[28.44708443 33.72952652]
[18.69358635 21.66101837]
[17.93015671 6.16273403]
[26.45034790 -6.80591869]
[40.97797394 -12.25822830]
[55.92686844 -8.09767056]
[65.54887390 4.07593489]
[66.14412689 19.58158875]
[57.48375320 32.45705032]
[62.75437546 46.50057220]
[68.02500153 60.54409790]
[73.29562378 74.58761597]
[80.78807068 74.92410278]
[103.26541138 75.93356323]
[109.77366638 62.41902924]
[105.85349274 46.86230469]
[115.68628693 34.18572617]
[131.72917175 34.11368179]
[141.67543030 46.70143509]
[137.89512634 62.29274368]
[123.28820038 68.92728424]
[116.77994537 82.44181824]
[121.00484467 88.63861084]
[133.19558716 79.89871979]
[142.61317444 68.22356415]
[156.69898987 73.38007355]
[156.35284424 88.37607574]
[142.04415894 92.87718964]
[129.45465088 101.03219604]
[133.67955017 107.22898102]
[148.63760376 106.10803223]
[163.59565735 104.98708344]
[178.55371094 103.86612701]
[191.79115295 94.18612671]
[206.68165588 101.05669403]
[207.90716553 117.40998840]
[194.20698547 126.42313385]
[179.67466736 118.82418823]
[164.71661377 119.94513702]
[149.75856018 121.06608582]
[134.80049133 122.18704224]
[125.10150146 133.62948608]
[126.44609070 148.56909180]
[128.01402283 163.48692322]
[129.80493164 178.37962341]
[131.59585571 193.27233887]
[133.38676453 208.16503906]
[135.17767334 223.05773926]
[136.96858215 237.95043945]
[138.75950623 252.84315491]
[148.08911133 265.62081909]
[141.92672729 279.18084717]
[143.71763611 294.07354736]
[145.50854492 308.96624756]
[155.21725464 317.61950684]
[156.32211304 330.17321777]
[148.77215576 339.75546265]
[150.11674500 354.69506836]
[151.46133423 369.63467407]
[161.33827209 382.72583008]
[154.69122314 397.71743774]
[138.35809326 399.18743896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[5 96]
[6 95]
[7 94]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[14 87]
[15 86]
[17 85]
[18 84]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[39 54]
[40 53]
[41 52]
[42 51]
[56 64]
[57 63]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
