%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCGCAUGCGCGCUUCCUUGCGCGAGCCGGGCUGUCGGGUGUGUUUUGCUCUCCAGCCUCCGUCGUCUCUGCAGCACUCCGGGUUCUCCUCCAGAGCGCUAGUCCCAGGAGCUCGGA\
) } def
/len { sequence length } bind def

/coor [
[128.91760254 143.11521912]
[117.03699493 152.27224731]
[102.03702545 152.24076843]
[90.19494629 143.03396606]
[86.46647644 128.50473022]
[92.41276550 114.73239136]
[80.51246643 123.86380768]
[74.27422333 138.40322876]
[59.46683121 140.01269531]
[47.56653214 149.14411926]
[35.66622925 158.27554321]
[23.76593018 167.40695190]
[11.86563110 176.53837585]
[-0.03466920 185.66979980]
[-1.84879470 201.36962891]
[-14.28475952 211.12269592]
[-29.96452713 209.14268494]
[-39.58556747 196.60429382]
[-37.43989182 180.94633484]
[-24.80048752 171.45840454]
[-9.16609097 173.76950073]
[2.73420954 164.63807678]
[14.63451004 155.50665283]
[26.53480911 146.37524414]
[38.43510818 137.24382019]
[50.33541107 128.11239624]
[55.72246170 114.22611237]
[71.38105011 111.96350861]
[83.28134918 102.83208466]
[85.71354675 98.98353577]
[88.86833954 96.43591309]
[78.83138275 85.28873444]
[68.79442596 74.14156342]
[58.75746536 62.99439240]
[48.72050476 51.84722137]
[38.68354797 40.70004654]
[23.13780022 39.71640396]
[13.11769295 28.26860428]
[14.15125084 13.45417404]
[4.11429214 2.30700135]
[-5.92266703 -8.84017086]
[-15.95962620 -19.98734283]
[-25.99658585 -31.13451576]
[-41.87792206 -33.40666580]
[-49.87876892 -47.31227493]
[-43.86156082 -62.18415451]
[-28.44218254 -66.61386871]
[-15.44906330 -57.20331573]
[-14.84941292 -41.17147446]
[-4.81245375 -30.02430153]
[5.22450542 -18.87713051]
[15.26146412 -7.72995758]
[25.29842377 3.41721463]
[40.13973618 3.93784785]
[50.47743607 15.09968567]
[49.83071899 30.66308784]
[59.86767578 41.81026077]
[69.90464020 52.95743179]
[79.94159698 64.10460663]
[89.97855377 75.25177765]
[100.01551056 86.39894867]
[113.71869659 92.50000000]
[128.71868896 92.50000000]
[143.71868896 92.50000000]
[150.42211914 82.50440216]
[161.03717041 77.09342194]
[172.82293701 77.53235626]
[182.79983521 83.59267426]
[188.50276184 93.63955688]
[203.48220825 94.42459106]
[218.46165466 95.20963287]
[233.44108582 95.99467468]
[248.44108582 95.99467468]
[263.42053223 95.20963287]
[278.38842773 94.22858429]
[293.34216309 93.05169678]
[308.29592896 91.87480927]
[321.44650269 83.07861328]
[334.74160767 89.79349518]
[349.69537354 88.61660767]
[364.64913940 87.43972015]
[377.79968262 78.64352417]
[391.09478760 85.35839844]
[406.04855347 84.18151093]
[421.00231934 83.00463104]
[431.07449341 70.82569122]
[446.81610107 69.41918945]
[458.88784790 79.61958313]
[460.12783813 95.37515259]
[449.80038452 107.33840179]
[434.03259277 108.41174316]
[422.17919922 97.95838928]
[407.22543335 99.13527679]
[392.27166748 100.31216431]
[380.19070435 109.02417755]
[365.82601929 102.39347839]
[350.87225342 103.57036591]
[335.91848755 104.74725342]
[323.83752441 113.45927429]
[309.47283936 106.82857513]
[294.51907349 108.00545502]
[279.56530762 109.18234253]
[273.06402588 112.88957977]
[264.20556641 110.18907166]
[249.22613525 110.97411346]
[247.22262573 113.10034180]
[244.20455933 114.50914001]
[240.46093750 114.78965759]
[236.43118286 113.65117645]
[232.65605164 110.97411346]
[217.67660522 110.18907166]
[202.69715881 109.40403748]
[187.71772766 108.61899567]
[174.99842834 121.65868378]
[156.46875000 121.38067627]
[143.71868896 107.50000000]
[128.71868896 107.50000000]
[113.71869659 107.50000000]
[126.81943512 114.80552673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[62 118]
[63 117]
[64 116]
[69 113]
[70 112]
[71 111]
[72 110]
[73 105]
[74 104]
[75 102]
[76 101]
[77 100]
[79 98]
[80 97]
[81 96]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
