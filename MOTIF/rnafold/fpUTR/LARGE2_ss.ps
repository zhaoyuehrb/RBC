%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAAACAACUUCAACUUUCCAUGAGUGCUAGCCAGCCCUGGGAGGCUCCGCUGCCAGAAGGAACGUCAAGGGGCCUGCGAUGGAGCCUGCAGCCCCGGGUCGCGUCCCUCCCUGAGCGCCCCCGUCGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[-40.59748459 281.29809570]
[-50.90311432 280.62228394]
[-61.26189804 291.47103882]
[-71.62068176 302.31982422]
[-81.97946167 313.16857910]
[-67.03866577 314.49996948]
[-57.25269699 325.86813354]
[-58.15859985 340.84075928]
[-69.24380493 350.94610596]
[-84.23612976 350.46643066]
[-94.65270233 339.67315674]
[-94.59976196 324.67349243]
[-106.35803223 333.98709106]
[-118.11630249 343.30068970]
[-129.87457275 352.61428833]
[-129.09503174 368.11175537]
[-137.60174561 381.08926392]
[-152.12370300 386.55667114]
[-167.07690430 382.41165161]
[-176.71156311 370.24804688]
[-177.32293701 354.74304199]
[-168.67594910 341.85858154]
[-154.09553528 336.54904175]
[-139.18817139 340.85601807]
[-127.42990112 331.54241943]
[-115.67163086 322.22882080]
[-103.91336060 312.91522217]
[-92.82822418 302.80978394]
[-82.46944427 291.96102905]
[-72.11065674 281.11227417]
[-61.75187683 270.26351929]
[-58.66937637 251.22792053]
[-39.36125946 245.64482117]
[-29.51456261 234.32923889]
[-19.66786766 223.01364136]
[-17.63180923 215.83847046]
[-9.46068001 211.55380249]
[0.64475477 200.46865845]
[10.75018978 189.38352966]
[13.52748966 172.09452820]
[31.04765701 166.56329346]
[40.89435196 155.24769592]
[50.74104691 143.93209839]
[60.58774567 132.61651611]
[62.62380219 125.44134521]
[70.79492950 121.15666962]
[80.90036774 110.07153320]
[91.00579834 98.98639679]
[91.36168671 95.04518127]
[93.49816895 91.29420471]
[97.28247833 88.54486084]
[102.21554565 87.51467133]
[113.06430817 77.15589142]
[123.91307068 66.79711151]
[126.18305969 60.43273926]
[130.68437195 56.78065109]
[135.51028442 56.22484589]
[146.82588196 46.37815094]
[158.14146423 36.53145599]
[163.67269897 19.01128769]
[180.96171570 16.23398781]
[192.04684448 6.12855339]
[203.13197327 -3.97688150]
[208.11784363 -18.99193192]
[222.73599243 -21.84830475]
[233.82113647 -31.95373917]
[244.90626526 -42.05917358]
[255.99139404 -52.16460800]
[253.41723633 -70.03712463]
[261.95095825 -85.77295685]
[278.05133057 -93.23317719]
[295.26794434 -89.63435364]
[305.87454224 -100.24095917]
[316.48114014 -110.84755707]
[327.08773804 -121.45416260]
[337.69433594 -132.06076050]
[341.59707642 -140.42105103]
[348.67056274 -142.78631592]
[359.51931763 -153.14509583]
[370.36807251 -163.50387573]
[381.21682739 -173.86265564]
[379.01071167 -189.22210693]
[386.28372192 -202.92915344]
[400.23925781 -209.71315002]
[415.51110840 -206.96551514]
[426.22698975 -195.74278259]
[428.26638794 -180.36030579]
[420.84509277 -166.73297119]
[406.81680298 -160.10075378]
[391.57562256 -163.01390076]
[380.72686768 -152.65512085]
[369.87811279 -142.29634094]
[359.02932739 -131.93754578]
[348.30093384 -121.45416260]
[337.69433594 -110.84755707]
[327.08773804 -100.24095917]
[316.48114014 -89.63435364]
[305.87454224 -79.02775574]
[309.54791260 -67.35158539]
[307.86334229 -55.15448380]
[301.08319092 -44.78974152]
[290.45898438 -38.28386307]
[278.00076294 -36.94046402]
[266.09683228 -41.07947540]
[255.01170349 -30.97404099]
[243.92655945 -20.86860657]
[232.84143066 -10.76317120]
[228.64845276 3.52907038]
[213.23741150 7.10825253]
[202.15228271 17.21368790]
[191.06715393 27.31912231]
[190.17561340 39.43907547]
[180.94451904 47.94835663]
[167.98815918 47.84704590]
[156.67257690 57.69374084]
[145.35697937 67.54043579]
[134.27185059 77.64587402]
[123.42308807 88.00465393]
[112.57432556 98.36343384]
[102.09093475 109.09183502]
[91.98549652 120.17696381]
[81.88006592 131.26210022]
[71.90333557 142.46321106]
[62.05664062 153.77879333]
[52.20994568 165.09439087]
[42.36324692 176.40998840]
[42.46455765 189.36633301]
[33.95527649 198.59742737]
[21.83532333 199.48896790]
[11.72988892 210.57409668]
[1.62445390 221.65922546]
[-8.35227680 232.86033630]
[-18.19897270 244.17593384]
[-28.04566765 255.49151611]
[-26.66154671 266.39389038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[12 27]
[13 26]
[14 25]
[15 24]
[33 134]
[34 133]
[35 132]
[37 131]
[38 130]
[39 129]
[41 126]
[42 125]
[43 124]
[44 123]
[46 122]
[47 121]
[48 120]
[52 119]
[53 118]
[54 117]
[57 116]
[58 115]
[59 114]
[61 111]
[62 110]
[63 109]
[65 107]
[66 106]
[67 105]
[68 104]
[72 98]
[73 97]
[74 96]
[75 95]
[76 94]
[78 93]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
