%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCACUCGGCGGGUCGGUGCCGCCGGGUCCCAGGUGCCCGCUACUUCCCAGAACCUCCGCCUCCCGCUCCGGGCCCUCGAACCAGCGCGGACACCACA\
) } def
/len { sequence length } bind def

/coor [
[-33.92026138 242.34672546]
[-43.21313095 247.28488159]
[-53.46416092 249.58609009]
[-63.94152832 249.09544373]
[-73.89974213 245.85699463]
[-82.63265228 240.11001587]
[-89.52356720 232.27130127]
[-103.33715057 238.11808777]
[-117.15073395 243.96487427]
[-130.96430969 249.81166077]
[-144.77789307 255.65844727]
[-158.59147644 261.50524902]
[-172.40505981 267.35202026]
[-186.21864319 273.19882202]
[-200.03222656 279.04559326]
[-204.44628906 294.04727173]
[-217.49908447 302.65881348]
[-233.02748108 300.81411743]
[-243.69944763 289.38418579]
[-244.47599792 273.76589966]
[-234.99049377 261.33374023]
[-219.72166443 257.95776367]
[-205.87901306 265.23202515]
[-192.06542969 259.38522339]
[-178.25184631 253.53845215]
[-164.43826294 247.69166565]
[-150.62467957 241.84486389]
[-136.81109619 235.99807739]
[-122.99752045 230.15129089]
[-109.18393707 224.30450439]
[-95.37035370 218.45771790]
[-94.50964355 198.53962708]
[-83.91434479 181.56578064]
[-66.27078247 171.97476196]
[-46.11915207 172.31599426]
[-28.68525124 182.57250977]
[-16.18121529 174.28703308]
[-3.67717934 166.00155640]
[8.82685661 157.71607971]
[21.20181847 149.23902893]
[33.44477081 140.57243347]
[45.55281448 131.71830750]
[57.52307129 122.67879486]
[69.49333191 113.63927460]
[81.46359253 104.59975433]
[83.56930542 90.26406097]
[95.13219452 81.53217316]
[109.49689484 83.42998505]
[121.46714783 74.39046478]
[133.43740845 65.35094452]
[136.03469849 52.60126114]
[146.33663940 45.33207703]
[158.42082214 47.04670334]
[170.66377258 38.38009262]
[173.45600891 23.05556488]
[185.99555969 14.44079876]
[200.58795166 17.19720650]
[212.83090210 8.53059959]
[225.07385254 -0.13600759]
[227.64627075 -17.35466003]
[241.55215454 -27.26218033]
[258.00720215 -24.19264221]
[269.97744751 -33.23216248]
[273.60906982 -48.85877228]
[288.15213013 -55.63215256]
[302.45046997 -48.35634613]
[305.53558350 -32.61272812]
[295.04089355 -20.47845459]
[279.01696777 -21.26190186]
[267.04672241 -12.22238255]
[267.04556274 0.76345694]
[259.40713501 11.50618553]
[246.77233887 15.90053177]
[233.74046326 12.10694599]
[221.49751282 20.77355385]
[209.25456238 29.44016075]
[207.00442505 44.11914444]
[194.71179199 53.08272171]
[179.33038330 50.62304688]
[167.08743286 59.28965378]
[160.72575378 75.56482697]
[142.47692871 77.32120514]
[130.50666809 86.36072540]
[118.53640747 95.40024567]
[116.43069458 109.73593903]
[104.86780548 118.46782684]
[90.50310516 116.57001495]
[78.53285217 125.60953522]
[66.56259155 134.64904785]
[54.59233475 143.68856812]
[49.51742554 151.49716187]
[42.11138153 152.81538391]
[29.86842537 161.48199463]
[24.55545998 169.13058472]
[17.11233139 170.22012329]
[4.60829544 178.50558472]
[-7.89574051 186.79106140]
[-20.39977646 195.07653809]
[-17.71578407 205.34136963]
[-17.84152794 215.93325806]
[-20.75890923 226.09822083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[36 98]
[37 97]
[38 96]
[39 95]
[40 93]
[41 92]
[42 90]
[43 89]
[44 88]
[45 87]
[48 84]
[49 83]
[50 82]
[53 80]
[54 79]
[57 76]
[58 75]
[59 74]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
