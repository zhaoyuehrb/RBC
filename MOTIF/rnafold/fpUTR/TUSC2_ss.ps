%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUCCGUGGAGACAGCCGAGCCUGCGGAAGGCGGCGGCGGCGGCACCUGCGAUCAGCGGCUGGGGCAGGUUAUGGUAGUGCGGACUGCGGUGUGAGCAGAGCGGCCACGGGGCCCGCCAUGCGCCGGCGGCCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[97.67700195 129.20265198]
[90.29753113 130.54182434]
[84.71312714 144.46354675]
[79.12872314 158.38526917]
[73.54431915 172.30700684]
[67.95990753 186.22872925]
[70.81707764 202.37705994]
[58.08846283 212.71699524]
[42.86816788 206.61169434]
[40.81352997 190.34176636]
[54.03818512 180.64431763]
[59.62259293 166.72259521]
[65.20699310 152.80087280]
[70.79140472 138.87915039]
[76.37580872 124.95742035]
[72.00733948 110.43953705]
[74.73747253 97.49309540]
[60.37121201 101.80709076]
[46.00495148 106.12107849]
[31.63868904 110.43506622]
[19.37955284 124.12403870]
[2.47975922 119.52745056]
[-11.78608894 124.16270447]
[-26.05193710 128.79795837]
[-40.31778336 133.43321228]
[-48.85301971 147.01736450]
[-64.81066132 148.67057800]
[-75.94937897 137.12464905]
[-73.72449493 121.23662567]
[-59.84275436 113.19443512]
[-44.95303726 119.16736603]
[-30.68719101 114.53211212]
[-16.42134285 109.89685822]
[-2.15549564 105.26159668]
[3.65118074 94.59102631]
[15.56403637 90.64272308]
[27.32469940 96.06880951]
[41.69095993 91.75481415]
[56.05722427 87.44082642]
[70.42348480 83.12683868]
[80.54354095 72.05505371]
[83.55238342 57.35992050]
[86.56122589 42.66479111]
[81.74935150 27.59307861]
[91.88235474 16.67650414]
[94.89118958 1.98137391]
[92.87769318 -12.88287258]
[86.06783295 -26.24797058]
[79.25798035 -39.61306763]
[72.44812012 -52.97816467]
[65.63825989 -66.34326172]
[58.82840729 -79.70835876]
[46.77910614 -84.45914459]
[41.40039444 -95.79822540]
[45.10025024 -107.36929321]
[38.59199142 -120.88382721]
[32.08373642 -134.39836121]
[25.57547951 -147.91288757]
[13.25557423 -159.56004333]
[21.03706741 -174.62274170]
[37.66523361 -171.31512451]
[39.09001160 -154.42114258]
[45.59827042 -140.90661621]
[52.10652542 -127.39208221]
[58.61478043 -113.87754822]
[73.61598969 -104.83899689]
[72.19350433 -86.51821899]
[79.00336456 -73.15312195]
[85.81321716 -59.78802490]
[92.62307739 -46.42292404]
[99.43293762 -33.05782700]
[106.24279022 -19.69272995]
[121.20881653 -18.68369484]
[129.75108337 -31.01372528]
[138.29335022 -43.34375763]
[139.79225159 -59.09379959]
[153.40031433 -65.14936829]
[161.94258118 -77.47940063]
[170.48484802 -89.80943298]
[179.02711487 -102.13946533]
[187.56938171 -114.46949768]
[188.37719727 -130.84873962]
[203.08753967 -138.09704590]
[216.56767273 -128.75798035]
[214.95039368 -112.43878174]
[199.89941406 -105.92723083]
[191.35714722 -93.59719849]
[182.81488037 -81.26716614]
[174.27261353 -68.93713379]
[165.73034668 -56.60710526]
[164.84243774 -41.73898697]
[150.62338257 -34.80149078]
[142.08111572 -22.47145844]
[133.53884888 -10.14142799]
[147.92901611 -5.90786695]
[157.72546387 5.45125389]
[159.79872131 20.30728149]
[153.48651123 33.91448212]
[140.80523682 41.92605591]
[125.80592346 41.78272247]
[113.28007507 33.53026199]
[107.22904968 19.80491638]
[109.58632660 4.99021530]
[106.57748413 19.68534660]
[111.60456848 33.70596313]
[101.25635529 45.67362976]
[98.24751282 60.36876297]
[95.23867798 75.06389618]
[123.73240662 81.85210419]
[130.88720703 115.06506348]
[141.00726318 126.13684845]
[151.12731934 137.20863342]
[161.24737549 148.28041077]
[171.36743164 159.35220337]
[181.48748779 170.42398071]
[191.60755920 181.49577332]
[199.77812195 185.76554871]
[201.82704163 192.93138123]
[211.69612122 204.22744751]
[221.56520081 215.52352905]
[237.19502258 215.03074646]
[249.45286560 224.74049377]
[252.55096436 240.06811523]
[245.02648926 253.77636719]
[230.43226624 259.39263916]
[215.65924072 254.26510620]
[207.68276978 240.81481934]
[210.26913452 225.39260864]
[200.40003967 214.09652710]
[190.53096008 202.80046082]
[180.53576660 191.61582947]
[170.41571045 180.54403687]
[160.29565430 169.47225952]
[150.17559814 158.40046692]
[140.05554199 147.32868958]
[129.93547058 136.25689697]
[119.81542206 125.18511963]
[112.43594360 126.52429199]
[115.11407471 141.28327942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 40]
[18 39]
[19 38]
[20 37]
[22 34]
[23 33]
[24 32]
[25 31]
[41 108]
[42 107]
[43 106]
[45 104]
[46 103]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[55 65]
[56 64]
[57 63]
[58 62]
[73 94]
[74 93]
[75 92]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[110 137]
[111 136]
[112 135]
[113 134]
[114 133]
[115 132]
[116 131]
[118 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
