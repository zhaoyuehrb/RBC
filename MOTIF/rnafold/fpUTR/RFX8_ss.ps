%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACUCCAACGCUCAAGCAAGUCAAGGACACCCACGGACUCAACACCGCGACCAGAUUGGAAAAGGUGUUGGUCGACAACUUCUGCAUUUGCGAAGAGUGCAGCGUCCCUCGCUGUCUC\
) } def
/len { sequence length } bind def

/coor [
[90.90584564 353.70736694]
[78.53052521 345.23083496]
[69.94962311 332.92767334]
[66.27065277 318.38583374]
[67.96846771 303.48223877]
[74.82392883 290.14047241]
[85.95220947 280.08255005]
[99.91697693 274.60668945]
[114.91580963 274.41961670]
[129.01281738 279.54547119]
[140.38876343 289.32302856]
[136.91549683 274.73071289]
[133.44221497 260.13836670]
[129.96894836 245.54602051]
[126.49568176 230.95367432]
[111.84004974 222.81663513]
[107.46134949 206.28761292]
[116.51528168 191.38737488]
[112.66435242 176.89012146]
[108.81342316 162.39288330]
[104.96250153 147.89562988]
[101.11157227 133.39837646]
[97.26064301 118.90111542]
[84.78105927 111.53863525]
[81.06118011 97.53474426]
[88.24210358 84.94981384]
[84.39117432 70.45256042]
[80.54024506 55.95530701]
[76.68932343 41.45805359]
[63.16298676 40.39952469]
[50.65523148 35.20176697]
[40.39728546 26.39185905]
[33.39410782 14.85166836]
[30.32596016 1.72960544]
[31.48233795 -11.67365742]
[36.73472214 -24.03410912]
[45.55067825 -34.13519287]
[57.04781723 -40.98753738]
[53.95454407 -55.66512680]
[50.86126709 -70.34271240]
[45.97472763 -78.20664978]
[47.88343430 -85.44130707]
[45.17224121 -100.19425201]
[42.46104813 -114.94719696]
[39.74985886 -129.70014954]
[37.03866577 -144.45309448]
[34.32747269 -159.20603943]
[31.61628151 -173.95898438]
[17.24076080 -179.18312073]
[7.47473526 -190.82449341]
[4.86427593 -205.69230652]
[10.01182747 -219.77630615]
[21.44088745 -229.32838440]
[18.72969437 -244.08132935]
[16.01850319 -258.83425903]
[7.20888567 -273.31967163]
[18.68945122 -285.79498291]
[33.85534286 -278.21658325]
[30.77145004 -261.54547119]
[33.48264313 -246.79251099]
[36.19383240 -232.03956604]
[50.27227020 -227.17507935]
[60.09088516 -215.84146118]
[62.93706894 -201.01696777]
[57.94809341 -186.66403198]
[46.36922836 -176.67018127]
[49.08042145 -161.91723633]
[51.79161072 -147.16429138]
[54.50280380 -132.41134644]
[57.21399689 -117.65839386]
[59.92518997 -102.90544891]
[62.63637924 -88.15249634]
[65.53885651 -73.43598938]
[68.63213348 -58.75839996]
[71.72541046 -44.08081055]
[88.06185913 -41.45165634]
[102.19327545 -32.77397919]
[111.97066498 -19.33480263]
[115.89476013 -3.14768958]
[113.34584808 13.34895134]
[104.68147278 27.65917206]
[91.18657684 37.60712433]
[95.03749847 52.10437775]
[98.88842773 66.60163116]
[102.73935699 81.09888458]
[115.21894073 88.46136475]
[118.93881989 102.46525574]
[111.75789642 115.05018616]
[115.60882568 129.54743958]
[119.45975494 144.04469299]
[123.31067657 158.54194641]
[127.16160583 173.03919983]
[131.01254272 187.53645325]
[143.42382812 192.95195007]
[150.31579590 204.38069153]
[149.34260559 217.49530029]
[141.08801270 227.48040771]
[144.56129456 242.07273865]
[148.03456116 256.66510010]
[151.50782776 271.25741577]
[154.98110962 285.84976196]
[161.21232605 299.49423218]
[169.96597290 311.67510986]
[178.71961975 323.85598755]
[187.47326660 336.03686523]
[196.22691345 348.21774292]
[211.76318359 352.21823120]
[218.19042969 366.91754150]
[210.57820129 381.03964233]
[194.76597595 383.75125122]
[182.88351440 372.97225952]
[184.04603577 356.97137451]
[175.29238892 344.79052734]
[166.53874207 332.60964966]
[157.78509521 320.42877197]
[149.03146362 308.24789429]
[148.97125244 323.24777222]
[143.61370850 337.25836182]
[133.65029907 348.47131348]
[120.36699677 355.43939209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 101]
[12 100]
[13 99]
[14 98]
[15 97]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[26 85]
[27 84]
[28 83]
[29 82]
[38 75]
[39 74]
[40 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[53 61]
[54 60]
[55 59]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
