%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAACAAACAUUGAUUGCUUUCCUAUCUUACAUUUUUUUAGGAGUGCGAAAUAAGUGAGUCAUC\
) } def
/len { sequence length } bind def

/coor [
[84.97680664 257.32998657]
[70.34622955 253.42808533]
[57.77671051 244.98498535]
[48.63170624 232.91653442]
[43.90319061 218.53181458]
[44.10408401 203.39120483]
[49.21258926 189.13700867]
[58.67457581 177.31544495]
[71.46367645 169.20880127]
[86.19263458 165.69645691]
[87.61847687 150.76437378]
[89.04431915 135.83229065]
[90.47015381 120.90021515]
[78.41648102 107.86058807]
[79.26141357 90.12335968]
[92.50000000 78.28855133]
[92.50000000 63.28855133]
[92.50000000 48.28855133]
[92.50000000 33.28855133]
[84.76270294 19.48837852]
[92.50000000 6.76110744]
[92.50000000 -8.23889256]
[92.50000000 -23.23889351]
[92.50000000 -38.23889160]
[92.50000000 -53.23889160]
[92.50000000 -68.23889160]
[78.57057953 -74.39447784]
[68.35394287 -85.68784332]
[63.62017059 -100.16234589]
[65.18942261 -115.31019592]
[72.78982544 -128.50692749]
[85.10454559 -137.46614075]
[100.00000000 -140.63558960]
[114.89545441 -137.46614075]
[127.21017456 -128.50692749]
[134.81057739 -115.31019592]
[136.37983704 -100.16234589]
[131.64605713 -85.68784332]
[121.42942047 -74.39447784]
[107.50000000 -68.23889160]
[107.50000000 -53.23889160]
[107.50000000 -38.23889160]
[107.50000000 -23.23889351]
[107.50000000 -8.23889256]
[107.50000000 6.76110744]
[115.23729706 19.48837852]
[107.50000000 33.28855133]
[107.50000000 48.28855133]
[107.50000000 63.28855133]
[107.50000000 78.28855133]
[117.21043396 84.78691864]
[122.46782684 95.22153473]
[121.91186523 106.89253235]
[115.68640900 116.78015137]
[105.40223694 122.32605743]
[103.97639465 137.25813293]
[102.55055237 152.19021606]
[101.12471008 167.12229919]
[114.92277527 173.35864258]
[125.94657898 183.73913574]
[133.00032043 197.13777161]
[135.31889343 212.10116577]
[132.65077209 227.00617981]
[125.28538513 240.23606873]
[114.02166748 250.35572815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 58]
[11 57]
[12 56]
[13 55]
[16 50]
[17 49]
[18 48]
[19 47]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
