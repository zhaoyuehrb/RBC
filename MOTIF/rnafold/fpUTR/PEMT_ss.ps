%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCUCUAUAGGUCCGGUUCCGGGGGCGCGUGGCUGCAGCGGGGCCCGCGUGGUGCCUCCUGAGGCGGCCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[-25.72773552 233.51687622]
[-40.53335953 232.36401367]
[-51.76102066 242.31085205]
[-62.98868179 252.25769043]
[-74.21634674 262.20452881]
[-85.24142456 272.37545776]
[-96.05946350 282.76629639]
[-97.81880188 298.71261597]
[-111.45944214 307.15728760]
[-126.51744843 301.62231445]
[-131.44161987 286.35363770]
[-122.45453644 273.06408691]
[-106.45033264 271.94827271]
[-95.63229370 261.55740356]
[-92.91609955 254.45747375]
[-84.16318512 250.97686768]
[-72.93552399 241.03002930]
[-61.70786285 231.08319092]
[-50.48020172 221.13635254]
[-49.84003448 206.29971313]
[-38.59528351 196.05226135]
[-23.03759575 196.82432556]
[-11.80993462 186.87748718]
[-0.58227330 176.93064880]
[10.64538765 166.98381042]
[21.87304878 157.03695679]
[33.10071182 147.09011841]
[44.32837296 137.14328003]
[55.55603409 127.19644165]
[58.55591202 120.21163940]
[67.44187927 117.08629608]
[79.06095123 107.59961700]
[90.68002319 98.11293793]
[92.44698334 92.85176086]
[97.15415955 89.07507324]
[103.63737488 88.37612152]
[115.98213196 79.85514832]
[121.45631409 72.18954468]
[128.99995422 71.25139618]
[141.67781067 63.23441315]
[154.35566711 55.21742630]
[160.13406372 47.77845764]
[167.70936584 47.14482880]
[180.69975281 39.64482880]
[193.69012451 32.14482880]
[206.68051147 24.64482880]
[219.67089844 17.14482880]
[232.50761414 9.38476086]
[245.18547058 1.36777329]
[252.32327271 -13.39649963]
[268.69598389 -14.32709599]
[277.46078491 -0.46669954]
[269.60116577 13.92630291]
[253.20245361 14.04562473]
[240.52459717 22.06261253]
[236.44313049 28.47574806]
[227.17089844 30.13520813]
[214.18051147 37.63520813]
[201.19012451 45.13520813]
[188.19975281 52.63520813]
[175.20936584 60.13520813]
[162.37265015 67.89527893]
[149.69479370 75.91226196]
[137.01695251 83.92925262]
[124.50310516 92.19990540]
[112.15834808 100.72087860]
[100.16670990 109.73200989]
[88.54763031 119.21869659]
[76.92855835 128.70536804]
[65.50287628 138.42410278]
[54.27521133 148.37094116]
[43.04755020 158.31777954]
[31.81988907 168.26461792]
[20.59222794 178.21147156]
[9.36456680 188.15830994]
[-1.86309469 198.10514832]
[-13.09075546 208.05198669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 14]
[7 13]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[31 69]
[32 68]
[33 67]
[36 66]
[37 65]
[39 64]
[40 63]
[41 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
