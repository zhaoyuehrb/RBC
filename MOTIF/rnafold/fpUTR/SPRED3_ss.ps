%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUGGAGGGGAGAUGAGGGUUGAGGGAACAUUCCAUGGGAGAGCAGGGUUUGAGCUCAUGACUGUGUUGUCCCUGUCCUUCCCCCCACCUCCUGCAGGUAC\
) } def
/len { sequence length } bind def

/coor [
[71.65634155 461.67492676]
[66.48119354 447.04626465]
[70.92518616 432.17916870]
[83.27951050 422.79031372]
[82.82646179 407.79718018]
[82.37342072 392.80401611]
[74.25524902 380.31622314]
[81.57221222 366.28866577]
[81.11916351 351.29550171]
[80.66612244 336.30236816]
[80.21307373 321.30920410]
[79.76002502 306.31604004]
[71.57714081 299.86102295]
[68.31699371 289.72845459]
[71.32280731 279.28668213]
[79.81040192 272.15270996]
[80.26345062 257.15954590]
[77.26948547 250.26396179]
[80.96340942 241.72230530]
[81.86908722 226.74967957]
[82.77476501 211.77703857]
[74.94607544 202.41860962]
[75.68414307 189.83598328]
[85.13853455 180.90260315]
[86.49601746 165.96414185]
[87.85350037 151.02569580]
[89.21098328 136.08724976]
[90.56846619 121.14880371]
[91.92594910 106.21035767]
[89.43035889 98.39207458]
[93.55670929 90.84354401]
[95.36476135 75.95291138]
[82.33486176 83.38404846]
[67.79577637 79.69419098]
[59.88643646 66.94890594]
[63.03445053 52.28295898]
[75.47757721 43.90629196]
[90.25020599 46.50813293]
[99.08279419 58.63251114]
[103.54534149 44.31169891]
[108.00788879 29.99088669]
[112.47043610 15.67007351]
[109.18906403 0.19289081]
[120.36242676 -9.65623093]
[124.82497406 -23.97704315]
[129.28752136 -38.29785538]
[133.75006104 -52.61867142]
[130.46870422 -68.09585571]
[141.64205933 -77.94497681]
[146.10461426 -92.26578522]
[150.56715393 -106.58660126]
[155.02969360 -120.90740967]
[159.27545166 -135.29399109]
[163.30342102 -149.74305725]
[158.69691467 -165.48193359]
[170.21804810 -177.15220642]
[186.01487732 -172.74851990]
[189.83695984 -156.80099487]
[177.75248718 -145.71507263]
[173.72450256 -131.26600647]
[174.98124695 -123.85429382]
[169.35050964 -116.44487000]
[164.88796997 -102.12405396]
[160.42541504 -87.80323792]
[155.96287537 -73.48242950]
[159.56343079 -59.02956772]
[148.07087708 -48.15612411]
[143.60833740 -33.83531189]
[139.14578247 -19.51449776]
[134.68324280 -5.19368505]
[138.28379822 9.25917721]
[126.79124451 20.13261986]
[122.32870483 34.45343399]
[117.86615753 48.77424622]
[113.40361023 63.09505844]
[110.25539398 77.76096344]
[108.44734192 92.65159607]
[106.86439514 107.56784058]
[105.50691223 122.50628662]
[104.14942932 137.44473267]
[102.79194641 152.38317871]
[101.43446350 167.32162476]
[100.07698059 182.26008606]
[108.21852875 198.68966675]
[97.74739838 212.68272400]
[96.84172058 227.65534973]
[95.93604279 242.62799072]
[95.25660706 257.61257935]
[94.80355835 272.60574341]
[105.22797394 289.72845459]
[94.75318146 305.86300659]
[95.20623016 320.85617065]
[95.65927887 335.84930420]
[96.11231995 350.84246826]
[96.56536865 365.83563232]
[104.71594238 379.39581299]
[97.36657715 392.35098267]
[97.81961823 407.34411621]
[98.27266693 422.33728027]
[111.17133331 430.96304321]
[116.50486755 445.53469849]
[112.22241974 460.44912720]
[99.97067261 469.97143555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[16 89]
[17 88]
[19 87]
[20 86]
[21 85]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[31 77]
[32 76]
[39 75]
[40 74]
[41 73]
[42 72]
[44 70]
[45 69]
[46 68]
[47 67]
[49 65]
[50 64]
[51 63]
[52 62]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
