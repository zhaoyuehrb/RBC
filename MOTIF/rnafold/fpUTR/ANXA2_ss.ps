%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCAGCAUUUGGGGACGCUCUCAGCUCUCGGCGCACGGCCCAGGGUGAAAAUGUUUGCCAUUAAACUCACAUGAAGUAGGAAAUAUUUAUAUGGAUACAAAAGGCACCUGCAUGGGAUAAUGUCAAAUUUCAUAGAUACUGCUUUGUGCUUCCUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[238.34672546 51.68674088]
[224.53089905 57.52824402]
[219.67381287 68.64137268]
[208.16976929 73.60620880]
[195.99542236 69.24723816]
[182.06825256 74.81806183]
[168.14108276 80.38887787]
[154.21391296 85.95970154]
[140.28675842 91.53051758]
[126.35958862 97.10134125]
[112.43241882 102.67215729]
[100.52469635 111.79389954]
[91.51956177 123.79004669]
[82.51443481 135.78619385]
[81.08412170 152.12284851]
[66.10869598 158.80632019]
[52.99359131 148.96121216]
[55.23049927 132.71534729]
[70.51828003 126.78106689]
[79.52341461 114.78491974]
[88.52854919 102.78876495]
[80.61012268 90.04912567]
[65.86711121 92.81382751]
[51.12409592 95.57853699]
[43.21904373 100.25782776]
[36.06662369 98.25040436]
[21.27247429 100.72692108]
[6.47832441 103.20343781]
[-8.31582546 105.67995453]
[-20.64917564 115.58949280]
[-34.47922516 110.05966187]
[-49.27337265 112.53617859]
[-64.06752014 115.01269531]
[-74.51621246 127.18662262]
[-90.54297638 126.46385956]
[-99.85345459 113.39884186]
[-95.30544281 98.01394653]
[-80.38778687 92.11113739]
[-66.54403687 100.21854401]
[-51.74988937 97.74202728]
[-36.95574188 95.26551056]
[-25.68056488 85.53311157]
[-10.79234123 90.88580322]
[4.00180864 88.40928650]
[18.79595757 85.93276978]
[33.59010696 83.45625305]
[48.35939026 80.83552551]
[63.10240555 78.07081604]
[77.84541321 75.30611420]
[106.86159515 88.74498749]
[120.78876495 83.17417145]
[134.71592712 77.60335541]
[148.64309692 72.03253174]
[162.57026672 66.46171570]
[176.49743652 60.89089203]
[190.42459106 55.32007599]
[201.44152832 40.59430695]
[218.68940735 43.71242523]
[232.50521851 37.87092209]
[230.00427246 22.50621986]
[231.23867798 6.99706650]
[236.13311768 -7.76203728]
[244.40121460 -20.92084122]
[255.56242371 -31.72233582]
[268.96987915 -39.54628754]
[283.84793091 -43.94487381]
[299.33697510 -44.66828918]
[314.54312134 -41.67895126]
[328.58987427 -35.15340805]
[340.66845703 -25.47193336]
[350.08465576 -13.19636536]
[363.78384399 -19.30632591]
[377.48306274 -25.41628838]
[391.18228149 -31.52624893]
[404.88146973 -37.63621140]
[418.58068848 -43.74617386]
[432.27990723 -49.85613251]
[445.97912598 -55.96609497]
[459.67831421 -62.07605743]
[473.37753296 -68.18601990]
[475.85729980 -71.89007568]
[479.07629395 -74.33638000]
[482.53775024 -75.44718933]
[485.77197266 -75.31771851]
[488.39147949 -74.19154358]
[502.52539062 -79.21473694]
[516.65930176 -84.23793030]
[530.79321289 -89.26112366]
[535.42114258 -94.09664154]
[540.96679688 -95.60353851]
[545.57769775 -94.19281006]
[559.89685059 -98.66072845]
[574.21600342 -103.12864685]
[588.53515625 -107.59656525]
[602.85424805 -112.06448364]
[617.17340088 -116.53240204]
[618.29943848 -128.58227539]
[623.42797852 -139.50592041]
[631.93066406 -148.02033997]
[642.78436279 -153.13433838]
[654.69439697 -154.26385498]
[666.24865723 -151.29866028]
[676.08544922 -144.61250305]
[683.05364990 -135.01631165]
[697.60961914 -138.63882446]
[712.16564941 -142.26133728]
[726.72161865 -145.88386536]
[741.12524414 -150.07153320]
[755.35449219 -154.81799316]
[769.58367920 -159.56445312]
[780.05059814 -172.18890381]
[796.16949463 -169.17018127]
[801.35870361 -153.61369324]
[790.27996826 -141.52261353]
[774.33013916 -145.33522034]
[760.10095215 -140.58876038]
[745.87170410 -135.84230042]
[744.50140381 -133.34184265]
[742.03295898 -131.24810791]
[738.62170410 -129.99160767]
[734.57897949 -129.93661499]
[730.34417725 -131.32785034]
[715.78814697 -127.70533752]
[701.23211670 -124.08281708]
[686.67614746 -120.46029663]
[682.52246094 -102.87874603]
[669.99462891 -89.74555206]
[652.46594238 -84.72077179]
[634.71905518 -89.26435089]
[621.64135742 -102.21326447]
[607.32220459 -97.74534607]
[593.00305176 -93.27742767]
[578.68389893 -88.80950928]
[564.36480713 -84.34159088]
[550.04565430 -79.87367249]
[535.81640625 -75.12721252]
[521.68249512 -70.10401154]
[507.54858398 -65.08081818]
[493.41467285 -60.05762482]
[479.48748779 -54.48680496]
[465.78829956 -48.37684631]
[452.08908081 -42.26688385]
[438.38986206 -36.15692139]
[424.69064331 -30.04696083]
[410.99145508 -23.93700027]
[397.29223633 -17.82703781]
[383.59301758 -11.71707726]
[369.89382935 -5.60711575]
[356.19461060 0.50284541]
[358.96377563 14.71347332]
[358.48861694 29.19112968]
[354.78976440 43.20415497]
[348.05087280 56.04362488]
[338.60946655 67.05920410]
[326.94006348 75.69208527]
[313.63034058 81.50336456]
[299.35144043 84.19631195]
[284.82427979 83.63155365]
[270.78302002 79.83425903]
[257.93801880 72.99306488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 21]
[13 20]
[14 19]
[22 49]
[23 48]
[24 47]
[26 46]
[27 45]
[28 44]
[29 43]
[31 41]
[32 40]
[33 39]
[71 149]
[72 148]
[73 147]
[74 146]
[75 145]
[76 144]
[77 143]
[78 142]
[79 141]
[80 140]
[85 139]
[86 138]
[87 137]
[88 136]
[91 135]
[92 134]
[93 133]
[94 132]
[95 131]
[96 130]
[104 125]
[105 124]
[106 123]
[107 122]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
