%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGAGCCUUCCUGAUGUAUAUAUGCAGGUAGUGAGAAUUGAAUCGGCCCUUUGAGACAGUAAUAUAAUAAAACUCUGAUUUGGGGAGCAGCGGUUCUCCUUAUUUUUCUACUCUCUUGUGGGA\
) } def
/len { sequence length } bind def

/coor [
[172.98770142 165.48451233]
[173.34922791 144.38165283]
[160.00114441 137.53849792]
[146.65307617 130.69534302]
[133.30499268 123.85218048]
[119.95691681 117.00901794]
[106.60884094 110.16585541]
[101.96467590 124.12296295]
[85.40807343 133.21662903]
[72.41769409 140.71662903]
[64.33503723 154.31741333]
[49.44424820 153.98036194]
[36.45386887 161.48036194]
[23.46348763 168.98036194]
[10.47310638 176.48036194]
[-2.42276764 184.14172363]
[-15.22213078 191.96324158]
[-28.02149391 199.78477478]
[-35.38498688 214.43778992]
[-51.77006149 215.11708069]
[-60.32115555 201.12382507]
[-52.24163437 186.85311890]
[-35.84302139 186.98541260]
[-23.04365921 179.16387939]
[-10.24429607 171.34236145]
[-6.13229752 165.10159302]
[2.97310662 163.48997498]
[15.96348763 155.98997498]
[28.95386887 148.48997498]
[41.94424820 140.98997498]
[49.09774017 127.92564392]
[64.91769409 127.72625732]
[77.90807343 120.22625732]
[79.48569489 112.89405823]
[64.56398773 114.42459869]
[58.49746323 100.70610046]
[69.66999817 90.69738007]
[82.64094543 98.22966766]
[84.21856689 90.89746857]
[75.46240997 78.71839905]
[66.70626068 66.53932953]
[57.95010376 54.36026001]
[42.60551071 51.68047714]
[33.89901733 39.20443344]
[36.54834366 24.59222603]
[27.79218864 12.41315556]
[19.03603363 0.23408532]
[10.27987862 -11.94498444]
[-4.88244295 -18.19286728]
[-6.78428316 -34.48136139]
[6.53080797 -44.05426025]
[21.36540604 -37.06378555]
[22.45894814 -20.70113945]
[31.21510315 -8.52206993]
[39.97126007 3.65700030]
[48.72741318 15.83607006]
[63.42250061 17.97849655]
[72.47598267 30.20507050]
[70.12917328 45.60410309]
[78.88533020 57.78317261]
[87.64147949 69.96224213]
[96.39763641 82.14131165]
[91.73913574 67.88304138]
[93.49135590 52.98573685]
[101.33106232 40.19750214]
[113.81207275 31.87738228]
[128.63201904 29.56019211]
[143.05705261 33.67338181]
[154.42619324 43.45819092]
[160.64219666 57.10961533]
[160.55836487 72.10938263]
[154.19018555 85.69048309]
[142.71238708 95.34761047]
[128.24227905 99.29932404]
[113.45200348 96.81777954]
[126.80007935 103.66094208]
[140.14816284 110.50410461]
[153.49623108 117.34725952]
[166.84431458 124.19042206]
[180.19238281 131.03358459]
[192.29003906 120.37934113]
[209.46116638 117.29559326]
[226.99783325 123.99671936]
[239.39329529 139.82281494]
[254.31875610 138.32928467]
[269.24423218 136.83576965]
[284.16967773 135.34225464]
[299.09515381 133.84873962]
[314.02059937 132.35522461]
[328.94607544 130.86169434]
[341.93804932 120.85469055]
[356.99520874 127.35189056]
[358.62805176 143.66955566]
[345.15682983 153.02145386]
[330.43957520 145.78717041]
[315.51412964 147.28068542]
[300.58865356 148.77420044]
[285.66320801 150.26771545]
[270.73773193 151.76123047]
[255.81227112 153.25474548]
[240.88681030 154.74827576]
[237.29991150 161.33493042]
[252.29524231 160.96087646]
[260.11694336 173.76014709]
[252.94335938 186.93360901]
[237.94802856 187.30793762]
[230.12609863 174.50825500]
[226.53919983 181.09490967]
[233.38235474 194.44299316]
[240.22550964 207.79107666]
[247.06867981 221.13914490]
[253.91183472 234.48722839]
[260.75500488 247.83529663]
[275.87286377 252.44244385]
[283.23123169 266.42919922]
[278.46450806 281.49752808]
[264.40072632 288.70761108]
[249.38365173 283.78186035]
[242.32266235 269.64260864]
[247.40692139 254.67846680]
[240.56375122 241.33038330]
[233.72059631 227.98231506]
[226.87744141 214.63423157]
[220.03427124 201.28614807]
[213.19111633 187.93807983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[9 33]
[10 32]
[12 30]
[13 29]
[14 28]
[15 27]
[16 25]
[17 24]
[18 23]
[39 62]
[40 61]
[41 60]
[42 59]
[45 56]
[46 55]
[47 54]
[48 53]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
