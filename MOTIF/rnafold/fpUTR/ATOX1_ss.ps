%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCACUCUCGGAAGCGCAGCCGAACCCGCCCUCCGAAUCCAGAGAGGCGCUGCUGACACCGCCGCCACACCGCCGCCACACCGCCGCUGCCUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[151.16755676 111.56930542]
[136.21473694 110.38055420]
[121.26191711 109.19181061]
[106.30909729 108.00305939]
[98.50510406 110.58995819]
[90.90319824 106.53197479]
[75.99562073 104.86940002]
[61.08804321 103.20682526]
[46.18046570 101.54425812]
[31.27288818 99.88168335]
[16.34080887 98.45584106]
[1.38798714 97.26708984]
[-13.56483459 96.07833862]
[-25.52633667 106.05632782]
[-40.67369080 104.63776398]
[-50.11246109 93.17280579]
[-65.06528473 91.98405457]
[-79.43523407 98.60335541]
[-91.50929260 89.88175964]
[-106.46211243 88.69300842]
[-122.78852844 97.02227020]
[-136.90417480 86.72927094]
[-151.88719177 86.01554871]
[-166.20745850 94.00691223]
[-180.14770508 85.36969757]
[-179.36740112 68.98912811]
[-164.66925049 61.71612549]
[-151.17346191 71.03253174]
[-136.19044495 71.74626160]
[-126.92328644 63.79376602]
[-114.32209778 64.38104248]
[-105.27336121 73.74018860]
[-90.32054138 74.92893982]
[-77.02011871 68.22460938]
[-63.87653351 77.03123474]
[-48.92370987 78.21998596]
[-37.79202271 68.39038086]
[-22.61080170 69.38293457]
[-12.37608528 81.12551880]
[2.57673645 82.31427002]
[17.52955818 83.50302124]
[24.57562447 80.84645081]
[32.93545914 84.97410583]
[47.84303665 86.63668060]
[62.75061417 88.29924774]
[77.65818787 89.96182251]
[92.56576538 91.62439728]
[107.49784851 93.05023956]
[122.45066833 94.23898315]
[137.40348816 95.42773438]
[152.35630798 96.61648560]
[168.68272400 88.28722382]
[182.79837036 98.58022308]
[197.78138733 99.29394531]
[212.76438904 100.00767517]
[227.74740601 100.72140503]
[242.73040771 101.43513489]
[251.08589172 88.62368011]
[264.64263916 81.75991821]
[279.71459961 82.59786224]
[292.25958252 90.81246948]
[298.96325684 104.11383820]
[313.94625854 104.82756042]
[328.09896851 97.75566864]
[340.44366455 106.08979034]
[355.42666626 106.80352020]
[360.99942017 92.72434235]
[370.84362793 81.21910858]
[383.89144897 73.53581238]
[398.72756958 70.50788879]
[413.74267578 72.46377563]
[427.30801392 79.19132233]
[437.95217896 89.96076202]
[444.52050781 103.60391998]
[446.30053711 118.64087677]
[443.09921265 133.44055176]
[435.26376343 146.39756775]
[423.64410400 156.10646057]
[409.50067139 161.51406860]
[394.36764526 162.03381348]
[379.88653564 157.60934448]
[367.62814331 148.72056580]
[358.92214966 136.33168030]
[354.71295166 121.78652954]
[339.72994995 121.07279968]
[326.64892578 128.19575500]
[313.23254395 119.81057739]
[298.24954224 119.09684753]
[290.31182861 131.70074463]
[277.04281616 138.68569946]
[261.95944214 138.08715820]
[249.11651611 129.96582031]
[242.01669312 116.41814423]
[227.03367615 115.70441437]
[212.05065918 114.99068451]
[197.06765747 114.27695465]
[182.08464050 113.56323242]
[172.81748962 121.51572418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 41]
[12 40]
[13 39]
[16 36]
[17 35]
[19 33]
[20 32]
[22 29]
[23 28]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[62 88]
[63 87]
[65 85]
[66 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
