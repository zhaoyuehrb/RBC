%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGGCCGGGUGCCAGAUACUGGGAUCAGCCACUGCAGCUCCCUGAGCACUCUCUACAGAGACGCGGACCCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[73.64163208 267.62759399]
[70.28275299 251.94010925]
[80.56452179 239.62487793]
[80.56452179 224.62487793]
[80.56452179 209.62487793]
[80.56452179 194.62487793]
[80.56452179 179.62487793]
[79.96817780 164.63674927]
[78.77642059 149.68415833]
[77.58467102 134.73158264]
[66.66648865 124.44599152]
[51.66945267 124.14775848]
[36.67241669 123.84952545]
[22.72113800 131.31091309]
[10.15021610 123.32210541]
[-4.84681845 123.02387238]
[-19.84385300 122.72563934]
[-34.84088898 122.42740631]
[-50.79710388 128.15763855]
[-60.72051239 114.41127777]
[-50.25844193 101.07030487]
[-34.54265594 107.43036652]
[-19.54561996 107.72859955]
[-4.54858589 108.02683258]
[10.44844913 108.32506561]
[23.32703972 100.84233856]
[36.97064972 108.85249329]
[51.96768570 109.15072632]
[66.96472168 109.44895935]
[69.66527557 89.98529053]
[82.02406311 76.57144928]
[76.21499634 62.74196243]
[62.83506775 53.25989151]
[64.62602234 36.95883179]
[79.74547577 30.60791588]
[92.63983154 40.74042130]
[90.04447937 56.93289185]
[95.85354614 70.76238251]
[100.58712769 70.47566223]
[105.30555725 70.95034790]
[111.65984344 57.36273956]
[118.01413727 43.77513123]
[124.36842346 30.18752670]
[125.60116577 13.27845573]
[142.19067383 9.78212452]
[150.14280701 24.75543404]
[137.95602417 36.54181290]
[131.60174561 50.12942123]
[125.24745178 63.71702576]
[118.89316559 77.30463409]
[122.77767181 81.20613861]
[125.87043762 85.76091003]
[128.06398010 90.81061554]
[143.03729248 89.91638947]
[158.01062012 89.02216339]
[172.98393250 88.12793732]
[186.36648560 78.64957428]
[201.15121460 85.74493408]
[202.12884521 102.11491394]
[188.29368591 110.91948700]
[173.87817383 103.10125732]
[158.90484619 103.99548340]
[143.93151855 104.88971710]
[128.95820618 105.78394318]
[123.24622345 120.72006226]
[110.05078125 131.16969299]
[92.53725433 133.53982544]
[93.72900391 148.49240112]
[94.92075348 163.44499207]
[98.58349609 169.47801208]
[98.44942474 175.50759888]
[95.56452179 179.62487793]
[95.56452179 194.62487793]
[95.56452179 209.62487793]
[95.56452179 224.62487793]
[95.56452179 239.62487793]
[105.84629059 251.94010925]
[102.48741150 267.62759399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 69]
[9 68]
[10 67]
[11 29]
[12 28]
[13 27]
[15 25]
[16 24]
[17 23]
[18 22]
[31 38]
[32 37]
[40 50]
[41 49]
[42 48]
[43 47]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
