%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGCUCCUCCUGUCUUGUCUCAGCGGCUGCCAACAGAUCAUGAGCCAUCAGCUCCUCUGGGGCCAGCUAUAGGACAACAGAACUCUCACCAAAGGACCAGACACAGUGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[205.19207764 350.97286987]
[216.81999207 341.24829102]
[211.68969727 327.15292358]
[206.55938721 313.05752563]
[201.42909241 298.96212769]
[196.11521912 293.68417358]
[196.35581970 284.41885376]
[191.60580444 270.19079590]
[186.85578918 255.96275330]
[182.10575867 241.73471069]
[175.01475525 235.89639282]
[173.91670227 225.60928345]
[165.23077393 213.38003540]
[156.54483032 201.15078735]
[147.85890198 188.92153931]
[143.25944519 187.24464417]
[139.72314453 182.58601379]
[139.05583191 175.79454041]
[131.03883362 163.11669922]
[123.02185059 150.43884277]
[115.00485992 137.76100159]
[106.98787689 125.08314514]
[93.68123627 125.26000214]
[82.02510834 118.83872986]
[75.06417847 107.49662018]
[74.61669922 94.19633484]
[80.79955292 82.41201019]
[73.12583160 69.52349091]
[65.45211029 56.63496780]
[57.77838516 43.74644852]
[50.10466385 30.85792542]
[42.25860214 18.07358742]
[34.24161530 5.39573622]
[21.77617645 1.76486433]
[15.37873840 -9.06800938]
[18.04294968 -20.95131683]
[10.36922646 -33.83983612]
[2.69550371 -46.72835922]
[-4.97821903 -59.61687851]
[-14.57589531 -60.72839737]
[-22.42547798 -66.12007141]
[-26.77842712 -74.43342590]
[-26.73927879 -83.67848206]
[-22.44690514 -91.70961761]
[-29.05864906 -105.17382050]
[-35.67039490 -118.63803101]
[-42.28213882 -132.10223389]
[-56.93953705 -138.62452698]
[-60.83933640 -154.18637085]
[-50.98994827 -166.85006714]
[-34.94697571 -166.90109253]
[-25.01721573 -154.30032349]
[-28.81793213 -138.71397400]
[-22.20618820 -125.24977112]
[-15.59444427 -111.78556824]
[-8.98270035 -98.32135773]
[9.13895893 -88.59668732]
[7.91030216 -67.29060364]
[15.58402538 -54.40208054]
[23.25774765 -41.51356125]
[30.93147087 -28.62503815]
[46.66199112 -20.97285271]
[46.91946793 -2.62125087]
[54.93645477 10.05660057]
[61.25324631 14.08052731]
[62.99318695 23.18420410]
[70.66690826 36.07272339]
[78.34062958 48.96124649]
[86.01435089 61.84976578]
[93.68807983 74.73828888]
[109.84523773 75.89469147]
[122.19218445 86.38011169]
[125.95052338 102.13657379]
[119.66572571 117.06615448]
[127.68271637 129.74400330]
[135.69970703 142.42185974]
[143.71669006 155.09971619]
[151.73367310 167.77755737]
[160.08815002 180.23559570]
[168.77407837 192.46484375]
[177.46002197 204.69410706]
[186.14595032 216.92335510]
[187.26260376 201.96496582]
[194.55097961 188.85469055]
[206.66661072 180.01095581]
[221.37451172 177.06517029]
[235.96151733 180.56076050]
[247.73678589 189.85285950]
[254.52810669 203.22738647]
[255.08270264 218.21713257]
[249.29824829 232.05694580]
[238.24182129 242.19378662]
[223.95300293 246.75770569]
[209.06762695 244.90682983]
[196.33381653 236.98469543]
[201.08383179 251.21273804]
[205.83384705 265.44079590]
[210.58387756 279.66882324]
[215.52447510 293.83181763]
[220.65478516 307.92721558]
[225.78507996 322.02261353]
[230.91539001 336.11798096]
[246.07371521 336.09317017]
[260.32534790 341.25720215]
[271.94927979 350.98654175]
[279.54190063 364.10629272]
[282.18634033 379.03219604]
[279.56329346 393.96188354]
[271.98947144 407.09249878]
[260.37951660 416.83850098]
[246.13529968 422.02294922]
[230.97694397 422.01983643]
[216.73487854 416.82955933]
[205.12889099 407.07882690]
[197.56047058 393.94509888]
[194.94352722 379.01434326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[5 99]
[7 98]
[8 97]
[9 96]
[10 95]
[12 82]
[13 81]
[14 80]
[15 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 64]
[33 63]
[36 61]
[37 60]
[38 59]
[39 58]
[44 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
