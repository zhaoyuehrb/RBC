%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGCUAGUAAGAUAGGAAGUGAGGCCAGGUACCUUGUGGGCAGUGAUGUCAUUCGGUGCGACUCCUAAG\
) } def
/len { sequence length } bind def

/coor [
[48.26616669 201.96929932]
[36.61882401 208.06698608]
[23.72289085 210.52792358]
[10.68499184 209.15170288]
[-1.37918651 204.06675720]
[-11.44037056 195.71842957]
[-24.09124184 203.77792358]
[-36.74211502 211.83743286]
[-39.91766739 227.31939697]
[-53.15634537 235.95147705]
[-68.60387421 232.61242676]
[-77.09551239 219.28321838]
[-73.59332275 203.87185669]
[-60.17508316 195.52162170]
[-44.80160904 199.18655396]
[-32.15073776 191.12705994]
[-19.49986458 183.06756592]
[-23.07967377 166.47457886]
[-20.20667267 149.71028137]
[-11.27052021 135.19831848]
[2.46071100 125.04628754]
[19.02042961 120.73966217]
[36.02516174 122.92447662]
[51.01761246 131.31054688]
[62.50827789 121.66873169]
[73.99894714 112.02691650]
[71.46579742 97.45031738]
[76.54317474 83.55376434]
[87.87685394 74.04367065]
[102.44396973 71.45655060]
[116.35923767 76.48241425]
[127.84990692 66.84059906]
[139.34057617 57.19878387]
[150.83123779 47.55697250]
[162.32189941 37.91515732]
[159.17073059 24.11272812]
[162.32647705 10.37986946]
[171.10322571 -0.55817848]
[183.70559692 -6.55680370]
[197.59574890 -6.47240114]
[210.00437927 -0.37993807]
[221.90467834 -9.51135921]
[233.80497742 -18.64278030]
[245.70529175 -27.77420235]
[251.47764587 -43.12385559]
[267.69897461 -45.53234482]
[277.68212891 -32.52202606]
[271.15731812 -17.47679901]
[254.83670044 -15.87390232]
[242.93640137 -6.74248075]
[231.03610229 2.38894057]
[219.13580322 11.52036190]
[221.66467285 27.33234215]
[215.92538452 42.38076782]
[203.36547852 52.61017609]
[187.28364563 55.21439362]
[171.96371460 49.40582275]
[160.47305298 59.04763794]
[148.98239136 68.68945312]
[137.49171448 78.33126831]
[126.00105286 87.97308350]
[128.53421021 102.54968262]
[123.45682526 116.44623566]
[112.12314606 125.95632935]
[97.55603027 128.54345703]
[83.64076233 123.51758575]
[72.15009308 133.15939331]
[60.65942764 142.80120850]
[65.57153320 155.09468079]
[66.71244049 168.26554871]
[63.99498749 181.18473816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[24 68]
[25 67]
[26 66]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
