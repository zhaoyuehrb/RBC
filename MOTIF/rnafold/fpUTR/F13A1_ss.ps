%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAAGAGCCAACUGUCUUGUCUUUCCCGAGUCCGUUUGAGGAAGUCCCCGAGGCGCACAGAGCAAGCCCACGCGAGGGCACCUCUGGAGGGGAGCGCCUGCAGGACCUUGUAAAGUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[33.76026917 382.32205200]
[30.76130486 397.11761475]
[23.88072968 410.55487061]
[13.62912750 421.63671875]
[0.76723242 429.54077148]
[-13.75051594 433.68054199]
[-28.84680367 433.74877930]
[-43.40138626 429.74044800]
[-56.33422089 421.95300293]
[-66.68560028 410.96429443]
[-73.68738556 397.58978271]
[-76.81999207 382.82196045]
[-75.85096741 367.75662231]
[-70.85221863 353.51181030]
[-62.19468689 341.14453125]
[-50.52081299 331.57250977]
[-36.69688034 325.50610352]
[-21.74871254 323.39544678]
[-6.78556728 325.39715576]
[-0.87022966 311.61279297]
[5.04510832 297.82843018]
[2.95392990 283.08132935]
[15.50636101 273.45080566]
[21.42169952 259.66644287]
[27.33703613 245.88208008]
[33.25237274 232.09771729]
[29.05202675 220.67771912]
[33.95869827 209.10459900]
[45.82270050 203.85713196]
[52.08533478 190.22705078]
[58.34796906 176.59695435]
[64.61060333 162.96685791]
[70.70008087 149.25852966]
[76.61541748 135.47416687]
[82.53075409 121.68979645]
[74.94207001 112.15409851]
[72.15152740 100.29111481]
[74.69347382 88.37237549]
[82.08115387 78.68012238]
[92.89997864 73.07024384]
[105.07832336 72.61692810]
[111.68423462 59.14986038]
[118.29015350 45.68279266]
[111.20518494 32.00399780]
[113.50634766 16.95215416]
[124.10398102 6.26786423]
[138.78512573 3.90095592]
[145.39103699 -9.56611252]
[151.99694824 -23.03318024]
[158.60285950 -36.50024796]
[165.20877075 -49.96731567]
[159.76829529 -56.66647720]
[156.60739136 -64.66018677]
[155.99980164 -73.20050049]
[157.98133850 -81.49492645]
[162.34854126 -88.77995300]
[168.67933655 -94.39134216]
[176.37371826 -97.82466888]
[184.71064758 -98.78063965]
[192.91560364 -97.19106293]
[201.48461914 -109.50251007]
[210.05364990 -121.81396484]
[218.62266541 -134.12541199]
[227.19169617 -146.43685913]
[223.29817200 -159.40209961]
[227.55596924 -172.04640198]
[238.18325806 -179.78561401]
[251.13354492 -179.95217896]
[260.01171875 -192.04260254]
[268.88986206 -204.13302612]
[277.76800537 -216.22344971]
[275.12738037 -231.80557251]
[284.34634399 -244.64245605]
[299.95553589 -247.11820984]
[312.69424438 -237.76402283]
[315.00482178 -222.12954712]
[305.51647949 -209.49044800]
[289.85842896 -207.34529114]
[280.98028564 -195.25486755]
[272.10214233 -183.16444397]
[263.22396851 -171.07402039]
[266.50192261 -154.63142395]
[256.72674561 -140.59799194]
[239.50314331 -137.86784363]
[230.93411255 -125.55638885]
[222.36509705 -113.24494171]
[213.79606628 -100.93348694]
[205.22705078 -88.62203979]
[211.52268982 -67.68687439]
[200.46762085 -48.51884460]
[178.67584229 -43.36140442]
[172.06993103 -29.89433670]
[165.46401978 -16.42726707]
[158.85809326 -2.96019983]
[152.25218201 10.50686836]
[159.36691284 23.56515312]
[157.40490723 38.48542786]
[146.91082764 49.51845551]
[131.75721741 52.28870392]
[125.15130615 65.75577545]
[118.54539490 79.22283936]
[127.26289368 94.31169891]
[125.30652618 111.62762451]
[113.44225311 124.39114380]
[96.31512451 127.60514069]
[90.39978027 141.38951111]
[84.48444366 155.17387390]
[83.95739746 164.41029358]
[78.24069214 169.22949219]
[71.97805786 182.85958862]
[65.71542358 196.48968506]
[59.45278931 210.11978149]
[61.62823105 228.35160828]
[47.03674316 238.01304626]
[41.12140274 251.79742432]
[35.20606613 265.58178711]
[29.29072762 279.36614990]
[30.95880127 295.09918213]
[18.82947540 303.74374390]
[12.91413784 317.52813721]
[6.99879980 331.31250000]
[18.75873947 340.77856445]
[27.52773666 353.06704712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 121]
[20 120]
[21 119]
[23 117]
[24 116]
[25 115]
[26 114]
[29 112]
[30 111]
[31 110]
[32 109]
[33 107]
[34 106]
[35 105]
[41 101]
[42 100]
[43 99]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[68 81]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
