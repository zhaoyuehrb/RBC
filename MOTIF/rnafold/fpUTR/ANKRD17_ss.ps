%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGAGGUGACCGAGGCGGUGGCGGCGGAGGCGGCACCGAUUGCUGUGUCGGCCCCAGUGCGGCCGAAGUCGCGGUAGAGCGUAGCCCCACGCCCCUCCCCCGUCCGCGCCCUCCCUCUUUCCCUGGGG\
) } def
/len { sequence length } bind def

/coor [
[123.15213013 353.02786255]
[124.18480682 338.06344604]
[136.38711548 329.33969116]
[150.88076782 333.20382690]
[146.27973938 318.92691040]
[141.18318176 313.47137451]
[141.74400330 304.25216675]
[137.48664856 289.86901855]
[133.22929382 275.48587036]
[128.97193909 261.10272217]
[125.19101715 258.03854370]
[123.35490417 252.52758789]
[124.87312317 245.92712402]
[121.31026459 231.35639954]
[116.61904907 225.54862976]
[117.84111786 216.39358521]
[114.62867737 201.74162292]
[111.41623688 187.08964539]
[108.20379639 172.43768311]
[104.99135590 157.78570557]
[94.70787048 147.01077271]
[99.31016541 131.87374878]
[96.09772491 117.22178650]
[82.84699249 104.19428253]
[88.59099579 86.52216339]
[84.67975616 72.04106140]
[80.76852417 57.55995941]
[76.85729218 43.07886124]
[66.03685760 35.94034195]
[63.11530685 23.72396278]
[69.13788605 13.16162395]
[65.57501984 -1.40910041]
[60.44898224 -9.09233475]
[62.10588074 -16.37191963]
[58.89344025 -31.02388763]
[55.68099976 -45.67585754]
[42.65491867 -54.21746445]
[39.60577011 -69.12240601]
[47.82916260 -81.48814392]
[44.61672211 -96.14011383]
[31.89678383 -109.39111328]
[37.74095154 -125.89334869]
[34.17808914 -140.46408081]
[30.61522675 -155.03480530]
[27.05236435 -169.60552979]
[23.48950195 -184.17625427]
[19.92664146 -198.74697876]
[16.36377907 -213.31770325]
[12.80091667 -227.88842773]
[8.71632862 -242.32157898]
[4.11529875 -256.59851074]
[-0.48573086 -270.87542725]
[-5.08676052 -285.15234375]
[-9.68779087 -299.42929077]
[-14.28882027 -313.70620728]
[-28.84085655 -319.43090820]
[-36.26313019 -333.19476318]
[-33.05107117 -348.49890137]
[-20.72131538 -358.11718750]
[-5.09559774 -357.50811768]
[6.44809771 -346.95932007]
[8.45918941 -331.45159912]
[-0.01189745 -318.30722046]
[4.58913231 -304.03030396]
[9.19016171 -289.75338745]
[13.79119205 -275.47647095]
[18.39222145 -261.19952393]
[22.99325180 -246.92260742]
[26.05022240 -244.98326111]
[28.27853966 -241.41748047]
[28.90141106 -236.65127563]
[27.37164116 -231.45127869]
[30.93450356 -216.88055420]
[34.49736404 -202.30982971]
[38.06022644 -187.73910522]
[41.62308884 -173.16838074]
[45.18595123 -158.59765625]
[48.74881363 -144.02693176]
[52.31167603 -129.45620728]
[62.52871704 -122.86481476]
[65.57410431 -110.67871857]
[59.26869202 -99.35255432]
[62.48113251 -84.70058441]
[75.12384796 -76.90973663]
[78.59044647 -62.09632111]
[70.33296967 -48.88829803]
[73.54541016 -34.23632812]
[76.75785065 -19.58436012]
[80.14574432 -4.97196198]
[83.70861053 9.59876251]
[96.50835419 21.54215431]
[91.33839417 39.16762924]
[95.24962616 53.64872742]
[99.16085815 68.12982941]
[103.07209015 82.61092377]
[112.07431793 87.11479950]
[117.15300751 95.80571747]
[116.65782928 105.85955811]
[110.74969482 114.00934601]
[113.96213531 128.66131592]
[124.47539520 140.48425293]
[119.64332581 154.57327271]
[122.85576630 169.22523499]
[126.06820679 183.87721252]
[129.28065491 198.52917480]
[132.49308777 213.18115234]
[135.88098145 227.79354858]
[139.44384766 242.36427307]
[143.35508728 256.84536743]
[147.61244202 271.22851562]
[151.86979675 285.61166382]
[156.12715149 299.99481201]
[160.55665588 314.32586670]
[165.15768433 328.60278320]
[170.60589600 342.57839966]
[176.88171387 356.20242310]
[183.15751648 369.82644653]
[198.44891357 371.87014771]
[210.19313049 381.87399292]
[214.64263916 396.64578247]
[210.37760925 411.47186279]
[198.75900269 421.62133789]
[183.49426270 423.85549927]
[169.45433044 417.46145630]
[161.11929321 404.47952271]
[161.14881897 389.05218506]
[169.53349304 376.10226440]
[163.25767517 362.47824097]
[156.98187256 348.85418701]
[148.92758179 361.50839233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[7 112]
[8 111]
[9 110]
[10 109]
[13 108]
[14 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[22 100]
[23 99]
[25 95]
[26 94]
[27 93]
[28 92]
[31 90]
[32 89]
[34 88]
[35 87]
[36 86]
[39 83]
[40 82]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
