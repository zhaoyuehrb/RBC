%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCGCUGGCGCCACUAGAGAAGGGCGAGCGGCGCGGCAGAGUGCGGCGCAGCGCAGCUCCUGAGGUUUUGGUU\
) } def
/len { sequence length } bind def

/coor [
[79.79733276 133.88377380]
[82.83235168 119.19402313]
[92.60312653 107.81234741]
[77.61594391 108.43222046]
[62.62875748 109.05210114]
[47.64157104 109.67197418]
[32.65438461 110.29184723]
[17.66719818 110.91172028]
[4.19855785 119.21270752]
[-8.83758545 112.00796509]
[-23.82477188 112.62784576]
[-32.55626678 116.19359589]
[-39.44144440 112.95066071]
[-54.44144440 112.95066071]
[-62.69541550 125.98429108]
[-76.69522858 132.46571350]
[-91.97358704 130.32673645]
[-103.65522766 120.24988556]
[-108.01258087 105.45066071]
[-103.65522766 90.65143585]
[-91.97358704 80.57459259]
[-76.69522858 78.43560791]
[-62.69541550 84.91703033]
[-54.44144440 97.95066071]
[-39.44144440 97.95066071]
[-24.44464684 97.64065552]
[-9.45746040 97.02078247]
[2.93919587 88.76413727]
[17.04732323 95.92453766]
[32.03450775 95.30466461]
[47.02169418 94.68478394]
[62.00888062 94.06491089]
[76.99607086 93.44503784]
[91.98325348 92.82516479]
[106.52426147 89.14288330]
[120.00012207 82.55493164]
[125.21717072 67.87773132]
[138.97746277 61.38858414]
[152.93777466 66.45269012]
[166.41363525 59.86474609]
[179.88951111 53.27679443]
[193.22634888 46.41175079]
[206.41844177 39.27253723]
[219.46018982 31.86221313]
[232.34599304 24.18393707]
[245.23181152 16.50566101]
[258.11761475 8.82738590]
[261.75390625 -6.55289602]
[275.24432373 -14.78596497]
[290.58532715 -10.98728657]
[298.67529297 2.58945060]
[294.71463013 17.88940811]
[281.05313110 25.83539391]
[265.79589844 21.71319580]
[252.91007996 29.39146996]
[240.02427673 37.06974792]
[227.13847351 44.74802399]
[222.88374329 51.05829620]
[213.55766296 52.46464539]
[200.36555481 59.60385513]
[195.85368347 65.73291016]
[186.47746277 66.75266266]
[173.00158691 73.34060669]
[159.52572632 79.92855835]
[154.94741821 94.05564880]
[141.37481689 100.92873383]
[126.58807373 96.03079987]
[113.11220551 102.61874390]
[127.12213135 107.97804260]
[136.78303528 119.45266724]
[139.67707825 134.17083740]
[135.07994080 148.44902039]
[124.14218140 158.71377563]
[109.60120392 162.39614868]
[95.09619141 158.57452393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[10 27]
[11 26]
[13 25]
[14 24]
[35 68]
[36 67]
[39 64]
[40 63]
[41 62]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
