%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGGGCUGCAUGCAGAGCUGAGAGCUGAGGACUCCCAUCUCCAGCCUGCCCGGGUGAAGCGCGGCCUGGGGUGUGCUGGCUGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[210.06065369 293.09292603]
[221.47485352 283.36074829]
[236.45011902 284.23016357]
[228.50134277 271.50946045]
[220.55255127 258.78872681]
[212.60375977 246.06800842]
[204.65496826 233.34729004]
[196.70617676 220.62657166]
[188.75738525 207.90585327]
[180.80860901 195.18513489]
[172.85981750 182.46440125]
[149.35690308 180.90716553]
[133.60900879 163.08508301]
[134.98301697 139.11323547]
[123.49234772 129.47142029]
[112.00167847 119.82961273]
[100.51100922 110.18779755]
[92.62523651 107.75631714]
[88.79522705 100.00341797]
[77.64804840 89.96646118]
[66.50087738 79.92950439]
[55.35370636 69.89253998]
[46.68281555 66.37014771]
[44.00048447 59.30549240]
[33.21038818 48.88561630]
[22.42028999 38.46574020]
[7.11849642 34.44508362]
[3.33804369 20.03822899]
[-7.45205307 9.61835289]
[-15.99473095 5.79549837]
[-18.42887688 -1.35846984]
[-28.84875107 -12.14856720]
[-44.20091248 -19.34214401]
[-41.53836060 -36.08571625]
[-24.71206856 -38.16230011]
[-18.05865479 -22.56844330]
[-7.63877964 -11.77834511]
[2.96782231 -1.17174363]
[13.75791931 9.24813175]
[28.28793335 12.52348995]
[32.84016418 27.67564392]
[43.63026428 38.09552002]
[54.42036057 48.51539230]
[65.39066315 58.74536896]
[76.53783417 68.78232574]
[87.68501282 78.81929016]
[98.83218384 88.85624695]
[110.15282440 98.69713593]
[121.64349365 108.33894348]
[133.13415527 117.98075867]
[144.62483215 127.62257385]
[151.48361206 123.87155914]
[159.03457642 121.92043304]
[166.81491089 121.87941742]
[174.35005188 123.74192047]
[181.18264771 127.38554382]
[186.90022278 132.58006287]
[191.16018677 139.00193787]
[193.71028137 146.25450134]
[194.40357971 153.89241028]
[193.20680237 161.44900513]
[190.20191956 168.46484375]
[185.58053589 174.51562500]
[193.52932739 187.23634338]
[201.47811890 199.95706177]
[209.42689514 212.67778015]
[217.37568665 225.39849854]
[225.32447815 238.11923218]
[233.27326965 250.83995056]
[241.22206116 263.56066895]
[249.17085266 276.28140259]
[258.40576172 288.10156250]
[268.82565308 298.89166260]
[279.24551392 309.68173218]
[289.85211182 320.28836060]
[300.64221191 330.70822144]
[316.67648315 334.14837646]
[321.45617676 349.83551025]
[310.06436157 361.63208008]
[294.21997070 357.40274048]
[290.22235107 341.49832153]
[279.43225098 331.07843018]
[272.27828979 328.64428711]
[268.45541382 320.10162354]
[258.03555298 309.31152344]
[247.61567688 298.52142334]
[244.83673096 313.26174927]
[232.63249207 321.98278809]
[217.78677368 319.83688354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[14 51]
[15 50]
[16 49]
[17 48]
[19 47]
[20 46]
[21 45]
[22 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 38]
[31 37]
[32 36]
[72 86]
[73 85]
[74 84]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
