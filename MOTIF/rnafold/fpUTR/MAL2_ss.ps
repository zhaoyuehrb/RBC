%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGCGGAGCUGAGCGGCGGCGGCGGCGGCGGCAGGAGCCCGGGAGGCGGAGGCGGGAGGCGGCGGCGGCGCGCGGAGACGCAGCAGCGGCAGCGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[75.71615601 135.47811890]
[64.78749084 124.66741180]
[58.36053848 110.70312500]
[43.40412521 111.84580231]
[28.44771194 112.98847961]
[13.49129963 114.13115692]
[5.00607872 117.96092987]
[-1.93744504 115.07350159]
[-16.92174911 115.75953674]
[-27.54495811 127.15186310]
[-42.75094604 127.63414001]
[-53.54632568 117.43633270]
[-68.53062439 118.12236023]
[-77.88092041 127.16764832]
[-90.48604584 127.33882141]
[-99.48333740 119.09465790]
[-114.48159790 119.32340240]
[-128.16217041 127.27025604]
[-141.00595093 119.72794342]
[-156.00421143 119.95668793]
[-169.68478394 127.90354156]
[-182.52856445 120.36122894]
[-197.52682495 120.58998108]
[-211.31689453 129.46501160]
[-225.77210999 121.72042084]
[-226.02218628 105.32318115]
[-211.80987549 97.14136505]
[-197.75556946 105.59172058]
[-182.75732422 105.36297607]
[-170.14952087 97.43248749]
[-156.23295593 104.95843506]
[-141.23469543 104.72968292]
[-128.62690735 96.79919434]
[-114.71034241 104.32514954]
[-99.71208954 104.09639740]
[-85.26252747 94.26726532]
[-69.21665955 103.13805389]
[-54.23235321 102.45202637]
[-44.41396332 91.31044769]
[-29.22752190 90.40126038]
[-17.60778046 100.77523041]
[-2.62347603 100.08920288]
[12.34862328 99.17474365]
[27.30503654 98.03206635]
[42.26144791 96.88938904]
[57.21786118 95.74671173]
[63.38216019 77.47145081]
[76.91565704 63.72997284]
[95.09478760 57.28770065]
[96.00924683 42.31560135]
[88.21051025 27.88952255]
[97.03376770 14.06627655]
[113.40241241 15.06603432]
[120.47778320 29.86032867]
[110.98134613 43.23006058]
[110.06688690 58.20215988]
[119.18572998 61.52521133]
[127.32685852 66.80896759]
[134.07537842 73.78416443]
[139.08740234 82.09534454]
[142.10749817 91.31896210]
[142.98176575 100.98496246]
[157.68792725 103.93936157]
[172.74171448 99.07170105]
[183.69573975 109.16419983]
[198.40191650 112.11859131]
[213.45570374 107.25093079]
[224.40972900 117.34342957]
[239.11590576 120.29782104]
[254.16969299 115.43016052]
[265.12371826 125.52265930]
[279.82989502 128.47705078]
[294.57940674 131.20683289]
[309.36883545 133.71138000]
[324.19476318 135.99008179]
[339.05368042 138.04243469]
[353.91262817 140.09478760]
[368.89086914 133.41766357]
[382.00180054 143.26832581]
[379.75802612 159.51324463]
[364.46771240 165.44105530]
[351.86026001 154.95372009]
[337.00134277 152.90136719]
[322.14239502 150.84901428]
[314.96408081 153.08988953]
[306.86431885 148.50080872]
[292.07489014 145.99626160]
[284.83157349 148.01719666]
[276.87548828 143.18322754]
[262.16934204 140.22883606]
[248.16741943 145.30781555]
[236.16151428 135.00399780]
[221.45533752 132.04960632]
[207.45344543 137.12858582]
[195.44752502 126.82476807]
[180.74134827 123.87036896]
[166.73945618 128.94935608]
[154.73353577 118.64553070]
[140.02735901 115.69113922]
[131.94871521 128.76945496]
[119.78561401 138.16976929]
[105.09304047 142.69030762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[6 43]
[8 42]
[9 41]
[12 38]
[13 37]
[16 35]
[17 34]
[19 32]
[20 31]
[22 29]
[23 28]
[49 56]
[50 55]
[62 99]
[63 98]
[65 96]
[66 95]
[68 93]
[69 92]
[71 90]
[72 89]
[73 87]
[74 86]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
