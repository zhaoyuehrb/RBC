%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCACUAUAAAAGUCAGGCGGGCUGAGGAGGAGACAAAGGCCAGGACGCUCCGCAGCUGUUGGGGAAGAGGAGCUGCCUCCUGGG\
) } def
/len { sequence length } bind def

/coor [
[-3.01554513 158.63246155]
[-10.82348156 170.53179932]
[-20.53491592 180.93157959]
[-31.86746597 189.53099060]
[-44.49188995 196.08155823]
[-58.04163361 200.39430237]
[-72.12348938 202.34519958]
[-86.32900238 201.87875366]
[-100.24630737 199.00956726]
[-113.47207642 193.82191467]
[-125.62322998 186.46719360]
[-136.34799194 177.15960693]
[-145.33610535 166.16983032]
[-152.32778931 153.81719971]
[-157.12124634 140.46044922]
[-159.57853699 126.48719788]
[-174.57853699 126.48719788]
[-189.57853699 126.48719788]
[-204.57853699 126.48719788]
[-216.89375305 136.76896667]
[-232.58125305 133.41007996]
[-239.60691833 118.98719788]
[-232.58125305 104.56430817]
[-216.89375305 101.20542908]
[-204.57853699 111.48719788]
[-189.57853699 111.48719788]
[-174.57853699 111.48719788]
[-159.57853699 111.48719788]
[-156.68351746 95.92164612]
[-150.89486694 81.18074799]
[-142.42008972 67.79733276]
[-131.56378174 56.25549698]
[-118.71679688 46.97308731]
[-104.34202576 40.28656387]
[-88.95781708 36.43882370]
[-73.11925507 35.57035828]
[-57.39812088 37.71414185]
[-42.36227798 42.79436111]
[-28.55513382 50.62912750]
[-16.47601700 60.93694687]
[-6.56210947 73.34687042]
[0.82736719 87.41182709]
[5.42417526 102.62473297]
[20.33823013 101.02130890]
[35.25228500 99.41787720]
[50.16633987 97.81445312]
[65.08039093 96.21102905]
[79.99444580 94.60759735]
[83.27955627 87.76370239]
[88.80928040 82.56245422]
[95.84129333 79.70208740]
[103.43157959 79.56658936]
[110.56120300 82.17414093]
[116.27304840 87.17471313]
[119.80033875 93.89698792]
[134.76211548 94.96707916]
[149.72390747 96.03716278]
[164.68568420 97.10725403]
[179.64746094 98.17733765]
[194.60925293 99.24742889]
[208.92622375 92.51433563]
[221.06910706 101.13987732]
[236.03088379 102.20996094]
[246.78082275 90.85334015]
[262.32147217 89.11494446]
[275.31503296 97.81560516]
[279.62634277 112.84712982]
[273.21969604 127.11209106]
[259.12017822 133.87501526]
[243.98509216 129.94265747]
[234.96080017 117.17174530]
[219.99900818 116.10165405]
[206.75219727 122.91129303]
[193.53915405 114.20921326]
[178.57737732 113.13912201]
[163.61560059 112.06903839]
[148.65380859 110.99894714]
[133.69203186 109.92885590]
[118.73024750 108.85877228]
[100.36982727 120.71625519]
[81.59787750 109.52165222]
[66.68382263 111.12508392]
[51.76976395 112.72850800]
[36.85570908 114.33193207]
[21.94165611 115.93536377]
[7.02760172 117.53878784]
[6.04233694 131.74652100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 28]
[17 27]
[18 26]
[19 25]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
