%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGACAGCGCGCGGCAGGCGGCGAGCUCGGGGGCCGCAGAAAAUGAAACUGAAGCCGUGGUCACGUGACAGGACAUGUAGUAUAUAGCAGGCUGCCAGCGACUCCUGCUCUUGCUUCUGGAUCUGCAGGGCAGUCCCAGCAGGACCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 141.64082336]
[92.50000000 126.64082336]
[92.50000000 111.64082336]
[77.79203796 108.69534302]
[72.01576233 122.53855896]
[66.23949432 136.38177490]
[72.48059082 150.90156555]
[66.54914093 165.55058289]
[51.96417999 171.63781738]
[37.37870026 165.55181885]
[31.44600677 150.90332031]
[37.68586349 136.38299561]
[52.39627457 130.60549927]
[58.17255020 116.76229095]
[63.94882202 102.91906738]
[63.32484436 87.93205261]
[56.41784668 74.61689758]
[49.51084518 61.30174255]
[42.60384750 47.98658752]
[35.69684982 34.67143250]
[28.78985023 21.35627556]
[22.01622963 15.12972546]
[21.88092613 7.69149065]
[15.25242710 -5.76447487]
[2.04961991 -8.61816120]
[-6.95223188 -18.42604637]
[-8.61639214 -31.43776703]
[-2.55549955 -42.85102081]
[-8.90262890 -56.44197464]
[-15.24975872 -70.03292084]
[-21.75850105 -76.53585815]
[-21.58426857 -83.97328186]
[-27.64728165 -97.69333649]
[-40.30240250 -107.18852234]
[-38.36969757 -121.95719910]
[-44.43271255 -135.67724609]
[-50.49572372 -149.39730835]
[-56.55873871 -163.11735535]
[-76.14593506 -163.96267700]
[-91.23899078 -183.25477600]
[-105.14154816 -188.88671875]
[-119.04410553 -194.51867676]
[-131.58784485 -185.53770447]
[-146.99693298 -184.78689575]
[-160.35437012 -192.50585938]
[-167.39785767 -206.23149109]
[-165.87983704 -221.58398438]
[-156.28471375 -233.66442871]
[-141.67424011 -238.61798096]
[-126.71058655 -234.86399841]
[-116.16857910 -223.60035706]
[-113.41214752 -208.42123413]
[-99.50959015 -202.78927612]
[-85.60704041 -197.15731812]
[-79.52111816 -201.54043579]
[-67.34928131 -210.30664062]
[-61.26336288 -214.68974304]
[-62.19899368 -229.66053772]
[-70.78201294 -242.95121765]
[-63.85364914 -256.13632202]
[-64.78927612 -271.10711670]
[-65.72490692 -286.07791138]
[-80.10511780 -294.92446899]
[-86.33934021 -310.43627930]
[-82.16425323 -326.45297241]
[-69.40900421 -336.73931885]
[-70.65588379 -351.68740845]
[-71.90275574 -366.63549805]
[-73.14962769 -381.58358765]
[-74.39650726 -396.53164673]
[-86.62245941 -406.54672241]
[-88.10263062 -422.28155518]
[-77.95886230 -434.40093994]
[-62.20926666 -435.71466064]
[-50.19780731 -425.44332886]
[-49.05066299 -409.68072510]
[-59.44841766 -397.77853394]
[-58.20154190 -382.83044434]
[-56.95466995 -367.88235474]
[-55.70779419 -352.93426514]
[-54.46091843 -337.98617554]
[-42.42308044 -332.13073730]
[-34.80293655 -320.99319458]
[-33.68874359 -307.43557739]
[-39.47990799 -295.00674438]
[-50.75411224 -287.01351929]
[-49.81848526 -272.04275513]
[-48.88285828 -257.07196045]
[-40.36675644 -244.85208130]
[-47.22820282 -230.59616089]
[-46.29257202 -215.62536621]
[-30.95519829 -189.84504700]
[-42.83868408 -169.18037415]
[-36.77566910 -155.46031189]
[-30.71265793 -141.74026489]
[-24.64964485 -128.02021790]
[-12.42819118 -119.50637817]
[-13.92722797 -103.75634766]
[-7.86421442 -90.03629303]
[-1.65880752 -76.38005066]
[4.68832207 -62.78910446]
[11.03545189 -49.19815063]
[27.05124664 -44.16305161]
[34.64753723 -28.81442070]
[28.70839310 -12.39297390]
[35.33689117 1.06299186]
[42.10500717 14.44927692]
[49.01200485 27.76443291]
[55.91900253 41.07958984]
[62.82600021 54.39474487]
[69.73300171 67.70989990]
[76.63999939 81.02505493]
[143.93554688 86.96487427]
[155.63516235 96.35203552]
[167.33479309 105.73919678]
[179.03440857 115.12635803]
[190.73403931 124.51351929]
[202.43365479 133.90068054]
[213.24055481 132.08509827]
[223.04643250 136.46098328]
[228.67643738 145.34480286]
[228.45628357 155.63963318]
[239.75529480 165.50535583]
[251.05429077 175.37107849]
[259.63613892 178.68827820]
[262.48297119 185.56149292]
[273.57431030 195.66014099]
[284.66561890 205.75878906]
[295.75692749 215.85743713]
[311.53936768 222.05024719]
[309.95761108 238.93023682]
[293.29940796 242.08314514]
[285.65829468 226.94876099]
[274.56695557 216.85011292]
[263.47564697 206.75146484]
[252.38433838 196.65280151]
[241.18856812 186.67008972]
[229.88957214 176.80436707]
[218.59056091 166.93862915]
[199.42497253 164.67813110]
[193.04649353 145.60029602]
[181.34687805 136.21313477]
[169.64724731 126.82598114]
[157.94763184 117.43881989]
[146.24800110 108.05165863]
[134.54838562 98.66449738]
[121.02359009 105.15295410]
[107.50000000 111.64082336]
[107.50000000 126.64082336]
[107.50000000 141.64082336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 15]
[5 14]
[6 13]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[23 106]
[24 105]
[28 102]
[29 101]
[30 100]
[32 99]
[33 98]
[35 96]
[36 95]
[37 94]
[38 93]
[40 54]
[41 53]
[42 52]
[57 91]
[58 90]
[60 88]
[61 87]
[62 86]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[113 146]
[114 145]
[115 144]
[116 143]
[117 142]
[118 141]
[122 139]
[123 138]
[124 137]
[126 136]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
