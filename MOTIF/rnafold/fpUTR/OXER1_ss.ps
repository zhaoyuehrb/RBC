%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCAGGGUUCCCCUUGGCCUGCAAACAGGAACACAGGGUGUUUCUCAGUGGCUGCGAGAAUGCUGAUGAAAACCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[-13.53024960 156.85795593]
[-25.00061607 166.52391052]
[-36.47098160 176.18986511]
[-47.94134903 185.85581970]
[-59.41171646 195.52177429]
[-64.10910797 203.65490723]
[-71.50392914 205.32649231]
[-83.33184814 214.55146790]
[-95.15977478 223.77644348]
[-106.98770142 233.00141907]
[-115.75881195 247.51017761]
[-132.12864685 243.09825134]
[-132.42077637 226.14682007]
[-116.21267700 221.17349243]
[-104.38475037 211.94851685]
[-92.55682373 202.72354126]
[-80.72890472 193.49856567]
[-69.07766724 184.05140686]
[-57.60730362 174.38545227]
[-46.13693619 164.71949768]
[-34.66657257 155.05354309]
[-23.19620514 145.38758850]
[-27.20932579 137.07894897]
[-29.55498886 128.14817810]
[-30.14353180 118.92662811]
[-28.95053673 109.75696564]
[-26.01782990 100.98042297]
[-21.45203018 92.92408752]
[-15.42066193 85.88871002]
[-8.14601898 80.13749695]
[0.10302840 75.88626099]
[9.02097702 73.29531097]
[18.27699661 72.46340179]
[27.52721024 73.42400360]
[36.42746353 76.14392853]
[44.64613342 80.52449799]
[51.87648392 86.40509796]
[57.84811020 93.56908417]
[62.33705139 101.75175476]
[76.88536072 98.09844208]
[91.43367004 94.44513702]
[98.05201721 89.46874237]
[106.60166168 90.93997192]
[121.27779388 87.83981323]
[135.95393372 84.73964691]
[150.63006592 81.63948822]
[158.61259460 76.69046783]
[165.91983032 78.71081543]
[180.70277405 76.16823578]
[195.48571777 73.62566376]
[204.61105347 61.00164413]
[219.63928223 58.63370132]
[231.61811829 67.41111755]
[246.40106201 64.86854553]
[261.18399048 62.32596970]
[267.10925293 48.08185577]
[279.80786133 39.32118607]
[295.22769165 38.83945847]
[308.44836426 46.79039001]
[315.25122070 60.63686752]
[313.46545410 75.96052551]
[303.66091919 87.87165070]
[288.96621704 92.56943512]
[274.07037354 88.55484009]
[263.72656250 77.10890961]
[248.94363403 79.65148163]
[234.16069031 82.19405365]
[225.80278015 94.46926880]
[210.84698486 97.25838470]
[198.02828979 88.40860748]
[183.24534607 90.95117950]
[168.46240234 93.49375153]
[153.73022461 96.31562805]
[139.05409241 99.41578674]
[124.37796021 102.51594543]
[109.70182037 105.61611176]
[95.08697510 108.99344635]
[80.53866577 112.64675903]
[65.99035645 116.30006409]
[62.54701996 138.79072571]
[49.23310852 157.17353821]
[29.03603172 167.40939331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[7 17]
[8 16]
[9 15]
[10 14]
[39 79]
[40 78]
[41 77]
[43 76]
[44 75]
[45 74]
[46 73]
[48 72]
[49 71]
[50 70]
[53 67]
[54 66]
[55 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
