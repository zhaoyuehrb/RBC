%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCUCCGCAUCCUCGUGGGCCCUGACCUUCUCUCUGAGAGCCGGGCAGAGGCUCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[24.04371262 255.51158142]
[13.38311100 258.11026001]
[2.72657824 255.86752319]
[-7.22026157 267.09518433]
[-17.16710091 278.32284546]
[-19.91541672 294.49005127]
[-35.38280487 299.93908691]
[-47.65774155 289.06445312]
[-44.11282730 273.05300903]
[-28.39476204 268.37600708]
[-18.44792366 257.14834595]
[-8.50108337 245.92068481]
[-11.44995403 227.00531006]
[0.18333972 211.43804932]
[19.73392105 208.82995605]
[27.95410919 196.28291321]
[36.17429733 183.73585510]
[32.89428329 169.25216675]
[41.05198669 156.41056824]
[56.26604462 153.06840515]
[64.48623657 140.52134705]
[72.70642090 127.97429657]
[80.92660522 115.42724609]
[89.14679718 102.88018799]
[97.06140137 90.13817596]
[104.66579437 77.20862579]
[112.27019501 64.27908325]
[114.03038788 54.93283081]
[120.56729126 50.92127228]
[128.78747559 38.37422180]
[137.00765991 25.82716942]
[137.45825195 7.59069347]
[153.10328674 -0.00215210]
[160.70768738 -12.93169689]
[168.31208801 -25.86124229]
[175.91647339 -38.79078674]
[178.73452759 -55.50889206]
[195.57939148 -57.42900848]
[202.08758545 -41.77399063]
[188.84602356 -31.18638992]
[181.24162292 -18.25684357]
[173.63722229 -5.32729912]
[166.03283691 7.60224581]
[168.75244141 19.62270737]
[162.21530151 30.54605293]
[149.55471802 34.04735565]
[141.33453369 46.59440994]
[133.11434937 59.14146042]
[125.19973755 71.88348389]
[117.59534454 84.81302643]
[109.99094391 97.74256897]
[108.86928558 106.04929352]
[101.69384766 111.10037994]
[93.47366333 123.64743042]
[85.25347137 136.19448853]
[77.03328705 148.74153137]
[68.81309509 161.28858948]
[71.82497406 176.57147217]
[63.30979919 189.17886353]
[48.72134781 191.95603943]
[40.50115967 204.50309753]
[32.28097153 217.05014038]
[37.24276352 227.20689392]
[37.33137131 238.42767334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[15 62]
[16 61]
[17 60]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 51]
[26 50]
[27 49]
[29 48]
[30 47]
[31 46]
[33 43]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
