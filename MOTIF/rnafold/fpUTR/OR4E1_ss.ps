%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAUGACCAAAUGAUUGAUGCAGAUACUGUGUUAUAUUAGACUUUUUUUCUAAUUCUUUACAGGUUGUCUAACAAAGAGA\
) } def
/len { sequence length } bind def

/coor [
[65.43772125 314.06723022]
[51.47529221 319.65487671]
[36.75466156 322.73287964]
[21.72317314 323.20773315]
[6.83761740 321.06500244]
[-7.44965124 316.36978149]
[-20.70445824 309.26477051]
[-32.52400589 299.96588135]
[-42.54911041 288.75567627]
[-50.47512054 275.97485352]
[-56.06117630 262.01181030]
[-59.13751984 247.29081726]
[-59.61066437 232.25927734]
[-57.46623611 217.37396240]
[-52.76939774 203.08723450]
[-45.66287994 189.83322144]
[-36.36264801 178.01473999]
[-25.15131950 167.99090576]
[-12.36959553 160.06634521]
[1.59410024 154.48187256]
[16.31542778 151.40719604]
[31.34702492 150.93576050]
[46.23209381 153.08187866]
[60.51829529 157.78033447]
[67.60488892 144.55989075]
[74.69148254 131.33943176]
[81.77807617 118.11899567]
[88.86466980 104.89854431]
[95.44590759 91.41940308]
[101.51235962 77.70086670]
[107.57881165 63.98233795]
[113.64526367 50.26380157]
[119.71171570 36.54526901]
[110.77326965 24.13352585]
[109.25751495 9.01402473]
[115.47189331 -4.74271488]
[127.65618896 -13.48336315]
[142.47976685 -14.94185638]
[148.54621887 -28.66039085]
[154.61267090 -42.37892532]
[160.67912292 -56.09745789]
[166.74557495 -69.81598663]
[172.81202698 -83.53452301]
[165.75955200 -97.49148560]
[169.37872314 -112.70449066]
[181.96066284 -121.99043274]
[197.56457520 -120.96476746]
[208.82276917 -110.11178589]
[210.41946411 -94.55593109]
[201.60073853 -81.64220428]
[186.53054810 -77.46807098]
[180.46409607 -63.74953842]
[174.39764404 -50.03100586]
[168.33119202 -36.31246948]
[162.26473999 -22.59393883]
[156.19828796 -8.87540436]
[165.09373474 3.07184100]
[166.82624817 17.96661758]
[160.83106995 31.82028770]
[148.62637329 40.87249374]
[133.43025208 42.61172104]
[127.36380005 56.33025360]
[121.29734802 70.04878998]
[115.23089600 83.76731873]
[109.16444397 97.48585510]
[109.96341705 102.94807434]
[107.50132751 108.42132568]
[102.08511353 111.98513794]
[94.99852753 125.20558929]
[87.91193390 138.42602539]
[80.82534027 151.64648438]
[73.73874664 164.86692810]
[85.56040192 174.16313171]
[95.58804321 185.37104797]
[103.51695251 198.15008545]
[109.10617828 212.11187744]
[112.18585968 226.83215332]
[112.66241455 241.86358643]
[110.52136230 256.74938965]
[105.82776642 271.03720093]
[98.72425079 284.29281616]
[89.42670441 296.11340332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
