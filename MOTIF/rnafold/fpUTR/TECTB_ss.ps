%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUCAGGCCCUGGAAGGACCGUAAACAUUUGGCCAGCUUGGUUUGGAUACCUGGCAGAGACCAGGUUCUGAGAAGCA\
) } def
/len { sequence length } bind def

/coor [
[93.21414948 330.83535767]
[89.88303375 315.77191162]
[95.24606323 301.30673218]
[107.59191132 292.05560303]
[106.41502380 277.10183716]
[105.23813629 262.14810181]
[104.06125641 247.19432068]
[102.88436890 232.24057007]
[101.70748138 217.28680420]
[92.99546051 205.20582581]
[99.62615967 190.84114075]
[98.44927216 175.88737488]
[97.27238464 160.93362427]
[96.09550476 145.97985840]
[94.91861725 131.02609253]
[78.92198944 123.32717133]
[69.64612579 108.19033051]
[70.04864502 90.44199371]
[57.25904083 82.60451508]
[48.04430771 80.70635223]
[44.12970734 74.19988251]
[31.65766335 65.86632538]
[19.18561935 57.53277588]
[4.67479229 63.02964020]
[-10.28679752 58.91497421]
[-19.94611168 46.77095032]
[-20.58894920 31.26719856]
[-11.96812344 18.36522102]
[2.60148001 13.02609539]
[17.51755333 17.30282402]
[27.04455948 29.55091476]
[27.51917267 45.06072998]
[39.99121857 53.39428329]
[52.46326065 61.72783661]
[65.09651947 69.81491089]
[77.88612366 77.65238953]
[93.26223755 69.29101562]
[110.72652435 70.44698334]
[119.06007385 57.97493744]
[127.39363098 45.50289154]
[128.62725830 29.72985458]
[142.13148499 23.44612885]
[150.46504211 10.97408485]
[158.79859924 -1.49795961]
[155.46989441 -16.94772720]
[164.11087036 -30.18061066]
[179.59497070 -33.34577560]
[192.73574829 -24.56538200]
[195.73703003 -9.04868507]
[186.81820679 3.99853492]
[171.27064514 6.83559370]
[162.93708801 19.30763817]
[154.60353088 31.77968216]
[153.96597290 46.66063690]
[139.86567688 53.83644485]
[131.53211975 66.30848694]
[123.19857025 78.78053284]
[128.84843445 87.50170135]
[131.34681702 97.58821106]
[130.42079163 107.93819427]
[126.17151642 117.42098999]
[119.06320190 125.00067139]
[109.87237549 129.84921265]
[111.04926300 144.80297852]
[112.22615051 159.75672913]
[113.40303802 174.71049500]
[114.57991791 189.66424561]
[123.37612152 202.81481934]
[116.66123962 216.10992432]
[117.83812714 231.06367493]
[119.01501465 246.01744080]
[120.19190216 260.97119141]
[121.36878967 275.92495728]
[122.54566956 290.87872314]
[136.18672180 298.08465576]
[143.74658203 311.53277588]
[142.81291199 326.93185425]
[133.68367004 339.36810303]
[119.27193451 344.87316895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[18 36]
[19 35]
[21 34]
[22 33]
[23 32]
[38 57]
[39 56]
[40 55]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
