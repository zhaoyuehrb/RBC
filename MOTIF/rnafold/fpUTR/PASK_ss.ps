%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCUGUGCGAUUGGUCGGUGGGAUAAAAGCGCGGAAGGGCUCCUUUCCGUGGUGUGUAGCCGGCUUGGCGUGACCCUCGCCUGAUCCAGUUGUUAGAGUUGGAAGCUUGGCAGUUGGCCUCCCUUCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[305.13433838 368.62805176]
[303.89190674 362.21536255]
[304.54541016 355.67526245]
[307.06317139 349.55996704]
[297.63247681 337.89538574]
[288.20181274 326.23083496]
[274.18319702 321.19815063]
[271.52365112 305.60208130]
[262.09295654 293.93753052]
[252.52618408 282.38430786]
[242.82463074 270.94403076]
[233.12307739 259.50375366]
[223.42153931 248.06347656]
[213.71998596 236.62319946]
[204.01843262 225.18292236]
[194.31689453 213.74264526]
[184.48190308 202.41688538]
[174.51483154 191.20716858]
[164.41703796 180.11508179]
[154.18992615 169.14210510]
[143.96281433 158.16912842]
[133.73568726 147.19616699]
[123.50857544 136.22319031]
[113.28145599 125.25022888]
[105.88733673 127.91613007]
[98.04636383 128.46321106]
[90.35367584 126.84994507]
[83.39313507 123.19877625]
[77.69305420 117.78682709]
[73.68606567 111.02486420]
[71.67628479 103.42612457]
[71.81626892 95.56733704]
[58.13222885 89.42348480]
[44.44818497 83.27962494]
[30.76414299 77.13577271]
[17.08009911 70.99191284]
[3.39605618 64.84806061]
[-10.28798676 58.70420456]
[-23.97203064 52.56034851]
[-37.65607452 46.41649246]
[-53.90690613 48.61706924]
[-63.72265625 35.47998428]
[-57.00572205 20.51953888]
[-40.66591263 19.12576294]
[-31.51221848 32.73245239]
[-17.82817459 38.87630463]
[-4.14413166 45.02016068]
[9.53991127 51.16401672]
[23.22395515 57.30787277]
[36.90799713 63.45172882]
[50.59204102 69.59558105]
[64.27608490 75.73944092]
[77.96012878 81.88329315]
[81.77745819 78.04755402]
[86.25038910 75.00161743]
[91.21800232 72.85506439]
[90.51491547 57.87155151]
[77.71417236 49.30142593]
[72.47551727 35.00422668]
[76.61116791 20.53493500]
[88.33358765 11.38491344]
[87.63050079 -3.59859967]
[86.92742157 -18.58211327]
[76.07971191 -30.40187263]
[78.69959259 -46.22956467]
[92.77732086 -53.92353439]
[107.51365662 -47.58163071]
[111.60415649 -32.06881714]
[101.91093445 -19.28519630]
[102.61401367 -4.30168343]
[103.31710052 10.68182945]
[115.84483337 18.69393921]
[121.31723785 32.71238708]
[117.44041443 47.43731689]
[105.49843597 57.16846848]
[106.20151520 72.15197754]
[126.29399872 88.92767334]
[124.25442505 115.02310944]
[134.48153687 125.99607849]
[144.70866394 136.96905518]
[154.93577576 147.94201660]
[165.16290283 158.91499329]
[175.39001465 169.88795471]
[183.61117554 174.08433533]
[185.72453308 181.24009705]
[195.69160461 192.44981384]
[203.81213379 196.83775330]
[205.75717163 204.04110718]
[215.45870972 215.48138428]
[225.16026306 226.92166138]
[234.86181641 238.36193848]
[244.56335449 249.80221558]
[254.26490784 261.24249268]
[263.96646118 272.68276978]
[271.98190308 277.25988770]
[273.75753784 284.50683594]
[283.18820190 296.17138672]
[297.88137817 302.03839111]
[299.86636353 316.80014038]
[309.29705811 328.46469116]
[318.72775269 340.12927246]
[342.43081665 346.13281250]
[346.62609863 369.52679443]
[357.83578491 379.49386597]
[369.04550171 389.46093750]
[380.25521851 399.42800903]
[391.46490479 409.39508057]
[406.54028320 406.22665405]
[420.42837524 412.46963501]
[427.88906860 425.53875732]
[426.24322510 440.31811523]
[437.45294189 450.28518677]
[448.66265869 460.25225830]
[464.69793701 460.75167847]
[474.18951416 473.68569946]
[469.85629272 489.13247681]
[455.02233887 495.24255371]
[441.06695557 487.32879639]
[438.69555664 471.46197510]
[427.48587036 461.49490356]
[416.27615356 451.52783203]
[401.79074097 454.89089966]
[387.93872070 449.00988770]
[380.11428833 435.94729614]
[381.49783325 420.60479736]
[370.28814697 410.63772583]
[359.07843018 400.67065430]
[347.86871338 390.70358276]
[336.65902710 380.73651123]
[330.78863525 382.98937988]
[324.47814941 383.46643066]
[318.25631714 382.10430908]
[312.65118408 378.99475098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 101]
[5 100]
[6 99]
[8 97]
[9 96]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[17 86]
[18 85]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[24 78]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[56 76]
[57 75]
[61 71]
[62 70]
[63 69]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
