%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCAAUGGCAGGCGCGGGGGAUGACGCCACGGACAUGGUGGCCGAGACCGGCGGGGUGGGGGACGUGUCGCGCGGCCGGGUGGCCUCGGUCGGUACCCUGGGCGCGGAGCAGCUGCCUCAUUAGUAUUCGUACCCACGAGGCGGCGCAGCGGGCCCUCGGGGACAGCGAGCGUCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[124.22201538 115.15094757]
[118.24969482 126.37631226]
[107.02296448 134.87837219]
[103.45246887 149.44721985]
[99.88196564 164.01608276]
[101.98427582 180.83917236]
[86.40061188 187.51641846]
[75.67032623 174.39021301]
[85.31311035 160.44558716]
[88.88361359 145.87672424]
[92.45410919 131.30787659]
[86.82062531 126.35672760]
[72.61151886 131.16310120]
[75.55364227 116.45444489]
[69.92015076 111.50330353]
[55.93033600 116.91487122]
[41.94051743 122.32643127]
[31.86111832 134.52136230]
[17.19957924 131.89675903]
[3.20976090 137.30831909]
[3.10090542 150.54830933]
[-1.49695957 162.93066406]
[-10.01432800 172.98422241]
[-21.41740417 179.52239990]
[-34.33354950 181.78324890]
[-47.21649551 179.51821899]
[-58.53146362 173.01925659]
[-66.93800354 163.08135986]
[-81.10534668 168.00949097]
[-95.27268219 172.93763733]
[-109.44001770 177.86576843]
[-123.60736084 182.79389954]
[-128.99591064 197.47373962]
[-142.58543396 205.21057129]
[-157.95939636 202.35131836]
[-167.85867310 190.24600220]
[-167.60911560 174.61041260]
[-157.32858276 162.82717896]
[-141.87120056 160.45999146]
[-128.53549194 168.62657166]
[-114.36815643 163.69842529]
[-100.20082092 158.77029419]
[-86.03347778 153.84216309]
[-71.86614227 148.91401672]
[-70.43971252 132.09982300]
[-61.78948212 117.54670715]
[-47.60875320 108.19787598]
[-30.71487045 105.96846771]
[-14.48951626 111.35339355]
[-2.20180106 123.31850433]
[11.78801632 117.90694427]
[20.86677170 106.09908295]
[36.52895737 108.33661652]
[50.51877594 102.92504883]
[64.50859070 97.51348877]
[87.64052582 74.24149323]
[112.28320312 82.27870941]
[124.58277893 73.69264984]
[136.88235474 65.10659027]
[136.11820984 51.32997513]
[142.21853638 39.07487869]
[153.49119568 31.50029373]
[166.92677307 30.49933624]
[179.00163269 36.22710419]
[191.44679260 27.85344887]
[203.89193726 19.47979164]
[216.33709717 11.10613632]
[228.78225708 2.73248076]
[234.17237854 -4.67362881]
[241.51370239 -5.67595482]
[254.10076904 -13.83473969]
[266.68783569 -21.99352264]
[279.27490234 -30.15230751]
[279.72222900 -46.58230209]
[293.30841064 -59.30821609]
[289.73791504 -73.87707520]
[286.16738892 -88.44593048]
[282.59689331 -103.01478577]
[279.02639771 -117.58364105]
[275.45590210 -132.15249634]
[271.88540649 -146.72134399]
[268.31491089 -161.29020691]
[256.58590698 -172.75154114]
[260.90881348 -188.57066345]
[276.83657837 -192.47421265]
[287.98410034 -180.44654846]
[282.88375854 -164.86070251]
[286.45425415 -150.29183960]
[290.02474976 -135.72299194]
[293.59524536 -121.15413666]
[297.16577148 -106.58528137]
[300.73626709 -92.01642609]
[304.30676270 -77.44757080]
[307.87725830 -62.87871552]
[320.67022705 -55.04672623]
[335.26919556 -58.49204254]
[342.92535400 -63.52068710]
[350.14831543 -61.86891556]
[364.80426025 -65.06311035]
[379.46020508 -68.25730896]
[394.11618042 -71.45150757]
[408.71514893 -74.89682770]
[423.25280762 -78.59224701]
[437.79049683 -82.28766632]
[452.32815552 -85.98308563]
[463.79681396 -96.88172913]
[478.03796387 -92.51841736]
[492.57565308 -96.21383667]
[500.68164062 -109.51537323]
[515.47753906 -113.05595398]
[528.10858154 -105.24616241]
[542.64624023 -108.94158173]
[550.21496582 -114.10091400]
[557.46520996 -112.57337952]
[572.06414795 -116.01869202]
[586.66314697 -119.46401215]
[601.26208496 -122.90932465]
[615.86102295 -126.35464478]
[630.46002197 -129.79995728]
[645.05895996 -133.24526978]
[659.65795898 -136.69059753]
[664.15692139 -151.30929565]
[675.29553223 -161.64508057]
[690.01422119 -164.99552917]
[704.33795166 -160.55848694]
[714.44940186 -149.62123108]
[729.04840088 -153.06654358]
[743.64733887 -156.51187134]
[755.20898438 -168.14205933]
[770.99041748 -163.68353271]
[774.75708008 -147.72282410]
[762.63415527 -136.67895508]
[747.09265137 -141.91290283]
[732.49371338 -138.46757507]
[717.89477539 -135.02226257]
[713.74011230 -120.71825409]
[702.91156006 -110.34533691]
[688.24786377 -106.76161957]
[673.66345215 -111.02684021]
[663.10327148 -122.09162903]
[648.50427246 -118.64630890]
[633.90533447 -115.20099640]
[619.30639648 -111.75567627]
[604.70739746 -108.31036377]
[590.10845947 -104.86504364]
[575.50946045 -101.41973114]
[560.91052246 -97.97441101]
[546.34167480 -94.40391541]
[531.80395508 -90.70849609]
[524.43566895 -77.81494904]
[509.74502563 -73.86017609]
[496.27105713 -81.67616272]
[481.73339844 -77.98074341]
[471.30456543 -67.34642029]
[456.02359009 -71.44541168]
[441.48590088 -67.74999237]
[426.94824219 -64.05457306]
[412.41055298 -60.35915375]
[409.23260498 -56.76383591]
[403.75323486 -55.14186478]
[397.31036377 -56.79555130]
[382.65441895 -53.60135269]
[367.99847412 -50.40715408]
[353.34249878 -47.21295929]
[338.71450806 -43.89307785]
[324.11553955 -40.44776154]
[312.06896973 -15.05798244]
[287.43368530 -17.56524086]
[274.84661865 -9.40645695]
[262.25955200 -1.24767292]
[249.67248535 6.91111135]
[237.15591431 15.17763615]
[224.71075439 23.55129242]
[212.26559448 31.92494774]
[199.82043457 40.29860306]
[187.37528992 48.67226028]
[187.31477356 65.07652283]
[177.39627075 78.35063171]
[161.36376953 83.15354919]
[145.46841431 77.40616608]
[133.16883850 85.99222565]
[120.86926270 94.57828522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[15 55]
[16 54]
[17 53]
[19 51]
[20 50]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[57 182]
[58 181]
[59 180]
[64 176]
[65 175]
[66 174]
[67 173]
[68 172]
[70 171]
[71 170]
[72 169]
[73 168]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[95 166]
[96 165]
[98 164]
[99 163]
[100 162]
[101 161]
[102 158]
[103 157]
[104 156]
[105 155]
[107 153]
[108 152]
[111 149]
[112 148]
[114 147]
[115 146]
[116 145]
[117 144]
[118 143]
[119 142]
[120 141]
[121 140]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
