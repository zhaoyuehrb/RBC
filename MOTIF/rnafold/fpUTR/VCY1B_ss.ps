%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUAUACACAGGGAGGCCAGGCAGCCUGGAGUUAGUCGACCGUUGCGAGACGUUGAGCUGCGGCAG\
) } def
/len { sequence length } bind def

/coor [
[36.26064682 246.44552612]
[28.49944496 259.40472412]
[17.40066719 269.65136719]
[3.86403990 276.35482788]
[-11.01308060 278.97167969]
[-26.02467537 277.28979492]
[-39.95381927 271.44552612]
[-51.67134094 261.91259766]
[-60.22735214 249.46386719]
[-64.92825317 235.10844421]
[-65.39296722 220.01007080]
[-61.58382416 205.39271545]
[-53.80960464 192.44132996]
[-42.70053864 182.20584106]
[-29.15718460 175.51597595]
[-14.27744293 172.91406250]
[0.73245370 174.61103821]
[14.65571976 180.46929932]
[24.12203789 168.83363342]
[33.58835983 157.19796753]
[33.93585968 152.12271118]
[37.70796585 147.31158447]
[44.48348618 144.98634338]
[54.96867371 134.25970459]
[65.45385742 123.53305817]
[75.93904877 112.80641174]
[86.42423248 102.07977295]
[71.44532013 101.28464508]
[58.71208191 93.35593414]
[51.38977432 80.26456451]
[51.29861069 65.26484680]
[58.46124268 52.08544159]
[71.09716797 44.00253296]
[86.06530762 43.02539825]
[99.64483643 49.39693069]
[108.46011353 61.53327942]
[110.31980896 76.41754913]
[104.76324463 90.34756470]
[118.89715576 85.32437134]
[133.03106689 80.30117798]
[147.16497803 75.27798462]
[161.29888916 70.25479126]
[168.62553406 64.24068451]
[176.19200134 65.34064484]
[190.53988647 60.96595764]
[204.88778687 56.59127045]
[215.67953491 44.24338913]
[231.71446228 47.68041611]
[236.49720764 63.36663437]
[225.10769653 75.16540527]
[209.26248169 70.93916321]
[194.91458130 75.31385040]
[180.56668091 79.68854523]
[166.32209778 84.38870239]
[152.18817139 89.41189575]
[138.05426025 94.43508911]
[123.92034912 99.45828247]
[109.78643799 104.48147583]
[97.15087891 112.56495667]
[86.66568756 123.29160309]
[76.18050385 134.01824951]
[65.69531250 144.74488831]
[55.21012878 155.47152710]
[45.22402573 166.66427612]
[35.75770950 178.29995728]
[26.29138947 189.93562317]
[34.85990143 202.37576294]
[39.57522583 216.72647095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 66]
[19 65]
[20 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
