%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGUAGAAGGAGGAGGAGCUCCGACUACAUUCUGUCCUUGUGCCUCUUGGACUUUUUUGUGUGUUUAGGUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[97.18708801 154.30337524]
[81.01550293 150.95446777]
[66.59506989 142.90547180]
[55.25593567 130.89883423]
[48.04404068 116.04206085]
[33.23828888 118.44823456]
[18.43253326 120.85440063]
[3.62677932 123.26056671]
[-5.61456537 135.79992676]
[-20.66398239 138.02920532]
[-32.56138611 129.14172363]
[-47.36713791 131.54788208]
[-62.17289352 133.95405579]
[-76.97864532 136.36022949]
[-86.01208496 149.32836914]
[-101.58403778 152.02833557]
[-114.45594025 142.85830688]
[-116.99112701 127.25867462]
[-107.68550873 114.48443604]
[-92.05995178 112.11431885]
[-79.38481903 121.55447388]
[-64.57906342 119.14830017]
[-49.77330780 116.74213409]
[-34.96755219 114.33596802]
[-26.49681664 102.13833618]
[-11.51595306 99.48722076]
[1.22061002 108.45481873]
[16.02636337 106.04864502]
[30.83211708 103.64247894]
[45.63787079 101.23630524]
[47.00741196 87.81167603]
[51.64057159 75.13768005]
[59.25200653 63.99485779]
[69.37295532 55.06945801]
[81.38011169 48.91116333]
[94.53399658 45.89923859]
[108.02451324 46.21918106]
[121.02082825 49.85128021]
[132.72254944 56.57184982]
[142.40901184 65.96700287]
[149.48365784 77.45811462]
[153.51080322 90.33750153]
[168.49862671 89.73351288]
[183.48646545 89.12952423]
[198.47430420 88.52553558]
[213.46214294 87.92154694]
[228.44996643 87.31755829]
[239.92730713 74.29389954]
[256.93298340 73.47743225]
[269.11734009 84.88527679]
[284.06869507 83.67827606]
[297.20150757 74.85561371]
[310.51010132 81.54370880]
[325.46148682 80.33670807]
[335.50912476 68.13751221]
[351.24783325 66.69931793]
[363.34011841 76.87537384]
[364.61184692 92.62841797]
[354.30850220 104.61243439]
[338.54287720 105.71752930]
[326.66848755 95.28807068]
[311.71710205 96.49506378]
[299.65371704 105.23139954]
[285.27569580 98.62963867]
[270.32434082 99.83663940]
[263.31265259 110.83754730]
[251.02960205 115.78430939]
[237.96917725 112.62108612]
[229.05395508 102.30538940]
[214.06613159 102.90937805]
[199.07829285 103.51336670]
[184.09045410 104.11735535]
[169.10261536 104.72134399]
[154.11479187 105.32533264]
[150.02037048 121.32443237]
[141.31204224 135.35653687]
[128.79302979 146.12733459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[8 27]
[11 24]
[12 23]
[13 22]
[14 21]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[50 65]
[51 64]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
