%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGGUCGGAGGCGGCGGUCUGUUCUCCGCUGAGGAGGAGCGGGGCAGAGGAGGGAGGCAGCGGGUGAGAGUUCAGAGUUCAGCAGCAGCAGCCCGAGCCC\
) } def
/len { sequence length } bind def

/coor [
[106.82930756 125.68115997]
[97.57835388 127.58502197]
[87.85875702 126.12511444]
[78.90026093 121.22176361]
[68.61885071 132.14387512]
[64.79367828 147.49569702]
[50.43621445 151.45959473]
[40.15480423 162.38171387]
[29.87339211 173.30381775]
[19.59197998 184.22593689]
[16.35662079 200.30276489]
[0.73171192 205.28215027]
[-11.20917892 194.04173279]
[-7.18228722 178.14468384]
[8.66986561 173.94451904]
[18.95127678 163.02241516]
[29.23268890 152.10029602]
[39.51409912 141.17817688]
[42.60387421 126.60757446]
[57.69673920 121.86246490]
[67.97814941 110.94034576]
[66.39520264 96.02410889]
[54.05044556 87.50313568]
[41.70568466 78.98216248]
[34.88681793 78.03388214]
[30.35401154 74.26367188]
[28.89410591 69.55522919]
[17.08635521 60.30444336]
[5.27860260 51.05366135]
[-6.52915001 41.80287552]
[-18.33690262 32.55209351]
[-30.14465332 23.30131149]
[-41.95240784 14.05052757]
[-57.21421814 17.45803642]
[-71.07186890 10.21238613]
[-76.98220825 -4.26525021]
[-72.15454102 -19.13897514]
[-58.86835861 -27.38586998]
[-43.39698029 -25.11200333]
[-33.04552078 -13.39102554]
[-32.70162201 2.24277544]
[-20.89387131 11.49355888]
[-9.08611870 20.74434090]
[2.72163320 29.99512482]
[14.52938557 39.24590683]
[26.33713722 48.49669266]
[38.14488983 57.74747467]
[50.22665787 66.63740540]
[62.57141495 75.15837860]
[74.91617584 83.67935181]
[102.48815155 73.54304504]
[121.48400116 91.18675232]
[136.45663452 90.28107452]
[152.56567383 78.34984589]
[169.58197021 87.32149506]
[184.47261047 85.51344299]
[199.36323547 83.70539856]
[209.10198975 71.54832458]
[224.22897339 69.92682648]
[235.75886536 79.28616333]
[250.64949036 77.47811890]
[263.41641235 68.13380432]
[276.98352051 74.28058624]
[291.87414551 72.47253418]
[299.47521973 59.07365799]
[313.34637451 52.79313660]
[328.08163452 55.84858322]
[338.07263184 66.86302948]
[352.96325684 65.05497742]
[367.85391235 63.24692535]
[382.74453735 61.43887329]
[389.36727905 47.50537109]
[402.48379517 39.38371277]
[417.90856934 39.66549683]
[430.71966553 48.26080322]
[436.82910156 62.42690277]
[434.28735352 77.64344788]
[423.90551758 89.05488586]
[408.99639893 93.01987457]
[394.31741333 88.27320099]
[384.55258179 76.32950592]
[369.66195679 78.13755798]
[354.77130127 79.94561005]
[339.88067627 81.75366211]
[332.81594849 94.83904266]
[319.24005127 101.33208466]
[304.26895142 98.55364227]
[293.68222046 87.36316681]
[278.79156494 89.17121887]
[267.08972168 98.38620758]
[252.45755005 92.36875153]
[237.56690979 94.17679596]
[228.61189270 106.02345276]
[213.53643799 108.06919861]
[201.17127991 98.59603119]
[186.28065491 100.40407562]
[171.39001465 102.21212769]
[165.70201111 110.94561768]
[155.90608215 115.10936737]
[145.23512268 113.06085205]
[137.36230469 105.25370789]
[122.38967896 106.15938568]
[119.86621094 114.06107330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[7 18]
[8 17]
[9 16]
[10 15]
[22 50]
[23 49]
[24 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[52 102]
[53 101]
[55 97]
[56 96]
[57 95]
[60 92]
[61 91]
[63 89]
[64 88]
[68 84]
[69 83]
[70 82]
[71 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
