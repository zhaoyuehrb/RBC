%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:48:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUGGAUUCCAAGCAGGCUAAAAAGAAAAAGAACUGAUUAGACCUCAGACGACCCACUAAACGGG\
) } def
/len { sequence length } bind def

/coor [
[99.65052795 261.01184082]
[99.58413696 245.74888611]
[106.15442657 231.97230530]
[118.05686951 222.41748047]
[114.62260437 207.81590271]
[111.18834686 193.21434021]
[107.75408936 178.61276245]
[97.49327850 171.81219482]
[94.66284180 159.41595459]
[101.36869812 148.13832092]
[98.61245728 133.39372253]
[84.27981567 129.49478149]
[73.05199432 119.77046204]
[67.14654541 106.14137268]
[67.72982025 91.29933929]
[74.68662262 78.17572784]
[86.64295197 69.36251831]
[83.88670349 54.61792374]
[81.13046265 39.87332535]
[78.03438568 25.19632721]
[74.60012817 10.59475613]
[71.16587067 -4.00681448]
[67.73161316 -18.60838509]
[54.57750320 -26.95147896]
[51.30268097 -41.80847168]
[59.33761215 -54.29748535]
[55.90335464 -68.89905548]
[41.54346085 -74.77895355]
[33.41083527 -87.99409485]
[34.63263321 -103.46298981]
[44.73904800 -115.23754120]
[59.84395981 -118.79018402]
[74.13922119 -112.75485992]
[82.12801361 -99.45227051]
[80.73847961 -83.99753571]
[70.50492096 -72.33331299]
[73.93918610 -57.73174286]
[86.69858551 -50.13351059]
[90.38941956 -35.37436676]
[82.33318329 -22.04264450]
[85.76744080 -7.44107294]
[89.20169830 7.16049767]
[92.63595581 21.76206779]
[97.39548492 27.75327301]
[95.87506104 37.11708450]
[98.63130188 51.86167908]
[101.38754272 66.60627747]
[115.72018433 70.50522614]
[126.94800568 80.22953796]
[132.85345459 93.85862732]
[132.27018738 108.70066071]
[125.31337738 121.82427216]
[113.35704803 130.63748169]
[116.11329651 145.38208008]
[128.41508484 158.86711121]
[122.35565948 175.17851257]
[125.78991699 189.78007507]
[129.22418213 204.38165283]
[132.65843201 218.98321533]
[147.57202148 222.23097229]
[159.59425354 231.63462830]
[166.33810425 245.32707214]
[166.46459961 260.58966064]
[159.94860840 274.39199829]
[148.08389282 283.99365234]
[133.22619629 287.48812866]
[118.32552338 284.18167114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 59]
[5 58]
[6 57]
[7 56]
[10 54]
[11 53]
[17 47]
[18 46]
[19 45]
[20 43]
[21 42]
[22 41]
[23 40]
[26 37]
[27 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
