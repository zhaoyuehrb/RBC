%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAGAUGGCGGCGUCCAAGGGAGGUUGAGGGCUCUGAGGAGGCGUUGAGAGGUUUCCGUACAGCCCGACCGUGCGGCUUUGGGGAUCCCAUCGCUCUGUGUUUCCUGCUCCAGGUUUCGCGUCUCGCAUCUUCCCAGACCCUCGGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[59.48988342 289.29791260]
[55.55836105 303.77349854]
[65.38709259 315.78082275]
[66.24736786 331.27404785]
[57.80838776 344.29568481]
[43.31511688 349.83868408]
[28.34051704 345.77163696]
[18.64262009 333.65838623]
[17.95046997 318.15676880]
[26.53021049 305.22741699]
[41.08275604 299.84197998]
[45.01428223 285.36639404]
[39.60313034 268.69946289]
[52.70275879 255.79771423]
[56.33818436 241.24491882]
[59.97360992 226.69213867]
[63.60903549 212.13934326]
[67.24446106 197.58656311]
[70.87989044 183.03376770]
[66.45787048 168.81071472]
[77.30912781 157.29721069]
[80.94454956 142.74443054]
[84.57997894 128.19163513]
[88.21540833 113.63884735]
[86.24343109 106.48498535]
[87.61108398 100.28284454]
[74.09654999 93.77458954]
[60.58201599 87.26633453]
[47.06748581 80.75807953]
[40.35945129 80.87256622]
[35.37911987 77.98069763]
[33.14270020 73.69879150]
[19.90487671 66.64471436]
[6.66705227 59.59063339]
[-6.57077122 52.53655243]
[-19.80859566 45.48247528]
[-35.62617874 45.82097626]
[-43.21963501 33.00736237]
[-56.45745850 25.95328522]
[-72.27504730 26.29178619]
[-79.86849976 13.47817326]
[-93.10632324 6.42409420]
[-106.34414673 -0.62998420]
[-119.58197021 -7.68406296]
[-132.81979370 -14.73814106]
[-146.05761719 -21.79221916]
[-159.95098877 -14.88179588]
[-175.24717712 -17.49065399]
[-186.06449890 -28.61563873]
[-188.24346924 -43.97896194]
[-180.94621277 -57.67311478]
[-166.97869873 -64.43241882]
[-151.71171570 -61.65777588]
[-141.01571655 -50.41610336]
[-139.00354004 -35.03004456]
[-125.76571655 -27.97596550]
[-112.52789307 -20.92188644]
[-99.29006958 -13.86780834]
[-86.05224609 -6.81372929]
[-72.81442261 0.24034932]
[-57.94369507 -0.60270667]
[-49.40338135 12.71546078]
[-36.16555786 19.76953888]
[-21.29483032 18.92648315]
[-12.75451660 32.24465179]
[0.48330745 39.29872894]
[13.72113132 46.35280991]
[26.95895386 53.40688705]
[40.19677734 60.46096420]
[53.57574081 67.24354553]
[67.09027100 73.75180054]
[80.60480499 80.26005554]
[94.11933899 86.76831055]
[109.11231995 86.30938721]
[122.20349121 78.98674011]
[135.29467773 71.66410065]
[148.38584900 64.34145355]
[161.47702026 57.01881409]
[171.75415039 46.09266663]
[178.26240540 32.57813263]
[173.27723694 17.82056427]
[180.07005310 4.20761919]
[194.16986084 -0.45403388]
[200.67811584 -13.96856689]
[207.18637085 -27.48309898]
[213.69462585 -40.99763107]
[215.11940002 -57.89160538]
[231.74757385 -61.19922638]
[239.52906799 -46.13653183]
[227.20915222 -34.48937607]
[220.70089722 -20.97484398]
[214.19264221 -7.46031094]
[207.68438721 6.05422211]
[212.83085632 19.98438835]
[206.42306519 33.78276062]
[191.77693176 39.08638763]
[185.26867676 52.60092163]
[189.70179749 58.65051270]
[198.56800842 70.74969482]
[203.00111389 76.79928589]
[217.84843445 74.66456604]
[232.69575500 72.52983856]
[247.54307556 70.39511871]
[254.84797668 56.83249664]
[268.57778931 50.24877548]
[283.37664795 52.97978973]
[293.60717773 63.77209854]
[308.45449829 61.63737869]
[323.30181885 59.50265503]
[338.14913940 57.36793137]
[352.96658325 49.12899399]
[364.98541260 61.08658600]
[356.82226562 75.94590759]
[340.28387451 72.21525574]
[325.43655396 74.34997559]
[310.58923340 76.48469543]
[295.74191284 78.61942291]
[288.96630859 91.85684204]
[275.53634644 98.64654541]
[260.50784302 96.19765472]
[249.67779541 85.24243927]
[234.83047485 87.37715912]
[219.98315430 89.51188660]
[205.13583374 91.64660645]
[190.88307190 91.47702789]
[179.34875488 86.66346741]
[171.81631470 78.88754272]
[168.79966736 70.10999298]
[155.70849609 77.43263245]
[142.61730957 84.75527191]
[129.52613831 92.07791901]
[116.43495941 99.40055847]
[131.04101562 95.98540497]
[145.30065918 100.63967896]
[155.07952881 112.01394653]
[157.54234314 126.81038666]
[151.97503662 140.73896790]
[139.99180603 149.76127625]
[125.06701660 151.26141357]
[111.52790070 144.80445862]
[103.29995728 132.26248169]
[102.76819611 117.27426910]
[99.13276672 131.82705688]
[95.49734497 146.37985229]
[91.86191559 160.93263245]
[96.02390289 176.19659424]
[85.43267822 186.66918945]
[81.79724884 201.22198486]
[78.16182709 215.77476501]
[74.52639771 230.32756042]
[70.89097595 244.88035583]
[67.25554657 259.43313599]
[73.22323608 270.91207886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[14 152]
[15 151]
[16 150]
[17 149]
[18 148]
[19 147]
[21 145]
[22 144]
[23 143]
[24 142]
[26 73]
[27 72]
[28 71]
[29 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[38 63]
[39 62]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[74 132]
[75 131]
[76 130]
[77 129]
[78 128]
[79 97]
[80 96]
[83 93]
[84 92]
[85 91]
[86 90]
[100 124]
[101 123]
[102 122]
[103 121]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
