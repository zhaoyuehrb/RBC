%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCAGCACAGAUUUCUUAUCGGCUUCCACACUGCGGAGCUGCAGCCCUCAGAAGUAAGCAAGGUUUCCUGCCGGGAGAAAAGGAUUUGAAGCAUUCCAGCCAAA\
) } def
/len { sequence length } bind def

/coor [
[86.30764771 170.08316040]
[95.84893799 157.18574524]
[94.96862793 142.21160889]
[94.08831024 127.23745728]
[87.95284271 125.13350677]
[82.46981049 121.66840363]
[77.93615723 117.02980042]
[74.59741974 111.46891785]
[72.63440704 105.28691101]
[72.15343475 98.81858826]
[73.18054199 92.41423798]
[75.66011047 86.42071533]
[79.45785522 81.16260529]
[84.36810303 76.92466736]
[79.60736847 62.70020294]
[74.84664154 48.47573471]
[70.08591461 34.25127029]
[65.32518005 20.02680206]
[60.56445312 5.80233622]
[54.78531265 -1.47977924]
[55.87942123 -8.91011620]
[51.53832245 -23.26820946]
[47.19722366 -37.62630463]
[42.85612488 -51.98439789]
[38.51502609 -66.34249115]
[33.66578674 -65.51819611]
[28.49095154 -65.71704865]
[23.21220589 -67.02991486]
[18.07318115 -69.49890137]
[13.32868099 -73.11253357]
[9.23290443 -77.80324554]
[6.02717447 -83.44747925]
[3.92774606 -89.86844635]
[-4.74590826 -102.10640717]
[-13.41956234 -114.34437561]
[-27.71200943 -121.12939453]
[-28.75888824 -135.98716736]
[-37.43254089 -148.22512817]
[-45.07186127 -153.52308655]
[-46.17496490 -160.95210266]
[-54.48561859 -173.43940735]
[-69.41243744 -180.23074341]
[-70.72485352 -196.57728577]
[-57.07276154 -205.66313171]
[-42.50026703 -198.14152527]
[-41.99830246 -181.75006104]
[-33.68764877 -169.26275635]
[-25.19458008 -156.89877319]
[-16.52092552 -144.66081238]
[-2.84887600 -138.75114441]
[-1.18160021 -123.01802826]
[7.49205399 -110.78006744]
[16.16570854 -98.54209900]
[23.63663292 -97.88233948]
[21.89197731 -112.78053284]
[15.39093208 -126.29853821]
[21.15749550 -140.14579773]
[35.33184814 -145.05372620]
[48.42645645 -137.73722839]
[51.67650986 -123.09355164]
[42.90710831 -110.92467499]
[38.57848358 -96.56282043]
[46.04940796 -95.90305328]
[56.73357773 -106.43151855]
[67.41774750 -116.95998383]
[74.45570374 -132.38410950]
[91.22534180 -129.89102173]
[93.47198486 -113.08658600]
[77.94620514 -106.27581024]
[67.26203918 -95.74735260]
[56.57786942 -85.21888733]
[52.87311935 -70.68359375]
[57.21421814 -56.32549667]
[61.55531693 -41.96740341]
[65.89641571 -27.60930824]
[70.23751068 -13.25121403]
[74.78891754 1.04160631]
[79.54964447 15.26607323]
[84.31037903 29.49053955]
[89.07110596 43.71500778]
[93.83184052 57.93947220]
[98.59256744 72.16394043]
[122.73945618 83.88341522]
[125.79810333 110.54917908]
[137.64231873 119.75321960]
[149.48654175 128.95726013]
[163.68154907 123.09233856]
[178.90513611 125.12657166]
[191.06222534 134.51277161]
[196.88262939 148.72608948]
[194.80068970 163.94322205]
[185.37641907 176.07083130]
[171.14492798 181.84664917]
[155.93440247 179.71702576]
[143.83639526 170.25479126]
[138.10520935 156.00526428]
[140.28250122 140.80148315]
[128.43827820 131.59744263]
[116.59405518 122.39340210]
[112.98044586 124.66445160]
[109.06245422 126.35713959]
[109.94277191 141.33128357]
[110.82308960 156.30543518]
[121.80988312 167.99601746]
[119.37745667 183.85360718]
[105.39174652 191.71359253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[33 53]
[34 52]
[35 51]
[37 49]
[38 48]
[40 47]
[41 46]
[63 71]
[64 70]
[65 69]
[84 99]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
