%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACCUUUUCACUUUACACACAUCAUCUUGGAUUGCCCAUUUUGCGUGGCUAAAAAGCAGAGCCAUGCCGCUGGGGAAGCAGUUGCGAUUUAGCC\
) } def
/len { sequence length } bind def

/coor [
[50.41215134 197.17706299]
[39.18848419 207.12841797]
[26.30621910 214.81263733]
[12.21714306 219.96025085]
[-2.58464074 222.39071655]
[-17.58003044 222.01881409]
[-32.24313354 218.85758972]
[-46.05971527 213.01788330]
[-58.54522324 204.70451355]
[-69.26178741 194.20903015]
[-77.83358002 181.89950562]
[-83.95998383 168.20764160]
[-87.42614746 153.61361694]
[-88.11051178 138.62924194]
[-85.98906708 123.78001404]
[-81.13623047 109.58670807]
[-73.72217560 96.54708099]
[-64.00691986 85.11843872]
[-52.33118057 75.70158386]
[-39.10442734 68.62677002]
[-24.79052544 64.14211273]
[-9.89146423 62.40488052]
[5.07024384 63.47600555]
[19.56988716 67.31792450]
[33.09896088 73.79589844]
[45.18300247 82.68273926]
[55.39821625 93.66679382]
[63.38635635 106.36283875]
[68.86727905 120.32563019]
[71.64806366 135.05799866]
[79.00882721 121.98821259]
[86.36959076 108.91843414]
[83.91790009 97.41299438]
[89.85412598 87.25685120]
[101.08211517 83.74713135]
[108.85800934 70.91999054]
[109.39541626 55.10791779]
[122.60963440 48.23524094]
[130.38552856 35.40810013]
[138.16140747 22.58095932]
[145.93730164 9.75381660]
[139.63934326 -2.62571883]
[140.32453918 -16.38926888]
[147.70339966 -27.89877319]
[159.73147583 -34.16586304]
[173.17471313 -33.62749863]
[181.35772705 -46.19882202]
[189.54075623 -58.77014160]
[197.72377014 -71.34146118]
[205.90679932 -83.91278839]
[214.08982849 -96.48410797]
[222.27284241 -109.05542755]
[230.45587158 -121.62674713]
[224.03536987 -135.65460205]
[226.24075317 -150.92352295]
[236.36828613 -162.56124878]
[251.18630981 -166.85421753]
[265.96646118 -162.43257141]
[275.99243164 -150.70722961]
[278.06497192 -135.41972351]
[271.52273560 -121.44821930]
[258.45333862 -113.25098419]
[243.02719116 -113.44372559]
[234.84416199 -100.87240601]
[226.66114807 -88.30108643]
[218.47811890 -75.72975922]
[210.29510498 -63.15843964]
[202.11207581 -50.58712006]
[193.92904663 -38.01579666]
[185.74603271 -25.44447517]
[192.10411072 -10.40383816]
[188.27185059 5.63908720]
[175.55044556 16.39538574]
[158.76445007 17.52970505]
[150.98855591 30.35684776]
[143.21266174 43.18398666]
[135.43678284 56.01113129]
[135.45555115 70.90572357]
[121.68515015 78.69588470]
[113.90925598 91.52302551]
[114.06284332 108.21968079]
[99.43936920 116.27919769]
[92.07860565 129.34898376]
[84.71784210 142.41876221]
[85.31689453 145.56967163]
[85.14842987 148.64250183]
[84.28274536 151.46023560]
[90.35449219 165.17642212]
[105.18539429 170.63719177]
[111.73513794 185.02038574]
[106.11788177 199.79272461]
[91.66624451 206.19003296]
[76.95411682 200.41691589]
[70.70995331 185.89843750]
[76.63830566 171.24818420]
[70.56655121 157.53198242]
[66.38120270 171.93624878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 84]
[31 83]
[32 82]
[35 80]
[36 79]
[38 77]
[39 76]
[40 75]
[41 74]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
