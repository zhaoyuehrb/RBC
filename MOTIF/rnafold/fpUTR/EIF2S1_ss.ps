%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUUCCGCAUGCGCGGUGGAGUGAGCGAAGCGCACGCUGAGGAGGAUCGGCGGCCGGUGAGGGGGAAGCAAGUCUGGUCUCUGUGAUUGAAGAAGUCGGCUCUGGGCUCCAGUGCGGGAAUCACACACAUACCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[115.89207458 202.89097595]
[125.61903381 190.13301086]
[124.95553589 175.14768982]
[124.29203033 160.16236877]
[123.62853241 145.17704773]
[122.96503448 130.19172668]
[108.53433990 126.09600067]
[94.10492706 122.00061798]
[85.66819000 134.40309143]
[77.23144531 146.80557251]
[68.79470825 159.20805359]
[68.12670135 175.59358215]
[53.47875214 182.96716309]
[39.91941452 173.74346924]
[41.39737320 157.41105652]
[56.39223099 150.77131653]
[64.82897186 138.36883545]
[73.26570892 125.96635437]
[81.70245361 113.56388092]
[77.69216156 107.22608948]
[62.70449829 107.83436584]
[69.67157745 94.55051422]
[65.66128540 88.21273041]
[50.84080505 90.52645874]
[36.02032471 92.84019470]
[21.19984436 95.15393066]
[8.75830269 104.92729187]
[-5.01012039 99.24575806]
[-19.83060074 101.55949402]
[-34.65108109 103.87322998]
[-49.36800766 112.29037476]
[-61.53026199 100.47868347]
[-53.54702759 85.52194214]
[-36.96481323 89.05274963]
[-22.14433479 86.73901367]
[-7.32385445 84.42527771]
[4.05762768 74.81741333]
[18.88611031 80.33345032]
[33.70658875 78.01971436]
[48.52706909 75.70597839]
[63.34754944 73.39225006]
[70.94314575 60.45752716]
[65.74360657 46.38753128]
[60.54406738 32.31753540]
[55.34452820 18.24753952]
[40.91893768 6.86176777]
[44.45920181 -10.29195118]
[38.94967651 -24.24348068]
[33.44015503 -38.19500732]
[27.93062973 -52.14653778]
[13.70837116 -58.49988937]
[8.31967545 -72.72721100]
[14.46427441 -86.24680328]
[8.95475006 -100.19833374]
[-5.26750898 -106.55168915]
[-10.65620518 -120.77900696]
[-4.51160622 -134.29859924]
[-10.02112961 -148.25013733]
[-25.08032608 -151.99182129]
[-35.03836823 -163.89212036]
[-36.06618118 -179.37512207]
[-27.76855659 -192.48728943]
[-13.33609486 -198.18673706]
[1.68162525 -194.28190613]
[11.50998497 -182.27427673]
[12.36977863 -166.78103638]
[3.93039846 -153.75965881]
[9.43992233 -139.80812073]
[23.16392326 -134.13473511]
[28.95010948 -120.06438446]
[22.90627861 -105.70785522]
[28.41580200 -91.75633240]
[42.13980484 -86.08293915]
[47.92598724 -72.01258850]
[41.88216019 -57.65605927]
[47.39168167 -43.70453262]
[52.90120697 -29.75300407]
[58.41073227 -15.80147552]
[69.41860962 -10.66798782]
[74.09793854 0.97476983]
[69.41452789 13.04800034]
[74.61406708 27.11799622]
[79.81360626 41.18799210]
[85.01313782 55.25798798]
[158.68908691 92.85093689]
[173.68908691 92.85093689]
[188.68908691 92.85093689]
[203.68908691 92.85093689]
[218.68908691 92.85093689]
[233.68908691 92.85093689]
[248.68908691 92.85093689]
[238.44445801 81.89431763]
[237.45359802 66.92707825]
[246.16445923 54.71557999]
[260.63906860 50.78036118]
[274.33377075 56.90044785]
[281.05746460 70.30908966]
[277.77056885 84.94453430]
[265.95785522 94.19080353]
[280.77835083 96.50453949]
[295.60684204 90.98850250]
[306.98831177 100.59636688]
[321.80880737 102.91010284]
[336.63726807 97.39406586]
[348.01876831 107.00193024]
[362.83923340 109.31566620]
[377.65972900 111.62940216]
[392.48019409 113.94313049]
[409.06240845 110.41232300]
[417.04565430 125.36907196]
[404.88339233 137.18075562]
[390.16647339 128.76361084]
[375.34597778 126.44988251]
[360.52551270 124.13614655]
[345.70501709 121.82241058]
[331.93661499 127.50394440]
[319.49505615 117.73058319]
[304.67459106 115.41684723]
[290.90615845 121.09838104]
[278.46463013 111.32501984]
[263.64413452 109.01128387]
[248.68908691 107.85093689]
[233.68908691 107.85093689]
[218.68908691 107.85093689]
[203.68908691 107.85093689]
[188.68908691 107.85093689]
[173.68908691 107.85093689]
[158.68908691 107.85093689]
[153.50439453 113.27026367]
[167.01679993 119.78295898]
[164.99822998 134.64651489]
[150.23834229 137.31965637]
[143.13504028 124.10890961]
[137.95034790 129.52822876]
[138.61384583 144.51354980]
[139.27735901 159.49887085]
[139.94085693 174.48419189]
[140.60435486 189.46951294]
[151.42080688 201.31788635]
[148.75910950 217.13859558]
[134.66111755 224.79534912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[5 135]
[6 134]
[8 19]
[9 18]
[10 17]
[11 16]
[23 41]
[24 40]
[25 39]
[26 38]
[28 36]
[29 35]
[30 34]
[42 84]
[43 83]
[44 82]
[45 81]
[47 78]
[48 77]
[49 76]
[50 75]
[53 72]
[54 71]
[57 68]
[58 67]
[85 128]
[86 127]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[99 121]
[100 120]
[102 118]
[103 117]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
