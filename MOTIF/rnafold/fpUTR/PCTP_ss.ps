%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUCCUGCCAAUGACGCUGGGGCAGCCGGGGCAGCCGGGGCAGCCCGGUCACCCCGCCCCCAGGCCCACACUAAGGGUGUCCGCGGCCUGCCCUCCAGGCGGAGGAGCCCGGACUGCGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[109.28903198 178.82417297]
[96.86230469 188.58900452]
[81.18067169 186.62384033]
[71.54776001 174.09457397]
[73.67861176 158.43460083]
[86.30902863 148.93469238]
[88.17417908 134.05110168]
[90.03933716 119.16751862]
[87.48291016 133.94807434]
[78.13194275 145.67663574]
[64.29219055 151.46119690]
[49.37625122 149.87541199]
[37.06209183 141.31027222]
[30.38613892 127.87779236]
[30.99453926 112.89012909]
[38.73727798 100.04295349]
[51.70515060 92.50410461]
[66.70054626 92.13251495]
[80.02499390 99.01898956]
[67.03461456 91.51898956]
[54.04423523 84.01898956]
[41.05385590 76.51898956]
[28.06347275 69.01898956]
[15.07309246 61.51899338]
[8.29456711 61.12751770]
[3.51121688 57.80855179]
[1.63553476 53.30747223]
[-10.96485424 45.16927719]
[-19.97860718 43.10579300]
[-23.77441788 36.66782761]
[-36.16799927 28.21802902]
[-48.56158066 19.76822662]
[-60.95516205 11.31842613]
[-76.29090118 14.04841614]
[-88.73938751 5.30256510]
[-91.24750519 -9.33454227]
[-103.64108276 -17.78434372]
[-116.03466797 -26.23414421]
[-128.42825317 -34.68394470]
[-140.82183838 -43.13374710]
[-153.21540833 -51.58354568]
[-169.60023499 -52.26881790]
[-176.95837402 -66.92453003]
[-167.72041321 -80.47413635]
[-151.38955688 -78.97897339]
[-144.76560974 -63.97712708]
[-132.37202454 -55.52732849]
[-119.97844696 -47.07752609]
[-107.58486938 -38.62772751]
[-95.19128418 -30.17792511]
[-82.79770660 -21.72812462]
[-68.25608826 -24.74091911]
[-55.56686020 -16.34816933]
[-52.50535965 -1.07515514]
[-40.11177826 7.37464571]
[-27.71819878 15.82444668]
[-15.32461643 24.27424812]
[-2.82666016 32.56888962]
[9.77372837 40.70708466]
[22.57309151 48.52861023]
[35.56347275 56.02861023]
[48.55385590 63.52861023]
[61.54423523 71.02861023]
[74.53461456 78.52861023]
[87.52499390 86.02861023]
[101.96436310 81.96600342]
[109.13816833 68.79267883]
[116.31198120 55.61935806]
[123.48578644 42.44603348]
[117.60469818 27.95649338]
[122.46237946 13.09254646]
[135.76518250 4.87249327]
[151.23194885 7.17759180]
[161.55972290 18.91944504]
[161.87205505 34.55390930]
[152.02146912 46.69886780]
[136.65911865 49.61984253]
[129.48530579 62.79316711]
[122.31149292 75.96649170]
[115.13768768 89.13981628]
[119.87836456 93.32723999]
[123.29891205 99.40820312]
[137.26202393 104.88832092]
[151.22512817 110.36843872]
[165.18823242 115.84854889]
[179.15133667 121.32866669]
[193.11444092 126.80878448]
[207.07754517 132.28889465]
[221.10789490 137.59451294]
[235.20327759 142.72482300]
[253.19937134 139.07131958]
[264.01577759 152.83093262]
[278.23468018 157.60823059]
[292.51205444 162.20790100]
[306.84564209 166.62922668]
[321.17922974 171.05055237]
[335.51281738 175.47189331]
[349.84643555 179.89321899]
[365.70529175 175.71853638]
[377.05639648 187.55427551]
[372.22265625 203.22485352]
[356.17663574 206.60972595]
[345.42510986 194.22680664]
[331.09149170 189.80548096]
[316.75790405 185.38415527]
[302.42431641 180.96282959]
[288.09072876 176.54150391]
[280.69067383 177.58781433]
[273.45739746 171.82714844]
[259.23849487 167.04985046]
[248.19979858 172.16256714]
[236.26852417 168.21456909]
[230.07298279 156.82020569]
[215.97758484 151.68991089]
[208.53457642 152.36607361]
[201.59744263 146.25199890]
[187.63433838 140.77189636]
[173.67121887 135.29177856]
[159.70811462 129.81166077]
[145.74501038 124.33154297]
[131.78190613 118.85142517]
[117.81880188 113.37131500]
[104.92292786 121.03266907]
[103.05776978 135.91625977]
[101.19261169 150.79985046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[27 59]
[28 58]
[30 57]
[31 56]
[32 55]
[33 54]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[66 80]
[67 79]
[68 78]
[69 77]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[87 117]
[88 116]
[89 114]
[90 113]
[92 110]
[93 109]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
