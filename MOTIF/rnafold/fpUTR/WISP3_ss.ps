%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUAUUAAAACGGAUCCUUAAAAAUGAAAGUGCAGGCUGAAAGUUGGUAGUGUGGGAGGUAGAGGGUGUGUGUUCUUGUGCAGAGGAGCGUGGGGUUUGCAGAGGAGACAGGGGAGCUUUGUGUACCCGGAGCA\
) } def
/len { sequence length } bind def

/coor [
[104.47665405 224.07589722]
[115.99501801 213.67845154]
[114.27893066 198.77693176]
[112.56284332 183.87542725]
[110.84676361 168.97390747]
[109.13067627 154.07240295]
[107.41459656 139.17088318]
[93.15489960 136.70637512]
[81.63230133 129.57185364]
[74.17330170 119.37205505]
[71.33760071 107.99774170]
[72.90420532 97.29972839]
[58.96516800 91.75867462]
[45.02613068 86.21762085]
[29.34387207 88.30982208]
[20.37499809 76.41829681]
[6.43596125 70.87724304]
[-7.50307560 65.33618927]
[-21.44211197 59.79513550]
[-35.38114929 54.25408554]
[-49.32018661 48.71303177]
[-56.22058868 58.26823425]
[-64.99178314 66.12943268]
[-75.22911835 71.93843079]
[-86.46121979 75.43162537]
[-98.17176056 76.45192719]
[-109.82315826 74.95585632]
[-120.88125610 71.01538086]
[-130.83981323 64.81443787]
[-139.24368286 56.64037704]
[-145.70960999 46.87063980]
[-149.94374084 35.95531082]
[-151.75491333 24.39641953]
[-151.06332397 12.72481728]
[-147.90406799 1.47581458]
[-160.95140076 -5.92467165]
[-176.77239990 -6.00313044]
[-184.02554321 -19.01240349]
[-197.07287598 -26.41289139]
[-210.12020874 -33.81337738]
[-223.16754150 -41.21386337]
[-237.23818970 -34.67197037]
[-252.46031189 -37.68302536]
[-262.98071289 -49.08921432]
[-264.75402832 -64.50462341]
[-257.09844971 -78.00171661]
[-242.95765686 -84.39058685]
[-227.76908875 -81.21457672]
[-217.37304688 -69.69493103]
[-215.76704407 -54.26119232]
[-202.71972656 -46.86070633]
[-189.67239380 -39.46022034]
[-176.62506104 -32.05973434]
[-161.73727417 -32.51060867]
[-153.55090332 -18.97200012]
[-140.50357056 -11.57151508]
[-126.94525146 -24.19468498]
[-109.92477417 -31.56243515]
[-91.39838409 -32.81207657]
[-73.50069427 -27.78501511]
[-58.29880142 -17.04670143]
[-47.55349350 -1.82307625]
[-42.51533508 16.13937950]
[-43.77913284 34.77399826]
[-29.84009743 40.31504822]
[-15.90106010 45.85610199]
[-1.96202362 51.39715195]
[11.97701263 56.93820572]
[25.91604996 62.47925568]
[40.60129547 59.99071884]
[50.56718445 72.27858734]
[64.50621796 77.81964111]
[78.44525909 83.36068726]
[106.71993256 67.13167572]
[138.58671570 89.97999573]
[151.80029297 82.88062286]
[165.01388550 75.78125000]
[178.22747803 68.68187714]
[191.44105530 61.58250046]
[199.93571472 48.23516083]
[214.80923462 49.02728271]
[228.02282715 41.92790985]
[241.23641968 34.82853699]
[254.44999695 27.72916222]
[267.66357422 20.62978745]
[280.87716675 13.53041267]
[280.66491699 -1.77362335]
[287.59942627 -15.41806889]
[300.08724976 -24.26752853]
[315.25875854 -26.28846359]
[329.62765503 -21.01647568]
[339.89202881 -9.66303062]
[343.69326782 5.16293335]
[340.15783691 20.05451965]
[330.09817505 31.58974838]
[315.82589722 37.11791229]
[300.62066650 35.36867523]
[287.97656250 26.74399948]
[274.76296997 33.84337616]
[261.54937744 40.94274902]
[248.33578491 48.04212189]
[235.12220764 55.14149857]
[221.90861511 62.24087143]
[214.35908508 75.08041382]
[198.54043579 74.79608917]
[185.32684326 81.89546204]
[172.11326599 88.99483490]
[158.89967346 96.09420776]
[145.68608093 103.19358826]
[144.48347473 118.14530182]
[156.39250183 127.26534271]
[168.30151367 136.38539124]
[180.21054077 145.50543213]
[192.11955261 154.62548828]
[204.02857971 163.74552917]
[220.28001404 168.57537842]
[220.13775635 185.52873230]
[203.80757141 190.08518982]
[194.90853882 175.65455627]
[182.99951172 166.53450012]
[171.09049988 157.41445923]
[159.18147278 148.29441833]
[147.27246094 139.17436218]
[135.36343384 130.05432129]
[122.31610870 137.45480347]
[124.03218842 152.35632324]
[125.74827576 167.25782776]
[127.46435547 182.15933228]
[129.18045044 197.06085205]
[130.89653015 211.96235657]
[144.47680664 219.46940613]
[151.02043152 233.53926086]
[148.01126099 248.76174927]
[136.60636902 259.28353882]
[121.19116974 261.05877686]
[107.69313049 253.40486145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[7 125]
[12 73]
[13 72]
[14 71]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[35 56]
[36 55]
[38 53]
[39 52]
[40 51]
[41 50]
[75 109]
[76 108]
[77 107]
[78 106]
[79 105]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
