%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCCUACAUGCUGGCCAUGGGGAAAUCACCACUGGGCACUAUAAGAAGCCCCUGGGCUCUCUGCAGAGCCAGCGGCUCCAGCUAAGAGGACAAG\
) } def
/len { sequence length } bind def

/coor [
[86.62557220 313.85037231]
[81.41854095 299.23303223]
[85.83011627 284.35629272]
[98.16394043 274.94052124]
[97.67821503 259.94839478]
[97.19248199 244.95626831]
[96.70675659 229.96412659]
[83.50891113 223.05888367]
[75.48607635 210.39041138]
[74.87751007 195.30744934]
[81.94669342 181.85667419]
[94.88376617 173.69705200]
[94.39804077 158.70491028]
[93.91230774 143.71278381]
[93.42658234 128.72064209]
[92.94085693 113.72851562]
[83.13464355 102.37782288]
[68.37199402 99.71995544]
[53.60934830 97.06208801]
[38.80559540 94.64362335]
[23.96462440 92.46519470]
[9.12365246 90.28676605]
[-1.62679255 101.47638702]
[-16.90707207 104.17687988]
[-30.84160995 97.34985352]
[-38.07228851 83.62042999]
[-35.81876373 68.26786804]
[-24.94756699 57.19552994]
[-9.63889027 54.66095734]
[4.22076607 61.63874817]
[11.30208111 75.44580078]
[26.14305305 77.62422943]
[40.98402405 79.80265808]
[48.19603348 77.61780548]
[56.26721191 82.29944611]
[71.02986145 84.95730591]
[85.79250336 87.61517334]
[73.02489471 79.74192047]
[65.18460846 66.95404053]
[63.95927811 52.00416946]
[69.61267090 38.11031723]
[80.92787933 28.26317596]
[95.46925354 24.58237648]
[110.10673523 27.86021996]
[121.68954468 37.39114380]
[127.72444916 51.12358093]
[126.91242218 66.10158539]
[119.42825317 79.10108948]
[106.88310242 87.32385254]
[119.53759766 79.27005005]
[132.19209290 71.21624756]
[144.84658813 63.16244888]
[152.33454895 49.22541428]
[167.22601318 48.91932678]
[179.88050842 40.86552429]
[192.53500366 32.81172180]
[205.18949890 24.75791931]
[210.88467407 17.36693954]
[218.38674927 16.65592766]
[231.29541016 9.01612568]
[244.20407104 1.37632287]
[257.11273193 -6.26347971]
[264.68264771 -20.81093788]
[281.07568359 -21.25851631]
[289.42810059 -7.14578533]
[281.14764404 7.00928783]
[264.75253296 6.64517736]
[251.84387207 14.28497982]
[238.93521118 21.92478180]
[226.02656555 29.56458473]
[213.24330139 37.41241455]
[200.58880615 45.46621704]
[187.93431091 53.52001953]
[175.27981567 61.57382202]
[168.69699097 74.93479156]
[152.90039062 75.81694031]
[140.24589539 83.87074280]
[127.59140015 91.92454529]
[114.93690491 99.97834778]
[107.93298340 113.24278259]
[108.41871643 128.23492432]
[108.90444183 143.22705078]
[109.39017487 158.21917725]
[109.87590027 173.21131897]
[123.31401062 180.51641846]
[131.23904419 193.48139954]
[131.60806274 208.57212830]
[124.42208862 221.73335266]
[111.69889069 229.47840881]
[112.18461609 244.47053528]
[112.67034912 259.46267700]
[113.15607452 274.45480347]
[126.07351685 283.05242920]
[131.43881226 297.61242676]
[127.18888092 312.53616333]
[114.95791626 322.08514404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 92]
[5 91]
[6 90]
[7 89]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 37]
[18 36]
[19 35]
[20 33]
[21 32]
[22 31]
[49 79]
[50 78]
[51 77]
[52 76]
[54 74]
[55 73]
[56 72]
[57 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
