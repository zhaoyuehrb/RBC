%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGAGGCGGAGCGAGGCUGGAGGCGCGGGAGGGCAGCGAGAGGUUCGCGGGUGCAGCGCACAGGAGACC\
) } def
/len { sequence length } bind def

/coor [
[138.71507263 339.69250488]
[140.12815857 324.55740356]
[147.23005676 311.11746216]
[158.93777466 301.42224121]
[154.48707581 287.09771729]
[150.03639221 272.77322388]
[136.77511597 266.08932495]
[132.05743408 251.62565613]
[139.15802002 237.76133728]
[134.70733643 223.43684387]
[130.25663757 209.11233521]
[115.13931274 202.06974792]
[109.54291534 186.00579834]
[117.31045532 170.49783325]
[112.24761200 156.37806702]
[107.18476868 142.25830078]
[102.12192535 128.13854980]
[97.05908203 114.01878357]
[86.51662445 104.83465576]
[88.82115936 91.04405975]
[83.75831604 76.92429352]
[70.11355591 73.99017334]
[59.83585739 64.71011353]
[55.59601974 51.64258575]
[58.42224121 38.30996323]
[67.45330048 28.24914932]
[63.00260544 13.92464733]
[58.24473572 -0.30077600]
[53.18189240 -14.42053604]
[38.78523254 -20.94064140]
[33.29393387 -35.76026154]
[39.96588898 -50.08718109]
[54.84273911 -55.42149353]
[69.09832001 -48.59844208]
[74.27503967 -33.66602325]
[67.30165100 -19.48337936]
[72.36449432 -5.36361933]
[77.75141144 0.03278798]
[77.32710266 9.47395515]
[81.77780151 23.79845619]
[97.36683655 28.46758842]
[107.28860474 41.57291794]
[107.55836487 58.17244339]
[97.87807465 71.86145020]
[102.94091797 85.98121643]
[113.48337555 95.16534424]
[111.17884064 108.95594025]
[116.24168396 123.07570648]
[121.30452728 137.19546509]
[126.36737061 151.31521606]
[131.43022156 165.43498230]
[144.35279846 169.83825684]
[152.18414307 180.78019714]
[152.18405151 194.03942871]
[144.58114624 204.66165161]
[149.03182983 218.98614502]
[153.48252869 233.31065369]
[167.18980408 240.70985413]
[171.49937439 255.30033875]
[164.36088562 268.32254028]
[168.81158447 282.64703369]
[173.26226807 296.97152710]
[188.40284729 298.32489014]
[201.87068176 305.37368774]
[211.61206055 317.04306030]
[216.14146423 331.55349731]
[214.76820374 346.69229126]
[207.70169067 360.15084839]
[196.01951599 369.87683105]
[181.50312805 374.38714600]
[166.36616516 372.99398804]
[152.91691589 365.90975952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[6 60]
[9 57]
[10 56]
[11 55]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[20 45]
[21 44]
[26 40]
[27 39]
[28 37]
[29 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
