%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUCGUUCCCAGCAGGCCCUGCGCGCGGCAACAUGGCGGGGUCCAGGUGGAGGUCUUGAGGCUAUCAGAUCGGU\
) } def
/len { sequence length } bind def

/coor [
[132.48933411 165.41047668]
[124.47234344 152.73262024]
[116.45535278 140.05476379]
[108.43836975 127.37691498]
[93.65386963 127.93614960]
[80.56198883 121.04436493]
[72.65452576 108.53971863]
[72.04054260 93.75739288]
[78.88378143 80.64006805]
[70.86679077 67.96221924]
[62.84980392 55.28437042]
[54.83281708 42.60651779]
[39.70064545 44.27348709]
[25.40357208 39.22565079]
[14.75950050 28.51472473]
[9.84162903 14.30291462]
[11.57477283 -0.57343119]
[19.56196976 -13.16986561]
[11.54498196 -25.84771729]
[3.52799487 -38.52556992]
[-4.48899269 -51.20341873]
[-12.50597954 -63.88127136]
[-20.52296829 -76.55912018]
[-28.53995514 -89.23697662]
[-36.55694199 -101.91482544]
[-51.61989594 -99.67266083]
[-66.29081726 -103.75726318]
[-78.02788544 -113.46092987]
[-84.79756927 -127.10245514]
[-85.42699432 -142.31835938]
[-79.80710602 -156.47239685]
[-68.91157532 -167.11228943]
[-54.62812805 -172.39460754]
[-39.43144989 -171.40417480]
[-25.95446587 -164.31257629]
[-16.53214073 -152.34848022]
[-12.79694748 -137.58473206]
[-15.39603329 -122.57924652]
[-23.87909126 -109.93180847]
[-15.86210346 -97.25395966]
[-7.84511614 -84.57611084]
[0.17187133 -71.89826202]
[8.18885899 -59.22040558]
[16.20584679 -46.54255676]
[24.22283363 -33.86470413]
[32.23982239 -21.18685341]
[47.04412842 -23.00289154]
[61.22715378 -18.19132233]
[71.95856476 -7.65577221]
[77.07231903 6.55231333]
[75.50373840 21.63298035]
[67.51066589 34.58953094]
[75.52765656 47.26738358]
[83.54464722 59.94523239]
[91.56163025 72.62308502]
[106.34613037 72.06385040]
[119.43801117 78.95563507]
[127.34547424 91.46028137]
[127.95945740 106.24260712]
[121.11621857 119.35993195]
[129.13320923 132.03778076]
[137.15019226 144.71563721]
[145.16717529 157.39347839]
[160.05372620 154.43453979]
[175.00321960 157.05690002]
[187.99389648 164.90589905]
[197.26885986 176.92004395]
[201.57373047 191.47450256]
[200.32633972 206.60092163]
[193.69535828 220.25357056]
[182.57760620 230.58602905]
[168.47662354 236.20092773]
[153.29949951 236.33889771]
[139.09878540 230.98127747]
[127.79501343 220.85264587]
[120.91693115 207.32279968]
[119.39475250 192.22155762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[9 55]
[10 54]
[11 53]
[12 52]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
