%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAGGCAGAGAGGAAAGGCGAGGGGUGUUGACGCCAGGAAGGUUCCAUCUUGGUUAAGGGCAGGAGUCCCUUACGGACUUGUCUGAGGAAAGACAGGAAAGCGCCAGCAUCUCCACCUUCCCCGGAAGCCUCCCUUUGCCAGGCAGAAAGGGUUUCCC\
) } def
/len { sequence length } bind def

/coor [
[128.21847534 468.55905151]
[118.11604309 454.42349243]
[114.17645264 437.46554565]
[117.02420044 420.25494385]
[126.25317383 405.41027832]
[140.48429871 395.20046997]
[136.71994019 380.68051147]
[132.95558167 366.16052246]
[129.19122314 351.64056396]
[125.42687225 337.12057495]
[121.66251373 322.60061646]
[117.89815521 308.08065796]
[113.15141296 302.36614990]
[114.20495605 293.24060059]
[110.72462463 278.64996338]
[107.24429321 264.05929565]
[103.67462921 260.81765747]
[102.13464355 255.28105164]
[103.92462921 248.83158875]
[101.01622009 234.11624146]
[98.10781097 219.40090942]
[82.32784271 210.19398499]
[78.16758728 192.07800293]
[88.70403290 176.38076782]
[85.22370148 161.79011536]
[81.74337006 147.19946289]
[78.26303864 132.60879517]
[67.60482025 122.05406952]
[52.98090363 118.71625519]
[38.35698700 115.37844086]
[23.73306847 112.04062653]
[11.17278671 123.33309174]
[-5.47641659 124.91696167]
[-19.65654182 116.36665344]
[-25.89994812 101.20954132]
[-40.58620834 98.15770721]
[-55.27246857 95.10586548]
[-69.95873260 92.05402374]
[-84.64499664 89.00218201]
[-99.33125305 85.95034027]
[-114.01751709 82.89850616]
[-125.41056061 93.43312073]
[-140.82374573 95.22570038]
[-154.33038330 87.58696747]
[-160.73690796 73.45416260]
[-157.57986450 58.26164246]
[-146.07321167 47.85123825]
[-130.64147949 46.22596359]
[-117.21850586 54.01077271]
[-110.96567535 68.21224213]
[-96.27941132 71.26408386]
[-81.59315491 74.31592560]
[-66.90689087 77.36775970]
[-52.22063065 80.41960144]
[-37.53437042 83.47144318]
[-22.84810829 86.52328491]
[-13.82002449 76.65001678]
[-0.98541927 72.50597382]
[12.32409573 75.27961731]
[22.59757996 84.34886932]
[27.07088280 97.41670990]
[41.69480133 100.75452423]
[56.31871796 104.09233093]
[70.94263458 107.43014526]
[63.50432587 85.80383301]
[73.57609558 59.53710938]
[69.81173706 45.01713562]
[66.04737854 30.49716377]
[62.28302002 15.97719193]
[58.51866150 1.45721865]
[54.75430679 -13.06275368]
[41.71097565 -22.40358543]
[41.02547836 -38.43198776]
[53.22366714 -48.85234070]
[68.94813538 -45.67104340]
[76.13641357 -31.32851219]
[69.27427673 -16.82711220]
[73.03863525 -2.30713940]
[76.80299377 12.21283340]
[80.56735229 26.73280716]
[84.33171082 41.25277710]
[88.09606934 55.77275085]
[103.07822418 56.50419998]
[108.23907471 42.41996765]
[113.39992523 28.33573341]
[118.56077576 14.25149918]
[111.68611908 0.02073436]
[116.96649933 -14.87534523]
[131.26914978 -21.59915924]
[146.10856628 -16.16158676]
[152.68078613 -1.78864527]
[147.08662415 12.99245548]
[132.64500427 19.41234970]
[127.48415375 33.49658203]
[122.32330322 47.58081818]
[117.16245270 61.66505051]
[122.93383789 66.45474243]
[140.24797058 80.82382965]
[153.13969421 73.15547943]
[166.03141785 65.48713684]
[170.00833130 48.47660065]
[184.75427246 39.75497437]
[200.92770386 44.28190613]
[213.66734314 36.36347580]
[220.91943359 21.65500259]
[237.29887390 20.85140610]
[245.95590210 34.77935791]
[237.98490906 49.11097717]
[221.58576965 49.10311890]
[208.84613037 57.02154922]
[207.69253540 69.88446808]
[199.20234680 79.87317657]
[186.31585693 83.18134308]
[173.69976807 78.37885284]
[160.80804443 86.04720306]
[147.91632080 93.71555328]
[144.42848206 108.69300079]
[136.70098877 120.86053467]
[126.12333679 129.17253113]
[114.28123474 133.15911865]
[102.74137115 132.93412781]
[92.85369873 129.12846375]
[96.33403015 143.71913147]
[99.81436157 158.30978394]
[103.29469299 172.90043640]
[114.49478912 177.06324768]
[122.19785309 186.03967285]
[124.56359863 197.50646973]
[121.11373138 208.56915283]
[112.82315063 216.49249268]
[115.73155975 231.20783997]
[118.63996887 245.92317200]
[121.83494568 260.57894897]
[125.31527710 275.16961670]
[128.79560852 289.76028442]
[132.41812134 304.31628418]
[136.18247986 318.83624268]
[139.94683838 333.35623169]
[143.71119690 347.87619019]
[147.47555542 362.39617920]
[151.23991394 376.91613770]
[155.00427246 391.43612671]
[167.80513000 392.22860718]
[179.84432983 396.59744263]
[190.14538574 404.17755127]
[197.87580872 414.34371948]
[202.41445923 426.26229858]
[203.40136719 438.95953369]
[200.76632690 451.40112305]
[194.73373413 462.57647705]
[185.80355835 471.58071899]
[174.70989990 477.68807983]
[177.61830139 492.40341187]
[180.52671814 507.11877441]
[189.52941895 521.48498535]
[178.21685791 534.11279297]
[162.95089722 526.73803711]
[165.81138611 510.02716064]
[162.90296936 495.31182861]
[159.99455261 480.59649658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 142]
[7 141]
[8 140]
[9 139]
[10 138]
[11 137]
[12 136]
[14 135]
[15 134]
[16 133]
[19 132]
[20 131]
[21 130]
[24 125]
[25 124]
[26 123]
[27 122]
[28 64]
[29 63]
[30 62]
[31 61]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[83 96]
[84 95]
[85 94]
[86 93]
[98 116]
[99 115]
[100 114]
[103 110]
[104 109]
[152 160]
[153 159]
[154 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
