%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUCGGGUAGAGGCUCCCGGGACCUGCGUGCUGCCGAGAGAGGAAGCGAAGGGCACCAUCUUUGUAUUUUGUGUC\
) } def
/len { sequence length } bind def

/coor [
[47.46825790 145.94662476]
[45.13816833 144.78108215]
[31.33847427 150.66056824]
[17.53878403 156.54006958]
[3.73909187 162.41957092]
[-10.06060028 168.29907227]
[-23.61235619 174.72946167]
[-36.89419556 181.70030212]
[-50.17603683 188.67115784]
[-52.28474808 204.04428101]
[-63.05109787 215.21859741]
[-78.33520508 217.89735413]
[-92.26001740 211.05050659]
[-99.47116089 197.31082153]
[-97.19580078 181.96148682]
[-86.30886841 170.90461731]
[-70.99660492 168.39181519]
[-57.14688492 175.38931274]
[-43.86504364 168.41847229]
[-30.58320427 161.44761658]
[-28.27714539 156.97439575]
[-22.99306107 154.05204773]
[-15.94009876 154.49937439]
[-2.14040732 148.61988831]
[11.65928459 142.74038696]
[25.45897675 136.86088562]
[39.25866699 130.98138428]
[52.39744186 123.74449158]
[64.74220276 115.22351837]
[77.08695984 106.70255280]
[77.50160980 92.01538086]
[86.43845367 80.35270691]
[100.51228333 76.13225555]
[114.39206696 80.95269012]
[126.73683167 72.43171692]
[139.08158875 63.91074753]
[146.04362488 49.70368576]
[160.91323853 48.84144211]
[173.25799561 40.32047272]
[185.60276794 31.79950142]
[197.94752502 23.27853012]
[201.11611938 10.58935642]
[211.80496216 3.77872729]
[223.85018921 6.11480856]
[236.52803040 -1.90217876]
[240.20501709 -14.45347404]
[251.15942383 -20.82818413]
[263.10079956 -18.00898552]
[276.09118652 -25.50898552]
[281.61560059 -40.57086945]
[296.88079834 -45.50574112]
[310.17666626 -36.52798462]
[311.30371094 -20.52456665]
[299.39736938 -9.77194309]
[283.59118652 -12.51860332]
[270.60079956 -5.01860332]
[262.82812500 10.58135128]
[244.54502869 10.77567291]
[231.86717224 18.79265976]
[224.72894287 34.69293594]
[206.46849060 35.62328720]
[194.12373352 44.14426041]
[181.77897644 52.66522980]
[169.43421936 61.18619919]
[163.35516357 74.78379059]
[147.60255432 76.25550842]
[135.25779724 84.77648163]
[122.91304016 93.29744720]
[122.49839020 107.98461914]
[113.56154633 119.64729309]
[99.48771667 123.86774445]
[85.60793304 119.04730988]
[73.26316833 127.56828308]
[60.91841507 136.08924866]
[59.32367325 140.27571106]
[56.75750732 143.45924377]
[53.64112473 145.46060181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 20]
[8 19]
[9 18]
[28 74]
[29 73]
[30 72]
[34 68]
[35 67]
[36 66]
[38 64]
[39 63]
[40 62]
[41 61]
[44 59]
[45 58]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
