%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAGGGGUGUGUCGGCCGCCCGCGCCGUUCCUCCGCCCCUCGGUCCCGCGGCCACACGCAGCUAGCCGGAGCCCGGACCAGGCGCCUGUGCCUCCUCCUCGUCCCUCGCCGCGUCCGCGAAGCCUGGAGCCGGCGGGAGCCCCGCGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.86338043 141.16860962]
[88.08108521 126.18902588]
[99.30608368 116.23726654]
[91.91711426 114.95153809]
[79.69313049 123.64488983]
[67.46914673 132.33824158]
[55.24517059 141.03158569]
[43.02118683 149.72492981]
[30.79720688 158.41827393]
[18.57322502 167.11163330]
[6.34924507 175.80497742]
[7.01273632 194.87049866]
[-3.80541158 210.40242004]
[-21.63564491 216.29627991]
[-39.29688644 210.36653137]
[-50.97000504 219.78663635]
[-62.64311981 229.20674133]
[-74.31623840 238.62684631]
[-74.43463898 254.26397705]
[-84.61598969 266.13302612]
[-100.05297089 268.62976074]
[-113.45670319 260.57531738]
[-118.49835968 245.77276611]
[-112.79742432 231.21141052]
[-99.04570770 223.76666260]
[-83.73634338 226.95372009]
[-72.06322479 217.53361511]
[-60.39010620 208.11351013]
[-48.71699142 198.69342041]
[-51.39177704 187.76158142]
[-49.75891113 176.57429504]
[-44.01905441 166.77412415]
[-34.97871399 159.81465149]
[-23.93712997 156.74487305]
[-12.49959755 158.05122375]
[-2.34410262 163.58099365]
[9.87987804 154.88764954]
[22.10385895 146.19429016]
[34.32783890 137.50094604]
[46.55182266 128.80760193]
[58.77580261 120.11425781]
[70.99978638 111.42090607]
[83.22376251 102.72756195]
[92.04054260 90.59230804]
[96.53099060 76.28022003]
[101.02143860 61.96812820]
[93.95936584 48.08414841]
[98.71719360 33.63362503]
[111.99697113 26.98657799]
[116.48741913 12.67448902]
[120.97785950 -1.63759983]
[125.46830750 -15.94968891]
[129.95875549 -30.26177788]
[128.81808472 -34.59057236]
[129.12037659 -38.63853455]
[130.59170532 -41.97735977]
[132.84504700 -44.31566620]
[135.43618774 -45.52444077]
[141.07093811 -59.42586136]
[146.70570374 -73.32728577]
[152.34045410 -87.22870636]
[150.35386658 -102.92469025]
[162.30549622 -111.81331635]
[167.94026184 -125.71473694]
[165.95365906 -141.41072083]
[177.90530396 -150.29934692]
[183.54005432 -164.20077515]
[182.99897766 -170.88558960]
[185.56628418 -176.03869629]
[189.69515991 -178.54386902]
[195.88865662 -192.20552063]
[202.08213806 -205.86717224]
[194.38471985 -217.34136963]
[193.38529968 -231.01339722]
[199.23896790 -243.28923035]
[210.31340027 -250.99510193]
[223.64241028 -252.19787598]
[230.11151123 -265.73120117]
[236.58061218 -279.26452637]
[231.55273438 -294.00759888]
[238.30610657 -307.64013672]
[252.39234924 -312.34262085]
[258.86145020 -325.87591553]
[265.33053589 -339.40924072]
[271.79965210 -352.94256592]
[266.30099487 -367.75946045]
[272.96582031 -382.08969116]
[287.84002686 -387.43139648]
[302.09896851 -380.61541748]
[307.28311157 -365.68557739]
[300.31677246 -351.49948120]
[285.33297729 -346.47348022]
[278.86386108 -332.94015503]
[272.39477539 -319.40682983]
[265.92568970 -305.87350464]
[271.11245728 -291.95831299]
[264.74465942 -278.14144897]
[250.11393738 -272.79541016]
[243.64483643 -259.26208496]
[237.17573547 -245.72877502]
[245.45208740 -231.58325195]
[243.66941833 -215.12486267]
[232.33140564 -202.83570862]
[215.74378967 -199.67369080]
[209.55030823 -186.01203918]
[203.35681152 -172.35038757]
[197.44148254 -158.56602478]
[191.80671692 -144.66459656]
[194.19635010 -129.96293640]
[181.84167480 -120.07998657]
[176.20692444 -106.17856598]
[178.59654236 -91.47689819]
[166.24188232 -81.59394836]
[160.60711670 -67.69252777]
[154.97236633 -53.79110718]
[149.33761597 -39.88968277]
[144.27084351 -25.77132988]
[139.78039551 -11.45924187]
[135.28994751 2.85284710]
[130.79949951 17.16493607]
[126.30905914 31.47702408]
[133.41136169 44.51898956]
[129.06129456 59.09745026]
[115.33352661 66.45857239]
[110.84307861 80.77066040]
[106.35263062 95.08275604]
[116.32582855 94.41610718]
[126.47531128 99.98954010]
[133.78445435 111.52541351]
[142.35346985 123.83686829]
[150.92250061 136.14831543]
[159.49151611 148.45977783]
[165.38717651 151.65675354]
[168.30230713 156.62139893]
[168.14642334 161.44833374]
[176.20947266 174.09693909]
[184.27253723 186.74552917]
[192.33558655 199.39413452]
[200.39863586 212.04273987]
[214.01127625 222.14880371]
[208.06851196 238.02708435]
[191.16564941 236.71211243]
[187.75004578 220.10578918]
[179.68698120 207.45719910]
[171.62393188 194.80859375]
[163.56086731 182.15998840]
[155.49781799 169.51138306]
[147.18006897 157.02879333]
[138.61105347 144.71734619]
[130.04202271 132.40588379]
[121.47299957 120.09443665]
[114.08403015 118.80871582]
[121.28764343 131.96575928]
[115.49258423 145.80113220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[15 29]
[16 28]
[17 27]
[18 26]
[44 126]
[45 125]
[46 124]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[58 116]
[59 115]
[60 114]
[61 113]
[63 111]
[64 110]
[66 108]
[67 107]
[70 106]
[71 105]
[72 104]
[77 100]
[78 99]
[79 98]
[82 95]
[83 94]
[84 93]
[85 92]
[129 151]
[130 150]
[131 149]
[132 148]
[135 147]
[136 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
