%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUGGAGGGGAAGCGAGGAGGCGGGGAAGGGGCGGGCCCCAGGAGCAGGCGGGCGGGGCUCCCCGCCCUCCAGCGCGCCCGGAGGCUACCACUCCCUGCAG\
) } def
/len { sequence length } bind def

/coor [
[-20.07947350 374.77850342]
[-23.32007599 389.50134277]
[-29.99054718 403.02050781]
[-39.70307922 414.55004883]
[-51.89299011 423.41961670]
[-65.85158539 429.11358643]
[-80.76731873 431.30087280]
[-95.77301788 429.85433960]
[-109.99626923 424.85809326]
[-122.61014557 416.60256958]
[-132.88130188 405.56777954]
[-140.21258545 392.39523315]
[-144.17774963 377.85079956]
[-144.54627991 362.78002930]
[-141.29675293 348.05917358]
[-134.61808777 334.54403687]
[-124.89857483 323.02038574]
[-112.70328522 314.15820312]
[-98.74124146 308.47271729]
[-83.82418823 306.29446411]
[-68.81936646 307.75009155]
[-54.59914780 312.75497437]
[-46.38484955 300.20407104]
[-38.17055130 287.65316772]
[-29.95625114 275.10223389]
[-21.74195290 262.55133057]
[-13.52765274 250.00042725]
[-5.31335402 237.44952393]
[-8.60016251 222.96737671]
[-0.44848740 210.12196350]
[14.76400280 206.77264404]
[22.97830200 194.22174072]
[19.96574974 184.24009705]
[23.09879684 174.06340027]
[31.54813194 167.22518921]
[42.59607315 166.24284363]
[51.56024551 154.21606445]
[60.52441788 142.18927002]
[69.48859406 130.16249084]
[78.26831818 118.00039673]
[86.86154938 105.70583344]
[88.25955200 91.79406738]
[100.84388733 85.70093536]
[109.43711853 73.40637207]
[111.00120544 57.66266632]
[124.63421631 51.66347504]
[133.22744751 39.36891174]
[133.88441467 19.33555412]
[151.48184204 11.57027912]
[159.30957031 -1.22529602]
[159.91094971 -17.03506851]
[173.15286255 -23.85422325]
[180.98059082 -36.64979935]
[188.80830383 -49.44537354]
[196.63603210 -62.24094772]
[204.46376038 -75.03652191]
[212.29148865 -87.83209991]
[220.11920166 -100.62767029]
[219.99484253 -117.02635193]
[234.26947021 -125.09896088]
[248.25857544 -116.54109192]
[247.57136536 -100.15634918]
[232.91477966 -92.79994965]
[225.08705139 -80.00437164]
[217.25933838 -67.20880127]
[209.43161011 -54.41322327]
[201.60388184 -41.61764908]
[193.77616882 -28.82207489]
[185.94844055 -16.02649879]
[185.90695190 -1.13195145]
[172.10513306 6.60242796]
[164.27742004 19.39800262]
[167.59297180 29.28312492]
[164.77172852 39.55064011]
[156.53486633 46.64334106]
[145.52201843 47.96214294]
[136.92878723 60.25671005]
[135.97933960 75.12102509]
[121.73168182 81.99960327]
[113.13845062 94.29416656]
[111.74044800 108.20593262]
[99.15611267 114.29906464]
[90.56288147 126.59362793]
[88.14894104 135.58468628]
[81.51538086 139.12666321]
[72.55120850 151.15344238]
[63.58703232 163.18023682]
[54.62285995 175.20701599]
[53.35526657 195.21102905]
[35.52920914 202.43603516]
[27.31491089 214.98693848]
[30.33395767 230.26840210]
[21.82469940 242.87979126]
[7.23755407 245.66381836]
[-0.97674513 258.21472168]
[-9.19104385 270.76562500]
[-17.40534401 283.31655884]
[-25.61964226 295.86746216]
[-33.83394241 308.41836548]
[-42.04824066 320.96926880]
[-31.77039719 331.99783325]
[-24.43113327 345.16592407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[31 91]
[32 90]
[36 88]
[37 87]
[38 86]
[39 85]
[40 83]
[41 82]
[43 80]
[44 79]
[46 77]
[47 76]
[49 72]
[50 71]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
