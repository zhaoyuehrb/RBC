%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUACUUGAAGACCAAUUAGAGUCCGGGAAGCGCGGCGGGGCCUCCAGACCGGGGCGGGCUUAAGGGUGACAUCUGCGCUUUAAAGGGUCCGGGUCAGCUGACUCCCGACUCUGUGGAGUCUAGCUGCCAGGGUCGCGGCAGCUGCGGGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[-0.45466495 65.34745026]
[-1.11337876 53.89212418]
[-14.20265198 46.56607819]
[-27.29192543 39.24003601]
[-40.38119888 31.91399002]
[-53.54310989 24.71926880]
[-66.77635193 17.65659142]
[-80.00959015 10.59391403]
[-93.24282837 3.53123665]
[-106.47606659 -3.53144097]
[-113.17615509 -3.69487095]
[-118.02934265 -6.78534460]
[-120.08914185 -11.15065670]
[-133.02920532 -18.73713493]
[-145.96926880 -26.32361412]
[-158.90933228 -33.91009521]
[-174.02365112 -30.14242554]
[-187.03865051 -38.02053070]
[-190.53739929 -52.45293427]
[-203.47746277 -60.03941345]
[-216.41752625 -67.62589264]
[-229.35760498 -75.21237183]
[-242.29766846 -82.79885101]
[-255.23773193 -90.38533020]
[-268.17779541 -97.97180939]
[-283.99606323 -98.27671051]
[-291.06225586 -111.38846588]
[-304.00231934 -118.97494507]
[-316.94238281 -126.56142426]
[-329.88247681 -134.14790344]
[-344.04904175 -128.09690857]
[-358.88876343 -131.50802612]
[-368.75769043 -142.86886597]
[-370.02926636 -157.68510437]
[-382.96932983 -165.27157593]
[-395.90939331 -172.85806274]
[-409.25671387 -165.38835144]
[-424.45050049 -165.60101318]
[-437.41171265 -173.33879089]
[-444.71078491 -186.43763733]
[-444.47485352 -201.33093262]
[-457.41491699 -208.91740417]
[-470.35501099 -216.50389099]
[-483.29507446 -224.09036255]
[-496.23513794 -231.67684937]
[-509.17520142 -239.26332092]
[-522.19049072 -246.71995544]
[-535.27978516 -254.04600525]
[-549.83654785 -248.33328247]
[-564.64318848 -253.36296082]
[-572.70843506 -266.76016235]
[-570.22418213 -282.19915771]
[-558.36340332 -292.39010620]
[-542.72637939 -292.52117920]
[-530.69641113 -282.53045654]
[-527.95373535 -267.13528442]
[-514.86450195 -259.80923462]
[-507.45019531 -259.28372192]
[-501.58871460 -252.20338440]
[-488.64865112 -244.61691284]
[-475.70858765 -237.03042603]
[-462.76852417 -229.44395447]
[-449.82846069 -221.85746765]
[-436.88839722 -214.27099609]
[-424.00744629 -221.75077820]
[-409.01226807 -221.77902222]
[-395.92984009 -214.24798584]
[-388.32357788 -201.09346008]
[-388.32293701 -185.79812622]
[-375.38284302 -178.21165466]
[-362.44277954 -170.62516785]
[-348.89282227 -176.75184631]
[-334.15914917 -173.68872070]
[-323.93478394 -162.40530396]
[-322.29598999 -147.08796692]
[-309.35592651 -139.50149536]
[-296.41586304 -131.91500854]
[-283.47576904 -124.32853699]
[-268.58306885 -124.56626892]
[-260.59130859 -110.91187286]
[-247.65126038 -103.32539368]
[-234.71118164 -95.73891449]
[-221.77111816 -88.15243530]
[-208.83105469 -80.56596375]
[-195.89099121 -72.97948456]
[-182.95092773 -65.39300537]
[-168.64813232 -69.38875580]
[-155.41699219 -61.87932587]
[-151.32286072 -46.85016251]
[-138.38279724 -39.26368332]
[-125.44272614 -31.67720222]
[-112.50266266 -24.09072304]
[-99.41338348 -16.76467896]
[-86.18014526 -9.70200157]
[-72.94690704 -2.63932395]
[-59.71367264 4.42335367]
[-46.48043442 11.48603058]
[-39.05710983 11.86307049]
[-33.05515289 18.82471657]
[-19.96587944 26.15076256]
[-6.87660694 33.47680664]
[6.21266603 40.80285263]
[23.44811058 34.75559235]
[39.93875885 43.32306290]
[45.07241440 61.51382065]
[58.44432068 68.31030273]
[71.81622314 75.10678101]
[85.18813324 81.90326691]
[98.56003571 88.69974518]
[113.23016357 91.82820892]
[128.21139526 91.07814026]
[143.19262695 90.32807159]
[158.17387390 89.57801056]
[173.15510559 88.82794189]
[186.62826538 79.47882080]
[201.34400940 86.71614838]
[202.16403198 103.09478760]
[188.24478149 111.76578522]
[173.90516663 103.80917358]
[158.92393494 104.55924225]
[143.94270325 105.30931091]
[128.96147156 106.05937958]
[113.98023224 106.80944061]
[109.11721039 120.99926758]
[120.48912048 130.78086853]
[131.86102295 140.56246948]
[143.23292542 150.34407043]
[154.60484314 160.12567139]
[165.97674561 169.90727234]
[177.34864807 179.68887329]
[188.72055054 189.47048950]
[203.78993225 185.77003479]
[218.14364624 191.66502380]
[226.26235962 204.88870239]
[225.02430725 220.35630798]
[214.90551758 232.12022400]
[199.79687500 235.65698242]
[185.50796509 229.60662842]
[177.53317261 216.29565430]
[178.93894958 200.84239197]
[167.56704712 191.06079102]
[156.19514465 181.27919006]
[144.82322693 171.49758911]
[133.45132446 161.71597290]
[122.07942200 151.93437195]
[110.70751190 142.15277100]
[99.33560944 132.37117004]
[89.26682281 121.93070221]
[87.21599579 110.35977936]
[91.76354980 102.07165527]
[78.39164734 95.27516937]
[65.01974487 88.47869110]
[51.64783859 81.68220520]
[38.27593231 74.88572693]
[27.84502602 80.72711182]
[16.01022339 80.78082275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[5 99]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[13 92]
[14 91]
[15 90]
[16 89]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[27 78]
[28 77]
[29 76]
[30 75]
[34 71]
[35 70]
[36 69]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 57]
[48 56]
[105 154]
[106 153]
[107 152]
[108 151]
[109 150]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
[124 147]
[125 146]
[126 145]
[127 144]
[128 143]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
