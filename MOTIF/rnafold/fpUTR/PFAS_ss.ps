%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGACGUAACAAACGCGCGCGACGAUUCGAGGUGCUCUGUGGCCGCGAGUGCAUCUUCCACGAACCUAAUUCAUCUCUCCAGCAAAGGACACAUCUCUCCAGCAAAGGACACCUCUCUCCAGCAAAGGACACCUGCAGAG\
) } def
/len { sequence length } bind def

/coor [
[77.24084473 104.52756500]
[62.37280273 102.54225922]
[47.50476456 100.55695343]
[32.63672638 98.57164764]
[17.76868820 96.58633423]
[12.13766956 110.03913116]
[3.28357935 121.61156464]
[-8.20831680 130.54930115]
[-21.58107948 136.27177429]
[-35.95594406 138.40995789]
[-50.39007568 136.83012390]
[-63.93840408 131.64219666]
[-75.71549988 123.19210815]
[-84.95343781 112.03878784]
[-91.05188751 98.91712189]
[-105.81755829 101.55815125]
[-120.58322144 104.19918060]
[-135.34889221 106.84020996]
[-143.31970215 111.46515656]
[-150.47016907 109.37255096]
[-165.29064941 111.68628693]
[-177.73219299 121.45964813]
[-191.50061035 115.77811432]
[-206.32109070 118.09185028]
[-221.14157104 120.40558624]
[-224.55020142 123.37960815]
[-228.35340881 124.90889740]
[-232.03215027 125.05164337]
[-235.14318848 124.03378296]
[-237.36877441 122.20798492]
[-252.33575439 123.20283508]
[-267.30273438 124.19767761]
[-282.70596313 131.28120422]
[-293.77670288 118.44083405]
[-284.50283813 104.24817657]
[-268.29757690 109.23070526]
[-253.33059692 108.23585510]
[-238.36361694 107.24101257]
[-223.45530701 105.58510590]
[-208.63482666 103.27136993]
[-193.81434631 100.95763397]
[-182.43286133 91.34976959]
[-167.60438538 96.86580658]
[-152.78390503 94.55207062]
[-137.98991394 92.07453918]
[-123.22425079 89.43350983]
[-108.45858765 86.79248810]
[-93.69291687 84.15145874]
[-90.02416992 61.50296783]
[-77.65272522 42.18041229]
[-86.89345551 30.36479187]
[-96.13419342 18.54917145]
[-111.76769257 18.19197273]
[-123.47985840 7.83054304]
[-125.74056244 -7.64276457]
[-117.48236084 -20.92192841]
[-102.60453796 -25.73693275]
[-88.13193512 -19.81428146]
[-80.89807892 -5.95046663]
[-84.31857300 9.30843925]
[-75.07783508 21.12405968]
[-65.83710480 32.93967819]
[-55.05382538 27.99901199]
[-43.46679306 25.41505051]
[-31.58524513 25.30579948]
[-19.93228149 27.68041229]
[-9.02184486 32.43858337]
[0.66394168 39.37479401]
[8.69608974 48.18716812]
[14.71773624 58.49062729]
[18.46000290 69.83369446]
[19.75399780 81.71829987]
[34.62203598 83.70360565]
[49.49007416 85.68891144]
[64.35810852 87.67422485]
[79.22615051 89.65953064]
[88.90169525 75.30442810]
[108.08139801 70.12946320]
[128.33456421 79.77197266]
[141.26927185 72.17638397]
[154.20399475 64.58078766]
[163.25846863 46.62867737]
[182.54187012 47.12918854]
[195.12794495 38.96888351]
[196.80183411 28.12079239]
[204.05462646 20.17809868]
[214.27836609 17.63487816]
[223.99165344 21.10566139]
[236.92637634 13.51006699]
[249.86109924 5.91447210]
[251.23513794 -9.54164696]
[261.45700073 -21.21611786]
[276.59616089 -24.61986923]
[290.83129883 -18.44408607]
[298.68872070 -5.06348610]
[297.14709473 10.37681770]
[286.79919434 21.93971443]
[271.62399292 25.17903328]
[257.45669556 18.84919167]
[244.52197266 26.44478607]
[231.58724976 34.04037857]
[223.39445496 51.50400925]
[203.28825378 51.55496216]
[190.70217896 59.71527100]
[189.45286560 69.95408630]
[182.59829712 77.95458984]
[172.24780273 80.87972260]
[161.79959106 77.51550293]
[148.86486816 85.11109924]
[135.93014526 92.70669556]
[134.28436279 100.02389526]
[149.21965027 98.63211823]
[155.15855408 112.40634918]
[143.89367676 122.31102753]
[130.99278259 114.65828705]
[129.34700012 121.97548676]
[137.78373718 134.37796021]
[146.22047424 146.78044128]
[154.65721130 159.18292236]
[168.81655884 166.24150085]
[169.57756042 181.11665344]
[178.01429749 193.51911926]
[186.45103455 205.92160034]
[201.76205444 204.70996094]
[215.62071228 211.33064270]
[224.29907227 224.00273132]
[225.46270752 239.31747437]
[218.79861450 253.15530396]
[206.09939575 261.79391479]
[190.78108215 262.90954590]
[176.96420288 256.20208740]
[168.36546326 243.47586060]
[167.29785156 228.15411377]
[174.04855347 214.35833740]
[165.61181641 201.95587158]
[157.17507935 189.55339050]
[143.61918640 183.38191223]
[142.25474548 167.61965942]
[133.81799316 155.21717834]
[125.38125610 142.81469727]
[116.94451904 130.41223145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[15 48]
[16 47]
[17 46]
[18 45]
[20 44]
[21 43]
[23 41]
[24 40]
[25 39]
[30 38]
[31 37]
[32 36]
[50 62]
[51 61]
[52 60]
[79 110]
[80 109]
[81 108]
[83 104]
[84 103]
[88 101]
[89 100]
[90 99]
[116 141]
[117 140]
[118 139]
[119 138]
[121 136]
[122 135]
[123 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
