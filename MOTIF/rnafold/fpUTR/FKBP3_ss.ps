%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCCCUAGGGGGCGGGGCGAUGCCGAACUGCGGCGGGCUGGCUCAGUAAAGCGGAGGCAGCGGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[68.15919495 130.57302856]
[55.73155212 138.97264099]
[43.30390930 147.37226868]
[30.87626266 155.77189636]
[18.44861794 164.17150879]
[6.02097321 172.57113647]
[-6.40667152 180.97074890]
[-18.83431625 189.37037659]
[-31.26196098 197.77000427]
[-37.94651031 212.74493408]
[-54.28326797 214.17405701]
[-63.46637726 200.58721924]
[-56.04904175 185.96138000]
[-39.66158295 185.34236145]
[-27.23393822 176.94273376]
[-14.80629349 168.54310608]
[-2.37864852 160.14349365]
[10.04899597 151.74386597]
[22.47664070 143.34425354]
[34.90428543 134.94462585]
[47.33193207 126.54500580]
[59.75957489 118.14537811]
[55.97792435 103.25632477]
[57.52770996 87.97290039]
[64.22123718 74.14604950]
[75.24786377 63.45033264]
[69.06934357 49.78190613]
[62.89082336 36.11347580]
[56.71230316 22.44504929]
[42.27060699 15.45813847]
[38.86961746 -0.22028042]
[49.11828613 -12.56306648]
[65.15470886 -12.10189056]
[74.67711639 0.80947298]
[70.38072968 16.26653099]
[76.55924988 29.93495750]
[82.73777008 43.60338593]
[88.91629028 57.27181244]
[109.92272949 56.98737335]
[128.68164062 66.44541931]
[140.94407654 83.50367737]
[155.60740662 80.34348297]
[170.27073669 77.18329620]
[184.93406677 74.02310944]
[196.79440308 63.55205917]
[210.86610413 68.43432617]
[225.52943420 65.27413940]
[240.19276428 62.11394501]
[252.05311584 51.64289856]
[266.12481689 56.52516556]
[280.78814697 53.36497498]
[294.99792480 44.11736679]
[307.81781006 55.21183777]
[300.70578003 70.60195923]
[283.94833374 68.02830505]
[269.28500366 71.18849182]
[258.47348022 81.43350220]
[243.35295105 76.77727509]
[228.68962097 79.93746185]
[214.02630615 83.09765625]
[203.21478271 93.34266663]
[188.09425354 88.68643951]
[173.43092346 91.84662628]
[158.76759338 95.00681305]
[144.10427856 98.16699982]
[143.26008606 108.78130341]
[139.89881897 118.88465881]
[134.21604919 127.88921356]
[126.54242706 135.27104187]
[117.32442474 140.60063171]
[107.09841156 143.56787109]
[96.45937347 144.00012207]
[86.02634430 141.87222290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[26 38]
[27 37]
[28 36]
[29 35]
[41 65]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[48 58]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
