%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:05 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RDH11)
} def

/sequence { (\
AAUUUGAAUUGGGGCGUGUCUAGAAAGAGAAGCCAUAGUCGGCGAGCAACGCUGGAGCAUCCCGCUCUGGUGCCGCUGCAGCCGGCAGAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.075380849 ubox
2 9 0.082726648 ubox
2 36 0.014443986 ubox
3 8 0.076829308 ubox
3 12 0.039517221 ubox
3 28 0.003929462 ubox
3 29 0.003758256 ubox
3 30 0.003494478 ubox
3 35 0.014788621 ubox
3 88 0.008521572 ubox
3 89 0.058798112 ubox
3 90 0.020810031 ubox
4 11 0.050814432 ubox
4 12 0.030658623 ubox
4 13 0.003452072 ubox
4 27 0.004230658 ubox
4 28 0.005539330 ubox
4 29 0.003750234 ubox
4 37 0.009288527 ubox
4 87 0.010446142 ubox
4 88 0.063015230 ubox
4 89 0.029819408 ubox
4 90 0.011438288 ubox
5 11 0.033823630 ubox
5 12 0.040675006 ubox
5 26 0.004240939 ubox
5 27 0.005685472 ubox
5 28 0.003757136 ubox
5 35 0.006766507 ubox
5 37 0.012204433 ubox
5 41 0.005520472 ubox
5 87 0.060723537 ubox
5 88 0.028447881 ubox
5 89 0.016327499 ubox
6 10 0.018545726 ubox
6 34 0.003793583 ubox
6 36 0.010655870 ubox
6 40 0.015595681 ubox
6 86 0.046339945 ubox
7 39 0.013081536 ubox
8 36 0.053886564 ubox
8 39 0.072923785 ubox
9 23 0.009046708 ubox
9 35 0.054584523 ubox
9 38 0.079901515 ubox
9 85 0.008769534 ubox
9 88 0.010616531 ubox
9 89 0.017042065 ubox
9 90 0.011345457 ubox
10 22 0.011188923 ubox
10 35 0.048234874 ubox
10 37 0.417288414 ubox
10 84 0.011406611 ubox
10 87 0.014090043 ubox
10 88 0.016776025 ubox
10 89 0.015256852 ubox
11 21 0.011474914 ubox
11 34 0.045235372 ubox
11 36 0.394860782 ubox
11 63 0.003410821 ubox
11 83 0.012149607 ubox
11 86 0.009062783 ubox
12 20 0.011503965 ubox
12 33 0.041859097 ubox
12 34 0.067460375 ubox
12 62 0.003411398 ubox
12 82 0.012108452 ubox
13 19 0.010952789 ubox
13 33 0.052267442 ubox
13 34 0.995229398 ubox
13 61 0.003407831 ubox
14 33 0.997556921 ubox
14 60 0.003247416 ubox
15 32 0.998329496 ubox
16 33 0.011895999 ubox
16 36 0.003925993 ubox
16 58 0.003169267 ubox
17 32 0.012202528 ubox
17 35 0.004072607 ubox
18 34 0.004097452 ubox
19 28 0.977495953 ubox
19 30 0.176272099 ubox
19 56 0.003813646 ubox
20 27 0.981021558 ubox
20 29 0.182669148 ubox
20 55 0.004211436 ubox
21 26 0.934073481 ubox
21 28 0.177172948 ubox
21 54 0.004211210 ubox
22 53 0.004212127 ubox
23 52 0.004209043 ubox
32 43 0.005258084 ubox
33 42 0.005261690 ubox
34 41 0.005258221 ubox
38 79 0.010288235 ubox
38 86 0.994555793 ubox
39 85 0.995606067 ubox
40 75 0.003407266 ubox
40 78 0.012677417 ubox
40 84 0.999553998 ubox
41 74 0.003866639 ubox
41 77 0.013183311 ubox
41 83 0.999832825 ubox
42 73 0.003868148 ubox
42 76 0.013619884 ubox
42 79 0.016018255 ubox
42 82 0.999736960 ubox
43 72 0.003735091 ubox
43 75 0.013918867 ubox
43 78 0.020963436 ubox
43 81 0.997836962 ubox
44 74 0.014117608 ubox
44 77 0.024699301 ubox
45 77 0.864896480 ubox
46 73 0.014469598 ubox
46 76 0.915949935 ubox
46 79 0.399005186 ubox
47 72 0.014083935 ubox
47 75 0.915264643 ubox
47 78 0.399370186 ubox
48 71 0.008307250 ubox
48 77 0.384737372 ubox
50 72 0.980545953 ubox
50 75 0.146487363 ubox
51 71 0.991713583 ubox
51 73 0.033179048 ubox
51 74 0.117795974 ubox
51 76 0.004221574 ubox
52 70 0.999002883 ubox
52 72 0.041787515 ubox
52 75 0.003883010 ubox
53 69 0.995344651 ubox
53 72 0.004583411 ubox
54 68 0.995992229 ubox
55 67 0.999956279 ubox
56 66 0.999835895 ubox
57 65 0.999972880 ubox
58 64 0.999337871 ubox
72 79 0.003679307 ubox
72 86 0.003749502 ubox
73 78 0.003736093 ubox
73 85 0.003844303 ubox
74 84 0.003843960 ubox
76 81 0.003634835 ubox
76 88 0.005047927 ubox
77 87 0.005835589 ubox
78 86 0.006561205 ubox
79 85 0.006568261 ubox
13 34 0.9500000 lbox
14 33 0.9500000 lbox
15 32 0.9500000 lbox
19 28 0.9500000 lbox
20 27 0.9500000 lbox
21 26 0.9500000 lbox
38 86 0.9500000 lbox
39 85 0.9500000 lbox
40 84 0.9500000 lbox
41 83 0.9500000 lbox
42 82 0.9500000 lbox
43 81 0.9500000 lbox
45 77 0.9500000 lbox
46 76 0.9500000 lbox
47 75 0.9500000 lbox
50 72 0.9500000 lbox
51 71 0.9500000 lbox
52 70 0.9500000 lbox
53 69 0.9500000 lbox
54 68 0.9500000 lbox
55 67 0.9500000 lbox
56 66 0.9500000 lbox
57 65 0.9500000 lbox
58 64 0.9500000 lbox
showpage
end
%%EOF
