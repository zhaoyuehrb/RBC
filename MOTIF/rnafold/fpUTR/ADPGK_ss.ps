%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCGCUUGUGUCGACAUCGGCGCGCGCCGAGCCCGGAAGAGGCGCGGGCUAGGAAAGGAGUUGGUUCGCGCAGGUGCGGCGCCUGGGUCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.32966614 153.08610535]
[96.05178833 139.96998596]
[94.18053436 125.08716583]
[97.98657990 110.57427216]
[85.70721436 119.18920135]
[73.42784119 127.80413055]
[61.14846802 136.41906738]
[48.86909485 145.03399658]
[42.01568222 159.29377747]
[27.15307045 160.26947021]
[14.87369728 168.88439941]
[2.59432554 177.49932861]
[-3.82823253 192.58848572]
[-20.13760185 194.30210876]
[-29.55610275 180.87734985]
[-22.39478874 166.12446594]
[-6.02060461 165.21995544]
[6.25876760 156.60502625]
[18.53813934 147.99009705]
[24.51324654 134.34651184]
[40.25416565 132.75462341]
[52.53353500 124.13969421]
[64.81291199 115.52476501]
[77.09227753 106.90982819]
[89.37165070 98.29489899]
[99.34702301 87.09258270]
[106.48622894 73.90047455]
[113.62544250 60.70836639]
[120.76465607 47.51626205]
[127.90386200 34.32415390]
[135.04307556 21.13204765]
[134.80647278 5.31261110]
[147.66874695 -2.19814253]
[154.80795288 -15.39024925]
[161.94715881 -28.58235550]
[158.13800049 -34.41548920]
[156.23529053 -41.07465744]
[156.38589478 -47.95762253]
[158.55206299 -54.44930649]
[162.51702881 -59.97678375]
[167.90644836 -64.05982208]
[174.22364807 -66.35258484]
[180.89529419 -66.67280579]
[187.32351685 -65.01609802]
[197.29888916 -76.21842194]
[207.27426147 -87.42073822]
[217.24963379 -98.62306213]
[227.22499084 -109.82538605]
[237.20036316 -121.02770996]
[247.17573547 -132.23002625]
[257.15109253 -143.43235779]
[267.12646484 -154.63467407]
[277.10183716 -165.83699036]
[287.07720947 -177.03932190]
[283.63598633 -192.16999817]
[289.77648926 -206.42039490]
[303.13760376 -214.31092834]
[318.58166504 -212.80754089]
[330.17016602 -202.48829651]
[333.44705200 -187.32118225]
[327.15231323 -173.13824463]
[313.70639038 -165.39311218]
[298.27954102 -167.06394958]
[288.30416870 -155.86163330]
[278.32879639 -144.65930176]
[268.35342407 -133.45698547]
[258.37805176 -122.25466156]
[248.40267944 -111.05233765]
[238.42732239 -99.85001373]
[228.45195007 -88.64769745]
[218.47657776 -77.44537354]
[208.50120544 -66.24304962]
[198.52584839 -55.04072952]
[197.57617188 -31.23505402]
[175.13926697 -21.44314384]
[168.00006104 -8.25103760]
[160.86085510 4.94106817]
[161.60809326 19.81691742]
[148.23518372 28.27125931]
[141.09597778 41.46336365]
[133.95675659 54.65547180]
[126.81755066 67.84757996]
[119.67833710 81.03968811]
[112.53913116 94.23178864]
[126.51170349 88.77586365]
[141.51106262 88.91444397]
[155.38044739 94.62760925]
[166.12557983 105.09384918]
[172.20140076 118.80823517]
[172.73428345 133.79876709]
[167.64758301 147.90995789]
[157.67274475 159.11274719]
[144.24404907 165.79629517]
[129.29238892 166.99957275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[10 19]
[11 18]
[12 17]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[33 77]
[34 76]
[35 75]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
