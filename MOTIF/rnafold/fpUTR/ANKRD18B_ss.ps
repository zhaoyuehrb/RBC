%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGUGGGGGUGGAAAGGCCACGAGGAGCCGCGGCGUCUCAGGAGCGGGUGGUGGGCAUCUGAGAAGUCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[101.51882172 156.48167419]
[88.86364746 148.42893982]
[82.31508636 134.93388367]
[83.82051849 120.00962067]
[92.93122101 108.09504700]
[77.97985840 109.30204773]
[63.02849960 110.50904846]
[56.19017410 125.41739655]
[42.88957214 134.85539246]
[26.74442482 136.36987305]
[12.08958340 129.64753723]
[2.81315756 116.57411194]
[-12.07747555 118.38216400]
[-26.96810913 120.19021606]
[-41.85874176 121.99826813]
[-52.84484482 133.68949890]
[-68.82283020 132.24603271]
[-77.53575134 118.77515411]
[-72.29980469 103.61058044]
[-57.13155746 98.38526917]
[-43.66679382 107.10763550]
[-28.77615929 105.29958344]
[-13.88552570 103.49153137]
[1.00510740 101.68347931]
[5.59293747 88.66387177]
[15.43213558 78.88659668]
[28.60657883 74.33748627]
[42.51482010 75.97619629]
[54.38375092 83.53439331]
[61.82150269 95.55768585]
[76.77286530 94.35069275]
[91.72422028 93.14369202]
[106.21311188 89.26140594]
[119.76486969 82.83101654]
[133.31661987 76.40062714]
[146.86837769 69.97023773]
[160.42013550 63.53985214]
[169.57098389 50.63355255]
[184.38636780 52.16773224]
[197.93812561 45.73734283]
[211.48988342 39.30695724]
[225.04164124 32.87656784]
[238.59339905 26.44618034]
[252.14515686 20.01579094]
[265.69689941 13.58540249]
[274.84774780 0.67910409]
[289.66314697 2.21328449]
[303.21490479 -4.21710396]
[305.08453369 -19.53075790]
[314.95413208 -31.38801765]
[329.67434692 -36.00527191]
[344.54797363 -31.90917397]
[354.82894897 -20.40677261]
[357.23663330 -5.16844368]
[351.00271606 8.94331932]
[338.11642456 17.42550278]
[322.68975830 17.57147408]
[309.64529419 9.33465290]
[296.09353638 15.76504135]
[287.91198730 28.21139526]
[272.12728882 27.13715935]
[258.57553101 33.56754684]
[245.02378845 39.99793625]
[231.47203064 46.42832565]
[217.92027283 52.85871124]
[204.36851501 59.28910065]
[190.81675720 65.71949005]
[182.63522339 78.16584015]
[166.85052490 77.09160614]
[153.29876709 83.52199554]
[139.74700928 89.95238495]
[126.19525146 96.38277435]
[112.64350128 102.81316376]
[126.49191284 108.57695770]
[135.25721741 120.74945068]
[136.33279419 135.71083069]
[129.39881897 149.01196289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 32]
[6 31]
[7 30]
[12 24]
[13 23]
[14 22]
[15 21]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[47 59]
[48 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
