%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGUCAGACCCCUCCUGCGAGGCCAGGGGCUGUGGCCAUUGGGAGUUUGUCCCCACGGACCCCUCCUCCCCCAGAGGGCACGCCAGUCUUGAAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[123.07817841 321.52188110]
[127.36203766 307.01315308]
[135.92134094 294.53942871]
[147.91755676 285.32281494]
[142.88481140 271.19229126]
[137.85206604 257.06179810]
[125.63398743 255.34613037]
[115.28264618 248.49940491]
[108.84763336 237.80210876]
[107.63531494 225.30426025]
[111.94407654 213.43263245]
[120.99412537 204.51954651]
[116.84959412 190.10348511]
[112.70507050 175.68740845]
[108.56054688 161.27134705]
[104.41601562 146.85528564]
[99.45526123 141.19699097]
[100.37426758 131.92616272]
[96.68008423 117.38818359]
[82.98685455 104.89117432]
[87.95227814 87.02991486]
[83.36141968 72.74971771]
[78.77056122 58.46952057]
[74.17970276 44.18932343]
[69.34119415 39.26916504]
[68.05031586 33.50345993]
[69.77738953 28.87658501]
[66.08320618 14.33860016]
[62.38901901 -0.19938482]
[58.69483566 -14.73736954]
[55.00065231 -29.27535439]
[51.08082581 -43.75413132]
[46.93629837 -58.17019272]
[42.79177094 -72.58625793]
[38.64724731 -87.00231934]
[34.50271988 -101.41838837]
[30.35819435 -115.83444977]
[21.20846367 -103.94821930]
[6.37345362 -101.72955322]
[-5.85346222 -110.41877747]
[-8.63694096 -125.15825653]
[-0.42090631 -137.70802307]
[14.20154572 -141.05226135]
[27.05630112 -133.32081604]
[25.65861320 -148.25555420]
[24.26092339 -163.19029236]
[12.87636375 -174.49389648]
[14.75888348 -190.42611694]
[28.46437454 -198.76512146]
[43.47916031 -193.11393738]
[48.28517914 -177.80767822]
[39.19566345 -164.58798218]
[40.59335327 -149.65324402]
[41.99104309 -134.71850586]
[44.77425766 -119.97897339]
[48.91878510 -105.56291199]
[53.06330872 -91.14685059]
[57.20783615 -76.73078156]
[61.35236359 -62.31472015]
[65.49688721 -47.89865494]
[70.45764923 -42.24035645]
[69.53863525 -32.96953964]
[73.23281860 -18.43155289]
[76.92700195 -3.89356852]
[80.62118530 10.64441681]
[84.31537628 25.18240166]
[88.45989990 39.59846497]
[93.05075836 53.87866211]
[97.64161682 68.15885925]
[102.23247528 82.43905640]
[111.52082062 86.55970764]
[117.01314545 95.10882568]
[116.89978027 105.26955414]
[111.21807098 113.69400024]
[114.91225433 128.23197937]
[118.83208466 142.71075439]
[122.97660828 157.12683105]
[127.12113190 171.54289246]
[131.26565552 185.95895386]
[135.41018677 200.37501526]
[152.51400757 205.92813110]
[162.88232422 220.43080139]
[162.60804749 238.10151672]
[151.98257446 252.02903748]
[157.01531982 266.15954590]
[162.04808044 280.29006958]
[177.16958618 279.84838867]
[191.68692017 284.10305786]
[204.17779541 292.63729858]
[213.41851807 304.61495972]
[218.50375366 318.86260986]
[218.93530273 333.98440552]
[214.67088318 348.49887085]
[206.12829590 360.98403931]
[194.14443970 370.21673584]
[179.89338684 375.29241943]
[164.77130127 375.71383667]
[150.25968933 371.43969727]
[137.78024292 362.88873291]
[128.55558777 350.89871216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 86]
[5 85]
[6 84]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[18 75]
[19 74]
[21 70]
[22 69]
[23 68]
[24 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
