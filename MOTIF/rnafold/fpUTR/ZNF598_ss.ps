%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGGGCGGGCCCGCCGGGAGCCAGGCCGCUCGGCGCCACGACCGGCCGAGAGGGGGGCCGGAUCCCGGACC\
) } def
/len { sequence length } bind def

/coor [
[39.84424591 242.17121887]
[33.84082794 245.94618225]
[27.01453018 247.70919800]
[20.01652527 247.31802368]
[13.50653267 244.83467102]
[2.35935998 254.87162781]
[-8.78781223 264.90859985]
[-11.05996227 280.78991699]
[-24.96557236 288.79077148]
[-39.83745193 282.77355957]
[-44.26716232 267.35418701]
[-34.85661316 254.36106873]
[-18.82477188 253.76141357]
[-7.67759895 243.72445679]
[3.46957326 233.68750000]
[6.58368683 210.03739929]
[29.63073349 201.77064514]
[37.40113831 188.94018555]
[45.17154312 176.10971069]
[52.94194794 163.27925110]
[60.71235275 150.44879150]
[68.48275757 137.61831665]
[68.45761871 122.72373962]
[82.22469330 114.92769623]
[89.99509430 102.09722900]
[91.20816803 93.86657715]
[98.36914062 88.90184784]
[106.67001343 76.40802765]
[114.97089386 63.91420746]
[123.27176666 51.42039108]
[124.46410370 35.64417648]
[137.95182800 29.32511711]
[146.25270081 16.83129883]
[154.55357361 4.33748007]
[147.69718933 -12.17629814]
[151.86892700 -29.40560341]
[165.28575134 -40.75573730]
[182.66213989 -41.99241638]
[189.88845825 -55.13701630]
[197.11476135 -68.28161621]
[192.46537781 -83.38654327]
[199.93229675 -97.31566620]
[215.08554077 -101.80509186]
[228.93493652 -94.19132233]
[233.26390076 -78.99146271]
[225.50413513 -65.22333527]
[210.25935364 -61.05530930]
[203.03305054 -47.91070938]
[195.80674744 -34.76610947]
[202.69227600 -24.37106895]
[204.39744568 -11.94556236]
[200.52178955 0.05961601]
[191.77188110 9.24870110]
[179.83357239 13.75902081]
[167.04739380 12.63835335]
[158.74652100 25.13217163]
[150.44564819 37.62599182]
[149.84704590 52.50856400]
[135.76557922 59.72126389]
[127.46470642 72.21508026]
[119.16383362 84.70890045]
[110.86296082 97.20272064]
[102.82556152 109.86763763]
[95.05515289 122.69810486]
[94.52450562 138.51040649]
[81.31322479 145.38873291]
[73.54281616 158.21919250]
[65.77241516 171.04965210]
[58.00200653 183.88012695]
[50.23160172 196.71058655]
[42.46119690 209.54104614]
[46.17243195 215.82546997]
[47.79053879 222.89985657]
[47.18714523 230.09031677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[17 71]
[18 70]
[19 69]
[20 68]
[21 67]
[22 66]
[24 64]
[25 63]
[27 62]
[28 61]
[29 60]
[30 59]
[32 57]
[33 56]
[34 55]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
