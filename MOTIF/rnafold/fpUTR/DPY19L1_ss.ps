%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAGUGGCCGCUCCGGGCGCCUUCUCCCUGCCCCGCCGCGUCUCGCCUGCGCGGGCUCCAAGCGCAGCCUUAACAGGCUCCGAAACUUGAAUCAGCGCCCCGAUCCCGAGAGGGCUCUUCCUUCGGCCCCAUCACUCCCACA\
) } def
/len { sequence length } bind def

/coor [
[211.89411926 398.15133667]
[198.45051575 405.90048218]
[183.02316284 404.23425293]
[171.54418945 393.79333496]
[168.42749023 378.59246826]
[174.87152100 364.47671509]
[188.39839172 356.87387085]
[190.00910950 341.96060181]
[191.61984253 327.04733276]
[193.23056030 312.13406372]
[179.17152405 304.34140015]
[169.49203491 291.43228149]
[165.92453003 275.63436890]
[169.14129639 259.69934082]
[178.62849426 246.42369080]
[170.94291687 233.54223633]
[157.77731323 226.57687378]
[157.35101318 210.76141357]
[149.66543579 197.87995911]
[141.97987366 184.99850464]
[134.29429626 172.11703491]
[126.60872650 159.23558044]
[118.92315674 146.35412598]
[108.26801300 149.38046265]
[97.20820618 149.98995972]
[86.28503418 148.15278625]
[76.03311920 143.95883179]
[66.95423126 137.61340332]
[59.49271011 129.42703247]
[54.01375580 119.80039978]
[50.78552628 109.20467377]
[49.96601868 98.15843964]
[51.59534836 87.20233917]
[37.83159256 81.23919678]
[24.06783867 75.27605438]
[10.30408382 69.31291199]
[-3.52302933 63.49819565]
[-17.41190147 57.83257675]
[-31.30077362 52.16695786]
[-49.44316483 55.11660385]
[-59.70059967 40.91561508]
[-73.70816040 35.55014420]
[-87.71571350 30.18466949]
[-104.66965485 30.16533661]
[-109.34439087 13.86861420]
[-94.97865295 4.86518431]
[-82.35024261 16.17711067]
[-68.34268188 21.54258537]
[-54.33512497 26.90805817]
[-43.11711502 22.26244354]
[-31.37506104 26.67469025]
[-25.63515282 38.27808762]
[-11.74628162 43.94370651]
[2.14259005 49.60932541]
[9.57779598 49.22062683]
[16.26722527 55.54916000]
[30.03098106 61.51230240]
[43.79473495 67.47544861]
[57.55849075 73.43858337]
[69.02101898 60.66689682]
[84.12305450 52.51618195]
[101.09036255 49.94401550]
[103.65975952 35.16571426]
[106.22915649 20.38741302]
[108.79855347 5.60911036]
[110.88970184 -9.24441051]
[112.50041962 -24.15768051]
[106.28974152 -38.70890045]
[115.34897614 -50.53173828]
[116.95969391 -65.44500732]
[118.57041168 -80.35827637]
[120.18113708 -95.27154541]
[121.79185486 -110.18481445]
[114.67340088 -124.95842743]
[124.13084412 -138.35577393]
[140.43516541 -136.59481812]
[146.81388855 -121.48706818]
[136.70512390 -108.57409668]
[135.09440613 -93.66082764]
[133.48368835 -78.74755859]
[131.87297058 -63.83428955]
[130.26223755 -48.92102051]
[136.58813477 -35.43649673]
[127.41368866 -22.54695892]
[125.80297089 -7.63369083]
[127.78119659 -4.63246775]
[128.36230469 -0.50351232]
[127.02324677 4.06619406]
[123.57685852 8.17850780]
[121.00746155 22.95681000]
[118.43806458 37.73511124]
[115.86866760 52.51341248]
[131.39015198 60.99425125]
[142.99423218 74.34291077]
[149.23274231 90.89351654]
[149.32711792 108.58058167]
[143.26557922 125.19681549]
[131.80461121 138.66854858]
[139.49018860 151.55000305]
[147.17576599 164.43147278]
[154.86132812 177.31292725]
[162.54690552 190.19438171]
[170.23246765 203.07585144]
[183.94779968 210.96257019]
[183.82437134 225.85665894]
[191.50994873 238.73811340]
[209.36666870 236.85833740]
[226.11207581 243.15055847]
[238.22143555 256.22640991]
[243.17451477 273.27645874]
[239.98001099 290.67370605]
[252.33886719 299.17422485]
[267.68566895 296.50711060]
[280.09820557 305.30389404]
[282.54629517 319.95117188]
[294.90515137 328.45169067]
[307.26397705 336.95220947]
[319.62283325 345.45275879]
[331.98168945 353.95327759]
[346.56512451 348.65203857]
[361.47003174 352.96755981]
[370.96514893 365.24038696]
[371.39941406 380.75137329]
[362.60586548 393.53625488]
[347.96578979 398.67895508]
[333.10858154 394.20202637]
[323.74713135 381.82690430]
[323.48114014 366.31213379]
[311.12231445 357.81158447]
[298.76345825 349.31106567]
[286.40463257 340.81054688]
[274.04577637 332.31002808]
[259.49194336 335.26318359]
[246.83720398 326.81851196]
[243.83833313 311.53305054]
[231.47949219 303.03253174]
[227.48876953 306.41653442]
[223.07475281 309.22613525]
[218.31950378 311.40902710]
[213.31147766 312.92465210]
[208.14382935 313.74478149]
[206.53311157 328.65805054]
[204.92237854 343.57131958]
[203.31166077 358.48458862]
[214.90322876 368.80038452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 144]
[8 143]
[9 142]
[10 141]
[15 106]
[16 105]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 98]
[33 59]
[34 58]
[35 57]
[36 56]
[37 54]
[38 53]
[39 52]
[41 49]
[42 48]
[43 47]
[62 92]
[63 91]
[64 90]
[65 89]
[66 85]
[67 84]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[111 136]
[112 135]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
