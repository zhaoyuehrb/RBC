%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGCUGCCUCACCCCCGGCCCCGGGAAGGGCAUGGCCCCGGCAAACUCCCGGCCGUGACUCGCGCGCCCCGGCUCGGUGGAUGCUCCCGGCGCACCGCUCCCGUGUGCGGCGGCUUCCCAAGGACAGGUAUCCGAGAAUCAGGCACCCCGACAAG\
) } def
/len { sequence length } bind def

/coor [
[176.37478638 218.21224976]
[178.96339417 206.64772034]
[184.71540833 196.26446533]
[174.64894104 185.14393616]
[164.58245850 174.02340698]
[154.51599121 162.90289307]
[144.44950867 151.78236389]
[134.38302612 140.66183472]
[124.31655121 129.54132080]
[114.25007629 118.42079163]
[120.71921539 131.95410156]
[115.09083557 145.85809326]
[101.02932739 151.08053589]
[87.68949127 144.22132874]
[83.75630188 129.74617004]
[91.79009247 117.07945251]
[80.47162628 126.92283630]
[69.15316010 136.76622009]
[57.83468628 146.60960388]
[53.01362228 162.28408813]
[36.97034454 165.68193054]
[26.20880318 153.30770874]
[31.79954720 137.89097595]
[47.99130249 135.29113770]
[59.30977249 125.44775391]
[70.62824249 115.60437012]
[81.94670868 105.76098633]
[80.31936646 98.43965912]
[77.06468964 83.79701233]
[75.43734741 76.47569275]
[61.01477051 72.35387421]
[46.59219742 68.23206329]
[32.12936020 64.25382996]
[17.62768745 60.41958237]
[3.12601352 56.58533096]
[-11.37565994 52.75108337]
[-25.87733269 48.91683197]
[-40.37900543 45.08258438]
[-54.88068008 41.24833298]
[-66.43656921 47.05739594]
[-78.46124268 43.52684021]
[-84.63288879 33.08341217]
[-99.05546570 28.96159554]
[-112.74799347 36.85401535]
[-127.98896027 32.67209244]
[-135.73617554 18.89688873]
[-131.39334106 3.70098805]
[-117.53700256 -3.90015197]
[-102.38786316 0.60309088]
[-94.93364716 14.53902245]
[-80.51107788 18.66083908]
[-63.77125931 13.47146893]
[-51.04643250 26.74666023]
[-36.54475784 30.58090973]
[-22.04308319 34.41516113]
[-7.54141045 38.24940872]
[6.96026278 42.08366013]
[21.46193695 45.91790771]
[35.96360779 49.75215912]
[43.27403641 48.41424179]
[50.71401596 53.80948639]
[65.13658905 57.93130493]
[79.55915833 62.05311966]
[92.81424713 55.03153610]
[97.50620270 40.78423691]
[102.19815063 26.53693390]
[106.89009857 12.28963089]
[111.58204651 -1.95767093]
[116.27399445 -16.20497322]
[110.79188538 -25.67884636]
[111.44652557 -36.38425827]
[117.77693176 -44.76781464]
[127.47877502 -48.18149185]
[132.73342896 -62.23099518]
[126.42929077 -76.47512817]
[131.95840454 -90.64846802]
[145.57685852 -96.57073212]
[150.83152771 -110.62023163]
[156.08618164 -124.66973877]
[161.34085083 -138.71923828]
[166.59552002 -152.76873779]
[165.87362671 -159.42956543]
[168.29507446 -164.64694214]
[172.34848022 -167.26539612]
[178.15754700 -181.09487915]
[183.96662903 -194.92437744]
[189.77569580 -208.75386047]
[190.33520508 -225.69857788]
[206.77261353 -229.85168457]
[215.31373596 -215.20635986]
[203.60517883 -202.94479370]
[197.79611206 -189.11531067]
[191.98704529 -175.28581238]
[186.17797852 -161.45632935]
[180.64501953 -147.51408386]
[175.39035034 -133.46456909]
[170.13569641 -119.41506958]
[164.88102722 -105.36557007]
[159.62635803 -91.31607056]
[166.01603699 -77.91055298]
[160.88719177 -63.58750916]
[146.78294373 -56.97632980]
[141.52827454 -42.92682648]
[146.15295410 -24.18459702]
[130.52130127 -11.51302338]
[125.82934570 2.73427820]
[121.13739777 16.98158073]
[116.44544983 31.22888184]
[111.75350189 45.47618484]
[107.06155396 59.72348785]
[125.37060547 108.35431671]
[135.43707275 119.47483826]
[145.50355530 130.59536743]
[155.57003784 141.71588135]
[165.63650513 152.83641052]
[175.70298767 163.95693970]
[185.76945496 175.07745361]
[195.83593750 186.19798279]
[213.44590759 180.27952576]
[231.82788086 182.59657288]
[247.33354187 192.64501953]
[256.90469360 208.39071655]
[258.67639160 226.68106079]
[252.34013367 243.87623596]
[263.25830078 254.16181946]
[268.44665527 255.37965393]
[272.24053955 258.20822144]
[274.25653076 261.83160400]
[274.49749756 265.40103149]
[284.78308105 276.31921387]
[295.06866455 287.23739624]
[307.94906616 288.41195679]
[316.29220581 297.76339722]
[316.01330566 309.89093018]
[326.07977295 321.01144409]
[341.49249268 319.21472168]
[355.00115967 326.84985352]
[361.41146851 340.98092651]
[358.25851440 356.17431641]
[346.75463867 366.58779907]
[331.32333374 368.21719360]
[317.89828491 360.43597412]
[311.64166260 346.23617554]
[314.95925903 331.07791138]
[304.89279175 319.95739746]
[287.93878174 315.51742554]
[284.15048218 297.52297974]
[273.86489868 286.60479736]
[263.57931519 275.68661499]
[252.97271729 265.08001709]
[242.05453491 254.79441833]
[231.75912476 260.34411621]
[220.29811096 262.77160645]
[208.59822083 261.86944580]
[197.60865784 257.69989014]
[188.22406006 250.59072876]
[181.21171570 241.10949707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 118]
[4 117]
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[16 27]
[17 26]
[18 25]
[19 24]
[30 63]
[31 62]
[32 61]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[42 51]
[43 50]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[73 103]
[74 102]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[84 94]
[85 93]
[86 92]
[87 91]
[124 151]
[125 150]
[129 149]
[130 148]
[131 147]
[134 145]
[135 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
