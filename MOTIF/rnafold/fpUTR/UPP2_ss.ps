%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUGAUAGGAAAAUUUAAAAUGCUAAAGGAAAAAUUUUCUUAGCAAUUUCACAGGAAAACCUAAGUUUUAAGAGAGGUUAUCAUUCUGACUGGGAACUGAACUAUUAUGACUAGGUCUAUAAUUUAAUAACAAGUCACAAUAUCUCUCUUUCUUGACAUCAAUUUAAGGUGACUUUUCACAUAGUAGAGAGA\
) } def
/len { sequence length } bind def

/coor [
[221.85768127 164.60342407]
[218.08407593 158.27729797]
[216.16828918 151.70790100]
[216.00880432 145.38415527]
[217.38490295 139.73348999]
[202.91177368 135.79289246]
[188.43864441 131.85227966]
[173.96549988 127.91166687]
[159.49237061 123.97105408]
[145.01924133 120.03044128]
[141.61991882 127.48448944]
[136.98114014 134.35693359]
[131.20329285 140.44096375]
[124.42135620 145.54724121]
[116.80184174 149.50971985]
[108.53874207 152.19090271]
[99.84862518 153.48632812]
[90.96493530 153.32833862]
[82.13176727 151.68876648]
[73.59712219 148.58058167]
[65.60597229 144.05839539]
[58.39325714 138.21780396]
[52.17698288 131.19352722]
[38.62522507 137.62391663]
[25.07346725 144.05430603]
[11.52171135 150.48469543]
[-2.03004503 156.91508484]
[-15.58180141 163.34545898]
[-22.00392723 169.86036682]
[-29.40406990 169.76831055]
[-43.05766296 175.97955322]
[-56.71125412 182.19078064]
[-70.36484528 188.40202332]
[-79.45135498 202.05366516]
[-95.79783630 200.74044800]
[-102.58843231 185.81329346]
[-92.83756256 172.62799072]
[-76.57608032 174.74842834]
[-62.92248917 168.53720093]
[-49.26889801 162.32595825]
[-35.61530685 156.11473083]
[-22.01218987 149.79371643]
[-8.46043301 143.36332703]
[5.09132290 136.93293762]
[18.64307976 130.50254822]
[32.19483566 124.07215881]
[45.74659348 117.64176941]
[45.38424301 110.15052795]
[30.40175819 110.87522888]
[16.37644958 116.19412231]
[6.98396254 104.49877167]
[15.20462036 91.95203400]
[29.67705727 95.89274597]
[44.65954208 95.16804504]
[44.29719162 87.67680359]
[30.18807793 82.58436584]
[16.07896423 77.49192810]
[0.04083834 80.91400146]
[-10.73939228 68.55606079]
[-5.17195225 53.13090134]
[11.01585388 50.50659943]
[21.17140007 63.38281631]
[35.28051376 68.47525024]
[49.38962555 73.56768799]
[59.87627029 65.08866882]
[71.36935425 59.89717484]
[64.61338043 46.50475693]
[57.85741043 33.11233902]
[51.10143661 19.71992302]
[44.34546661 6.32750607]
[37.58949280 -7.06491137]
[24.46584511 -15.90122318]
[25.64158249 -30.74935150]
[18.88561058 -44.14176941]
[4.14431143 -49.17484665]
[-2.51642489 -62.85290146]
[2.37269068 -76.87545776]
[-4.38328123 -90.26787567]
[-11.13925362 -103.66029358]
[-26.40214539 -107.06295776]
[-35.86590958 -119.51170349]
[-35.06204224 -135.12861633]
[-24.37010574 -146.53985596]
[-8.83850861 -148.35739136]
[4.19920778 -139.72305298]
[8.58703041 -124.71368408]
[2.25316405 -110.41626740]
[9.00913620 -97.02384949]
[15.76510811 -83.63143158]
[29.94835281 -79.23016357]
[36.99065018 -65.74459076]
[32.27802658 -50.89773941]
[39.03400040 -37.50532532]
[51.67441559 -29.62692642]
[50.98191071 -13.82088280]
[57.73788452 -0.42846590]
[64.49385834 12.96395111]
[71.24982452 26.35636902]
[78.00579834 39.74878693]
[84.76177216 53.14120483]
[109.07104492 51.56791687]
[131.16326904 61.83193207]
[145.63885498 81.42461395]
[148.95985413 105.55731201]
[163.43298340 109.49792480]
[177.90611267 113.43852997]
[192.37924194 117.37914276]
[206.85238647 121.31975555]
[221.32551575 125.26036072]
[235.97213745 122.02359772]
[247.43685913 112.35096741]
[258.90161133 102.67833710]
[270.36633301 93.00569916]
[281.83108521 83.33306885]
[283.69940186 70.56211090]
[293.45877075 62.74212646]
[305.53002930 63.64399719]
[317.14910889 54.15731812]
[321.82550049 46.29481506]
[329.03265381 44.61321640]
[340.80303955 35.31494904]
[352.57342529 26.01668358]
[354.16607666 10.29284668]
[366.46331787 0.36544600]
[382.16943359 2.12423277]
[391.96627808 14.52575016]
[390.04153442 30.21239853]
[377.53710938 39.87756729]
[361.87170410 37.78708267]
[350.10131836 47.08534622]
[338.33090210 56.38361359]
[326.63580322 65.77639008]
[315.01672363 75.26306915]
[309.69470215 91.97965240]
[291.50369263 94.79780579]
[280.03897095 104.47043610]
[268.57424927 114.14307404]
[257.10949707 123.81570435]
[245.64476013 133.48834229]
[245.46353149 140.98614502]
[259.83728027 136.69714355]
[268.35794067 149.04211426]
[259.25006104 160.96043396]
[245.10107422 155.98176575]
[244.91984558 163.47958374]
[255.90388489 173.69480896]
[266.88790894 183.91004944]
[277.87194824 194.12528992]
[288.85595703 204.34053040]
[299.83999634 214.55577087]
[310.82403564 224.77101135]
[331.39776611 218.65184021]
[352.16662598 228.68034363]
[361.38098145 251.55752563]
[374.49050903 258.84725952]
[387.60000610 266.13702393]
[400.70953369 273.42678833]
[413.81906128 280.71652222]
[428.35992432 274.96350098]
[443.18041992 279.95211792]
[451.28280640 293.32693481]
[448.84133911 308.77276611]
[437.00881958 318.99652100]
[421.37222290 319.17092896]
[409.31463623 309.21356201]
[406.52929688 293.82604980]
[393.41979980 286.53628540]
[380.31027222 279.24655151]
[367.20074463 271.95678711]
[354.09121704 264.66705322]
[343.96481323 275.73300171]
[352.38604736 288.14599609]
[360.80731201 300.55899048]
[369.22854614 312.97198486]
[384.21511841 319.63046265]
[385.67269897 335.96469116]
[372.10186768 345.17144775]
[357.46313477 337.77960205]
[356.81555176 321.39324951]
[348.39431763 308.98025513]
[339.97305298 296.56726074]
[331.55178833 284.15426636]
[318.79504395 282.69952393]
[307.79962158 276.90310669]
[299.92938232 267.81784058]
[296.03707886 256.87908936]
[296.37741089 245.68296814]
[300.60879517 235.75503540]
[289.62475586 225.53979492]
[278.64074707 215.32455444]
[267.65670776 205.10931396]
[256.67266846 194.89408875]
[245.68864441 184.67884827]
[234.70462036 174.46360779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[30 41]
[31 40]
[32 39]
[33 38]
[55 64]
[56 63]
[57 62]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[73 93]
[74 92]
[77 89]
[78 88]
[79 87]
[110 139]
[111 138]
[112 137]
[113 136]
[114 135]
[117 133]
[118 132]
[120 131]
[121 130]
[122 129]
[145 194]
[146 193]
[147 192]
[148 191]
[149 190]
[150 189]
[151 188]
[154 170]
[155 169]
[156 168]
[157 167]
[158 166]
[171 182]
[172 181]
[173 180]
[174 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
