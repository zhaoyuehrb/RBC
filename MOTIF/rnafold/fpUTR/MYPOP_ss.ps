%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGCCCUGACCCACCGGCGGCUGCGGCGGAGCCGCGCCGGCGCCCCCCAUGCGCCAGACGGCAGGACGGCGGCGUCGGGGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[108.59435272 129.94020081]
[89.71353149 131.06726074]
[72.72924042 120.80792999]
[60.72112274 129.79708862]
[48.71300507 138.78625488]
[36.70488739 147.77542114]
[24.85912895 156.97749329]
[13.17950535 166.38952637]
[1.49988222 175.80155945]
[0.05989016 191.54011536]
[-12.14045238 201.58636475]
[-27.86289787 199.98005676]
[-37.77960205 187.67417908]
[-36.00715256 171.96958923]
[-23.59712029 162.18354797]
[-7.91215277 164.12193298]
[3.76747012 154.70989990]
[15.44709301 145.29786682]
[18.75386047 138.49566650]
[27.71572113 135.76730347]
[39.72383881 126.77813721]
[51.73196030 117.78897095]
[63.74007797 108.79980469]
[63.20469284 93.80936432]
[50.58588791 85.69975281]
[37.96708679 77.59014130]
[25.34828377 69.48052979]
[12.72947979 61.37091827]
[-3.86414385 57.89413834]
[-5.11681318 40.98653412]
[10.78326416 35.10232925]
[20.83909225 48.75211334]
[33.45789719 56.86172485]
[46.07669830 64.97133636]
[58.69550323 73.08094788]
[71.31430817 81.19055939]
[85.39689636 70.71288300]
[102.03369904 68.91716003]
[116.53194427 75.47983551]
[125.21254730 87.83006287]
[139.97421265 85.16677094]
[154.73588562 82.50347137]
[169.49754333 79.84017181]
[184.25921631 77.17687225]
[199.02088928 74.51358032]
[213.78254700 71.85028076]
[228.54421997 69.18698120]
[243.30589294 66.52368164]
[258.06756592 63.86038589]
[266.16738892 53.63298035]
[278.67929077 51.82074356]
[288.68692017 58.86557388]
[303.53424072 56.73085022]
[318.38156128 54.59612656]
[333.22888184 52.46140289]
[348.07620239 50.32668304]
[354.94430542 38.58293533]
[367.17480469 33.08683014]
[380.13204956 35.67219925]
[389.04809570 45.15578842]
[403.96215820 43.55236053]
[413.68246460 31.09076881]
[429.37744141 29.23532677]
[441.73556519 39.08683777]
[443.42498779 54.80057144]
[433.44335938 67.05384827]
[417.71264648 68.57702637]
[405.56558228 58.46641541]
[390.65151978 60.06984329]
[380.78372192 73.56038666]
[363.89526367 75.89466858]
[350.21093750 65.17400360]
[335.36361694 67.30872345]
[320.51629639 69.44345093]
[305.66897583 71.57817078]
[290.82165527 73.71289062]
[277.77590942 85.30369568]
[260.73086548 78.62205505]
[245.96919250 81.28535461]
[231.20751953 83.94864655]
[216.44584656 86.61194611]
[201.68418884 89.27524567]
[186.92251587 91.93854523]
[172.16084290 94.60183716]
[157.39918518 97.26513672]
[142.63751221 99.92843628]
[127.87583923 102.59173584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[7 18]
[8 17]
[9 16]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
