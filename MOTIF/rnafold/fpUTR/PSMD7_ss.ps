%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGCGGAAGAAGGAGGCCGCGCGAGGGCUGACGAACCGGAAGAAGAGGAACUGGGCCUGAAAGGGUACCGGUGACCGCUACUGCUGCCGGUGUUUGCGUGUGGCAGGGAGCCAGGCCUGGCGAGCGGGGUGUGUCGCG\
) } def
/len { sequence length } bind def

/coor [
[103.40473938 293.86547852]
[88.49777985 292.19741821]
[90.16556549 277.29086304]
[91.83316803 262.38385010]
[84.37966156 261.55004883]
[75.89045715 273.91668701]
[67.40124512 286.28329468]
[58.91204071 298.64993286]
[65.60424805 312.47418213]
[64.47174072 327.79125977]
[55.81914902 340.48095703]
[41.97398758 347.12979126]
[26.66053200 345.94927979]
[13.99802303 337.25695801]
[7.39261341 323.39102173]
[8.62112427 308.08132935]
[17.35309219 295.44613647]
[31.23966408 288.88421631]
[46.54541779 290.16073608]
[55.03462601 277.79409790]
[63.52383041 265.42745972]
[72.01303864 253.06085205]
[77.24787903 239.00395203]
[78.91548920 224.09693909]
[72.64109039 210.58837891]
[81.86463928 197.73393250]
[83.53224945 182.82691956]
[85.19985199 167.91990662]
[78.92545319 154.41134644]
[88.14900970 141.55690002]
[89.81661224 126.64989471]
[91.48422241 111.74287415]
[82.87395477 124.02552032]
[75.64522552 137.16879272]
[64.45274353 147.15519714]
[50.57378769 152.84506226]
[35.59225082 153.58908081]
[21.21783829 149.30233765]
[9.09097099 140.47401428]
[0.59557945 128.11164856]
[-3.29883313 113.62601471]
[-2.14783287 98.67023468]
[3.91722703 84.95108795]
[14.20419598 74.03421021]
[27.53911400 67.16544342]
[42.40018845 65.12866211]
[57.09145737 68.15630341]
[69.93576813 75.90235901]
[80.82003021 86.22383881]
[76.21657562 71.94769287]
[62.28250504 59.96663284]
[66.53869629 42.97714615]
[61.61832428 28.80710983]
[56.69795227 14.63707352]
[51.77757645 0.46703666]
[46.85720444 -13.70300007]
[41.77928162 -27.81734276]
[36.54443741 -41.87424088]
[31.30959129 -55.93114090]
[26.07474518 -69.98803711]
[13.09649563 -80.01286316]
[15.55697346 -96.22637939]
[30.92505074 -101.94950867]
[43.39136505 -91.29479218]
[40.13164520 -75.22288513]
[45.36648941 -61.16598511]
[50.60133362 -47.10908508]
[55.83617783 -33.05218887]
[61.16123199 -27.83957863]
[61.02724075 -18.62337303]
[65.94761658 -4.45333624]
[70.86798859 9.71670055]
[75.78836060 23.88673592]
[80.70873260 38.05677414]
[91.49276733 43.64754868]
[95.67976379 55.47744751]
[90.49271393 67.34423828]
[95.09616852 81.62037659]
[108.83982849 87.62969971]
[122.44618988 81.31567383]
[136.05255127 75.00165558]
[146.24049377 59.70753860]
[163.62284851 61.85505295]
[177.08515930 55.23946381]
[190.54748535 48.62387466]
[204.00979614 42.00828552]
[217.47210693 35.39269257]
[230.93443298 28.77710533]
[244.39674377 22.16151428]
[257.78451538 15.39636326]
[271.09609985 8.48248863]
[274.31805420 -6.81957579]
[286.65399170 -16.42989159]
[302.27932739 -15.81076145]
[313.81622314 -5.25451994]
[315.81729126 10.25449944]
[307.33773804 23.39340973]
[292.38131714 27.95842171]
[278.00997925 21.79407501]
[264.69839478 28.70795059]
[260.17581177 34.63024521]
[251.01232910 35.62383270]
[237.55001831 42.23942184]
[224.08770752 48.85501099]
[210.62538147 55.47060013]
[197.16307068 62.08618927]
[183.70074463 68.70178223]
[170.23843384 75.31736755]
[166.00779724 86.70393372]
[154.77842712 92.30559540]
[142.36657715 88.60801697]
[128.76020813 94.92203522]
[115.15384674 101.23606110]
[106.39123535 113.41048431]
[104.72362518 128.31750488]
[103.05602264 143.22451782]
[109.21114349 157.79931641]
[100.10686493 169.58750916]
[98.43926239 184.49452209]
[96.77165985 199.40155029]
[102.92678070 213.97634888]
[93.82250214 225.76454163]
[92.15489960 240.67155457]
[104.26867676 239.33375549]
[117.57594299 245.46472168]
[128.13047791 259.33856201]
[133.67718506 273.27532959]
[139.22390747 287.21212769]
[144.77062988 301.14889526]
[159.38356018 307.16870117]
[165.38261414 321.79013062]
[159.20864868 336.33862305]
[144.52459717 342.18273926]
[130.04222107 335.85531616]
[124.35366058 321.11029053]
[130.83384705 306.69561768]
[125.28712463 292.75881958]
[119.74040985 278.82205200]
[114.19368744 264.88525391]
[106.74018097 264.05145264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[23 123]
[24 122]
[26 120]
[27 119]
[28 118]
[30 116]
[31 115]
[32 114]
[49 78]
[50 77]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 68]
[58 67]
[59 66]
[60 65]
[79 113]
[80 112]
[81 111]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[89 102]
[90 100]
[91 99]
[126 139]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
