%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGCAGGGAGCUCACUCCUCGGCGGUGCCGCAGCCCUGUCCGGACUCCACUGCGCCUCUGAGGGGCUCAAAUACGAAUUCAAGAUCCGUGGCCGUUCACAUGGUUUCAAGGCACA\
) } def
/len { sequence length } bind def

/coor [
[28.41190338 262.71835327]
[14.58977318 268.54489136]
[1.28830647 261.61157227]
[-1.85122252 246.94363403]
[-12.59807396 257.40811157]
[-23.34492493 267.87258911]
[-27.86673355 285.66143799]
[-44.94767761 289.44085693]
[-55.41215134 300.18771362]
[-65.87662506 310.93457031]
[-76.34109497 321.68142700]
[-86.80557251 332.42828369]
[-90.31208801 348.44815063]
[-106.01889038 353.16284180]
[-117.76816559 341.72229004]
[-113.47327423 325.89553833]
[-97.55242157 321.96380615]
[-87.08794403 311.21694946]
[-76.62347412 300.47009277]
[-66.15900421 289.72323608]
[-55.69453049 278.97640991]
[-55.51827621 266.80093384]
[-46.77593231 257.75604248]
[-33.80939865 257.12573242]
[-23.06254578 246.66125488]
[-12.31569576 236.19677734]
[-2.28863287 225.04071045]
[6.97423649 213.24243164]
[16.23710632 201.44415283]
[25.49997520 189.64588928]
[34.76284409 177.84761047]
[31.41667366 159.94549561]
[42.29914856 144.95022583]
[60.98287964 142.49887085]
[69.60469055 130.22433472]
[78.22650146 117.94979095]
[86.84831238 105.67525482]
[88.27867889 91.76677704]
[100.87714386 85.70293427]
[109.49895477 73.42839813]
[118.12076569 61.15385437]
[118.86756134 41.09463501]
[136.54837036 33.45574570]
[144.50468445 20.73972893]
[152.46099854 8.02371311]
[152.63943481 2.54706740]
[154.76219177 -1.81949055]
[158.04589844 -4.50602341]
[161.59399414 -5.35370684]
[170.53950500 -17.39438057]
[179.48501587 -29.43505669]
[188.43052673 -41.47573090]
[194.26289368 -55.29541016]
[196.64883423 -70.10443878]
[191.20515442 -84.95963287]
[200.86839294 -96.29414368]
[203.25434875 -111.10316467]
[205.64028931 -125.91219330]
[208.02624512 -140.72122192]
[210.41220093 -155.53024292]
[206.96226501 -172.12947083]
[221.95774841 -180.03970337]
[233.71000671 -167.82000732]
[225.22122192 -153.14428711]
[222.83526611 -138.33526611]
[220.44932556 -123.52623749]
[218.06336975 -108.71721649]
[215.67741394 -93.90818787]
[221.29176331 -80.11223602]
[211.45787048 -67.71848297]
[209.07191467 -52.90945816]
[219.62112427 -63.57314301]
[232.89810181 -70.55325317]
[247.66310120 -73.19801331]
[262.53744507 -71.26047516]
[276.13220215 -64.92154694]
[287.17800903 -54.77313614]
[294.64343262 -41.76285172]
[297.83139038 -27.10553169]
[296.44418335 -12.16981316]
[290.61138916 1.64967787]
[280.87759399 13.06254196]
[268.15173340 21.00309753]
[253.62208557 24.72989273]
[238.64533997 23.89493752]
[224.61996460 18.57619476]
[212.85559082 9.27030563]
[204.45072937 -3.15379071]
[200.19017029 -17.53598785]
[200.47120667 -32.53022003]
[191.52569580 -20.48954582]
[182.58018494 -8.44887066]
[173.63467407 3.59180355]
[165.17701721 15.98002625]
[157.22070312 28.69604301]
[149.26438904 41.41205978]
[152.47117615 51.27872849]
[149.59063721 61.47557831]
[141.35885620 68.49321747]
[130.39530945 69.77566528]
[121.77349854 82.05020905]
[113.15168762 94.32474518]
[111.72132111 108.23322296]
[99.12285614 114.29706573]
[90.50104523 126.57160187]
[81.87923431 138.84614563]
[73.25741577 151.12068176]
[77.58531189 162.35704041]
[75.90807343 174.15878296]
[68.76705170 183.55226135]
[58.06517029 188.22854614]
[46.56111908 187.11047363]
[37.29824829 198.90875244]
[28.03537941 210.70703125]
[18.77251053 222.50529480]
[9.50964069 234.30357361]
[24.42803574 235.86610413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[34 107]
[35 106]
[36 105]
[37 104]
[39 102]
[40 101]
[41 100]
[43 96]
[44 95]
[45 94]
[49 93]
[50 92]
[51 91]
[52 90]
[53 71]
[54 70]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
