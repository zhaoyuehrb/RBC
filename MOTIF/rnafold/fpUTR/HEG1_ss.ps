%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUGCCCGCUGCCCGCUGCCCUCGCCCCGCGCGCCGGGCAUGUGAGCGCGGGCGGGCGCCGUCACC\
) } def
/len { sequence length } bind def

/coor [
[142.21067810 281.31521606]
[152.49543762 269.90823364]
[147.79527283 255.66362000]
[143.09512329 241.41903687]
[138.39495850 227.17443848]
[133.37176514 213.04052734]
[128.02813721 199.02461243]
[122.68451691 185.00871277]
[117.34088898 170.99279785]
[111.99726105 156.97688293]
[106.65363312 142.96098328]
[101.14454651 137.65899658]
[101.40175629 128.18360901]
[96.70159149 113.93901062]
[86.39741516 104.48831940]
[89.05381012 90.76115417]
[84.35365295 76.51655579]
[79.65348816 62.27196121]
[74.63029480 48.13804626]
[69.28666687 34.12213898]
[63.94304657 20.10623169]
[58.59941864 6.09032488]
[53.25579453 -7.92558289]
[38.74378586 -19.00303459]
[41.80331421 -36.13575745]
[35.82729721 -49.89392471]
[29.85128212 -63.65209579]
[15.51432705 -70.85149384]
[12.34521770 -86.57842255]
[22.77502251 -98.76853180]
[38.80288696 -98.07061005]
[48.13360596 -85.02004242]
[43.60945129 -69.62811279]
[49.58546829 -55.86994171]
[55.56148529 -42.11177444]
[66.86441803 -37.24720001]
[71.85633850 -25.55784225]
[67.27169800 -13.26920795]
[72.61532593 0.74669915]
[77.95895386 14.76260662]
[83.30258179 28.77851486]
[88.64620209 42.79442215]
[94.15529633 48.09641266]
[93.89808655 57.57180023]
[98.59824371 71.81639862]
[103.29840851 86.06098938]
[113.60258484 95.51168060]
[110.94618988 109.23884583]
[115.64634705 123.48344421]
[120.66954803 137.61735535]
[126.01316833 151.63327026]
[131.35679626 165.64916992]
[136.70042419 179.66508484]
[142.04405212 193.68098450]
[147.38768005 207.69689941]
[153.56700134 214.88473511]
[152.63955688 222.47427368]
[157.33972168 236.71887207]
[162.03987122 250.96347046]
[166.74003601 265.20806885]
[181.79379272 268.25433350]
[193.29698181 278.43136597]
[198.15530396 293.00161743]
[195.06187439 308.04577637]
[184.84881592 319.51699829]
[170.26341248 324.32962036]
[155.22903442 321.18905640]
[143.78987122 310.94009399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[13 49]
[14 48]
[16 46]
[17 45]
[18 44]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[25 35]
[26 34]
[27 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
