%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUAAGCGCGGCCGCCGUGGCUCCUGCGUCUCCCAUCGUGCCGUGCGUCCCGCGCCGCGUUCGAGUUCUCGGAGGGGAGGGGGCGUUAGCCCCGCGCAGCCGCCGGCGUCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[46.33475494 394.39535522]
[44.12680054 396.88900757]
[41.51910019 398.20611572]
[36.51199722 412.34573364]
[40.03090286 428.36291504]
[27.73831749 439.21759033]
[12.27980042 433.74343872]
[9.55774879 417.57177734]
[22.37237549 407.33865356]
[27.37947845 393.19900513]
[31.63970757 378.81671143]
[35.14138794 364.23117065]
[38.64307022 349.64562988]
[42.14474869 335.06008911]
[45.64643097 320.47451782]
[48.76510620 305.80230713]
[51.49863815 291.05349731]
[54.23217010 276.30465698]
[56.96570587 261.55584717]
[59.69923782 246.80702209]
[62.23947906 232.02368164]
[64.58599854 217.20835876]
[66.93251038 202.39302063]
[69.27902985 187.57769775]
[71.62554932 172.76237488]
[69.75357819 169.63679504]
[69.37639618 165.41732788]
[71.00547028 160.85226440]
[74.78167725 156.89543152]
[78.28335571 142.30989075]
[81.78504181 127.72433472]
[85.28672028 113.13878632]
[84.85903931 84.42197418]
[82.90114594 69.55030060]
[80.94325256 54.67862701]
[78.98536682 39.80695343]
[77.02747345 24.93528175]
[67.59461975 21.39099503]
[60.19382858 14.65159798]
[55.84332275 5.71158695]
[55.11663818 -4.13682222]
[58.06744003 -13.49040890]
[64.22896576 -21.03488159]
[58.12791443 -34.73806381]
[45.44650269 -44.19810486]
[47.33823013 -58.97208786]
[41.23718262 -72.67527008]
[35.13613129 -86.37845612]
[29.03508186 -100.08163452]
[22.93403244 -113.78482056]
[10.96807098 -125.79531860]
[19.19668770 -140.61848450]
[35.71846390 -136.81489563]
[36.63721466 -119.88586426]
[42.73826218 -106.18268585]
[48.83931351 -92.47949982]
[54.94036484 -78.77632141]
[61.04141235 -65.07314301]
[73.28643799 -56.59324265]
[71.83109283 -40.83911133]
[77.93214417 -27.13593102]
[82.11281586 -27.31185913]
[86.26679230 -26.80846214]
[93.42417145 -39.99071884]
[100.58155823 -53.17297363]
[107.73893738 -66.35523224]
[114.89631653 -79.53749084]
[113.92637634 -95.90792847]
[127.76566315 -104.70600128]
[142.17752075 -96.88100433]
[142.33624268 -80.48262024]
[128.07858276 -72.38010406]
[120.92119598 -59.19784927]
[113.76380920 -46.01559448]
[106.60643005 -32.83333588]
[99.44905090 -19.65108109]
[106.92109680 3.36982536]
[91.89913940 22.97738838]
[93.85703278 37.84906387]
[95.81492615 52.72073364]
[97.77281952 67.59240723]
[99.73071289 82.46408081]
[111.13680267 92.20580292]
[126.13166046 91.81314850]
[141.12652588 91.42049408]
[156.12138367 91.02783966]
[171.11624146 90.63518524]
[184.80848694 81.60997009]
[199.34748840 89.19611359]
[199.77676392 105.58963776]
[185.65472412 113.92629242]
[171.50889587 105.63004303]
[156.51403809 106.02269745]
[141.51918030 106.41535187]
[126.52431488 106.80800629]
[111.52945709 107.20066071]
[99.87226868 116.64046478]
[96.37059021 131.22601318]
[92.86891174 145.81156921]
[89.36722565 160.39710999]
[86.44087219 175.10888672]
[84.09435272 189.92422485]
[81.74784088 204.73954773]
[79.40132141 219.55487061]
[77.05480194 234.37019348]
[78.81455231 243.46238708]
[74.44805908 249.54054260]
[71.71453094 264.28936768]
[68.98099518 279.03820801]
[66.24745941 293.78701782]
[63.51392746 308.53585815]
[65.41394043 315.07763672]
[63.86861801 320.70886230]
[60.23197937 323.97619629]
[56.73029709 338.56176758]
[53.22861862 353.14730835]
[49.72693634 367.73284912]
[46.22525787 382.31838989]
[47.71987915 386.69839478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 10]
[4 9]
[11 118]
[12 117]
[13 116]
[14 115]
[15 114]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 105]
[22 104]
[23 103]
[24 102]
[25 101]
[29 100]
[30 99]
[31 98]
[32 97]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[43 61]
[44 60]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
