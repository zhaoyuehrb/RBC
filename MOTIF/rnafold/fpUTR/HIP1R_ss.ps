%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCCCGGGCGCGGCGCGGUGGCCUCGCGGUGCCUAGGCUGGGGCUGCCGGACCGUGAGGCUGUGAGUCGCGCGGACGGAGCCGGACAAAAGCGGGCGGCGGCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[136.71862793 245.50885010]
[130.42811584 232.55265808]
[128.05990601 218.32995605]
[129.81665039 204.00276184]
[135.56361389 190.74421692]
[144.83895874 179.64256287]
[136.63473511 167.08505249]
[128.43051147 154.52755737]
[120.05404663 142.08430481]
[111.50692749 129.75762939]
[102.95980835 117.43096161]
[85.75369263 110.47100067]
[84.24734497 91.97174072]
[75.03415680 80.13463593]
[65.82096863 68.29753113]
[56.60777283 56.46042252]
[47.39458466 44.62331390]
[38.18139267 32.78620529]
[28.96820259 20.94909859]
[14.38614368 14.81117153]
[12.67470932 0.01521714]
[3.46151829 -11.82189083]
[-9.30294418 -14.22387028]
[-16.72412682 -24.38892365]
[-15.22172832 -36.47904968]
[-24.10525703 -48.56552887]
[-32.98878479 -60.65200424]
[-41.87231445 -72.73847961]
[-50.75584412 -84.82495880]
[-59.63937378 -96.91143799]
[-68.52290344 -108.99790955]
[-77.40643311 -121.08438873]
[-86.28995514 -133.17086792]
[-95.17348480 -145.25733948]
[-104.05701447 -157.34381104]
[-111.77093506 -162.49618530]
[-113.01335907 -169.88795471]
[-121.56047821 -182.21463013]
[-127.56501007 -185.48388672]
[-130.47589111 -190.56825256]
[-130.21682739 -195.46414185]
[-138.07191467 -208.24293518]
[-145.92701721 -221.02172852]
[-161.42146301 -223.13265991]
[-171.89569092 -234.74406433]
[-172.40408325 -250.37338257]
[-162.70658875 -262.64093018]
[-147.38208008 -265.75436401]
[-133.66630554 -258.24356079]
[-128.03544617 -243.65496826]
[-133.14822388 -228.87683105]
[-125.29312897 -216.09803772]
[-117.43803406 -203.31924438]
[-109.23381042 -190.76174927]
[-100.68669128 -178.43507385]
[-91.97054291 -166.22734070]
[-83.08701324 -154.14086914]
[-74.20348358 -142.05439758]
[-65.31995392 -129.96791077]
[-56.43642426 -117.88143921]
[-47.55289459 -105.79496002]
[-38.66936874 -93.70848846]
[-29.78583908 -81.62200928]
[-20.90230942 -69.53553009]
[-12.01878071 -57.44905853]
[-3.13525176 -45.36257935]
[13.25937271 -39.27120590]
[15.29862595 -21.03508186]
[24.51181602 -9.19797325]
[38.43488693 -3.90671587]
[40.80530930 11.73590755]
[50.01850128 23.57301521]
[59.23169327 35.41012192]
[68.44488525 47.24723053]
[77.65807343 59.08433914]
[86.87126160 70.92144775]
[96.08445740 82.75855255]
[106.17583466 83.43321991]
[114.24630737 89.52899933]
[117.65499115 99.05118561]
[115.28647614 108.88384247]
[123.83359528 121.21051025]
[132.38072205 133.53718567]
[139.94973755 138.90014648]
[140.98800659 146.32333374]
[149.19223022 158.88084412]
[157.39645386 171.43833923]
[172.58103943 167.24092102]
[188.30114746 167.91850281]
[203.03199768 173.39343262]
[215.34840393 183.12335205]
[224.06271362 196.15483093]
[228.33927917 211.21681213]
[227.77458191 226.84460449]
[222.43534851 241.52230835]
[212.85078430 253.82983398]
[221.39790344 266.15649414]
[234.01066589 269.25799561]
[240.86061096 279.81643677]
[238.69447327 291.80541992]
[246.89869690 304.36291504]
[261.76724243 311.28088379]
[262.94070435 327.63796997]
[249.21188354 336.60748291]
[234.70384216 328.96228027]
[234.34120178 312.56713867]
[226.13697815 300.00964355]
[210.10281372 293.02438354]
[209.07124329 274.70361328]
[200.52412415 262.37695312]
[186.91162109 266.83084106]
[172.57913208 267.24963379]
[158.69888306 263.58999634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 87]
[7 86]
[8 85]
[9 83]
[10 82]
[11 81]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 71]
[21 69]
[22 68]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[37 55]
[38 54]
[41 53]
[42 52]
[43 51]
[96 110]
[97 109]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
