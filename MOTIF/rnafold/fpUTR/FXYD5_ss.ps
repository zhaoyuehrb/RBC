%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGCCACACCCUCCGCCUGGACGCAGCAGCCACCGCCGCGUCCCUCUCUCCACGAGGCUGCCGGCUUAGGACCCCCAGCUCCGAC\
) } def
/len { sequence length } bind def

/coor [
[157.66635132 242.70838928]
[167.95796204 231.60156250]
[160.84327698 218.39622498]
[153.72857666 205.19087219]
[146.61389160 191.98553467]
[139.26725769 178.90780640]
[131.69096375 165.96176147]
[124.11466980 153.01573181]
[108.45908356 145.30165100]
[108.22485352 126.99318695]
[100.19638824 114.32260132]
[87.90047455 107.66661072]
[87.13301849 93.70586395]
[79.10456085 81.03527069]
[71.07610321 68.36467743]
[63.04764175 55.69409180]
[44.42284775 58.86447525]
[26.24799347 53.88008499]
[11.91740608 41.71278381]
[4.09012127 24.67205620]
[4.19654465 5.96671724]
[12.17721748 -10.89929771]
[2.04878759 -21.96342468]
[-8.07964230 -33.02754974]
[-18.20807266 -44.09167862]
[-28.33650208 -55.15580368]
[-38.46493149 -66.21993256]
[-53.49030304 -71.17460632]
[-56.37702179 -85.78679657]
[-66.50545502 -96.85092926]
[-82.11963654 -95.99576569]
[-94.59939575 -105.41858673]
[-98.05217743 -120.67021942]
[-90.84767914 -134.54931641]
[-76.38764191 -140.50257874]
[-61.49965668 -135.71907043]
[-53.21337509 -122.45741272]
[-55.44132614 -106.97935486]
[-45.31289673 -95.91522980]
[-31.01198006 -91.75193024]
[-27.40080643 -76.34836578]
[-17.27237511 -65.28423309]
[-7.14394522 -54.22010803]
[2.98448467 -43.15598297]
[13.11291504 -32.09185410]
[23.24134445 -21.02772713]
[33.75530243 -25.92879486]
[45.21137619 -27.84987640]
[56.78053665 -26.64336967]
[67.62327576 -22.38830566]
[76.95052338 -15.38525009]
[84.08108521 -6.13506937]
[88.49137878 4.69687605]
[89.85386658 16.32859039]
[88.06136322 27.91789436]
[83.23545074 38.62340927]
[75.71823120 47.66563034]
[83.74668884 60.33621979]
[91.77514648 73.00681305]
[99.80361176 85.67739868]
[112.09952545 92.33338928]
[112.86698151 106.29413605]
[120.89543915 118.96472931]
[133.41827393 122.61323547]
[139.81146240 133.51681519]
[137.06069946 145.43943787]
[144.63699341 158.38548279]
[152.21328735 171.33151245]
[159.40975952 177.32191467]
[159.81924438 184.87083435]
[166.93392944 198.07618713]
[174.04861450 211.28153992]
[181.16331482 224.48687744]
[196.09988403 222.00143433]
[211.03376770 224.50300598]
[224.34503174 231.72026062]
[234.58979797 242.87031555]
[240.65676880 256.74368286]
[241.88783264 271.83551025]
[238.14949036 286.50872803]
[229.84721375 299.17172241]
[217.88159180 308.45086670]
[203.55056763 313.33966064]
[188.40864563 313.30776978]
[174.09832764 308.35870361]
[162.17187500 299.02926636]
[153.92298889 286.33145142]
[150.24642944 271.64260864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 68]
[7 67]
[8 66]
[10 63]
[11 62]
[13 60]
[14 59]
[15 58]
[16 57]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[29 39]
[30 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
