%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAAAAUGGCGGCGGCGGCGUCAGCAUCAGCGGCCUCCUGCCCGUAUCUAUCGUGGCGGCGACGGGACCCGCCUCCCUGGGCGCCGGAGUCAUGUGACCCACACA\
) } def
/len { sequence length } bind def

/coor [
[116.45780945 444.33947754]
[122.88034058 430.44668579]
[135.03056335 421.13912964]
[132.42584229 406.36700439]
[129.82112122 391.59487915]
[120.03376770 384.32229614]
[117.81654358 371.92251587]
[124.91642761 361.03326416]
[122.74244690 346.19165039]
[120.56847382 331.35003662]
[118.39449310 316.50839233]
[116.22052002 301.66677856]
[104.15705872 293.00604248]
[101.74090576 277.98547363]
[110.90689087 265.39093018]
[108.73291016 250.54931641]
[106.55892944 235.70768738]
[104.38495636 220.86605835]
[100.23742676 214.60739136]
[102.37010956 205.56179810]
[100.62871552 190.66322327]
[96.66497803 184.28657532]
[99.05984497 175.30683899]
[97.75251007 160.36392212]
[96.44517517 145.42100525]
[95.13784027 130.47808838]
[82.45053101 125.38838959]
[73.20608521 115.31797791]
[69.21809387 102.24247742]
[71.26892090 88.72704315]
[78.95623779 77.42314911]
[90.77192688 70.54839325]
[89.89975739 55.57377243]
[89.02758789 40.59915161]
[88.15541077 25.62452888]
[86.63088226 10.70220280]
[84.45690918 -4.13942194]
[82.06730652 -18.94785881]
[79.46258545 -33.71997452]
[76.64328766 -48.45264435]
[73.61002350 -63.14275360]
[70.57676697 -77.83286285]
[67.54350281 -92.52297211]
[64.51023865 -107.21308136]
[61.26364136 -121.85752106]
[57.80440521 -136.45320129]
[43.74988174 -143.30917358]
[37.43769455 -157.61618042]
[41.84826279 -172.61888123]
[54.89905167 -181.23344421]
[70.42787933 -179.39236450]
[81.10250092 -167.96492004]
[81.88269806 -152.34681702]
[72.40007782 -139.91242981]
[75.85931396 -125.31676483]
[80.53653717 -119.44338226]
[79.20034790 -110.24634552]
[82.23361206 -95.55623627]
[85.26687622 -80.86612701]
[88.30013275 -66.17601776]
[91.33339691 -51.48590851]
[95.83781433 -45.47898102]
[94.23469543 -36.32469940]
[96.83942413 -21.55258179]
[101.16722107 -15.41718292]
[99.29853058 -6.31339979]
[101.47251129 8.52822495]
[104.22331238 10.96355534]
[105.85371399 14.91895771]
[105.63146973 19.81462669]
[103.13003540 24.75235558]
[104.00220490 39.72697830]
[104.87438202 54.70160294]
[105.74655151 69.67622375]
[120.15530396 76.62655640]
[129.14900208 89.85654449]
[130.31135559 105.81173706]
[123.33005524 120.20551300]
[110.08075714 129.17074585]
[111.38809204 144.11366272]
[112.69543457 159.05659485]
[114.00276947 173.99951172]
[115.52729034 188.92182922]
[117.26868439 203.82041931]
[119.22657776 218.69207764]
[121.40055847 233.53370667]
[123.57453918 248.37533569]
[125.74851227 263.21694946]
[138.14158630 272.65356445]
[140.13488770 287.73605347]
[131.06214905 299.49279785]
[133.23611450 314.33441162]
[135.41009521 329.17605591]
[137.58407593 344.01766968]
[139.75805664 358.85928345]
[151.51605225 372.93679810]
[144.59324646 388.99017334]
[147.19796753 403.76226807]
[149.80268860 418.53439331]
[164.40353394 423.12500000]
[175.19035339 433.98333740]
[179.68441772 448.61419678]
[176.85301208 463.65551758]
[167.34677124 475.65093994]
[153.35017395 481.84399414]
[138.07952881 480.81155396]
[125.04391479 472.79086304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[15 88]
[16 87]
[17 86]
[18 85]
[20 84]
[21 83]
[23 82]
[24 81]
[25 80]
[26 79]
[32 74]
[33 73]
[34 72]
[35 71]
[36 67]
[37 66]
[38 64]
[39 63]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
