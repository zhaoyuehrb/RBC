%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCUACGCGCGCCCGCCGUUCCCGCGAGGCCCACCUAGAGCCGGGCGGCGCAGGCGCAGAGUCCCCGGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[123.93415833 324.13787842]
[133.87702942 311.85314941]
[132.06898499 296.96252441]
[130.26092529 282.07189941]
[128.45288086 267.18124390]
[113.45532990 257.05041504]
[110.29570007 238.91320801]
[121.35200500 223.80442810]
[118.35161591 209.10757446]
[104.00428009 200.57814026]
[100.05723572 184.01672363]
[109.37349701 169.36914062]
[105.78376007 154.80500793]
[102.19403076 140.24087524]
[98.60429382 125.67675018]
[95.01455688 111.11262512]
[90.84129333 96.70485687]
[86.09127808 82.47680664]
[81.34125519 68.24876404]
[76.59123230 54.02071381]
[71.84121704 39.79266739]
[67.09119415 25.56462097]
[61.25125504 18.17386818]
[62.44892502 10.66704941]
[58.27566147 -3.74072194]
[47.00439835 -14.84338570]
[50.89526367 -29.22081184]
[46.72200394 -43.62858582]
[31.53037453 -56.58952332]
[36.26471329 -75.16326141]
[30.94564056 -89.18850708]
[25.62656784 -103.21374512]
[12.58841515 -113.16053772]
[14.95159054 -129.38851929]
[30.28505898 -135.20373535]
[42.81506348 -124.62399292]
[39.65180969 -108.53282166]
[44.97088242 -94.50757599]
[50.28995895 -80.48233032]
[60.25090027 -76.98720551]
[66.65366364 -68.31539917]
[67.07923889 -57.32114792]
[61.12977600 -47.80184555]
[65.30303955 -33.39407349]
[76.27580261 -23.32195091]
[72.68343353 -7.91398382]
[76.85669708 6.49378777]
[81.31924438 20.81459999]
[86.06925964 35.04264832]
[90.81928253 49.27069473]
[95.56930542 63.49874115]
[100.31932068 77.72678375]
[105.06934357 91.95483398]
[109.36206055 95.47261047]
[111.22412872 101.21312714]
[109.57868195 107.52288818]
[113.16841888 122.08702087]
[116.75815582 136.65113831]
[120.34789276 151.21527100]
[123.93762207 165.77940369]
[136.32641602 171.47262573]
[142.99838257 183.13732910]
[141.66427612 196.31169128]
[133.04847717 206.10719299]
[136.04885864 220.80404663]
[147.34454346 225.45988464]
[154.80932617 234.97766113]
[156.60285950 246.81684875]
[152.37870789 257.89117432]
[143.34352112 265.37319946]
[145.15156555 280.26382446]
[146.95960999 295.15447998]
[148.76766968 310.04510498]
[161.36154175 319.59338379]
[163.43231201 335.26141357]
[153.75140381 347.75366211]
[138.06234741 349.65866089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[8 65]
[9 64]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[24 47]
[25 46]
[27 44]
[28 43]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
