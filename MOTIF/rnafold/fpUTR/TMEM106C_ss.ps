%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCGCGCGCCCGCGUUCUCCUGGCGGGCUUGGUAUUUGGCGCCUGCGCGCUGAGUGCGUGCCGCUCCGCCGACCGAAGAGGCUGGUAAGUCCUCAAGCUGGCAGGUGGUCGGGGGAGCGGCCGGAGAGGAGCUGCCGGGAGUUCGUGCCCUGCAGGACAUGACACCAGUGGCAUAUCACGGCC\
) } def
/len { sequence length } bind def

/coor [
[71.95186615 132.74903870]
[76.70684814 118.52332306]
[69.20711517 118.46031952]
[63.55428314 132.35440063]
[57.90145111 146.24848938]
[52.24861908 160.14256287]
[46.59578705 174.03665161]
[40.94295502 187.93072510]
[35.29012299 201.82481384]
[38.06781006 217.98699951]
[25.28847122 228.26419067]
[10.09839916 222.08407593]
[8.12383556 205.80424500]
[21.39604378 196.17198181]
[27.04887390 182.27789307]
[32.70170593 168.38381958]
[38.35453796 154.48973083]
[44.00737000 140.59565735]
[49.66020203 126.70156860]
[55.31303406 112.80748749]
[55.31303406 97.80748749]
[49.66020203 83.91340637]
[44.00737000 70.01932526]
[38.35453796 56.12524796]
[32.70170593 42.23116684]
[27.04887390 28.33708572]
[21.39604378 14.44300365]
[15.74321079 0.54892248]
[10.09037971 -13.34515858]
[3.94493818 -20.13207626]
[4.46145344 -27.52043915]
[-0.95717144 -41.50752258]
[-6.37579632 -55.49460602]
[-30.50586319 -61.59464645]
[-43.69087601 -82.33766174]
[-58.68611526 -82.71562195]
[-73.68135071 -83.09358215]
[-88.67658997 -83.47154236]
[-103.67182922 -83.84949493]
[-118.66706848 -84.22745514]
[-133.66230774 -84.60541534]
[-148.65754700 -84.98337555]
[-163.65277100 -85.36133575]
[-178.64801025 -85.73929596]
[-193.64324951 -86.11725616]
[-207.78092957 -77.80714417]
[-221.91114807 -86.12995911]
[-221.49792480 -102.52389526]
[-206.96636963 -110.12428284]
[-193.26528931 -101.11248779]
[-178.27005005 -100.73453522]
[-163.27481079 -100.35657501]
[-148.27958679 -99.97861481]
[-133.28434753 -99.60065460]
[-118.28910828 -99.22269440]
[-103.29386902 -98.84473419]
[-88.29862976 -98.46677399]
[-73.30339050 -98.08882141]
[-58.30815506 -97.71086121]
[-43.31291962 -97.33290100]
[-38.28576660 -108.13983154]
[-29.75225639 -116.46096039]
[-18.82208824 -121.21421051]
[-18.82208824 -136.21421814]
[-18.82208824 -151.21421814]
[-18.82208824 -166.21421814]
[-18.82208824 -181.21421814]
[-18.82208824 -196.21421814]
[-18.82208824 -211.21421814]
[-18.82208824 -226.21421814]
[-26.55938721 -240.01438904]
[-18.82208824 -252.74165344]
[-18.82208824 -267.74166870]
[-18.82208824 -282.74166870]
[-18.82208824 -297.74166870]
[-18.82208824 -312.74166870]
[-18.82208824 -327.74166870]
[-18.82208824 -342.74166870]
[-29.83551598 -348.70559692]
[-37.21859741 -358.73306274]
[-39.61553955 -370.87884521]
[-36.63044739 -382.81912231]
[-28.89121246 -392.29605103]
[-17.91863251 -397.54461670]
[-17.41472816 -412.53616333]
[-16.91082573 -427.52767944]
[-16.40692139 -442.51922607]
[-15.90301704 -457.51074219]
[-15.39911270 -472.50228882]
[-28.47706795 -480.55603027]
[-35.76192093 -494.07736206]
[-35.29407883 -509.42913818]
[-27.19938850 -522.48175049]
[-13.65528488 -529.72418213]
[1.69493842 -529.20825195]
[14.72214794 -521.07269287]
[21.92209053 -507.50595093]
[21.35801697 -492.15740967]
[13.18166065 -479.15576172]
[-0.40757948 -471.99838257]
[-0.91148347 -457.00686646]
[-1.41538751 -442.01531982]
[-1.91929150 -427.02377319]
[-2.42319536 -412.03225708]
[-2.92709947 -397.04071045]
[11.48532104 -386.86361694]
[16.96677208 -369.92816162]
[11.14931107 -352.93914795]
[-3.82208729 -342.74166870]
[-3.82208729 -327.74166870]
[-3.82208729 -312.74166870]
[-3.82208729 -297.74166870]
[-3.82208729 -282.74166870]
[-3.82208729 -267.74166870]
[-3.82208729 -252.74165344]
[3.91521287 -240.01438904]
[-3.82208729 -226.21421814]
[-3.82208729 -211.21421814]
[-3.82208729 -196.21421814]
[-3.82208729 -181.21421814]
[-3.82208729 -166.21421814]
[-3.82208729 -151.21421814]
[-3.82208729 -136.21421814]
[-3.82208729 -121.21421051]
[5.12146330 -117.81674194]
[12.74399281 -111.98506165]
[18.39826012 -104.19248199]
[21.59792328 -95.07971191]
[22.05934525 -85.40218353]
[19.72664642 -75.96740723]
[14.77782440 -67.56761169]
[7.61128712 -60.91323090]
[13.02991199 -46.92614746]
[18.44853783 -32.93906403]
[23.98446083 -18.99798965]
[29.63729286 -5.10390949]
[35.29012299 8.79017162]
[40.94295502 22.68425369]
[46.59578705 36.57833481]
[52.24861908 50.47241592]
[57.90145111 64.36649323]
[63.55428314 78.26057434]
[69.20711517 92.15466309]
[82.33329010 67.51382446]
[113.47505188 60.02830887]
[143.21966553 80.57431030]
[156.29322815 87.92835236]
[169.36679077 95.28238678]
[182.44035339 102.63642883]
[195.51393127 109.99047089]
[208.64880371 117.23443604]
[221.84405518 124.36781311]
[237.56715393 121.17971802]
[249.76985168 131.59478760]
[249.09127808 147.62348938]
[236.05198669 156.96995544]
[220.65460205 152.46440125]
[214.71067810 137.56307983]
[201.51542664 130.42970276]
[194.12072754 130.01364136]
[188.15988159 123.06403351]
[175.08631897 115.70999146]
[162.01275635 108.35595703]
[148.93919373 101.00191498]
[135.86563110 93.64787292]
[130.19750977 98.55932617]
[118.86125946 108.38224030]
[113.19313812 113.29369354]
[118.61176300 127.28077698]
[124.64232635 134.16998291]
[124.00176239 141.54861450]
[129.18464661 155.62475586]
[134.36753845 169.70089722]
[148.81919861 176.09817505]
[154.43647766 190.87049866]
[147.88676453 205.25372314]
[133.05587769 210.71450806]
[118.74271393 204.01309204]
[113.43903351 189.12528992]
[120.29140472 174.88378906]
[115.10851288 160.80764771]
[109.92562866 146.73150635]
[104.62467957 132.69940186]
[99.20605469 118.71231842]
[91.70632172 118.64932251]
[96.22140503 132.95365906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[28 136]
[29 135]
[31 134]
[32 133]
[33 132]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[63 124]
[64 123]
[65 122]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
[72 115]
[73 114]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[146 165]
[147 164]
[148 163]
[149 162]
[150 161]
[151 159]
[152 158]
[168 184]
[169 183]
[171 182]
[172 181]
[173 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
