%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCAACAAUUCCUCACCGCAGGAGCCUCUGAAGCUCCCACCAGGCCAGCUCUCCUCCCACAACAGCUUCCCACAGC\
) } def
/len { sequence length } bind def

/coor [
[139.96513367 163.14984131]
[131.47990417 167.78001404]
[122.46800995 171.27624512]
[113.08023834 173.58003235]
[103.47363281 174.65284729]
[93.80892181 174.47674561]
[84.24777985 173.05465698]
[74.95017242 170.41036987]
[66.07164764 166.58815002]
[57.76072693 161.65191650]
[50.15646362 155.68426514]
[43.38607407 148.78501892]
[37.56282043 141.06961060]
[32.78412628 132.66712952]
[29.12994003 123.71812439]
[26.66139412 114.37232208]
[25.41978645 104.78607941]
[25.42588997 95.11975861]
[26.67959976 85.53508759]
[29.15994453 76.19241333]
[32.82542801 67.24803162]
[37.61472702 58.85158157]
[43.44771576 51.14353561]
[50.22681427 44.25284958]
[41.41003418 32.11759567]
[32.59325790 19.98233986]
[23.77647781 7.84708500]
[14.95969963 -4.28817034]
[-0.65136856 -5.19842911]
[-11.98949718 -15.96787071]
[-13.70116806 -31.51149178]
[-4.97818279 -44.49007416]
[10.06073093 -48.77552414]
[24.31465912 -42.34438324]
[31.05333138 -28.23324203]
[27.09495354 -13.10494900]
[35.91173172 -0.96969396]
[44.72851181 11.16556072]
[53.54529190 23.30081558]
[62.36206818 35.43606949]
[85.53508759 26.67959976]
[110.29743958 25.97920799]
[133.92835999 33.41185379]
[153.83139038 48.16086960]
[167.81971741 68.60571289]
[174.35633850 92.50000000]
[189.35633850 92.50000000]
[200.48945618 81.60544586]
[215.70159912 81.81912994]
[226.01927185 92.50000000]
[241.01927185 92.50000000]
[256.01928711 92.50000000]
[271.01928711 92.50000000]
[277.17486572 78.57057953]
[288.46823120 68.35394287]
[302.94271851 63.62017059]
[318.09057617 65.18942261]
[331.28732300 72.78982544]
[340.24652100 85.10454559]
[343.41595459 100.00000000]
[340.24652100 114.89545441]
[331.28732300 127.21017456]
[318.09057617 134.81057739]
[302.94271851 136.37983704]
[288.46823120 131.64605713]
[277.17486572 121.42942047]
[271.01928711 107.50000000]
[256.01928711 107.50000000]
[241.01927185 107.50000000]
[226.01927185 107.50000000]
[215.70159912 118.18087006]
[200.48945618 118.39455414]
[189.35633850 107.50000000]
[174.35633850 107.50000000]
[172.76631165 117.03465271]
[169.95890808 126.28430939]
[165.98112488 135.09423828]
[160.89949036 143.31706238]
[154.79901123 150.81518555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[46 74]
[47 73]
[50 70]
[51 69]
[52 68]
[53 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
