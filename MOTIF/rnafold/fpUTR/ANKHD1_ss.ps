%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGCAGCAGGUUAGGCAGUGAGAAGUUAGUGGCGCUGCUGGGACGGGGGAAAGGAGACGCUUCUUCCUCUUGCUGCUCUUCUCGUUCCCGAGAUCAGCGGCGGCGGUGACCGCGAGUGGGUCGGCACCGUCUCCGGCUCCGGGUGCGAACA\
) } def
/len { sequence length } bind def

/coor [
[230.79789734 139.27748108]
[241.13334656 128.40710449]
[226.35540771 125.83564758]
[211.57745361 123.26419830]
[196.79951477 120.69275665]
[181.99626160 118.27119446]
[167.16925049 115.99977875]
[152.34222412 113.72836304]
[137.51519775 111.45694733]
[122.68817139 109.18553162]
[107.86114502 106.91411591]
[102.96969604 118.14479828]
[86.81758118 122.76152802]
[72.75129700 127.97110748]
[58.68501282 133.18067932]
[47.29689789 147.61643982]
[30.13679123 144.06416321]
[16.17898178 149.55775452]
[2.22117043 155.05134583]
[-11.73663998 160.54493713]
[-25.69445038 166.03851318]
[-39.65225983 171.53210449]
[-53.61007309 177.02569580]
[-54.68460846 192.25094604]
[-62.26617432 205.49792480]
[-74.84944153 214.13645935]
[-89.93599701 216.45133972]
[-104.53038788 211.98295593]
[-115.73489380 201.61849976]
[-121.32484436 187.41584778]
[-120.19036102 172.19496155]
[-112.55668640 158.97793579]
[-99.93949890 150.38902283]
[-84.84394836 148.13357544]
[-70.26726532 152.65939331]
[-59.10366058 163.06788635]
[-45.14585114 157.57429504]
[-31.18803978 152.08070374]
[-17.23023033 146.58712769]
[-3.27241898 141.09353638]
[10.68539143 135.59994507]
[24.64320183 130.10635376]
[29.78064728 119.11431122]
[41.41219330 114.44182587]
[53.47543716 119.11440277]
[67.54171753 113.90482330]
[81.60800171 108.69524384]
[85.51475525 94.21293640]
[75.97683716 82.63588715]
[66.43891907 71.05883026]
[56.90100861 59.48177338]
[47.36309433 47.90472031]
[37.82517624 36.32766724]
[28.28726387 24.75061226]
[20.36651611 20.08124733]
[18.67623329 12.84090519]
[9.37490940 1.07292438]
[0.07358569 -10.69505596]
[-9.22773838 -22.46303749]
[-23.79294586 -31.14007950]
[-19.48705673 -47.53811646]
[-2.53787065 -47.93993378]
[2.54024243 -31.76436043]
[11.84156609 -19.99637985]
[21.14289093 -8.22839928]
[30.44421387 3.53958106]
[39.86431885 15.21269798]
[49.40223312 26.78975296]
[58.94014740 38.36680603]
[68.47805786 49.94385910]
[78.01597595 61.52091599]
[87.55389404 73.09796906]
[97.09180450 84.67502594]
[110.13256073 92.08708954]
[124.95958710 94.35850525]
[139.78660583 96.62992096]
[154.61363220 98.90133667]
[169.44065857 101.17275238]
[184.26768494 103.44416809]
[193.28450012 101.64462280]
[199.37095642 105.91481018]
[214.14891052 108.48625946]
[228.92684937 111.05770874]
[243.70480347 113.62915802]
[258.59402466 115.44881439]
[273.55627441 116.51200867]
[288.51855469 117.57520294]
[303.48083496 118.63839722]
[317.79470825 111.89871216]
[329.94155884 120.51865387]
[344.90383911 121.58185577]
[359.86611938 122.64505005]
[374.82836914 123.70824432]
[383.66983032 121.18437958]
[390.08212280 124.94763184]
[405.01977539 126.31385040]
[412.55130005 117.02501678]
[423.52993774 112.59629822]
[435.15994263 114.02985382]
[444.54000854 120.85063934]
[449.38708496 131.25445557]
[464.25711060 133.22489929]
[479.12710571 135.19535828]
[493.82409668 129.33795166]
[505.42468262 138.68009949]
[520.29467773 140.65054321]
[535.16467285 142.62100220]
[550.03472900 144.59144592]
[564.90472412 146.56190491]
[579.77471924 148.53234863]
[594.64477539 150.50280762]
[603.62322998 148.52087402]
[609.79498291 152.66683960]
[624.62200928 154.93824768]
[639.47131348 157.05929565]
[654.34130859 159.02973938]
[666.73382568 149.22154236]
[682.42224121 151.13188171]
[692.09887695 163.62741089]
[690.02276611 179.29473877]
[677.42565918 188.83872986]
[661.78112793 186.59709167]
[652.37084961 173.89976501]
[637.50085449 171.92930603]
[630.41516113 174.18159485]
[622.35058594 169.76527405]
[607.52355957 167.49386597]
[592.67431641 165.37281799]
[577.80432129 163.40235901]
[562.93426514 161.43191528]
[548.06427002 159.46145630]
[533.19427490 157.49101257]
[518.32421875 155.52055359]
[503.45422363 153.55010986]
[489.82083130 159.54846191]
[477.15664673 150.06536865]
[462.28665161 148.09492493]
[447.41662598 146.12446594]
[433.63873291 158.11294556]
[415.15100098 156.25094604]
[403.65356445 141.25149536]
[388.71591187 139.88528442]
[373.76519775 138.67051697]
[358.80291748 137.60731506]
[343.84063721 136.54412842]
[328.87835693 135.48092651]
[315.63467407 142.29666138]
[302.41763306 133.60067749]
[287.45535278 132.53747559]
[272.49310303 131.47427368]
[257.53082275 130.41108704]
[264.94421387 143.45109558]
[259.56472778 157.45327759]
[245.32737732 162.17532349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[4 82]
[5 81]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[13 47]
[14 46]
[15 45]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[56 66]
[57 65]
[58 64]
[59 63]
[85 151]
[86 150]
[87 149]
[88 148]
[90 146]
[91 145]
[92 144]
[93 143]
[95 142]
[96 141]
[101 138]
[102 137]
[103 136]
[105 134]
[106 133]
[107 132]
[108 131]
[109 130]
[110 129]
[111 128]
[113 127]
[114 126]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
