%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCCGCGUGUGGAAGUCUGUGAGGCGCAGAGGUGGGGCAGGCCGUCUGACUAGCUAGGCGGCUGGGAGCGUUUUCGUGGCGGGGAACGGAGGUUGAAUUGCCCUGCCUGGGCUCAUAGGGAAGGAGGAUGUGAAGGAGCUUGUGAAGGCAGAGGAAGAUUAUUGAAUAAUAAAAUACAGUUUUGAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[365.74798584 410.24597168]
[379.92163086 405.33590698]
[394.59750366 402.23455811]
[409.54580688 400.99044800]
[424.53247070 401.62304688]
[439.32260132 404.12246704]
[427.92843628 394.36682129]
[416.53424072 384.61120605]
[405.14004517 374.85556030]
[393.74584961 365.09991455]
[380.13845825 373.00619507]
[364.62048340 375.78244019]
[349.06307983 373.07519531]
[335.34860229 365.19345093]
[325.14270020 353.07327271]
[319.69223022 338.16683960]
[319.67279053 322.26837158]
[325.10504150 307.29821777]
[313.55358887 297.72933960]
[302.00210571 288.16046143]
[290.45065308 278.59158325]
[278.89916992 269.02270508]
[267.34771729 259.45382690]
[255.79623413 249.88493347]
[248.62870789 248.03625488]
[244.13626099 240.06506348]
[232.74208069 230.30943298]
[218.04212952 227.90927124]
[212.59150696 213.05662537]
[201.19731140 203.30097961]
[196.43688965 202.77244568]
[191.96229553 199.23799133]
[189.59771729 193.03759766]
[178.52711487 182.91624451]
[167.45649719 172.79490662]
[156.38589478 162.67355347]
[145.31529236 152.55221558]
[134.24467468 142.43086243]
[123.17407227 132.30952454]
[112.10346222 122.18817902]
[101.03285217 112.06683350]
[87.56404877 105.46445465]
[72.78260803 102.91318512]
[58.00116730 100.36191559]
[43.21972656 97.81063843]
[28.43828392 95.25936890]
[13.65684319 92.70809937]
[-1.12459874 90.15682983]
[-15.90604019 87.60556030]
[-30.68748283 85.05428314]
[-43.45460129 94.36965942]
[-59.05615997 91.84640503]
[-68.23603821 78.98151398]
[-65.54796600 63.40749741]
[-52.58673859 54.36415482]
[-37.04201889 57.21672821]
[-28.13621140 70.27284241]
[-13.35476875 72.82411194]
[1.42667246 75.37538910]
[16.20811462 77.92665863]
[30.98955536 80.47792816]
[45.77099609 83.02919769]
[60.55244064 85.58047485]
[75.33387756 88.13174438]
[90.11531830 90.68301392]
[94.41436768 84.53742981]
[80.06787109 80.15815735]
[79.79967499 65.16056061]
[93.98043060 60.27115250]
[103.01245880 72.24626160]
[107.31150055 66.10067749]
[99.84677124 53.08999252]
[92.38204193 40.07931519]
[84.91731262 27.06863403]
[77.45258331 14.05795288]
[69.98785400 1.04727256]
[62.52312088 -11.96340752]
[47.20489502 -15.85282326]
[39.19541931 -29.47720718]
[43.24657059 -44.75345230]
[56.95487595 -52.61843872]
[72.18743896 -48.40600204]
[79.90705109 -34.61531067]
[75.53379822 -19.42813873]
[82.99852753 -6.41745758]
[90.46326447 6.59322262]
[97.92799377 19.60390282]
[105.39272308 32.61458206]
[112.85745239 45.62526321]
[120.32218170 58.63594437]
[120.00891876 43.63921356]
[134.29002380 39.05120850]
[149.15113831 41.08778763]
[161.67141724 49.34868240]
[169.39015198 62.21030045]
[170.79029846 77.14480591]
[165.59664917 91.21698761]
[154.83000183 101.66107941]
[140.60639954 106.42440033]
[125.72200012 104.57100677]
[111.15419769 100.99622345]
[122.22480774 111.11756897]
[133.29541016 121.23891449]
[144.36602783 131.36026001]
[155.43663025 141.48159790]
[166.50723267 151.60295105]
[177.57785034 161.72428894]
[188.64845276 171.84564209]
[199.71907043 181.96697998]
[210.95295715 191.90679932]
[222.34713745 201.66242981]
[237.86207581 204.76037598]
[242.49771118 218.91523743]
[253.89190674 228.67088318]
[265.36511230 238.33346558]
[276.91659546 247.90234375]
[288.46804810 257.47122192]
[300.01953125 267.04010010]
[311.57098389 276.60900879]
[323.12246704 286.17788696]
[334.67395020 295.74676514]
[346.87371826 288.21768188]
[360.78204346 284.83160400]
[375.03463745 285.90707397]
[388.23767090 291.32559204]
[399.10403442 300.54458618]
[406.57888794 312.65176392]
[409.94195557 326.45526123]
[408.87701416 340.60104370]
[403.50149536 353.70571899]
[414.89569092 363.46136475]
[426.28988647 373.21701050]
[437.68405151 382.97265625]
[449.07824707 392.72827148]
[446.99536133 377.87359619]
[456.55773926 366.31674194]
[471.53970337 365.58181763]
[482.18722534 376.14736938]
[481.56817627 391.13458252]
[470.08599854 400.78585815]
[485.08151245 401.15206909]
[500.07705688 401.51828003]
[515.07257080 401.88449097]
[529.20373535 393.56332397]
[543.34045410 401.87506104]
[542.94012451 418.26931763]
[528.41448975 425.88107300]
[514.70635986 416.88003540]
[499.71084595 416.51382446]
[484.71530151 416.14761353]
[469.71978760 415.78140259]
[482.38790894 423.81372070]
[493.95364380 433.36535645]
[504.23587036 444.28674316]
[513.07348633 456.40679932]
[520.32818604 469.53576660]
[525.88629150 483.46798706]
[529.66082764 497.98532104]
[531.59265137 512.86041260]
[531.65142822 527.86029053]
[529.83636475 542.75006104]
[526.17584229 557.29656982]
[520.72711182 571.27197266]
[513.57562256 584.45739746]
[504.83331299 596.64642334]
[494.63705444 607.64807129]
[483.14660645 617.29016113]
[470.54183960 625.42156982]
[457.02020264 631.91503906]
[442.79342651 636.66882324]
[428.08428955 639.60858154]
[413.12319946 640.68811035]
[398.14440918 639.89068604]
[383.38250732 637.22863770]
[369.06869507 632.74377441]
[355.42709351 626.50622559]
[342.67132568 618.61376953]
[331.00122070 609.18994141]
[320.59948730 598.38238525]
[311.62902832 586.36029053]
[304.23031616 573.31195068]
[298.51925659 559.44171143]
[294.58526611 544.96673584]
[292.48992920 530.11383057]
[292.26608276 515.11547852]
[293.91723633 500.20666504]
[297.41751099 485.62075806]
[302.71212769 471.58627319]
[309.71810913 458.32293701]
[318.32580566 446.03848267]
[328.40039062 434.92532349]
[339.78408813 425.15744019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 134]
[7 133]
[8 132]
[9 131]
[10 130]
[18 121]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[26 114]
[27 113]
[29 111]
[30 110]
[33 109]
[34 108]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
