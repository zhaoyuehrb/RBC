%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGUGGCAGCCUGGCUCUGAAGUGGAAUUAUGUGCUUCAAACAGGUUGAAAGAGGGAAACAGUCUUUUCCUGCUUCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[73.33016205 191.58177185]
[58.90331650 187.47494507]
[46.51826859 179.01263428]
[37.44870758 167.06512451]
[32.62734985 152.86109924]
[32.55003357 137.86129761]
[37.22470856 123.60831451]
[46.17062378 111.56793976]
[58.46777725 102.97840881]
[72.85152435 98.72308350]
[87.84199524 99.23944855]
[76.67041016 89.22966003]
[65.49882507 79.21987915]
[54.32724380 69.21009827]
[43.15565872 59.20031738]
[31.98407745 49.19053268]
[20.81249428 39.18075180]
[9.01641273 42.17116165]
[-2.61136055 39.01755142]
[-11.10706425 30.64717865]
[-14.36605644 19.30088615]
[-11.66340733 7.93410301]
[-22.07452011 -2.86444902]
[-32.48563385 -13.66300106]
[-42.89674759 -24.46155357]
[-53.30785751 -35.26010513]
[-63.71897125 -46.05865860]
[-74.13008118 -56.85720825]
[-89.47868347 -54.57683563]
[-103.22072601 -61.78348541]
[-110.07212067 -75.70606232]
[-107.39836121 -90.99104309]
[-96.22756958 -101.76103973]
[-80.85513306 -103.87477875]
[-67.19207764 -96.51947784]
[-60.49211884 -82.52339935]
[-63.33153152 -67.26832581]
[-52.92042160 -56.46976852]
[-42.50930786 -45.67121887]
[-32.09819412 -34.87266541]
[-21.68708038 -24.07411385]
[-11.27596855 -13.27556229]
[-0.86485529 -2.47700977]
[17.24207115 -3.39587784]
[30.66333580 9.25390148]
[30.82227707 28.00916862]
[41.99385834 38.01895142]
[53.16544342 48.02873230]
[64.33702850 58.03851700]
[75.50860596 68.04830170]
[86.68019104 78.05808258]
[97.85177612 88.06786346]
[105.06596375 89.03649139]
[110.39859772 93.94956970]
[125.23874664 96.13359070]
[140.07888794 98.31760406]
[154.85856628 92.67208099]
[166.32363892 102.18003082]
[181.16380310 104.36405182]
[196.00395203 106.54806519]
[210.84410095 108.73208618]
[225.68424988 110.91609955]
[240.52439880 113.10012054]
[253.05664062 103.47107697]
[268.71597290 105.60675812]
[278.21197510 118.24010468]
[275.91085815 133.87597656]
[263.17782593 143.23788452]
[247.56713867 140.77157593]
[238.34037781 127.94026947]
[223.50022888 125.75625610]
[208.66007996 123.57223511]
[193.81993103 121.38821411]
[178.97978210 119.20420074]
[164.13963318 117.02017975]
[150.42143250 122.82192230]
[137.89488220 113.15775299]
[123.05472565 110.97373962]
[108.21457672 108.78971863]
[118.20082855 119.98234558]
[124.13068390 133.76046753]
[125.39431763 148.70715332]
[121.86177063 163.28526306]
[113.89634705 175.99557495]
[102.31719971 185.53094482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 52]
[12 51]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[54 79]
[55 78]
[56 77]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
