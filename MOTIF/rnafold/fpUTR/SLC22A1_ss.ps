%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUUUCAAACCACUCCUUUUCAAAGAUCUCUGAGGGAGACAUUGCACCUGGCCACUGCAGCCCAGAGCAGGUCUGGCCACGGCCAUGAGCAUGCUGAGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[108.12715149 157.32286072]
[101.36768341 157.87995911]
[94.58944702 157.64274597]
[87.88546753 156.61447144]
[81.34774017 154.80924988]
[75.06598663 152.25184631]
[69.12641144 148.97735596]
[63.61053467 145.03073120]
[58.59405136 140.46612549]
[54.14580536 135.34619141]
[50.32683563 129.74116516]
[47.18955994 123.72799683]
[44.77703094 117.38919067]
[43.12235641 110.81174469]
[42.24824524 104.08592224]
[27.27458763 103.19731903]
[12.30093193 102.30870819]
[-2.67272425 101.42009735]
[-17.64637947 100.53148651]
[-32.62003708 99.64287567]
[-47.59369278 98.75427246]
[-54.97407913 112.11437988]
[-67.42528534 120.94219971]
[-82.47510529 123.48493958]
[-97.13539886 119.23775482]
[-108.49534607 109.04391479]
[-114.29942322 94.92741394]
[-113.39522552 79.69110870]
[-105.96228790 66.36016083]
[-93.47641754 57.58144760]
[-78.41669464 55.09798813]
[-63.77323914 59.40287399]
[-52.45352554 69.64137268]
[-46.70508194 83.78061676]
[-31.73142624 84.66921997]
[-16.75777054 85.55783081]
[-1.78411484 86.44644165]
[13.18954086 87.33505249]
[28.16319656 88.22366333]
[43.13685226 89.11226654]
[47.06919861 76.54173279]
[53.74099731 65.18527985]
[62.80694199 55.63068008]
[73.79782867 48.37242508]
[86.14481354 43.78617477]
[99.20888519 42.10929108]
[112.31389618 43.42855835]
[124.78160095 47.67569733]
[135.96672058 54.63090134]
[146.72932434 44.18263626]
[157.33593750 33.57603455]
[167.78419495 22.81342506]
[178.23246765 12.05081749]
[188.68072510 1.28820813]
[199.12899780 -9.47440052]
[209.57725525 -20.23700905]
[219.53689575 -31.45332527]
[228.98820496 -43.10118103]
[238.43952942 -54.74904251]
[247.89083862 -66.39689636]
[243.75958252 -81.35391235]
[249.24034119 -95.87083435]
[262.22564697 -104.36560059]
[277.72241211 -103.57181549]
[289.77178955 -93.79469299]
[293.74057007 -78.79374695]
[288.10263062 -64.33713531]
[275.02593994 -55.98373032]
[259.53869629 -56.94557953]
[250.08738708 -45.29772186]
[240.63606262 -33.64986420]
[231.18475342 -22.00200653]
[231.25761414 -18.32299995]
[229.44645691 -14.43825531]
[225.68205261 -11.28452015]
[220.33987427 -9.78874397]
[209.89160156 0.97386473]
[199.44334412 11.73647404]
[188.99507141 22.49908257]
[178.54681396 33.26169205]
[168.09854126 44.02429962]
[165.65864563 51.12982941]
[157.17759705 54.94524384]
[146.41499329 65.39350891]
[157.20843506 91.10306549]
[154.73251343 118.87625122]
[139.56149292 142.27111816]
[148.30619812 154.45843506]
[157.05088806 166.64573669]
[164.72328186 171.90119934]
[165.86779785 179.32626343]
[174.24749756 191.76734924]
[189.81632996 193.23213196]
[200.76435852 204.39791870]
[201.92224121 219.99256897]
[192.74328613 232.65278625]
[177.56150818 236.40077209]
[163.54527283 229.46685791]
[157.31262207 215.12503052]
[161.80641174 200.14704895]
[153.42671204 187.70596313]
[144.86358643 175.39042664]
[136.11888123 163.20312500]
[127.37419891 151.01582336]
[121.22024536 153.86706543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[49 84]
[50 83]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 72]
[58 71]
[59 70]
[60 69]
[87 104]
[88 103]
[89 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
