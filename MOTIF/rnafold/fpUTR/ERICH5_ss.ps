%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCGCUGCGCGCUUGCGCUCUACGCCCAAGGGAGCCGGGCUGCAGAGCUGGAGAAACUUCCGCGGCUACGGGUGCAGUUGCCUUCGGUUCCCGGUUCCGGGCCGACACCCGCGCAGGGCUGAGACAGGUGUCUGCGCUCCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[84.70759583 88.63578033]
[77.16199493 75.67183685]
[69.61638641 62.70788956]
[62.07078552 49.74394226]
[54.52518463 36.77999878]
[49.87295914 34.12620926]
[47.03178024 30.31462097]
[46.13807678 26.24817848]
[46.94224930 22.74937439]
[40.23120880 9.33438587]
[33.52016449 -4.08060122]
[26.80911827 -17.49558830]
[20.09807396 -30.91057587]
[13.38703060 -44.32556152]
[-1.33731520 -49.40802383]
[-7.95216656 -63.10832977]
[-3.01607656 -77.11441803]
[-9.72712040 -90.52941132]
[-16.57921410 -103.87290192]
[-23.57159424 -117.14341736]
[-29.45011711 -103.34331512]
[-43.29107666 -97.56163788]
[-57.23923111 -103.07969666]
[-63.37849045 -116.76580048]
[-58.22460938 -130.85258484]
[-44.70259857 -137.34529114]
[-30.48732185 -132.55961609]
[-35.74948120 -146.60630798]
[-41.01164246 -160.65299988]
[-46.27380371 -174.69970703]
[-50.41449356 -178.09683228]
[-52.57546997 -182.33129883]
[-52.77382660 -186.49005127]
[-51.39369583 -189.80419922]
[-55.75742340 -204.15544128]
[-60.12114716 -218.50666809]
[-64.48487854 -232.85791016]
[-68.84860229 -247.20913696]
[-73.21232605 -261.56036377]
[-77.57605743 -275.91159058]
[-81.93978119 -290.26284790]
[-86.30351257 -304.61407471]
[-94.67954254 -292.17050171]
[-109.36260986 -289.10336304]
[-122.01954651 -297.15332031]
[-125.46707916 -311.75177002]
[-117.74861145 -324.61352539]
[-103.24464417 -328.43911743]
[-90.18723297 -321.05801392]
[-92.70539856 -335.84512329]
[-95.22355652 -350.63223267]
[-97.74172211 -365.41937256]
[-100.25988007 -380.20648193]
[-102.77803802 -394.99359131]
[-105.29620361 -409.78070068]
[-107.81436157 -424.56784058]
[-119.89500427 -438.42373657]
[-113.24106598 -454.63110352]
[-116.07042694 -469.36184692]
[-118.89978027 -484.09259033]
[-121.72914124 -498.82333374]
[-135.61340332 -513.37646484]
[-128.66035461 -531.37689209]
[-132.10820007 -545.97528076]
[-137.15846252 -553.66967773]
[-135.47138977 -560.91772461]
[-138.61068726 -575.58551025]
[-149.99659729 -587.38775635]
[-145.20904541 -603.07250977]
[-129.17306519 -606.50463867]
[-118.38510132 -594.15344238]
[-123.94287872 -578.72479248]
[-120.80358124 -564.05700684]
[-117.50983429 -549.42309570]
[-114.06198883 -534.82470703]
[-104.85260773 -530.20996094]
[-99.62589264 -521.07873535]
[-100.33957672 -510.36071777]
[-106.99839783 -501.65267944]
[-104.16903687 -486.92193604]
[-101.33968353 -472.19122314]
[-98.51032257 -457.46047974]
[-88.64868927 -450.38220215]
[-86.20214844 -438.08251953]
[-93.02724457 -427.08599854]
[-90.50908661 -412.29885864]
[-87.99092102 -397.51174927]
[-85.47276306 -382.72463989]
[-82.95459747 -367.93753052]
[-80.43643951 -353.15039062]
[-77.91828156 -338.36328125]
[-75.40011597 -323.57617188]
[-71.95227814 -308.97778320]
[-67.58855438 -294.62655640]
[-63.22482300 -280.27532959]
[-58.86109543 -265.92410278]
[-54.49737167 -251.57286072]
[-50.13364410 -237.22163391]
[-45.76991653 -222.87039185]
[-41.40618896 -208.51916504]
[-37.04246140 -194.16793823]
[-32.22710800 -179.96186829]
[-26.96494865 -165.91516113]
[-21.70278740 -151.86846924]
[-16.44062614 -137.82177734]
[-10.30107689 -124.13580322]
[-3.30869675 -110.86528015]
[2.63213038 -106.38347626]
[3.68786669 -97.24045563]
[10.39891052 -83.82546234]
[24.56732368 -79.37667847]
[31.56437874 -65.86757660]
[26.80201721 -51.03660583]
[33.51306152 -37.62162018]
[40.22410583 -24.20663261]
[46.93515015 -10.79164505]
[53.64619446 2.62334204]
[60.35723877 16.03833008]
[67.48912811 29.23439407]
[75.03472900 42.19834137]
[82.58033752 55.16228485]
[90.12593842 68.12622833]
[97.67153931 81.09017944]
[117.48083496 83.40829468]
[128.70593262 105.06648254]
[139.25648499 115.72884369]
[149.80703735 126.39120483]
[160.35757446 137.05357361]
[176.30952454 140.85716248]
[180.73153687 156.64886475]
[169.07463074 168.18351746]
[153.33042908 163.59527588]
[149.69522095 147.60411072]
[139.14466858 136.94175720]
[128.59411621 126.27938843]
[118.04357910 115.61702728]
[105.15989685 123.29887390]
[109.52362823 137.65011597]
[113.88735199 152.00134277]
[127.30710602 160.79280090]
[128.65722656 176.77894592]
[116.90202332 187.69656372]
[101.05907440 185.17060852]
[93.28173065 171.13876343]
[99.53611755 156.36506653]
[95.17239380 142.01383972]
[90.80866241 127.66260529]
[79.01961517 114.98785400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[5 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[14 113]
[17 110]
[18 109]
[19 107]
[20 106]
[27 105]
[28 104]
[29 103]
[30 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[58 82]
[59 81]
[60 80]
[61 79]
[63 75]
[64 74]
[66 73]
[67 72]
[125 136]
[126 135]
[127 134]
[128 133]
[137 147]
[138 146]
[139 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
