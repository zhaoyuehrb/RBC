%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAACGAGGCACAACAAGGGACUGGGGGUUCGUCUGCUGGGUUUGCGGAGCAGCUAGCUACUCGGCGGGAUCUCCCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[8.30412960 274.20565796]
[-8.94067383 275.84600830]
[-25.73225021 271.68362427]
[-33.62873077 284.43688965]
[-29.76681137 299.76208496]
[-37.94416809 313.28634644]
[-53.30931854 316.98602295]
[-66.74639893 308.66613770]
[-70.28341675 293.26275635]
[-61.82193375 279.91436768]
[-46.38198853 276.54040527]
[-38.48550797 263.78713989]
[-47.21085739 254.39485168]
[-53.34830475 243.12680054]
[-56.51178741 230.68014526]
[-56.49943161 217.82644653]
[-53.30640793 205.36399841]
[-47.12560654 194.06814575]
[-38.33597565 184.64305115]
[-27.47928810 177.67787170]
[-15.22676468 173.60987854]
[-2.33756638 172.69699097]
[10.38824177 175.00149536]
[22.15935135 180.38575745]
[31.84827232 168.93478394]
[41.53719330 157.48381042]
[51.22611237 146.03283691]
[60.91503525 134.58186340]
[70.60395813 123.13088989]
[80.29287720 111.67991638]
[77.09902954 100.58020782]
[79.72669983 89.33301544]
[87.50793457 80.79740906]
[98.46469879 77.14318848]
[109.81174469 79.29925537]
[120.31989288 68.59510803]
[130.82803345 57.89095306]
[141.33618164 47.18679810]
[151.84432983 36.48264694]
[162.35247803 25.77849579]
[172.86062622 15.07434273]
[183.36875916 4.37019062]
[193.87690735 -6.33396196]
[204.38505554 -17.03811455]
[205.08755493 -30.07449150]
[214.26303101 -38.78445816]
[226.51013184 -38.80540085]
[237.40664673 -49.11395264]
[233.76618958 -64.03516388]
[238.08946228 -78.77304077]
[249.21353149 -89.36315155]
[264.14608765 -92.95682526]
[278.87033081 -88.58737183]
[289.42553711 -77.43015289]
[292.97238159 -62.48641205]
[288.55679321 -47.77593613]
[277.36654663 -37.25576401]
[262.41174316 -33.75577545]
[247.71519470 -38.21744919]
[236.81869507 -27.90889931]
[232.85627747 -10.91988087]
[215.08920288 -6.52996874]
[204.58106995 4.17418385]
[194.07292175 14.87833595]
[183.56477356 25.58248901]
[173.05662537 36.28664017]
[162.54847717 46.99079132]
[152.04032898 57.69494629]
[141.53219604 68.39910126]
[131.02404785 79.10324860]
[120.51589966 89.80740356]
[121.60379028 107.62019348]
[109.58103180 120.80853271]
[91.74385071 121.36883545]
[82.05493164 132.81980896]
[72.36600494 144.27078247]
[62.67708588 155.72175598]
[52.98816681 167.17272949]
[43.29924393 178.62370300]
[33.61032486 190.07467651]
[42.75085831 204.95072937]
[46.43949890 221.99308777]
[44.27408981 239.27203369]
[36.51445389 254.83619690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[47 60]
[48 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
