%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGAGGCCCCAGCACUGACCUCCGUGGGGGUGGAGAUGAGGAGGAUGGAAAGGGUGUCUUCCUCCAGCAUCUUCCUGAAGCUCCCGGAUA\
) } def
/len { sequence length } bind def

/coor [
[128.50753784 177.48471069]
[113.52011108 178.09872437]
[99.38047791 173.09164429]
[88.11944580 163.18260193]
[81.35437012 149.79478455]
[80.05687714 134.85101318]
[84.41332245 120.49756622]
[93.79634094 108.79737854]
[79.05448914 111.56826782]
[64.31263733 114.33916473]
[49.57078552 117.11005402]
[34.82893372 119.88094330]
[29.30455971 124.09639740]
[23.38333702 124.64039612]
[19.00037003 122.30579376]
[4.10508871 124.07514191]
[-10.79019260 125.84449005]
[-18.24864006 139.45152283]
[-32.29499817 146.04541016]
[-47.52816010 143.09068298]
[-58.09066010 131.72348022]
[-59.92100525 116.31473541]
[-52.31538391 102.78942108]
[-38.19832230 96.34828949]
[-22.99810982 99.46810150]
[-12.55954361 110.94921112]
[2.33573771 109.17986298]
[17.23101807 107.41050720]
[32.05804443 105.13909149]
[46.79989624 102.36820221]
[61.54174423 99.59731293]
[76.28359222 96.82642365]
[91.02544403 94.05552673]
[104.70793915 87.90822601]
[116.56958008 78.72663879]
[128.43121338 69.54504395]
[140.29284668 60.36345673]
[139.51113892 43.56647110]
[148.74005127 29.70792770]
[164.22999573 24.06606293]
[179.89349365 28.65024757]
[191.43826294 19.07328033]
[202.98303223 9.49631214]
[214.52780151 -0.08065629]
[226.07257080 -9.65762424]
[237.61734009 -19.23459244]
[249.16210938 -28.81156158]
[260.70687866 -38.38853073]
[272.25164795 -47.96549606]
[270.90307617 -64.72649384]
[279.65866089 -78.88883209]
[294.94921875 -85.05063629]
[310.75860596 -80.99809265]
[321.97332764 -90.95951080]
[333.18807983 -100.92092896]
[344.40280151 -110.88234711]
[346.78219604 -126.74797058]
[360.74154663 -134.65469360]
[375.57241821 -128.53713989]
[379.89785767 -113.08818817]
[370.39974976 -100.15894318]
[354.36422729 -99.66761780]
[343.14947510 -89.70619965]
[331.93475342 -79.74478149]
[320.72003174 -69.78336334]
[323.25122070 -56.55910492]
[318.83239746 -43.72528458]
[308.53237915 -34.71909714]
[295.01007080 -32.00940704]
[281.82861328 -36.42072678]
[270.28384399 -26.84375954]
[258.73907471 -17.26679230]
[247.19430542 -7.68982410]
[235.64953613 1.88714409]
[224.10476685 11.46411228]
[212.55999756 21.04108047]
[201.01522827 30.61804771]
[189.47045898 40.19501495]
[191.55358887 53.49721909]
[186.70381165 66.17447662]
[176.10548401 74.82765198]
[162.49940491 77.07908630]
[149.47444153 72.22509003]
[137.61280823 81.40668488]
[125.75116730 90.58827209]
[113.88953400 99.76985931]
[128.87049866 100.52521515]
[142.49458313 106.80092621]
[152.80500793 117.69564819]
[158.32096863 131.64463806]
[158.25022888 146.64447021]
[152.60293579 160.54080200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[15 28]
[16 27]
[17 26]
[34 86]
[35 85]
[36 84]
[37 83]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
