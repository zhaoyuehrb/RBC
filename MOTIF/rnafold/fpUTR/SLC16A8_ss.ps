%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAGGCCCUGAGGGGCCAGCAGUUGUCCUUCAGAGGGAGCCUGCAGAGGUGCAGAGUCAGGUGGGACCCGUCGUCCUCCCCUCGUCCUUCAGCGCCCUUUGCAGGAGAAGGAGACUUGGGAGGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[6.08702183 319.59674072]
[1.43368280 330.74285889]
[-6.71401453 339.61215210]
[-17.36439133 345.16015625]
[-29.23303795 346.74459839]
[-40.89770889 344.19952393]
[-49.36165619 356.58343506]
[-57.82560349 368.96737671]
[-66.28955078 381.35128784]
[-74.75350189 393.73522949]
[-75.45748138 410.11926270]
[-90.12158966 417.46063232]
[-103.66063690 408.20721436]
[-102.14682770 391.87808228]
[-87.13742828 385.27127075]
[-78.67347717 372.88735962]
[-70.20952606 360.50341797]
[-61.74557877 348.11950684]
[-53.28163147 335.73556519]
[-61.86911392 319.90362549]
[-61.32138443 301.81689453]
[-51.70270157 286.39096069]
[-35.55408859 277.86080933]
[-17.22259331 278.61834717]
[-9.67073154 265.65805054]
[-2.11886978 252.69775391]
[5.43299198 239.73745728]
[6.08886909 232.30055237]
[13.32452679 226.56002808]
[21.18499565 213.78454590]
[29.04546547 201.00906372]
[36.90593338 188.23356628]
[44.76640320 175.45808411]
[44.84604263 160.56369019]
[58.66761398 152.86468506]
[66.52808380 140.08920288]
[74.38855743 127.31372070]
[64.16220856 110.84610748]
[63.54111099 91.47152710]
[72.69172668 74.38275146]
[89.16150665 64.15990448]
[108.53622437 63.54292679]
[114.81203461 49.91889572]
[121.08784485 36.29486847]
[127.36366272 22.67083740]
[133.63946533 9.04680824]
[139.91528320 -4.57722139]
[146.19110107 -18.20125008]
[152.46690369 -31.82528114]
[158.74272156 -45.44931030]
[165.01853943 -59.07333755]
[171.13053894 -72.77163696]
[177.07785034 -86.54224396]
[183.02516174 -100.31284332]
[181.39360046 -116.04969788]
[193.54295349 -124.66609955]
[199.49028015 -138.43670654]
[205.43759155 -152.20730591]
[196.98934937 -170.33296204]
[204.33293152 -188.60952759]
[222.41239929 -195.63258362]
[227.35446167 -209.79507446]
[232.29652405 -223.95756531]
[228.40690613 -241.90907288]
[242.03205872 -252.90148926]
[246.63308716 -267.17840576]
[251.23411560 -281.45532227]
[255.83514404 -295.73226929]
[260.43618774 -310.00918579]
[254.42755127 -324.88452148]
[262.43643188 -338.78552246]
[278.31909180 -341.04849243]
[289.89169312 -329.93750000]
[288.27676392 -313.97592163]
[274.71310425 -305.40814209]
[270.11206055 -291.13122559]
[265.51104736 -276.85430908]
[260.91000366 -262.57739258]
[256.30899048 -248.30046082]
[261.55673218 -237.33251953]
[257.76458740 -225.35775757]
[246.45901489 -219.01550293]
[241.51695251 -204.85302734]
[236.57489014 -190.69053650]
[243.46444702 -182.85272217]
[246.45162964 -172.76918030]
[244.91941833 -162.28251648]
[239.08322144 -153.33898926]
[229.96356201 -147.62731934]
[219.20819092 -146.25999451]
[213.26087952 -132.48939514]
[207.31356812 -118.71878815]
[209.37051392 -103.96689606]
[196.79576111 -94.36553192]
[190.84844971 -80.59493256]
[184.90113831 -66.82432556]
[185.13957214 -59.36236954]
[178.64256287 -52.79752731]
[172.36674500 -39.17349625]
[166.09094238 -25.54946899]
[159.81512451 -11.92543888]
[153.53930664 1.69859099]
[147.26350403 15.32262039]
[140.98768616 28.94664955]
[134.71188354 42.57067871]
[128.43606567 56.19470978]
[122.16025543 69.81874084]
[129.77058411 77.29101562]
[134.96543884 86.60582733]
[137.32331848 97.00738525]
[136.65290833 107.65175629]
[133.00862122 117.67529297]
[126.68613434 126.26471710]
[118.19842529 132.72311401]
[108.23416901 136.52647400]
[97.60181427 137.36621094]
[87.16403961 135.17419434]
[79.30357361 147.94967651]
[71.44309998 160.72515869]
[70.80123138 176.53334045]
[57.54188919 183.31855774]
[49.68141937 196.09403992]
[41.82094955 208.86952209]
[33.96047974 221.64500427]
[26.10001183 234.42050171]
[18.39329147 247.28930664]
[10.84143066 260.24960327]
[3.28956890 273.20989990]
[-4.26229286 286.17022705]
[3.08261228 295.89022827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[24 129]
[25 128]
[26 127]
[27 126]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[35 119]
[36 118]
[37 117]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 96]
[53 95]
[54 94]
[56 92]
[57 91]
[58 90]
[61 84]
[62 83]
[63 82]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
