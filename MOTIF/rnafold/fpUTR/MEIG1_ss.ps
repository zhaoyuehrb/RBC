%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCUCGCGGAUCCCGAGUAGAGAACGCAAGCACCCACGCCCGCCUGCAAGCUCCCGGGCGCCCCCGGCCUCUCCUGCUCGGCGGAACGAGGAUAACCCAGUAGAGCCGGACCCAGGGAUAUUAUUGAUAAUAAGGCCUCUGUAACC\
) } def
/len { sequence length } bind def

/coor [
[81.10847473 152.63235474]
[73.43096161 149.20507812]
[66.35406494 144.66548157]
[55.80351639 155.32783508]
[45.25297165 165.99020386]
[34.70242691 176.65257263]
[30.49566269 191.90425110]
[16.04382324 195.50891113]
[5.49327803 206.17127991]
[-5.05726767 216.83364868]
[-4.62653828 234.28932190]
[-16.69204140 246.44082642]
[-33.47668839 246.14559937]
[-43.80009460 257.02804565]
[-41.84749603 272.54324341]
[-50.36808777 285.65557861]
[-65.33870697 290.17382812]
[-79.69068909 283.96456909]
[-86.64746857 269.95968628]
[-82.92425537 254.77178955]
[-70.27905273 245.57218933]
[-54.68252563 246.70463562]
[-44.35911942 235.82220459]
[-46.49480820 223.07537842]
[-40.79483795 211.25880432]
[-29.14820671 204.80651855]
[-15.71963120 206.28309631]
[-5.16908503 195.62072754]
[5.38146114 184.95837402]
[8.83357811 170.46932983]
[24.04006195 166.10202026]
[34.59060669 155.43966675]
[45.14115524 144.77729797]
[55.69169998 134.11492920]
[49.40794373 123.82221985]
[45.47700500 112.42163849]
[44.08168793 100.44338989]
[45.28688431 88.44451141]
[49.03654861 76.98303223]
[36.31769180 69.03126526]
[23.59883118 61.07949448]
[10.87997246 53.12772369]
[-1.83888650 45.17595673]
[-14.55774498 37.22418594]
[-27.43543625 45.41734314]
[-42.59371948 47.20317459]
[-57.02290726 42.22710037]
[-67.85807037 31.47712708]
[-72.94789124 17.08766747]
[-71.28176117 1.91575980]
[-63.19050980 -11.02620316]
[-50.28065491 -19.16858482]
[-35.11545563 -20.89470863]
[-20.70597649 -15.86185169]
[-9.91322803 -5.06929302]
[-4.88011885 9.34009838]
[-6.60597658 24.50532722]
[6.11288214 32.45709610]
[18.83174133 40.40886688]
[31.55060005 48.36063385]
[44.26945877 56.31240463]
[56.98831940 64.26417542]
[71.04885101 52.15770340]
[88.29669189 45.31831360]
[106.83297729 44.49896622]
[124.61699677 49.78986740]
[132.96697998 37.32881546]
[141.31695557 24.86776352]
[149.66694641 12.40671158]
[158.01692200 -0.05433998]
[160.21780396 -8.99109554]
[166.67662048 -12.68753242]
[175.28746033 -24.96977234]
[183.89830017 -37.25201035]
[185.48495483 -52.99345779]
[199.12654114 -58.97310638]
[207.73738098 -71.25534821]
[216.34822083 -83.53758240]
[224.03007507 -96.42126465]
[230.74111938 -109.83625031]
[237.45216370 -123.25123596]
[244.16320801 -136.66622925]
[238.93147278 -151.57945251]
[245.85252380 -165.78771973]
[260.82022095 -170.86149597]
[274.95452881 -163.79060364]
[279.86978149 -148.77009583]
[272.64984131 -134.71134949]
[257.57818604 -129.95518494]
[250.86715698 -116.54019165]
[244.15611267 -103.12520599]
[237.44506836 -89.71022034]
[251.80313110 -94.05142212]
[265.66134644 -88.31119537]
[272.74438477 -75.08884430]
[269.84487915 -60.37174225]
[258.27584839 -50.82412720]
[243.27593994 -50.76936340]
[231.63748169 -60.23225403]
[228.63046265 -74.92674255]
[220.01962280 -62.64450455]
[211.40878296 -50.36226654]
[210.43803406 -35.49932861]
[196.18054199 -28.64117050]
[187.56970215 -16.35893059]
[178.95886230 -4.07669115]
[170.47798157 8.29564190]
[162.12799072 20.75669289]
[153.77801514 33.21774292]
[145.42803955 45.67879486]
[137.07804871 58.13984680]
[149.43960571 73.86996460]
[155.47319031 92.94457245]
[154.40652466 112.92223358]
[146.37614441 131.24592590]
[157.57957458 141.22004700]
[168.78300476 151.19416809]
[179.98643494 161.16830444]
[191.18986511 171.14242554]
[206.26722717 167.98347473]
[220.15136719 174.23521423]
[227.60383606 187.30902100]
[225.94871521 202.08734131]
[237.15214539 212.06146240]
[248.35557556 222.03558350]
[259.55899048 232.00971985]
[270.76242065 241.98384094]
[286.61306763 247.99995422]
[285.21994019 264.89657593]
[268.59802246 268.23535156]
[260.78829956 253.18727112]
[249.58486938 243.21315002]
[238.38143921 233.23901367]
[227.17800903 223.26489258]
[215.97459412 213.29077148]
[201.48704529 216.64471436]
[187.63874817 210.75498962]
[179.82254028 197.68746948]
[181.21572876 182.34585571]
[170.01229858 172.37171936]
[158.80886841 162.39759827]
[147.60545349 152.42347717]
[136.40202332 142.44935608]
[129.62622070 147.42721558]
[122.18070221 151.33293152]
[114.23376465 154.07821655]
[105.96504974 155.60101318]
[97.56149292 155.86688232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[13 23]
[14 22]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[66 111]
[67 110]
[68 109]
[69 108]
[70 107]
[72 106]
[73 105]
[74 104]
[76 102]
[77 101]
[78 100]
[79 92]
[80 91]
[81 90]
[82 89]
[115 143]
[116 142]
[117 141]
[118 140]
[119 139]
[123 135]
[124 134]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
