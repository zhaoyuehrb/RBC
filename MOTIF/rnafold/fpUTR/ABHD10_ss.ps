%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCAACAGUCUAAACGAAAGAGCCACGACGCUCUGCGCAUGUGCGCUCUUCGCAAGCUGAAAAUCUUGCGGGGAGCUCUUUAGCAAGUUCCGCCUUCCAGCCUGAAGCGCAUGCGCAGCCUCGGUUCCGUUGCGUAGCGUGUCCCUCAGUGGGACACUGCAGGGUGCGGGGACAACUACGAAG\
) } def
/len { sequence length } bind def

/coor [
[176.10658264 274.01071167]
[164.61543274 283.65194702]
[151.58757019 291.08663940]
[137.44163513 296.07589722]
[122.63220215 298.45935059]
[107.63518524 298.16046143]
[92.93248749 295.18878174]
[78.99659729 289.63983154]
[66.27532196 281.69192505]
[55.17746353 271.60046387]
[46.05965042 259.68972778]
[39.21487808 246.34248352]
[34.86310196 231.98762512]
[33.14416504 217.08644104]
[34.11330414 202.11778259]
[37.73937988 187.56266785]
[43.90586472 173.88879395]
[52.41460037 161.53561401]
[62.99216843 150.90005493]
[75.29492950 142.32601929]
[82.37016296 129.09948730]
[89.44540405 115.87296295]
[76.89516449 124.08828735]
[64.34492493 132.30360413]
[51.79468536 140.51893616]
[39.24444962 148.73425293]
[36.26059341 164.25430298]
[23.12967491 173.04945374]
[7.64203310 169.90167236]
[-1.01378906 156.67849731]
[2.29755449 141.22500610]
[15.61150265 132.70947266]
[31.02912521 136.18402100]
[43.57936478 127.96868896]
[56.12960052 119.75336456]
[68.67984009 111.53804779]
[81.23007965 103.32272339]
[84.84803772 88.76557922]
[77.60407257 75.63070679]
[70.36010742 62.49583054]
[63.11614227 49.36095428]
[55.87217712 36.22607803]
[48.62821198 23.09119987]
[41.38424683 9.95632458]
[34.14028549 -3.17855167]
[26.89631844 -16.31342697]
[19.65235329 -29.44830322]
[-19.68671989 -30.56444168]
[-32.37319946 -38.56777191]
[-45.05967712 -46.57110214]
[-57.74615479 -54.57443237]
[-70.43263245 -62.57776260]
[-83.11911011 -70.58109283]
[-95.80558777 -78.58441925]
[-108.49206543 -86.58775330]
[-121.17854309 -94.59107971]
[-133.86502075 -102.59440613]
[-146.55149841 -110.59774017]
[-159.23797607 -118.60106659]
[-173.59953308 -112.72523499]
[-188.66395569 -116.44578552]
[-198.63868713 -128.33209229]
[-199.68823242 -143.81362915]
[-191.40901184 -156.93743896]
[-176.98455811 -162.65713501]
[-161.96138000 -158.77337646]
[-152.11618042 -146.77955627]
[-151.23464966 -131.28755188]
[-138.54817200 -123.28421783]
[-125.86168671 -115.28088379]
[-113.17520905 -107.27755737]
[-100.48873138 -99.27423096]
[-87.80225372 -91.27089691]
[-75.11577606 -83.26757050]
[-62.42930222 -75.26423645]
[-49.74282455 -67.26091003]
[-37.05634689 -59.25757980]
[-24.36986732 -51.25424957]
[-11.68339062 -43.25091934]
[-4.76033640 -46.13558960]
[-12.05676746 -59.24139404]
[-19.35319901 -72.34719849]
[-31.25263023 -81.47975159]
[-32.44143677 -96.43256378]
[-22.13451576 -107.33061218]
[-7.13869333 -106.97666931]
[2.64259148 -95.60449219]
[0.74896729 -80.72328949]
[4.91736937 -66.31410980]
[9.08577156 -51.90493011]
[16.00882530 -54.78960037]
[19.25883675 -69.43328094]
[22.50884819 -84.07696533]
[16.56424904 -101.49500275]
[28.89574051 -113.96855927]
[31.89929008 -128.66477966]
[22.97998238 -141.71166992]
[25.98069572 -157.22846985]
[39.12116241 -166.00935364]
[54.60537338 -162.84474182]
[63.24682617 -149.61218262]
[59.91869736 -134.16229248]
[46.59550476 -125.66122437]
[43.59195328 -110.96501160]
[49.99948120 -100.68946838]
[47.60264587 -88.41049957]
[37.15253067 -80.82695770]
[33.90251923 -66.18327332]
[30.65250778 -51.53958893]
[32.78723145 -36.69226837]
[40.03119659 -23.55739212]
[47.27516174 -10.42251682]
[54.51912308 2.71235967]
[61.76308823 15.84723568]
[69.00705719 28.98211288]
[76.25102234 42.11698914]
[83.49498749 55.25186539]
[90.73895264 68.38674164]
[97.98291779 81.52161407]
[106.92931366 83.80245209]
[113.21604919 89.87808228]
[115.52144623 97.80288696]
[130.01574707 101.66488647]
[144.51005554 105.52687836]
[159.00436401 109.38887787]
[173.49867249 113.25087738]
[184.31062317 105.19772339]
[197.59297180 104.85380554]
[208.48316956 112.12059021]
[213.12358093 124.15422821]
[227.55096436 128.25917053]
[236.68289185 127.59835052]
[242.18515015 132.55615234]
[256.54153442 136.90289307]
[270.89791870 141.24961853]
[285.25430298 145.59635925]
[299.61071777 149.94308472]
[303.84573364 148.78886414]
[307.82382202 149.03071594]
[311.13442993 150.41362000]
[313.49334717 152.57460022]
[314.76718140 155.09393311]
[328.79928589 160.39488220]
[342.83139038 165.69583130]
[356.86349487 170.99676514]
[370.89559937 176.29771423]
[384.92770386 181.59866333]
[398.95980835 186.89959717]
[414.11392212 181.63343811]
[427.60214233 190.31947327]
[429.07745361 206.29455566]
[417.40814209 217.30393982]
[401.54589844 214.90219116]
[393.65887451 200.93170166]
[379.62677002 195.63076782]
[365.59466553 190.32981873]
[351.56256104 185.02886963]
[337.53045654 179.72793579]
[323.49835205 174.42698669]
[309.46624756 169.12603760]
[295.26397705 164.29948425]
[280.90759277 159.95274353]
[266.55117798 155.60601807]
[252.19480896 151.25927734]
[237.83840942 146.91255188]
[223.44601440 142.68655396]
[209.01863098 138.58161926]
[194.70059204 147.38592529]
[178.11595154 143.03480530]
[169.63668823 127.74518585]
[155.14237976 123.88318634]
[140.64807129 120.02118683]
[126.15375519 116.15919495]
[111.65944672 112.29719543]
[122.52786255 122.63536072]
[133.39627075 132.97352600]
[147.77215576 137.25535583]
[161.15257263 144.03504944]
[173.10755920 153.09477234]
[183.25292969 164.14335632]
[191.26268005 176.82577515]
[196.87940979 190.73449707]
[199.92263794 205.42254639]
[200.29457092 220.41793823]
[197.98323059 235.23878479]
[193.06292725 249.40884399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[38 119]
[39 118]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 79]
[49 78]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[91 109]
[92 108]
[93 107]
[95 104]
[96 103]
[122 174]
[123 173]
[124 172]
[125 171]
[126 170]
[130 167]
[131 166]
[133 165]
[134 164]
[135 163]
[136 162]
[137 161]
[142 160]
[143 159]
[144 158]
[145 157]
[146 156]
[147 155]
[148 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
