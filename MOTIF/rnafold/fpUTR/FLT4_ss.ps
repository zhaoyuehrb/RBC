%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCAGCCGGCGCCCGCGCGGACACUUUCAGCCCCGAGCCGCGGCCGCUCGGGUCGGACCCACGCGCAGCGGCCGGAG\
) } def
/len { sequence length } bind def

/coor [
[91.89722443 255.70777893]
[77.35859680 260.65991211]
[62.29481888 257.66354370]
[50.75797653 247.52467346]
[45.85142517 232.97058105]
[48.89500046 217.91627502]
[59.06999588 206.41127014]
[73.63938904 201.55036926]
[76.56574249 186.83859253]
[79.49209595 172.12680054]
[82.41844940 157.41502380]
[85.34480286 142.70324707]
[87.98175049 127.93685150]
[90.32826233 113.12152863]
[84.00514984 103.14352417]
[86.08180237 91.51468658]
[95.46764374 84.34194946]
[98.39400482 69.63016510]
[101.32035828 54.91838837]
[104.24671173 40.20660782]
[107.17306519 25.49482918]
[96.85046387 18.52181816]
[89.60123444 8.43467426]
[86.30232239 -3.50451732]
[87.33828735 -15.81230831]
[92.55665588 -26.96820068]
[101.28975677 -35.60248566]
[112.44010162 -40.66441345]
[124.61823273 -41.55002213]
[129.25349426 -55.81586838]
[120.30548859 -68.35538483]
[120.45515442 -83.58138275]
[129.43551636 -95.65685272]
[143.63446045 -100.07593536]
[148.26971436 -114.34178162]
[152.90496826 -128.60763550]
[157.54022217 -142.87347412]
[162.17547607 -157.13932800]
[166.81072998 -171.40518188]
[171.44598389 -185.67102051]
[163.00643921 -198.83567810]
[165.05471802 -214.33853149]
[176.62367249 -224.85961914]
[192.25080872 -225.43119812]
[204.55746460 -215.78338623]
[207.73281860 -200.47158813]
[200.27755737 -186.72555542]
[185.71183777 -181.03576660]
[181.07658386 -166.76991272]
[176.44131470 -152.50407410]
[171.80606079 -138.23822021]
[167.17080688 -123.97237396]
[162.53555298 -109.70652771]
[157.90029907 -95.44068146]
[166.79000854 -83.51964569]
[166.95748901 -68.47185516]
[158.12896729 -56.06579590]
[143.51933289 -51.18061447]
[138.88407898 -36.91476822]
[151.51542664 -24.34912491]
[156.27995300 -7.09564447]
[151.84632874 10.33069229]
[139.30130005 23.32765770]
[121.88484192 28.42118454]
[118.95848846 43.13296127]
[116.03213501 57.84474182]
[113.10578156 72.55651855]
[110.17942810 87.26830292]
[116.04696655 102.86562347]
[105.14359283 115.46804047]
[102.79707336 130.28337097]
[104.56972504 139.52307129]
[100.05658722 145.62960815]
[97.13022614 160.34138489]
[94.20387268 175.05316162]
[91.27751923 189.76493835]
[88.35116577 204.47671509]
[99.95133972 214.54307556]
[104.94903564 229.06611633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 71]
[14 70]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[29 59]
[30 58]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
