%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUUCGUCCCUACUGCCUGGGCGCGGGGCGGGGCCUGGGCGCGGGGCGGGAGGCGGUGACCAGCAGCAGGAGGAGAAAGAAC\
) } def
/len { sequence length } bind def

/coor [
[160.42216492 165.46510315]
[165.96002197 151.47160339]
[153.35485840 143.34080505]
[140.74969482 135.20999146]
[128.14454651 127.07920074]
[115.53938293 118.94839478]
[102.93421936 110.81759644]
[90.18096161 102.92111206]
[77.28396606 95.26164246]
[64.38696289 87.60218048]
[51.48996735 79.94271088]
[38.59297180 72.28324127]
[27.92877197 75.64029694]
[17.43013573 72.50258636]
[10.63883400 64.18899536]
[9.69918346 53.71881866]
[-2.59692335 45.12779236]
[-14.89303017 36.53676605]
[-27.18913841 27.94573975]
[-39.48524475 19.35471153]
[-51.78135300 10.76368523]
[-64.07746124 2.17265797]
[-76.37356567 -6.41836929]
[-88.66967773 -15.00939655]
[-102.54871368 -8.43156433]
[-117.85591888 -9.69050789]
[-130.47373962 -18.44757652]
[-137.00802612 -32.34716415]
[-135.70111084 -47.65035248]
[-126.90454102 -60.24065781]
[-112.98453522 -66.73135376]
[-97.68552399 -65.37647247]
[-85.12284851 -56.54047394]
[-78.67581940 -42.60019684]
[-80.07864380 -27.30550385]
[-67.78253937 -18.71447563]
[-55.48643112 -10.12344933]
[-43.19032669 -1.53242230]
[-30.89421844 7.05860472]
[-18.59811020 15.64963150]
[-6.30200338 24.24065971]
[5.99410391 32.83168793]
[18.29021072 41.42271423]
[37.48084259 41.41802216]
[46.25243759 59.38624573]
[59.14943695 67.04571533]
[72.04643250 74.70517731]
[84.94342804 82.36464691]
[97.84043121 90.02411652]
[106.03471375 91.15480804]
[111.06501770 98.21243286]
[123.67018127 106.34323883]
[136.27534485 114.47403717]
[148.88050842 122.60483551]
[161.48565674 130.73564148]
[174.09082031 138.86643982]
[184.55566406 128.05101013]
[196.92958069 119.48523712]
[210.73695374 113.49836731]
[225.44706726 110.32051086]
[240.49450684 110.07382202]
[255.30087280 112.76778412]
[269.29708862 118.29884338]
[281.94512939 126.45440674]
[292.75885010 136.92098999]
[301.32263184 149.29629517]
[307.30725098 163.10464478]
[310.48272705 177.81526184]
[310.72698975 192.86274719]
[308.03063965 207.66868591]
[302.49731445 221.66398621]
[294.33969116 234.31071472]
[283.87136841 245.12275696]
[271.49465942 253.68452454]
[257.68536377 259.66693115]
[242.97421265 262.84002686]
[227.92669678 263.08181763]
[213.12120056 260.38308716]
[199.12678528 254.84748840]
[186.48138428 246.68782043]
[175.67103577 236.21774292]
[167.11128235 223.83966064]
[161.13110352 210.02938843]
[157.96040344 195.31773376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
