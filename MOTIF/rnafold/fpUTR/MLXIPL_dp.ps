%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:48:33 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MLXIPL)
} def

/sequence { (\
CCCCGCGCUGCGCGGAGCAGGGACCAGGCGGUUGCGGCGGCGACAGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 15 0.020787041 ubox
1 21 0.195884050 ubox
1 22 0.387337796 ubox
1 37 0.008184490 ubox
1 40 0.173703991 ubox
2 14 0.020767235 ubox
2 15 0.034823664 ubox
2 20 0.196531308 ubox
2 21 0.388372757 ubox
2 22 0.659835602 ubox
2 27 0.003584246 ubox
2 36 0.007823095 ubox
2 37 0.029931369 ubox
2 39 0.189586347 ubox
2 40 0.003433338 ubox
3 14 0.031804886 ubox
3 15 0.389916904 ubox
3 20 0.367561333 ubox
3 21 0.661674784 ubox
3 22 0.115577853 ubox
3 28 0.003892315 ubox
3 36 0.021546379 ubox
3 37 0.495184568 ubox
3 40 0.005768568 ubox
4 12 0.036434867 ubox
4 14 0.409129720 ubox
4 20 0.660224076 ubox
4 21 0.115912258 ubox
4 27 0.004124055 ubox
4 34 0.004114486 ubox
4 36 0.499308301 ubox
4 39 0.006102589 ubox
4 42 0.009283481 ubox
5 11 0.036655634 ubox
5 13 0.409853088 ubox
5 18 0.356123520 ubox
5 29 0.003177941 ubox
5 33 0.003795535 ubox
5 35 0.499897291 ubox
5 38 0.006471991 ubox
5 41 0.009357918 ubox
6 10 0.036391814 ubox
6 12 0.409822510 ubox
6 14 0.049849023 ubox
6 17 0.355159919 ubox
6 34 0.499701977 ubox
6 37 0.006062305 ubox
6 39 0.007312020 ubox
6 40 0.006646457 ubox
6 42 0.016175102 ubox
7 11 0.383392381 ubox
7 13 0.075196272 ubox
7 18 0.653328409 ubox
7 32 0.349109057 ubox
7 33 0.349576490 ubox
7 35 0.003343948 ubox
7 38 0.010525097 ubox
7 41 0.016487810 ubox
7 47 0.068108798 ubox
8 12 0.074682437 ubox
8 15 0.328001022 ubox
8 17 0.653993519 ubox
8 20 0.115988009 ubox
8 21 0.004391029 ubox
8 31 0.495991764 ubox
8 37 0.010539151 ubox
8 40 0.016488956 ubox
8 46 0.068246309 ubox
9 14 0.307370950 ubox
9 16 0.650038592 ubox
9 19 0.148330958 ubox
9 30 0.495710495 ubox
9 36 0.010510787 ubox
9 39 0.016473461 ubox
9 45 0.068234684 ubox
10 18 0.148958728 ubox
10 29 0.496089965 ubox
10 35 0.010509171 ubox
10 38 0.016468685 ubox
10 44 0.068230531 ubox
11 17 0.148943678 ubox
11 28 0.496059146 ubox
11 30 0.008719977 ubox
11 34 0.010474310 ubox
11 36 0.008068211 ubox
11 37 0.014392521 ubox
11 42 0.067989657 ubox
12 18 0.008401956 ubox
12 29 0.009163029 ubox
12 33 0.006653287 ubox
12 35 0.011359741 ubox
12 41 0.067991815 ubox
13 17 0.008356041 ubox
13 28 0.009147496 ubox
13 31 0.003238709 ubox
13 34 0.011376880 ubox
13 36 0.011754408 ubox
13 39 0.023591292 ubox
13 40 0.063726710 ubox
13 42 0.005566436 ubox
14 25 0.494900101 ubox
14 33 0.010296564 ubox
14 35 0.011482834 ubox
14 38 0.033188245 ubox
14 41 0.005607755 ubox
15 24 0.494732529 ubox
15 32 0.008757233 ubox
16 33 0.011144274 ubox
17 29 0.015474023 ubox
17 32 0.010923889 ubox
17 35 0.052699387 ubox
17 38 0.122041203 ubox
18 28 0.015472451 ubox
18 31 0.010874065 ubox
18 34 0.052726454 ubox
18 37 0.122174558 ubox
19 33 0.042716096 ubox
20 32 0.017292551 ubox
21 33 0.004647817 ubox
22 32 0.004512221 ubox
22 33 0.137095640 ubox
23 32 0.145885924 ubox
24 31 0.147296226 ubox
24 37 0.003318017 ubox
25 30 0.147102558 ubox
25 36 0.003315169 ubox
27 48 0.847296537 ubox
28 35 0.005065253 ubox
28 38 0.005345446 ubox
28 47 0.854596673 ubox
29 34 0.005069650 ubox
29 37 0.005041356 ubox
29 46 0.851423200 ubox
30 35 0.003374025 ubox
30 48 0.031891017 ubox
31 44 0.847290628 ubox
31 47 0.032130584 ubox
32 43 0.854317574 ubox
32 46 0.032110353 ubox
33 42 0.853960249 ubox
33 45 0.032126283 ubox
34 41 0.854745184 ubox
34 44 0.032136087 ubox
35 40 0.854484793 ubox
35 42 0.032294922 ubox
36 41 0.032185422 ubox
36 48 0.017211064 ubox
37 47 0.018112305 ubox
38 46 0.018319564 ubox
39 48 0.472313386 ubox
40 47 0.480937264 ubox
41 46 0.481649143 ubox
2 22 0.9500000 lbox
3 21 0.9500000 lbox
4 20 0.9500000 lbox
7 18 0.9500000 lbox
8 17 0.9500000 lbox
9 16 0.9500000 lbox
27 48 0.9500000 lbox
28 47 0.9500000 lbox
29 46 0.9500000 lbox
31 44 0.9500000 lbox
32 43 0.9500000 lbox
33 42 0.9500000 lbox
34 41 0.9500000 lbox
35 40 0.9500000 lbox
showpage
end
%%EOF
