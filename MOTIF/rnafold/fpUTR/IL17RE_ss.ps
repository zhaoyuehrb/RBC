%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGGCUCCUGCUGGUACUGUGUUCGCUGCUGCACAGCAAGGCCCUGCCACCCACCUUCAGGCCAUGCAGCCAUGUUCCGGGAGCCCUAAUUGCACAGAAGCCC\
) } def
/len { sequence length } bind def

/coor [
[183.68167114 332.95376587]
[186.94654846 319.33074951]
[195.83163452 308.41433716]
[189.78479004 294.68713379]
[183.73793030 280.95996094]
[177.69108582 267.23275757]
[171.64422607 253.50558472]
[165.59738159 239.77839661]
[159.55052185 226.05122375]
[153.50367737 212.32403564]
[147.45683289 198.59684753]
[140.80589294 185.15196228]
[133.56401062 172.01593018]
[126.12826538 158.98866272]
[118.50029755 146.07301331]
[110.87232971 133.15736389]
[103.24436188 120.24170685]
[89.86389160 120.51928711]
[77.75173187 111.98806000]
[72.55201721 96.59224701]
[57.65729904 94.81814575]
[42.76258469 93.04405212]
[27.86786842 91.26995087]
[12.97315121 89.49585724]
[2.53092623 100.97364044]
[-12.67027855 104.08860779]
[-26.78528976 97.64298248]
[-34.38659668 84.11524200]
[-32.55134201 68.70707703]
[-21.98522186 57.34324646]
[-6.75111961 54.39337158]
[7.29313850 60.99173737]
[14.74724865 74.60114288]
[29.64196587 76.37523651]
[44.53668213 78.14933777]
[59.43139648 79.92343140]
[74.32611084 81.69753265]
[85.68878174 71.90519714]
[86.13328552 56.91178513]
[86.57778168 41.91837311]
[79.25282288 27.89497948]
[87.36387634 15.40257931]
[87.80838013 0.40916669]
[88.25287628 -14.58424568]
[88.69738007 -29.57765770]
[85.78795624 -38.41059875]
[89.38376617 -45.00694656]
[90.27236938 -59.98060226]
[77.13237000 -67.82909393]
[69.15473938 -80.89110565]
[68.17269897 -96.16507721]
[74.41189575 -110.14115906]
[86.43862152 -119.60775757]
[101.48921967 -122.38951874]
[116.10516357 -117.84720612]
[126.92783356 -107.02461243]
[131.47024536 -92.40869141]
[128.68858337 -77.35807800]
[119.22206879 -65.33129120]
[105.24603271 -59.09199524]
[104.35742188 -44.11833954]
[103.69078827 -29.13315773]
[103.24629211 -14.13974571]
[102.80178833 0.85366660]
[102.35729218 15.84707928]
[109.71404266 28.79804420]
[101.57119751 42.36287308]
[101.12669373 57.35628510]
[100.68219757 72.34970093]
[121.76860809 89.70706177]
[116.16001892 112.61373901]
[123.78798676 125.52939606]
[131.41595459 138.44505310]
[139.04391479 151.36070251]
[146.21934509 157.27668762]
[146.70002747 164.77404785]
[153.94190979 177.91007996]
[158.70089722 180.76109314]
[161.50090027 184.79554749]
[162.22402954 189.02030945]
[161.18400574 192.55000305]
[167.23086548 206.27717590]
[173.27770996 220.00436401]
[179.32456970 233.73155212]
[185.37141418 247.45874023]
[191.41827393 261.18591309]
[197.46511841 274.91311646]
[203.51196289 288.64028931]
[209.55882263 302.36746216]
[225.93959045 303.95816040]
[239.23460388 313.49963379]
[245.90829468 328.33917236]
[244.24394226 344.43118286]
[234.78411865 357.43972778]
[241.23510742 370.98171997]
[256.21218872 376.02777100]
[263.15951538 390.22317505]
[257.95541382 405.14608765]
[243.68731689 411.94296265]
[228.82028198 406.58135986]
[222.17465210 392.24221802]
[227.69313049 377.43267822]
[221.24215698 363.89071655]
[207.50070190 363.69531250]
[195.14016724 357.53784180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 77]
[13 76]
[14 74]
[15 73]
[16 72]
[17 71]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[38 69]
[39 68]
[40 67]
[42 65]
[43 64]
[44 63]
[45 62]
[47 61]
[48 60]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
