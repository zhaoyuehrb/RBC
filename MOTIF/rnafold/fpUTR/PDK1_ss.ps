%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUUCCCGCUCCGCGUCCCGCCCAGCGGCGCAGGGGGCCGGGCUCCGGCUAGGAGGGUGGGGGCCGCGCCGGUGACAGCCGAUCCCCGCCCCUGCUGCCCGCCACGUCCCUCACGUACCACUCGGCAGAGGCGCGGGGAAACCUGGCGUACUGGCUGUGGCUUCUCUAGCGGGACUCGGC\
) } def
/len { sequence length } bind def

/coor [
[-130.48522949 383.22692871]
[-139.79437256 394.98870850]
[-149.10351562 406.75051880]
[-158.41265869 418.51229858]
[-167.72180176 430.27410889]
[-165.37603760 447.59753418]
[-176.06469727 461.00164795]
[-192.80348206 462.50991821]
[-201.90934753 474.42977905]
[-211.01521301 486.34963989]
[-220.12107849 498.26950073]
[-229.22694397 510.18939209]
[-227.32794189 525.65002441]
[-236.73239136 537.60876465]
[-251.48345947 539.32385254]
[-260.58932495 551.24371338]
[-269.69519043 563.16363525]
[-274.50567627 579.42077637]
[-291.45916748 579.29870605]
[-296.03509521 562.97393799]
[-281.61505127 554.05773926]
[-272.50918579 542.13787842]
[-263.40332031 530.21801758]
[-265.62753296 515.53509521]
[-256.56268311 503.31692505]
[-241.14680481 501.08352661]
[-232.04093933 489.16363525]
[-222.93507385 477.24377441]
[-213.82920837 465.32391357]
[-204.72335815 453.40405273]
[-208.20327759 440.98260498]
[-203.82083130 428.64331055]
[-192.96751404 420.97470093]
[-179.48359680 420.96496582]
[-170.17445374 409.20315552]
[-160.86531067 397.44137573]
[-151.55616760 385.67956543]
[-142.24702454 373.91778564]
[-133.03918457 362.07650757]
[-123.93331909 350.15664673]
[-114.82746124 338.23678589]
[-105.72159576 326.31689453]
[-96.61573029 314.39703369]
[-87.50986481 302.47717285]
[-85.94396210 295.23510742]
[-78.14395905 290.43261719]
[-68.83481598 278.67083740]
[-59.52567291 266.90902710]
[-57.69397736 252.12747192]
[-43.06248856 246.10833740]
[-33.75334549 234.34654236]
[-24.44420242 222.58473206]
[-15.13506126 210.82293701]
[-5.82591867 199.06114197]
[-20.81795311 199.54989624]
[-31.87262344 189.41114807]
[-32.67909622 174.43284607]
[-22.77697372 163.16572571]
[-7.81913233 162.04190063]
[3.65537500 171.70294189]
[5.09587717 186.63414001]
[15.56503963 175.89186096]
[26.03420258 165.14958191]
[36.50336456 154.40730286]
[46.97252655 143.66500854]
[57.44168854 132.92272949]
[67.91085052 122.18045044]
[78.38001251 111.43816376]
[88.84917450 100.69588470]
[99.22574615 89.86413574]
[109.50895691 78.94371796]
[119.79217529 68.02330017]
[130.07539368 57.10288239]
[140.35859680 46.18246460]
[150.64181519 35.26204681]
[154.25910950 26.84663773]
[161.19651794 24.24435043]
[171.66567993 13.50206852]
[175.42691040 5.14999390]
[182.40797424 2.66718030]
[193.05999756 -7.89380264]
[203.71202087 -18.45478630]
[214.36404419 -29.01576805]
[218.68722534 -49.98799133]
[238.81716919 -54.48292160]
[248.91140747 -65.57825470]
[259.00564575 -76.67359161]
[269.09988403 -87.76892090]
[279.19412231 -98.86425781]
[289.28836060 -109.95958710]
[299.38259888 -121.05491638]
[309.38122559 -132.23648071]
[319.28350830 -143.50346375]
[329.08871460 -154.85502625]
[338.79611206 -166.29032898]
[348.50350952 -177.72563171]
[358.21093750 -189.16093445]
[367.91833496 -200.59625244]
[377.62576294 -212.03155518]
[370.75476074 -225.56170654]
[369.59048462 -240.65101624]
[374.27935791 -254.99774170]
[384.07720947 -266.42532349]
[397.46740723 -273.21261597]
[412.39538574 -274.35317993]
[426.58398438 -269.70422363]
[436.29141235 -281.13952637]
[445.99880981 -292.57482910]
[455.70620728 -304.01013184]
[455.83779907 -320.05267334]
[468.55078125 -329.83834839]
[484.09286499 -325.86044312]
[490.54147339 -311.17050171]
[482.94979858 -297.03732300]
[467.14154053 -294.30273438]
[457.43411255 -282.86743164]
[447.72671509 -271.43212891]
[438.01928711 -259.99682617]
[444.91030884 -246.75132751]
[446.20867920 -231.83624268]
[441.68554688 -217.52169800]
[432.00045776 -205.99839783]
[418.60540771 -199.04234314]
[403.52728271 -197.74114990]
[389.06106567 -202.32414246]
[379.35363770 -190.88883972]
[369.64624023 -179.45353699]
[359.93881226 -168.01821899]
[350.23141479 -156.58291626]
[340.52401733 -145.14761353]
[338.58737183 -137.99575806]
[330.55047607 -133.60118103]
[320.64819336 -122.33420563]
[318.58905029 -115.21665192]
[310.47790527 -110.96068573]
[300.38369751 -99.86534882]
[290.28945923 -88.77001953]
[280.19522095 -77.67468262]
[270.10098267 -66.57935333]
[260.00674438 -55.48402023]
[249.91250610 -44.38868713]
[251.77671814 -35.66356277]
[249.36648560 -26.93017387]
[243.10346985 -20.19427681]
[234.30867004 -17.06325531]
[224.92501831 -18.36374283]
[214.27299500 -7.80276012]
[203.62097168 2.75822258]
[192.96894836 13.31920528]
[182.40797424 23.97123146]
[171.93879700 34.71351242]
[161.56224060 45.54526138]
[151.27902222 56.46567917]
[140.99580383 67.38609314]
[130.71258545 78.30651093]
[120.42937469 89.22692871]
[110.14616394 100.14734650]
[107.34265900 107.72776031]
[99.59146118 111.16504669]
[89.12229919 121.90732574]
[78.65313721 132.64961243]
[68.18397522 143.39189148]
[57.71480942 154.13417053]
[47.24564743 164.87646484]
[36.77648544 175.61874390]
[26.30732155 186.36102295]
[15.83816051 197.10330200]
[5.93587828 208.37028503]
[-3.37326384 220.13208008]
[-12.68240643 231.89387512]
[-21.99154854 243.65567017]
[-31.30068970 255.41748047]
[-33.79823685 271.04031372]
[-47.76387405 276.21817017]
[-57.07301712 287.97998047]
[-66.38215637 299.74176025]
[-75.59000397 311.58303833]
[-84.69586182 323.50289917]
[-93.80172729 335.42276001]
[-102.90759277 347.34262085]
[-112.01345825 359.26251221]
[-121.11931610 371.18237305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[15 23]
[16 22]
[17 21]
[39 182]
[40 181]
[41 180]
[42 179]
[43 178]
[44 177]
[46 176]
[47 175]
[48 174]
[50 172]
[51 171]
[52 170]
[53 169]
[54 168]
[61 167]
[62 166]
[63 165]
[64 164]
[65 163]
[66 162]
[67 161]
[68 160]
[69 159]
[70 157]
[71 156]
[72 155]
[73 154]
[74 153]
[75 152]
[77 151]
[78 150]
[80 149]
[81 148]
[82 147]
[83 146]
[85 141]
[86 140]
[87 139]
[88 138]
[89 137]
[90 136]
[91 135]
[92 133]
[93 132]
[94 130]
[95 129]
[96 128]
[97 127]
[98 126]
[99 125]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
