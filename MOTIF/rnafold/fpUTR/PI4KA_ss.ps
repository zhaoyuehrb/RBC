%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAUGCACCUACGCCUGCGCCCUGAGGUCGGGCGCUCGCGGGCCAGGAGCGGGGAGCCGGCGGGCAGCGCCGCGGCUCGUGAGGUG\
) } def
/len { sequence length } bind def

/coor [
[105.72562408 129.00439453]
[101.58286285 114.58824921]
[95.35163879 128.23272705]
[99.58833313 143.70625305]
[90.01616669 156.58076477]
[73.97808075 156.98004150]
[63.77713013 144.59779358]
[67.23860168 128.93261719]
[81.70716095 122.00150299]
[87.93838501 108.35701752]
[84.34401703 101.77442932]
[77.15528107 88.60924530]
[73.56091309 82.02664948]
[58.71359253 79.89192963]
[43.86627197 77.75720215]
[29.01894951 75.62248230]
[14.17162800 73.48776245]
[-0.67569357 71.35303497]
[-9.84889317 73.25337982]
[-16.01112175 68.86798859]
[-30.77279091 66.20469666]
[-45.53445816 63.54139709]
[-60.77529907 69.59523010]
[-73.46890259 59.21233749]
[-70.55718231 43.07374954]
[-55.03546524 37.78146362]
[-42.87116241 48.77972794]
[-28.10949326 51.44302750]
[-13.34782505 54.10632324]
[1.45902896 56.50571442]
[16.30635071 58.64043808]
[31.15367317 60.77516174]
[46.00099564 62.90988541]
[60.84831619 65.04460907]
[75.69564056 67.17932892]
[111.26154327 85.03385925]
[124.90602112 78.80263519]
[138.55050659 72.57141113]
[152.19497681 66.34018707]
[165.83946228 60.10896301]
[179.48394775 53.87773514]
[193.12841797 47.64651108]
[206.77290344 41.41528702]
[220.41737366 35.18406296]
[234.06185913 28.95283699]
[236.70877075 24.85282898]
[240.23651123 22.22194862]
[244.01800537 21.15533447]
[247.46774292 21.51383209]
[250.12133789 22.96295929]
[264.51373291 18.73697090]
[278.90612793 14.51098251]
[293.29852295 10.28499413]
[298.68621826 -5.63293648]
[312.31683350 -15.17778587]
[328.78811646 -14.80469227]
[341.71148682 -4.85342741]
[355.94387817 -9.59042072]
[370.17626953 -14.32741451]
[380.65155029 -26.94489098]
[396.76843262 -23.91544342]
[401.94729614 -8.35550785]
[390.86053467 3.72818804]
[374.91326904 -0.09502623]
[360.68087769 4.64196777]
[346.44848633 9.37896156]
[343.55969238 22.54149818]
[334.42819214 32.59943771]
[321.39770508 36.80977631]
[307.89407349 33.95156097]
[297.52450562 24.67738914]
[283.13211060 28.90337753]
[268.73971558 33.12936401]
[254.34733582 37.35535431]
[240.29309082 42.59731674]
[226.64860535 48.82854080]
[213.00411987 55.05976486]
[199.35964966 61.29099274]
[185.71516418 67.52221680]
[172.07069397 73.75344086]
[158.42620850 79.98466492]
[144.78172302 86.21588898]
[131.13725281 92.44712067]
[117.49276733 98.67834473]
[131.90925598 102.82138824]
[138.57397461 116.25945282]
[133.14782715 130.24362183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 10]
[3 9]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[20 29]
[21 28]
[22 27]
[36 84]
[37 83]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[50 74]
[51 73]
[52 72]
[53 71]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
