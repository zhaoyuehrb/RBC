%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGAGGGAGCUGUGUUUUGGUGACCUCUGAAACUCAGUACUGCAGCGAAUGAGCUCCUGACCUUGAGGAGUACUUAACAGAAUU\
) } def
/len { sequence length } bind def

/coor [
[-38.47831726 204.43394470]
[-44.81633377 195.55058289]
[-58.94234085 200.59596252]
[-73.06835175 205.64134216]
[-87.19435883 210.68672180]
[-101.32037354 215.73210144]
[-115.44638062 220.77748108]
[-129.57238770 225.82286072]
[-136.39236450 239.82734680]
[-150.79000854 244.74285889]
[-164.09912109 238.15475464]
[-178.22514343 243.20013428]
[-192.35115051 248.24551392]
[-206.47715759 253.29089355]
[-214.61647034 267.11590576]
[-230.51969910 269.22937012]
[-241.98725891 258.00997925]
[-240.22222900 242.06431580]
[-226.57856750 233.62451172]
[-211.52253723 239.16487122]
[-197.39653015 234.11950684]
[-183.27052307 229.07412720]
[-169.14450073 224.02874756]
[-163.02059937 210.49975586]
[-148.76669312 205.18179321]
[-134.61776733 211.69685364]
[-120.49176025 206.65147400]
[-106.36575317 201.60609436]
[-92.23973846 196.56071472]
[-78.11373138 191.51533508]
[-63.98772049 186.46995544]
[-49.86170959 181.42457581]
[-49.30134964 161.77386475]
[-40.62416077 144.08624268]
[-25.36070061 131.56199646]
[-6.23671579 126.48353577]
[13.31357574 129.79945374]
[29.76419067 140.94761658]
[42.17952728 132.52980042]
[54.59486008 124.11199951]
[67.01019287 115.69419861]
[79.42552948 107.27639008]
[91.84086609 98.85858154]
[86.50317383 91.97507477]
[86.22220612 81.37632751]
[92.73378754 70.24447632]
[100.92607880 57.67919159]
[109.11836243 45.11390305]
[105.61553955 29.70267868]
[114.10663605 16.37313271]
[129.55403137 13.03344440]
[142.79306030 21.66499519]
[145.96923828 37.14683533]
[137.19821167 50.29386902]
[121.68364716 53.30618668]
[113.49136353 65.87147522]
[105.29907990 78.43675995]
[113.03238678 91.28961945]
[127.97130585 89.93732452]
[142.91021729 88.58502960]
[151.69186401 75.64606476]
[166.75003052 71.42873383]
[180.97470093 77.92432404]
[187.64942932 92.06582642]
[183.62260437 107.17604828]
[170.79559326 116.12040710]
[155.22488403 114.67565155]
[144.26252747 103.52394867]
[129.32360840 104.87624359]
[114.38468170 106.22853851]
[100.25867462 111.27391815]
[87.84333801 119.69172668]
[75.42800140 128.10952759]
[63.01266861 136.52732849]
[50.59733200 144.94514465]
[38.18199921 153.36294556]
[41.58120346 163.87074280]
[42.42594147 174.87133789]
[40.67439651 185.75331116]
[36.42891693 195.91304016]
[29.93004799 204.78817749]
[21.54290199 211.88876343]
[11.73665810 216.82431030]
[1.05830920 219.32525635]
[-9.89784527 219.25765991]
[-20.52327347 216.63041687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[11 23]
[12 22]
[13 21]
[14 20]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[46 57]
[47 56]
[48 55]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
