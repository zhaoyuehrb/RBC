%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUUUGAGUGAGAGAUAUAGGGAAGGAAGGGAAGUAAGCAGUCACAGACGCUGGCGGCCACCAGAAGUUUGAGCCUCUUUGGUAGCAGGAGGCUGGAAGAAAGGACAGAAGUAGCUCUGGCUGUG\
) } def
/len { sequence length } bind def

/coor [
[71.12783051 344.08026123]
[56.67175674 348.97766113]
[41.52342606 347.10931396]
[28.69054985 338.84613037]
[20.72110939 325.82879639]
[19.19744301 310.64190674]
[24.42207336 296.30087280]
[35.35764694 285.65304565]
[49.83289719 280.81259155]
[51.66905594 265.92541504]
[53.50521851 251.03822327]
[47.38405991 237.45953369]
[56.75246048 224.71026611]
[58.58861923 209.82307434]
[60.42478180 194.93588257]
[62.26094055 180.04869080]
[56.13978195 166.47001648]
[65.50818634 153.72074890]
[67.34434509 138.83355713]
[69.18050385 123.94636536]
[65.95105743 138.59458923]
[56.49814606 150.24114990]
[42.82752609 156.41482544]
[27.83990097 155.80564880]
[14.71541882 148.54286194]
[6.23889351 136.16754150]
[4.20891714 121.30554199]
[9.05622005 107.11034393]
[19.75227737 96.59395599]
[34.02754974 91.98780060]
[48.85303497 94.26923370]
[61.08286285 102.95402527]
[49.72473145 93.15643311]
[34.17860413 94.13402557]
[22.79941368 84.03607941]
[21.96323013 69.20919800]
[10.60509682 59.41160202]
[-4.89830971 56.25645828]
[-9.48171806 42.08459854]
[-20.83985138 32.28700256]
[-32.19798279 22.48941231]
[-40.83726883 19.20495796]
[-43.71082306 12.30930901]
[-54.82508850 2.23592472]
[-65.93935394 -7.83745956]
[-81.73585510 -13.99432850]
[-80.19249725 -30.87788200]
[-63.54151917 -34.06867981]
[-55.86597061 -18.95172691]
[-44.75170517 -8.87834167]
[-33.63743591 1.19504225]
[-22.40039062 11.13127899]
[-11.04225826 20.92887115]
[0.31587431 30.72646332]
[15.00687122 33.18082047]
[20.40268898 48.05347061]
[31.76082230 57.85106277]
[46.54991913 56.50263977]
[58.20825195 66.27699280]
[59.52232361 81.79830170]
[70.88045502 91.59589386]
[91.96202087 73.98770905]
[115.37629700 81.38578796]
[128.04910278 73.36082458]
[126.75654602 59.37524414]
[131.61441040 46.26768494]
[141.61395264 36.59479523]
[154.74963379 32.21677017]
[168.42117310 33.93976974]
[179.94825745 41.36816406]
[192.81419373 33.65662384]
[205.68011475 25.94508171]
[213.53915405 12.21387196]
[228.43345642 12.30725002]
[241.29939270 4.59570885]
[254.16532898 -3.11583209]
[267.03125000 -10.82737350]
[279.89718628 -18.53891373]
[292.76312256 -26.25045586]
[305.62902832 -33.96199799]
[311.45770264 -41.13496780]
[318.90670776 -41.70044708]
[331.95800781 -49.09392166]
[339.80261230 -63.49511337]
[356.20117188 -63.63153839]
[364.28430176 -49.36285400]
[355.73672485 -35.36745834]
[339.35147095 -36.04261780]
[326.30017090 -28.64914322]
[313.34057617 -21.09606743]
[300.47463989 -13.38452625]
[287.60873413 -5.67298508]
[274.74279785 2.03855586]
[261.87686157 9.75009727]
[249.01094055 17.46163750]
[236.14500427 25.17317963]
[229.20622253 38.35280991]
[213.39166260 38.81101227]
[200.52572632 46.52255249]
[187.65980530 54.23409271]
[188.33467102 70.33028412]
[180.78346252 84.66709900]
[166.96968079 93.31488800]
[150.58750916 93.85006714]
[136.07406616 86.03362274]
[123.40126801 94.05859375]
[124.92226410 102.25796509]
[123.55377197 110.78363037]
[119.26058960 118.61441803]
[112.36816406 124.74765015]
[103.54410553 128.32594299]
[93.73551941 128.75289917]
[84.06769562 125.78252411]
[82.23153687 140.66972351]
[80.39537811 155.55691528]
[86.38520050 170.20042419]
[77.14813232 181.88485718]
[75.31197357 196.77204895]
[73.47581482 211.65924072]
[71.63965607 226.54643250]
[77.62947845 241.18995667]
[68.39241028 252.87437439]
[66.55625153 267.76156616]
[64.72009277 282.64877319]
[77.58540344 290.86132812]
[85.60604858 303.84719849]
[87.18950653 319.02795410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 124]
[10 123]
[11 122]
[13 120]
[14 119]
[15 118]
[16 117]
[18 115]
[19 114]
[20 113]
[32 61]
[33 60]
[36 57]
[37 56]
[39 54]
[40 53]
[41 52]
[43 51]
[44 50]
[45 49]
[63 106]
[64 105]
[70 100]
[71 99]
[72 98]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
