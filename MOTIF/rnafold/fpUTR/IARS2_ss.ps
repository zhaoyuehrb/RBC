%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCGCGUGCGCCCUCUUACUCGGCUCCCCUUGGUUUCCUGGGGUCCUGCCCCUUCAAGCUGGGGCGGGAGCGGAGGACCCCGCUCUCAGGGGUUGCCGGACC\
) } def
/len { sequence length } bind def

/coor [
[36.92897034 223.88381958]
[30.01933479 237.19761658]
[28.80482101 246.42092896]
[22.69864082 250.80174255]
[15.39380836 263.90286255]
[8.08897591 277.00399780]
[8.87518787 293.38427734]
[-5.06194401 302.02651978]
[-19.38509369 294.04031372]
[-19.35983276 277.64120483]
[-5.01214743 269.69915771]
[2.29268503 256.59802246]
[9.59751797 243.49690247]
[16.70554733 230.28797913]
[23.61518478 216.97418213]
[15.61349773 206.96806335]
[12.03237534 194.61755371]
[13.45059967 181.78938293]
[19.68847466 170.43679810]
[29.82970238 162.30224609]
[42.35581589 158.64994812]
[55.37348557 160.06944275]
[63.06697464 147.19271851]
[70.76046753 134.31597900]
[78.45395660 121.43925476]
[86.14744568 108.56252289]
[85.89653778 91.85736084]
[100.48908234 83.72207642]
[107.79391479 70.62094879]
[115.09874725 57.51982880]
[122.40357971 44.41870499]
[129.70840454 31.31758118]
[136.01376343 17.70720100]
[141.28439331 3.66367865]
[146.55500793 -10.37984467]
[140.26705933 -24.63113594]
[145.81227112 -38.79818344]
[159.43745422 -44.70496750]
[164.70806885 -58.74848938]
[169.97869873 -72.79201508]
[175.24931335 -86.83553314]
[165.61453247 -98.71485901]
[163.23515320 -113.72270203]
[168.65126038 -127.81284332]
[180.31484985 -137.23710632]
[195.03053284 -139.54238892]
[200.30114746 -153.58590698]
[205.57177734 -167.62942505]
[210.84239197 -181.67295837]
[216.11302185 -195.71647644]
[221.38363647 -209.75999451]
[226.65426636 -223.80352783]
[231.92488098 -237.84704590]
[237.19551086 -251.89056396]
[228.53512573 -264.76602173]
[229.13038635 -280.27166748]
[238.75239563 -292.44528198]
[253.70127869 -296.60583496]
[268.22891235 -291.15353394]
[276.74911499 -278.18487549]
[275.98568726 -262.68658447]
[266.23217773 -250.61808777]
[251.23902893 -246.61994934]
[245.96839905 -232.57641602]
[240.69778442 -218.53289795]
[235.42715454 -204.48937988]
[230.15653992 -190.44584656]
[224.88591003 -176.40232849]
[219.61529541 -162.35881042]
[214.34466553 -148.31527710]
[209.07405090 -134.27175903]
[218.63928223 -122.85371399]
[221.22219849 -108.08264160]
[216.03047180 -93.90828705]
[204.36437988 -84.17179871]
[189.29283142 -81.56491089]
[184.02221680 -67.52139282]
[178.75158691 -53.47786713]
[173.48097229 -39.43434525]
[179.85540771 -26.02158165]
[174.71029663 -11.70437050]
[160.59854126 -5.10922194]
[155.32791138 8.93430138]
[150.05729675 22.97782326]
[151.18557739 25.20034790]
[151.55342102 27.98406792]
[150.95606995 31.06241608]
[149.28103638 34.10426331]
[146.52648926 36.74500275]
[142.80953979 38.62241364]
[135.50469971 51.72353745]
[128.19987488 64.82466125]
[120.89503479 77.92578125]
[113.59020233 91.02690887]
[116.09117126 102.50683594]
[110.21657562 112.68194580]
[99.02417755 116.25601196]
[91.33068848 129.13273621]
[83.63719940 142.00947571]
[75.94371033 154.88619995]
[68.25022125 167.76293945]
[77.14501953 182.75488281]
[77.32125092 200.09814453]
[68.81951904 215.11477661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[4 13]
[5 12]
[6 11]
[22 101]
[23 100]
[24 99]
[25 98]
[26 97]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 84]
[34 83]
[35 82]
[38 79]
[39 78]
[40 77]
[41 76]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
