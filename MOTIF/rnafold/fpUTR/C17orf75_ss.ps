%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUACCGACGGCUGCACGGGAGCAGGGGAGCGGUUUGGCGGAGACACAGGGCCGCUCAGAGGCCGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[98.14568329 127.89734650]
[86.24887848 124.34352112]
[77.06401062 115.98876953]
[72.40248108 104.48078918]
[57.49416351 102.82487488]
[42.58584595 101.16896820]
[27.67752647 99.51305389]
[18.14881134 112.83733368]
[3.32423687 119.58522034]
[-12.79701805 118.03814697]
[-25.91654778 108.70166779]
[-32.58279800 94.14579010]
[-47.54977417 93.15094757]
[-62.51674652 92.15609741]
[-77.48371887 91.16125488]
[-89.20903778 101.75807190]
[-104.98873138 100.87666321]
[-115.46098328 89.03996277]
[-114.41279602 73.27047729]
[-102.46604156 62.92395020]
[-86.70851135 64.13880157]
[-76.48887634 76.19428253]
[-61.52190018 77.18912506]
[-46.55492783 78.18396759]
[-31.58795547 79.17881775]
[-24.64196777 67.22293091]
[-13.12831974 59.44618225]
[0.68871963 57.44813538]
[14.06115532 61.68493652]
[24.30380058 71.36685181]
[29.33343697 84.60473633]
[44.24175644 86.26065063]
[59.15007401 87.91655731]
[74.05839539 89.57247162]
[85.12223053 76.32823944]
[101.85431671 72.10265350]
[117.87992859 78.50561523]
[127.09351349 93.09767914]
[142.08984375 93.42950439]
[157.08616638 93.76133728]
[172.08250427 94.09317017]
[175.71556091 87.65963745]
[181.11170959 82.67361450]
[187.73663330 79.59430695]
[194.94476318 78.69383240]
[202.04219055 80.03334808]
[208.35342407 83.45957947]
[213.28575134 88.62191772]
[216.38476562 95.00811768]
[217.37629700 101.99509430]
[231.55787659 106.88210297]
[245.73945618 111.76911163]
[259.92102051 116.65612030]
[273.23300171 108.45088959]
[288.69717407 110.77321625]
[299.01184082 122.52657318]
[299.30676270 138.16137695]
[289.44265747 150.29534912]
[274.07705688 153.19920349]
[260.46514893 145.50183105]
[255.03402710 130.83769226]
[240.85244751 125.95069122]
[226.67086792 121.06368256]
[212.48928833 116.17667389]
[190.33380127 125.02813721]
[171.75067139 109.08950043]
[156.75433350 108.75766754]
[141.75801086 108.42583466]
[126.76168060 108.09400177]
[120.61803436 118.88378143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[6 32]
[7 31]
[12 25]
[13 24]
[14 23]
[15 22]
[38 69]
[39 68]
[40 67]
[41 66]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
