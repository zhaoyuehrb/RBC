%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGGCGCACGCGCGGAGCUGGAGCCGGCGCGGAGGAGCGGGCGGCCGCGGCUGUGCCCUCUCCUACUCCUCACCGCGCGAGCGCGGGGAACCAGUAGCCGCGGCUGCUUCGGUUGCCGCGGUCGGUGGUCGUU\
) } def
/len { sequence length } bind def

/coor [
[190.79832458 175.90211487]
[190.82710266 168.16027832]
[178.13276672 160.16940308]
[166.03964233 164.76295471]
[153.32611084 161.47705078]
[144.72113037 151.30119324]
[143.55924988 137.82965088]
[131.05148315 129.54978943]
[118.54373169 121.26994324]
[106.03597260 112.99008942]
[92.09332275 111.94403076]
[85.68418121 99.51766968]
[73.17641449 91.23781586]
[60.66865921 82.95796967]
[48.16090012 74.67811584]
[35.65313721 66.39826202]
[22.69151688 58.84867096]
[9.31861973 52.05414200]
[-4.05427790 45.25961304]
[-17.42717552 38.46508408]
[-32.28754044 43.13491058]
[-45.75276947 36.05378723]
[-50.11315536 21.85792160]
[-63.48605347 15.06339359]
[-76.85894775 8.26886463]
[-90.23184967 1.47433543]
[-105.09221649 6.14416170]
[-118.55744171 -0.93695879]
[-122.91783142 -15.13282490]
[-136.29072571 -21.92735481]
[-149.66362000 -28.72188377]
[-163.03651428 -35.51641083]
[-176.40940857 -42.31093979]
[-189.78231812 -49.10546875]
[-203.15521240 -55.89999771]
[-213.62026978 -50.04190445]
[-225.49288940 -50.00518417]
[-235.78306580 -55.68212509]
[-241.95605469 -65.54078674]
[-242.55654907 -77.03649139]
[-255.60388184 -84.43698120]
[-268.65121460 -91.83746338]
[-281.69854736 -99.23795319]
[-298.08413696 -98.57160187]
[-306.62417603 -112.57158661]
[-298.53341675 -126.83592987]
[-282.13491821 -126.69068909]
[-274.29803467 -112.28527832]
[-261.25073242 -104.88479614]
[-248.20338440 -97.48430634]
[-235.15606689 -90.08382416]
[-217.91564941 -96.04553986]
[-201.47009277 -87.44426727]
[-196.36068726 -69.27289581]
[-182.98777771 -62.47836685]
[-169.61488342 -55.68383789]
[-156.24198914 -48.88930893]
[-142.86909485 -42.09477997]
[-129.49620056 -35.30025101]
[-116.12329865 -28.50572205]
[-102.08671570 -33.35441589]
[-88.42790222 -26.65430069]
[-83.43731689 -11.89856148]
[-70.06442261 -5.10403252]
[-56.69152451 1.69049644]
[-43.31862640 8.48502541]
[-29.28203964 3.63633084]
[-15.62323093 10.33644772]
[-10.63264561 25.09218597]
[2.74025130 31.88671494]
[16.11314774 38.68124390]
[29.48604584 45.47577286]
[27.88984299 30.56094360]
[38.38905716 19.84803009]
[53.33301926 21.14342499]
[61.83221436 33.50318527]
[57.69336700 47.92087936]
[43.93299103 53.89050293]
[56.44075012 62.17035294]
[68.94850922 70.45020294]
[81.45626831 78.73005676]
[93.96402740 87.00991058]
[107.90667725 88.05596924]
[114.31581879 100.48233032]
[126.82358551 108.76218414]
[139.33134460 117.04203033]
[151.83909607 125.32188416]
[168.86834717 121.50715637]
[183.13174438 130.96591187]
[186.12365723 147.47508240]
[198.81797791 155.46595764]
[221.95228577 154.13745117]
[232.30805969 174.05123901]
[245.83322144 180.53733826]
[259.35839844 187.02345276]
[272.88357544 193.50956726]
[286.49893188 186.30345154]
[301.57061768 188.47091675]
[312.34857178 198.97329712]
[314.84570312 213.63284302]
[328.37088013 220.11895752]
[341.89605713 226.60507202]
[355.42120361 233.09118652]
[368.94638062 239.57730103]
[382.47155762 246.06340027]
[395.99673462 252.54951477]
[409.52191162 259.03561401]
[425.31091309 258.02636719]
[433.44113159 270.50628662]
[446.96630859 276.99240112]
[463.26736450 275.20129395]
[472.74957275 288.58111572]
[465.65844727 303.36785889]
[449.28875732 304.35021973]
[440.48019409 290.51757812]
[426.95501709 284.03146362]
[412.13345337 285.50466919]
[403.03579712 272.56079102]
[389.51062012 266.07470703]
[375.98544312 259.58859253]
[362.46029663 253.10246277]
[348.93511963 246.61636353]
[335.40994263 240.13024902]
[321.88476562 233.64413452]
[308.35958862 227.15802002]
[295.36495972 234.38838196]
[280.42785645 232.55889893]
[269.30212402 222.16316223]
[266.39746094 207.03474426]
[252.87229919 200.54862976]
[239.34712219 194.06251526]
[225.82194519 187.57640076]
[219.73556519 191.66140747]
[212.53192139 193.34936523]
[205.12828064 192.37557983]
[198.48512268 188.81750488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[7 87]
[8 86]
[9 85]
[10 84]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 72]
[18 71]
[19 70]
[20 69]
[23 66]
[24 65]
[25 64]
[26 63]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[40 51]
[41 50]
[42 49]
[43 48]
[93 132]
[94 131]
[95 130]
[96 129]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
