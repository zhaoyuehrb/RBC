%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGCCUCCUCCCGCUUUCUCUCUCCGCUUCCCCUGGAGCCUCCGAGGAGUCCGCAGCCGCUGGGCGCCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[123.02645874 355.11050415]
[121.24118805 340.21713257]
[119.45591736 325.32376099]
[117.67064667 310.43035889]
[115.88536835 295.53698730]
[114.10009766 280.64361572]
[112.31482697 265.75021362]
[103.11774445 254.03430176]
[109.15757751 239.41133118]
[107.37230682 224.51795959]
[105.58702850 209.62457275]
[91.83959961 203.89102173]
[82.74737549 191.96678162]
[80.83183289 176.99357605]
[86.70675659 162.97993469]
[98.88671112 153.72811890]
[97.10144043 138.83473206]
[95.31616211 123.94136047]
[79.57427979 113.33855438]
[76.19594574 94.66201019]
[87.22604370 79.21652222]
[83.68087769 64.64147949]
[80.13571167 50.06644058]
[74.93608856 42.21890640]
[76.75160980 34.84154129]
[73.78869629 20.13707924]
[70.82579041 5.43261862]
[55.52629089 -9.29651260]
[61.87979126 -28.76373672]
[57.18784332 -43.01103973]
[52.49589539 -57.25833893]
[47.80394745 -71.50564575]
[43.11199570 -85.75294495]
[30.52771950 -96.26807404]
[33.60813522 -112.37531281]
[49.18437576 -117.50491333]
[61.23294067 -106.37998199]
[57.35929871 -90.44489288]
[62.05124664 -76.19759369]
[66.74319458 -61.95029068]
[71.43514252 -47.70298767]
[76.12709808 -33.45568466]
[85.04169464 -30.62738037]
[91.63562775 -23.79849625]
[94.22577667 -14.52011871]
[92.06027222 -4.98960400]
[85.53025055 2.46970773]
[88.49315643 17.17416763]
[91.45606995 31.87862968]
[94.71075439 46.52127457]
[98.25592041 61.09631348]
[101.80108643 75.67135620]
[111.97753143 78.74757385]
[119.87927246 85.85993958]
[124.00565338 95.65769958]
[123.57301331 106.28012848]
[118.66351318 115.70987701]
[110.20954895 122.15608215]
[111.99481964 137.04946899]
[113.78009033 151.94284058]
[127.80158997 158.05389404]
[136.82211304 170.28201294]
[138.49969482 185.28373718]
[132.48327637 199.01905823]
[120.48041534 207.83930969]
[122.26568604 222.73268127]
[124.05095673 237.62606812]
[133.37573242 250.40727234]
[127.20820618 263.96496582]
[128.99348450 278.85833740]
[130.77874756 293.75170898]
[132.56402588 308.64511108]
[134.34930420 323.53848267]
[136.13456726 338.43185425]
[137.91984558 353.32522583]
[148.17915344 366.11892700]
[141.97781372 381.30035400]
[125.69522095 383.25213623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[9 67]
[10 66]
[11 65]
[16 60]
[17 59]
[18 58]
[21 52]
[22 51]
[23 50]
[25 49]
[26 48]
[27 47]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
