%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCUGUGGAUUGGCUGAUGGAGCUGUGAGCCGGCUGUAGUUGAGCGGGAACCCGAGACCUGGCAGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[142.63954163 167.54997253]
[134.89810181 180.39793396]
[123.52311707 190.17596436]
[109.65852356 195.90074158]
[94.69860840 196.99655151]
[80.14780426 193.35319519]
[67.46940613 185.33706665]
[57.93842316 173.75430298]
[52.51332855 159.76972961]
[51.73970032 144.78968811]
[55.69533539 130.32066345]
[63.98243332 117.81770325]
[75.76760864 108.53817749]
[89.86183167 103.41601562]
[76.36736298 96.86624908]
[62.87290192 90.31648254]
[49.37844086 83.76670837]
[33.58487701 84.70156097]
[25.51353073 72.18347168]
[12.01906776 65.63370514]
[-2.83038259 71.04381561]
[-17.12057495 64.29356384]
[-22.37339211 49.38774490]
[-15.47242928 35.16971970]
[-0.51190698 30.07478714]
[13.63236332 37.12568665]
[18.56883621 52.13924026]
[32.06330109 58.68900681]
[46.89164734 57.28567123]
[55.92820740 70.27224731]
[69.42266846 76.82201385]
[82.91713715 83.37178802]
[96.41159821 89.92155457]
[111.35607147 91.21102905]
[125.77301788 87.06957245]
[140.18995667 82.92811584]
[154.60690308 78.78665924]
[169.02384949 74.64521027]
[183.44079590 70.50375366]
[184.54397583 55.40380859]
[190.73513794 41.61825562]
[201.24946594 30.80301476]
[214.80407715 24.24996376]
[229.75463867 22.73263359]
[244.29475403 26.41495705]
[256.67425537 34.83378601]
[265.40991211 46.95706940]
[279.82684326 42.81561279]
[294.24380493 38.67416000]
[305.23434448 26.50289726]
[321.21142578 30.19948959]
[325.73919678 45.96119690]
[314.15985107 57.57373047]
[298.38525391 53.09110641]
[283.96829224 57.23256302]
[269.55136108 61.37401581]
[268.58172607 76.28525543]
[262.55770874 89.99074554]
[252.18869019 100.82853699]
[238.71218872 107.47724915]
[223.74620056 109.11711121]
[209.09490967 105.53101349]
[196.53123474 97.13303375]
[187.58226013 84.92070007]
[173.16531372 89.06215668]
[158.74836731 93.20360565]
[144.33142090 97.34506226]
[129.91447449 101.48651886]
[115.49752045 105.62797546]
[128.50909424 113.09114075]
[138.52964783 124.25307465]
[144.55145264 137.99125671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 33]
[15 32]
[16 31]
[17 30]
[19 28]
[20 27]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
