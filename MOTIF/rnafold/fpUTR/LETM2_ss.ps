%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGACGUCAGGGGCGAGGAAAGAGGCGGAACCGUAGAGACUUGGCUUCGGGCCCUUCUAGCUUGGGGGUCCCGGGAAGGAGCUGGGAGGACCUAGGCGGCCGUUCCGCGGAGCCCGGCCGAGGAGGUCCCUAUGUUAACUACUUGAGACAAAAAUAAAU\
) } def
/len { sequence length } bind def

/coor [
[146.69752502 342.10461426]
[156.64880371 330.76287842]
[169.19699097 322.38400269]
[164.36968994 308.18200684]
[159.54240417 293.97998047]
[154.57846069 279.82513428]
[149.47836304 265.71881104]
[144.37825012 251.61245728]
[139.27815247 237.50611877]
[134.17805481 223.39978027]
[128.92123413 218.15350342]
[129.11843872 208.97212219]
[124.29115295 194.77011108]
[119.46385956 180.56809998]
[114.63655853 166.36608887]
[109.80926514 152.16406250]
[104.98197174 137.96205139]
[96.40542603 138.11845398]
[88.00931549 136.36152649]
[80.21505737 132.77946472]
[73.41389465 127.55207062]
[67.94719696 120.94171906]
[64.08937073 113.28021240]
[62.03403854 104.95211792]
[47.06815720 103.94101715]
[32.10227203 102.92992401]
[17.13638878 101.91883087]
[2.17050385 100.90773773]
[-6.65108871 103.46037292]
[-13.07318211 99.73020172]
[-28.01679993 98.43086243]
[-38.40579605 106.12761688]
[-50.85313416 104.70826721]
[-58.72090912 95.48051453]
[-73.63671112 93.89342499]
[-88.55251312 92.30632782]
[-103.09387207 98.54005432]
[-114.93105316 89.49955750]
[-129.84684753 87.91246796]
[-140.14425659 99.52035522]
[-155.30519104 102.82578278]
[-169.49995422 96.55774689]
[-177.27037048 83.12643433]
[-175.62857056 67.69645691]
[-165.20585632 56.20096207]
[-150.00994873 53.06019592]
[-135.88401794 59.48184967]
[-128.25976562 72.99666595]
[-113.34395599 74.58376312]
[-99.86946869 68.23651886]
[-86.96541595 77.39052582]
[-72.04961395 78.97762299]
[-57.13381577 80.56471252]
[-41.52812195 72.58265686]
[-26.71746445 83.48724365]
[-11.77384663 84.78658295]
[3.18159914 85.94184875]
[18.14748383 86.95294189]
[33.11336899 87.96404266]
[48.07925034 88.97513580]
[63.04513550 89.98622894]
[76.80908966 66.48493958]
[104.12454224 56.97215271]
[104.12454224 41.97215271]
[104.12454224 26.97215080]
[104.12454224 11.97215080]
[104.12454224 -3.02784896]
[104.12454224 -18.02784920]
[104.12454224 -33.02784729]
[91.53757477 -45.14338303]
[91.58227539 -62.27666473]
[103.74425507 -73.86107635]
[103.45516968 -88.85829163]
[103.16608429 -103.85549927]
[102.87699890 -118.85271454]
[102.58791351 -133.84992981]
[102.29882812 -148.84713745]
[90.01545715 -158.52458191]
[86.87701416 -173.84399414]
[94.36537170 -187.57200623]
[108.94476318 -193.22668457]
[123.73123932 -188.13806152]
[131.74308777 -174.70883179]
[129.19734192 -159.27984619]
[117.29604340 -149.13623047]
[117.58512878 -134.13902283]
[117.87421417 -119.14179993]
[118.16329956 -104.14458466]
[118.45238495 -89.14737701]
[118.74147034 -74.15016174]
[129.20390320 -66.58155823]
[133.44596863 -54.17904663]
[129.70063782 -41.41437149]
[119.12454224 -33.02784729]
[119.12454224 -18.02784920]
[119.12454224 -3.02784896]
[119.12454224 11.97215080]
[119.12454224 26.97215080]
[119.12454224 41.97215271]
[119.12454224 56.97215271]
[131.68620300 65.17000580]
[145.41668701 59.13064194]
[159.14715576 53.09127808]
[172.87763977 47.05191422]
[186.48918152 40.74905396]
[199.97671509 34.18503952]
[213.46424866 27.62102318]
[226.95179749 21.05700684]
[235.68040466 7.17380095]
[252.05549622 8.06169891]
[259.23178101 22.80730820]
[249.82690430 36.24160767]
[233.51580811 34.54454422]
[220.02827454 41.10856247]
[206.54074097 47.67257690]
[193.05319214 54.23659515]
[190.66415405 58.42230606]
[185.59715271 61.12654495]
[178.91700745 60.78239441]
[165.18652344 66.82176208]
[151.45603943 72.86112213]
[137.72555542 78.90048218]
[140.77246094 87.93630219]
[141.72497559 97.26747894]
[140.60415649 106.42278290]
[137.53405762 114.95488739]
[132.73225403 122.46224976]
[126.49588776 128.60797119]
[119.18398285 133.13476562]
[124.01128387 147.33677673]
[128.83857727 161.53878784]
[133.66587830 175.74079895]
[138.49316406 189.94282532]
[143.32046509 204.14483643]
[148.28439331 218.29966736]
[153.38449097 232.40600586]
[158.48460388 246.51235962]
[163.58470154 260.61871338]
[168.68481445 274.72503662]
[174.57319641 281.77227783]
[173.74441528 289.15267944]
[178.57170105 303.35470581]
[183.39900208 317.55673218]
[198.45408630 316.55319214]
[213.25570679 319.48132324]
[226.79470825 326.14154053]
[238.14793396 336.07965088]
[246.54133606 348.61813354]
[251.40261841 362.90203857]
[252.40034485 377.95751953]
[249.46647644 392.75799561]
[242.80107117 406.29443359]
[232.85855103 417.64382935]
[220.31683350 426.03237915]
[206.03105164 430.88815308]
[190.97520447 431.88006592]
[176.17582703 428.94049072]
[162.64198303 422.26983643]
[151.29643250 412.32293701]
[142.91271973 399.77798462]
[138.06245422 385.49032593]
[137.07637024 370.43411255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 143]
[4 142]
[5 141]
[6 139]
[7 138]
[8 137]
[9 136]
[10 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[30 56]
[31 55]
[34 53]
[35 52]
[36 51]
[38 49]
[39 48]
[63 100]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[101 122]
[102 121]
[103 120]
[104 119]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
