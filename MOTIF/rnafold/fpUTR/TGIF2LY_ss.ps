%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUCUGUUAGCAAAGCUGUUUGUCUUUCUCGGAAACAACAGUAACGAUAAGCCUCUUUGAAU\
) } def
/len { sequence length } bind def

/coor [
[80.11437225 240.09259033]
[67.71441650 248.81135559]
[53.07946014 252.76026917]
[37.97676086 251.46249390]
[24.23003387 245.07475281]
[13.49926758 234.36837769]
[7.08025312 220.63623047]
[5.74811840 205.53651428]
[9.66372395 190.89260864]
[18.35424232 178.47283936]
[30.77025032 169.77694702]
[45.41245651 165.85501099]
[60.51274109 167.18060303]
[66.83375549 153.57749939]
[73.15477753 139.97438049]
[79.47579193 126.37126160]
[85.79680634 112.76815033]
[80.92153168 99.12344360]
[87.02743530 85.98326874]
[100.60007477 80.91083527]
[106.92109680 67.30772400]
[113.24211121 53.70460510]
[119.56312561 40.10149002]
[125.88414001 26.49837494]
[132.20515442 12.89525890]
[138.52618408 -0.70785612]
[127.05176544 -10.51808167]
[118.65058899 -23.06091690]
[113.94605255 -37.40560150]
[113.28728485 -52.48766327]
[116.72315216 -67.18791199]
[123.99870300 -80.41549683]
[134.57403564 -91.18883514]
[147.66439819 -98.70848083]
[162.29838562 -102.41642761]
[177.39007568 -102.03751373]
[191.81954956 -97.59986115]
[204.51605225 -89.43276978]
[214.53742981 -78.14229584]
[221.13999939 -64.56626892]
[223.83383179 -49.71211243]
[222.41902161 -34.68211365]
[217.00054932 -20.59159470]
[207.98051453 -8.48616219]
[196.02825928 0.73587817]
[182.03070068 6.39018917]
[167.02658081 8.05718422]
[152.12928772 5.61316061]
[145.80827332 19.21627617]
[139.48725891 32.81939316]
[133.16624451 46.42250824]
[126.84522247 60.02562332]
[120.52420807 73.62873840]
[114.20319366 87.23184967]
[119.07846832 100.87655640]
[112.97256470 114.01673126]
[99.39992523 119.08916473]
[93.07890320 132.69227600]
[86.75788879 146.29539490]
[80.43687439 159.89851379]
[74.11585999 173.50163269]
[84.86633301 184.18820190]
[91.31064606 197.90850830]
[92.67060089 213.00573730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
