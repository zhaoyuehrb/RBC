%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCGGCCGGGUGGUGGCGGUGGCUGCGGCGACGGCGGUCGCGUCGGCGUCAGGGUCGGGGUCGGUAAGGGGUGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[85.47923279 107.10397339]
[90.83680725 100.25594330]
[76.53585815 95.73013306]
[62.23491287 91.20432281]
[47.93396759 86.67851257]
[33.63302231 82.15270233]
[19.33207512 77.62689209]
[5.03112936 73.10108948]
[-9.26981640 68.57527924]
[-23.57076263 64.04946899]
[-37.87170792 59.52365875]
[-55.61416245 63.98331451]
[-67.08969879 50.85267258]
[-81.55350494 46.87794876]
[-96.91060638 50.68187714]
[-107.13268280 39.84866714]
[-121.59648895 35.87394714]
[-136.95359802 39.67787552]
[-147.17565918 28.84466362]
[-161.63946533 24.86994171]
[-176.10327148 20.89521790]
[-190.56707764 16.92049599]
[-207.44218445 18.55362320]
[-213.68298340 2.79009604]
[-200.26312256 -7.57058811]
[-186.59234619 2.45669317]
[-172.12855530 6.43141603]
[-157.66474915 10.40613842]
[-143.20094299 14.38086128]
[-128.87838745 10.29263401]
[-117.62176514 21.41014290]
[-103.15795898 25.38486481]
[-88.83540344 21.29663849]
[-77.57878113 32.41414642]
[-63.11497879 36.38887024]
[-52.28683090 30.64704704]
[-40.08691406 34.03120422]
[-33.34589767 45.22271347]
[-19.04495239 49.74852371]
[-4.74400759 54.27433014]
[9.55693817 58.80014038]
[23.85788345 63.32595062]
[38.15882874 67.85176086]
[52.45977783 72.37756348]
[66.76071930 76.90337372]
[81.06166840 81.42918396]
[95.36261749 85.95499420]
[110.18682098 83.66525269]
[122.45575714 75.03547668]
[134.72470093 66.40569305]
[137.18869019 50.79466248]
[150.01863098 41.56600189]
[165.60273743 44.19490433]
[174.69523621 57.12169647]
[171.90171814 72.67713928]
[158.87951660 81.63246155]
[143.35447693 78.67463684]
[131.08554077 87.30441284]
[118.81659698 95.93419647]
[118.24247742 103.41218567]
[130.62063599 111.88455963]
[117.09423828 118.36817932]
[116.52011871 125.84616852]
[127.32794952 136.24765015]
[138.13577271 146.64913940]
[148.94358826 157.05062866]
[163.67782593 152.71498108]
[178.60209656 156.34291077]
[189.70184326 166.95852661]
[193.99128723 181.70628357]
[190.31658936 196.61909485]
[179.66622925 207.68551636]
[164.90510559 211.92871094]
[150.00387573 208.20729065]
[138.97090149 197.52229309]
[134.77400208 182.74794006]
[138.54211426 167.85845947]
[127.73428345 157.45697021]
[116.92646027 147.05548096]
[106.11863708 136.65399170]
[92.19727325 129.13586426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[13 35]
[14 34]
[16 32]
[17 31]
[19 29]
[20 28]
[21 27]
[22 26]
[48 59]
[49 58]
[50 57]
[63 80]
[64 79]
[65 78]
[66 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
