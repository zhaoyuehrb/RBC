%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGACUCCUCCUCCACGCGCAGGGCCAGAGCAUGCGUACCCGACAAGCUCUGCCCUCCUGUGCCUCUCUUCUACAGGUGCCUGUGGGCGGGCUCGUGC\
) } def
/len { sequence length } bind def

/coor [
[85.31433868 407.67449951]
[77.56279755 394.09335327]
[80.40541840 378.71630859]
[92.50000000 368.80392456]
[92.50000000 353.80392456]
[92.50000000 338.80392456]
[84.76270294 326.07666016]
[92.50000000 312.27648926]
[92.50000000 297.27648926]
[92.50000000 282.27648926]
[84.76270294 269.54922485]
[92.50000000 255.74903870]
[92.50000000 240.74903870]
[92.50000000 225.74903870]
[84.76270294 213.02177429]
[92.50000000 199.22160339]
[92.50000000 184.22160339]
[84.76270294 171.49432373]
[92.50000000 157.69415283]
[92.50000000 142.69415283]
[92.50000000 127.69415283]
[92.50000000 112.69415283]
[87.90914154 98.41395569]
[79.16802216 86.22409058]
[70.42691040 74.03421783]
[61.68579483 61.84434891]
[52.94467926 49.65447998]
[45.26118469 44.38603210]
[44.12824249 36.94681549]
[35.77045822 24.49099541]
[27.41267586 12.03517532]
[19.05489159 -0.42064425]
[10.69710827 -12.87646389]
[-3.41711068 -20.02484894]
[-4.08360243 -34.90453339]
[-12.44138622 -47.36035538]
[-20.99187088 -59.68468857]
[-29.73298645 -71.87455750]
[-44.88758469 -78.14115143]
[-46.76931763 -94.43198395]
[-33.44242096 -103.98843384]
[-18.61646271 -96.97966003]
[-17.54311752 -80.61567688]
[-8.80200100 -68.42580414]
[-2.23034239 -64.75991058]
[0.01443344 -55.71813965]
[8.37221718 -43.26231766]
[21.88863182 -37.00485611]
[23.15292740 -21.23424721]
[31.51071167 -8.77842808]
[39.86849594 3.67739129]
[48.22628021 16.13321114]
[56.58406448 28.58903122]
[65.13454437 40.91336441]
[73.87566376 53.10323334]
[82.61677551 65.29310608]
[91.35789490 77.48297119]
[100.09900665 89.67284393]
[104.12188721 87.17938232]
[109.54780579 86.41300964]
[123.24465942 80.29776001]
[136.94151306 74.18250275]
[150.63835144 68.06724548]
[164.33520508 61.95199585]
[166.55850220 46.68567657]
[176.69967651 35.05984497]
[191.52273560 30.78426170]
[206.29768372 35.22325134]
[216.30987549 46.96034622]
[218.36448669 62.25028229]
[211.80586243 76.21409607]
[198.72686768 84.39598846]
[183.30094910 84.18514252]
[170.45045471 75.64884186]
[156.75361633 81.76409912]
[143.05676270 87.87934875]
[129.35990906 93.99460602]
[115.66306305 100.10986328]
[107.50000000 112.69415283]
[107.50000000 127.69415283]
[107.50000000 142.69415283]
[107.50000000 157.69415283]
[115.23729706 171.49432373]
[107.50000000 184.22160339]
[107.50000000 199.22160339]
[115.23729706 213.02177429]
[107.50000000 225.74903870]
[107.50000000 240.74903870]
[107.50000000 255.74903870]
[115.23729706 269.54922485]
[107.50000000 282.27648926]
[107.50000000 297.27648926]
[107.50000000 312.27648926]
[115.23729706 326.07666016]
[107.50000000 338.80392456]
[107.50000000 353.80392456]
[107.50000000 368.80392456]
[119.59458160 378.71630859]
[122.43720245 394.09335327]
[114.68566132 407.67449951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 97]
[5 96]
[6 95]
[8 93]
[9 92]
[10 91]
[12 89]
[13 88]
[14 87]
[16 85]
[17 84]
[19 82]
[20 81]
[21 80]
[22 79]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[35 47]
[36 46]
[37 44]
[38 43]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
