%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGUCCAGGCCCCUCUGCUGCAGCGCCCGCGCGUCCAGAGGCCCUGCCAGACACGCGCGAGGUUCGAGGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[56.23178482 228.95288086]
[54.59905624 244.04255676]
[47.62208557 257.52166748]
[36.24444580 267.56726074]
[22.00487900 272.82073975]
[6.82916117 272.57162476]
[-7.23031187 266.85363770]
[-18.27211380 256.44003296]
[-24.80293083 242.73918152]
[-25.93952370 227.60404968]
[-21.52817726 213.08149719]
[-12.16549015 201.13558960]
[0.88231045 193.38192749]
[15.85061741 190.86911011]
[30.71508980 193.93699646]
[38.82470322 181.31819153]
[46.93431473 168.69938660]
[47.30616760 153.80943298]
[61.27613449 146.38308716]
[69.38574982 133.76428223]
[77.49536133 121.14547729]
[70.55097198 109.29219818]
[69.43483734 95.59990692]
[74.36783600 82.77843475]
[84.37369537 73.36527252]
[97.47214508 69.22338104]
[111.07088470 71.17248535]
[119.68845367 58.89496231]
[128.30601501 46.61743927]
[136.67135620 34.16668701]
[144.78096008 21.54788399]
[152.89057922 8.92908096]
[161.00018311 -3.68972230]
[169.10980225 -16.30852509]
[177.21940613 -28.92732811]
[185.32902527 -41.54613113]
[178.22766113 -53.77467728]
[177.15522766 -67.80798340]
[182.26724243 -80.84934998]
[192.49250793 -90.32503510]
[205.75701904 -94.39217377]
[219.40443420 -92.29696655]
[228.02200317 -104.57448578]
[236.63957214 -116.85201263]
[240.79028320 -133.29000854]
[257.73492432 -133.85200500]
[262.96566772 -117.72514343]
[248.91708374 -108.23444366]
[240.29953003 -95.95692444]
[231.68196106 -83.67939758]
[238.83422852 -69.33627319]
[237.85258484 -53.24579620]
[228.90725708 -39.72351456]
[214.31678772 -32.44265366]
[197.94783020 -33.43651962]
[189.83821106 -20.81771660]
[181.72860718 -8.19891262]
[173.61898804 4.41988993]
[165.50936890 17.03869247]
[157.39976501 29.65749550]
[149.29014587 42.27629852]
[148.29634094 49.81724930]
[140.58354187 55.23500824]
[131.96597290 67.51252747]
[123.34840393 79.79004669]
[130.31610107 94.12423706]
[129.20817566 110.02361298]
[120.31977081 123.25289154]
[106.01858521 130.28807068]
[90.11415863 129.25509644]
[82.00454712 141.87390137]
[73.89493561 154.49269104]
[72.94303131 170.28524780]
[59.55311584 176.80900574]
[51.44350433 189.42781067]
[43.33389282 202.04661560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 76]
[16 75]
[17 74]
[19 72]
[20 71]
[21 70]
[27 65]
[28 64]
[29 63]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
