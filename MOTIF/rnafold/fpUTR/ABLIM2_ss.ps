%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGGCGGCGCUGCCUGGCGUGUGCGCAAGGAGCGGGCGCGGAGCCGGCGGGCGGGCGGAGGAUAGCGCGGGCGCGGCACCUGCGGGCCCGAGGGUCUGGCUGUCGCAGCGCCGGGCCGCCCCGACUCCGAGCGGCUGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[86.71432495 185.52963257]
[97.32193756 173.81408691]
[96.34088898 158.84620667]
[95.35984802 143.87832642]
[94.37879944 128.91044617]
[93.39775085 113.94255829]
[78.99636078 109.74494171]
[64.59625244 105.54768372]
[55.72661209 117.64435577]
[46.85696411 129.74102783]
[37.98731995 141.83769226]
[29.11767578 153.93435669]
[27.87119293 170.28607178]
[12.97188377 177.13754272]
[-0.25312006 167.44056702]
[1.80093193 151.17056274]
[17.02100754 145.06471252]
[25.89065170 132.96804810]
[34.76029587 120.87137604]
[43.62994003 108.77471161]
[52.49958801 96.67803955]
[64.19018555 88.35764313]
[76.51988220 85.31665039]
[87.68914032 87.23854065]
[96.11957550 93.26824188]
[100.94116974 79.06429291]
[105.76275635 64.86034393]
[99.02500153 50.81610870]
[104.11712646 36.47996902]
[117.54767609 30.14309883]
[122.36927032 15.93914700]
[127.19085693 1.73519516]
[132.01245117 -12.46875668]
[136.67881775 -26.72445869]
[141.18940735 -41.03021240]
[145.69999695 -55.33596802]
[150.21058655 -69.64172363]
[149.81114197 -78.84503174]
[154.97874451 -84.20842743]
[159.80033875 -98.41237640]
[164.62193298 -112.61633301]
[169.44352722 -126.82028198]
[164.43949890 -138.76181030]
[168.80346680 -150.52412415]
[179.66691589 -155.95188904]
[184.79722595 -170.04727173]
[189.92752075 -184.14266968]
[195.05783081 -198.23805237]
[200.18812561 -212.33345032]
[205.31843567 -226.42883301]
[201.67602539 -244.44337463]
[215.47094727 -255.23846436]
[220.29254150 -269.44241333]
[225.11413574 -283.64636230]
[229.93572998 -297.85031128]
[229.73715210 -307.06015015]
[235.02053833 -312.30953979]
[240.15083313 -326.40493774]
[245.28114319 -340.50033569]
[241.63873291 -358.51486206]
[255.43367004 -369.30996704]
[260.25524902 -383.51391602]
[265.07684326 -397.71786499]
[269.89843750 -411.92181396]
[261.10641479 -422.59289551]
[258.77322388 -436.11099243]
[263.40573120 -448.90780640]
[273.68630981 -457.65917969]
[286.84539795 -460.14868164]
[291.97567749 -474.24407959]
[297.10598755 -488.33947754]
[302.23629761 -502.43484497]
[307.36660767 -516.53021240]
[304.81585693 -532.14447021]
[316.43951416 -541.45788574]
[321.56982422 -555.55328369]
[313.59484863 -569.00445557]
[316.18292236 -584.42639160]
[328.11203003 -594.53729248]
[343.74957275 -594.56317139]
[355.71203613 -584.49169922]
[358.35107422 -569.07843018]
[350.42062378 -555.60095215]
[335.66522217 -550.42297363]
[330.53491211 -536.32757568]
[333.45260620 -521.72155762]
[321.46197510 -511.39993286]
[316.33169556 -497.30456543]
[311.20138550 -483.20916748]
[306.07107544 -469.11376953]
[300.94076538 -455.01837158]
[310.54440308 -441.74777222]
[310.37133789 -425.20190430]
[300.29238892 -411.87069702]
[284.10238647 -407.10021973]
[279.28079224 -392.89627075]
[274.45919800 -378.69232178]
[269.63760376 -364.48837280]
[274.71249390 -353.45565796]
[270.75357056 -341.55090332]
[259.37652588 -335.37002563]
[254.24623108 -321.27462769]
[249.11592102 -307.17926025]
[244.13967896 -293.02874756]
[239.31808472 -278.82476807]
[234.49650574 -264.62081909]
[229.67491150 -250.41687012]
[234.74977112 -239.38415527]
[230.79086304 -227.47941589]
[219.41381836 -221.29852295]
[214.28352356 -207.20314026]
[209.15321350 -193.10775757]
[204.02291870 -179.01235962]
[198.89260864 -164.91697693]
[193.76231384 -150.82157898]
[197.76385498 -133.76809692]
[183.64747620 -121.99868774]
[178.82588196 -107.79473877]
[174.00428772 -93.59078979]
[169.18269348 -79.38683319]
[164.51632690 -65.13113403]
[160.00575256 -50.82537842]
[155.49516296 -36.51962662]
[150.98457336 -22.21387100]
[151.98054504 -14.83293247]
[146.21640015 -7.64716482]
[141.39480591 6.55678701]
[136.57321167 20.76073837]
[131.75163269 34.96469116]
[138.54916382 48.16806793]
[133.86172485 62.64158249]
[119.96671295 69.68193054]
[115.14511871 83.88588715]
[110.32352448 98.08983612]
[108.36563110 112.96150970]
[109.34667969 127.92938995]
[110.32772827 142.89727783]
[111.30877686 157.86515808]
[112.28982544 172.83303833]
[124.33587646 183.06379700]
[125.53620148 198.82243347]
[115.17867279 210.75964355]
[99.40821838 211.79328918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[25 134]
[26 133]
[27 132]
[30 129]
[31 128]
[32 127]
[33 126]
[34 124]
[35 123]
[36 122]
[37 121]
[39 120]
[40 119]
[41 118]
[42 117]
[45 115]
[46 114]
[47 113]
[48 112]
[49 111]
[50 110]
[52 107]
[53 106]
[54 105]
[55 104]
[57 103]
[58 102]
[59 101]
[61 98]
[62 97]
[63 96]
[64 95]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
