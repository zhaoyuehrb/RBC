%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAGAUGAUGUUUAGGUCCGGGACUGUCAGUCAGUGCGCGGCCAGGUACGGGCCGACGGGCCCGCGGGGCCGGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[121.34176636 170.00726318]
[106.55882263 172.54981995]
[92.07887268 168.63430786]
[80.59185791 158.98814392]
[74.23171997 145.40327454]
[74.17998505 130.40336609]
[80.44625092 116.77494812]
[91.86634827 107.04981232]
[76.89051819 106.19863129]
[61.91468811 105.34745789]
[46.93885803 104.49627686]
[39.79833984 116.68192291]
[28.12882042 124.51905823]
[14.27944183 126.49978638]
[1.00804448 122.28816986]
[-9.06798935 112.77558899]
[-13.98791790 99.89277649]
[-28.92081070 98.47550201]
[-43.85370636 97.05821991]
[-58.78659821 95.64094543]
[-75.12615967 100.16367340]
[-83.99537659 85.71468353]
[-72.56630707 73.19219971]
[-57.36932373 80.70805359]
[-42.43642807 82.12532806]
[-27.50353432 83.54260254]
[-12.57064056 84.95988464]
[-3.62937593 71.64001465]
[10.86085606 64.54131317]
[27.05138588 65.65288544]
[40.58981323 74.76922607]
[47.79003906 89.52044678]
[62.76586914 90.37162781]
[77.74169922 91.22280121]
[92.71752930 92.07398224]
[107.50046539 89.53141022]
[121.33134460 83.72565460]
[135.16223145 77.91989899]
[148.99310303 72.11414337]
[155.90206909 65.75177765]
[163.45892334 66.36137390]
[177.49958801 61.08316040]
[191.54025269 55.80494690]
[205.58093262 50.52672958]
[219.62159729 45.24851608]
[221.39286804 32.58628845]
[228.42550659 21.99637032]
[239.28347778 15.52684784]
[251.79856873 14.39597511]
[263.50332642 18.76320457]
[272.11743164 27.71021271]
[286.51705933 23.50899315]
[300.91671753 19.30777168]
[315.31634521 15.10655212]
[329.71600342 10.90533161]
[344.11566162 6.70411158]
[355.05563354 -5.51263523]
[371.04791260 -1.88234842]
[375.64099121 13.86044407]
[364.10992432 25.52090645]
[348.31686401 21.10375595]
[333.91723633 25.30497551]
[319.51757812 29.50619698]
[305.11795044 33.70741653]
[290.71829224 37.90863800]
[276.31863403 42.10985565]
[271.30947876 58.83292007]
[257.25506592 69.44544983]
[239.49162292 69.68981171]
[224.89981079 59.28918457]
[210.85914612 64.56739807]
[196.81846619 69.84561920]
[182.77780151 75.12383270]
[168.73713684 80.40204620]
[154.79885864 85.94502258]
[140.96798706 91.75077820]
[127.13710022 97.55653381]
[113.30622101 103.36228943]
[127.31937408 108.71313477]
[137.77883911 119.46485901]
[142.74156189 133.62011719]
[141.28561401 148.54928589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 35]
[9 34]
[10 33]
[11 32]
[17 27]
[18 26]
[19 25]
[20 24]
[36 78]
[37 77]
[38 76]
[39 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
