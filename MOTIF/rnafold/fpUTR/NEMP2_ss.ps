%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCUGAGCCCCCGCGCCACUUCCGCUCCUCGCAGCGGAGCCGGUCCCCUAGGGCUCGGGUCGCACGGAGCUGACCCCUAACGAA\
) } def
/len { sequence length } bind def

/coor [
[100.47874451 230.98391724]
[95.21197510 216.93894958]
[94.90455627 201.94209290]
[99.59130859 187.69308472]
[108.74105835 175.80686951]
[121.31678009 167.63061523]
[135.89317322 164.09100342]
[150.81838989 165.58926392]
[140.59710693 154.61083984]
[130.37583923 143.63241577]
[120.15457916 132.65400696]
[109.93330383 121.67558289]
[99.71203613 110.69716644]
[88.20227051 101.07816315]
[75.58346558 92.96855164]
[62.96466446 84.85894012]
[53.83100128 82.77686310]
[50.04739380 76.22789001]
[37.72608185 67.67304993]
[32.84937668 67.48878479]
[28.78668594 65.79734039]
[25.93979454 63.08945465]
[24.48781586 59.93970871]
[24.38002968 56.91812515]
[13.40161133 46.69685364]
[2.42319345 36.47558594]
[-8.55522442 26.25431824]
[-19.53364182 16.03304863]
[-30.51206017 5.81177902]
[-46.29534531 6.62627316]
[-57.97563171 -4.02015686]
[-58.62321091 -19.81117249]
[-47.85388565 -31.37824440]
[-32.05690384 -31.85883522]
[-20.60433960 -20.96781731]
[-20.29079056 -5.16663885]
[-9.31237316 5.05463028]
[1.66604483 15.27589989]
[12.64446259 25.49716949]
[23.62288094 35.71843719]
[34.60129929 45.93970490]
[46.28092194 55.35174179]
[58.60223389 63.90658188]
[71.07427979 72.24013519]
[83.69307709 80.34974670]
[96.31188202 88.45935822]
[94.71092224 73.54504395]
[102.82211304 60.92725754]
[117.05490875 56.19148636]
[131.10891724 61.43410110]
[138.76287842 74.33436584]
[136.62863159 89.18176270]
[125.65095520 99.40382385]
[110.69045258 100.47589874]
[120.91172791 111.45431519]
[131.13299561 122.43273163]
[141.35426331 133.41114807]
[151.57553101 144.38957214]
[161.79679871 155.36798096]
[174.69702148 163.02203369]
[189.23107910 166.73162842]
[203.76513672 170.44123840]
[218.29919434 174.15083313]
[232.83325195 177.86042786]
[247.43121338 181.31001282]
[262.08840942 184.49848938]
[276.30773926 177.06948853]
[290.92276001 183.68621826]
[294.72204590 199.27291870]
[284.79113770 211.87278748]
[268.74816895 211.82028198]
[258.89993286 199.15570068]
[244.24273682 195.96722412]
[236.87135315 197.66059875]
[229.12365723 192.39448547]
[214.58959961 188.68489075]
[200.05554199 184.97529602]
[185.52148438 181.26570129]
[170.98741150 177.55609131]
[179.45520020 189.93739319]
[183.33435059 204.42712402]
[182.18521118 219.38304138]
[176.13800049 233.11007690]
[165.87812805 244.05241394]
[152.56840515 250.96989441]
[137.71734619 253.07847595]
[123.00814819 250.13919067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 46]
[15 45]
[16 44]
[18 43]
[19 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[60 79]
[61 78]
[62 77]
[63 76]
[64 75]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
