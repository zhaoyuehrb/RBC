%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCACAGGUGUGUCUCUAGUCCUCGUGGUUGCCUGCCCCACUCCCUGCCGAGACGCCUGCCAGAAAGGUCACCUAUCCUGAACCCCAGCAAGCCUGAAACAGCUCAGCCAAGCACCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[78.33440399 134.64460754]
[68.05648041 125.48054504]
[61.40626144 113.42275238]
[59.13899612 99.84059143]
[44.40468979 97.02986908]
[31.42732620 105.64530945]
[16.52468300 102.58494568]
[8.39115143 90.15991974]
[-6.34315729 87.34919739]
[-21.07746696 84.53848267]
[-35.81177521 81.72776031]
[-50.54608536 78.91703796]
[-65.28039551 76.10632324]
[-80.01470184 73.29560089]
[-95.02026367 78.30995941]
[-106.07227325 68.32485199]
[-120.80657959 65.51412964]
[-133.78393555 74.12957764]
[-148.68658447 71.06920624]
[-156.82011414 58.64418411]
[-171.55442810 55.83346558]
[-186.28874207 53.02274323]
[-194.28495789 62.79680252]
[-205.63204956 68.17144775]
[-218.11506653 68.16636658]
[-229.32658386 62.84475327]
[-237.13110352 53.28909302]
[-240.07165527 41.38161469]
[-254.64611816 37.83413315]
[-269.22061157 34.28664780]
[-283.79507446 30.73916054]
[-294.89733887 41.45099258]
[-310.03283691 44.43760681]
[-324.37191772 38.74598694]
[-333.33901978 26.19230843]
[-334.07275391 10.78240299]
[-326.33901978 -2.56648302]
[-312.60559082 -9.59476948]
[-297.25479126 -8.05975533]
[-285.18496704 1.54874182]
[-280.24758911 16.16468620]
[-265.67312622 19.71216965]
[-251.09863281 23.25965500]
[-236.52416992 26.80714035]
[-223.70751953 14.78763008]
[-206.09655762 12.76586437]
[-190.61985779 21.72427368]
[-183.47801208 38.28843689]
[-168.74371338 41.09915543]
[-154.00939941 43.90987396]
[-141.87307739 35.35153198]
[-126.89035034 37.99210358]
[-117.99585724 50.77982330]
[-103.26155090 53.59054565]
[-89.30989075 48.37514496]
[-77.20397949 58.56129074]
[-62.46967316 61.37201309]
[-47.73536301 64.18273163]
[-33.00105667 66.99345398]
[-18.26674652 69.80416870]
[-3.53243780 72.61489105]
[11.20187092 75.42561340]
[23.33819389 66.86726379]
[38.32091904 69.50784302]
[47.21540833 82.29556274]
[61.94971848 85.10627747]
[75.52624512 67.27871704]
[96.46321869 59.29203796]
[118.46387482 63.54822159]
[127.58283234 51.63836670]
[136.70178223 39.72850800]
[132.15020752 24.89399719]
[137.21923828 10.22823715]
[149.95974731 1.37051392]
[165.47273254 1.72680247]
[177.79313660 11.16010284]
[182.18351746 26.04311752]
[176.95568848 40.65302658]
[164.11984253 49.37201691]
[148.61164856 48.84746552]
[139.49269104 60.75732040]
[130.37373352 72.66717529]
[134.39967346 77.94757080]
[137.51721191 83.81030273]
[139.64401245 90.10056305]
[140.72393799 96.65224457]
[140.72845459 103.29232788]
[139.65745544 109.84546661]
[137.53919983 116.13861847]
[149.99813843 124.49175262]
[162.45707703 132.84487915]
[176.96281433 127.65934753]
[191.56979370 131.95928955]
[200.73553467 143.89468384]
[201.11117554 158.76065063]
[213.57011414 167.11378479]
[226.43301392 174.83036804]
[239.66738892 181.89093018]
[252.90174866 188.95149231]
[266.13610840 196.01205444]
[281.18142700 191.17321777]
[295.20327759 198.46452332]
[299.88278198 213.56015015]
[292.44363403 227.50413513]
[277.29937744 232.02375793]
[263.43481445 224.43760681]
[259.07556152 209.24641418]
[245.84120178 202.18585205]
[232.60682678 195.12530518]
[219.37245178 188.06474304]
[216.56770325 188.84165955]
[213.27058411 188.49018860]
[209.93415833 186.81076050]
[207.07710266 183.78080750]
[205.21697998 179.57272339]
[192.75804138 171.21958923]
[178.86322021 176.51785278]
[164.34111023 172.57165527]
[154.81590271 160.69210815]
[154.10394287 145.30381775]
[141.64500427 136.95068359]
[129.18606567 128.59754944]
[118.02931976 136.66865540]
[104.82505035 140.57543945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 66]
[5 65]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[16 54]
[17 53]
[20 50]
[21 49]
[22 48]
[28 44]
[29 43]
[30 42]
[31 41]
[69 82]
[70 81]
[71 80]
[89 122]
[90 121]
[91 120]
[95 116]
[96 115]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
