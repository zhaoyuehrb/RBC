%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGGGCGGCUCGGGAGCCCGAGCGGUGGCGGAGCGGCGAGCAGCGAGCAGCGCCUGCGGGAGCGGCCGGUCGGUCGGGUCCCCGCGCCCCGCACGCCCGCACGCCCAGCGGGGCCCGCAUUGAGC\
) } def
/len { sequence length } bind def

/coor [
[151.34417725 394.03829956]
[163.09671021 384.51290894]
[157.69828796 370.51803589]
[152.29986572 356.52313232]
[146.90144348 342.52825928]
[141.50300598 328.53335571]
[136.10458374 314.53845215]
[130.70616150 300.54357910]
[125.30773926 286.54867554]
[110.75727081 282.90396118]
[99.39913177 292.70156860]
[88.04100037 302.49917603]
[76.68286896 312.29675293]
[65.32473755 322.09436035]
[53.96660233 331.89193726]
[49.08227158 347.54681396]
[33.02540207 350.87982178]
[22.31392288 338.46224976]
[27.96688843 323.06823730]
[44.16901016 320.53381348]
[55.52714539 310.73620605]
[66.88527679 300.93862915]
[78.24340820 291.14102173]
[89.60153961 281.34344482]
[100.95967102 271.54583740]
[106.69992828 257.68765259]
[105.59645844 242.72828674]
[104.49298859 227.76893616]
[103.38951874 212.80958557]
[102.10256195 197.86488342]
[100.63230133 182.93711853]
[99.16204834 168.00935364]
[97.69178772 153.08157349]
[88.74425507 141.17398071]
[95.09164429 126.68186951]
[93.62139130 111.75409698]
[86.71331024 98.43950653]
[75.35517883 88.64191437]
[63.99704361 78.84432220]
[52.63890839 69.04673004]
[34.51567459 66.07538605]
[29.28893661 49.37009048]
[17.69378090 39.85419464]
[1.65129745 39.98941040]
[-8.34444714 27.44091988]
[-4.62557268 11.83484650]
[9.95511818 5.14283514]
[24.21256638 12.49842453]
[27.20968056 28.25903511]
[38.80483627 37.77493668]
[50.93699265 36.91553879]
[60.68770218 44.84002304]
[62.43650055 57.68859482]
[73.79463196 67.48619080]
[85.15277100 77.28378296]
[96.51090240 87.08137512]
[96.86914062 88.23731995]
[97.21888733 89.39569855]
[103.29750824 75.68255615]
[109.37612152 61.96940994]
[115.45474243 48.25626373]
[121.53336334 34.54311752]
[114.01533508 17.24412346]
[121.30310059 0.19052108]
[138.40747070 -6.11334896]
[143.80590820 -20.10824013]
[149.20433044 -34.10313416]
[154.60275269 -48.09802628]
[160.00117493 -62.09291840]
[156.92910767 -78.20175171]
[169.51884460 -88.71035767]
[184.81912231 -82.80838013]
[187.09034729 -66.56727600]
[173.99606323 -56.69449234]
[168.59764099 -42.69960022]
[163.19921875 -28.70470810]
[157.80079651 -14.70981503]
[152.40237427 -0.71492344]
[159.23585510 8.57416725]
[160.70381165 20.13373756]
[156.31927490 31.05977440]
[147.08055115 38.54985046]
[135.24650574 40.62173462]
[129.16789246 54.33488083]
[123.08927155 68.04802704]
[117.01065063 81.76117706]
[110.93202972 95.47431946]
[108.54915619 110.28384399]
[110.01941681 125.21161652]
[119.07211304 138.18695068]
[112.61956024 151.61132812]
[114.08982086 166.53909302]
[115.56007385 181.46685791]
[117.03033447 196.39463806]
[121.02254486 204.73052979]
[118.34887695 211.70611572]
[119.45234680 226.66546631]
[120.55581665 241.62483215]
[121.65928650 256.58416748]
[127.52995300 258.61462402]
[132.71017456 262.40042114]
[136.67332458 267.70364380]
[138.97552490 274.12850952]
[139.30262756 281.15026855]
[144.70104980 295.14514160]
[150.09947205 309.14004517]
[155.49790955 323.13491821]
[160.89633179 337.12982178]
[166.29475403 351.12472534]
[171.69317627 365.11959839]
[177.09161377 379.11450195]
[192.19651794 378.27981567]
[206.81956482 382.15563965]
[219.52810669 390.36221313]
[229.07710266 402.09558105]
[234.53103638 416.20620728]
[235.35559082 431.31170654]
[231.46997070 445.93212891]
[223.25486755 458.63516235]
[211.51510620 468.17630005]
[197.40083313 473.62078857]
[182.29481506 474.43521118]
[167.67698669 470.53979492]
[154.97944641 462.31619263]
[145.44618225 450.57003784]
[140.01116943 436.45211792]
[139.20686340 421.34555054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[6 107]
[7 106]
[8 105]
[9 104]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[26 99]
[27 98]
[28 97]
[29 96]
[30 94]
[31 93]
[32 92]
[33 91]
[35 89]
[36 88]
[37 56]
[38 55]
[39 54]
[40 53]
[42 50]
[43 49]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
