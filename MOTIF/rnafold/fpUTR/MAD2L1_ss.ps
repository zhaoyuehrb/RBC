%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAAAGGACCUGACGACGUGCUGCGUCGUUACUUUUGAAACGCUUGGCGGGGAAGUGCUGUUGGAGCCGCUGUGGUUGCUGUCCGCGGAGUGGAAGCGCGUGCUUUUGUUUGUGUCCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-24.37049675 192.49279785]
[-44.45085144 195.56417847]
[-62.29397202 186.14141846]
[-75.15686798 193.85800171]
[-88.01976776 201.57460022]
[-100.88266754 209.29119873]
[-113.74556732 217.00778198]
[-126.60846710 224.72438049]
[-129.23976135 229.49261475]
[-133.08660889 232.40972900]
[-137.20753479 233.32460022]
[-140.74391174 232.49540710]
[-154.15153503 239.22114563]
[-167.55915833 245.94689941]
[-180.96678162 252.67265320]
[-194.37440491 259.39840698]
[-207.78202820 266.12414551]
[-221.18963623 272.84988403]
[-234.59725952 279.57565308]
[-248.00488281 286.30139160]
[-259.45147705 298.80786133]
[-274.63793945 291.27075195]
[-271.59939575 274.59130859]
[-254.73063660 272.89376831]
[-241.32301331 266.16802979]
[-227.91539001 259.44226074]
[-214.50776672 252.71652222]
[-201.10014343 245.99076843]
[-187.69252014 239.26502991]
[-174.28491211 232.53927612]
[-160.87728882 225.81353760]
[-147.46966553 219.08778381]
[-134.32505798 211.86148071]
[-121.46216583 204.14488220]
[-108.59926605 196.42829895]
[-95.73636627 188.71170044]
[-82.87346649 180.99510193]
[-70.01056671 173.27851868]
[-71.58066559 163.44131470]
[-70.05745697 153.56658936]
[-65.56933594 144.60649109]
[-58.53147125 137.43061829]
[-49.60745621 132.74163818]
[-39.64675522 131.00651550]
[-29.60385513 132.41003418]
[-20.44681168 136.83535767]
[-13.06392002 143.87344360]
[0.66469735 137.82984924]
[14.39331532 131.78625488]
[28.04490471 125.57061768]
[41.61730957 119.18392944]
[55.18971634 112.79724121]
[68.76212311 106.41055298]
[82.33452606 100.02386475]
[85.19814301 90.35767365]
[92.88246155 83.83181763]
[102.88483429 82.57165527]
[111.94766998 86.98759460]
[125.82382965 81.29090881]
[127.84019470 64.93334961]
[137.74765015 51.87944412]
[152.78717041 45.60897064]
[168.84805298 47.73401642]
[181.59133911 57.58568573]
[195.31994629 51.54208755]
[209.04856873 45.49849319]
[222.77719116 39.45489502]
[236.50579834 33.41130066]
[250.15739441 27.19566536]
[263.72979736 20.80897522]
[277.30221558 14.42228699]
[263.46020508 8.64311695]
[256.38455200 -4.58318758]
[259.25909424 -19.30517769]
[270.79034424 -28.89839172]
[285.78964233 -29.04616165]
[297.50765991 -19.68199730]
[300.67169189 -5.01949644]
[293.85726929 8.34432411]
[308.33801270 4.43170118]
[322.81872559 0.51907867]
[330.38766479 -4.79678392]
[337.71261597 -3.30502105]
[352.28707886 -6.85250616]
[366.86157227 -10.39999104]
[381.43603516 -13.94747543]
[396.01052856 -17.49496078]
[409.97036743 -27.11571503]
[423.07962036 -16.36471176]
[416.37774658 -0.79160833]
[399.55801392 -2.92048478]
[384.98352051 0.62700009]
[370.40905762 4.17448521]
[355.83456421 7.72197008]
[341.26010132 11.26945496]
[326.73135376 14.99980354]
[312.25064087 18.91242599]
[297.76989746 22.82504845]
[283.68890381 27.99469185]
[270.11648560 34.38138199]
[256.54409790 40.76807022]
[251.77824402 46.52716446]
[242.54940796 47.13991547]
[228.82078552 53.18351364]
[215.09216309 59.22710800]
[201.36354065 65.27070618]
[187.63493347 71.31430054]
[187.03512573 85.01790619]
[180.53720093 97.17319489]
[169.36842346 105.36264038]
[155.69129944 107.92938232]
[142.18499756 104.31222534]
[131.52052307 95.16706848]
[117.64435577 100.86375427]
[107.11753845 116.16818237]
[88.72121429 113.59626770]
[75.14881134 119.98295593]
[61.57640457 126.36965179]
[48.00399780 132.75633240]
[34.43159485 139.14302063]
[27.90989304 145.70156860]
[20.43691063 145.51487732]
[6.70829391 151.55847168]
[-7.02032375 157.60206604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[47 124]
[48 123]
[49 122]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[58 114]
[59 113]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
[69 101]
[70 100]
[71 99]
[79 98]
[80 97]
[81 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
