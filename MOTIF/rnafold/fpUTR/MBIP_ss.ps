%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCAAGCGACUAAAGCUGGAAGGGAGGGGGCGGGGUUGUGAGCAAAUCUUGGUGGUGGUGGUGGUGGGGCGGCCUGAGAAGAUAUC\
) } def
/len { sequence length } bind def

/coor [
[171.21153259 278.19454956]
[181.50314331 267.08770752]
[174.38845825 253.88237000]
[167.27377319 240.67703247]
[160.15907288 227.47167969]
[145.86228943 223.45451355]
[138.45887756 210.16377258]
[142.76937866 195.19522095]
[135.65469360 181.98988342]
[122.80640411 174.45524597]
[123.07238770 158.63627625]
[115.95769501 145.43092346]
[108.84300995 132.22557068]
[101.72831726 119.02023315]
[87.87936401 114.75962067]
[81.00680542 102.00367737]
[85.06633759 88.09445953]
[77.95164490 74.88911438]
[70.83695221 61.68376541]
[63.72226334 48.47841644]
[50.33458328 46.07311630]
[40.96503448 36.48486710]
[38.92972565 23.43247795]
[44.75971985 11.79720020]
[38.11549759 -1.65100837]
[31.47127342 -15.09921741]
[24.82705307 -28.54742622]
[10.98254299 -29.88880730]
[-0.26837641 -37.88047028]
[-6.00272465 -50.31312561]
[-4.79719639 -63.84191132]
[2.92023134 -74.88610077]
[-3.24524450 -88.56041718]
[-18.53518867 -90.01409149]
[-31.04052162 -98.93105316]
[-37.39736938 -112.91268921]
[-35.89577484 -128.19799805]
[-26.93965721 -140.67532349]
[-12.93816853 -146.98831177]
[2.34236240 -145.43881226]
[14.79154873 -136.44363403]
[21.06062126 -122.42241669]
[19.46323204 -107.14682007]
[10.42907143 -94.72589111]
[16.59454727 -81.05157471]
[32.67282104 -78.29531860]
[44.11238480 -66.43585205]
[46.33149338 -49.94211960]
[38.27526093 -35.19164658]
[44.91948318 -21.74343872]
[51.56370544 -8.29522991]
[58.20792770 5.15297842]
[74.27406311 9.76978874]
[82.28260803 24.82311821]
[76.92761230 41.36372757]
[84.04230499 54.56907654]
[91.15699005 67.77442169]
[98.27168274 80.97976685]
[112.12063599 85.24037933]
[118.99319458 97.99632263]
[114.93366241 111.90554047]
[122.04835510 125.11088562]
[129.16304016 138.31623840]
[136.27774048 151.52157593]
[149.63491821 160.00074768]
[148.86003113 174.87518311]
[155.97473145 188.08053589]
[170.84640503 192.71423340]
[177.87359619 206.20768738]
[173.36442566 220.35699463]
[180.47911072 233.56233215]
[187.59381104 246.76768494]
[194.70849609 259.97302246]
[209.64506531 257.48757935]
[224.57894897 259.98916626]
[237.89022827 267.20642090]
[248.13497925 278.35647583]
[254.20195007 292.22985840]
[255.43302917 307.32165527]
[251.69467163 321.99490356]
[243.39241028 334.65786743]
[231.42678833 343.93701172]
[217.09574890 348.82580566]
[201.95382690 348.79394531]
[187.64350891 343.84484863]
[175.71705627 334.51541138]
[167.46817017 321.81759644]
[163.79162598 307.12878418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[8 67]
[9 66]
[11 64]
[12 63]
[13 62]
[14 61]
[17 58]
[18 57]
[19 56]
[20 55]
[24 52]
[25 51]
[26 50]
[27 49]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
