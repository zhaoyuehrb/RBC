%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAGGGCGCAAGCGCCGCCUCCGCCGCGUGUCCGGGGUCAGCCCGAGCCCGUGCGGGCCCUUUAAGGGCCGGGGGCGUGUAGCGGGCCCGCCCCCUCCCCGCGGCGCCCGCAGUCCGUUAAGUGCGAGCCCCGGCGCAGGGGCCGGAUCUGGCCGGGGGCCGGCGGCGGUGUGGGAGCGGCGCGUC\
) } def
/len { sequence length } bind def

/coor [
[40.34770584 851.94293213]
[25.27743530 854.61602783]
[10.69463253 849.96838379]
[-0.04968473 839.06805420]
[-4.48654938 824.41973877]
[-1.59640217 809.38958740]
[7.95662165 797.43139648]
[21.97730637 791.29302979]
[22.97390366 776.32617188]
[23.97049904 761.35931396]
[24.96709633 746.39245605]
[17.23435974 737.07482910]
[17.95414352 724.58612061]
[27.28519440 715.66345215]
[28.53042221 700.71520996]
[20.19933891 685.27899170]
[30.79951096 670.23254395]
[31.79610634 655.26568604]
[32.79270172 640.29882812]
[33.78929901 625.33197021]
[26.05656433 616.01428223]
[26.77634811 603.52557373]
[36.10739899 594.60290527]
[37.35262680 579.65466309]
[38.59785461 564.70648193]
[39.84308624 549.75823975]
[41.08831406 534.80999756]
[42.33354187 519.86175537]
[43.57877350 504.91357422]
[33.79129028 493.74481201]
[34.84118652 478.56744385]
[46.62235641 468.37716675]
[47.86758423 453.42895508]
[49.11281204 438.48071289]
[50.35804367 423.53250122]
[40.57056427 412.36376953]
[41.62046051 397.18640137]
[53.40162659 386.99612427]
[54.64685440 372.04788208]
[55.89208603 357.09967041]
[57.13731384 342.15142822]
[58.38254166 327.20321655]
[59.62777328 312.25497437]
[51.29668808 296.81875610]
[61.89685822 281.77230835]
[62.89345551 266.80545044]
[63.89005280 251.83859253]
[61.19230270 244.94256592]
[65.02963257 236.63189697]
[66.27486420 221.68367004]
[67.52009583 206.73544312]
[68.76531982 191.78721619]
[62.11128616 178.46156311]
[70.96750641 165.35134888]
[72.21273804 150.40312195]
[73.45796204 135.45489502]
[74.70319366 120.50667572]
[68.19493866 106.99214172]
[55.73155594 98.64562988]
[43.26817703 90.29912567]
[30.80479813 81.95262146]
[18.34141731 73.60611725]
[5.87803793 65.25960541]
[-10.64695740 61.47003555]
[-11.58005714 44.54178619]
[4.42832327 38.95894623]
[14.22454453 52.79623032]
[26.68792343 61.14273453]
[39.15130234 69.48924255]
[51.61468506 77.83574677]
[64.07806396 86.18225098]
[76.54144287 94.52876282]
[85.89624786 83.87213898]
[98.21236420 81.32381439]
[102.87132263 67.06568909]
[107.53028870 52.80756760]
[112.18924713 38.54944229]
[116.84820557 24.29131889]
[113.77988434 8.77049637]
[125.08756256 -0.92411870]
[129.74652100 -15.18224239]
[134.40548706 -29.44036484]
[139.06445312 -43.69849014]
[142.40226746 -58.32240677]
[144.39105225 -73.18997955]
[146.37983704 -88.05755615]
[148.36862183 -102.92512512]
[150.35742188 -117.79270172]
[152.34620667 -132.66027832]
[154.21136475 -147.54385376]
[155.95275879 -162.44242859]
[157.69415283 -177.34100342]
[159.43554688 -192.23957825]
[147.44827271 -201.95086670]
[142.63595581 -216.60845947]
[146.53417969 -231.53518677]
[157.89904785 -241.96798706]
[173.10406494 -244.57778931]
[187.29736328 -238.53181458]
[195.94990540 -225.75932312]
[196.30072021 -210.33593750]
[188.23783875 -197.18324280]
[174.33412170 -190.49818420]
[172.59272766 -175.59960938]
[170.85133362 -160.70103455]
[169.10993958 -145.80245972]
[171.46058655 -138.78054810]
[167.21377563 -130.67147827]
[165.22499084 -115.80390930]
[163.23620605 -100.93634033]
[161.24740601 -86.06876373]
[159.25862122 -71.20119476]
[157.26983643 -56.33361816]
[167.44453430 -67.35520935]
[181.54096985 -72.48265076]
[196.41900635 -70.57376862]
[208.76445007 -62.05377960]
[215.82720947 -48.82058716]
[216.03401184 -33.82201385]
[209.33877563 -20.39912796]
[197.23292542 -11.54200649]
[182.41317749 -9.22365475]
[168.18074036 -13.96050644]
[157.70602417 -24.69738388]
[153.32257080 -39.03952789]
[148.66360474 -24.78140450]
[144.00465393 -10.52328014]
[139.34568787 3.73484278]
[142.74725342 18.23582840]
[131.10633850 28.95028114]
[126.44737244 43.20840454]
[121.78840637 57.46652603]
[117.12944794 71.72464752]
[112.47048187 85.98277283]
[120.41489410 102.23688507]
[110.86909485 119.48628235]
[89.65142059 121.75189972]
[88.40618896 136.70011902]
[87.16095734 151.64834595]
[85.91573334 166.59657288]
[92.48069763 180.99142456]
[83.71354675 193.03245544]
[82.46831512 207.98068237]
[81.22309113 222.92889404]
[79.97785950 237.87712097]
[78.85691071 252.83517456]
[77.86031342 267.80203247]
[76.86371613 282.76889038]
[84.76069641 292.98260498]
[83.61108398 305.43914795]
[74.57599640 313.50021362]
[73.33076477 328.44845581]
[72.08554077 343.39666748]
[70.84030914 358.34487915]
[69.59507751 373.29312134]
[68.34985352 388.24133301]
[78.28257751 400.24044800]
[76.80680084 415.38232422]
[65.30626678 424.77774048]
[64.06103516 439.72595215]
[62.81580734 454.67416382]
[61.57057953 469.62240601]
[71.50331116 481.62152100]
[70.02752686 496.76339722]
[58.52699661 506.15878296]
[57.28176880 521.10699463]
[56.03653717 536.05523682]
[54.79130936 551.00347900]
[53.54608154 565.95166016]
[52.30084991 580.89990234]
[51.05562210 595.84814453]
[59.29483795 612.30639648]
[48.75615692 626.32855225]
[47.75955963 641.29541016]
[46.76296234 656.26226807]
[45.76636887 671.22912598]
[53.66334534 681.44281006]
[52.51373672 693.89935303]
[43.47864532 701.96044922]
[42.23341751 716.90869141]
[50.47263718 733.36694336]
[39.93395233 747.38909912]
[38.93735504 762.35595703]
[37.94076157 777.32281494]
[36.94416428 792.28967285]
[50.02721405 800.23272705]
[57.91041183 813.35192871]
[58.78225708 828.63256836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 185]
[9 184]
[10 183]
[11 182]
[14 180]
[15 179]
[17 176]
[18 175]
[19 174]
[20 173]
[23 171]
[24 170]
[25 169]
[26 168]
[27 167]
[28 166]
[29 165]
[32 162]
[33 161]
[34 160]
[35 159]
[38 156]
[39 155]
[40 154]
[41 153]
[42 152]
[43 151]
[45 148]
[46 147]
[47 146]
[49 145]
[50 144]
[51 143]
[52 142]
[54 140]
[55 139]
[56 138]
[57 137]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[74 134]
[75 133]
[76 132]
[77 131]
[78 130]
[80 128]
[81 127]
[82 126]
[83 125]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 106]
[91 105]
[92 104]
[93 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
