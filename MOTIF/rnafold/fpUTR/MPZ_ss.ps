%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAGUUCCUGGUCCCCCACUUUCUCAACCCCACAGAUGCUCCGGGCCCCUGCCCCUGCCCCAGCU\
) } def
/len { sequence length } bind def

/coor [
[72.77387238 111.37049866]
[57.91771317 113.44284821]
[43.06155777 115.51519012]
[30.46267891 125.08487701]
[16.78849792 119.18013000]
[1.93234205 121.25247192]
[-3.90698075 135.38928223]
[-15.95874786 144.64410400]
[-30.92531967 146.61085510]
[-44.77417374 140.86062622]
[-53.82440567 129.03021240]
[-68.68056488 131.10255432]
[-83.53672028 133.17489624]
[-96.13005066 143.67918396]
[-111.42831421 137.77195740]
[-113.69395447 121.53006744]
[-100.59629059 111.66178131]
[-85.60906219 118.31874084]
[-70.75290680 116.24639893]
[-55.89675140 114.17404938]
[-50.42955780 100.31853485]
[-38.68299866 90.99789429]
[-23.74953842 88.79376984]
[-9.62513733 94.39717102]
[-0.14000325 106.39631653]
[14.71615314 104.32396698]
[26.25241852 94.90251160]
[40.98921204 100.65903473]
[55.84536743 98.58669281]
[70.70152283 96.51434326]
[72.98171997 88.14407349]
[77.59769440 80.79877472]
[84.15038300 75.11345673]
[92.07330322 71.57962036]
[100.68150330 70.50277710]
[109.23078918 71.97602844]
[116.98204803 75.87200165]
[123.26518250 81.85388184]
[127.53700256 89.40452576]
[129.42819214 97.87117004]
[144.17279053 100.62741089]
[158.91738892 103.38365173]
[170.19502258 96.67779541]
[182.59126282 99.50823212]
[189.39183044 109.76905060]
[203.99340820 113.20330811]
[218.59497070 116.63756561]
[233.19654846 120.07182312]
[243.65872192 108.82733917]
[258.34619141 104.33576965]
[273.30807495 107.80531311]
[284.51968384 118.30268860]
[288.96520996 133.00415039]
[285.44879150 147.95507812]
[274.91632080 159.13375854]
[260.20098877 163.53315735]
[245.26115417 159.96989441]
[234.11555481 149.40243530]
[229.76228333 134.67340088]
[215.16072083 131.23913574]
[200.55914307 127.80487823]
[185.95758057 124.37062073]
[169.64617920 130.43003845]
[156.16114807 118.12825012]
[141.41654968 115.37200928]
[126.67195129 112.61576843]
[110.41949463 127.60406494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[5 26]
[6 25]
[11 20]
[12 19]
[13 18]
[40 66]
[41 65]
[42 64]
[45 62]
[46 61]
[47 60]
[48 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
