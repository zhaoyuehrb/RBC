%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAUACUGAGUGAGCCCUGAGAAGCAGUCUCAGAUCCUGACGGUGCAGCAGCCCGCAGCCUCAGCCAGGGAGUCCCAGCCGCUUUCA\
) } def
/len { sequence length } bind def

/coor [
[87.80208588 279.78045654]
[73.89374542 285.98352051]
[58.66482925 285.98675537]
[44.75384521 279.78964233]
[34.57094955 268.46585083]
[29.88039398 253.97727966]
[31.49484634 238.83416748]
[39.13459015 225.66017151]
[51.47599792 216.73776245]
[66.38084412 213.61277771]
[69.49951935 198.94056702]
[72.61819458 184.26835632]
[75.73686981 169.59613037]
[78.85554504 154.92391968]
[77.12879181 147.56710815]
[82.34758759 139.79821777]
[85.97641754 125.24378204]
[74.74317932 114.00008392]
[71.16069031 98.51551056]
[56.89484406 93.88024902]
[42.62899399 89.24499512]
[28.36314774 84.60974121]
[14.09729958 79.97448730]
[-0.16854833 75.33923340]
[-15.05826473 81.31216431]
[-28.94000626 73.26997375]
[-31.16488838 57.38194275]
[-20.02617264 45.83601379]
[-4.06852722 47.48922729]
[4.46670675 61.07338333]
[18.73255348 65.70864105]
[32.99840164 70.34389496]
[47.26425171 74.97914886]
[61.53009796 79.61440277]
[75.79594421 84.24965668]
[82.45160675 74.93429565]
[92.70534515 68.51555634]
[105.26983643 66.37148285]
[118.34100342 69.30240631]
[122.97625732 55.03655624]
[127.61151886 40.77070618]
[127.30261230 31.41677094]
[132.66549683 26.09288216]
[137.79579163 11.99749184]
[142.92610168 -2.09789705]
[142.94383240 -11.45691681]
[148.48925781 -16.59040070]
[154.10835266 -30.49815750]
[151.29145813 -46.65356445]
[164.04580688 -56.96173096]
[179.25083923 -50.81850433]
[181.26490784 -34.54350281]
[168.01611328 -24.87905884]
[162.39700317 -10.97130108]
[157.02148438 3.03240514]
[151.89118958 17.12779427]
[146.76087952 31.22318459]
[141.87736511 45.40596390]
[137.24211121 59.67181015]
[132.60685730 73.93766022]
[143.51408386 63.64045715]
[152.19348145 51.40657043]
[166.29862976 46.30314636]
[180.79666138 50.15114212]
[190.51454163 61.57754898]
[191.98483276 76.50531769]
[184.68292236 89.60807037]
[171.21420288 96.21061707]
[156.38229370 93.95604706]
[141.39830017 94.64901733]
[154.88021851 101.22458649]
[168.36212158 107.80014801]
[185.24877930 109.30915833]
[188.47344971 125.95361328]
[173.37213135 133.65989685]
[161.78656006 121.28205872]
[148.30464172 114.70649719]
[134.82273865 108.13092804]
[120.31903839 125.13202667]
[100.53085327 128.87260437]
[96.90202332 143.42704773]
[93.52775574 158.04260254]
[90.40908051 172.71481323]
[87.29040527 187.38702393]
[84.17173004 202.05923462]
[81.05305481 216.73146057]
[93.39826202 225.64860535]
[101.04362488 238.81935120]
[102.66453552 253.96176147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[16 81]
[17 80]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[39 60]
[40 59]
[41 58]
[43 57]
[44 56]
[45 55]
[47 54]
[48 53]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
