%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUACUCGGCGCCCGCGCCUCGGGCCGUCGGGAGCGGAGCCUCCUCGGGACCAGGACUUCAGGGCCACAGGUGCUGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[63.48822403 118.69871521]
[48.70528412 121.24128723]
[33.92234421 123.78385925]
[28.27425003 127.95759583]
[22.28555870 128.38346863]
[17.92848206 125.91516113]
[2.99558783 127.33243561]
[-11.93730640 128.74971008]
[-26.87020111 130.16699219]
[-41.80309296 131.58425903]
[-56.73598862 133.00154114]
[-71.66888428 134.41882324]
[-86.57228088 136.11843872]
[-101.44084930 138.09977722]
[-116.30941772 140.08113098]
[-131.17797852 142.06246948]
[-142.02717590 153.88085938]
[-158.02088928 152.62356567]
[-166.89010620 139.25506592]
[-161.83111572 124.03054810]
[-146.72476196 118.62893677]
[-133.15933228 127.19390106]
[-118.29075623 125.21255493]
[-103.42219543 123.23121643]
[-88.55362701 121.24987030]
[-82.18129730 117.14244080]
[-73.08615875 119.48592377]
[-58.15326691 118.06864929]
[-43.22037125 116.65137482]
[-28.28747749 115.23409271]
[-13.35458374 113.81681824]
[1.57831073 112.39954376]
[16.51120567 110.98226166]
[31.37977219 109.00092316]
[46.16271210 106.45834351]
[60.94565201 103.91577148]
[75.49396515 100.26246643]
[89.72431183 95.51934814]
[103.86235809 90.50778961]
[117.90302277 85.22956848]
[131.94369507 79.95135498]
[138.07925415 68.42050934]
[150.07850647 64.39218140]
[161.19520569 69.54576111]
[175.42556763 64.80264282]
[189.65591431 60.05953217]
[196.77285767 46.20359802]
[211.27201843 41.59612274]
[224.43766785 48.46643066]
[238.66802979 43.72331238]
[249.31352234 32.01929474]
[263.83435059 35.33513260]
[278.06469727 30.59201813]
[281.77383423 15.61717510]
[293.00582886 5.04146671]
[308.17660522 2.23956275]
[322.44525146 8.10554123]
[331.25866699 20.76758766]
[331.80450439 36.18529129]
[323.90863037 49.43891907]
[310.09057617 56.29928589]
[294.75961304 54.57727051]
[282.80780029 44.82236862]
[268.57745361 49.56548309]
[258.94982910 60.93024445]
[243.41113281 57.95366287]
[229.18078613 62.69677734]
[222.76988220 76.09214783]
[208.40585327 81.10505676]
[194.39903259 74.28987885]
[180.16867065 79.03299713]
[165.93832397 83.77610779]
[155.17875671 97.50238037]
[137.22190857 93.99202728]
[123.18124390 99.27024078]
[109.14057159 104.54845428]
[103.12870789 110.24271393]
[94.46743011 109.74970245]
[80.23707581 114.49281311]
[77.13610840 118.33649445]
[73.30037689 120.59270477]
[69.38303375 121.23387146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 25]
[14 24]
[15 23]
[16 22]
[37 79]
[38 78]
[39 76]
[40 75]
[41 74]
[44 72]
[45 71]
[46 70]
[49 67]
[50 66]
[52 64]
[53 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
