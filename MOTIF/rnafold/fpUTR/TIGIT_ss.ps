%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCCUAUCUGCAGUCGGCUACUUUCAGUGGCAGAAGAGGCCACAUCUGCUUCCUGUAGGCCCUCUGGGCAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[67.12326050 245.29652405]
[59.99996185 232.09580994]
[57.93409729 217.23875427]
[61.18570328 202.59542847]
[69.34549713 190.00901794]
[81.38638306 181.06379700]
[95.79276276 176.88571167]
[110.75126648 178.00068665]
[124.37715912 184.26704407]
[118.99211884 170.26699829]
[113.60707855 156.26693726]
[108.22203827 142.26689148]
[102.83699799 128.26684570]
[97.45195770 114.26679993]
[87.39984894 103.13328552]
[74.02088928 96.35070801]
[58.21349716 97.01179504]
[50.36024094 84.35574341]
[36.98128128 77.57316589]
[23.60231781 70.79058838]
[10.22335529 64.00801086]
[-3.15560651 57.22542953]
[-16.53456879 50.44285202]
[-33.39596558 48.67375946]
[-36.36370468 31.98157883]
[-21.14541435 24.50896263]
[-9.75199032 37.06388855]
[3.62697220 43.84646988]
[17.00593376 50.62904739]
[30.38489723 57.41162491]
[43.76385880 64.19420624]
[57.14282227 70.97678375]
[71.99325562 69.83055878]
[80.80346680 82.97174835]
[94.18242645 89.75432587]
[96.63294220 87.73313904]
[99.73556519 86.34351349]
[107.32372284 73.40442657]
[114.91188812 60.46534729]
[122.50004578 47.52626801]
[130.08821106 34.58718491]
[124.66979980 19.91834641]
[129.99664307 5.21600723]
[143.55355835 -2.57783723]
[158.93939209 0.21682899]
[168.88941956 12.28044987]
[168.70553589 27.91695213]
[158.47457886 39.74325943]
[143.02728271 42.17534637]
[135.43913269 55.11442947]
[127.85096741 68.05351257]
[120.26280975 80.99259186]
[112.67464447 93.93167114]
[111.45200348 108.88175964]
[116.83704376 122.88180542]
[122.22208405 136.88185120]
[127.60712433 150.88189697]
[132.99217224 164.88195801]
[138.37721252 178.88200378]
[147.72955322 190.60946655]
[160.18031311 198.97480774]
[172.63105774 207.34013367]
[185.08181763 215.70545959]
[201.60105896 219.52000427]
[202.50859070 236.44964600]
[186.49179077 242.00828552]
[176.71649170 228.15621948]
[164.26573181 219.79087830]
[151.81497192 211.42555237]
[139.36422729 203.06022644]
[142.44149780 217.74118042]
[140.19911194 232.57263184]
[132.91935730 245.68769836]
[121.51853943 255.43557739]
[107.43168640 260.58929443]
[92.43195343 260.50009155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 35]
[16 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
