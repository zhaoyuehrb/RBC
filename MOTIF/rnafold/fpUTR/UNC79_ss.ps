%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGUAUGCACUCUUUUCCUCGCAACAUCGCUGGCGGAGCGAGGGAGCUCACACGACACAGAUUUUGGGGCAAAGCCUUUCCAACUGGACAGCACC\
) } def
/len { sequence length } bind def

/coor [
[101.45435333 121.10924530]
[94.00056458 121.94053650]
[85.49466705 134.29568481]
[76.98876953 146.65083313]
[68.48287201 159.00598145]
[59.97697067 171.36112976]
[51.47107315 183.71627808]
[50.71153259 200.09782410]
[36.02261734 207.38945007]
[22.51502228 198.09014893]
[24.08420563 181.76625061]
[39.11592484 175.21037292]
[47.62182236 162.85522461]
[56.12771988 150.50007629]
[64.63362122 138.14492798]
[73.13951874 125.78978729]
[81.64541626 113.43463135]
[78.34075928 98.80318451]
[65.35037231 91.30318451]
[52.35999298 83.80318451]
[39.36961365 76.30318451]
[26.37923241 68.80318451]
[13.38885117 61.30318832]
[0.39847010 53.80318832]
[-12.59191132 46.30318832]
[-21.59879875 50.05482483]
[-31.17268562 49.13940048]
[-39.07292557 43.90290070]
[-43.51262665 35.68705368]
[-43.56220627 26.48793221]
[-55.78084564 17.78707886]
[-67.99948883 9.08622551]
[-84.36692047 8.06687164]
[-91.42457581 -6.73588467]
[-81.91213226 -20.09423637]
[-65.61518860 -18.26625633]
[-59.29863358 -3.13241363]
[-47.07999420 5.56843996]
[-34.86135483 14.26929379]
[-14.32802677 14.11585808]
[-5.09191084 33.31280899]
[7.89846992 40.81280899]
[20.88885117 48.31280899]
[33.87923050 55.81280899]
[46.86961365 63.31280899]
[59.85999298 70.81280518]
[72.85037231 78.31280518]
[85.84075928 85.81280518]
[100.65233612 83.44278717]
[110.65387726 72.26381683]
[120.65541077 61.08485413]
[130.65695190 49.90588760]
[134.13504028 41.25561523]
[141.15754700 38.53736115]
[151.50872803 27.68134880]
[155.43218994 12.35434628]
[169.81475830 8.48253536]
[180.16593933 -2.37347531]
[179.53932190 -18.16533661]
[190.32398987 -29.71810722]
[206.12159729 -30.17773056]
[217.55969238 -19.27152252]
[217.85227966 -3.46994209]
[206.82574463 7.85221338]
[191.02195740 7.97770977]
[180.67077637 18.83372116]
[177.48770142 33.38422775]
[162.36473083 38.03253555]
[152.01354980 48.88854599]
[141.83590698 59.90742111]
[131.83438110 71.08638763]
[121.83283997 82.26535797]
[111.83130646 93.44432068]
[117.86852264 93.98874664]
[123.93196869 96.55268860]
[129.48365784 101.13266754]
[133.99336243 107.59651184]
[145.01223755 117.77415466]
[158.43154907 115.69863129]
[170.39503479 121.69728088]
[176.57554626 133.34674072]
[174.88534546 146.22804260]
[185.57575989 156.75016785]
[196.26617432 167.27229309]
[212.26695251 170.86491394]
[216.89709473 186.59686279]
[205.39350891 198.28443909]
[189.59008789 193.90447998]
[185.74404907 177.96270752]
[175.05363464 167.44058228]
[164.36322021 156.91845703]
[147.65333557 157.82058716]
[135.15489197 146.19488525]
[134.83459473 128.79302979]
[123.81571960 118.61538696]
[116.36193085 119.44667053]
[122.54980469 133.11087036]
[111.46652222 143.21833801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[30 39]
[31 38]
[32 37]
[49 73]
[50 72]
[51 71]
[52 70]
[54 69]
[55 68]
[57 66]
[58 65]
[77 95]
[78 94]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
