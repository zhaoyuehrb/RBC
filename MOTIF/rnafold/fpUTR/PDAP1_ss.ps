%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCUUGCGGCCACUGCGGCCACUGAAGCGGCGGCGGCGGCUGGCCCAGGAGGAAGAAGUCGAGCCCAAGCUAUUUCCGGUUCCGGUGUCAGUUCGAGGCGCCGCCGCCGCCGCCGCAGCCGCCGGAGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[77.15014648 559.98162842]
[76.10379791 545.01818848]
[75.05744934 530.05474854]
[66.45118713 517.89819336]
[73.20698547 503.59188843]
[72.16063690 488.62844849]
[63.55437851 476.47189331]
[70.31018066 462.16561890]
[69.26383209 447.20214844]
[68.21748352 432.23870850]
[67.17113495 417.27523804]
[66.12479401 402.31176758]
[63.62917709 399.69943237]
[62.32254410 395.71350098]
[62.85234833 390.94909668]
[65.56475830 386.27456665]
[65.56475830 371.27456665]
[65.56475830 356.27456665]
[65.56475830 341.27456665]
[65.56475830 326.27456665]
[65.56475830 311.27456665]
[59.64392090 308.02297974]
[55.02022552 303.02740479]
[52.19255829 296.77850342]
[51.48119736 289.90432739]
[52.99187469 283.10733032]
[56.60156250 277.09249878]
[61.96781921 272.49432373]
[68.56107330 269.80984497]
[70.64867401 254.95582581]
[72.73626709 240.10180664]
[74.82386780 225.24777222]
[76.91146088 210.39375305]
[78.99906158 195.53973389]
[81.08665466 180.68571472]
[83.17425537 165.83169556]
[85.26184845 150.97767639]
[87.34944153 136.12365723]
[89.43704224 121.26963043]
[91.52463531 106.41561127]
[92.57098389 91.45214844]
[92.57098389 76.45214844]
[92.57098389 61.45214844]
[92.57098389 46.45214844]
[92.57098389 31.45215034]
[92.57098389 16.45215034]
[92.39645386 1.45316565]
[92.04742432 -13.54277325]
[88.69402313 -22.14021111]
[91.86882782 -28.89079285]
[91.86882782 -43.89079285]
[91.86882782 -58.89079285]
[91.86882782 -73.89079285]
[79.48385620 -83.05149841]
[74.92110443 -97.57852936]
[79.73041534 -111.83807373]
[91.86882782 -120.42858124]
[91.86882782 -135.42857361]
[91.86882782 -150.42857361]
[91.86882782 -165.42857361]
[91.86882782 -180.42857361]
[88.83203888 -186.46821594]
[89.30063629 -192.24813843]
[92.23410797 -196.12239075]
[92.93199158 -211.10615540]
[93.62986755 -226.08990479]
[85.62335968 -240.40171814]
[94.24581909 -254.35108948]
[110.62721252 -253.58811951]
[117.91575623 -238.89767456]
[108.61362457 -225.39202881]
[107.91574860 -210.40827942]
[107.21786499 -195.42451477]
[106.86882782 -180.42857361]
[106.86882782 -165.42857361]
[106.86882782 -150.42857361]
[106.86882782 -135.42857361]
[106.86882782 -120.42858124]
[119.00724792 -111.83807373]
[123.81655884 -97.57852936]
[119.25380707 -83.05149841]
[106.86882782 -73.89079285]
[106.86882782 -58.89079285]
[106.86882782 -43.89079285]
[106.86882782 -28.89079285]
[107.04335785 -13.89180756]
[107.39239502 1.10413122]
[110.72341919 7.77901030]
[107.57098389 16.45215034]
[107.57098389 31.45215034]
[107.57098389 46.45214844]
[107.57098389 61.45214844]
[107.57098389 76.45214844]
[107.57098389 91.45214844]
[119.30406189 82.10683441]
[134.23139954 83.58145905]
[143.90914917 95.04187775]
[142.86294556 110.00535583]
[131.68460083 120.00757599]
[116.69729614 119.39066315]
[106.37866211 108.50320435]
[104.29106140 123.35723114]
[102.20346832 138.21124268]
[100.11586761 153.06527710]
[98.02827454 167.91929626]
[95.94067383 182.77331543]
[93.85308075 197.62733459]
[91.76548004 212.48135376]
[89.67788696 227.33537292]
[87.59029388 242.18939209]
[85.50269318 257.04342651]
[83.41510010 271.89743042]
[94.68180847 292.92520142]
[80.56475830 311.27456665]
[80.56475830 326.27456665]
[80.56475830 341.27456665]
[80.56475830 356.27456665]
[80.56475830 371.27456665]
[80.56475830 386.27456665]
[81.08824921 401.26541138]
[82.13459778 416.22888184]
[83.18094635 431.19235229]
[84.22729492 446.15582275]
[85.27364349 461.11926270]
[93.95474243 474.34609985]
[87.12409973 487.58209229]
[88.17044830 502.54556274]
[96.85155487 515.77239990]
[90.02091217 529.00836182]
[91.06725311 543.97186279]
[92.11360168 558.93530273]
[101.72747803 572.22082520]
[94.78273773 587.07690430]
[78.42353821 588.22082520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[5 127]
[6 126]
[8 124]
[9 123]
[10 122]
[11 121]
[12 120]
[16 119]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[39 102]
[40 101]
[41 94]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[47 87]
[48 86]
[50 85]
[51 84]
[52 83]
[53 82]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
