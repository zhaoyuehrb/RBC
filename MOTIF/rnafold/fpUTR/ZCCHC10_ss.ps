%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGGAAGCCCCGCCCUUCCGAGGAGUUUCCCAAAACCCUGCGCGGCCGGCUUUGACCGCGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[151.38139343 122.41693878]
[136.95401001 118.31198883]
[122.52661896 114.20704651]
[108.09923553 110.10210419]
[93.42224121 107.00602722]
[78.56607819 104.93367767]
[63.70992661 102.86133575]
[48.85376740 100.78899384]
[33.99761200 98.71664429]
[19.14145470 96.64430237]
[4.24139547 94.91564941]
[-10.69461727 93.53162384]
[-25.65861320 92.49296570]
[-40.64260864 91.80020905]
[-52.15179825 102.63137054]
[-67.94606018 102.06842804]
[-78.65493011 90.44536591]
[-77.92503357 74.65794373]
[-66.18939972 64.07255554]
[-50.41057587 64.96932220]
[-39.94985580 76.81621552]
[-24.96586037 77.50896454]
[-17.90085983 74.57070160]
[-9.31059170 78.59561157]
[5.62542105 79.97963715]
[12.81858349 77.37079620]
[21.21380043 81.78813934]
[36.06995773 83.86048889]
[50.92611313 85.93283081]
[65.78227234 88.00518036]
[80.63842773 90.07752228]
[95.49458313 92.14987183]
[99.16663361 90.00933838]
[103.81906128 89.68470764]
[108.52574158 91.59268188]
[112.20418549 95.67472076]
[126.63156891 99.77966309]
[141.05894470 103.88460541]
[155.48634338 107.98955536]
[172.00846863 97.17080688]
[191.00363159 101.39027405]
[201.08534241 117.69187927]
[215.94149780 119.76422119]
[230.79766846 121.83657074]
[245.65382385 123.90891266]
[260.50997925 125.98125458]
[275.36611938 128.05360413]
[290.10293579 122.29708099]
[301.63919067 131.71853638]
[316.49533081 133.79087830]
[331.48257446 127.13392639]
[344.58023071 137.00221252]
[342.31460571 153.24409485]
[327.01632690 159.15132141]
[314.42300415 148.64703369]
[299.56683350 146.57469177]
[285.89266968 152.47944641]
[273.29379272 142.90975952]
[258.43762207 140.83741760]
[243.58146667 138.76507568]
[228.72531128 136.69271851]
[213.86915588 134.62037659]
[199.01300049 132.54803467]
[192.39631653 141.14735413]
[182.64689636 146.09490967]
[171.63452148 146.36196899]
[161.50582886 141.82528687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[11 25]
[12 24]
[13 22]
[14 21]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
