%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCCUGAAGCGCGUGUCUGCUGUCUGUGCCAGUGCUCCUGCCGGGUCCCCUCAGGUGUGUCGUUUCCGUCGCGCUUCCGCCCUCUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[98.01210022 122.80081177]
[87.16941071 118.95269775]
[79.56902313 110.31522369]
[64.70285797 112.31452179]
[49.83669662 114.31382751]
[34.97053528 116.31313324]
[20.13985634 118.56056976]
[5.34880209 121.05551147]
[-9.44225216 123.55045319]
[-15.03920841 127.65806580]
[-20.96430397 128.09364319]
[-25.30191803 125.68336487]
[-40.22658539 127.18480682]
[-55.15125275 128.68623352]
[-70.07592010 130.18766785]
[-85.00058746 131.68910217]
[-90.66194916 145.90907288]
[-102.29072571 155.86045837]
[-117.21472168 159.25651550]
[-132.00450134 155.31681824]
[-143.26147461 144.94673157]
[-148.39889526 130.52917480]
[-146.23619080 115.37724304]
[-137.27035522 102.97270203]
[-123.56167603 96.16605377]
[-108.26029205 96.52139282]
[-94.88236237 103.95707703]
[-86.50202179 116.76444244]
[-71.57735443 115.26300812]
[-56.65268707 113.76157379]
[-41.72801971 112.26013947]
[-26.80335426 110.75869751]
[-11.93719196 108.75939941]
[2.85386181 106.26445770]
[17.64491653 103.76951599]
[23.84136963 99.46593475]
[32.97122955 101.44696808]
[47.83739090 99.44766998]
[62.70355606 97.44836426]
[77.56971741 95.44905853]
[87.68248749 80.70991516]
[105.30834961 77.73680115]
[119.69637299 88.34317780]
[134.39579773 85.35538483]
[149.09523010 82.36759949]
[163.79464722 79.37980652]
[178.49407959 76.39201355]
[193.19349670 73.40422821]
[195.48794556 58.43890381]
[202.75042725 45.18642044]
[214.08747864 35.23698425]
[228.11808777 29.77692986]
[243.14183044 29.44725800]
[257.34500122 34.26846313]
[269.01962280 43.64038086]
[276.76867676 56.41682816]
[291.46807861 53.42903900]
[306.16751099 50.44124985]
[320.86694336 47.45345688]
[335.56637573 44.46566772]
[350.26577759 41.47787857]
[364.96520996 38.49008942]
[376.94769287 28.15902901]
[390.96109009 33.20619202]
[405.66052246 30.21840477]
[417.57962036 18.95488167]
[433.21414185 23.90400505]
[436.48062134 39.97454071]
[424.01879883 50.63449860]
[408.64831543 44.91783142]
[393.94888306 47.90562057]
[383.01782227 58.02297211]
[367.95300293 53.18951416]
[353.25357056 56.17730331]
[338.55416870 59.16509247]
[323.85473633 62.15288544]
[309.15530396 65.14067078]
[294.45587158 68.12846375]
[279.75643921 71.11625671]
[277.61007690 85.90402985]
[270.52056885 99.08992767]
[259.32653809 109.07334137]
[245.36624146 114.63493347]
[230.31741333 115.08553314]
[215.99580383 110.35145569]
[204.13597107 100.98574829]
[196.18128967 88.10365295]
[181.48185730 91.09144592]
[166.78244019 94.07923126]
[152.08300781 97.06702423]
[137.38359070 100.05480957]
[122.68416595 103.04260254]
[118.33761597 113.69527435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 35]
[8 34]
[9 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
