%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGAAUUCGGGCACCAGGAGAAGGAAGCCAACAGGAUCCGACCCGGUGUUUUGUGACAAAGGCAAGACCCCCAGGUCUACUUAGAGCAAAGUUAGUAGAGGAGGCAGCUAGGCGUGGCUCUCAUUCCUUCCCACAGA\
) } def
/len { sequence length } bind def

/coor [
[85.09886932 344.37216187]
[76.55756378 356.78756714]
[65.38288879 366.89813232]
[52.17748642 374.15856934]
[37.65350342 378.17736816]
[22.59419632 378.73773193]
[7.81169987 375.80950928]
[-5.89678669 369.55059814]
[-17.79198074 360.29852295]
[-27.23239136 348.55221558]
[-33.70890808 334.94519043]
[-36.87225723 320.21121216]
[-36.55184937 305.14489746]
[-32.76496124 290.55871582]
[-25.71581078 277.23931885]
[-15.78455639 265.90499878]
[-3.50677514 257.16699219]
[10.45540810 251.49653625]
[25.34902954 249.19941711]
[40.37089539 250.39952087]
[44.97435379 236.12338257]
[44.02577209 228.73233032]
[49.84266663 221.58248901]
[54.76304245 207.41246033]
[59.68341446 193.24241638]
[64.60379028 179.07238770]
[69.52416229 164.90234375]
[74.44453430 150.73231506]
[79.36490631 136.56227112]
[66.20040894 124.90370941]
[58.96560287 108.87612152]
[43.97397995 109.37734222]
[30.34744835 118.50147247]
[15.75389862 111.02081299]
[15.20592117 94.63082123]
[29.26722908 86.19212341]
[43.47275543 94.38571930]
[58.46437836 93.88449860]
[60.08199310 86.99384308]
[62.83418274 80.47285461]
[66.64272308 74.50688171]
[71.39935303 69.26548767]
[76.96889496 64.89764404]
[71.11306000 51.08789444]
[65.25721741 37.27814484]
[59.40137863 23.46839714]
[46.89059448 13.78382969]
[49.04534912 -0.95409095]
[43.18951035 -14.76383972]
[28.24436569 -25.45714760]
[30.97151184 -42.75802612]
[24.80945969 -56.43388748]
[18.64740753 -70.10974121]
[12.48535442 -83.78560638]
[6.32330179 -97.46146393]
[0.16124959 -111.13732147]
[-6.00080299 -124.81317902]
[-21.09976006 -128.88203430]
[-30.00838852 -141.73388672]
[-28.52030563 -157.30050659]
[-17.33814049 -168.23179626]
[-1.74176943 -169.36634827]
[10.90467930 -160.16845703]
[14.62993908 -144.98107910]
[7.67505598 -130.97523499]
[13.83710861 -117.29936981]
[19.99916077 -103.62351227]
[26.16121292 -89.94765472]
[32.32326508 -76.27179718]
[38.48531723 -62.59593964]
[44.64736938 -48.92007828]
[55.88621140 -44.31132889]
[61.10951233 -32.90104675]
[56.99925613 -20.61967850]
[62.85509491 -6.80992985]
[74.94702911 1.88687229]
[73.21112823 17.61255836]
[79.06696320 31.42230606]
[84.92280579 45.23205566]
[90.77864075 59.04180527]
[101.75248718 58.05317688]
[112.60562897 59.95370865]
[122.59053802 64.61250305]
[131.01948547 71.70867157]
[137.31190491 80.75345612]
[141.03439331 91.12387848]
[156.02601624 90.62265778]
[171.01763916 90.12142944]
[186.00926208 89.62020874]
[201.00088501 89.11898041]
[209.74263000 76.43481445]
[224.10910034 71.38919067]
[238.52137756 75.71933746]
[247.51269531 87.56391907]
[262.50430298 87.06269836]
[277.48941040 86.39449310]
[292.46615601 85.55939484]
[307.44290161 84.72429657]
[322.41961670 83.88919830]
[329.27493286 70.14509583]
[342.09271240 61.68339920]
[357.42501831 60.78025818]
[371.14758301 67.67861176]
[379.56906128 80.52284241]
[380.42413330 95.85791779]
[373.48278809 109.55876923]
[360.61224365 117.93994904]
[345.27456665 118.74695587]
[331.59552002 111.76271057]
[323.25473022 98.86593628]
[308.27798462 99.70103455]
[293.30126953 100.53613281]
[278.32452393 101.37123108]
[271.76824951 104.91283417]
[263.00552368 102.05432129]
[248.01391602 102.55554199]
[239.83381653 114.97423553]
[225.74293518 120.25733948]
[211.07154846 116.18256378]
[201.50212097 104.11060333]
[186.51049805 104.61183167]
[171.51887512 105.11305237]
[156.52725220 105.61428070]
[141.53562927 106.11550140]
[132.83985901 126.15628052]
[115.25228119 139.11489868]
[93.53494263 141.48265076]
[88.61457062 155.65267944]
[83.69419861 169.82272339]
[78.77382660 183.99276733]
[73.85344696 198.16279602]
[68.93307495 212.33283997]
[64.01270294 226.50286865]
[59.25049210 240.72683716]
[54.64703751 255.00297546]
[67.54027557 262.80432129]
[78.28644562 273.36920166]
[86.30600739 286.12786865]
[91.16648102 300.39224243]
[92.60574341 315.39306641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 135]
[21 134]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[31 38]
[32 37]
[43 80]
[44 79]
[45 78]
[46 77]
[48 75]
[49 74]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[86 124]
[87 123]
[88 122]
[89 121]
[90 120]
[94 116]
[95 115]
[96 113]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
