%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCGAGCCCUGAAAGGCUAUAGGCGAGGGGGCGGCUCCGCGGGGCCGGGCGAGGAGUCCAGAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[83.75112915 101.38744354]
[69.89293671 95.64718628]
[56.03474426 89.90693665]
[42.17655182 84.16668701]
[28.31835938 78.42643738]
[14.46016693 72.68618011]
[0.60197365 66.94593048]
[-11.79849243 71.17747498]
[-23.33396912 65.87094879]
[-27.88844681 54.45338821]
[-41.48306274 48.11411285]
[-55.07767868 41.77484131]
[-68.67229462 35.43556595]
[-82.26691437 29.09629250]
[-92.61542511 36.72529984]
[-105.17819214 39.08933258]
[-117.45018005 35.78185654]
[-127.01241302 27.52081680]
[-132.00878906 15.99397469]
[-131.50614929 3.51436305]
[-144.49653625 -3.98563695]
[-157.48692322 -11.48563671]
[-174.22717285 -14.16891956]
[-176.28292847 -30.99777031]
[-160.68083191 -37.63186646]
[-149.98692322 -24.47601891]
[-136.99653625 -16.97601891]
[-124.00615692 -9.47601795]
[-108.52076721 -17.42039871]
[-91.17719269 -14.68808842]
[-78.66796112 -2.15069628]
[-75.92764282 15.50167561]
[-62.33302307 21.84095001]
[-48.73840714 28.18022346]
[-35.14378738 34.51949692]
[-21.54917145 40.85877228]
[-4.33073759 38.26348877]
[6.34222507 53.08773804]
[20.20041847 58.82798767]
[34.05861282 64.56823730]
[47.91680527 70.30849457]
[61.77499771 76.04874420]
[75.63318634 81.78899384]
[89.49138641 87.52924347]
[100.70001221 83.70703888]
[111.53951263 88.47652435]
[116.29392242 99.32264709]
[129.88853455 105.66191864]
[143.48315430 112.00119781]
[165.28353882 107.72124481]
[178.32112122 124.81642151]
[192.80999756 128.69871521]
[207.29888916 132.58099365]
[221.78778076 136.46328735]
[236.34449768 129.71926880]
[250.62809753 137.02392578]
[253.68145752 152.77374268]
[243.16226196 164.88679504]
[227.13996887 164.07101440]
[217.90548706 150.95216370]
[203.41661072 147.06988525]
[188.92771912 143.18759155]
[174.43882751 139.30531311]
[168.08811951 145.06100464]
[159.82633972 147.68087769]
[151.12800598 146.61323547]
[143.58082581 141.97219849]
[138.59584045 134.53134155]
[137.14387512 125.59580994]
[123.54926300 119.25653839]
[109.95465088 112.91726685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[20 28]
[21 27]
[22 26]
[47 71]
[48 70]
[49 69]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
