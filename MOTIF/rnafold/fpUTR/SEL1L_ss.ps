%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGGAAGGAGACUAGAGCAGGAAGAGCAGCGGCGAGGCGGCGGUGGUGGCUGAGUCCGUGGUGGCAGAGGCGAAGGCGACAGCUCUAGGGGUUGGCACCGGCCCCGAGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[63.44000244 116.09693909]
[55.14800262 128.59664917]
[58.95293808 145.60815430]
[49.51661682 159.86373901]
[33.03152847 162.88543701]
[25.07521439 175.60145569]
[31.00417137 189.94116211]
[27.33940887 205.01927185]
[15.49010277 215.03793335]
[0.01255378 216.14476013]
[-13.14180470 207.91418457]
[-18.91485405 193.51100159]
[-15.08673859 178.47355652]
[-3.12944698 168.58401489]
[12.35919857 167.64514160]
[20.31551170 154.92912292]
[15.68597221 142.82475281]
[18.96098328 130.08407593]
[29.15204048 121.46017456]
[42.64829254 120.30464172]
[50.94029236 107.80493927]
[49.16034317 100.51921082]
[35.89074707 107.51334381]
[23.34530830 115.73598480]
[9.39055538 110.23463440]
[5.83123827 95.66304779]
[15.67829037 84.34776306]
[30.60070038 85.86001587]
[45.60044479 85.94776154]
[43.82049179 78.66204071]
[30.69904709 71.39377594]
[14.87804985 71.47519684]
[7.49381781 58.53987885]
[-5.62762833 51.27161789]
[-21.44862556 51.35303497]
[-28.83285713 38.41772079]
[-41.95430374 31.14945793]
[-58.73955154 28.76370811]
[-61.09365463 11.97399235]
[-45.61177063 5.06403160]
[-34.68603897 18.02801132]
[-21.56459427 25.29627419]
[-6.68213129 24.69498062]
[1.64063454 38.15016937]
[14.76208115 45.41843414]
[29.64454460 44.81713867]
[37.96730804 58.27233124]
[51.08875656 65.54059601]
[65.19925690 60.45201111]
[70.66166687 46.48196793]
[68.48111725 30.81174850]
[80.32191467 21.77599907]
[85.78432465 7.80595636]
[91.24673462 -6.16408634]
[83.93183899 -21.98689270]
[90.14155579 -37.91502380]
[105.61539459 -44.35311127]
[110.70397949 -58.46361542]
[115.79256439 -72.57411957]
[109.32083893 -86.74290466]
[114.68239594 -100.98047638]
[128.23005676 -107.06295776]
[133.31863403 -121.17346191]
[129.89218140 -137.21064758]
[142.24717712 -147.99424744]
[157.67385864 -142.43103027]
[160.30258179 -126.24393463]
[147.42913818 -116.08487701]
[142.34056091 -101.97437286]
[148.88789368 -88.64515686]
[143.92835999 -74.26261139]
[129.90306091 -67.48553467]
[124.81448364 -53.37503052]
[119.72589874 -39.26452637]
[126.80947876 -28.41227341]
[126.30163574 -15.26720524]
[118.16380310 -4.68397093]
[105.21678162 -0.70167762]
[99.75437164 13.26836491]
[94.29196167 27.23840714]
[96.86322021 41.90939713]
[84.63171387 51.94437790]
[79.16930389 65.91442108]
[109.74562836 64.66413116]
[129.53120422 84.47473907]
[128.41348267 109.84859467]
[140.91319275 118.14060211]
[153.41290283 126.43260193]
[165.91261292 134.72459412]
[181.68966675 135.90573120]
[188.01829529 149.38897705]
[200.51800537 157.68096924]
[213.01771545 165.97297668]
[225.51742554 174.26498413]
[238.01713562 182.55697632]
[250.51684570 190.84898376]
[263.01654053 199.14097595]
[279.40875244 199.61846924]
[286.95208740 214.17971802]
[277.88662720 227.84536743]
[261.53814697 226.55735779]
[254.72454834 211.64068604]
[242.22483826 203.34869385]
[229.72512817 195.05668640]
[217.22541809 186.76467896]
[204.72570801 178.47268677]
[192.22599792 170.18067932]
[179.72628784 161.88868713]
[164.84330750 161.30064392]
[157.62060547 147.22430420]
[145.12089539 138.93231201]
[132.62118530 130.64030457]
[120.12148285 122.34830475]
[112.88020325 128.98474121]
[103.44119263 133.18560791]
[92.65000153 134.22911072]
[81.58480835 131.69355774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[5 16]
[6 15]
[30 48]
[31 47]
[33 45]
[34 44]
[36 42]
[37 41]
[49 83]
[50 82]
[52 80]
[53 79]
[54 78]
[57 74]
[58 73]
[59 72]
[62 69]
[63 68]
[86 113]
[87 112]
[88 111]
[89 110]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
