%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCGGACGGGAGCGGGCCCACGGGGCUGCAGGUGUGGAGCCCCCUGGAGCUGAGAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[67.02895355 183.60157776]
[61.21071243 180.61621094]
[49.61555481 190.13211060]
[38.25742340 199.92970276]
[27.14315605 210.00308228]
[16.02888870 220.07646179]
[11.53021908 235.84649658]
[-4.44001961 239.57255554]
[-15.45301342 227.42158508]
[-10.17953968 211.89347839]
[5.95550537 208.96220398]
[17.06977272 198.88880920]
[28.18403816 188.81542969]
[31.13125420 181.72770691]
[40.09965515 178.53694153]
[51.69481277 169.02104187]
[54.47745132 143.43479919]
[78.39166260 132.56869507]
[84.13191986 118.71049500]
[89.87216949 104.85230255]
[95.27059174 90.85740662]
[100.32394409 76.73424530]
[105.37728882 62.61108780]
[102.74141693 47.01100159]
[114.31411743 37.63433075]
[119.36746216 23.51116943]
[124.42081451 9.38800812]
[129.47416687 -4.73515272]
[134.52751160 -18.85831451]
[139.58085632 -32.98147583]
[136.94499207 -48.58156204]
[148.51768494 -57.95823288]
[153.57102966 -72.08139038]
[150.10456848 -88.10997772]
[162.43260193 -98.92439270]
[177.87312317 -93.39968109]
[180.54223633 -77.21920776]
[167.69419861 -67.02804565]
[162.64083862 -52.90488434]
[165.63816833 -38.31497955]
[153.70401001 -27.92812729]
[148.65066528 -13.80496597]
[143.59732056 0.31819519]
[138.54397583 14.44135571]
[133.49063110 28.56451797]
[128.43727112 42.68767929]
[131.43460083 57.27758408]
[119.50045013 67.66443634]
[114.44710541 81.78759766]
[109.39375305 95.91075897]
[109.84432220 104.28810883]
[103.73036194 110.59255219]
[97.99011230 124.45074463]
[92.24986267 138.30894470]
[96.89790344 143.25662231]
[100.13999939 149.19512939]
[101.77734375 155.73655701]
[101.71556091 162.45686340]
[99.97001648 168.92337036]
[96.66413879 174.72257996]
[92.02072144 179.48666382]
[86.34696960 182.91677856]
[80.01417542 184.80177307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 13]
[5 12]
[6 11]
[18 54]
[19 53]
[20 52]
[21 50]
[22 49]
[23 48]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
