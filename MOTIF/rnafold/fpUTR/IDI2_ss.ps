%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUCCACAUCUGAUACCCAGGAGUCUCCAGCUUCCAAGAGAGGUCGGGUCACAGCCAGCAGCU\
) } def
/len { sequence length } bind def

/coor [
[77.68771362 281.46591187]
[80.79238892 262.33450317]
[81.50611877 247.35150146]
[82.21984100 232.36848450]
[82.93357086 217.38548279]
[70.27176666 211.27838135]
[60.91435623 200.72900391]
[56.33343124 187.34609985]
[57.26923370 173.18798828]
[63.61075592 160.44606018]
[74.40768433 151.10548401]
[88.01268005 146.63604736]
[89.43852234 131.70397949]
[90.86436462 116.77189636]
[81.72020721 105.53220367]
[83.09751892 91.10829163]
[94.20355988 81.80226898]
[95.62940216 66.87018585]
[97.05523682 51.93810654]
[98.48107910 37.00603104]
[96.12654877 27.80008698]
[100.34662628 21.40322876]
[102.48134613 6.55590773]
[93.28208923 -6.01435423]
[95.65850830 -21.04124069]
[107.69902802 -29.73385620]
[109.83374786 -44.58117676]
[111.96846771 -59.42849731]
[114.10319519 -74.27581787]
[101.98085022 -83.70685577]
[96.21298981 -97.94158173]
[98.35112000 -113.15091705]
[107.82011414 -125.24363708]
[122.07284546 -130.96685791]
[137.27540588 -128.78105164]
[149.33837891 -119.27420807]
[155.01689148 -105.00360870]
[152.78346252 -89.80797577]
[143.23884583 -77.77485657]
[128.95051575 -72.14109802]
[126.81579590 -57.29377747]
[124.68106842 -42.44645309]
[122.54634857 -27.59913254]
[131.65014648 -15.86642456]
[129.69673157 -0.77871877]
[117.32866669 8.69062996]
[115.19394684 23.53795242]
[113.41316223 38.43186951]
[111.98731995 53.36394882]
[110.56147766 68.29602814]
[109.13563538 83.22810364]
[118.27979279 94.46779633]
[116.90248108 108.89170837]
[105.79644012 118.19773102]
[104.37059784 133.12980652]
[102.94476318 148.06188965]
[116.81106567 156.24423218]
[125.76077271 169.55894470]
[128.08486938 185.37469482]
[123.37789154 200.59149170]
[112.60762024 212.24829102]
[97.91658020 218.09921265]
[97.20285034 233.08221436]
[96.48912811 248.06523132]
[95.77539825 263.04824829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 62]
[12 56]
[13 55]
[14 54]
[17 51]
[18 50]
[19 49]
[20 48]
[22 47]
[23 46]
[26 43]
[27 42]
[28 41]
[29 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
