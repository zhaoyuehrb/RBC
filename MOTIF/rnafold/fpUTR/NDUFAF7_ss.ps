%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGGGCGUGUCUUCUCCCGGAAAUGGUCUAAGCCCCAGCUCCUGGCGGAGCGAGCUAGCCUGCGAAUUUCAGC\
) } def
/len { sequence length } bind def

/coor [
[130.21855164 257.91586304]
[140.83369446 246.81565857]
[136.55364990 232.43923950]
[132.27360535 218.06283569]
[127.69736481 203.77793884]
[122.82687378 189.59068298]
[117.95637512 175.40342712]
[113.08588409 161.21617126]
[99.63359070 154.92559814]
[94.49211121 140.60708618]
[101.18144989 126.53972626]
[96.31095886 112.35247040]
[90.57070923 98.49427795]
[83.98275757 85.01840973]
[77.39480591 71.54254913]
[70.80686188 58.06668091]
[57.79475021 49.06692886]
[59.15609741 34.23466492]
[52.56814957 20.75880051]
[39.55603790 11.75904560]
[40.91738510 -3.07321644]
[34.32943726 -16.54908180]
[27.74148750 -30.02494621]
[13.06428814 -35.24199295]
[6.57514000 -49.00228500]
[11.63924885 -62.96260071]
[5.05130005 -76.43846130]
[-1.53664863 -89.91432953]
[-16.84313965 -92.46205902]
[-27.70481491 -103.54373932]
[-29.94513893 -118.89823914]
[-22.70265770 -132.62142944]
[-8.76225853 -139.43647766]
[6.51569510 -136.72285461]
[17.25651550 -125.52399445]
[19.33013916 -110.14610291]
[11.93921566 -96.50228119]
[18.52716446 -83.02641296]
[25.11511421 -69.55055237]
[39.24220276 -64.97223663]
[46.11528778 -51.39964294]
[41.21735001 -36.61289597]
[47.80530167 -23.13702965]
[54.39324951 -9.66116524]
[66.93414307 -1.62529492]
[66.04401398 14.17085171]
[72.63195801 27.64671516]
[85.17285919 35.68258667]
[84.28272247 51.47873306]
[90.87067413 64.95459747]
[97.45861816 78.43046570]
[104.04656982 91.90632629]
[107.81088257 93.74050140]
[110.64530182 97.34983826]
[111.72156525 102.22513580]
[110.49821472 107.48197937]
[115.36870575 121.66923523]
[129.28788757 128.66168213]
[134.02514648 143.11895752]
[127.27314758 156.34567261]
[132.14363098 170.53292847]
[137.01412964 184.72019958]
[141.88462830 198.90745544]
[147.79354858 206.25851440]
[146.65002441 213.78279114]
[150.93006897 228.15919495]
[155.21011353 242.53561401]
[170.16798401 246.02239990]
[181.36750793 256.53268433]
[185.79606628 271.23925781]
[182.26242065 286.18612671]
[171.71707153 297.35266113]
[156.99668884 301.73510742]
[142.06097412 298.15460205]
[130.92755127 287.57431030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 63]
[6 62]
[7 61]
[8 60]
[11 57]
[12 56]
[13 52]
[14 51]
[15 50]
[16 49]
[18 47]
[19 46]
[21 44]
[22 43]
[23 42]
[26 39]
[27 38]
[28 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
