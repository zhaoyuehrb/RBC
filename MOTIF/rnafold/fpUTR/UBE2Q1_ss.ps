%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGCCCGGAGCGCAGGCCGGAGGCUCCCGGCCCGCCGGCCCCGGAGCGGAGCGGAGCGGAGG\
) } def
/len { sequence length } bind def

/coor [
[76.79212952 143.18295288]
[78.53940582 128.28506470]
[88.35601044 116.94291687]
[77.05031586 126.80097198]
[71.73393250 141.70219421]
[57.05623627 144.23490906]
[45.75054169 154.09295654]
[40.43415451 168.99418640]
[25.75646210 171.52690125]
[14.45076561 181.38494873]
[9.65003109 197.06567383]
[-6.38882732 200.48429871]
[-17.16640663 188.12405396]
[-11.59565830 172.70008850]
[4.59271049 170.07925415]
[15.89840603 160.22119141]
[20.40613365 146.02508545]
[35.89248657 142.78726196]
[47.19818115 132.92921448]
[51.70590973 118.73309326]
[67.19226074 115.49527740]
[78.49795532 105.63722229]
[81.70670319 96.00038147]
[88.23004150 90.34693909]
[95.30468750 89.26289368]
[94.79257202 74.27163696]
[94.28045654 59.28038025]
[93.76834106 44.28912354]
[93.25622559 29.29787064]
[92.74411011 14.30661392]
[89.26354980 5.62805367]
[92.47926331 -1.20331597]
[92.47926331 -16.20331573]
[92.47926331 -31.20331573]
[84.74196625 -45.00348663]
[92.47926331 -57.73075867]
[92.47926331 -72.73075867]
[92.47926331 -87.73075867]
[92.47926331 -102.73075867]
[92.47926331 -117.73075867]
[78.89739227 -124.78704834]
[70.15997314 -137.35351562]
[68.27481079 -152.54248047]
[73.67510223 -166.86363220]
[85.11989594 -177.02607727]
[99.97926331 -180.69456482]
[114.83863831 -177.02607727]
[126.28343201 -166.86363220]
[131.68371582 -152.54248047]
[129.79855347 -137.35351562]
[121.06114197 -124.78704834]
[107.47926331 -117.73075867]
[107.47926331 -102.73075867]
[107.47926331 -87.73075867]
[107.47926331 -72.73075867]
[107.47926331 -57.73075867]
[115.21656799 -45.00348663]
[107.47926331 -31.20331573]
[107.47926331 -16.20331573]
[107.47926331 -1.20331597]
[107.73535919 13.79449749]
[108.24748230 28.78575325]
[108.75959778 43.77700806]
[109.27171326 58.76826477]
[109.78382874 73.75952148]
[110.29594421 88.75077057]
[118.08970642 101.56706238]
[131.16461182 108.91871643]
[146.98580933 108.93802643]
[154.28753662 121.92008972]
[167.36244202 129.27174377]
[180.43734741 136.62339783]
[194.48344421 130.02894592]
[209.71672058 132.98306274]
[220.27967834 144.34983826]
[222.11064148 159.75851440]
[214.50556946 173.28413391]
[200.38876343 179.72583008]
[185.18841553 176.60662842]
[174.74938965 165.12593079]
[173.08569336 149.69830322]
[160.01078796 142.34664917]
[146.93588257 134.99499512]
[132.04989624 135.50152588]
[123.81295776 121.99362946]
[110.73805237 114.64197540]
[122.65675354 123.74935913]
[127.39875031 137.98008728]
[123.32533264 152.41639709]
[111.84415436 162.06951904]
[96.92280579 163.60357666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[6 19]
[7 18]
[9 16]
[10 15]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[32 60]
[33 59]
[34 58]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[67 86]
[68 85]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
