%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCGGGCCGGCUCGCGGGCGCUGCCAGUCUCGGGCGGCGGUGUCCGGCGCGCGGGCGGCCUGCUGGGCGGGCUGAAGGGUUAGCGGAGCACGGGCAAGGCGGAGAGUGACGGAGUCGGCGAGCCCCCGCGGCGACAGGUUCUCUACUUAAAAGACA\
) } def
/len { sequence length } bind def

/coor [
[205.79634094 429.23104858]
[208.22833252 417.83334351]
[213.02008057 407.20114136]
[219.95761108 397.81723022]
[228.72946167 390.10852051]
[221.88002014 376.76367188]
[215.03059387 363.41879272]
[208.18115234 350.07394409]
[203.94065857 347.77334595]
[201.12777710 342.75817871]
[201.33651733 336.06381226]
[195.01963806 322.45877075]
[188.70275879 308.85372925]
[182.38587952 295.24868774]
[176.06900024 281.64367676]
[169.75212097 268.03863525]
[163.43524170 254.43359375]
[151.05770874 246.14830017]
[152.26385498 230.37313843]
[145.94697571 216.76809692]
[139.63009644 203.16307068]
[127.25256348 194.87777710]
[128.45870972 179.10261536]
[122.14183044 165.49757385]
[115.82495117 151.89253235]
[103.44741821 143.60723877]
[104.65356445 127.83207703]
[98.33668518 114.22704315]
[87.00814819 106.03218079]
[88.05828094 92.08983612]
[81.74139404 78.48480225]
[75.42451477 64.87976837]
[69.10763550 51.27472687]
[57.25593185 46.09806824]
[52.28785324 34.59355164]
[56.37613678 23.17340851]
[50.32928467 9.44622421]
[39.64363861 8.17016029]
[30.53600311 2.59124732]
[24.63489151 -6.21360445]
[22.96217918 -16.59815407]
[25.75664711 -26.65445709]
[32.44256592 -34.56340027]
[27.21954155 -48.62469482]
[21.99651718 -62.68598938]
[16.77349281 -76.74728394]
[11.55046844 -90.80857849]
[6.32744408 -104.86987305]
[0.96576226 -118.87888336]
[-4.53405380 -132.83424377]
[-19.20321846 -143.92436218]
[-16.00049782 -161.15556335]
[-21.77495956 -174.99954224]
[-27.54941940 -188.84350586]
[-47.92295074 -192.28926086]
[-62.05649185 -207.17320251]
[-64.41279602 -227.42434692]
[-54.21271896 -244.91807556]
[-61.32447433 -258.12500000]
[-68.43623352 -271.33190918]
[-75.54798889 -284.53884888]
[-82.65975189 -297.74575806]
[-89.77150726 -310.95269775]
[-96.88326263 -324.15963745]
[-103.99502563 -337.36654663]
[-116.82820129 -348.44561768]
[-109.73467255 -363.84426880]
[-92.97412872 -361.29074097]
[-90.78810120 -344.47830200]
[-83.67633820 -331.27139282]
[-76.56458282 -318.06445312]
[-69.45281982 -304.85754395]
[-62.34106445 -291.65060425]
[-55.22930908 -278.44366455]
[-48.11754990 -265.23675537]
[-41.00579071 -252.02983093]
[-31.26499176 -253.12905884]
[-21.62034988 -251.21739197]
[-12.98335075 -246.45716858]
[-6.17579794 -239.28079224]
[-1.85162783 -230.35150146]
[-0.43411568 -220.50212097]
[-2.07450604 -210.65733337]
[-6.63609791 -201.74693298]
[-13.70544624 -194.61796570]
[-7.93098545 -180.77400208]
[-2.15652466 -166.93002319]
[8.93427372 -162.01800537]
[13.84247589 -150.48782349]
[9.42130375 -138.33406067]
[14.92112064 -124.37870026]
[20.32821846 -119.28161621]
[20.38873863 -110.09289551]
[25.61176300 -96.03160095]
[30.83478737 -81.97030640]
[36.05781174 -67.90901184]
[41.28083801 -53.84772110]
[46.50386047 -39.78642654]
[64.73972321 -33.06271362]
[72.34583282 -14.84805393]
[64.05646515 3.39937258]
[70.10331726 17.12655640]
[84.79284668 26.68633652]
[82.71266937 44.95784760]
[89.02954865 58.56288528]
[95.34643555 72.16792297]
[101.66331482 85.77295685]
[112.99185181 93.96781921]
[111.94171906 107.91016388]
[118.25860596 121.51519775]
[131.08795166 130.77362061]
[129.42997742 145.57565308]
[135.74687195 159.18069458]
[142.06375122 172.78572083]
[154.89309692 182.04414368]
[153.23512268 196.84617615]
[159.55200195 210.45121765]
[165.86889648 224.05625916]
[178.69824219 233.31466675]
[177.04026794 248.11671448]
[183.35714722 261.72174072]
[189.67404175 275.32678223]
[195.99092102 288.93182373]
[202.30780029 302.53686523]
[208.62467957 316.14190674]
[214.94155884 329.74691772]
[221.52600098 343.22451782]
[228.37544250 356.56936646]
[235.22488403 369.91421509]
[242.07432556 383.25906372]
[260.57980347 380.23382568]
[279.00161743 383.61291504]
[295.19055176 392.98712158]
[307.26306152 407.24862671]
[313.82028198 424.72195435]
[314.11007690 443.36087036]
[308.11346436 460.98800659]
[296.54489136 475.54904175]
[304.92459106 487.99014282]
[313.30429077 500.43121338]
[321.68399048 512.87231445]
[337.09161377 517.34277344]
[343.06951904 532.23046875]
[335.03195190 546.11486816]
[319.14465332 548.34509277]
[307.59503174 537.21020508]
[309.24291992 521.25201416]
[300.86322021 508.81091309]
[292.48352051 496.36984253]
[284.10382080 483.92874146]
[273.23339844 487.90859985]
[261.75927734 489.49935913]
[250.20056152 488.62573242]
[239.08088684 485.32403564]
[228.90470886 479.74050903]
[220.13439941 472.12515259]
[213.16928101 462.82028198]
[208.32739258 452.24520874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 130]
[6 129]
[7 128]
[8 127]
[11 126]
[12 125]
[13 124]
[14 123]
[15 122]
[16 121]
[17 120]
[19 118]
[20 117]
[21 116]
[23 114]
[24 113]
[25 112]
[27 110]
[28 109]
[30 107]
[31 106]
[32 105]
[33 104]
[36 102]
[37 101]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[48 93]
[49 91]
[50 90]
[52 87]
[53 86]
[54 85]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
