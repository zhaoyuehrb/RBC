%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCCUCCCGCUGAGCUCCAGCUGUGCCAGAGGCACCCGAGCCCUGAGAGUCCGCCGCCAACGCGCAGGUGCUAGCGGCCCCUUCGCCCUGCAGCCCCUUUGCUUUUACUCUGUCCAAAGUUAAC\
) } def
/len { sequence length } bind def

/coor [
[61.84313202 176.03756714]
[54.18077087 171.68164062]
[47.01021576 166.55630493]
[40.40842819 160.71658325]
[34.44627380 154.22515869]
[29.18774223 147.15170288]
[24.68927956 139.57214355]
[20.99917030 131.56782532]
[18.15702248 123.22467804]
[16.19334221 114.63224792]
[15.12920570 105.88275909]
[14.97603703 97.07012177]
[0.08884369 95.23396301]
[-14.55467319 101.22378540]
[-26.23910141 91.98672485]
[-41.12629318 90.15056610]
[-50.13434219 92.21936798]
[-56.35462952 88.08230591]
[-71.19227600 85.88134766]
[-86.02993011 83.68038940]
[-100.89346313 81.66168213]
[-115.78066254 79.82552338]
[-130.70843506 78.35526276]
[-145.66778564 77.25179291]
[-160.62713623 76.14833069]
[-175.61697388 75.59622192]
[-190.61697388 75.59622192]
[-205.61697388 75.59622192]
[-220.61697388 75.59622192]
[-235.61697388 75.59622192]
[-251.45611572 81.64255524]
[-261.65087891 68.09622192]
[-251.45611572 54.54988098]
[-235.61697388 60.59621811]
[-220.61697388 60.59621811]
[-205.61697388 60.59621811]
[-190.61697388 60.59621811]
[-175.61697388 60.59621811]
[-172.83068848 58.27558517]
[-168.74534607 57.24704361]
[-164.00859070 58.12271881]
[-159.52368164 61.18897247]
[-144.56431580 62.29243851]
[-129.60496521 63.39590836]
[-125.39772797 60.93850327]
[-119.58583069 61.17236710]
[-113.94449615 64.93833160]
[-99.05730438 66.77449036]
[-91.95893097 64.44631958]
[-83.82897186 68.84274292]
[-68.99132538 71.04370117]
[-54.15367508 73.24465942]
[-39.29013443 75.26336670]
[-24.40294075 77.09953308]
[-10.82425690 70.97837067]
[1.92500377 80.34677124]
[16.81219673 82.18292999]
[25.29074860 59.30373001]
[39.91461563 39.77205658]
[59.48088837 25.19451904]
[82.38011932 16.77020836]
[106.72869873 15.19208050]
[130.52378845 20.58994675]
[151.80812073 32.51979828]
[168.83088684 50.00032806]
[181.69682312 42.28878784]
[194.56274414 34.57724762]
[202.42178345 20.84603500]
[217.31610107 20.93941307]
[230.18202209 13.22787285]
[243.04795837 5.51633167]
[250.90698242 -8.21487904]
[265.80130005 -8.12150002]
[278.66723633 -15.83304119]
[291.53317261 -23.54458237]
[297.36181641 -30.71755409]
[304.81082153 -31.28303337]
[317.86212158 -38.67650604]
[330.72805786 -46.38804626]
[343.40084839 -54.41301346]
[356.07366943 -62.43797684]
[359.29141235 -77.91123199]
[372.55358887 -86.50717926]
[387.99197388 -83.12600708]
[396.44720459 -69.77369690]
[392.90301514 -54.37194061]
[379.46206665 -46.05832672]
[364.09863281 -49.76517487]
[351.42581177 -41.74020767]
[338.75302124 -33.71524429]
[336.83761597 -29.23519325]
[332.03015137 -25.96089172]
[325.25558472 -25.62520218]
[312.20428467 -18.23172951]
[299.24468994 -10.67865372]
[286.37878418 -2.96711230]
[273.51284790 4.74442863]
[266.57406616 17.92405891]
[250.75949097 18.38226128]
[237.89356995 26.09380150]
[225.02763367 33.80534363]
[218.08885193 46.98497391]
[202.27429199 47.44317627]
[189.40835571 55.15471649]
[176.54243469 62.86625671]
[179.97364807 70.98492432]
[182.54644775 79.41502380]
[184.23324585 88.06607056]
[185.01591492 96.84521484]
[184.88606262 105.65821838]
[183.84507751 114.41049194]
[181.90412903 123.00808716]
[179.08406067 131.35871887]
[175.41514587 139.37277222]
[170.93675232 146.96420288]
[165.69694519 154.05154419]
[159.75198364 160.55873108]
[153.16566467 166.41589355]
[146.00869751 171.56018066]
[138.35787964 175.93635559]
[130.29534912 179.49748230]
[121.90765381 182.20530701]
[113.28479767 184.03077698]
[104.51935577 184.95429993]
[95.70539856 184.96595764]
[86.93754578 184.06562805]
[78.30989075 182.26298523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 57]
[13 56]
[15 54]
[16 53]
[18 52]
[19 51]
[20 50]
[21 48]
[22 47]
[23 44]
[24 43]
[25 42]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[65 105]
[66 104]
[67 103]
[69 101]
[70 100]
[71 99]
[73 97]
[74 96]
[75 95]
[77 94]
[78 93]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
