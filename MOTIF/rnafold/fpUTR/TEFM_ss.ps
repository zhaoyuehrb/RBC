%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUGGGCGCAGCACGCAGGAACCGGAAGUCAAUGGAGGAAGACUGGACCUACUGAUUCAACUUGGAG\
) } def
/len { sequence length } bind def

/coor [
[54.40335846 112.61067200]
[39.49504089 114.26658630]
[24.58672142 115.92249298]
[9.67840290 117.57839966]
[-5.22991562 119.23431396]
[-20.13823318 120.89022064]
[-35.04655075 122.54613495]
[-49.95487213 124.20204163]
[-64.58926392 127.49362183]
[-78.77084351 132.38063049]
[-92.95242310 137.26763916]
[-101.24590302 151.00073242]
[-117.17179108 152.93609619]
[-128.51310730 141.58911133]
[-126.56976318 125.66419983]
[-112.83252716 117.37758636]
[-97.83943176 123.08605957]
[-83.65785217 118.19905090]
[-69.47627258 113.31204224]
[-68.54978180 110.82956696]
[-66.54529572 108.57363892]
[-63.54905319 106.96351624]
[-59.79850006 106.37803650]
[-55.66347885 107.10416412]
[-51.61078262 109.29372406]
[-36.70246124 107.63781738]
[-21.79414368 105.98190308]
[-6.88582516 104.32599640]
[8.02249336 102.67008209]
[22.93081093 101.01417542]
[37.83913040 99.35826111]
[52.74744797 97.70235443]
[58.84832382 76.66285706]
[73.77278900 60.62721634]
[94.32079315 53.03374100]
[116.08650970 55.51059723]
[134.40301514 67.52670288]
[146.80549622 59.08996582]
[159.01829529 50.38092041]
[171.03544617 41.40383530]
[183.05259705 32.42675018]
[181.86495972 17.04516983]
[189.20185852 3.47412157]
[202.72213745 -3.95592260]
[218.11152649 -2.87406230]
[230.45932007 6.37448502]
[235.82537842 20.83854103]
[232.49742126 35.90267944]
[221.53738403 46.75998688]
[206.44256592 49.94593811]
[192.02969360 44.44390488]
[180.01254272 53.42098999]
[167.99539185 62.39807129]
[164.40927124 69.13867188]
[155.24223328 71.49243927]
[142.83975220 79.92917633]
[146.04884338 89.15626526]
[147.29429626 98.84574890]
[146.52301025 108.58445740]
[143.76785278 117.95710754]
[139.14633179 126.56401825]
[132.85552979 134.03817749]
[125.16367340 140.06085205]
[116.39878082 144.37524414]
[106.93460846 146.79737854]
[97.17472076 147.22393799]
[87.53531647 145.63676453]
[78.42742920 142.10353088]
[70.23945618 136.77488708]
[63.32053757 129.87808228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[9 19]
[10 18]
[11 17]
[37 56]
[38 55]
[39 53]
[40 52]
[41 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
