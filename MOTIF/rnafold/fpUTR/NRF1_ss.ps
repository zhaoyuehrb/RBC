%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCGGCGGCGGCAGAAGCGGCAGCGCUCGCCAUUGCCGCUGGUGGCAGGAGGCUGCGAGGAGCCGGCGCGGUCGCAGUCUCCACGGCGCAGGCCCACGGUAGCGCAGCCGCUCUGAGUAGAACUUC\
) } def
/len { sequence length } bind def

/coor [
[50.01003647 442.18923950]
[43.50480270 441.76977539]
[37.64202499 455.57656860]
[39.37002563 471.30313110]
[27.27372169 479.99383545]
[21.41094208 493.80065918]
[23.94333267 510.00308228]
[11.00969028 520.08538818]
[-4.08496380 513.67578125]
[-5.81254292 497.36785889]
[7.60413837 487.93786621]
[13.46691704 474.13107300]
[11.31957054 459.39205933]
[23.83522034 449.71377563]
[29.69799805 435.90698242]
[17.16593742 414.87243652]
[23.61605072 391.01339722]
[45.44333267 378.93496704]
[47.56211090 364.08535767]
[49.68088913 349.23577881]
[51.79967117 334.38616943]
[49.60929489 327.25207520]
[54.14786530 319.21246338]
[56.61678314 304.41705322]
[59.08570480 289.62164307]
[61.55462265 274.82620239]
[64.02354431 260.03079224]
[58.48660660 246.20358276]
[68.38981628 233.86515808]
[70.85873413 219.06973267]
[73.32765198 204.27430725]
[75.79656982 189.47889709]
[78.26548767 174.68347168]
[76.24422455 167.49963379]
[80.97141266 159.56948853]
[83.78909302 144.83650208]
[86.60677338 130.10353088]
[70.29117584 118.16744995]
[63.35609436 98.00102234]
[69.47632599 76.41591644]
[57.32027817 67.62782288]
[45.16423035 58.83973312]
[33.00818253 50.05164337]
[17.44610977 52.80798340]
[4.54108572 43.68461227]
[1.94943285 28.09426689]
[11.20873356 15.28642178]
[26.82560730 12.85974407]
[39.53484344 22.25394058]
[41.79627228 37.89559937]
[53.95232010 46.68368912]
[66.10836792 55.47177887]
[78.26441193 64.25986481]
[92.27023315 58.88986206]
[95.43510437 44.22754288]
[98.59997559 29.56522179]
[101.76484680 14.90290356]
[104.92971802 0.24058446]
[108.09458160 -14.42173481]
[111.25945282 -29.08405304]
[114.42432404 -43.74637222]
[117.58919525 -58.40869141]
[120.75405884 -73.07101440]
[123.91893005 -87.73332977]
[115.33666992 -98.18795013]
[114.38748169 -111.48500061]
[121.19551086 -122.71875763]
[133.06439209 -127.87502289]
[136.57467651 -142.45851135]
[131.41000366 -158.02314758]
[142.50775146 -170.09675598]
[158.45152283 -166.25903320]
[162.83973694 -150.45790100]
[151.15815735 -138.94821167]
[147.64787292 -124.36473083]
[157.03105164 -110.45986938]
[153.42869568 -93.73220062]
[138.58125305 -84.56845856]
[135.41638184 -69.90614319]
[132.25151062 -55.24382401]
[129.08663940 -40.58150482]
[125.92177582 -25.91918373]
[122.75690460 -11.25686550]
[119.59203339 3.40545392]
[116.42716217 18.06777382]
[113.26229095 32.73009109]
[110.09742737 47.39241028]
[106.93255615 62.05472946]
[117.61333466 67.80462646]
[125.47254944 76.25510406]
[129.94325256 86.25218201]
[144.64192200 83.26069641]
[159.34059143 80.26921082]
[171.25686646 69.00269318]
[186.89263916 73.94789124]
[190.16314697 90.01760864]
[177.70399475 100.68069458]
[162.33207703 94.96788788]
[147.63340759 97.95937347]
[132.93473816 100.95085144]
[130.29367065 112.95740509]
[123.43524933 123.16008759]
[113.31427765 130.13851929]
[101.33975220 132.92120361]
[98.52207184 147.65419006]
[95.70439148 162.38716125]
[93.06091309 177.15238953]
[90.59198761 191.94781494]
[88.12306976 206.74322510]
[85.65415192 221.53865051]
[83.18523407 236.33407593]
[88.54557800 251.21954346]
[78.81896210 262.49972534]
[76.35004425 277.29513550]
[73.88112640 292.09054565]
[71.41220093 306.88598633]
[68.94328308 321.68139648]
[66.64927673 336.50494385]
[64.53049469 351.35455322]
[62.41171646 366.20416260]
[60.29293442 381.05374146]
[66.19254303 384.20935059]
[71.29965973 388.51098633]
[75.39589691 393.76751709]
[78.30757904 399.74719238]
[79.91310883 406.18774414]
[80.14804840 412.80804443]
[79.00765991 419.32019043]
[76.54689026 425.44216919]
[72.87774658 430.91000366]
[68.16422272 435.48916626]
[62.61494827 438.98458862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[5 12]
[6 11]
[18 121]
[19 120]
[20 119]
[21 118]
[23 117]
[24 116]
[25 115]
[26 114]
[27 113]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[35 106]
[36 105]
[37 104]
[40 53]
[41 52]
[42 51]
[43 50]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[68 75]
[69 74]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
