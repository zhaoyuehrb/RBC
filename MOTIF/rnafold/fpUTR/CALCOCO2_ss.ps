%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCGGGACGGGCUCUCCCUUGGGUGCUUAGCCCCGCCCCCGUCCCACUCUGCCCUGUUGCUGUCGCGCCGCUGCUGGUUGCUGUCCCUGGACCCCUACC\
) } def
/len { sequence length } bind def

/coor [
[116.35953522 176.16522217]
[111.81224823 161.87109375]
[107.26495361 147.57695007]
[102.71766663 133.28282166]
[79.46787262 126.33560944]
[67.05953979 105.48255157]
[52.08798981 104.55914307]
[37.11643982 103.63572693]
[22.14488983 102.71231079]
[7.17334032 101.78890228]
[-7.79820967 100.86548615]
[-22.76976013 99.94207001]
[-37.74131012 99.01866150]
[-41.92103577 106.78500366]
[-48.24423599 112.88424683]
[-56.09477615 116.75106049]
[-64.71646881 118.03623962]
[-73.28588104 116.63813782]
[-80.99099731 112.71037292]
[-87.10816193 106.64526367]
[-91.07000732 99.03472137]
[-92.51807404 90.61251831]
[-107.06502533 86.95381165]
[-121.61197662 83.29511261]
[-136.15893555 79.63640594]
[-145.42404175 80.57803345]
[-151.09405518 75.63455200]
[-165.52143860 71.52960205]
[-182.41058350 73.01054382]
[-188.50903320 57.19139862]
[-174.99632263 46.95211029]
[-161.41650391 57.10221863]
[-146.98912048 61.20716476]
[-132.50022888 65.08944702]
[-117.95327759 68.74815369]
[-103.40631866 72.40686035]
[-88.85936737 76.06556702]
[-71.63783264 62.67533875]
[-49.79380798 65.86573029]
[-36.81789780 84.04711151]
[-21.84634590 84.97052002]
[-6.87479591 85.89393616]
[8.09675407 86.81735229]
[23.06830406 87.74076080]
[38.03985214 88.66417694]
[53.01140213 89.58759308]
[67.98295593 90.51100159]
[73.18889618 80.09278870]
[81.65605927 72.09601593]
[92.35451508 67.49340057]
[103.98294830 66.84477997]
[115.12690735 70.22905731]
[124.43087769 77.23457336]
[137.42124939 69.73457336]
[150.17451477 61.83809280]
[162.67854309 53.55261612]
[169.90858459 39.48005295]
[184.79188538 38.89978409]
[197.29592896 30.61431122]
[204.52597046 16.54174805]
[219.40927124 15.96148014]
[231.91329956 7.67600536]
[239.14334106 -6.39655828]
[254.02664185 -6.97682571]
[266.53067017 -15.26230049]
[276.39443970 -29.05152512]
[292.37533569 -23.39048958]
[291.35946655 -6.46700335]
[274.81616211 -2.75826454]
[262.31210327 5.52721024]
[255.97644043 19.00714111]
[240.19877625 20.18004036]
[227.69474792 28.46551514]
[221.35906982 41.94544601]
[205.58140564 43.11834717]
[193.07736206 51.40382004]
[186.74169922 64.88375092]
[170.96401978 66.05665588]
[158.45999146 74.34212494]
[156.63072205 78.92622375]
[151.80497742 82.32787323]
[144.92124939 82.72495270]
[131.93087769 90.22495270]
[133.37815857 98.98486328]
[132.46589661 107.81653595]
[129.25854492 116.09564209]
[123.98286438 123.23691559]
[117.01179504 128.73553467]
[121.55908966 143.02966309]
[126.10637665 157.32379150]
[130.65367126 171.61791992]
[145.73553467 174.22477722]
[157.87135315 183.55111694]
[164.27236938 197.45384216]
[163.46771240 212.73817444]
[155.64225769 225.89192200]
[142.59423828 233.89242554]
[127.32202148 234.90122986]
[113.33502197 228.68653870]
[103.84735870 216.67642212]
[101.03923798 201.63072205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[22 37]
[23 36]
[24 35]
[25 34]
[27 33]
[28 32]
[53 83]
[54 82]
[55 79]
[56 78]
[58 76]
[59 75]
[61 73]
[62 72]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
