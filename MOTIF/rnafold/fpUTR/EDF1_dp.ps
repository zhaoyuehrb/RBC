%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:41 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (EDF1)
} def

/sequence { (\
GAGGGGACGUAGCGUCGCCGCGCCAGGUCUCUAGCAGCUGCCGCUGAGCCGCCGGACGGACGCUCGUCUUCGCCCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 71 0.095038485 ubox
2 70 0.089844424 ubox
3 69 0.045481229 ubox
3 70 0.009646401 ubox
3 71 0.902129177 ubox
3 74 0.100473146 ubox
3 75 0.383990305 ubox
3 78 0.017012729 ubox
4 68 0.031178692 ubox
4 69 0.012774315 ubox
4 70 0.905535153 ubox
4 71 0.046377809 ubox
4 73 0.100337541 ubox
4 74 0.384265827 ubox
4 75 0.037674397 ubox
4 77 0.017002733 ubox
4 78 0.003491529 ubox
5 67 0.014964078 ubox
5 68 0.011981439 ubox
5 69 0.922814650 ubox
5 70 0.033881845 ubox
5 71 0.025428976 ubox
5 73 0.372569313 ubox
5 74 0.037331012 ubox
5 75 0.006150265 ubox
5 77 0.003426710 ubox
6 67 0.007267670 ubox
6 68 0.997158364 ubox
6 69 0.007536606 ubox
6 70 0.007875640 ubox
6 71 0.055626802 ubox
6 73 0.030468237 ubox
6 74 0.005029029 ubox
7 67 0.998693387 ubox
7 69 0.005520858 ubox
7 70 0.042462256 ubox
8 66 0.999891365 ubox
8 72 0.004855449 ubox
9 65 0.999158565 ubox
9 71 0.004793527 ubox
11 64 0.986159811 ubox
12 63 0.999973267 ubox
13 62 0.999979257 ubox
14 61 0.999860903 ubox
15 59 0.364582847 ubox
15 60 0.929773599 ubox
16 58 0.697537837 ubox
16 59 0.715133858 ubox
17 28 0.008575087 ubox
17 41 0.003272032 ubox
17 57 0.915318563 ubox
18 27 0.008981547 ubox
18 40 0.003285622 ubox
18 55 0.997449752 ubox
18 59 0.022377848 ubox
19 26 0.009019740 ubox
19 54 0.997950122 ubox
19 58 0.027047167 ubox
20 38 0.003473812 ubox
20 52 0.043507351 ubox
20 53 0.996425170 ubox
20 57 0.026983510 ubox
21 37 0.003477509 ubox
21 51 0.061466821 ubox
21 54 0.040561815 ubox
21 58 0.034302260 ubox
22 35 0.004188862 ubox
22 49 0.017714535 ubox
22 50 0.031974387 ubox
22 52 0.992228259 ubox
22 53 0.039408227 ubox
22 57 0.034423410 ubox
23 34 0.004639332 ubox
23 48 0.023846424 ubox
23 51 0.987973011 ubox
23 55 0.046113515 ubox
24 46 0.021390047 ubox
24 54 0.045972627 ubox
25 32 0.008159780 ubox
25 45 0.020891338 ubox
26 31 0.008464057 ubox
26 42 0.012056488 ubox
26 44 0.017886729 ubox
26 45 0.009246307 ubox
26 50 0.992378697 ubox
26 53 0.042642494 ubox
27 41 0.013437235 ubox
27 44 0.009593952 ubox
27 49 0.997726419 ubox
27 52 0.042706933 ubox
28 40 0.013227834 ubox
28 43 0.009717184 ubox
28 47 0.023321740 ubox
28 48 0.193337198 ubox
28 51 0.041638129 ubox
29 37 0.005181754 ubox
29 46 0.026135590 ubox
29 48 0.978862374 ubox
29 58 0.004815139 ubox
30 36 0.005004676 ubox
30 47 0.988471303 ubox
30 56 0.008245594 ubox
31 37 0.011913218 ubox
31 46 0.967285279 ubox
31 48 0.039620750 ubox
31 55 0.008697783 ubox
32 36 0.010756499 ubox
32 40 0.010908849 ubox
32 46 0.192152573 ubox
32 47 0.040050110 ubox
32 54 0.008536529 ubox
33 39 0.011558588 ubox
33 45 0.944624217 ubox
34 38 0.011349873 ubox
34 41 0.115685276 ubox
34 44 0.965029401 ubox
34 52 0.009064665 ubox
35 40 0.115832426 ubox
35 43 0.964493383 ubox
35 46 0.155978539 ubox
35 51 0.009060243 ubox
36 45 0.229841924 ubox
37 44 0.231391764 ubox
37 49 0.009291225 ubox
38 43 0.231081608 ubox
38 48 0.009296839 ubox
39 47 0.009256753 ubox
42 58 0.003285667 ubox
43 57 0.003316898 ubox
44 55 0.003362552 ubox
45 54 0.003361770 ubox
46 53 0.003355097 ubox
3 71 0.9500000 lbox
4 70 0.9500000 lbox
5 69 0.9500000 lbox
6 68 0.9500000 lbox
7 67 0.9500000 lbox
8 66 0.9500000 lbox
9 65 0.9500000 lbox
11 64 0.9500000 lbox
12 63 0.9500000 lbox
13 62 0.9500000 lbox
14 61 0.9500000 lbox
15 60 0.9500000 lbox
16 58 0.9500000 lbox
17 57 0.9500000 lbox
18 55 0.9500000 lbox
19 54 0.9500000 lbox
20 53 0.9500000 lbox
22 52 0.9500000 lbox
23 51 0.9500000 lbox
26 50 0.9500000 lbox
27 49 0.9500000 lbox
29 48 0.9500000 lbox
30 47 0.9500000 lbox
31 46 0.9500000 lbox
33 45 0.9500000 lbox
34 44 0.9500000 lbox
35 43 0.9500000 lbox
showpage
end
%%EOF
