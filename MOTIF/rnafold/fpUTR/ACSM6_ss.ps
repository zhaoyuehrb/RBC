%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAAACUAUAAGAGGUAAGCAGUUCUCAGAGGAGACAGAAGGCAACAGCUCUACCAUCCUCCAAACAUCUGAAGCCCCCCAUAGAAACUCCUCUUGGAAUUGGUGGUUCCCUGUCUGACCCAA\
) } def
/len { sequence length } bind def

/coor [
[83.38780212 445.04409790]
[69.48504639 439.26422119]
[57.08802414 430.71975708]
[46.73868942 419.78427124]
[38.88946152 406.93579102]
[33.88348007 392.73602295]
[31.93958473 377.80566406]
[33.14275360 362.79748535]
[37.44038773 348.36752319]
[44.64461517 335.14657593]
[54.44049454 323.71267700]
[66.39979553 314.56561279]
[79.99971008 308.10525513]
[94.64570618 304.61407471]
[94.27175140 289.61871338]
[93.89778900 274.62338257]
[85.84558868 262.09295654]
[93.23644257 248.10418701]
[92.86248016 233.10885620]
[84.28263855 224.48454285]
[83.91181183 211.92250061]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[92.50000000 -2.20349932]
[75.06068420 -8.62832642]
[61.35101318 -21.12887573]
[53.37546539 -37.84479523]
[52.28781509 -56.30184937]
[58.22427750 -73.77814484]
[70.28699493 -87.70552826]
[86.67974854 -96.04697418]
[84.81459045 -110.93056488]
[82.94944000 -125.81415558]
[70.75510406 -135.50621033]
[69.07559204 -150.62684631]
[78.39063263 -162.19256592]
[76.52547455 -177.07614136]
[74.66032410 -191.95973206]
[59.74778748 -194.36660767]
[46.11800766 -200.87858582]
[34.87588882 -210.96775818]
[26.93277359 -223.81623840]
[22.93257713 -238.38247681]
[23.19957733 -253.48562622]
[27.71213150 -267.90136719]
[36.10442352 -280.46105957]
[47.69613266 -290.14657593]
[61.54756927 -296.17272949]
[76.53585815 -298.05099487]
[91.44596100 -295.62915039]
[105.06919098 -289.10348511]
[116.30117035 -279.00302124]
[124.23137665 -266.14654541]
[128.21693420 -251.57630920]
[127.93476105 -236.47343445]
[123.40773010 -222.06224060]
[115.00282288 -209.51097107]
[103.40139008 -199.83711243]
[89.54390717 -193.82489014]
[91.40906525 -178.94129944]
[93.27422333 -164.05770874]
[105.15513611 -155.14820862]
[107.25869751 -140.08070374]
[97.83302307 -127.67930603]
[99.69818115 -112.79572296]
[101.56333923 -97.91213226]
[113.18611908 -96.13624573]
[124.03694153 -91.57733917]
[133.45951843 -84.50482941]
[140.88240051 -75.34034729]
[145.85366821 -64.63262177]
[148.06840515 -53.02460098]
[147.38737488 -41.21486282]
[143.84584045 -29.91556740]
[137.65168762 -19.80952263]
[129.17330933 -11.50890541]
[118.91767883 -5.51819277]
[107.50000000 -2.20349932]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[117.08818817 217.86473083]
[107.85781860 232.73489380]
[108.23178101 247.73022461]
[116.31072235 261.33322144]
[108.89312744 274.24942017]
[109.26708221 289.24475098]
[109.64104462 304.24011230]
[124.44285583 306.99691772]
[138.34788513 312.77133179]
[150.74826050 321.31091309]
[161.10189819 332.24230957]
[168.95619202 345.08770752]
[173.96775818 359.28552246]
[175.91752625 374.21508789]
[174.72026062 389.22375488]
[170.42829895 403.65542603]
[163.22927856 416.87918091]
[153.43789673 428.31695557]
[141.48219299 437.46871948]
[127.88481903 443.93441772]
[113.24019623 447.43136597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 111]
[15 110]
[16 109]
[18 107]
[19 106]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[43 78]
[44 77]
[45 76]
[48 73]
[49 72]
[50 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
