%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAGAGUUUCAGUUUUGGCAGCAGCGUCCAGUGCCCUGCCAGUAGCUCCUAGAGAGGCAGGGGUUACCAACUGGCCAGCAGGCUGUGUCCCUGAAGUCAGAUCAACGGGAGAGAAGGAAGUGGCUAAAACAUUGCACAGGAGAAGUCGGCCUGAGUGGUGCGGCGCUCGGGACCCACCAGCA\
) } def
/len { sequence length } bind def

/coor [
[180.46527100 232.45077515]
[183.33932495 216.92619324]
[190.87617493 203.03080750]
[180.49708557 192.20146179]
[170.11801147 181.37213135]
[159.73892212 170.54278564]
[145.34643555 166.70799255]
[141.38356018 151.39112854]
[131.00447083 140.56179810]
[120.62538910 129.73245239]
[110.24630737 118.90310669]
[117.41555023 132.07891846]
[113.89878082 146.66084290]
[101.51171875 155.12019348]
[86.64982605 153.08938599]
[76.98632812 141.61694336]
[77.51052094 126.62611389]
[87.95361328 115.85581970]
[75.04897308 123.50239563]
[62.14432907 131.14898682]
[49.23968887 138.79556274]
[36.33504486 146.44213867]
[23.43040276 154.08872986]
[19.47564507 166.38133240]
[8.55104637 172.48075867]
[-3.20923281 169.58781433]
[-16.24185944 177.01416016]
[-29.27448654 184.44050598]
[-34.88406754 199.47088623]
[-50.17696762 204.31925964]
[-63.42177963 195.26638794]
[-64.45821381 179.25685120]
[-52.49121475 168.57179260]
[-36.70083237 171.40788269]
[-23.66820717 163.98153687]
[-10.63558102 156.55519104]
[-2.61836195 140.95552063]
[15.78382111 141.18408203]
[28.68846321 133.53750610]
[41.59310532 125.89091492]
[54.49774933 118.24433899]
[67.40238953 110.59775543]
[80.30703735 102.95117188]
[78.90808868 88.01655579]
[64.80786896 82.89955139]
[50.70764160 77.78254700]
[36.60742188 72.66555023]
[22.50719643 67.54854584]
[8.40697384 62.43154144]
[-5.69324923 57.31454086]
[-19.79347229 52.19754028]
[-33.89369583 47.08053589]
[-46.67384720 55.88095093]
[-62.18507767 55.45499802]
[-74.46299744 45.96646118]
[-78.78649139 31.06387711]
[-73.49310303 16.47759628]
[-60.61823273 7.81633806]
[-45.11253738 8.41053486]
[-32.93827438 18.03170586]
[-28.77669334 32.98031235]
[-14.67646980 38.09731674]
[-0.57624716 43.21431732]
[13.52397633 48.33131790]
[27.62419891 53.44832230]
[41.72442245 58.56532288]
[55.82464600 63.68232727]
[69.92486572 68.79932404]
[84.02509308 73.91632843]
[90.72203827 70.53980255]
[83.96918488 57.14580917]
[97.36328125 50.39316559]
[104.11592102 63.78674698]
[110.81286621 60.41021729]
[115.08327484 46.03094101]
[119.35367584 31.65166092]
[123.62408447 17.27238274]
[127.89448547 2.89310503]
[132.16490173 -11.48617268]
[122.02185822 -21.13652802]
[117.05464935 -34.15527725]
[118.18081665 -47.97743225]
[125.12334442 -59.90594864]
[136.47589111 -67.63799286]
[149.98735046 -69.70944214]
[154.50131226 -84.01412964]
[144.26225281 -97.46362305]
[144.05084229 -114.19970703]
[153.75253296 -127.63426971]
[169.38932800 -132.59658813]
[173.65972900 -146.97586060]
[177.93013000 -161.35514832]
[182.20054626 -175.73442078]
[186.22616577 -190.18414307]
[190.00582886 -204.70013428]
[193.78550720 -219.21612549]
[184.57887268 -231.85621643]
[185.70265198 -247.45336914]
[196.62623596 -258.64309692]
[212.19181824 -260.14190674]
[225.04981995 -251.24215698]
[229.12910461 -236.14601135]
[222.50352478 -221.98141479]
[208.30149841 -215.43646240]
[204.52182007 -200.92045593]
[200.74215698 -186.40446472]
[202.35617065 -181.88749695]
[201.13359070 -176.30804443]
[196.57981873 -171.46401978]
[192.30941772 -157.08473206]
[188.03900146 -142.70545959]
[183.76860046 -128.32617188]
[192.84350586 -118.51671600]
[195.90521240 -105.39756012]
[192.04838562 -92.37675476]
[182.17938232 -82.89133453]
[168.80599976 -79.50016785]
[164.29203796 -65.19548035]
[175.48957825 -53.55984497]
[179.31973267 -37.77561951]
[174.64680481 -22.12212372]
[162.65368652 -10.89237404]
[146.54417419 -7.21576738]
[142.27377319 7.16351080]
[138.00335693 21.54278946]
[133.73295593 35.92206573]
[129.46255493 50.30134583]
[125.19214630 64.68062592]
[121.07564545 108.52402496]
[131.45472717 119.35337067]
[141.83381653 130.18270874]
[152.21289062 141.01205444]
[167.34776306 145.62142944]
[170.56826782 160.16369629]
[180.94734192 170.99304199]
[191.32643127 181.82238770]
[201.70552063 192.65171814]
[214.56141663 186.14440918]
[228.71510315 183.53025818]
[243.01560974 185.01274109]
[256.30261230 190.46253967]
[267.50054932 199.42875671]
[275.70574951 211.17633057]
[280.25924683 224.74613953]
[280.79983521 239.03341675]
[277.29257202 252.87763977]
[270.03097534 265.15679932]
[280.22467041 276.16082764]
[295.27908325 281.02655029]
[298.25219727 295.62139893]
[308.44589233 306.62542725]
[318.73263550 317.54251099]
[329.11172485 328.37185669]
[339.49081421 339.20117188]
[349.86990356 350.03051758]
[360.24896240 360.85986328]
[370.62805176 371.68920898]
[381.00714111 382.51855469]
[391.38623047 393.34790039]
[407.19027710 393.43273926]
[418.24591064 404.72647095]
[417.99398804 420.52874756]
[406.58398438 431.46435547]
[390.78524780 431.04537964]
[379.97088623 419.52038574]
[380.55688477 403.72695923]
[370.17779541 392.89764404]
[359.79870605 382.06829834]
[349.41964722 371.23895264]
[339.04055786 360.40960693]
[328.66146851 349.58026123]
[318.28237915 338.75091553]
[307.90328979 327.92156982]
[300.98931885 325.26196289]
[297.44186401 316.81912231]
[287.24816895 305.81509399]
[272.92288208 301.73645020]
[269.22064209 286.35452271]
[259.02694702 275.35049438]
[244.89001465 282.06954956]
[229.34986877 284.09719849]
[213.92401123 281.22338867]
[200.12245178 273.71719360]
[189.29997253 262.30184937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 137]
[4 136]
[5 135]
[6 134]
[8 132]
[9 131]
[10 130]
[11 129]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[26 36]
[27 35]
[28 34]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[74 128]
[75 127]
[76 126]
[77 125]
[78 124]
[79 123]
[85 118]
[86 117]
[90 112]
[91 111]
[92 110]
[93 109]
[94 106]
[95 105]
[96 104]
[147 179]
[148 178]
[150 176]
[151 175]
[152 173]
[153 172]
[154 171]
[155 170]
[156 169]
[157 168]
[158 167]
[159 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
