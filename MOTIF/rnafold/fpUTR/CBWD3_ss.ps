%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUGGCGUGCUGGGCGUGCGCGGCUGCGGUACGGCGUGUUGGUCCCAGCGGUUCAGCUGAGGUAGGGACGUGCUGUAGGCCGGA\
) } def
/len { sequence length } bind def

/coor [
[45.32634735 162.97612000]
[37.56190109 164.02156067]
[30.01598358 162.18980408]
[23.70885849 157.78042603]
[10.06437969 164.01165771]
[-3.58010054 170.24287415]
[-12.91898823 183.01377869]
[-27.71031189 181.26278687]
[-41.35479355 187.49400330]
[-54.99927139 193.72523499]
[-68.64375305 199.95645142]
[-82.28823090 206.18768311]
[-95.93270874 212.41889954]
[-102.86383057 226.88746643]
[-118.52900696 230.34893799]
[-130.91125488 220.14797974]
[-130.51197815 204.10989380]
[-117.63745880 194.53773499]
[-102.16394043 198.77442932]
[-88.51945496 192.54319763]
[-74.87497711 186.31198120]
[-61.23049927 180.08074951]
[-47.58601761 173.84951782]
[-33.94153595 167.61830139]
[-25.57859421 155.29310608]
[-9.81132603 156.59840393]
[3.83315420 150.36717224]
[17.47763443 144.13595581]
[27.79909515 124.23718262]
[50.90439606 124.95716858]
[63.22570801 116.40232849]
[75.54701996 107.84748840]
[87.86833191 99.29264832]
[99.87644958 90.30348206]
[111.55606842 80.89144897]
[123.23569489 71.47941589]
[134.91531372 62.06737900]
[146.59494019 52.65534210]
[158.27456665 43.24330902]
[169.95419312 33.83127213]
[181.63380432 24.41923714]
[193.31343079 15.00720215]
[204.99305725 5.59516668]
[203.87910461 -11.17286396]
[212.81950378 -25.20736694]
[228.17976379 -31.16596031]
[243.92758179 -26.91774940]
[255.26382446 -36.74066162]
[266.42294312 -46.76434708]
[277.40133667 -56.98561478]
[288.37976074 -67.20688629]
[299.35818481 -77.42815399]
[299.67172241 -93.22933197]
[311.12429810 -104.12035370]
[326.92126465 -103.63976288]
[337.69061279 -92.07268524]
[337.04302979 -76.28166962]
[325.36273193 -65.63523865]
[309.57946777 -66.44973755]
[298.60104370 -56.22846603]
[287.62261963 -46.00719833]
[276.64419556 -35.78593063]
[273.83111572 -28.76515388]
[265.08673096 -25.40441704]
[253.75048828 -15.58150578]
[256.11868286 -2.31541967]
[251.53126526 10.47138977]
[241.10391235 19.34778214]
[227.53439331 21.87474632]
[214.40509033 17.27478981]
[202.72546387 26.68682480]
[191.04583740 36.09886169]
[179.36622620 45.51089478]
[167.68659973 54.92293167]
[156.00697327 64.33496857]
[144.32734680 73.74700165]
[132.64773560 83.15903473]
[120.96810913 92.57106781]
[109.28848267 101.98310852]
[107.50124359 107.17847443]
[102.83465576 110.90505981]
[96.42317200 111.61396027]
[84.10186005 120.16880035]
[71.78054810 128.72363281]
[59.45923615 137.27847290]
[59.87227631 145.38027954]
[57.33438492 153.01225281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[30 85]
[31 84]
[32 83]
[33 82]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
