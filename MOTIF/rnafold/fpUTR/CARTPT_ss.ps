%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGGUUGACCCGGGCCCUCCUCCACACCCCCUUCCUUCUUCGCCUCCUCCCUCUUUCCUGCACGGGGGCUCGGGCUCACUAUAAAAGGUGGGAGCGCGUGGUGCCCCAGCAACGACGAGUUUCAGAACG\
) } def
/len { sequence length } bind def

/coor [
[70.66711426 194.35456848]
[56.46131897 189.53840637]
[44.51049042 180.47322083]
[36.04365540 168.09126282]
[31.93155670 153.66592407]
[32.59707642 138.68069458]
[37.97177887 124.67666626]
[47.50291824 113.09403992]
[60.21031570 105.12396240]
[74.78712463 101.58609009]
[89.73363495 102.84410095]
[76.56845093 95.65536499]
[63.40326691 88.46662903]
[50.23808289 81.27789307]
[37.07289886 74.08916473]
[23.90771294 66.90042877]
[10.74252892 59.71169281]
[-2.42265606 52.52295685]
[-15.58784103 45.33422089]
[-28.75302505 38.14548874]
[-41.91820908 30.95675278]
[-50.84552383 43.04049301]
[-61.33514404 53.79603577]
[-73.19165039 63.02300644]
[-86.19416809 70.54951477]
[-100.10046387 76.23534393]
[-114.65147400 79.97457886]
[-129.57612610 81.69754791]
[-144.59637451 81.37216187]
[-159.43240356 79.00447845]
[-173.80783081 74.63861084]
[-187.45484924 68.35588837]
[-200.11921692 60.27334976]
[-211.56501770 50.54157639]
[-221.57902527 39.34186172]
[-229.97467041 26.88285255]
[-236.59553528 13.39664650]
[-241.31831360 -0.86551243]
[-244.05499268 -15.63792992]
[-244.75460815 -30.64540482]
[-243.40411377 -45.60835648]
[-240.02868652 -60.24803543]
[-234.69117737 -74.29170990]
[-227.49105835 -87.47776031]
[-218.56243896 -99.56053925]
[-208.07165527 -110.31494141]
[-196.21414185 -119.54062653]
[-183.21081543 -127.06573486]
[-169.30390930 -132.75006104]
[-154.75248718 -136.48771667]
[-139.82765198 -138.20907593]
[-124.80744171 -137.88206482]
[-109.97166443 -135.51277161]
[-95.59671021 -131.14533997]
[-81.95037079 -124.86114502]
[-69.28687286 -116.77723694]
[-57.84212494 -107.04422760]
[-47.82933807 -95.84342957]
[-39.43504715 -83.38350677]
[-32.81562805 -69.89658356]
[-28.09439850 -55.63391495]
[-25.35931396 -40.86119843]
[-24.66132545 -25.85364914]
[-26.01343536 -10.89084435]
[-29.39045715 3.74846888]
[-34.72947693 17.79156876]
[-21.56429100 24.98030281]
[-8.39910603 32.16903687]
[4.76607895 39.35777283]
[17.93126297 46.54650879]
[31.09644890 53.73524094]
[44.26163483 60.92397690]
[57.42681885 68.11270905]
[70.59200287 75.30144501]
[83.75718689 82.49018097]
[96.92237091 89.67891693]
[98.08487701 83.72801208]
[101.21990967 78.03543091]
[106.24451447 73.10280609]
[118.25263214 64.11363983]
[130.26075745 55.12447739]
[142.26887512 46.13531113]
[144.26968384 30.45818710]
[156.82083130 20.85379410]
[172.47592163 23.02025223]
[181.94708252 35.67223740]
[179.61523438 51.30355072]
[166.86381531 60.64041519]
[151.25802612 58.14343262]
[139.24990845 67.13259888]
[127.24179840 76.12176514]
[115.23368073 85.11092377]
[116.48172760 100.05891418]
[129.81425476 106.93231201]
[143.14678955 113.80570984]
[156.47932434 120.67910767]
[169.81185913 127.55250549]
[185.62338257 126.99892426]
[193.39039612 139.70808411]
[206.72291565 146.58148193]
[220.05545044 153.45487976]
[235.86697388 152.90130615]
[243.63398743 165.61045837]
[256.96652222 172.48385620]
[270.37988281 179.19812012]
[283.87222290 185.75228882]
[300.18206787 184.04330444]
[309.59677124 197.47074890]
[302.43124390 212.22158813]
[286.05679321 213.12144470]
[277.31805420 199.24461365]
[263.82574463 192.69044495]
[256.36206055 192.59658813]
[250.09312439 185.81639099]
[236.76058960 178.94299316]
[221.90269470 179.98820496]
[213.18205261 166.78741455]
[199.84951782 159.91401672]
[186.51699829 153.04061890]
[171.65910339 154.08583069]
[162.93846130 140.88504028]
[149.60592651 134.01164246]
[136.27339172 127.13824463]
[122.94086456 120.26484680]
[109.60832977 113.39144897]
[119.02810669 125.06482697]
[124.26844025 139.11968994]
[124.79041290 154.11059570]
[120.54034424 168.49589539]
[111.95531464 180.79618835]
[99.91821289 189.74650574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[79 92]
[80 91]
[81 90]
[82 89]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[99 119]
[100 118]
[101 117]
[103 115]
[104 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
