%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGUCUGGCCGGCGCUUUAUAGCUGCAGCCUGGGCGGCUCCGCUAGCUGUUUUUCGUCUUCCCUAGGCUAUUUCUGCCGGGCGCUCCGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[88.00654602 289.02661133]
[89.85612488 273.91043091]
[97.69966888 260.85675049]
[110.17823792 252.12718201]
[107.28166962 237.40951538]
[104.38510132 222.69184875]
[101.48853302 207.97416687]
[98.59195709 193.25650024]
[95.69538879 178.53881836]
[92.79882050 163.82115173]
[89.90225220 149.10348511]
[87.00568390 134.38580322]
[74.35118866 126.33200836]
[59.79154587 129.93988037]
[45.23189926 133.54776001]
[30.67225647 137.15562439]
[24.96376038 151.58451843]
[11.84638882 159.87391663]
[-3.63596177 158.83639526]
[-15.53001118 148.87089539]
[-19.26225471 133.80935669]
[-13.39756966 119.44323730]
[-0.19104552 111.29662323]
[15.27913857 112.50204468]
[27.06438065 122.59598541]
[41.62402725 118.98811340]
[56.18367004 115.38023376]
[70.74331665 111.77236176]
[75.28578949 85.63011932]
[96.55128479 74.59293365]
[98.96974945 59.78918457]
[101.38821411 44.98543549]
[103.80667877 30.18168449]
[106.22513580 15.37793350]
[108.64360046 0.57418269]
[111.06206512 -14.22956753]
[113.48052979 -29.03331947]
[112.99480438 -44.02545166]
[109.62316895 -58.64160919]
[106.25153351 -73.25776672]
[102.87989807 -87.87392426]
[99.50825500 -102.49008179]
[86.72142792 -112.17907715]
[86.46819305 -128.22013855]
[98.94281006 -138.30792236]
[114.57582092 -134.70396423]
[121.37491608 -120.17289734]
[114.12441254 -105.86171722]
[117.49605560 -91.24555969]
[120.86769104 -76.62940216]
[124.23932648 -62.01324463]
[127.61096191 -47.39708710]
[134.67858887 -60.62768555]
[146.67640686 -69.63058472]
[161.35522461 -72.71804810]
[175.96322632 -69.31125641]
[187.76188660 -60.04888916]
[194.53935242 -46.66733170]
[195.02505493 -31.67519951]
[189.12792969 -17.88302612]
[177.95352173 -7.87640381]
[163.59664917 -3.53124833]
[148.74877930 -5.66213608]
[136.19338989 -13.86959553]
[128.28428650 -26.61485481]
[125.86581421 -11.81110382]
[123.44735718 2.99264646]
[121.02889252 17.79639626]
[118.61042786 32.60014725]
[116.19196320 47.40390015]
[113.77349854 62.20764923]
[111.35503387 77.01139832]
[119.61772156 82.21063232]
[125.56238556 90.34575653]
[128.16415405 100.40373993]
[126.83344269 111.02316284]
[121.52976990 120.67832947]
[112.79882050 127.89827728]
[101.72335815 131.48924255]
[104.61992645 146.20690918]
[107.51649475 160.92459106]
[110.41306305 175.64225769]
[113.30963135 190.35992432]
[116.20619965 205.07760620]
[119.10276794 219.79527283]
[121.99933624 234.51295471]
[124.89591217 249.23062134]
[139.75181580 252.58050537]
[151.95697021 261.68844604]
[159.39672852 274.97637939]
[160.78213501 290.14215088]
[155.87313843 304.55816650]
[145.52026367 315.72677612]
[131.51721191 321.71295166]
[116.29007721 321.47955322]
[102.47707367 315.06698608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[13 28]
[14 27]
[15 26]
[16 25]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
