%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGGCGAGGAGGGUCCGGCCGGAGUUGAAGGAUUGAACUUUCCGGCUCAGUCGCGGCGUCUGCCUGGUCCUCAGCAGUGCAGCCCCGGCGCGGAGCAGGGAGCCUCGGCCCGCGCCCGGCGCCCUCGCCCUCGCCCUCGACCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[201.29194641 514.70251465]
[199.12933350 499.85925293]
[196.96670532 485.01596069]
[194.80409241 470.17269897]
[192.18241882 455.40356445]
[189.10418701 440.72280884]
[186.02595520 426.04205322]
[182.94772339 411.36129761]
[179.86949158 396.68057251]
[176.79125977 381.99981689]
[173.71302795 367.31906128]
[170.18121338 352.74078369]
[166.19920349 338.27896118]
[162.21717834 323.81716919]
[158.23516846 309.35537720]
[154.25315857 294.89358521]
[150.12190247 280.47372437]
[145.84187317 266.09729004]
[141.56182861 251.72088623]
[137.13343811 237.38946533]
[132.55718994 223.10458374]
[127.83357239 208.86775208]
[122.96308136 194.68049622]
[118.09259033 180.49324036]
[112.91335297 175.15429688]
[113.27134705 165.96215820]
[108.69509888 151.67727661]
[104.11885071 137.39237976]
[99.54261017 123.10749817]
[94.96636200 108.82260895]
[89.67179108 102.67197418]
[90.44645691 94.19499207]
[86.16641235 79.81858063]
[78.69123840 92.82326508]
[64.66644287 98.14351654]
[50.44668579 93.36873627]
[42.47496414 80.66236877]
[44.36327744 65.78170776]
[55.25602341 55.46918488]
[70.21768951 54.39743805]
[82.46976471 63.05299759]
[80.30715179 48.20971298]
[78.14453125 33.36642838]
[75.98191833 18.52314186]
[73.81929779 3.67985797]
[64.17320251 -8.86061382]
[69.99472046 -22.57043457]
[67.83210754 -37.41371918]
[65.66948700 -52.25700378]
[63.50687408 -67.10028839]
[60.18717957 -71.29156494]
[58.97322845 -75.88015747]
[59.65595627 -79.98130798]
[61.69992065 -82.92739868]
[60.46123123 -97.87616730]
[59.22253799 -112.82493591]
[57.98384857 -127.77370453]
[49.13336563 -140.88780212]
[55.79323196 -154.21054077]
[54.55453873 -169.15931702]
[42.30704880 -185.11824036]
[51.15540695 -202.26962280]
[49.30001831 -217.15443420]
[47.44462967 -232.03924561]
[45.58924103 -246.92405701]
[43.58012772 -261.78887939]
[41.41751480 -276.63217163]
[39.25489807 -291.47546387]
[25.45540047 -298.57147217]
[18.49238014 -312.43856812]
[21.04325867 -327.74453735]
[32.12717438 -338.60394287]
[47.48213196 -340.84109497]
[61.20383835 -333.59579468]
[68.01601410 -319.65399170]
[65.29924774 -304.37658691]
[54.09818268 -293.63809204]
[56.26079941 -278.79479980]
[58.42341232 -263.95150757]
[62.52590179 -257.74679565]
[60.47404861 -248.77944946]
[62.32943726 -233.89463806]
[64.18482971 -219.00982666]
[66.04021454 -204.12501526]
[74.69472504 -198.54882812]
[78.90828705 -188.91419983]
[77.05112457 -178.33995056]
[69.50331116 -170.39799500]
[70.74199677 -155.44923401]
[79.50388336 -143.40437317]
[72.93261719 -129.01239014]
[74.17131042 -114.06362915]
[75.40999603 -99.11486053]
[76.64868927 -84.16609192]
[78.35015869 -69.26290131]
[80.51277161 -54.41962051]
[82.67539215 -39.57633591]
[84.83800507 -24.73305130]
[94.32941437 -13.25427055]
[88.66258240 1.51724207]
[90.82520294 16.36052704]
[92.98781586 31.20381165]
[95.15043640 46.04709625]
[97.31304932 60.89038086]
[100.54282379 75.53853607]
[104.82286835 89.91494751]
[109.25125122 104.24636841]
[113.82749176 118.53125000]
[118.40373993 132.81613159]
[122.97998810 147.10102844]
[127.55622864 161.38591003]
[132.27984619 175.62274170]
[137.15034485 189.80999756]
[142.02082825 203.99725342]
[147.80264282 211.15228271]
[146.84208679 218.52833557]
[151.41833496 232.81323242]
[157.05102539 240.08621216]
[155.93823242 247.44084167]
[160.21827698 261.81726074]
[164.49832153 276.19366455]
[169.97950745 283.58151245]
[168.71495056 290.91156006]
[172.69697571 305.37338257]
[176.67898560 319.83517456]
[180.66099548 334.29696655]
[184.64300537 348.75875854]
[188.45564270 352.50723267]
[190.22784424 356.91043091]
[190.05764771 361.06451416]
[188.39378357 364.24081421]
[191.47201538 378.92156982]
[194.55024719 393.60232544]
[197.62847900 408.28308105]
[200.70671082 422.96383667]
[203.78492737 437.64459229]
[206.86315918 452.32534790]
[210.43618774 456.30285645]
[211.93214417 460.80740356]
[211.50486755 464.94299316]
[209.64738464 468.01007080]
[211.80999756 482.85336304]
[213.97261047 497.69662476]
[216.13522339 512.53991699]
[229.93472290 519.63592529]
[236.89775085 533.50305176]
[234.34686279 548.80902100]
[223.26295471 559.66839600]
[207.90798950 561.90557861]
[194.18629456 554.66027832]
[187.37411499 540.71844482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[12 127]
[13 126]
[14 125]
[15 124]
[16 123]
[17 121]
[18 120]
[19 119]
[20 117]
[21 116]
[22 114]
[23 113]
[24 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[32 106]
[33 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[47 98]
[48 97]
[49 96]
[50 95]
[54 94]
[55 93]
[56 92]
[57 91]
[59 89]
[60 88]
[62 84]
[63 83]
[64 82]
[65 81]
[66 79]
[67 78]
[68 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
