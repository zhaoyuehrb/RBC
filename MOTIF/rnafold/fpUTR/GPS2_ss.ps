%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCGGGCCCCGUCUGAGGUCUGGCAGUCAGAGACAGCCGGGCGCCCACGGCCCGAGCGCCCACGGCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[116.93414307 176.47737122]
[112.43076324 166.90724182]
[111.17150116 156.37524414]
[113.30379486 145.95391846]
[118.62873077 136.71054077]
[109.51754761 124.79473877]
[100.40637207 112.87893677]
[90.58345795 101.54268646]
[80.08559418 90.82845306]
[69.58773041 80.11421967]
[59.08986664 69.39998627]
[48.37563324 58.90211868]
[37.44948578 48.62499237]
[26.52333832 38.34786606]
[15.59719086 28.07074165]
[0.24386264 24.25159264]
[-3.72565961 9.89568329]
[-14.65180683 -0.38144249]
[-25.57795334 -10.65856838]
[-39.07544327 -8.70795631]
[-51.01592255 -14.88013268]
[-57.05091858 -26.67039871]
[-55.13273621 -39.57737350]
[-65.63059998 -50.29160690]
[-76.12846375 -61.00584412]
[-86.62633514 -71.72007751]
[-102.58932495 -73.32085419]
[-111.16914368 -86.87689209]
[-105.78409576 -101.98916626]
[-90.56511688 -107.06482697]
[-77.18691254 -98.21026611]
[-75.91209412 -82.21794128]
[-65.41423035 -71.50370789]
[-54.91636658 -60.78947067]
[-44.41850281 -50.07523727]
[-27.74167442 -50.70178604]
[-15.43545246 -38.94067764]
[-15.30082798 -21.58471489]
[-4.37468100 -11.30758953]
[6.55146599 -1.03046370]
[21.12328339 2.05359578]
[25.87431717 17.14459419]
[36.80046463 27.42172050]
[47.72660828 37.69884491]
[58.65275574 47.97597122]
[65.88552094 50.32983017]
[69.80410004 58.90211868]
[80.30196381 69.61635590]
[90.79982758 80.33058929]
[101.29769897 91.04482269]
[105.44107819 91.60047150]
[109.26219940 94.12740326]
[111.81900787 98.40471649]
[112.32218170 103.76775360]
[121.43335724 115.68356323]
[130.54454041 127.59936523]
[150.76191711 125.43329620]
[168.36320496 135.35116577]
[176.87335205 153.53125000]
[173.26252747 173.14508057]
[184.59877014 182.96800232]
[196.13302612 192.55761719]
[207.86050415 201.90997314]
[219.58796692 211.26231384]
[235.74133301 216.41062927]
[235.26591492 233.35791016]
[218.84931946 237.59254456]
[210.23562622 222.98979187]
[198.50814819 213.63743591]
[186.78068542 204.28509521]
[179.38011169 202.52861023]
[174.77586365 194.30424500]
[163.43962097 184.48132324]
[154.15939331 189.23217773]
[143.82461548 190.81871033]
[133.48706055 189.06015015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 56]
[6 55]
[7 54]
[8 50]
[9 49]
[10 48]
[11 47]
[12 45]
[13 44]
[14 43]
[15 42]
[17 40]
[18 39]
[19 38]
[23 35]
[24 34]
[25 33]
[26 32]
[60 73]
[61 72]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
