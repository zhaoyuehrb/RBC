%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACGAGUGGGAACGUAGCUGGUCGCAGAGGGCACCAGCGGCUGCAGGACUUCACCAAGGGACCCUGAGGCUCGUGAGCAGGGACCCGCGGUGCGGGUUAUGCUGGGGGCUCAGAUCACCGUAGACAACUGGACACUCAGGACCACGCC\
) } def
/len { sequence length } bind def

/coor [
[97.36244202 264.22546387]
[82.03385162 263.26107788]
[69.24999237 254.74822998]
[62.44965363 240.97685242]
[63.46208954 225.65136719]
[72.01496124 212.89424133]
[85.80759430 206.13710022]
[86.74945068 191.16670227]
[87.69130707 176.19630432]
[88.63316345 161.22590637]
[77.97772980 158.24806213]
[68.01744843 153.43156433]
[59.06671143 146.92848206]
[51.40806198 138.94406128]
[45.28325272 129.73034668]
[31.33660316 135.25221252]
[21.35381889 147.52635193]
[6.67201042 145.01762390]
[-7.27463722 150.53948975]
[-21.22128487 156.06135559]
[-35.16793060 161.58322144]
[-49.11457825 167.10508728]
[-63.06122589 172.62696838]
[-69.94351959 178.73551941]
[-77.35822296 178.11506653]
[-91.41744995 183.34364319]
[-99.37635040 197.27330017]
[-115.25077057 199.59330750]
[-126.86321259 188.52394104]
[-125.30560303 172.55668640]
[-111.77280426 163.94024658]
[-96.64603424 169.28440857]
[-82.58679962 164.05583191]
[-68.58309174 158.68031311]
[-54.63644791 153.15844727]
[-40.68980026 147.63658142]
[-26.74315262 142.11471558]
[-12.79650497 136.59283447]
[1.15014195 131.07096863]
[10.13537025 119.19178772]
[25.81473541 121.30557251]
[39.76138306 115.78369904]
[38.11712646 106.95169830]
[37.76081848 97.97501373]
[38.69987869 89.04048157]
[40.91475677 80.33403778]
[44.35935593 72.03689575]
[31.86553955 63.73602676]
[16.42453766 67.10515594]
[3.16907787 58.49885941]
[-0.03661134 43.02309799]
[8.70934868 29.85937119]
[24.21813393 26.81748009]
[37.28865814 35.70212555]
[40.16641235 51.24220657]
[52.66022873 59.54307938]
[74.97564697 42.97721481]
[102.27556610 37.76947784]
[129.12222290 44.95717621]
[137.68292236 32.63993835]
[146.11416626 20.23372841]
[154.41503906 7.73991013]
[152.63821411 -5.07891750]
[159.86320496 -15.32795906]
[171.74723816 -17.79776573]
[180.30793762 -30.11500359]
[188.86865234 -42.43224335]
[197.42935181 -54.74948120]
[205.99005127 -67.06671906]
[207.51252747 -82.81449890]
[221.12962341 -88.84970856]
[229.69033813 -101.16694641]
[238.25103760 -113.48418427]
[235.69657898 -124.14260864]
[239.38963318 -134.22752380]
[247.86799622 -140.45452881]
[258.15557861 -140.94007874]
[267.22454834 -152.88803101]
[276.29354858 -164.83596802]
[285.36254883 -176.78392029]
[284.39410400 -189.68902588]
[292.24838257 -199.46417236]
[304.26406860 -201.18290710]
[313.58126831 -212.93830872]
[322.89849854 -224.69371033]
[332.21569824 -236.44911194]
[341.53292847 -248.20451355]
[350.85012817 -259.95993042]
[360.16735840 -271.71533203]
[365.26733398 -287.88400269]
[382.21594238 -287.45928955]
[386.49966431 -271.05545044]
[371.92276001 -262.39810181]
[362.60552979 -250.64270020]
[353.28833008 -238.88729858]
[343.97109985 -227.13189697]
[334.65390015 -215.37649536]
[325.33666992 -203.62109375]
[316.01947021 -191.86569214]
[314.42868042 -174.41729736]
[297.31048584 -167.71493530]
[288.24148560 -155.76698303]
[279.17251587 -143.81903076]
[270.10351562 -131.87109375]
[269.16213989 -112.59652710]
[250.56826782 -104.92347717]
[242.00756836 -92.60623932]
[233.44686890 -80.28900146]
[232.53671265 -65.42223358]
[218.30729675 -58.50601578]
[209.74658203 -46.18877792]
[201.18588257 -33.87154007]
[192.62518311 -21.55430031]
[184.06448364 -9.23706245]
[183.57243347 8.27679157]
[166.90885925 16.04078293]
[158.60798645 28.53460121]
[157.51890564 35.89507675]
[150.00016785 41.20064163]
[141.43945312 53.51787949]
[149.19145203 61.81601334]
[155.30764771 71.38391113]
[159.58464050 81.90340424]
[161.88021851 93.02468872]
[162.11802673 104.37792206]
[160.29017639 115.58557129]
[156.45744324 126.27494049]
[150.74728394 136.09057617]
[143.34957886 144.70603943]
[152.41856384 156.65399170]
[161.48754883 168.60194397]
[170.55653381 180.54989624]
[185.87574768 186.40254211]
[188.19927979 202.63626099]
[175.13687134 212.55116272]
[160.12600708 205.94766235]
[158.60858154 189.61888123]
[149.53959656 177.67092896]
[140.47061157 165.72297668]
[131.40162659 153.77502441]
[122.61453247 158.02067566]
[113.27202606 160.84133911]
[103.60356140 162.16775513]
[102.66170502 177.13816833]
[101.71984863 192.10856628]
[100.77799225 207.07896423]
[113.61496735 215.51148987]
[120.50151062 229.23997498]
[119.58516693 244.57150269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 146]
[8 145]
[9 144]
[10 143]
[15 42]
[16 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[25 33]
[26 32]
[47 56]
[48 55]
[59 120]
[60 119]
[61 117]
[62 116]
[65 114]
[66 113]
[67 112]
[68 111]
[69 110]
[71 108]
[72 107]
[73 106]
[77 104]
[78 103]
[79 102]
[80 101]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
