%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCCGACAUGCCCUGCCACGGGUGCGCCUGCGUACCGGAGCUACUGCGCCGGGGAGCGGGUUGGUUUAAAAUGCUGUGUUAGUUCCACGGAAACCCGCUCGCCUGCUGCAGUACGGAGCCUCAGGCGGACAG\
) } def
/len { sequence length } bind def

/coor [
[60.23506165 284.02200317]
[51.75830078 296.39715576]
[37.68722916 301.59378052]
[23.20172310 297.69891357]
[13.63421440 286.14630127]
[12.50697231 271.18765259]
[2.92426968 282.72766113]
[-6.65843248 294.26766968]
[-3.25832081 305.77099609]
[-5.84866667 317.35986328]
[-13.66283894 326.14080811]
[-24.64516640 329.97976685]
[-35.99070740 328.02020264]
[-46.09614182 339.10534668]
[-52.29859924 354.88400269]
[-69.17762756 353.29190063]
[-72.32032776 336.63177490]
[-57.18127823 328.99990845]
[-47.07584381 317.91479492]
[-49.07379150 299.78381348]
[-37.04834747 285.64962769]
[-18.19844246 284.68496704]
[-8.61573982 273.14495850]
[0.96696228 261.60494995]
[9.44400883 249.22998047]
[16.74307632 236.12564087]
[16.17674446 221.24180603]
[29.65144920 212.95066833]
[36.95051575 199.84632874]
[44.24958420 186.74200439]
[51.54864883 173.63766479]
[58.84771729 160.53332520]
[66.14678192 147.42898560]
[64.89198303 129.96334839]
[80.68040466 120.56777954]
[87.67484283 107.29834747]
[87.32862854 93.32080078]
[99.05572510 85.70721436]
[106.05016327 72.43778229]
[113.04460144 59.16834641]
[112.69060516 54.63353729]
[113.74475098 50.65038681]
[115.84499359 47.60561371]
[118.53864288 45.72172928]
[121.34637451 45.04158783]
[129.53532410 32.47412872]
[137.72427368 19.90666389]
[145.91322327 7.33920240]
[154.10217285 -5.22826004]
[162.29112244 -17.79572296]
[170.33436584 -30.45692635]
[178.23085022 -43.21018219]
[178.91732788 -59.01649094]
[192.19575500 -65.76427460]
[200.09223938 -78.51753235]
[200.77870178 -94.32383728]
[214.05712891 -101.07161713]
[221.95361328 -113.82487488]
[229.85009766 -126.57813263]
[237.74658203 -139.33139038]
[245.64306641 -152.08464050]
[253.53955078 -164.83790588]
[261.43603516 -177.59115601]
[269.33251953 -190.34442139]
[277.22900391 -203.09767151]
[262.97052002 -198.43977356]
[248.13685608 -200.66740417]
[235.87547302 -209.30792236]
[228.78805542 -222.52793884]
[228.37844849 -237.52233887]
[234.73355103 -251.10955811]
[246.50492859 -260.40658569]
[261.19485474 -263.44076538]
[275.68634033 -259.56823730]
[286.90454102 -249.61071777]
[292.46911621 -235.68104553]
[291.19940186 -220.73507690]
[301.80599976 -231.34167480]
[312.41259766 -241.94828796]
[323.01919556 -252.55488586]
[333.62579346 -263.16149902]
[332.08273315 -278.72274780]
[340.94592285 -291.60598755]
[356.03039551 -295.72814941]
[370.21377563 -289.14285278]
[376.79907227 -274.95950317]
[372.67691040 -259.87500000]
[359.79367065 -251.01182556]
[344.23239136 -252.55488586]
[333.62579346 -241.94828796]
[323.01919556 -231.34167480]
[312.41259766 -220.73507690]
[301.80599976 -210.12847900]
[299.54980469 -200.63087463]
[289.98223877 -195.20118713]
[282.08575439 -182.44793701]
[274.18930054 -169.69467163]
[266.29281616 -156.94142151]
[258.39633179 -144.18815613]
[250.49983215 -131.43490601]
[242.60336304 -118.68164825]
[234.70687866 -105.92839050]
[226.81039429 -93.17513275]
[226.68873596 -78.28102875]
[212.84548950 -70.62104797]
[204.94900513 -57.86779022]
[204.82734680 -42.97368240]
[190.98411560 -35.31370163]
[183.08763123 -22.56044388]
[182.23330688 -15.15107632]
[174.85858154 -9.60677338]
[166.66963196 2.96068883]
[158.48068237 15.52815151]
[150.29173279 28.09561348]
[142.10278320 40.66307449]
[133.91383362 53.23053741]
[126.31403351 66.16278839]
[119.31959534 79.43222046]
[112.32515717 92.70165253]
[112.67137146 106.67919922]
[100.94427490 114.29278564]
[93.94983673 127.56221771]
[97.01482391 140.15122986]
[90.84502411 151.08532715]
[79.25112152 154.72805786]
[71.95205688 167.83239746]
[64.65298462 180.93673706]
[57.35391998 194.04106140]
[50.05485153 207.14540100]
[42.75578308 220.24974060]
[42.80003738 236.07087708]
[29.84741211 243.42471313]
[22.54834366 256.52905273]
[36.90296173 252.17645264]
[51.13184738 256.92395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[13 19]
[14 18]
[25 133]
[26 132]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[35 122]
[36 121]
[38 119]
[39 118]
[40 117]
[45 116]
[46 115]
[47 114]
[48 113]
[49 112]
[50 111]
[51 109]
[52 108]
[54 106]
[55 105]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
