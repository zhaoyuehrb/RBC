%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGCCAGGGCUGAGUGGCAGUGUGGGCACCGCGGCCCGGGACGACAGCCUGGGCUCAGAGUCAGGCUUGUGGCUUCGCCUCUCAGCUUGCGUCUCCUCCCCUGUGGGAUGGGGGAUUCCGUGGCACCCCCAUGAUGAACAGGAUGCC\
) } def
/len { sequence length } bind def

/coor [
[301.99926758 279.96499634]
[292.62139893 269.69433594]
[285.99002075 257.45782471]
[282.50021362 243.97428894]
[282.36221313 230.03721619]
[285.58898926 216.46789551]
[272.34640503 209.42276001]
[267.54141235 209.95919800]
[262.35754395 207.43753052]
[258.70846558 201.79911804]
[245.77040100 194.20921326]
[232.83235168 186.61930847]
[219.89430237 179.02938843]
[206.95623779 171.43948364]
[194.01818848 163.84957886]
[181.08012390 156.25967407]
[168.14207458 148.66975403]
[153.24929810 148.90354919]
[145.26116943 135.24703979]
[132.32310486 127.65712738]
[119.38505554 120.06721497]
[109.92212677 128.03895569]
[97.22813416 131.46250916]
[83.51137543 129.07614136]
[71.43935394 120.69042206]
[57.21257401 125.44423676]
[42.98579407 130.19804382]
[28.75901604 134.95187378]
[15.65257168 145.70628357]
[1.69021761 136.08915710]
[7.06633282 120.01017761]
[24.00520134 120.72509003]
[38.23197937 115.97127533]
[52.45875931 111.21746063]
[66.68553925 106.46364594]
[67.15357971 91.47094727]
[53.25102615 85.83898926]
[39.34846878 80.20703125]
[25.44591141 74.57507324]
[11.54335594 68.94312286]
[-2.35919976 63.31116486]
[-16.26175499 57.67920685]
[-30.16431236 52.04724884]
[-43.89254379 59.53522110]
[-59.21185684 56.39634323]
[-68.88894653 44.11269760]
[-68.35458374 28.48424721]
[-57.86108017 16.89026642]
[-42.36314392 14.80508137]
[-29.17843056 23.21325111]
[-24.53235435 38.14469528]
[-10.62979889 43.77664948]
[3.27275681 49.40860748]
[17.17531204 55.04056549]
[31.07786942 60.67251968]
[44.98042679 66.30447388]
[58.88298035 71.93643188]
[72.78553772 77.56838989]
[77.35781097 76.25202179]
[81.83000946 75.68177032]
[86.09252167 75.81208038]
[82.38636017 61.27714157]
[78.68019867 46.74220276]
[74.97403717 32.20726776]
[71.26787567 17.67233276]
[67.56171417 3.13739586]
[53.84547424 -4.71374035]
[49.77889633 -19.98588753]
[57.77461243 -33.61835480]
[73.08889771 -37.52323532]
[86.63607025 -29.38383865]
[90.37882233 -14.02912140]
[82.09664917 -0.56876540]
[85.80281067 13.96617031]
[89.50897217 28.50110626]
[93.21513367 43.03604126]
[96.92129517 57.57098007]
[100.62745667 72.10591888]
[122.29641724 83.22670746]
[126.97496796 107.12916565]
[139.91302490 114.71907043]
[152.85107422 122.30898285]
[168.66926575 122.61807251]
[175.73197937 135.73170471]
[188.67002869 143.32160950]
[201.60809326 150.91151428]
[214.54614258 158.50143433]
[227.48420715 166.09133911]
[240.42225647 173.68124390]
[253.36032104 181.27114868]
[266.29837036 188.86106873]
[279.39154053 196.18016052]
[292.63412476 203.22529602]
[303.87994385 191.50259399]
[317.94561768 183.40344238]
[333.70263672 179.56867981]
[349.88925171 180.29733276]
[365.21166992 185.52339172]
[378.44726562 194.82164001]
[388.54226685 207.44226074]
[394.69555664 222.37130737]
[396.42242432 238.41217041]
[393.59243774 254.28146362]
[407.11663818 260.76962280]
[420.64083862 267.25778198]
[434.16500854 273.74597168]
[447.68920898 280.23413086]
[463.31729126 271.14700317]
[481.12176514 273.19226074]
[494.05447388 285.37197876]
[497.10855103 302.71383667]
[510.89093018 308.63381958]
[524.67327881 314.55377197]
[538.45568848 320.47372437]
[552.23803711 326.39370728]
[566.02044678 332.31365967]
[579.80285645 338.23361206]
[591.64660645 328.53912354]
[606.64135742 325.47048950]
[621.34136963 329.73287964]
[632.36871338 340.34686279]
[637.18933105 354.87338257]
[634.69555664 369.97436523]
[625.46044922 382.17971802]
[611.60607910 388.68472290]
[596.31610107 387.99459839]
[583.10412598 380.26794434]
[575.00610352 367.28024292]
[573.88287354 352.01599121]
[560.10046387 346.09603882]
[546.31811523 340.17608643]
[532.53570557 334.25610352]
[518.75335693 328.33615112]
[504.97094727 322.41619873]
[491.18856812 316.49621582]
[481.72958374 324.22073364]
[469.80743408 327.18334961]
[457.69091797 324.75653076]
[447.71310425 317.34451294]
[441.82217407 306.31741333]
[441.20104980 293.75830078]
[427.67684937 287.27014160]
[414.15264893 280.78198242]
[400.62847900 274.29382324]
[387.10427856 267.80566406]
[378.20996094 278.40710449]
[367.01507568 286.55877686]
[354.17657471 291.77636719]
[340.44924927 293.74792480]
[326.64144897 292.35256958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 93]
[7 92]
[10 91]
[11 90]
[12 89]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[19 82]
[20 81]
[21 80]
[25 35]
[26 34]
[27 33]
[28 32]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[103 145]
[104 144]
[105 143]
[106 142]
[107 141]
[111 135]
[112 134]
[113 133]
[114 132]
[115 131]
[116 130]
[117 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
