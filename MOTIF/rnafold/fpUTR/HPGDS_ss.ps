%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUACUCGUCAUAUAAACCCAAGGCACAGUCACAUACCCAGGGAUACAAGACACUGCAGACUCCCGAGAGACAUAACACAGAAUUGCACC\
) } def
/len { sequence length } bind def

/coor [
[103.06516266 130.57231140]
[95.51822662 130.39695740]
[88.24182892 128.38673401]
[81.67519379 124.66298676]
[76.21471405 119.45049286]
[72.19000244 113.06389618]
[69.84399414 105.88871765]
[69.31832123 98.35807037]
[70.64469910 90.92653656]
[57.82840729 83.13277435]
[45.01211548 75.33901978]
[33.67453766 84.13672638]
[20.03282547 88.49360657]
[5.75469923 87.89869690]
[-7.42175531 82.44509888]
[-17.89966583 72.81608582]
[-24.41689301 60.19960403]
[-26.19804764 46.14169312]
[-23.04669380 32.35708618]
[-35.58942413 24.13031006]
[-48.13215637 15.90353107]
[-63.41661453 18.90737915]
[-76.01953888 10.38558006]
[-78.78905487 -4.20432663]
[-91.33178711 -12.43110466]
[-104.38478851 -4.52024126]
[-119.57836151 -3.06483459]
[-133.89579773 -8.35385609]
[-144.49436951 -19.33716774]
[-149.26971436 -33.83402252]
[-147.27368164 -48.96606445]
[-138.90260315 -61.72880936]
[-125.81853485 -69.58821106]
[-110.61935425 -70.98377228]
[-96.32286072 -65.63841248]
[-85.76762390 -54.61344910]
[-81.04940796 -40.09790039]
[-83.10500336 -24.97383690]
[-70.56227112 -16.74705887]
[-56.07686996 -20.01946068]
[-43.23956299 -11.85501385]
[-39.90538025 3.36079955]
[-27.36264801 11.58757782]
[-14.81991577 19.81435585]
[-1.95128703 10.73412514]
[13.44449997 7.23722696]
[29.04841042 9.88029861]
[42.49864197 18.29286766]
[51.74811172 31.22896385]
[55.37598038 46.75158691]
[52.80587387 62.52272797]
[65.62216949 70.31648254]
[78.43846130 78.11024475]
[100.07736206 69.27451324]
[121.67149353 78.21910095]
[130.72470093 99.76792145]
[145.29821777 103.31938171]
[159.87171936 106.87084961]
[174.44522095 110.42231750]
[189.01873779 113.97378540]
[197.84019470 111.31255341]
[205.40548706 114.53356934]
[220.18739319 111.98491669]
[234.96928406 109.43626404]
[247.21856689 98.53273010]
[262.69876099 103.94532013]
[265.48513794 120.10601807]
[252.71133423 130.39007568]
[237.51792908 124.21815491]
[222.73603821 126.76680756]
[207.95414734 129.31546021]
[220.79566956 137.06758118]
[229.54371643 149.25248718]
[232.78277588 163.89859009]
[229.98875427 178.63607788]
[221.61375427 191.08032227]
[209.01289368 199.21778870]
[194.22506714 201.73178101]
[179.64303589 198.21549988]
[167.62623596 189.23793030]
[160.11909485 176.25169373]
[158.33627319 161.35801697]
[162.56626892 146.96679688]
[172.12463379 135.40661621]
[185.46726990 128.54728699]
[170.89375305 124.99582672]
[156.32025146 121.44435883]
[141.74674988 117.89289093]
[127.17324066 114.34142303]
[122.85624695 120.53420258]
[117.15956116 125.48746490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 53]
[10 52]
[11 51]
[19 44]
[20 43]
[21 42]
[24 39]
[25 38]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
