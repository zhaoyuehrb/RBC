%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCGCGGCAGGCGCGCGGAGCCAGCGGAGCCAGCUGAGCCCGAGCCCAGCCCGCGCCCGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[117.44525146 287.83889771]
[118.15768433 272.62664795]
[125.00169373 259.02227783]
[136.79151917 249.38278198]
[132.80096436 234.92333984]
[128.81042480 220.46389771]
[124.81986237 206.00444031]
[120.82931519 191.54499817]
[116.83876038 177.08555603]
[112.52477264 162.71929932]
[107.88951874 148.45344543]
[96.59796143 138.74005127]
[99.69208527 123.22434998]
[95.05683136 108.95850372]
[89.60222626 102.63822174]
[90.54924774 93.94754028]
[86.55869293 79.48809814]
[75.42887115 68.24365234]
[79.50141144 53.91662598]
[75.51086426 39.45718384]
[71.52030945 24.99774170]
[66.05400085 17.26279831]
[67.69072723 9.79965973]
[64.35291290 -4.82425928]
[60.68780518 -19.36960220]
[56.69725418 -33.82904434]
[52.70670319 -48.28848648]
[48.71614838 -62.74793243]
[34.42036438 -69.08547974]
[27.58932495 -83.15214539]
[31.44843483 -98.30606079]
[44.17554474 -107.39202118]
[59.76129913 -106.11991882]
[70.84658051 -95.09038544]
[72.19726562 -79.51124573]
[63.17559052 -66.73848724]
[67.16614532 -52.27904129]
[71.15670013 -37.81959915]
[75.14724731 -23.36015511]
[80.12509155 -17.56374168]
[78.97682953 -8.16207314]
[82.31464386 6.46184540]
[85.97975159 21.00718880]
[89.97030640 35.46663284]
[93.96085358 49.92607498]
[104.80525208 60.13628387]
[101.01813507 75.49754333]
[105.00868988 89.95698547]
[109.32267761 104.32324982]
[113.95793152 118.58909607]
[125.58103180 129.32289124]
[122.15536499 143.81819153]
[126.79061890 158.08404541]
[132.59844971 165.56594849]
[131.29820251 173.09500122]
[135.28875732 187.55445862]
[139.27931213 202.01390076]
[143.26986694 216.47334290]
[147.26042175 230.93278503]
[151.25096130 245.39222717]
[166.31602478 247.62023926]
[179.16893005 255.78862000]
[187.58287048 268.48214722]
[190.10005188 283.50158691]
[186.28436279 298.24475098]
[176.79690552 310.15725708]
[163.28143311 317.17523193]
[148.07957458 318.08273315]
[133.82516479 312.72256470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 53]
[11 52]
[13 50]
[14 49]
[16 48]
[17 47]
[19 45]
[20 44]
[21 43]
[23 42]
[24 41]
[25 39]
[26 38]
[27 37]
[28 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
