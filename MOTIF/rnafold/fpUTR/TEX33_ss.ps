%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAUUGGUCUUCACCAGUAGUUCUGCAGUGGGGAUCUGCACUUCUGGGCUUCAGCACACAUCAGUGUGGUUCACGUGUUUCCUGCUGUUAUGAAAGAGAUUGGAGAGGACUAAGCUUGGAAUUGCCUGUCCCACAGCAAGAGGCU\
) } def
/len { sequence length } bind def

/coor [
[253.24508667 344.05480957]
[245.60670471 331.14532471]
[237.96832275 318.23580933]
[230.32995605 305.32632446]
[222.28172302 292.66827393]
[213.83192444 280.27468872]
[205.38212585 267.88110352]
[196.93232727 255.48751831]
[188.48251343 243.09394836]
[180.03271484 230.70036316]
[171.58291626 218.30677795]
[163.13311768 205.91319275]
[154.68331909 193.51962280]
[141.12092590 187.36242676]
[139.73986816 171.60160828]
[131.29006958 159.20803833]
[122.84027100 146.81445312]
[114.39047241 134.42086792]
[105.94067383 122.02729034]
[88.14908600 119.49484253]
[77.71071625 104.86630249]
[81.10233307 87.21833038]
[72.13066864 75.19712830]
[63.15901566 63.17592239]
[44.31797409 56.14046097]
[42.71515274 36.91237259]
[33.23802567 25.28550339]
[23.76089859 13.65863514]
[14.28377151 2.03176737]
[4.80664492 -9.59510136]
[-4.67048216 -21.22196960]
[-14.14760876 -32.84883881]
[-23.62473488 -44.47570419]
[-33.10186386 -56.10257339]
[-42.57899094 -67.72944641]
[-47.59456253 -69.62626648]
[-50.99855042 -72.95235443]
[-52.51462173 -76.83438873]
[-52.26190186 -80.41850281]
[-60.97462082 -92.62868500]
[-69.68733978 -104.83886719]
[-78.40005493 -117.04904938]
[-89.30174255 -118.23618317]
[-97.55519104 -125.11729431]
[-100.55777740 -135.20510864]
[-97.53944397 -145.05787659]
[-105.72246552 -157.62919617]
[-113.90548706 -170.20053101]
[-122.08851624 -182.77185059]
[-130.27153015 -195.34317017]
[-138.45455933 -207.91448975]
[-143.23922729 -210.33541870]
[-146.26905823 -214.00558472]
[-147.36244202 -218.02717590]
[-146.72891235 -221.56388855]
[-154.08967590 -234.63366699]
[-161.45043945 -247.70344543]
[-168.81120300 -260.77322388]
[-184.09793091 -264.78463745]
[-191.99851990 -278.47247314]
[-187.82571411 -293.71591187]
[-174.05514526 -301.47137451]
[-158.85664368 -297.13760376]
[-151.24722290 -283.28582764]
[-155.74142456 -268.13400269]
[-148.38066101 -255.06420898]
[-141.01989746 -241.99443054]
[-133.65913391 -228.92465210]
[-125.88323975 -216.09751892]
[-117.70021820 -203.52618408]
[-109.51718903 -190.95486450]
[-101.33416748 -178.38354492]
[-93.15114594 -165.81222534]
[-84.96812439 -153.24090576]
[-67.14466858 -145.85084534]
[-66.18987274 -125.76176453]
[-57.47715759 -113.55158234]
[-48.76443863 -101.34140015]
[-40.05171967 -89.13121796]
[-30.95212173 -77.20656586]
[-21.47499466 -65.57970428]
[-11.99786758 -53.95283127]
[-2.52074051 -42.32596588]
[6.95638609 -30.69909668]
[16.43351364 -19.07222748]
[25.91064072 -7.44535971]
[35.38776779 4.18150854]
[44.86489487 15.80837727]
[54.34202194 27.43524551]
[64.64592743 27.56526756]
[73.33760834 33.50111008]
[77.37408447 43.45982742]
[75.18022156 54.20426559]
[84.15187836 66.22547150]
[93.12353516 78.24667358]
[104.45886993 77.62564850]
[114.69017792 82.54457855]
[121.28415680 91.78551483]
[122.60811615 103.06037903]
[118.33425140 113.57748413]
[126.78405762 125.97106934]
[135.23385620 138.36465454]
[143.68365479 150.75822449]
[152.13345337 163.15180969]
[166.30023193 170.19548035]
[167.07690430 185.06980896]
[175.52670288 197.46339417]
[183.97650146 209.85697937]
[192.42630005 222.25056458]
[200.87609863 234.64414978]
[209.32589722 247.03771973]
[217.77569580 259.43130493]
[226.22550964 271.82489014]
[234.67530823 284.21847534]
[239.51060486 286.53659058]
[242.61817932 290.14117432]
[243.79725647 294.13848877]
[243.23944092 297.68792725]
[250.87782288 310.59744263]
[258.51620483 323.50692749]
[266.15460205 336.41644287]
[279.54055786 338.25302124]
[289.26712036 347.34805298]
[291.91793823 360.19882202]
[286.74050903 372.04296875]
[294.10125732 385.11273193]
[301.46203613 398.18252563]
[308.82278442 411.25228882]
[323.98040771 409.78036499]
[338.42422485 414.60699463]
[349.65173340 424.89596558]
[355.71774292 438.86462402]
[355.57122803 454.09283447]
[349.23760986 467.94223022]
[337.81423950 478.01327515]
[323.28024292 482.56112671]
[308.15374756 480.79785156]
[295.05551147 473.02896118]
[286.25488281 460.60040283]
[283.27661133 445.66555786]
[286.63671875 430.81195068]
[295.75302124 418.61306763]
[288.39224243 405.54327393]
[281.03149414 392.47351074]
[273.67071533 379.40371704]
[257.32116699 375.60165405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[12 107]
[13 106]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[22 95]
[23 94]
[24 93]
[26 89]
[27 88]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[39 79]
[40 78]
[41 77]
[42 76]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[55 68]
[56 67]
[57 66]
[58 65]
[125 145]
[126 144]
[127 143]
[128 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
