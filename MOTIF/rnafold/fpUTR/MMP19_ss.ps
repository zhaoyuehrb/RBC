%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCCCCUCAGCUGUUAUAAAGAGGACUAGAGGCUGGAGAGUAAAAAGAACUGGGGGUAAGAGCCCCUCUGCCUAGCACUGCUCCCCCAAGGCUCCCAGAAAUCUCAGGUCAGAGGCACGGACAGCCUCUGGAGCUCUCGUCUGGUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[40.08350372 625.80334473]
[29.19889450 614.34466553]
[29.68831825 598.54797363]
[41.26140976 587.78509521]
[41.56739044 572.78820801]
[41.87336731 557.79132080]
[42.17934418 542.79449463]
[34.70327377 529.91198730]
[42.72046661 516.27252197]
[43.02644348 501.27566528]
[43.33242416 486.27877808]
[43.63840103 471.28189087]
[36.16232681 458.39944458]
[44.17952347 444.75997925]
[44.48550034 429.76309204]
[32.69168091 439.03164673]
[17.77706146 437.43347168]
[8.21477985 425.87652588]
[9.43726063 410.92642212]
[20.75000000 401.07647705]
[35.72612381 401.92248535]
[45.85769653 412.98425293]
[47.99242020 398.13693237]
[50.12714005 383.28961182]
[52.26186371 368.44229126]
[43.15806580 356.70959473]
[45.11147308 341.62188721]
[57.47954559 332.15252686]
[59.61426544 317.30520630]
[61.74898911 302.45788574]
[63.88371277 287.61056519]
[66.01843262 272.76324463]
[68.15316010 257.91592407]
[70.28787994 243.06860352]
[72.42259979 228.22128296]
[74.55732727 213.37396240]
[76.69204712 198.52664185]
[66.27417755 190.12434387]
[61.34315109 177.56527710]
[63.29245377 164.10482788]
[71.71697998 153.28945923]
[84.49145508 148.02229309]
[86.92859650 133.22161865]
[78.27468109 128.32926941]
[71.30530548 121.24032593]
[66.56085968 112.50444794]
[64.40923309 102.79899597]
[65.01724243 92.87651825]
[68.33776093 83.50637817]
[74.11330414 75.41512299]
[81.89605713 69.23014069]
[91.08255768 65.43099213]
[90.47072601 50.44347382]
[89.85890198 35.45595932]
[89.24707031 20.46844101]
[88.63524628 5.48092365]
[88.02341461 -9.50659275]
[87.41158295 -24.49411011]
[86.79975891 -39.48162842]
[69.66313934 -52.88906860]
[67.89139557 -74.29410553]
[82.21207428 -89.92362976]
[80.07735443 -104.77095032]
[77.94262695 -119.61827087]
[75.80790710 -134.46559143]
[65.84738922 -138.57199097]
[58.56932831 -146.40545654]
[55.25586700 -156.48648071]
[56.44897079 -166.94917297]
[61.86299133 -175.88664246]
[70.44926453 -181.69853210]
[69.22662354 -196.64862061]
[68.00398254 -211.59870911]
[60.68672562 -226.89230347]
[73.35702515 -238.15728760]
[87.68925476 -229.10060120]
[82.95407104 -212.82133484]
[84.17671204 -197.87124634]
[85.39935303 -182.92115784]
[101.13469696 -171.52297974]
[103.54570007 -151.93821716]
[90.65522766 -136.60031128]
[92.78995514 -121.75299072]
[94.92467499 -106.90567017]
[97.05939484 -92.05834961]
[105.44584656 -89.47267914]
[112.55318451 -84.25040436]
[117.57605743 -76.94772339]
[119.93367004 -68.35843658]
[119.33686066 -59.42772293]
[115.82321930 -51.14813232]
[109.75611115 -44.44927597]
[101.78726959 -40.09345627]
[102.39910126 -25.10593987]
[103.01093292 -10.11842155]
[103.62275696 4.86909485]
[104.23458862 19.85661125]
[104.84642029 34.84412766]
[105.45824432 49.83164597]
[106.07007599 64.81916046]
[114.45709991 67.35755157]
[121.97314453 71.86251831]
[128.16539001 78.06264496]
[132.66079712 85.58441162]
[147.34976196 82.54559326]
[162.03872681 79.50678253]
[176.72769165 76.46797180]
[185.19674683 63.12441635]
[200.63861084 59.75921631]
[213.89187622 68.36888123]
[217.09362793 83.84545898]
[208.34432983 97.00695801]
[192.83476257 100.04490662]
[179.76649475 91.15693665]
[165.07754517 94.19574738]
[150.38858032 97.23455811]
[135.69961548 100.27336884]
[125.75386810 124.72398376]
[101.72927856 135.65875244]
[99.29213715 150.45944214]
[111.32975769 162.30087280]
[113.93371582 178.81665039]
[106.27679443 193.49336243]
[91.53936768 200.66136169]
[89.40464783 215.50868225]
[87.26992035 230.35600281]
[85.13520050 245.20333862]
[83.00048065 260.05065918]
[80.86575317 274.89797974]
[78.73103333 289.74530029]
[76.59631348 304.59262085]
[74.46158600 319.43994141]
[72.32686615 334.28726196]
[81.52612305 346.85751343]
[79.14970398 361.88439941]
[67.10918427 370.57702637]
[64.97446442 385.42434692]
[62.83974075 400.27166748]
[60.70501709 415.11898804]
[59.48237991 430.06909180]
[59.17639923 445.06594849]
[66.63058472 459.02108765]
[58.63528061 471.58789062]
[58.32929993 486.58474731]
[58.02332306 501.58163452]
[57.71734619 516.57849121]
[65.17153168 530.53363037]
[57.17622375 543.10046387]
[56.87024689 558.09735107]
[56.56427002 573.09417725]
[56.25828934 588.09106445]
[67.38275146 599.31701660]
[67.22743988 615.12054443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[6 149]
[7 148]
[9 146]
[10 145]
[11 144]
[12 143]
[14 141]
[15 140]
[22 139]
[23 138]
[24 137]
[25 136]
[28 133]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
[42 120]
[43 119]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[62 85]
[63 84]
[64 83]
[65 82]
[71 79]
[72 78]
[73 77]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
