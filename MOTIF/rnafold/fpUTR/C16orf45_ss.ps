%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAUCCCUGCCCCUUCUGGGUACCCGUAGGCGCUCCCGGGCGCUGGCGGCGGCGGAGGAGAGGGAGCAGCGUCACGGGCGCCCGGCCCGUUAAAACGCUGCUGGCUGGAGCCACCUCCCUCCCUGCAGCCCGCAACGGGAAUGGAGUAAAGGGAGACCCGUCGACCUGGCCACGGGGAUCAGCG\
) } def
/len { sequence length } bind def

/coor [
[183.47384644 969.03973389]
[183.22186279 954.04187012]
[172.36917114 943.90509033]
[171.89996338 928.69866943]
[182.60595703 917.38409424]
[182.35395813 902.38623047]
[182.10197449 887.38830566]
[181.84999084 872.39044189]
[181.59800720 857.39257812]
[181.34600830 842.39465332]
[180.71620178 827.40789795]
[179.70896912 812.44177246]
[178.70172119 797.47558594]
[166.01385498 789.71960449]
[160.25788879 775.81518555]
[163.83485413 761.01452637]
[175.57675171 751.04284668]
[174.56950378 736.07672119]
[173.31098938 721.12963867]
[171.80155945 706.20574951]
[170.29211426 691.28192139]
[168.78268433 676.35803223]
[167.27323914 661.43414307]
[156.25955200 647.78302002]
[163.92672729 631.05157471]
[162.16679382 616.15521240]
[160.40686035 601.25878906]
[144.29203796 596.24096680]
[131.94421387 584.65362549]
[125.87398529 568.78662109]
[127.34441376 551.80639648]
[136.10853577 537.12414551]
[150.44926453 527.71063232]
[148.18989563 512.88177490]
[138.62384033 501.46511841]
[144.19422913 486.65698242]
[141.93486023 471.82809448]
[139.67550659 456.99923706]
[137.41613770 442.17037964]
[135.15676880 427.34152222]
[123.46933746 414.26254272]
[130.28388977 397.16610718]
[127.77572632 382.37728882]
[125.26757050 367.58847046]
[121.94417572 364.13220215]
[120.76995850 358.54492188]
[122.93229675 352.26138306]
[120.92237091 337.39663696]
[118.91243744 322.53192139]
[109.53951263 310.95617676]
[115.35787964 296.24371338]
[113.34794617 281.37896729]
[111.33802032 266.51425171]
[109.32808685 251.64950562]
[105.30772400 245.42927551]
[107.41142273 236.51841736]
[105.65148926 221.62202454]
[103.89155579 206.72563171]
[102.13162231 191.82923889]
[100.37168884 176.93283081]
[96.45639038 170.64593506]
[98.70948029 161.77168274]
[97.20004272 146.84782410]
[95.69060516 131.92396545]
[94.18116760 117.00010681]
[77.55363464 104.61779785]
[81.30258179 79.33994293]
[77.31896973 64.87858582]
[73.33535767 50.41723251]
[69.35174561 35.95587540]
[65.36813354 21.49451828]
[61.38452148 7.03316069]
[57.40090942 -7.42819595]
[53.41729736 -21.88955307]
[37.25917053 -35.94482803]
[43.22451782 -55.69129562]
[38.51742172 -69.93360138]
[33.81032562 -84.17590332]
[29.10323143 -98.41820526]
[24.39613533 -112.66051483]
[19.68903923 -126.90281677]
[6.06203747 -135.36947632]
[4.32841730 -151.31858826]
[15.81806374 -162.51535034]
[31.71710396 -160.37057495]
[39.82915497 -146.52954102]
[33.93134308 -131.60990906]
[38.63843918 -117.36760712]
[43.34553528 -103.12530518]
[48.05263138 -88.88299561]
[52.75972748 -74.64069366]
[57.46682358 -60.39838791]
[65.97615051 -57.73944092]
[72.39681244 -51.35748672]
[75.19107056 -42.60192490]
[73.60771179 -33.40886688]
[67.87865448 -25.87316513]
[71.86226654 -11.41180801]
[75.84587860 3.04954910]
[79.82949066 17.51090622]
[83.81310272 31.97226334]
[87.79671478 46.43362045]
[91.78032684 60.89497757]
[95.76393890 75.35633087]
[110.62866974 77.36626434]
[118.30979156 64.48215485]
[125.99091339 51.59804153]
[125.67933655 35.20185471]
[139.86087036 26.96679497]
[153.94676208 35.36438751]
[153.44667053 51.75590897]
[138.87503052 59.27916336]
[131.19390869 72.16327667]
[123.51277924 85.04738617]
[122.27857208 105.36923981]
[109.10503387 115.49066925]
[110.61446381 130.41453552]
[112.12390137 145.33839417]
[113.63333893 160.26225281]
[115.26808167 175.17291260]
[117.02801514 190.06930542]
[118.78794861 204.96569824]
[120.54788208 219.86209106]
[122.30781555 234.75849915]
[124.19281769 249.63958740]
[126.20274353 264.50430298]
[128.21267700 279.36904907]
[130.22261047 294.23376465]
[139.73928833 306.87274170]
[133.77716064 320.52197266]
[135.78709412 335.38671875]
[137.79702759 350.25143433]
[140.05639648 365.08032227]
[142.56454468 379.86914062]
[145.07270813 394.65795898]
[155.12750244 402.75833130]
[156.90269470 415.14245605]
[149.98564148 425.08215332]
[152.24501038 439.91101074]
[154.50436401 454.73986816]
[156.76373291 469.56875610]
[159.02308655 484.39761353]
[168.75076294 496.87490845]
[163.01876831 510.62240601]
[165.27813721 525.45129395]
[178.17741394 528.41827393]
[189.27035522 535.58044434]
[197.24470520 546.06451416]
[201.16592407 558.60601807]
[200.58676147 571.70147705]
[195.59809875 583.78875732]
[186.81546021 593.43341064]
[175.30326843 599.49884033]
[177.06320190 614.39526367]
[178.82313538 629.29168701]
[188.45707703 637.88830566]
[189.60612488 650.34613037]
[182.19709778 659.92474365]
[183.70654297 674.84857178]
[185.21597290 689.77246094]
[186.72541809 704.69628906]
[188.23484802 719.62017822]
[191.80195618 725.22680664]
[191.96211243 730.93389893]
[189.53564453 735.06945801]
[190.54289246 750.03564453]
[203.51504517 758.34399414]
[209.04298401 772.53186035]
[205.20204163 787.08215332]
[193.66786194 796.46838379]
[194.67510986 811.43450928]
[195.68234253 826.40063477]
[198.61645508 830.76818848]
[199.48089600 835.36431885]
[198.53804016 839.35748291]
[196.34390259 842.14270020]
[196.59588623 857.14056396]
[196.84786987 872.13842773]
[197.09985352 887.13635254]
[197.35185242 902.13421631]
[197.60383606 917.13208008]
[208.68388367 928.08062744]
[208.72578430 943.29418945]
[198.21974182 953.78985596]
[198.47172546 968.78778076]
[200.98577881 988.00567627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 185]
[2 184]
[5 181]
[6 180]
[7 179]
[8 178]
[9 177]
[10 176]
[11 172]
[12 171]
[13 170]
[17 166]
[18 165]
[19 162]
[20 161]
[21 160]
[22 159]
[23 158]
[25 155]
[26 154]
[27 153]
[33 145]
[34 144]
[36 142]
[37 141]
[38 140]
[39 139]
[40 138]
[42 135]
[43 134]
[44 133]
[47 132]
[48 131]
[49 130]
[51 128]
[52 127]
[53 126]
[54 125]
[56 124]
[57 123]
[58 122]
[59 121]
[60 120]
[62 119]
[63 118]
[64 117]
[65 116]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[72 99]
[73 98]
[74 97]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
