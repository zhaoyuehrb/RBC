%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGUCCCAGCUCCGGUGAGUGGCCCCUGCUGGACCGUGGAUCCCGGGCGGGCGUGCGGGCGGCAGCGUACGAGGCCUUCUACUCGCCCGGGUGUCCGGUGCCUCGCUUCUCCCUGGGACCCUGUCGUCAACAUCGAGGCCUGCCAGUGAGCUUCUACCAUC\
) } def
/len { sequence length } bind def

/coor [
[285.67507935 390.98440552]
[285.08709717 374.67977905]
[288.09762573 358.63809204]
[294.56228638 343.64410400]
[304.16766357 330.43203735]
[294.18777466 319.23373413]
[284.20791626 308.03543091]
[274.22802734 296.83712769]
[264.24813843 285.63882446]
[254.26824951 274.44052124]
[244.28836060 263.24224854]
[228.57307434 266.90963745]
[213.05944824 262.13668823]
[201.99645996 250.13185120]
[198.46372986 234.09768677]
[203.51469421 218.37670898]
[193.32214355 207.37162781]
[183.12959290 196.36654663]
[172.93702698 185.36148071]
[162.74447632 174.35639954]
[152.55191040 163.35131836]
[137.70475769 163.03921509]
[127.21128082 152.02369690]
[127.63931274 136.45274353]
[117.44675446 125.44766235]
[107.25419617 114.44258118]
[92.58597565 111.30516815]
[78.78340149 117.17788696]
[69.36307526 130.60136414]
[53.05393600 128.88552856]
[46.63343048 113.79548645]
[56.70642090 100.85459137]
[72.91068268 103.37531281]
[86.71325684 97.50259399]
[89.18066406 90.42008209]
[74.18399048 90.10401154]
[69.85039520 75.74364471]
[82.16876984 67.18457794]
[94.11547089 76.25506592]
[96.58287811 69.17256165]
[89.41707611 55.99487686]
[82.25128174 42.81719208]
[75.08547974 29.63950920]
[67.79380035 16.53106308]
[60.37689972 3.49305701]
[52.96000290 -9.54494953]
[45.54310226 -22.58295441]
[38.12620163 -35.62096024]
[30.70930290 -48.65896606]
[23.29240227 -61.69697189]
[15.87550354 -74.73497772]
[8.45860386 -87.77298737]
[1.04170442 -100.81098938]
[-7.58807564 -113.07993317]
[-17.35162735 -124.46733856]
[-27.11518097 -135.85475159]
[-36.87873459 -147.24215698]
[-46.64228439 -158.62956238]
[-56.40583801 -170.01696777]
[-71.86131287 -168.63569641]
[-85.15962982 -176.63160706]
[-91.18730927 -190.93008423]
[-87.62658691 -206.03309631]
[-75.84664154 -216.13320923]
[-60.37709045 -217.34674072]
[-47.16629791 -209.20704651]
[-41.29408264 -194.84400940]
[-45.01842880 -179.78051758]
[-35.25487900 -168.39311218]
[-25.49132538 -157.00570679]
[-15.72777271 -145.61830139]
[-5.96422052 -134.23089600]
[3.79933190 -122.84348297]
[3.09292436 -137.82684326]
[9.85981274 -151.21374512]
[22.34365082 -159.52961731]
[37.30425262 -160.61608887]
[50.85858917 -154.19113159]
[59.48862839 -141.92237854]
[60.95444489 -126.99417114]
[54.87557983 -113.28113556]
[42.82980728 -104.34249115]
[27.94360924 -102.49826813]
[14.07971001 -108.22789001]
[21.49661064 -95.18988800]
[28.91350937 -82.15187836]
[36.33041000 -69.11387634]
[43.74730682 -56.07586670]
[51.16420746 -43.03786087]
[58.58110809 -29.99985504]
[65.99800873 -16.96184921]
[73.41490936 -3.92384267]
[80.83180237 9.11416340]
[86.90084076 13.39316368]
[88.26316833 22.47371101]
[95.42896271 35.65139389]
[102.59476471 48.82907867]
[109.76055908 62.00676346]
[118.25927734 104.25002289]
[128.45182800 115.25510406]
[138.64439392 126.26018524]
[154.20242310 127.02535248]
[164.38235474 138.33126831]
[163.55699158 153.15875244]
[173.74955750 164.16383362]
[183.94210815 175.16891479]
[194.13465881 186.17399597]
[204.32722473 197.17907715]
[214.51977539 208.18415833]
[228.00608826 204.37739563]
[241.74957275 206.75140381]
[253.06927490 214.78507996]
[259.78210449 226.85894775]
[260.62380981 240.58140564]
[255.48666382 253.26234436]
[265.46655273 264.46063232]
[275.44644165 275.65893555]
[285.42630005 286.85723877]
[295.40618896 298.05554199]
[305.38607788 309.25384521]
[315.36596680 320.45214844]
[327.27493286 313.45947266]
[340.27304077 308.80682373]
[353.90554810 306.65521240]
[367.69586182 307.07818604]
[381.16217041 310.05929565]
[393.83432007 315.49273682]
[405.27017212 323.18716431]
[415.07104492 332.87231445]
[422.89569092 344.20864868]
[428.47204590 356.79904175]
[431.60678101 370.20297241]
[432.19198608 383.95162964]
[430.20886230 397.56463623]
[425.72836304 410.56649780]
[418.90859985 422.50347900]
[409.98931885 432.95932007]
[419.30953979 444.71234131]
[428.62976074 456.46536255]
[437.94998169 468.21838379]
[447.27017212 479.97140503]
[462.45178223 477.64450073]
[476.75704956 483.23510742]
[486.33795166 495.23934937]
[488.61724854 510.42816162]
[482.98184204 524.71582031]
[470.94760132 534.25909424]
[455.75170898 536.49072266]
[441.48178101 530.81054688]
[431.97631836 518.74652100]
[429.79229736 503.54367065]
[435.51715088 489.29162598]
[426.19696045 477.53860474]
[416.87673950 465.78555298]
[407.55651855 454.03253174]
[398.23629761 442.27951050]
[383.66409302 449.48614502]
[367.85812378 453.31588745]
[351.59042358 453.57873535]
[335.65625000 450.25903320]
[320.83517456 443.51626587]
[307.85293579 433.67745972]
[297.34591675 421.22134399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 121]
[6 120]
[7 119]
[8 118]
[9 117]
[10 116]
[11 115]
[16 109]
[17 108]
[18 107]
[19 106]
[20 105]
[21 104]
[24 101]
[25 100]
[26 99]
[27 34]
[28 33]
[40 98]
[41 97]
[42 96]
[43 95]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[137 156]
[138 155]
[139 154]
[140 153]
[141 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
