%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCAACCGGCUCCCUAGCUAGGCGCCCCCGGGUUGCCAGGGGCCGCACCAGCUUUCCCGUCCCGGGCCAGCGCAGGCGCUCAGGCCUCGGAGGCGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[107.15282440 126.26563263]
[100.77552795 127.21112061]
[94.35473633 126.63038635]
[87.32164001 139.87936401]
[80.28854370 153.12835693]
[83.59580231 168.82681274]
[73.27357483 181.10815430]
[57.24019241 180.55116272]
[47.79509354 167.58314514]
[52.18375015 152.15202332]
[67.03955841 146.09526062]
[74.07265472 132.84626770]
[81.10575104 119.59729004]
[77.04642487 114.63488770]
[74.26026917 108.86073303]
[72.90180969 102.59510040]
[73.04640198 96.18552399]
[74.68603516 89.98752594]
[62.79734802 80.84098816]
[50.90866470 71.69445038]
[39.01997757 62.54791260]
[21.80591774 65.16146851]
[8.24180317 54.78843689]
[6.33144426 38.15740967]
[-5.83064651 29.37768745]
[-17.99273682 20.59796333]
[-30.28730202 12.00472927]
[-42.71148300 3.59998608]
[-55.13566589 -4.80475760]
[-67.55984497 -13.20950127]
[-83.32556915 -14.53331947]
[-89.53196716 -28.07325745]
[-101.95614624 -36.47800064]
[-118.34335327 -37.10377502]
[-125.75465393 -51.73266983]
[-116.56594849 -65.31573486]
[-100.22978210 -63.87987900]
[-93.55140686 -48.90218353]
[-81.12722015 -40.49744034]
[-66.25016022 -39.77478409]
[-59.15510178 -25.63368225]
[-46.73092270 -17.22893906]
[-34.30673981 -8.82419586]
[-21.88255882 -0.41945207]
[-14.45266914 0.74093014]
[-9.21301270 8.43587208]
[2.94907784 17.21559715]
[15.11116791 25.99532127]
[27.52028465 22.17472649]
[40.03392792 26.31118774]
[47.95308304 37.09004211]
[48.16651535 50.65922928]
[60.05520248 59.80576706]
[71.94388580 68.95230103]
[83.83257294 78.09883881]
[109.74263000 74.58096313]
[126.66390991 94.51527405]
[141.62033081 95.65795135]
[156.57673645 96.80062866]
[171.53315735 97.94330597]
[186.48956299 99.08597565]
[201.44598389 100.22865295]
[216.40238953 101.37133026]
[231.37449646 102.28578949]
[246.35879517 102.97181702]
[261.34310913 103.65785217]
[276.33612061 104.11529541]
[291.33438110 104.34403992]
[306.33264160 104.57279205]
[321.33090210 104.80153656]
[336.32913208 104.57279205]
[351.31344604 103.88675690]
[366.29776001 103.20072937]
[381.28204346 102.51469421]
[394.79504395 93.22325134]
[409.47973633 100.52340698]
[410.22973633 116.90539551]
[396.27355957 125.51683044]
[381.96807861 117.49900055]
[366.98379517 118.18502808]
[351.99948120 118.87106323]
[337.01516724 119.55709076]
[333.09289551 122.54805756]
[327.20944214 122.98883057]
[321.10214233 119.79979706]
[306.10388184 119.57104492]
[291.10562134 119.34230042]
[276.10736084 119.11354828]
[269.25512695 122.21138000]
[260.65707397 118.64215851]
[245.67276001 117.95612335]
[230.68846130 117.27009583]
[223.74493408 120.15751648]
[215.25971985 116.32774353]
[200.30329895 115.18506622]
[185.34689331 114.04238892]
[170.39047241 112.89971924]
[155.43406677 111.75704193]
[140.47764587 110.61436462]
[125.52124023 109.47168732]
[122.57813263 115.20771027]
[118.36865997 120.09076691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[18 55]
[19 54]
[20 53]
[21 52]
[24 48]
[25 47]
[26 46]
[27 44]
[28 43]
[29 42]
[30 41]
[32 39]
[33 38]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[64 92]
[65 91]
[66 90]
[67 88]
[68 87]
[69 86]
[70 85]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
