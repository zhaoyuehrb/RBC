%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCUCAGGGCAGAGAGCAGCCCUACACUCCCUACACCACACCCAUACUCAGCCCCUGCAGGCAAGGAGAGAACAGGUCAGGUUCCCGAGAGCUCAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[107.53047943 172.48242188]
[96.10317230 182.19923401]
[81.50731659 185.65771484]
[66.93498230 182.10147095]
[55.57307053 172.30824280]
[49.90640640 158.41979980]
[51.17426682 143.47348022]
[59.09937286 130.73799133]
[71.94837952 122.99858856]
[80.50492859 110.67846680]
[67.08926392 117.38816833]
[53.67360687 124.09786224]
[40.25794220 130.80755615]
[26.84228325 137.51725769]
[24.43325043 152.84619141]
[13.45037174 163.80775452]
[-1.88321066 166.18701172]
[-15.67142200 159.06909180]
[-22.61241341 145.19097900]
[-20.03723335 129.88906860]
[-8.93608952 119.04729462]
[6.42240143 116.83451080]
[20.13258553 124.10159302]
[33.54824829 117.39189911]
[46.96390915 110.68219757]
[60.37957001 103.97250366]
[73.79522705 97.26280975]
[59.25870132 93.56289673]
[47.72411346 83.97367096]
[41.43151474 70.35738373]
[41.60295486 55.35836411]
[48.20513153 41.88946533]
[59.95588684 32.56638718]
[74.57318878 29.19970322]
[89.21830750 32.44323349]
[101.04711914 41.66706848]
[107.76242828 55.07992172]
[108.06011200 70.07696533]
[101.88073730 83.74787140]
[110.33053589 71.35429382]
[118.78033447 58.96071243]
[116.05034637 43.62497330]
[124.79619598 31.17648888]
[139.43330383 28.66836929]
[147.88310242 16.27478790]
[156.33290100 3.88120651]
[148.35060120 -11.61585712]
[149.21189880 -28.93861198]
[158.59646606 -43.41992569]
[173.89956665 -51.20248795]
[190.95436096 -50.26609039]
[198.64784241 -63.14282227]
[206.34133911 -76.01955414]
[205.57240295 -96.05329895]
[222.58125305 -105.04318237]
[229.49089050 -118.35697174]
[236.40052795 -131.67076111]
[231.39096069 -146.66007996]
[238.52236938 -160.76393127]
[253.56382751 -165.61474609]
[267.59149170 -158.33460999]
[272.28298950 -143.24272156]
[264.85498047 -129.29281616]
[249.71432495 -124.76112366]
[242.80468750 -111.44733429]
[235.89505005 -98.13354492]
[239.89479065 -88.51328278]
[237.80780029 -78.07971954]
[230.10095215 -70.42561340]
[219.21806335 -68.32606506]
[211.52458191 -55.44933319]
[203.83108521 -42.57260132]
[211.22004700 -32.10585022]
[214.05615234 -19.56328773]
[211.87327576 -6.84288359]
[204.96763611 4.11632729]
[194.35807800 11.62982273]
[181.63597107 14.52648163]
[168.72648621 12.33100700]
[160.27668762 24.72458839]
[151.82688904 37.11817169]
[154.83967590 51.65979004]
[146.44692993 64.34901428]
[131.17391968 67.41051483]
[122.72412109 79.80409241]
[114.27431488 92.19767761]
[114.49871063 107.19599915]
[123.31548309 119.33125305]
[132.13226318 131.46650696]
[146.50341797 138.08320618]
[147.72470093 152.92765808]
[156.54148865 165.06291199]
[171.73477173 171.23510742]
[173.71781921 187.51391602]
[160.45062256 197.15309143]
[145.58135986 190.23667908]
[144.40623474 173.87969971]
[135.58944702 161.74444580]
[121.84893799 155.99572754]
[119.99700928 140.28327942]
[111.18022919 128.14802551]
[102.36345673 116.01277924]
[104.28295135 130.88945007]
[112.12249756 143.67778015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[39 86]
[40 85]
[41 84]
[44 81]
[45 80]
[46 79]
[51 72]
[52 71]
[53 70]
[55 66]
[56 65]
[57 64]
[87 102]
[88 101]
[89 100]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
