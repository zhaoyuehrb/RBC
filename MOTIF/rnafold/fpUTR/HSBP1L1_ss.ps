%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGGCCCCGCCUCCGCCCUGGAACGCAGCGCGCUCCGCCCGAGGCCUCCCGGCGGCCCAUACGGGAAUCGCGGAGCUUAGCUGUCGCCACCUCGCGCCGGGUCCGCGCGGCCCACGGGACCCCCCACUGACGCCCCCGGCCAGCGGUCCAC\
) } def
/len { sequence length } bind def

/coor [
[95.90280914 219.06565857]
[93.18173218 233.81678772]
[99.17584229 249.08122253]
[88.74333191 261.73406982]
[72.61627197 258.75918579]
[67.38479614 243.21685791]
[78.43060303 231.09571838]
[81.15167999 216.34458923]
[71.23552704 196.20501709]
[86.10353851 178.42010498]
[87.31830597 163.46937561]
[88.53307343 148.51864624]
[89.74784088 133.56791687]
[84.86291504 131.66670227]
[80.31561279 129.05918884]
[69.44371796 139.39369202]
[58.57182693 149.72819519]
[56.72964096 165.66513062]
[43.04529953 174.03880310]
[28.01626015 168.42564392]
[23.17151642 153.13159180]
[32.22753906 139.88893127]
[48.23732376 138.85630798]
[59.10921478 128.52180481]
[69.98110962 118.18730164]
[65.47838593 106.33798981]
[65.47838593 93.66201019]
[69.98110962 81.81269836]
[59.10921478 71.47819519]
[48.23732376 61.14369202]
[37.36543274 50.80918884]
[26.49354172 40.47468567]
[9.04562950 41.25323486]
[-3.34376693 29.42612076]
[-3.37432218 12.63486767]
[-14.45343018 2.52282619]
[-25.53253746 -7.58921480]
[-36.61164474 -17.70125580]
[-47.69075394 -27.81329727]
[-58.76985931 -37.92533875]
[-69.84896851 -48.03738022]
[-81.42602539 -57.57529449]
[-93.47130585 -66.51459503]
[-105.51658630 -75.45390320]
[-126.88128662 -76.51050568]
[-134.47480774 -95.66763306]
[-147.04106140 -103.85845947]
[-159.60729980 -112.04927826]
[-172.17353821 -120.24009705]
[-187.08192444 -115.52056885]
[-201.51626587 -121.53587341]
[-208.66110229 -135.44577026]
[-205.14285278 -150.68244934]
[-192.62274170 -160.05158997]
[-177.01237488 -159.12937927]
[-165.68249512 -148.35127258]
[-163.98271179 -132.80633545]
[-151.41647339 -124.61552429]
[-138.85023499 -116.42469788]
[-126.28398895 -108.23387909]
[-117.91271210 -111.48654938]
[-108.85005188 -110.47310638]
[-101.17487335 -105.29723358]
[-96.70718384 -97.03195190]
[-96.57728577 -87.49918365]
[-84.53199768 -78.55988312]
[-72.48671722 -69.62057495]
[-71.72850037 -84.60140228]
[-59.66561508 -93.51693726]
[-45.12183380 -89.84564972]
[-38.73564529 -76.27301025]
[-45.17842865 -62.72713852]
[-59.73692703 -59.11648560]
[-48.65781784 -49.00444412]
[-37.57871246 -38.89240265]
[-26.49960327 -28.78036308]
[-15.42049599 -18.66832161]
[-4.34138870 -8.55628109]
[6.73771906 1.55575967]
[19.43576431 -0.82513273]
[31.35681152 4.64047384]
[38.03545761 16.15269661]
[36.82804489 29.60279274]
[47.69993591 39.93729782]
[58.57182693 50.27180099]
[69.44371796 60.60630417]
[80.31561279 70.94081116]
[101.65751648 62.23149109]
[125.57080841 68.57891083]
[134.63172913 56.62483978]
[132.22824097 41.00437927]
[141.64129639 28.30910683]
[157.28628540 26.07090378]
[169.88133240 35.61765671]
[171.95401001 51.28544617]
[162.27462769 63.77884674]
[146.58580017 65.68575287]
[137.52488708 77.63982391]
[142.87673950 91.65258789]
[157.59953308 94.52301788]
[172.32232666 97.39344025]
[187.04512024 100.26386261]
[201.76791382 103.13429260]
[216.49070740 106.00471497]
[225.20777893 99.37625122]
[235.91627502 98.68726349]
[245.02871704 103.92466736]
[249.62658691 113.13032532]
[264.22097778 116.59503937]
[278.81533813 120.05975342]
[293.44406128 123.37639618]
[308.10568237 126.54461670]
[322.76727295 129.71282959]
[328.91653442 123.87564087]
[336.79592896 121.01040649]
[345.06988525 121.52266693]
[352.36752319 125.25209808]
[357.50991821 131.51162720]
[359.70028687 139.21276855]
[374.05715942 143.55793762]
[388.41403198 147.90312195]
[404.25051880 143.64430237]
[415.66427612 155.41963196]
[410.91378784 171.11564636]
[394.88595581 174.58564758]
[384.06884766 162.25997925]
[369.71197510 157.91481018]
[355.35513306 153.56962585]
[334.93280029 160.67437744]
[319.59902954 144.37443542]
[304.93743896 141.20620728]
[290.27584839 138.03799438]
[283.03103638 139.70904541]
[275.35061646 134.65412903]
[260.75625610 131.18940735]
[246.16188049 127.72469330]
[228.14511108 134.64996338]
[213.62028503 120.72750854]
[198.89749146 117.85708618]
[184.17469788 114.98665619]
[169.45190430 112.11623383]
[154.72911072 109.24581146]
[140.00631714 106.37538910]
[132.28762817 121.34798431]
[119.61586761 131.25752258]
[104.69857025 134.78268433]
[103.48380280 149.73341370]
[102.26903534 164.68414307]
[101.05426788 179.63487244]
[107.20420837 184.21052551]
[111.31987000 190.59606934]
[112.91796875 197.95301819]
[111.84207153 205.33509827]
[108.27660370 211.80995178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 149]
[11 148]
[12 147]
[13 146]
[15 25]
[16 24]
[17 23]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 67]
[43 66]
[44 65]
[46 60]
[47 59]
[48 58]
[49 57]
[89 98]
[90 97]
[99 143]
[100 142]
[101 141]
[102 140]
[103 139]
[104 138]
[108 136]
[109 135]
[110 134]
[111 132]
[112 131]
[113 130]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
