%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCGGCCUCGGCCCAGUGCACAGCGGGACCAGGCAGAGUUCGGGGAAAGCGUCGGAGUUCGGGAGACCAGGGUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[155.82823181 116.21213531]
[141.00402832 113.92240143]
[126.17981720 111.63265991]
[116.88464355 123.14325714]
[103.08606720 128.48118591]
[88.46439362 126.22272491]
[76.91944122 116.97025299]
[71.53044128 103.19154358]
[56.70623779 100.90180969]
[41.88203049 98.61206818]
[27.05782509 96.32232666]
[17.83579826 98.12938690]
[11.71407032 93.65047455]
[-3.01155400 90.79460144]
[-17.78918076 88.22132874]
[-32.61338806 85.93158722]
[-47.43759537 83.64185333]
[-56.65961838 85.44891357]
[-62.78134918 80.96999359]
[-77.50697327 78.11412811]
[-91.55448914 85.86311340]
[-106.31552887 79.57891846]
[-110.46669006 64.08222198]
[-100.82355499 51.26078033]
[-84.78350830 50.95009613]
[-74.65110779 63.38850403]
[-59.92547989 66.24436951]
[-45.14785385 68.81764221]
[-30.32364845 71.10738373]
[-15.49944210 73.39712524]
[-8.22408867 71.25108337]
[-0.15568748 76.06897736]
[14.56993771 78.92485046]
[29.34756470 81.49812317]
[44.17177200 83.78786469]
[58.99597549 86.07759857]
[73.82018280 88.36734009]
[83.11535645 76.85674286]
[96.91393280 71.51881409]
[111.53560638 73.77727509]
[123.08055878 83.02974701]
[128.46955872 96.80845642]
[143.29376221 99.09819031]
[158.11796570 101.38793182]
[162.57876587 92.21466827]
[169.06918335 84.36124420]
[177.21878052 78.26695251]
[186.56455994 74.27096558]
[196.57717896 72.59341431]
[206.69099426 73.32331085]
[216.33604431 76.41382599]
[224.97006226 81.68524933]
[232.10906982 88.83543396]
[237.35447693 97.45709229]
[240.41528320 107.06104279]
[241.12428284 117.10389709]
[239.44714355 127.01885223]
[252.88963318 133.67465210]
[266.33212280 140.33044434]
[282.13253784 139.51995850]
[290.10510254 152.10119629]
[303.54757690 158.75700378]
[319.34802246 157.94650269]
[327.32055664 170.52775574]
[340.76306152 177.18354797]
[357.08532715 175.59770203]
[366.39840698 189.09579468]
[359.12179565 203.79216003]
[342.74102783 204.56842041]
[334.10723877 190.62603760]
[320.66476440 183.97023010]
[305.82583618 185.25679016]
[296.89178467 172.19947815]
[283.44931030 165.54368591]
[268.61035156 166.83024597]
[259.67633057 153.77293396]
[246.23384094 147.11714172]
[232.79135132 140.46133423]
[216.74507141 153.72840881]
[196.25366211 157.76602173]
[176.25021362 151.53929138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[8 37]
[9 36]
[10 35]
[11 34]
[13 33]
[14 32]
[15 30]
[16 29]
[17 28]
[19 27]
[20 26]
[57 78]
[58 77]
[59 76]
[61 74]
[62 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
