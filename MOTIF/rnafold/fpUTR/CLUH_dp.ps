%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:45 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (CLUH)
} def

/sequence { (\
CGGCCGCCCCGGCCGACAGCGCCCGGGAACACGGCUCGCAGGCCGGGGGCAAGGGGCGGCCGGGCGCGGCCGAGCUGCCAUCAGUC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 62 0.008034694 ubox
1 72 0.979090448 ubox
2 61 0.008168053 ubox
2 71 0.999890649 ubox
3 60 0.008168495 ubox
3 70 0.999950229 ubox
4 59 0.008168496 ubox
4 69 0.999950438 ubox
5 58 0.008168323 ubox
5 68 0.999932734 ubox
6 50 0.003212325 ubox
6 57 0.008153515 ubox
6 67 0.999932495 ubox
7 48 0.003400334 ubox
7 56 0.008114232 ubox
7 66 0.999840932 ubox
8 47 0.004595065 ubox
8 55 0.008068442 ubox
8 64 0.999811900 ubox
9 46 0.004932025 ubox
9 54 0.008021893 ubox
9 63 0.999935327 ubox
9 64 0.004468757 ubox
10 45 0.005242795 ubox
10 53 0.007971951 ubox
10 62 0.999925074 ubox
10 63 0.003170424 ubox
11 44 0.005750544 ubox
11 61 0.999930886 ubox
12 43 0.005752420 ubox
12 50 0.006217457 ubox
12 57 0.003728193 ubox
12 60 0.999941139 ubox
13 42 0.005752406 ubox
13 49 0.006217150 ubox
13 56 0.005061363 ubox
13 59 0.999931124 ubox
14 41 0.005741366 ubox
14 48 0.006196974 ubox
14 55 0.006272417 ubox
14 58 0.998157682 ubox
15 20 0.024051235 ubox
15 57 0.955762840 ubox
19 39 0.022485163 ubox
19 50 0.922474456 ubox
19 57 0.252710903 ubox
20 38 0.022516729 ubox
20 49 0.923707176 ubox
20 56 0.276419470 ubox
20 58 0.058177152 ubox
21 35 0.004084632 ubox
21 37 0.022213899 ubox
21 50 0.210764081 ubox
21 57 0.136131627 ubox
22 34 0.003571727 ubox
22 47 0.916734361 ubox
22 48 0.118359672 ubox
22 49 0.210299436 ubox
22 54 0.046839308 ubox
22 55 0.277142828 ubox
22 56 0.145967085 ubox
23 34 0.023169682 ubox
23 46 0.916875375 ubox
23 47 0.119663090 ubox
23 48 0.209519939 ubox
23 49 0.005959506 ubox
23 53 0.046108152 ubox
23 54 0.277636468 ubox
23 55 0.145586095 ubox
24 33 0.023678701 ubox
24 38 0.004158282 ubox
24 45 0.915024178 ubox
24 46 0.120819998 ubox
24 47 0.207161521 ubox
24 48 0.006734209 ubox
24 53 0.277846244 ubox
24 54 0.145135903 ubox
25 32 0.105279302 ubox
25 37 0.005539006 ubox
25 44 0.901146032 ubox
26 35 0.003995173 ubox
26 36 0.006993749 ubox
26 37 0.003941765 ubox
26 43 0.897739305 ubox
26 44 0.071156846 ubox
27 35 0.018527491 ubox
27 36 0.011111184 ubox
27 37 0.104306720 ubox
27 43 0.083662909 ubox
28 36 0.101662541 ubox
32 38 0.601665736 ubox
32 45 0.392436842 ubox
33 37 0.566973698 ubox
33 44 0.426767886 ubox
34 43 0.430755830 ubox
34 50 0.004359305 ubox
35 41 0.024753620 ubox
35 42 0.433699157 ubox
35 49 0.004344136 ubox
35 55 0.003324211 ubox
35 56 0.004346273 ubox
36 40 0.025674484 ubox
36 41 0.398676856 ubox
36 42 0.020083519 ubox
36 48 0.004314383 ubox
36 54 0.003393867 ubox
36 55 0.004462822 ubox
37 41 0.052300185 ubox
37 47 0.004285158 ubox
37 53 0.003433042 ubox
37 54 0.004516351 ubox
42 50 0.018872814 ubox
42 57 0.009901830 ubox
43 49 0.018894486 ubox
43 54 0.006674841 ubox
43 55 0.003533065 ubox
43 56 0.010205097 ubox
44 48 0.018757366 ubox
44 53 0.006704108 ubox
44 54 0.003565713 ubox
44 55 0.010192781 ubox
50 56 0.003964175 ubox
55 79 0.004624264 ubox
56 78 0.004633081 ubox
57 77 0.004634413 ubox
58 76 0.004628601 ubox
59 75 0.004632042 ubox
60 74 0.004631399 ubox
61 72 0.003664814 ubox
62 71 0.003641114 ubox
63 70 0.003612473 ubox
63 79 0.007168695 ubox
64 78 0.007166539 ubox
65 77 0.007153501 ubox
66 75 0.006834039 ubox
66 78 0.003611534 ubox
67 74 0.006989591 ubox
67 77 0.003637090 ubox
68 76 0.003844877 ubox
69 75 0.003945517 ubox
70 74 0.003917288 ubox
72 82 0.020165871 ubox
72 86 0.058763990 ubox
73 81 0.020640261 ubox
73 85 0.060474298 ubox
74 85 0.939105630 ubox
75 84 0.975298559 ubox
76 83 0.974145508 ubox
77 82 0.958702372 ubox
77 85 0.035969143 ubox
78 84 0.037734785 ubox
1 72 0.9500000 lbox
2 71 0.9500000 lbox
3 70 0.9500000 lbox
4 69 0.9500000 lbox
5 68 0.9500000 lbox
6 67 0.9500000 lbox
7 66 0.9500000 lbox
8 64 0.9500000 lbox
9 63 0.9500000 lbox
10 62 0.9500000 lbox
11 61 0.9500000 lbox
12 60 0.9500000 lbox
13 59 0.9500000 lbox
14 58 0.9500000 lbox
15 57 0.9500000 lbox
19 50 0.9500000 lbox
20 49 0.9500000 lbox
22 47 0.9500000 lbox
23 46 0.9500000 lbox
24 45 0.9500000 lbox
25 44 0.9500000 lbox
26 43 0.9500000 lbox
74 85 0.9500000 lbox
75 84 0.9500000 lbox
76 83 0.9500000 lbox
77 82 0.9500000 lbox
showpage
end
%%EOF
