%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCUUCCGUUAUCGGGAAAAGAUGCUGUAGUGAUCUUUUCUGAGUGUCUCCUACUUGCGACAAGGUGGACUUGGGAGGAAAGCCGUCUGCCAAAGCCUGAAGCCUCCAAGCCAUAAACAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[138.74417114 264.99963379]
[132.37731934 251.41792297]
[126.01046753 237.83619690]
[119.64361572 224.25447083]
[113.27676392 210.67274475]
[106.90991974 197.09103394]
[100.54306793 183.50930786]
[94.17621613 169.92758179]
[87.80936432 156.34585571]
[72.89935303 154.70529175]
[63.73174667 166.57774353]
[62.07917404 182.89340210]
[47.01415253 189.37239075]
[34.03428268 179.34965515]
[36.49214554 163.13574219]
[51.85929871 157.41012573]
[61.02690506 145.53768921]
[54.00634384 132.28205872]
[39.03413391 133.19474792]
[24.06192780 134.10743713]
[9.08971977 135.02012634]
[-5.88248825 135.93281555]
[-20.85469627 136.84550476]
[-35.82690430 137.75819397]
[-50.79911041 138.67088318]
[-65.77131653 139.58357239]
[-73.21695709 153.09527588]
[-86.79645538 160.41651917]
[-102.17665863 159.21112061]
[-114.44979095 149.86372375]
[-119.69953918 135.35705566]
[-116.25073242 120.32012177]
[-105.20387268 109.55117035]
[-90.08396912 106.48651886]
[-75.71572876 112.10410309]
[-66.68400574 124.61136627]
[-51.71179962 123.69866943]
[-36.73959351 122.78598022]
[-21.76738548 121.87329102]
[-6.79517746 120.96060181]
[8.17702961 120.04791260]
[23.14923668 119.13522339]
[38.12144470 118.22253418]
[53.09365082 117.30984497]
[52.35293961 100.77610016]
[57.00525284 85.70655060]
[66.01165009 73.71984100]
[77.89781952 65.92140961]
[72.19977570 52.04580307]
[66.50173950 38.17020035]
[60.80370331 24.29459572]
[45.57187271 22.32305908]
[33.37623978 12.98699665]
[27.49736214 -1.20223844]
[29.51663399 -16.42781258]
[38.89088058 -28.59412384]
[53.09847260 -34.42849350]
[68.31764221 -32.36150742]
[80.45450592 -22.94917297]
[86.24431610 -8.72336197]
[84.12963867 6.48925400]
[74.67930603 18.59655762]
[80.37734222 32.47216034]
[86.07537842 46.34776306]
[91.77342224 60.22336578]
[107.86361694 60.15002441]
[122.71983337 66.33003998]
[133.26165771 55.65905762]
[143.80349731 44.98807907]
[154.34532166 34.31709671]
[164.88714600 23.64611435]
[175.42898560 12.97513294]
[185.97080994 2.30415130]
[188.06091309 -4.14507103]
[192.47293091 -7.93137932]
[197.29527283 -8.61400414]
[208.34414673 -18.75907326]
[206.43820190 -34.15865326]
[213.97734070 -47.72113419]
[228.06263733 -54.23146439]
[243.27796936 -51.18629456]
[253.77275085 -39.75654984]
[255.51153564 -24.33720207]
[247.82569885 -10.85730457]
[233.67062378 -4.50015354]
[218.48921204 -7.71020269]
[207.44033813 2.43486714]
[196.64178467 12.84597969]
[186.09996033 23.51696205]
[175.55813599 34.18794250]
[165.01629639 44.85892487]
[154.47447205 55.52990723]
[143.93264771 66.20088959]
[133.39082336 76.87187195]
[139.43769836 86.17433167]
[142.86239624 97.05548096]
[143.25608826 108.76862335]
[140.42427063 120.46286774]
[134.41259766 131.24493408]
[125.51488495 140.24717712]
[114.26192474 146.69650269]
[101.39109039 149.97900391]
[107.75794220 163.56072998]
[114.12478638 177.14245605]
[120.49163818 190.72418213]
[126.85848999 204.30590820]
[133.22534180 217.88761902]
[139.59219360 231.46934509]
[145.95904541 245.05107117]
[152.32589722 258.63278198]
[167.29348755 256.52035522]
[182.21850586 258.91516113]
[195.77383423 265.60430908]
[206.75411987 275.99298096]
[214.18302917 289.15744019]
[217.39996338 303.92709351]
[216.11889648 318.98864746]
[210.45372009 333.00283813]
[200.90818787 344.72351074]
[188.33110046 353.10848999]
[173.84077454 357.41220093]
[158.72567749 357.25195312]
[144.32986450 352.64196777]
[131.93338013 343.99218750]
[122.63851929 332.07174683]
[117.27176666 317.94061279]
[116.31033325 302.85528564]
[119.83971405 288.15713501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[10 17]
[11 16]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[48 65]
[49 64]
[50 63]
[51 62]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
