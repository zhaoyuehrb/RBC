%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCGGCCGGCGCGCGCUCCCGGGAGGCGGCAGCGGCUGCAGCGUUGGUAGCAUCAGCAUCAGCAUCAGCGGCAGCGGCAGCGGCCUCGGGCGGGGCCGGCCGGACGGACAGGCGGACAGAAGGCGCCAGGGGCGCGCGUCCCGCCCGGGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[240.27139282 129.77842712]
[235.44923401 120.15771484]
[220.48509216 119.12122345]
[205.52095032 118.08473206]
[190.55679321 117.04824066]
[175.59265137 116.01174927]
[162.36116028 122.85110474]
[149.12861633 114.17871857]
[134.16447449 113.14221954]
[119.20032501 112.10572815]
[104.23617554 111.06923676]
[89.58906555 114.30377960]
[76.45304108 121.54566193]
[63.38920212 128.91696167]
[50.39882278 136.41696167]
[44.49229813 143.45608521]
[37.07686615 143.93389893]
[23.94084167 151.17578125]
[10.80481720 158.41767883]
[-2.33120704 165.65956116]
[-10.68099213 179.09799194]
[-25.56221771 178.46679688]
[-38.69824219 185.70867920]
[-51.83426666 192.95056152]
[-57.65518188 207.90036011]
[-73.01490784 212.53266907]
[-86.13078308 203.29397583]
[-86.94142151 187.27142334]
[-74.82498169 176.75613403]
[-59.07614899 179.81454468]
[-45.94012451 172.57266235]
[-32.80410004 165.33078003]
[-25.39389229 152.41032410]
[-9.57309055 152.52352905]
[3.56293392 145.28164673]
[16.69895744 138.03976440]
[29.83498192 130.79788208]
[42.89882278 123.42658234]
[55.88920212 115.92658234]
[60.13208389 109.82617188]
[69.21115875 108.40963745]
[82.34718323 101.16775513]
[82.86543274 93.68567657]
[70.42433167 85.30599976]
[83.90192413 78.72153473]
[84.42016602 71.23945618]
[72.40801239 62.25568771]
[60.39585876 53.27191544]
[48.38370514 44.28814316]
[36.37155151 35.30437088]
[24.35939789 26.32060051]
[15.56231785 23.66586876]
[12.20100880 17.03875923]
[0.36869317 7.81941557]
[-15.93960571 6.09563732]
[-22.35276222 -8.99752235]
[-12.27346992 -21.93351555]
[3.92955899 -19.40489960]
[9.58803749 -4.01290035]
[21.42035294 5.20644426]
[33.34317017 14.30844593]
[45.35532379 23.29221725]
[57.36747742 32.27598953]
[69.37963104 41.25976181]
[81.39178467 50.24353409]
[93.40393829 59.22730637]
[100.78494263 64.49713898]
[106.03837585 70.89960480]
[109.03310394 77.84145355]
[109.78134918 84.72571564]
[108.43459320 90.98368835]
[105.27266693 96.10509491]
[120.23681641 97.14158630]
[135.20095825 98.17807770]
[150.16510010 99.21456909]
[164.46693420 92.44934845]
[176.62915039 101.04759979]
[191.59329224 102.08409119]
[206.55743408 103.12058258]
[221.52159119 104.15707397]
[236.48573303 105.19356537]
[250.84370422 91.21033478]
[270.55819702 92.19287872]
[283.06451416 107.07060242]
[298.06378174 107.21879578]
[313.06304932 107.36698151]
[328.06231689 107.51516724]
[343.06158447 107.66335297]
[351.72698975 104.60601044]
[358.35498047 107.96556091]
[373.34838867 108.41006470]
[388.34179688 108.85456085]
[403.33520508 109.29906464]
[418.32864380 109.74356079]
[433.32205200 110.18806458]
[448.31546021 110.63256073]
[463.30886841 111.07706451]
[478.30227661 111.52156067]
[493.29568481 111.96606445]
[508.29275513 112.26242065]
[523.29205322 112.41060638]
[538.29205322 112.41060638]
[553.29132080 112.26242065]
[568.29058838 112.11423492]
[571.64703369 103.27124023]
[577.30828857 95.72338867]
[584.82049561 90.05392456]
[593.58752441 86.69642639]
[602.91809082 85.90163422]
[612.08050537 87.71879578]
[620.35968018 91.99280548]
[627.11328125 98.37735748]
[631.82135010 106.36299133]
[634.12652588 115.31770325]
[649.03802490 116.94456482]
[663.94958496 118.57143402]
[678.86108398 120.19829559]
[688.47998047 108.13675690]
[703.10015869 103.21195984]
[718.05639648 106.99537659]
[728.57623291 118.27974701]
[731.30279541 133.46426392]
[725.36602783 147.70359802]
[712.66040039 156.45402527]
[697.24017334 156.92333984]
[684.02587891 148.96176147]
[677.23419189 135.10981750]
[662.32269287 133.48295593]
[647.41119385 131.85607910]
[632.49963379 130.22921753]
[619.85028076 146.87979126]
[599.61761475 152.66447449]
[579.83001709 145.12229919]
[568.43878174 127.11350250]
[553.43951416 127.26168823]
[538.44024658 127.40987396]
[531.74713135 130.63781738]
[523.14385986 127.40987396]
[508.14459229 127.26168823]
[501.38903809 130.35676575]
[492.85119629 126.95947266]
[477.85778809 126.51497650]
[462.86437988 126.07047272]
[447.87094116 125.62597656]
[432.87753296 125.18147278]
[417.88412476 124.73697662]
[402.89071655 124.29247284]
[387.89730835 123.84797668]
[372.90390015 123.40347290]
[357.91049194 122.95897675]
[342.91342163 122.66262054]
[327.91415405 122.51443481]
[312.91488647 122.36624908]
[297.91561890 122.21806335]
[282.91635132 122.06987762]
[277.74151611 131.04060364]
[269.22750854 137.07800293]
[258.89065552 139.02386475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[11 72]
[12 42]
[13 41]
[14 39]
[15 38]
[17 37]
[18 36]
[19 35]
[20 34]
[22 32]
[23 31]
[24 30]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[53 60]
[54 59]
[84 155]
[85 154]
[86 153]
[87 152]
[88 151]
[90 150]
[91 149]
[92 148]
[93 147]
[94 146]
[95 145]
[96 144]
[97 143]
[98 142]
[99 141]
[100 139]
[101 138]
[102 136]
[103 135]
[104 134]
[114 130]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
