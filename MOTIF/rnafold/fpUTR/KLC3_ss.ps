%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGGUCCCAGACGCCCGGCGCAGCGGGAGCGGCGGGGCGUGCCUGGCCUGCGGGACGCGACUGAUCGCAGUGGGGCGAAGCGGGGCCGGAGCCGCCCGCGGUCAGGAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[73.61351776 108.94165039]
[58.63552094 109.75373077]
[43.65752029 110.56581879]
[28.69188690 111.58064270]
[13.74136925 112.79801941]
[-1.20914841 114.01540375]
[-16.15966606 115.23278046]
[-31.11018372 116.45016479]
[-37.75022888 130.22901917]
[-50.31267166 138.77781677]
[-65.36737061 139.88345337]
[-78.86385345 133.34886169]
[-87.22107697 121.01912689]
[-102.17160034 122.23650360]
[-117.12211609 123.45388794]
[-132.07263184 124.67127228]
[-147.02314758 125.88864899]
[-161.97366333 127.10603333]
[-175.10037231 135.93780518]
[-188.41360474 129.25895691]
[-203.36412048 130.47634888]
[-210.02694702 139.28486633]
[-220.25415039 142.82731628]
[-230.50976562 140.13914490]
[-237.39073181 132.36650085]
[-252.38523865 132.77268982]
[-266.06933594 141.81025696]
[-280.61517334 134.23724365]
[-281.05923462 117.84411621]
[-266.94473267 109.49471283]
[-252.79142761 117.77819061]
[-237.79692078 117.37200165]
[-222.25047302 106.00739288]
[-204.58149719 115.52582550]
[-189.63098145 114.30844879]
[-177.57365417 105.56374359]
[-163.19105530 112.15550995]
[-148.24052429 110.93813324]
[-133.29000854 109.72074890]
[-118.33949280 108.50337219]
[-103.38897705 107.28598785]
[-88.43846130 106.06861115]
[-82.18605804 92.54924774]
[-69.92454529 83.91725159]
[-54.88930130 82.57273865]
[-41.10931015 88.97653961]
[-32.32756424 101.49964905]
[-17.37704659 100.28226471]
[-2.42652917 99.06488800]
[12.52398872 97.84750366]
[27.47450638 96.63012695]
[33.97212982 92.90137482]
[42.84543610 95.58781433]
[57.82343674 94.77573395]
[72.80143738 93.96364594]
[81.69593048 78.99618530]
[97.73889160 72.23155212]
[114.66490173 76.31160736]
[125.86369324 89.64292908]
[140.77575684 88.02114105]
[150.66571045 75.98675537]
[165.81176758 74.55445862]
[177.22378540 84.05718231]
[192.13584900 82.43540192]
[207.04791260 80.81361389]
[221.95999146 79.19182587]
[236.87205505 77.57004547]
[251.78411865 75.94825745]
[266.69619751 74.32646942]
[281.60827637 72.70468903]
[285.24481201 69.80442810]
[289.22473145 68.43980408]
[292.99429321 68.52010345]
[296.09335327 69.77513885]
[298.20803833 71.80467224]
[313.20803833 71.80467224]
[328.20803833 71.80467224]
[343.20803833 71.80467224]
[358.20803833 71.80467224]
[367.90393066 58.02315140]
[383.73117065 52.74169159]
[399.44558716 57.83702087]
[408.96966553 71.13219452]
[423.96417236 70.72600555]
[437.64825439 61.68843079]
[452.19409180 69.26144409]
[452.63818359 85.65457916]
[438.52365112 94.00398254]
[424.37036133 85.72050476]
[409.37585449 86.12669373]
[402.82891846 97.84614563]
[391.23568726 104.82718658]
[377.59765625 105.13650513]
[365.50869751 98.58471680]
[358.20803833 86.80467224]
[343.20803833 86.80467224]
[328.20803833 86.80467224]
[313.20803833 86.80467224]
[298.20803833 86.80467224]
[283.23004150 87.61675262]
[268.31799316 89.23854065]
[253.40591431 90.86032867]
[238.49383545 92.48210907]
[223.58177185 94.10389709]
[208.66970825 95.72568512]
[193.75762939 97.34746552]
[178.84556580 98.96925354]
[169.74316406 110.70304871]
[154.64331055 112.56020355]
[142.39753723 102.93321228]
[127.48547363 104.55500031]
[122.89928436 115.86890411]
[113.91622162 124.13582611]
[102.26110840 127.76844788]
[90.17184448 126.06926727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[20 35]
[21 34]
[25 32]
[26 31]
[59 111]
[60 110]
[63 107]
[64 106]
[65 105]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
