%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUAGUCUUUCACUAAUGGCACUAGGCCUGGAAUAAACUGUACAUACGGCUCCUUUCUUUCGCAAUCACACUAAUUCCCAGGAUGUGUGGUAUGUCCUG\
) } def
/len { sequence length } bind def

/coor [
[107.09637451 145.04914856]
[99.50215149 145.60194397]
[91.92180634 144.88348389]
[84.56665802 142.91383362]
[77.64174652 139.74786377]
[68.23788452 151.43408203]
[58.83403015 163.12028503]
[49.43017197 174.80648804]
[49.71979141 190.84692383]
[37.26808548 200.96298218]
[21.62694359 197.39450073]
[14.79490471 182.87889099]
[22.01292801 168.55130005]
[37.74396133 165.40263367]
[47.14781952 153.71643066]
[56.55167770 142.03021240]
[65.95553589 130.34400940]
[61.13672256 123.86273193]
[57.53676987 116.63305664]
[55.26858521 108.88172150]
[40.27569962 109.34364319]
[25.28281212 109.80557251]
[13.29005527 120.46170807]
[-2.49343538 117.58751678]
[-9.95991611 103.38783264]
[-3.38174272 88.75542450]
[12.19487381 84.91503906]
[24.82088661 94.81268311]
[39.81377029 94.35076141]
[54.80665970 93.88883209]
[62.77762222 73.65082550]
[79.21600342 59.40677261]
[74.66870880 45.11264420]
[70.12142181 30.81851387]
[65.57413483 16.52438354]
[49.46223450 13.19775200]
[37.26215363 2.30018473]
[32.20326233 -13.15824795]
[35.56156921 -28.97758102]
[46.33942413 -40.90900421]
[41.35410309 -55.05632019]
[36.36877823 -69.20363617]
[31.38345718 -83.35095215]
[18.58460617 -93.60382843]
[21.33155823 -109.77127075]
[36.79848862 -115.22161102]
[49.07434082 -104.34799194]
[45.53077316 -88.33627319]
[50.51609802 -74.18895721]
[55.50141907 -60.04164124]
[60.48674011 -45.89432526]
[74.13730621 -44.24727631]
[85.78228760 -36.81232834]
[93.09081268 -25.00928497]
[94.57047272 -11.13888168]
[89.87172699 2.06563425]
[79.86826324 11.97709465]
[84.41555023 26.27122498]
[88.96284485 40.56535339]
[93.51013184 54.85948563]
[113.73404694 56.51252365]
[131.23901367 66.77487183]
[142.55950928 83.61486816]
[145.45442200 103.69866943]
[160.00137329 107.35737610]
[174.54832458 111.01608276]
[189.14990234 114.45034027]
[203.80262756 117.65933228]
[218.45535278 120.86833191]
[233.10807800 124.07732391]
[247.76080322 127.28632355]
[262.41351318 130.49531555]
[277.06625366 133.70431519]
[286.05929565 121.41426849]
[299.27685547 113.85018158]
[314.42898560 112.32258606]
[328.89041138 117.09613800]
[340.15563965 127.34378815]
[346.27288818 141.29008484]
[346.18234253 156.51872253]
[339.89962769 170.39128113]
[328.51333618 180.50422668]
[313.99615479 185.10543823]
[298.86328125 183.39773560]
[285.73660278 175.67698669]
[276.89035034 163.28085327]
[273.85723877 148.35704041]
[259.20452881 145.14804077]
[244.55180359 141.93904114]
[229.89907837 138.73005676]
[215.24635315 135.52105713]
[200.59362793 132.31205750]
[185.94090271 129.10305786]
[178.60681152 130.77587891]
[170.88961792 125.56303406]
[156.34266663 121.90432739]
[141.79571533 118.24562073]
[138.17742920 124.94530487]
[133.49487305 130.94960022]
[127.87860107 136.09111023]
[121.48515320 140.22651672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[20 30]
[21 29]
[22 28]
[32 60]
[33 59]
[34 58]
[35 57]
[40 51]
[41 50]
[42 49]
[43 48]
[64 97]
[65 96]
[66 95]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
