%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGCGCGUAAAAGUGGCCGGGACUUUGCAGGCAGCGGCGGCCGGGGGCGGAGCGGGAUCGAGCCCUCGCCGAGGCCUGCCGCCAUGGGCCCGCGCCGCCGCCGCCGCCUGUCACCCGGGCCGCGCGGGCCGUGAGCGUC\
) } def
/len { sequence length } bind def

/coor [
[102.88488770 708.14739990]
[110.46942902 694.90209961]
[123.05464172 686.26641846]
[120.72463226 671.44848633]
[118.39462280 656.63055420]
[108.77425385 645.25964355]
[114.27400208 630.42510986]
[111.94399261 615.60717773]
[109.61398315 600.78924561]
[107.34043121 599.02087402]
[105.66029358 596.20904541]
[104.98854828 592.58654785]
[105.64392853 588.53668213]
[107.79780579 584.55413818]
[106.79591370 569.58764648]
[105.79402924 554.62109375]
[104.79213715 539.65460205]
[103.79024506 524.68811035]
[102.78836060 509.72161865]
[101.61980438 494.76718140]
[100.28472137 479.82672119]
[98.94964600 464.88626099]
[89.46984100 460.60058594]
[82.60330200 452.67715454]
[79.66394043 442.52828979]
[81.25749969 432.00103760]
[87.15824127 423.04116821]
[96.33804321 417.33343506]
[96.00385284 402.33715820]
[95.66967010 387.34088135]
[95.33548737 372.34460449]
[95.00130463 357.34832764]
[94.66711426 342.35205078]
[86.64818573 329.80032349]
[94.07611084 315.83117676]
[93.74192810 300.83489990]
[93.40774536 285.83862305]
[93.07356262 270.84234619]
[92.73937988 255.84608459]
[92.40518951 240.84980774]
[92.07100677 225.85353088]
[91.73682404 210.85725403]
[88.90625763 206.91941833]
[88.57456970 201.14381409]
[91.73682404 195.18888855]
[92.07100677 180.19261169]
[84.61917877 167.29611206]
[92.66201019 153.67175293]
[92.99619293 138.67547607]
[93.33038330 123.67919159]
[93.66456604 108.68291473]
[72.59293365 106.99726105]
[58.55081177 80.46051788]
[55.89125061 65.69817352]
[53.23168945 50.93582916]
[50.57213211 36.17348862]
[47.91257095 21.41114807]
[35.69974899 7.67975521]
[42.18244171 -8.59084702]
[39.19465256 -23.29027176]
[36.20686340 -37.98969650]
[31.39484596 -45.85105515]
[33.32009506 -53.04972458]
[30.66053581 -67.81206512]
[19.66535187 -79.97915649]
[24.96156883 -95.49953461]
[41.10089111 -98.40716553]
[51.48056793 -85.71092987]
[45.42287827 -70.47162628]
[48.08243561 -55.70928574]
[50.90628815 -40.97748947]
[53.89407730 -26.27806282]
[56.88186646 -11.57863617]
[66.82450104 -4.60037279]
[69.39736938 7.68204308]
[62.67491150 18.75158691]
[65.33447266 33.51392746]
[67.99403381 48.27627182]
[70.65359497 63.03861237]
[73.31315613 77.80095673]
[80.56829834 79.70171356]
[102.33373260 85.40399170]
[111.88993835 73.84203339]
[121.44614410 62.28007889]
[126.87644958 46.21931458]
[143.81280518 46.99133301]
[147.75941467 63.47953415]
[133.00810242 71.83628845]
[123.45189667 83.39824677]
[113.89568329 94.96020508]
[108.66084290 109.01710510]
[108.32666016 124.01338196]
[107.99246979 139.00965881]
[107.65828705 154.00593567]
[115.08621216 167.97505188]
[107.06728363 180.52679443]
[106.73310089 195.52307129]
[106.73310089 210.52307129]
[107.06728363 225.51934814]
[107.40146637 240.51562500]
[107.73565674 255.51190186]
[108.06983948 270.50817871]
[108.40402222 285.50445557]
[108.73820496 300.50073242]
[109.07238770 315.49700928]
[117.11522675 329.12136841]
[109.66339111 342.01785278]
[109.99758148 357.01412964]
[110.33176422 372.01040649]
[110.66594696 387.00668335]
[111.00012970 402.00296021]
[111.33432007 416.99923706]
[126.56965637 429.98052979]
[127.46403503 449.67407227]
[113.89011383 463.55117798]
[115.22518921 478.49163818]
[116.56026459 493.43212891]
[120.46848297 501.77969360]
[117.75485992 508.71972656]
[118.75675201 523.68621826]
[119.75863647 538.65270996]
[120.76052856 553.61920166]
[121.76242065 568.58575439]
[122.76430511 583.55224609]
[124.43191528 598.45922852]
[126.76192474 613.27716064]
[129.09193420 628.09509277]
[138.87895203 640.52587891]
[133.21255493 654.30053711]
[135.54255676 669.11846924]
[137.87257385 683.93640137]
[152.50071716 688.29302979]
[163.78419495 698.57141113]
[169.48265076 712.73089600]
[168.46466064 727.96002197]
[160.93232727 741.23504639]
[148.38122559 749.92028809]
[133.30337524 752.29113770]
[118.69248199 747.87695312]
[107.44957733 737.55419922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[7 127]
[8 126]
[9 125]
[14 124]
[15 123]
[16 122]
[17 121]
[18 120]
[19 119]
[20 117]
[21 116]
[22 115]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[42 98]
[45 97]
[46 96]
[48 94]
[49 93]
[50 92]
[51 91]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[59 73]
[60 72]
[61 71]
[63 70]
[64 69]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
