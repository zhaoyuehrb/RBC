%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCCGGCACGCCCAGGGCGCGGGAGCGGCCGGGUCAGCCCGCAGACCUGAGUCCGGCCCGCAGCCUCGGGGCCCCGCGGGCGCAGCGGGGCGGGAGGCGGGGCGGCCCGGCCGUGGGCGGAGCGGCGGCCGCGGCCGUGAGCCUGCCCCCAACUCGCCCUCAGCCGGCUGGCCGGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[108.63895416 421.00634766]
[108.63895416 406.00634766]
[108.63895416 391.00634766]
[108.63895416 376.00634766]
[97.75968933 360.03637695]
[108.04832458 342.71789551]
[107.54171753 327.72644043]
[107.03510284 312.73498535]
[106.52848816 297.74356079]
[106.02188110 282.75210571]
[94.99862671 272.80105591]
[94.27129364 257.60482788]
[104.78361511 246.11009216]
[104.27700806 231.11865234]
[103.77039337 216.12719727]
[90.53436279 199.01208496]
[101.22985077 179.33299255]
[99.71231842 164.40995789]
[98.19479370 149.48690796]
[96.67726898 134.56387329]
[95.15974426 119.64083099]
[83.45487213 110.26021576]
[68.55959320 112.02956390]
[53.66431427 113.79891968]
[38.76903152 115.56826782]
[23.87375069 117.33762360]
[15.28268051 126.97739410]
[2.82489538 128.13383484]
[-6.75831270 120.72976685]
[-21.68135262 122.24729156]
[-36.60439301 123.76481628]
[-52.37903214 136.29266357]
[-69.66898346 127.66390991]
[-84.53225708 129.68458557]
[-99.39553070 131.70526123]
[-114.25879669 133.72592163]
[-129.12207031 135.74659729]
[-143.98535156 137.76727295]
[-151.21292114 151.49832153]
[-165.14590454 158.32850647]
[-180.42678833 155.63148499]
[-191.17977905 144.44430542]
[-193.27009583 129.06866455]
[-185.89399719 115.41682434]
[-171.88774109 108.73818207]
[-156.63700867 111.60082245]
[-146.00601196 122.90399933]
[-131.14274597 120.88332367]
[-116.27947235 118.86265564]
[-101.41619873 116.84197998]
[-86.55292511 114.82131195]
[-71.68965149 112.80063629]
[-66.24273682 104.12362671]
[-56.71419907 99.79705811]
[-46.16219330 101.47547913]
[-38.12191772 108.84177399]
[-23.19887733 107.32424927]
[-8.27583790 105.80672455]
[5.36872101 94.78553772]
[22.10440063 102.44233704]
[36.99968338 100.67298889]
[51.89496231 98.90364075]
[66.79024506 97.13428497]
[81.68552399 95.36493683]
[83.39337921 89.17951202]
[87.21735382 83.65523529]
[82.48582458 69.42102814]
[77.75429535 55.18682480]
[73.02276611 40.95261765]
[68.29123688 26.71841240]
[55.62327576 22.10428429]
[48.04222488 11.19180679]
[48.13605118 -1.90051425]
[55.64607239 -12.38651371]
[51.15562820 -26.69860268]
[46.66518021 -41.01069260]
[42.17473221 -55.32278061]
[37.68428802 -69.63487244]
[33.19384003 -83.94696045]
[28.70339203 -98.25904846]
[14.19607830 -104.09615326]
[6.88050318 -117.91702271]
[10.21085739 -133.19586182]
[22.61465073 -142.71846008]
[38.23518753 -141.98854065]
[49.69693375 -131.35076904]
[51.58799744 -115.82794952]
[43.01548004 -102.74949646]
[47.50592804 -88.43740082]
[51.99637604 -74.12531281]
[56.48682404 -59.81322861]
[60.97726822 -45.50113678]
[65.46771240 -31.18904877]
[69.95816040 -16.87696075]
[85.17774200 -9.74450970]
[90.64746857 6.50506973]
[82.52544403 21.98688316]
[87.25697327 36.22108841]
[91.98850250 50.45529556]
[96.72003174 64.68949890]
[101.45156097 78.92370605]
[115.18548584 84.95524597]
[128.86798096 78.80793762]
[142.55047607 72.66063690]
[156.23297119 66.51332855]
[169.91546631 60.36602402]
[183.54554749 54.10338974]
[197.12226868 47.72587204]
[210.69898987 41.34835434]
[221.43016052 24.30052948]
[240.60267639 26.71143150]
[253.95625305 19.87901115]
[267.30981445 13.04658890]
[280.66339111 6.21416664]
[294.01696777 -0.61825514]
[307.37054443 -7.45067692]
[320.72412109 -14.28309917]
[334.07769775 -21.11552048]
[347.43127441 -27.94794273]
[356.19244385 -41.12189102]
[371.04702759 -40.03105545]
[384.40060425 -46.86347580]
[389.01989746 -61.97763062]
[403.01260376 -69.32475281]
[418.07705688 -64.54592133]
[425.27584839 -50.47633743]
[420.33801270 -35.46323013]
[406.19308472 -28.41361427]
[391.23303223 -33.50989914]
[377.87945557 -26.67747879]
[370.07345581 -13.99222946]
[354.26370239 -14.59436512]
[340.91012573 -7.76194382]
[327.55654907 -0.92952198]
[314.20297241 5.90289974]
[300.84939575 12.73532200]
[287.49581909 19.56774330]
[274.14224243 26.40016556]
[260.78866577 33.23258591]
[247.43508911 40.06501007]
[245.17173767 50.05683136]
[237.61560059 57.29680634]
[227.10369873 59.21036530]
[217.07650757 54.92507172]
[203.49978638 61.30258942]
[189.92306519 67.68010712]
[185.19529724 73.38220978]
[176.06275940 74.04851532]
[162.38026428 80.19582367]
[148.69776917 86.34312439]
[135.01527405 92.49043274]
[121.33278656 98.63774109]
[136.24118042 96.98252106]
[148.41088867 105.75167847]
[151.55867004 120.41767883]
[144.05931091 133.40843201]
[129.78474426 138.01678467]
[116.10497284 131.86341858]
[110.08278656 118.12330627]
[111.60031128 133.04635620]
[113.11783600 147.96939087]
[114.63536072 162.89242554]
[116.15288544 177.81547546]
[123.53141785 181.82246399]
[128.65701294 188.35359192]
[130.74734497 196.29110718]
[129.53153992 204.31353760]
[125.28287506 211.11560059]
[118.76183319 215.62059021]
[119.26844788 230.61203003]
[119.77506256 245.60346985]
[131.03941345 256.36230469]
[131.33963013 271.57296753]
[121.01332092 282.24551392]
[121.51993561 297.23693848]
[122.02654266 312.22839355]
[122.53315735 327.21981812]
[123.03977203 342.21127319]
[131.42204285 349.18594360]
[134.50663757 359.41564941]
[131.50309753 369.44018555]
[123.63895416 376.00634766]
[123.63895416 391.00634766]
[123.63895416 406.00634766]
[123.63895416 421.00634766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 185]
[2 184]
[3 183]
[4 182]
[6 178]
[7 177]
[8 176]
[9 175]
[10 174]
[13 171]
[14 170]
[15 169]
[17 163]
[18 162]
[19 161]
[20 160]
[21 159]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[29 58]
[30 57]
[31 56]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[102 152]
[103 151]
[104 150]
[105 149]
[106 148]
[107 146]
[108 145]
[109 144]
[111 140]
[112 139]
[113 138]
[114 137]
[115 136]
[116 135]
[117 134]
[118 133]
[119 132]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
