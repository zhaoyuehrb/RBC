%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGGCUCGGCGGCAGCGGAGCGGCCGGAGCUGCGGUGCGGACCGGGGCCGCGCGGCGUGGCGCGGGGAGCGGCGGCGGCGGCAGAGCCAGAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[90.88533020 241.98088074]
[95.54233551 227.27320862]
[107.42621613 217.43568420]
[105.52732849 202.55635071]
[103.62844086 187.67703247]
[101.72955322 172.79771423]
[99.83066559 157.91838074]
[97.93177795 143.03906250]
[96.03289795 128.15974426]
[77.99298096 122.77894592]
[65.62117004 106.05812073]
[50.71359253 107.72068787]
[35.80601501 109.38326263]
[20.89843750 111.04583740]
[5.99086094 112.70841217]
[-3.86613393 124.76981354]
[-19.00822067 126.24353027]
[-30.44617844 116.77206421]
[-45.35375595 118.43463898]
[-60.26133347 120.09720612]
[-71.36106110 131.68061829]
[-87.32418823 130.08120728]
[-95.90516663 116.52590179]
[-90.52140808 101.41316986]
[-75.30286407 96.33621216]
[-61.92390442 105.18963623]
[-47.01632690 103.52706146]
[-32.10875320 101.86448669]
[-23.03849030 90.10583496]
[-7.94377232 88.20738220]
[4.32828808 97.80083466]
[19.23586464 96.13825989]
[34.14344025 94.47568512]
[49.05101776 92.81311035]
[63.95859528 91.15054321]
[70.40551758 77.60664368]
[62.29590607 64.98783875]
[54.18629456 52.36903763]
[39.37014771 45.33953857]
[38.31967926 28.97407150]
[52.11552048 20.10802269]
[66.56568909 27.86202431]
[66.80509949 44.25942230]
[74.91471100 56.87822723]
[83.02432251 69.49703217]
[94.10974884 67.23439026]
[104.79895020 68.69249725]
[113.93416595 73.36972809]
[120.63710022 80.43423462]
[133.85890198 73.35017395]
[147.08070374 66.26610565]
[160.30250549 59.18204117]
[173.52430725 52.09797287]
[179.75122070 45.15895844]
[187.27990723 45.00646973]
[200.71980286 38.34547043]
[209.64880371 25.28470039]
[224.48823547 26.56551743]
[237.92814636 19.90451813]
[251.36804199 13.24351978]
[260.29702759 0.18275066]
[275.13647461 1.46356702]
[288.57638550 -5.19743204]
[292.08700562 -20.43585587]
[304.60241699 -29.81125832]
[320.21325684 -28.89686012]
[331.54852295 -18.12441444]
[333.25607300 -2.58033824]
[324.52966309 10.39592934]
[309.48959351 14.67739201]
[295.23736572 8.24247456]
[281.79748535 14.90347385]
[273.82980347 27.48780251]
[258.02905273 26.68342590]
[244.58914185 33.34442520]
[231.14923096 40.00542450]
[223.18154907 52.58975220]
[207.38081360 51.78537750]
[193.94090271 58.44637680]
[180.60836792 65.31977081]
[167.38656616 72.40383911]
[154.16476440 79.48790741]
[140.94296265 86.57197571]
[127.72116852 93.65603638]
[125.27653503 113.03096008]
[110.91221619 126.26085663]
[112.81110382 141.14018250]
[114.70999146 156.01950073]
[116.60887909 170.89881897]
[118.50776672 185.77815247]
[120.40665436 200.65747070]
[122.30553436 215.53678894]
[136.27920532 222.07440186]
[144.48074341 235.14108276]
[144.29310608 250.56730652]
[135.77613831 263.43060303]
[121.64757538 269.62637329]
[106.41580963 267.17755127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[18 28]
[19 27]
[20 26]
[36 45]
[37 44]
[38 43]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[55 79]
[56 78]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
