%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGCCGCCGCCGCUGCUGCAGCAGCAGCUGCUCUGCAGAGUGGUGGCCGGGGCCAGGGCCGGGGUGCCCUCCCUCCCACCUUCUCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[124.17247009 127.94526672]
[122.47593689 117.06201935]
[108.54763031 111.49406433]
[94.68299103 113.30056000]
[85.88441467 102.43424988]
[71.95610046 96.86629486]
[58.02779007 91.29833221]
[51.11710739 91.89209747]
[45.83429718 89.18479919]
[43.38283539 84.87445831]
[29.85296631 78.39813995]
[16.32309723 71.92182922]
[2.79322910 65.44551086]
[-10.73663902 58.96919632]
[-24.26650810 52.49288177]
[-37.79637527 46.01656723]
[-51.32624435 39.54025269]
[-64.85610962 33.06393814]
[-74.14871216 32.14060974]
[-78.72085571 26.14327812]
[-92.02919769 19.22316170]
[-105.33753967 12.30304337]
[-118.64588165 5.38292599]
[-131.95422363 -1.53719139]
[-145.26257324 -8.45730877]
[-154.51956177 -9.68737602]
[-158.89091492 -15.83259869]
[-171.96316528 -23.18895149]
[-185.03543091 -30.54530334]
[-201.41870117 -29.82358360]
[-210.00599670 -43.79463196]
[-201.96347046 -58.08622742]
[-185.56457520 -57.99640656]
[-177.67907715 -43.61756897]
[-164.60682678 -36.26121521]
[-151.53456116 -28.90486145]
[-138.34245300 -21.76565170]
[-125.03410339 -14.84553337]
[-111.72576141 -7.92541647]
[-98.41741943 -1.00529873]
[-85.10907745 5.91481876]
[-71.80073547 12.83493614]
[-58.37979889 19.53406906]
[-44.84992981 26.01038361]
[-31.32006073 32.48669815]
[-17.79019165 38.96301270]
[-4.26032400 45.43933105]
[9.26954460 51.91564560]
[22.79941368 58.39196014]
[36.32928085 64.86827850]
[49.85914993 71.34458923]
[63.59574890 77.37002563]
[77.52406311 82.93798065]
[91.45236969 88.50593567]
[105.31700897 86.69944000]
[114.11558533 97.56575012]
[128.04389954 103.13370514]
[145.79519653 94.14060974]
[164.26782227 100.69950867]
[172.13124084 118.33107758]
[186.54254150 122.49212646]
[200.95385742 126.65316772]
[214.67222595 119.27454376]
[229.22805786 123.69972992]
[236.17790222 136.82357788]
[250.58921814 140.98461914]
[265.00051880 145.14566040]
[279.41183472 149.30670166]
[293.82312012 153.46774292]
[308.23443604 157.62878418]
[319.24649048 146.92224121]
[334.14041138 143.17170715]
[348.90982056 147.38603210]
[359.58178711 158.43159485]
[363.28564453 173.33720398]
[359.02502441 188.09332275]
[347.94607544 198.73062134]
[333.02893066 202.38771057]
[318.28622437 198.08088684]
[307.68371582 186.96862793]
[304.07339478 172.04010010]
[289.66207886 167.87905884]
[275.25079346 163.71800232]
[260.83947754 159.55696106]
[246.42816162 155.39591980]
[232.01686096 151.23487854]
[219.14120483 158.63441467]
[204.46682739 154.61981201]
[196.79281616 141.06446838]
[182.38150024 136.90342712]
[167.97019958 132.74238586]
[160.38928223 140.15882874]
[150.30076599 143.68568420]
[139.58743286 142.59118652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[5 54]
[6 53]
[7 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[27 36]
[28 35]
[29 34]
[60 91]
[61 90]
[62 89]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
