%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUGACUGCGGACGAAUCGGCGUUUGCCGAGGCUGGCAUAGAUUUGGCUGUCUCCGCUCAUAGCUGCUUUUGGCGCGAAAG\
) } def
/len { sequence length } bind def

/coor [
[172.64151001 332.76440430]
[168.36830139 318.38595581]
[164.09509277 304.00750732]
[159.82188416 289.62905884]
[155.54866028 275.25061035]
[151.27545166 260.87216187]
[147.00224304 246.49372864]
[142.72903442 232.11528015]
[138.45582581 217.73684692]
[127.41337585 207.74116516]
[130.89866638 192.30860901]
[126.62545013 177.93017578]
[121.32585907 163.89755249]
[115.02751923 150.28392029]
[108.72918701 136.67028809]
[102.43084717 123.05666351]
[96.13251495 109.44303131]
[90.02206421 103.87961578]
[89.86247253 95.22231293]
[84.05973053 81.39017487]
[78.74661255 76.84612274]
[76.97917938 71.13420105]
[78.37748718 66.34432983]
[73.58795929 52.12953568]
[68.79843903 37.91473770]
[64.00891113 23.69993973]
[44.10987091 19.15079689]
[30.72404289 3.91489267]
[28.79970360 -16.14230537]
[38.91157150 -33.41830826]
[31.64732552 -46.54197693]
[24.38307762 -59.66564560]
[17.11882973 -72.78931427]
[9.85458279 -85.91298676]
[-4.46845198 -93.89939117]
[-4.44295502 -110.29852295]
[9.90484524 -118.24034882]
[23.81516075 -109.55500793]
[22.97825241 -93.17723083]
[30.24250031 -80.05356598]
[37.50674820 -66.92989349]
[44.77099609 -53.80622482]
[52.03524017 -40.68255234]
[62.24509430 -41.93836594]
[72.36525726 -39.93321609]
[81.37737274 -34.84968567]
[88.36856842 -27.18108749]
[92.62397003 -17.68364143]
[93.69972229 -7.30192089]
[91.46925354 2.92508411]
[86.13779449 11.96794605]
[78.22370911 18.91041756]
[83.01323700 33.12521362]
[87.80275726 47.34001160]
[92.59227753 61.55480957]
[97.89186859 75.58742523]
[103.69461823 89.41957092]
[109.74614716 103.14469147]
[116.04447937 116.75832367]
[122.34281921 130.37194824]
[128.64115906 143.98558044]
[134.93948364 157.59921265]
[139.06237793 160.23103333]
[141.71463013 163.75448608]
[142.79763794 167.53932190]
[142.44908142 170.99613953]
[141.00389099 173.65696716]
[145.27709961 188.03540039]
[156.62519836 199.05952454]
[152.83425903 213.46362305]
[157.10748291 227.84207153]
[161.38069153 242.22052002]
[165.65390015 256.59896851]
[169.92710876 270.97741699]
[174.20031738 285.35586548]
[178.47354126 299.73428345]
[182.74674988 314.11273193]
[187.01995850 328.49118042]
[201.86491394 332.69009399]
[212.06604004 344.26336670]
[214.36820984 359.51800537]
[208.03678894 373.58627319]
[195.09213257 381.97909546]
[179.66481018 382.01831055]
[166.67764282 373.69143677]
[160.27478027 359.65551758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[11 68]
[12 67]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[19 57]
[20 56]
[23 55]
[24 54]
[25 53]
[26 52]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
