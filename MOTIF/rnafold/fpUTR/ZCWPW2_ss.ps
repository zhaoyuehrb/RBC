%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGACGGGGCGGGGCCGCGGGACGCCAGGAGGCGGAGGCGGAGUGGAGUUAGAUUCAUCCCAGUAGAACGCCUGCCUCUUUAGUGACUACAGACCUCACUUCCCUUCUCUGGAGUUUUGGAGUCUAUUUUCUUCAUGGAAUUUUGCUAGGAACAAAAGAAAAGUCUAACUCCAUUAAAUGCCUUA\
) } def
/len { sequence length } bind def

/coor [
[-100.85615540 426.60403442]
[-108.02996826 439.77734375]
[-115.20377350 452.95068359]
[-122.37758636 466.12399292]
[-115.88197327 480.09228516]
[-118.82247925 495.03237915]
[-129.86579895 505.25537109]
[-144.63446045 506.99447632]
[-151.80827332 520.16778564]
[-151.61320496 535.98779297]
[-164.49513245 543.46478271]
[-171.66894531 556.63812256]
[-178.84275818 569.81140137]
[-181.10784912 586.61340332]
[-197.88021851 589.08801270]
[-204.90122986 573.65618896]
[-192.01606750 562.63763428]
[-184.84226990 549.46429443]
[-177.66845703 536.29095459]
[-178.37664795 521.41320801]
[-164.98159790 512.99401855]
[-157.80778503 499.82067871]
[-164.35957336 486.47106934]
[-161.76351929 471.64794922]
[-150.80880737 461.07214355]
[-135.55090332 458.95019531]
[-128.37710571 445.77685547]
[-121.20328522 432.60354614]
[-114.02947998 419.43020630]
[-118.94139099 413.04006958]
[-121.76591492 405.45526123]
[-122.23399353 397.34133911]
[-120.28427887 389.41644287]
[-116.07029724 382.38787842]
[-109.94855499 376.88900757]
[-102.44847870 373.42211914]
[-94.22661591 372.31262207]
[-86.00918579 373.67855835]
[-77.55938721 361.28497314]
[-69.10958099 348.89138794]
[-60.65978241 336.49780273]
[-52.20998383 324.10421753]
[-43.76018143 311.71063232]
[-43.74972916 292.38543701]
[-25.48793983 283.87832642]
[-17.45474815 271.21075439]
[-9.42155838 258.54315186]
[-1.38836682 245.87556458]
[6.64482450 233.20797729]
[14.67801571 220.54039001]
[22.71120644 207.87278748]
[30.74439812 195.20520020]
[38.77758789 182.53761292]
[46.81077957 169.87002563]
[54.84397125 157.20243835]
[62.87716293 144.53483582]
[70.91035461 131.86724854]
[78.94354248 119.19966125]
[71.60969543 97.55216217]
[82.54069519 77.47947693]
[104.70410919 71.89532471]
[110.98683929 58.27448273]
[117.26956177 44.65364075]
[116.02384186 28.88155365]
[128.38053894 20.56523323]
[134.66326904 6.94438982]
[140.94599915 -6.67645264]
[147.22872925 -20.29729462]
[153.51144409 -33.91813660]
[159.79417419 -47.53897858]
[166.07690430 -61.15982437]
[160.84712219 -75.83248901]
[167.41273499 -89.55646515]
[181.43312073 -94.45182800]
[187.71583557 -108.07266998]
[175.80232239 -117.28538513]
[166.24234009 -128.91271973]
[159.51284790 -142.36950684]
[155.94847107 -156.97938538]
[155.72486877 -172.00889587]
[158.85002136 -186.70422363]
[165.16406250 -200.32901001]
[174.34739685 -212.20130920]
[185.93692017 -221.72766113]
[199.34933472 -228.43276978]
[213.91055298 -231.98323059]
[228.88952637 -232.20411682]
[243.53495789 -229.08757019]
[249.81768799 -242.70840454]
[256.10040283 -256.32925415]
[262.38314819 -269.95010376]
[261.13742065 -285.72216797]
[273.49411011 -294.03851318]
[279.77685547 -307.65933228]
[286.05957031 -321.28018188]
[292.34228516 -334.90103149]
[291.09658813 -350.67312622]
[303.45327759 -358.98944092]
[309.73599243 -372.61029053]
[316.01873779 -386.23114014]
[305.67697144 -397.37188721]
[300.39050293 -411.62396240]
[300.96545410 -426.81402588]
[307.31417847 -440.62567139]
[318.46853638 -450.95278931]
[332.72753906 -456.22048950]
[347.91683960 -455.62554932]
[361.72015381 -449.25866699]
[372.03256226 -438.09072876]
[377.28152466 -423.82479858]
[376.66659546 -408.63632202]
[370.28155518 -394.84140015]
[359.10006714 -384.54367065]
[344.82723999 -379.31350708]
[329.63955688 -379.94839478]
[323.35684204 -366.32754517]
[317.07412720 -352.70672607]
[318.76922607 -337.90887451]
[305.96313477 -328.61831665]
[299.68041992 -314.99746704]
[293.39767456 -301.37661743]
[287.11495972 -287.75576782]
[288.81005859 -272.95794678]
[276.00399780 -263.66735840]
[269.72125244 -250.04652405]
[263.43853760 -236.42568970]
[257.15579224 -222.80484009]
[269.03332520 -213.68746948]
[278.58862305 -202.14994812]
[285.34002686 -188.76885986]
[288.94604492 -174.21385193]
[289.22271729 -159.21412659]
[286.15292358 -144.52189636]
[279.88751221 -130.87467957]
[270.73779297 -118.95824432]
[259.16006470 -109.37219238]
[245.73291016 -102.59977722]
[231.12834167 -98.98351288]
[216.07801819 -98.70789337]
[201.33668518 -101.78994751]
[195.05395508 -88.16910553]
[200.43124390 -74.32640076]
[194.25370789 -60.42343140]
[179.69773865 -54.87709808]
[173.41502380 -41.25625229]
[167.13229370 -27.63541222]
[160.84956360 -14.01456928]
[154.56683350 -0.39372635]
[148.28411865 13.22711658]
[142.00138855 26.84795952]
[143.69648743 41.64579391]
[130.89041138 50.93636703]
[124.60768127 64.55721283]
[118.32495117 78.17805481]
[123.14187622 83.37306213]
[126.52836609 89.59580231]
[128.27510071 96.46163940]
[128.27412415 103.54618835]
[126.52548218 110.41154480]
[123.13726807 116.63334656]
[118.31890869 121.82701874]
[112.36824036 125.67153931]
[105.65306854 127.92926788]
[98.58847809 128.46066284]
[91.61113739 127.23284912]
[83.57794189 139.90043640]
[75.54475403 152.56803894]
[67.51155853 165.23562622]
[59.47837067 177.90321350]
[51.44517899 190.57080078]
[43.41198730 203.23838806]
[35.37879562 215.90599060]
[27.34560585 228.57357788]
[19.31241417 241.24116516]
[11.27922344 253.90875244]
[3.24603224 266.57635498]
[-4.78715897 279.24392700]
[-12.82034969 291.91152954]
[-9.82990837 302.39413452]
[-13.04642391 312.57931519]
[-21.17359352 319.16610718]
[-31.36660004 320.16043091]
[-39.81640244 332.55401611]
[-48.26620102 344.94760132]
[-56.71600342 357.34118652]
[-65.16580200 369.73477173]
[-73.61560059 382.12835693]
[-67.56194305 403.76861572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[8 22]
[9 21]
[11 19]
[12 18]
[13 17]
[38 187]
[39 186]
[40 185]
[41 184]
[42 183]
[43 182]
[45 178]
[46 177]
[47 176]
[48 175]
[49 174]
[50 173]
[51 172]
[52 171]
[53 170]
[54 169]
[55 168]
[56 167]
[57 166]
[58 165]
[61 154]
[62 153]
[63 152]
[65 150]
[66 149]
[67 148]
[68 147]
[69 146]
[70 145]
[71 144]
[74 141]
[75 140]
[88 127]
[89 126]
[90 125]
[91 124]
[93 122]
[94 121]
[95 120]
[96 119]
[98 117]
[99 116]
[100 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
