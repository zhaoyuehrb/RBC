%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGCGUGCGCAGAGGUGCGGCCGGGGAGGCGCGCGGAGGCUGGAGCUGGAGGCGCGGCGCCGGUGAGCUGAGAACC\
) } def
/len { sequence length } bind def

/coor [
[79.44367981 115.52371979]
[91.45539856 106.54103088]
[76.55937195 104.77796936]
[61.94543457 110.83959961]
[50.21580505 101.66000366]
[35.31977844 99.89694214]
[20.42374992 98.13388062]
[5.52772379 96.37081909]
[-9.36830330 94.60775757]
[-24.26432991 92.84469604]
[-39.16035843 91.08163452]
[-47.68712616 104.79040527]
[-61.25558090 113.43191528]
[-77.16960144 115.34815216]
[-92.29242706 110.21162415]
[-103.66493988 99.08003998]
[-109.08467865 84.17897034]
[-124.03843689 83.00208282]
[-138.99220276 81.82519531]
[-155.25689697 86.61016846]
[-164.35739136 72.30571747]
[-153.13122559 59.60100937]
[-137.81530762 66.87143707]
[-122.86154938 68.04831696]
[-107.90779114 69.22520447]
[-101.44053650 56.79609680]
[-90.65866089 47.78029251]
[-77.19770813 43.58918381]
[-63.11650848 44.89896011]
[-50.58231735 51.54173279]
[-41.53722763 62.52624130]
[-37.39729691 76.18560791]
[-22.50126839 77.94866943]
[-7.60524225 79.71173096]
[7.29078484 81.47479248]
[22.18681145 83.23785400]
[37.08283997 85.00091553]
[51.97886658 86.76397705]
[65.52733612 80.57623291]
[78.32243347 89.88194275]
[93.21846008 91.64500427]
[108.03378296 89.29848480]
[121.65592957 83.01859283]
[135.27807617 76.73869324]
[148.90022278 70.45879364]
[162.52236938 64.17890167]
[171.81561279 51.37474823]
[186.61309814 53.07292938]
[200.23524475 46.79303360]
[213.85739136 40.51313782]
[227.47953796 34.23324203]
[232.71383667 19.32090950]
[246.99563599 12.55291653]
[261.85180664 17.94458961]
[268.46841431 32.29714584]
[262.91998291 47.09547043]
[248.49826050 53.55997467]
[233.75942993 47.85538864]
[220.13728333 54.13528442]
[206.51513672 60.41518021]
[192.89299011 66.69507599]
[184.57409668 79.05004883]
[168.80227661 77.80104828]
[155.18013000 84.08094788]
[141.55798340 90.36083984]
[127.93582916 96.64073944]
[114.31368256 102.92063141]
[128.51419067 107.75234985]
[139.91430664 117.50106049]
[146.89170837 130.77946472]
[148.45347595 145.69793701]
[144.37734985 160.13348389]
[135.24340820 172.03184509]
[122.35144043 179.69978333]
[107.53608704 182.04611206]
[92.90566254 178.73692322]
[80.54217529 170.24314880]
[72.20503998 157.77349854]
[69.08068085 143.10249329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[17 25]
[18 24]
[19 23]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
