%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACCCGCGCGGGGCCGGGCCGCCGGCGCAGUCGCUGCAGCCGCCGCGGGAGGCGUCCGUGACAAG\
) } def
/len { sequence length } bind def

/coor [
[196.73684692 265.45361328]
[188.84036255 252.70034790]
[174.32774353 249.55082703]
[166.13790894 236.72970581]
[169.53981018 221.52888489]
[161.64332581 208.77561951]
[153.74684143 196.02236938]
[145.85037231 183.26911926]
[137.95388794 170.51585388]
[130.05740356 157.76260376]
[121.86845398 145.19512939]
[113.39140320 132.82017517]
[104.91436005 120.44521332]
[82.33017731 117.75190735]
[71.70729828 93.33790588]
[57.98538971 87.27909088]
[44.26348114 81.22027588]
[30.54157257 75.16146088]
[16.81966400 69.10264587]
[0.58280259 71.40402985]
[-9.31428623 58.32810974]
[-2.69032598 43.32627106]
[13.64052105 41.83111954]
[22.87847900 55.38073730]
[36.60038757 61.43955231]
[50.32229614 67.49836731]
[64.04420471 73.55718231]
[77.76611328 79.61599731]
[90.33357239 71.42704773]
[90.33357239 56.42704773]
[90.33357239 41.42704773]
[90.33357239 26.42704773]
[84.28723145 10.58791542]
[97.83357239 0.39316055]
[111.37991333 10.58791542]
[105.33357239 26.42704773]
[105.33357239 41.42704773]
[105.33357239 56.42704773]
[105.33357239 71.42704773]
[119.79701233 82.55455780]
[123.66674042 98.61571503]
[117.28932190 111.96816254]
[125.76636505 124.34312439]
[134.24340820 136.71809387]
[141.93972778 142.26419067]
[142.81065369 149.86611938]
[150.70713806 162.61936951]
[158.60362244 175.37263489]
[166.50010681 188.12588501]
[174.39659119 200.87915039]
[182.29307556 213.63240051]
[197.41664124 217.36273193]
[205.24311829 230.40882874]
[201.59361267 244.80386353]
[209.49009705 257.55712891]
[218.52961731 269.52737427]
[228.63505554 280.61251831]
[238.74049377 291.69763184]
[253.87954712 299.32949829]
[250.73684692 315.98962402]
[233.85781860 317.58172607]
[227.65534973 301.80307007]
[217.54992676 290.71795654]
[207.44448853 279.63281250]
[204.30583191 279.57015991]
[201.01988220 278.03799438]
[198.24295044 274.98126221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 44]
[12 43]
[13 42]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[29 39]
[30 38]
[31 37]
[32 36]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
