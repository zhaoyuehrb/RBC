%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCGGCUGCGGCGGCGGAGCUCCUCCGAGGUCCGGGUCACCAGUCUCUGCUCUUCCCAGCCUCUCCGGCGCGCUCCAAGGGCUUCCCGUCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[160.54440308 184.79527283]
[169.47750854 172.74539185]
[184.00392151 168.99902344]
[171.78529358 160.29817200]
[156.92988586 159.21824646]
[150.17666626 144.91075134]
[137.95802307 136.20989990]
[125.73938751 127.50904083]
[113.52075195 118.80818939]
[101.30210876 110.10733032]
[93.27758026 108.31811523]
[88.83976746 100.93150330]
[76.90333557 91.84735870]
[56.92132568 90.39356995]
[49.84736252 72.51596069]
[37.35881424 64.20715332]
[24.87026596 55.89835739]
[12.38171864 47.58955383]
[-0.10682927 39.28075409]
[-12.59537697 30.97195244]
[-25.08392525 22.66315269]
[-37.70272827 14.55353928]
[-50.44860840 6.64515781]
[-69.51342773 12.39883709]
[-86.55468750 2.68249750]
[-91.17124176 -16.07692146]
[-104.61114502 -22.73792076]
[-118.05104828 -29.39892006]
[-131.49095154 -36.05991745]
[-147.09111023 -32.31629944]
[-159.65544128 -42.29212952]
[-159.54566956 -58.33480453]
[-146.84599304 -68.13776398]
[-131.29853821 -64.18100739]
[-124.82995605 -49.49982452]
[-111.39005280 -42.83882523]
[-97.95014191 -36.17782593]
[-84.51023865 -29.51682854]
[-75.75157166 -35.45236588]
[-65.22253418 -37.13212204]
[-54.89455795 -34.17144775]
[-46.73117828 -27.06117439]
[-42.31480408 -17.08772087]
[-42.54022598 -6.10072374]
[-29.79434586 1.80765820]
[-22.31424332 2.67510271]
[-16.77512360 10.17460442]
[-4.28657627 18.48340416]
[8.20197201 26.79220581]
[20.69051933 35.10100555]
[33.17906570 43.40980911]
[45.66761398 51.71860886]
[58.15616226 60.02740860]
[68.17665100 57.08792114]
[78.34223175 60.31211472]
[85.11301422 68.83696747]
[85.98748016 79.91092682]
[97.92391205 88.99507141]
[110.00296783 97.88869476]
[122.22160339 106.58954620]
[134.44024658 115.29039764]
[146.65888977 123.99125671]
[158.87751770 132.69210815]
[174.60688782 134.39437866]
[180.48614502 148.07952881]
[192.70477295 156.78039551]
[205.81251526 164.07333374]
[219.64782715 169.86851501]
[233.48315430 175.66369629]
[247.31846619 181.45887756]
[261.15377808 187.25404358]
[274.98910522 193.04922485]
[295.85876465 188.77311707]
[308.17184448 205.20567322]
[322.49539185 209.65948486]
[336.81890869 214.11328125]
[351.14245605 218.56709290]
[368.06256104 217.49638367]
[373.77536011 233.45884705]
[360.01818848 243.36724854]
[346.68865967 232.89062500]
[332.36511230 228.43681335]
[318.04159546 223.98301697]
[303.71804810 219.52920532]
[296.36770630 225.06083679]
[287.14114380 226.50347900]
[278.18966675 223.38804626]
[271.66317749 216.32389832]
[269.19390869 206.88453674]
[255.35859680 201.08935547]
[241.52328491 195.29418945]
[227.68797302 189.49900818]
[213.85266113 183.70382690]
[200.01734924 177.90866089]
[204.49272156 192.22546387]
[198.96453857 206.16960144]
[185.89491272 213.53063965]
[171.10479736 211.03013611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[12 58]
[13 57]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 45]
[23 44]
[26 38]
[27 37]
[28 36]
[29 35]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
