%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCCCGGCAUCUGCACGUGGUUAUGCUGCCGGAGUUUGGGCCGCCACUGUAGGAAAAGUAACUUCAGCUGCAGCCCCAAAGCGAGUGAGCCGAGCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[84.78051758 318.30761719]
[84.33177948 303.31433105]
[76.15341949 296.85974121]
[72.89517975 286.73065186]
[75.89894104 276.29235840]
[84.38168335 269.15875244]
[84.83041382 254.16545105]
[85.27914429 239.17216492]
[85.72787476 224.17887878]
[86.17661285 209.18559265]
[83.18168640 202.29302979]
[86.86972046 193.75236511]
[87.76677704 178.77922058]
[80.80447388 165.61199951]
[89.35323334 152.29925537]
[90.25028992 137.32609558]
[80.19369507 133.10595703]
[71.72001648 126.23999023]
[65.50647736 117.27691650]
[62.04967499 106.93305969]
[47.05135345 106.70867157]
[32.05303192 106.48427582]
[17.05470848 106.25988770]
[5.88944292 117.44525146]
[-9.91469383 117.37591553]
[-20.98138809 106.09301758]
[-20.74496460 90.29049683]
[-9.34569073 79.34371185]
[6.45344639 79.74719238]
[17.27910042 91.26156616]
[32.27742004 91.48595428]
[47.27574158 91.71035004]
[62.27406311 91.93473816]
[71.73030090 73.74893188]
[89.16704559 62.97377014]
[109.66191864 62.65107727]
[116.17017365 49.13654709]
[122.67843628 35.62201309]
[129.18669128 22.10747910]
[135.28773499 8.40429783]
[140.97612000 -5.47526646]
[146.66450500 -19.35483170]
[152.35289001 -33.23439407]
[150.42691040 -48.93793488]
[162.41276550 -57.78035355]
[168.10115051 -71.65991974]
[162.24234009 -86.09294128]
[168.20887756 -100.08776093]
[182.00466919 -105.58429718]
[187.69305420 -119.46385956]
[193.38143921 -133.34342957]
[191.45545959 -149.04696655]
[203.44131470 -157.88937378]
[209.12969971 -171.76895142]
[200.19973755 -184.34906006]
[199.51153564 -199.76107788]
[207.28468323 -213.08705139]
[221.03881836 -220.07472229]
[236.38502502 -218.49435425]
[248.42639160 -208.85023499]
[253.32055664 -194.21977234]
[249.50582886 -179.27148438]
[238.19944763 -168.77531433]
[223.00926208 -166.08056641]
[217.32087708 -152.20100403]
[219.65373230 -137.49021912]
[207.26100159 -127.65504456]
[201.57261658 -113.77547455]
[195.88423157 -99.89591217]
[201.85456848 -86.29845428]
[196.28344727 -72.14157104]
[181.98071289 -65.97153473]
[176.29232788 -52.09197235]
[178.62518311 -37.38119125]
[166.23245239 -27.54601288]
[160.54406738 -13.66644955]
[154.85568237 0.21311532]
[149.16729736 14.09267998]
[150.22532654 18.90439415]
[148.15252686 24.41952896]
[142.70121765 28.61573601]
[136.19296265 42.13026810]
[129.68470764 55.64480209]
[123.17645264 69.15933228]
[132.07760620 78.56820679]
[137.36303711 90.39282227]
[138.43699646 103.30033875]
[135.17840576 115.83584595]
[127.95459747 126.58637238]
[117.57979584 134.34013367]
[105.22344208 138.22315979]
[104.32638550 153.19631958]
[111.22452545 167.43450928]
[102.73992920 179.67628479]
[101.84287262 194.64942932]
[101.16989899 209.63432312]
[100.72116852 224.62760925]
[100.27243042 239.62089539]
[99.82369995 254.61418152]
[99.37496948 269.60748291]
[109.80276489 286.73065186]
[99.32506561 302.86560059]
[99.77380371 317.85888672]
[102.53976440 337.04220581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[12 95]
[13 94]
[15 92]
[16 91]
[20 33]
[21 32]
[22 31]
[23 30]
[36 84]
[37 83]
[38 82]
[39 81]
[40 78]
[41 77]
[42 76]
[43 75]
[45 73]
[46 72]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
