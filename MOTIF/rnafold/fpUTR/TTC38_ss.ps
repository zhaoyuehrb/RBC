%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCGCGACCGCCCCGCCCACUCCCAGGAAGGCCCGGGUGCCCAGAGCUCGCGGUGGACUCCGACCCGGCGCAAC\
) } def
/len { sequence length } bind def

/coor [
[141.83702087 170.94755554]
[135.06622314 165.58877563]
[130.10623169 158.48699951]
[127.38889313 150.23286438]
[127.15871429 141.51844788]
[129.45095825 133.07920837]
[117.72348022 123.72686768]
[100.43779755 129.61239624]
[82.98568726 124.24044037]
[72.00175476 109.65319824]
[71.66168213 91.39618683]
[58.88008118 83.54566956]
[46.09848022 75.69514465]
[33.31687927 67.84462738]
[20.53527641 59.99410629]
[2.25391483 60.04129410]
[-5.72666836 44.54949951]
[-18.81784439 37.22685623]
[-31.90902138 29.90421295]
[-42.53393555 33.54912186]
[-53.15309525 30.64324379]
[-60.15197372 22.43576050]
[-61.29531479 11.93453026]
[-73.74607086 3.56920052]
[-90.13516998 2.99536157]
[-97.59279633 -11.60997486]
[-88.44718170 -25.22208977]
[-72.10654449 -23.83800888]
[-65.38073730 -8.88155270]
[-52.92998505 -0.51622272]
[-33.77016068 -0.91453445]
[-24.58637810 16.81303787]
[-11.49520206 24.13567924]
[1.59597456 31.45832253]
[13.50160980 28.47711563]
[24.54315948 34.70705414]
[28.38579559 47.21250534]
[41.16739655 55.06302643]
[53.94899750 62.91354370]
[66.73059845 70.76406860]
[79.51219940 78.61458588]
[89.26754761 72.39746094]
[100.66036987 70.39173126]
[111.95244598 72.90341187]
[121.42089844 79.54930115]
[127.62110138 89.31540680]
[129.60708618 100.71169281]
[127.07582855 111.99938965]
[138.80329895 121.35173798]
[160.97973633 115.86452484]
[180.37768555 127.46981049]
[185.90911865 149.13873291]
[199.79640198 154.80822754]
[213.68370056 160.47772217]
[229.38459778 158.53039551]
[238.24331665 170.50422668]
[252.13059998 176.17372131]
[266.01788330 181.84321594]
[279.13540649 173.55404663]
[294.61773682 174.59184265]
[306.51159668 184.55755615]
[310.24359131 199.61915588]
[304.37866211 213.98516846]
[291.17199707 222.13154602]
[275.70181274 220.92585754]
[263.91674805 210.83171082]
[260.34838867 195.73051453]
[246.46110535 190.06100464]
[232.57380676 184.39151001]
[217.86621094 186.74436951]
[208.01419067 174.36502075]
[194.12690735 168.69551086]
[180.23962402 163.02601624]
[174.25070190 169.05377197]
[166.75738525 173.11827087]
[158.38490295 174.86235046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 49]
[7 48]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[17 34]
[18 33]
[19 32]
[23 30]
[24 29]
[52 73]
[53 72]
[54 71]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
