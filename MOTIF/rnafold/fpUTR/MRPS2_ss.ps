%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCGCGGAUGGCGACGGAAGGGGAGGCCGCUCGGCCUGGCCUGGAGGGAGACCUCGCUCUGCCCCGCGUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[102.49013519 337.88619995]
[101.90850067 322.89749146]
[88.05146027 314.32366943]
[81.88643646 299.06231689]
[85.98120117 282.95043945]
[98.93866730 272.27517700]
[97.77628326 257.32028198]
[96.61389160 242.36537170]
[95.45150757 227.41049194]
[94.28912354 212.45559692]
[93.12673950 197.50070190]
[89.94012451 193.62532043]
[89.33630371 187.63858032]
[92.50000000 181.34959412]
[92.50000000 166.34959412]
[92.50000000 151.34959412]
[92.50000000 136.34959412]
[79.60787964 131.01135254]
[69.59799957 121.28993225]
[63.88518524 108.55937195]
[63.27687836 94.61901093]
[67.85906219 81.43920898]
[76.98408508 70.88281250]
[70.25209808 57.47832489]
[63.52011490 44.07383347]
[48.78784943 39.01437759]
[42.15160751 25.32441902]
[47.06581497 11.31063461]
[40.33382797 -2.09385514]
[33.60184097 -15.49834442]
[26.86985207 -28.90283394]
[20.13786507 -42.30732346]
[6.14670658 -50.86182785]
[6.82998085 -67.24673462]
[21.48479462 -74.60665894]
[35.03553009 -65.37033844]
[33.54235458 -49.03931046]
[40.27434158 -35.63482285]
[47.00632858 -22.23033333]
[53.73831940 -8.82584286]
[60.47030640 4.57864666]
[74.64565277 9.00529671]
[81.66379547 22.50345612]
[76.92460632 37.34184647]
[83.65659332 50.74633408]
[90.38858032 64.15082550]
[109.95330048 64.24423981]
[126.75222778 74.27333832]
[139.44201660 66.27527618]
[152.13182068 58.27720642]
[164.82160950 50.27914047]
[171.98144531 35.52553177]
[188.35552979 34.61935806]
[197.09962463 48.49281311]
[189.21855164 62.87407684]
[172.81968689 62.96893692]
[160.12988281 70.96700287]
[147.44009399 78.96506500]
[134.75028992 86.96313477]
[137.11180115 99.49290466]
[135.09352112 112.08251190]
[128.93367004 123.24620056]
[119.35917664 131.66645813]
[107.50000000 136.34959412]
[107.50000000 151.34959412]
[107.50000000 166.34959412]
[107.50000000 181.34959412]
[108.08162689 196.33830261]
[109.24401855 211.29319763]
[110.40640259 226.24809265]
[111.56878662 241.20298767]
[112.73117828 256.15789795]
[113.89356232 271.11279297]
[126.26168060 277.52319336]
[133.73036194 289.15310669]
[134.40367126 302.84906006]
[128.21107483 314.96115112]
[116.89722443 322.31585693]
[117.47885132 337.30456543]
[120.41476440 356.46261597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[14 67]
[15 66]
[16 65]
[17 64]
[23 46]
[24 45]
[25 44]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
