%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACAUGAUCCAGUUUAAUCCUCCUCUUCUCCCUUCCUGAAGCUGCACGCUGCAGUAAGAGCACAGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[121.47587585 175.94673157]
[116.49868774 190.09692383]
[108.94848633 203.05818176]
[99.09486389 214.36773682]
[87.28964996 223.62176514]
[73.95436859 230.48982239]
[59.56517410 234.72669983]
[44.63584900 236.18110657]
[29.69946480 234.80108643]
[15.28934288 230.63595581]
[1.92001474 223.83441162]
[-9.93115139 214.63929749]
[-19.84099388 203.37896729]
[-27.45566940 190.45547485]
[-32.50328827 176.33027649]
[-34.80361557 161.50770569]
[-34.27452087 146.51704407]
[-30.93488884 131.89353943]
[-24.90397072 118.15933990]
[-16.39710617 105.80486298]
[-5.71804237 95.27121735]
[6.75190973 86.93453217]
[20.56749535 81.09248352]
[35.23541260 77.95365143]
[50.23192215 77.63012695]
[65.02156067 80.13346100]
[79.07624054 85.37426758]
[91.89097595 93.16306305]
[90.61888885 78.21710205]
[89.34679413 63.27113724]
[88.07470703 48.32517624]
[74.38804626 41.20626831]
[66.74270630 27.80655289]
[67.57828522 12.40183544]
[76.62815857 -0.09229839]
[91.00453949 -5.68901491]
[106.11997986 -2.60242224]
[117.15119171 8.18255901]
[120.57816315 23.22448158]
[115.30735779 37.72352219]
[103.02066803 47.05308533]
[104.29276276 61.99905014]
[105.56484985 76.94501495]
[106.83693695 91.89097595]
[116.74705505 103.15106201]
[131.41038513 106.31124878]
[146.07371521 109.47143555]
[160.73704529 112.63162231]
[175.09118652 102.89003754]
[191.75402832 106.32859039]
[200.72021484 120.39405060]
[215.50445557 122.92906189]
[230.28869629 125.46407318]
[241.30535889 114.53645325]
[256.64620972 112.20453644]
[270.41238403 119.36498260]
[277.31051636 133.26446533]
[274.68811035 148.55833435]
[263.55355835 159.36579895]
[248.18830872 161.53117371]
[234.50062561 154.22180176]
[227.75369263 140.24830627]
[212.96945190 137.71330261]
[198.18521118 135.17828369]
[188.65428162 144.10586548]
[175.51345825 145.84606934]
[163.64048767 139.52246094]
[157.57685852 127.29495239]
[142.91352844 124.13476562]
[128.25019836 120.97457886]
[113.58686829 117.81438446]
[119.68613434 131.51837158]
[123.09857178 146.12504578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 44]
[29 43]
[30 42]
[31 41]
[45 71]
[46 70]
[47 69]
[48 68]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
