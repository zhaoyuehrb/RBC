%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGCCUUGGCUACACCGUCUGUUAGGGCCGCGCACGAGAUCAGUAACUGAGACCUCACCGCGUUGACCCAGCACCAGGGCUCGCGGGGGUCCCGCGAGGGUCUCGGUAGCCGCGCGCCCAGAGACCCCCGCCGCGGCCCGAUUCUCUGAGCGCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[76.05107117 488.33761597]
[62.07172012 494.69949341]
[46.78586960 493.20336914]
[34.30533981 484.25170898]
[27.98732758 470.25250244]
[29.53134727 454.97140503]
[38.52206802 442.51901245]
[52.54102707 436.24490356]
[54.00218201 421.31622314]
[55.46333313 406.38757324]
[56.92448807 391.45889282]
[58.38564301 376.53024292]
[44.96244049 371.43380737]
[33.31204605 363.02111816]
[24.23658752 351.86358643]
[18.36291695 338.72189331]
[16.09933281 324.49407959]
[17.60719299 310.15426636]
[22.78943443 296.68579102]
[31.29678917 285.01400757]
[42.55133057 275.94247437]
[55.78570938 270.09783936]
[70.09548950 267.88641357]
[71.84765625 252.98908997]
[73.59981537 238.09178162]
[71.24600220 231.04576111]
[75.53425598 222.92192078]
[77.57675934 208.06164551]
[79.61925507 193.20135498]
[81.66175842 178.34106445]
[83.70425415 163.48077393]
[85.74675751 148.62048340]
[87.78925323 133.76019287]
[89.83175659 118.89990234]
[86.11268616 133.43154907]
[74.27657318 142.64601135]
[59.27662659 142.68719482]
[47.39009094 133.53785706]
[43.59128189 119.02686310]
[49.46994400 105.22681427]
[62.56595230 97.91281128]
[77.39995575 100.14622498]
[62.91740036 96.24038696]
[48.43484497 92.33454895]
[33.95228958 88.42870331]
[17.08514595 90.14212799]
[10.76939678 74.40847778]
[24.13979340 63.98404694]
[37.85813141 73.94615173]
[52.34068680 77.85198975]
[66.82324219 81.75783539]
[81.30579376 85.66367340]
[91.75604248 74.90298462]
[87.42803955 60.54093933]
[83.10003662 46.17889404]
[78.77203369 31.81684875]
[74.44402313 17.45480156]
[69.83992767 12.59661293]
[68.60524750 6.98404074]
[70.23915100 2.44739604]
[66.47479248 -12.07257652]
[62.71043396 -26.59255028]
[58.94607544 -41.11252213]
[55.18171692 -55.63249588]
[43.90252686 -59.57597351]
[36.02578354 -68.40039062]
[33.43674850 -79.81884766]
[36.67010880 -90.94673157]
[44.80451584 -99.03033447]
[41.60953903 -113.68612671]
[38.41455841 -128.34190369]
[24.48619461 -135.45068359]
[18.43351746 -149.86940002]
[23.11441422 -164.78996277]
[36.31870651 -173.16734314]
[51.81173706 -171.04600525]
[62.27816772 -159.42758179]
[62.77606583 -143.79792786]
[53.07034683 -131.53689575]
[56.26532364 -116.88110352]
[59.46030426 -102.22531128]
[75.41690826 -93.32803345]
[79.92984772 -75.29668427]
[69.70169067 -59.39685440]
[73.46604919 -44.87688065]
[77.23040771 -30.35690689]
[80.99476624 -15.83693504]
[84.75912476 -1.31696200]
[88.80607605 13.12679768]
[93.13407898 27.48884392]
[97.46208191 41.85089111]
[101.79008484 56.21293640]
[106.11808777 70.57498169]
[112.05555725 79.17655182]
[113.50973511 88.00170135]
[111.09197998 95.22617340]
[125.64798737 91.60366058]
[140.20399475 87.98114014]
[151.72712708 77.14010620]
[165.94624329 81.57473755]
[180.50224304 77.95221710]
[195.05825806 74.32969666]
[209.61425781 70.70718384]
[224.17027283 67.08466339]
[238.72628784 63.46215057]
[253.28228760 59.83963394]
[267.80224609 56.07527542]
[282.28482056 52.16943359]
[290.19705200 38.75175476]
[304.94006348 34.99698639]
[317.68301392 42.62279510]
[332.16558838 38.71695328]
[345.88391113 28.75484848]
[359.25430298 39.17928314]
[352.93856812 54.91292953]
[336.07141113 53.19950867]
[321.58886719 57.10535049]
[314.40829468 70.10438538]
[299.77655029 74.27177429]
[286.19064331 66.65198517]
[271.70809937 70.55783081]
[266.04019165 75.36009979]
[256.90481567 74.39563751]
[242.34880066 78.01815796]
[227.79278564 81.64067078]
[213.23678589 85.26319122]
[198.68077087 88.88571167]
[184.12477112 92.50822449]
[169.56875610 96.13074493]
[159.08677673 106.71266937]
[143.82650757 102.53714752]
[129.27050781 106.15966797]
[114.71449280 109.78218079]
[104.69204712 120.94240570]
[102.64954376 135.80268860]
[100.60704803 150.66297913]
[98.56454468 165.52326965]
[96.52204895 180.38356018]
[94.47954559 195.24385071]
[92.43704987 210.10414124]
[90.39454651 224.96443176]
[88.49712372 239.84393311]
[86.74496460 254.74125671]
[84.99280548 269.63854980]
[99.46481323 275.73504639]
[111.62880707 285.64407349]
[120.50931549 298.56045532]
[125.39714813 313.43832397]
[125.90600586 329.07577515]
[122.00301361 344.21188354]
[114.01070404 357.62844849]
[102.58038330 368.24810791]
[88.63907623 375.22070312]
[73.31430817 377.99139404]
[71.85315704 392.92007446]
[70.39199829 407.84872437]
[68.93084717 422.77740479]
[67.46968842 437.70605469]
[80.00609589 446.57928467]
[86.41174316 460.53863525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 158]
[9 157]
[10 156]
[11 155]
[12 154]
[23 144]
[24 143]
[25 142]
[27 141]
[28 140]
[29 139]
[30 138]
[31 137]
[32 136]
[33 135]
[34 134]
[42 52]
[43 51]
[44 50]
[45 49]
[53 93]
[54 92]
[55 91]
[56 90]
[57 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[69 81]
[70 80]
[71 79]
[96 133]
[97 132]
[98 131]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[106 123]
[107 121]
[108 120]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
