%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUCAGUUGUAACGGACUUCAUCACAUCACAAAUUGUACUCGUUCUCAUCCUUUUAAGAAAGUUCAGACCCAGGAAAAUUUCCAUAGUACCUUA\
) } def
/len { sequence length } bind def

/coor [
[173.21737671 153.27383423]
[160.56288147 145.22003174]
[147.90837097 137.16622925]
[135.25387573 129.11242676]
[122.59938812 121.05863190]
[109.94489288 113.00482941]
[94.97634888 113.97577667]
[83.46835327 123.59690094]
[71.96035767 133.21801758]
[60.45235825 142.83914185]
[59.29641342 158.60110474]
[47.27922058 168.86573792]
[31.53036308 167.54321289]
[21.39336205 155.41815186]
[22.88232040 139.68415833]
[35.11386490 129.67591858]
[50.83123398 131.33114624]
[62.33923340 121.71002197]
[73.84722900 112.08890533]
[85.35522461 102.46778107]
[84.74861908 94.99234772]
[70.90434265 100.76607513]
[61.13522720 89.38343811]
[68.94209290 76.57512665]
[83.53541565 80.04149628]
[82.92881012 72.56606293]
[70.02015686 64.92626190]
[57.11149979 57.28646088]
[42.92261505 63.56779480]
[27.75859451 60.27657700]
[17.45031357 48.67834854]
[15.96151543 33.23285675]
[23.86467552 19.87921906]
[38.12086487 13.75217438]
[53.24829102 17.20769882]
[63.43014526 28.91707230]
[64.75130463 44.37780380]
[77.65995789 52.01760483]
[90.56861115 59.65740585]
[90.11804962 44.66417694]
[93.50573730 30.05173111]
[100.50768280 16.78625870]
[110.66091156 5.74488354]
[123.29408264 -2.34232950]
[137.57188416 -6.94064665]
[152.55024719 -7.74602413]
[167.23880005 -4.70520926]
[180.66630554 1.98073626]
[191.94494629 11.86973286]
[200.32896423 24.30791092]
[205.26399231 38.47284698]
[206.42373657 53.42794800]
[203.73150635 68.18436432]
[197.36529541 81.76639557]
[187.74607849 93.27597809]
[175.50987244 101.95210266]
[161.46572876 107.22108459]
[146.54226685 108.73453522]
[131.72625732 106.39238739]
[117.99869537 100.35033417]
[130.65318298 108.40413666]
[143.30767822 116.45793915]
[155.96217346 124.51174164]
[168.61668396 132.56553650]
[181.27117920 140.61933899]
[193.56626892 129.49375916]
[208.43888855 122.19197083]
[224.73466492 119.27263641]
[241.19096375 120.95457458]
[256.53475952 127.10037994]
[269.58108521 137.22761536]
[279.32458496 150.54666138]
[285.01693726 166.02227783]
[286.22433472 182.45413208]
[282.86056519 198.56979370]
[296.23666382 205.35800171]
[309.61276245 212.14620972]
[322.98889160 218.93441772]
[339.84954834 220.71060181]
[342.81024170 237.40402222]
[327.58883667 244.87023926]
[316.20068359 232.31051636]
[302.82458496 225.52230835]
[289.44845581 218.73411560]
[276.07235718 211.94590759]
[267.24563599 222.23771667]
[256.30111694 230.25491333]
[243.81118774 235.57347107]
[230.43025208 237.91058350]
[216.86026001 237.13981628]
[203.81401062 233.29782104]
[191.97763062 226.58271790]
[181.97450256 217.34379578]
[174.33250427 206.06340027]
[169.45603943 193.33174133]
[167.60473633 179.81599426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[7 20]
[8 19]
[9 18]
[10 17]
[26 39]
[27 38]
[28 37]
[75 85]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
