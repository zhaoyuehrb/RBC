%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCGCCGCCACCACCACCGCCACCGCCACCGCCGCCGCGGGACGGGCCCAAGGCCGAGCCGGAGCCGGGGCCCGGGCCCGCGUCCGCUCCCGCGCCCGGCCUGGGUUCUGAGGAAAACGCA\
) } def
/len { sequence length } bind def

/coor [
[-87.76399231 273.58572388]
[-92.71881866 267.95974731]
[-106.29122162 274.34643555]
[-119.86363220 280.73312378]
[-133.43603516 287.11981201]
[-142.62841797 299.99655151]
[-157.43878174 298.41464233]
[-171.01118469 304.80133057]
[-180.20358276 317.67810059]
[-195.01394653 316.09619141]
[-208.58634949 322.48287964]
[-205.90390015 337.33099365]
[-207.15678406 352.36737061]
[-212.25961304 366.56680298]
[-220.86442566 378.96112061]
[-232.38456726 388.70529175]
[-246.03456116 395.13491821]
[-260.88372803 397.81164551]
[-275.91961670 396.55294800]
[-290.11706543 391.44464111]
[-302.50808716 382.83502197]
[-312.24780273 371.31112671]
[-318.67214966 357.65866089]
[-321.34313965 342.80847168]
[-320.07864380 327.77307129]
[-314.96484375 313.57757568]
[-306.35046387 301.18991089]
[-294.82281494 291.45465088]
[-281.16784668 285.03555298]
[-266.31661987 282.37030029]
[-251.28170776 283.64059448]
[-237.08821106 288.75985718]
[-224.70385742 297.37902832]
[-214.97303772 308.91046143]
[-201.40063477 302.52377319]
[-193.17903137 290.10385132]
[-177.39787292 291.22894287]
[-163.82546997 284.84225464]
[-155.60388184 272.42230225]
[-139.82272339 273.54739380]
[-126.25032043 267.16070557]
[-112.67790985 260.77401733]
[-99.10550690 254.38734436]
[-97.85001373 230.64152527]
[-83.06372070 211.88171387]
[-60.06218719 205.05226135]
[-37.23048401 212.77210999]
[-26.16778946 202.64212036]
[-15.10509205 192.51213074]
[-4.04239559 182.38212585]
[7.02030134 172.25213623]
[18.08299828 162.12214661]
[29.14569473 151.99215698]
[31.98573112 145.07734680]
[40.61601639 141.75090027]
[51.92978668 131.90211487]
[63.24356079 122.05332947]
[74.55732727 112.20454407]
[85.87110138 102.35575867]
[90.59510040 89.19614410]
[104.28011322 86.33046722]
[115.59388733 76.48168182]
[126.78300476 66.49150848]
[137.84570312 56.36151505]
[148.90840149 46.23152161]
[159.84292603 35.96331406]
[170.64755249 25.55851555]
[181.45219421 15.15371609]
[191.85699463 4.34908104]
[201.84716797 -6.84003592]
[211.69595337 -18.15380669]
[221.40179443 -29.59044456]
[231.10763550 -41.02708054]
[240.81347656 -52.46371841]
[243.21737671 -68.68572235]
[258.56539917 -74.46242523]
[271.06881714 -63.85126114]
[267.86517334 -47.76807785]
[252.25012207 -42.75788116]
[242.54428101 -31.32124329]
[232.83843994 -19.88460541]
[223.13259888 -8.44796753]
[221.18161011 -1.23173809]
[213.03628540 3.15014195]
[203.04611206 14.33925915]
[202.92416382 17.96950912]
[200.96604919 21.70913506]
[197.14651489 24.66190720]
[191.85699463 25.95835114]
[181.05235291 36.36315155]
[170.24772644 46.76795197]
[167.58235168 53.75194168]
[159.03839111 57.29421997]
[147.97569275 67.42420959]
[136.91299438 77.55420685]
[134.07295227 84.46900940]
[125.44267273 87.79545593]
[114.12889862 97.64424133]
[109.40489960 110.80385590]
[95.71988678 113.66953278]
[84.40611267 123.51831818]
[73.09234619 133.36709595]
[61.77857590 143.21588135]
[50.46480560 153.06468201]
[39.27568817 163.05485535]
[28.21298981 173.18484497]
[17.15029335 183.31483459]
[6.08759642 193.44482422]
[-4.97510004 203.57481384]
[-16.03779602 213.70481873]
[-27.10049438 223.83480835]
[-23.77769852 230.69674683]
[-21.82288551 238.05722046]
[-21.30429840 245.64665222]
[-22.23765373 253.18777466]
[-24.58567047 260.40563965]
[-28.25955200 267.03771973]
[-33.12234116 272.84344482]
[-38.99403000 277.61291504]
[-45.65820312 281.17456055]
[-52.87003708 283.40112305]
[-60.36527634 284.21444702]
[-67.86992645 283.58801270]
[-75.11026764 281.54794312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[5 40]
[7 38]
[8 37]
[10 35]
[11 34]
[47 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[55 104]
[56 103]
[57 102]
[58 101]
[59 100]
[61 98]
[62 97]
[63 95]
[64 94]
[65 93]
[66 91]
[67 90]
[68 89]
[69 85]
[70 84]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
