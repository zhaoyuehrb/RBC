%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCGGGGCCUGCUGGCGGAAGGGGAAAUGGGGUGGGUGGGGGGUGGGGCAGGCGACGGUGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[99.01823425 204.32862854]
[109.14852905 192.41596985]
[106.47017670 177.65702820]
[103.79182434 162.89808655]
[101.11347198 148.13914490]
[98.43511963 133.38020325]
[95.75675964 118.62125397]
[83.90643311 110.28363800]
[81.31922913 96.02696991]
[89.48429108 84.05709839]
[86.80593872 69.29814911]
[84.12758636 54.53920746]
[81.44923401 39.78026581]
[78.77088165 25.02132225]
[76.09252930 10.26237774]
[73.41416931 -4.49656630]
[61.18364716 -18.05557823]
[67.34657288 -34.33497620]
[64.00875854 -48.95889282]
[48.94397354 -48.95211411]
[34.25550079 -52.29824448]
[20.68011093 -58.82944107]
[8.89873791 -68.21810150]
[-0.49767026 -79.99330139]
[-7.03779364 -93.56439209]
[-10.39358234 -108.25065613]
[-10.39671135 -123.31544495]
[-7.04702282 -138.00309753]
[-0.51253724 -151.57690430]
[8.87897968 -163.35600281]
[20.65645218 -172.74955750]
[34.22912598 -179.28639221]
[48.91620636 -182.63862610]
[63.98099136 -182.63810730]
[78.66783905 -179.28485107]
[92.24005890 -172.74708557]
[104.01688385 -163.35270691]
[113.40758514 -151.57296753]
[119.94113159 -137.99870300]
[123.28980255 -123.31081390]
[123.28562927 -108.24603271]
[119.92882538 -93.55999756]
[113.38776398 -79.98935699]
[103.99053955 -68.21481323]
[92.20851898 -58.82696533]
[78.63267517 -52.29670715]
[81.97048950 -37.67279053]
[92.18021393 -30.81179047]
[94.93534088 -18.40795517]
[88.17311859 -7.17491961]
[90.85147095 7.58402395]
[93.52982330 22.34296799]
[96.20817566 37.10191345]
[98.88652802 51.86085510]
[101.56488037 66.61979675]
[104.24324036 81.37874603]
[116.09356689 89.71636200]
[118.68077087 103.97303009]
[110.51570892 115.94290161]
[113.19406128 130.70184326]
[115.87241364 145.46078491]
[118.55076599 160.21974182]
[121.22911835 174.97868347]
[123.90747070 189.73762512]
[137.57760620 197.33113098]
[143.12022400 211.95349121]
[137.91825867 226.70046997]
[124.42793274 234.60900879]
[109.01895142 231.94493103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[7 59]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[18 47]
[19 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
