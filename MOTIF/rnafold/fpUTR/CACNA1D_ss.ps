%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUAAGGGCAGGGACCGCGGCUCCUACCUCUUGGUGAUCCCCUUCCCCAUUCCGCCCCCGCCUCAACGCCCAGCACAGUGCCCUGCACACAGUAGUCGCUCAAUAAAUGUUCGUGG\
) } def
/len { sequence length } bind def

/coor [
[103.94873810 128.94458008]
[96.44477081 128.99554443]
[89.17540741 127.13317871]
[82.62031555 123.48037720]
[77.21206665 118.27816772]
[73.30752563 111.86984253]
[71.16433716 104.67825317]
[70.92393494 97.17796326]
[56.86654663 91.94443512]
[42.80915833 86.71090698]
[28.75177002 81.47737885]
[19.48868752 81.40174103]
[14.39544010 75.91570282]
[0.48109856 70.31292725]
[-13.43324280 64.71015167]
[-23.32514191 69.60162354]
[-34.04774475 68.19822693]
[-42.01471329 61.21705246]
[-44.69929123 51.19877243]
[-58.29855347 44.86947250]
[-71.89781189 38.54016876]
[-85.49707794 32.21086502]
[-90.86568451 37.31414032]
[-97.27821350 40.98461533]
[-104.36212158 43.01914597]
[-111.70825958 43.30933762]
[-118.89448547 41.84728622]
[-125.50994873 38.72551727]
[-131.17854309 34.13120270]
[-135.58030701 28.33493233]
[-138.46948242 21.67481422]
[-139.68823242 14.53673553]
[-139.17520142 7.33202028]
[-136.96858215 0.47371948]
[-148.69606018 -8.87862778]
[-160.42352295 -18.23097420]
[-176.03706360 -20.78597641]
[-181.16351318 -34.77056503]
[-192.89099121 -44.12291336]
[-208.56587219 -42.10456085]
[-221.02565002 -51.82718277]
[-222.87815857 -67.52252197]
[-213.02435303 -79.87881470]
[-197.31030273 -81.56528473]
[-185.05888367 -71.58139038]
[-183.53863525 -55.85038376]
[-171.81117249 -46.49803925]
[-157.03645325 -44.61197662]
[-151.07118225 -29.95844650]
[-139.34370422 -20.60610008]
[-127.61623383 -11.25375271]
[-104.81165314 -17.22379684]
[-84.46504974 -4.85110998]
[-79.16777802 18.61160278]
[-65.56851196 24.94090652]
[-51.96924973 31.27020836]
[-38.36998749 37.59951401]
[-19.37973976 34.37598038]
[-7.83046627 50.79581070]
[6.08387518 56.39858627]
[19.99821663 62.00136566]
[33.98529816 67.41999054]
[48.04269028 72.65351868]
[62.10007858 77.88704681]
[76.15746307 83.12057495]
[95.60415649 71.11994171]
[117.74068451 76.79117584]
[129.02159119 96.66403198]
[143.86373901 98.83438110]
[158.70590210 101.00473022]
[171.29820251 91.83567047]
[186.31935120 94.24814606]
[194.98303223 106.30948639]
[209.82519531 108.47983551]
[220.62535095 93.68677521]
[237.31542969 86.34794617]
[255.35101318 88.36974335]
[269.86727905 99.12221527]
[276.99114990 115.63186646]
[291.95849609 116.62114716]
[306.92584229 117.61042786]
[321.89318848 118.59970856]
[332.16702271 110.66654968]
[344.68658447 111.87480927]
[352.72158813 121.02219391]
[367.65762329 122.40621948]
[382.59362793 123.79024506]
[397.52963257 125.17427063]
[410.74099731 116.07266235]
[426.05166626 120.86467743]
[431.71658325 135.87428284]
[423.39010620 149.58740234]
[407.45962524 151.48449707]
[396.14559937 140.11027527]
[381.20959473 138.72625732]
[366.27359009 137.34222412]
[351.33758545 135.95820618]
[335.88861084 144.16850281]
[320.90390015 133.56704712]
[305.93655396 132.57777405]
[290.96920776 131.58848572]
[276.00186157 130.59921265]
[270.77883911 141.38313293]
[262.16229248 149.75961304]
[251.17144775 154.70458984]
[239.11787415 155.60180664]
[227.44883728 152.31962585]
[217.57363892 145.22970581]
[210.69337463 135.16499329]
[207.65484619 123.32199860]
[192.81268311 121.15164185]
[181.05816650 130.22726440]
[165.97518921 128.23764038]
[156.53555298 115.84688568]
[141.69338989 113.67653656]
[126.85124207 111.50618744]
[123.03410339 117.96695709]
[117.69700623 123.24214172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 65]
[9 64]
[10 63]
[11 62]
[13 61]
[14 60]
[15 59]
[19 57]
[20 56]
[21 55]
[22 54]
[34 51]
[35 50]
[36 49]
[38 47]
[39 46]
[68 116]
[69 115]
[70 114]
[73 111]
[74 110]
[79 102]
[80 101]
[81 100]
[82 99]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
