%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGACGGAGGCGGAAGUGCGGUGUUUUAGCCGGUGGCUGCUGUCUCUGGGCGGGCCGUGGGAGGCUCCCGAGGUGGGGGCCGGGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[131.22195435 130.20726013]
[126.03521729 115.70195770]
[111.67642212 111.36317444]
[100.96386719 116.26442719]
[89.74741364 112.66274261]
[83.89093781 102.44105530]
[69.69046021 97.60924530]
[55.48997879 92.77744293]
[41.28949738 87.94563293]
[27.08901787 83.11383057]
[12.88853741 78.28202057]
[-1.31194258 73.45021057]
[-15.51242352 68.61840820]
[-29.71290398 63.78660202]
[-45.26985168 66.66617584]
[-54.82640076 55.24156952]
[-69.02687836 50.40976334]
[-83.22736359 45.57795715]
[-102.61162567 50.55748749]
[-115.03305054 35.90722275]
[-129.53305054 32.06663513]
[-144.03305054 28.22604942]
[-158.53303528 24.38546371]
[-172.06950378 32.54264450]
[-187.38891602 28.65787888]
[-195.40252686 15.03592682]
[-191.35600281 -0.24154909]
[-177.65008545 -8.11069202]
[-162.41624451 -3.90287995]
[-154.69245911 9.88546753]
[-140.19245911 13.72605324]
[-125.69245911 17.56664085]
[-111.19246674 21.40722656]
[-102.62057495 15.37812424]
[-91.92035675 15.17573547]
[-82.75340271 21.11793327]
[-78.39555359 31.37747574]
[-64.19507599 36.20928192]
[-49.99459457 41.04108810]
[-35.45335770 37.81591034]
[-24.88109779 49.58612061]
[-10.68061638 54.41792679]
[3.51986408 59.24973297]
[17.72034454 64.08154297]
[31.92082405 68.91334534]
[46.12130356 73.74515533]
[60.32178497 78.57695770]
[74.52226257 83.40876770]
[88.72274780 88.24057007]
[104.98127747 84.48718262]
[116.01520538 97.00437927]
[130.37399292 101.34316254]
[142.72549438 92.13735962]
[157.95132446 91.97162628]
[170.21020508 100.69995880]
[174.92243958 114.80431366]
[189.28123474 119.14309692]
[203.64002991 123.48188019]
[217.99880981 127.82065582]
[228.43453979 118.63191223]
[241.95222473 115.87660217]
[254.94500732 120.17926025]
[264.00094604 130.29580688]
[266.79895020 143.47073364]
[280.99942017 148.30253601]
[295.19992065 153.13435364]
[309.40039062 157.96615601]
[323.60086060 162.79795837]
[337.80136108 167.62977600]
[352.00183105 172.46157837]
[366.97259521 166.69482422]
[380.74197388 174.92793274]
[382.74725342 190.84516907]
[371.45016479 202.23619080]
[355.51687622 200.36277771]
[347.17001343 186.66206360]
[332.96954346 181.83024597]
[318.76907349 176.99844360]
[304.56857300 172.16664124]
[290.36810303 167.33482361]
[276.16763306 162.50302124]
[261.96713257 157.67121887]
[248.97126770 167.53752136]
[232.49166870 167.79338074]
[218.92709351 158.14427185]
[213.66003418 142.17945862]
[199.30123901 137.84066772]
[184.94244385 133.50189209]
[170.58364868 129.16310120]
[158.84930420 138.29782104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[16 39]
[17 38]
[18 37]
[20 33]
[21 32]
[22 31]
[23 30]
[56 89]
[57 88]
[58 87]
[59 86]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
