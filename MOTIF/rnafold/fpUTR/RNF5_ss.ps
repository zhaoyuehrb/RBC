%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGUGAUUAGGAAACCUUGAAGCCUGCCCAACGAUCGUGGGCAGGAGGUGGUUUCUGGUUUGUUGGGGCGUGUGUAUGUGUAUUUGGGGGGACUGAAGGGUACGUGGGGCGAAACAAAACCGGCC\
) } def
/len { sequence length } bind def

/coor [
[7.27112436 209.68516541]
[-3.88452244 219.71270752]
[-17.75440598 225.42465210]
[-32.73631287 226.16117859]
[-47.09957123 221.83718872]
[-59.18497086 212.95219421]
[-67.59643555 200.53256226]
[-71.36229706 186.01298523]
[-70.04753876 171.07070923]
[-63.80401993 157.43185425]
[-53.35299301 146.67192078]
[-39.89887238 140.03305054]
[-54.73651886 137.83209229]
[-69.57416534 135.63113403]
[-84.41181183 133.43017578]
[-99.24945831 131.22921753]
[-114.08711243 129.02825928]
[-128.92475891 126.82730865]
[-136.02940369 137.75054932]
[-146.72015381 145.11798096]
[-159.36520386 147.84852600]
[-172.05096436 145.56555176]
[-182.87152100 138.64842224]
[-190.21511841 128.16993713]
[-193.00407410 115.73014832]
[-207.71585083 112.80379486]
[-222.42764282 109.87744141]
[-237.13941956 106.95108795]
[-251.85119629 104.02472687]
[-266.56295776 101.09837341]
[-281.27474976 98.17201996]
[-295.98654175 95.24566650]
[-308.06796265 105.17404938]
[-323.70413208 104.96213531]
[-335.51205444 94.70998383]
[-337.91644287 79.25835419]
[-329.78201294 65.90302277]
[-314.94955444 60.94997787]
[-300.42254639 66.73789215]
[-293.06018066 80.53388977]
[-278.34838867 83.46024323]
[-263.63662720 86.38659668]
[-248.92483521 89.31295013]
[-234.21305847 92.23930359]
[-219.50128174 95.16565704]
[-204.78950500 98.09201813]
[-190.07772827 101.01837158]
[-179.28875732 87.71295929]
[-163.18684387 81.61399078]
[-146.11619568 84.46199036]
[-132.73040771 95.57067108]
[-126.72380066 111.98966217]
[-111.88615417 114.19061279]
[-97.04850769 116.39157104]
[-82.21085358 118.59252930]
[-67.37320709 120.79348755]
[-52.53556061 122.99444580]
[-37.69791412 125.19540405]
[-22.71598244 124.45938873]
[-8.16551304 120.81468201]
[6.38495588 117.16998291]
[20.93542480 113.52527618]
[35.48589325 109.88057709]
[49.99053955 106.05759430]
[64.44718170 102.05690002]
[78.90382385 98.05620575]
[83.83035278 86.31169891]
[94.60053253 79.51408386]
[107.32205963 80.11999512]
[117.39741516 87.91046143]
[131.94789124 84.26576233]
[135.03822327 73.86241913]
[142.15800476 65.77976227]
[151.93946838 61.46721649]
[162.54632568 61.65974045]
[172.01844788 66.25343323]
[178.63409424 74.33738708]
[193.41325378 71.77296448]
[208.19241333 69.20853424]
[222.97158813 66.64410400]
[237.75074768 64.07967377]
[252.52990723 61.51524734]
[261.63656616 48.87774658]
[276.66128540 46.48758698]
[288.65307617 55.24728394]
[303.43225098 52.68285370]
[318.21142578 50.11842728]
[330.48562622 40.13573456]
[344.34832764 45.58324432]
[359.12747192 43.01881409]
[371.36511230 32.10222244]
[386.85107422 37.49828720]
[389.65469360 53.65600204]
[376.89187622 63.95369339]
[361.69189453 57.79798126]
[346.91275024 60.36240768]
[335.69561768 70.16167450]
[320.77584839 64.89759064]
[305.99667358 67.46202087]
[291.21752930 70.02644348]
[282.87774658 82.31400299]
[267.92611694 85.12522888]
[255.09434509 76.29441071]
[240.31517029 78.85884094]
[225.53601074 81.42327118]
[210.75685120 83.98769379]
[195.97767639 86.55212402]
[181.19851685 89.11655426]
[171.32760620 105.80622864]
[152.10678101 110.08367157]
[135.59259033 98.81623077]
[121.04212189 102.46092987]
[112.93217468 116.78051758]
[97.01896667 120.97476196]
[82.90451050 112.51284790]
[68.44787598 116.51354218]
[53.99123383 120.51422882]
[46.46057892 125.87278748]
[39.13059616 124.43104553]
[24.58012772 128.07574463]
[10.02965832 131.72044373]
[-4.52081013 135.36515808]
[-19.07127953 139.00985718]
[-5.03378725 144.29652405]
[6.42222691 153.97947693]
[13.97339439 166.94018555]
[16.74742126 181.68144226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[64 117]
[65 116]
[66 115]
[70 112]
[71 111]
[77 108]
[78 107]
[79 106]
[80 105]
[81 104]
[82 103]
[85 100]
[86 99]
[87 98]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
