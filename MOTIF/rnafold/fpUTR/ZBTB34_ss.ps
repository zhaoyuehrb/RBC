%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGACUGGCCUGGCGCCGGCGGCGGCGGAGGGGGCGCCGCGGGCGGGCGAUGUGAGCGCGGCGCUCUGGACAGAGUACGCUUCAUGUCAGUAGAA\
) } def
/len { sequence length } bind def

/coor [
[97.50225830 118.07313538]
[90.56418610 131.37211609]
[83.62610626 144.67111206]
[76.68803406 157.97010803]
[81.66555786 172.97009277]
[74.50402069 187.05867004]
[59.45223999 191.87731934]
[45.44016647 184.56723022]
[40.78091812 169.46534729]
[48.23874283 155.53134155]
[63.38904572 151.03202820]
[70.32711792 137.73303223]
[77.26519012 124.43405151]
[84.20326996 111.13505554]
[84.96227264 106.29057312]
[86.93659210 102.35544586]
[89.76027679 99.59619904]
[77.18894958 91.41317749]
[64.61763000 83.23015594]
[48.83090210 82.18621826]
[42.38529587 68.75850677]
[29.81397247 60.57548523]
[11.49341679 60.10159302]
[4.00112915 44.32157135]
[-8.82601261 36.54568100]
[-21.65315437 28.76979256]
[-34.48029327 20.99390411]
[-47.30743790 13.21801567]
[-60.13457870 5.44212770]
[-74.88081360 10.64622307]
[-89.50397491 5.10572243]
[-97.09945679 -8.56331825]
[-94.08090210 -23.90679741]
[-81.87358093 -33.67999268]
[-66.24141693 -33.26829910]
[-54.56544113 -22.86610794]
[-52.35868835 -7.38501406]
[-39.53154755 0.39087462]
[-26.70440674 8.16676331]
[-13.87726498 15.94265175]
[-1.05012369 23.71854019]
[11.77701759 31.49442863]
[23.71792221 28.92711639]
[34.51298141 35.45845795]
[37.99699783 48.00416183]
[50.56831741 56.18718719]
[65.45586395 56.64581680]
[72.80065155 70.65882874]
[85.37197876 78.84185791]
[97.94329834 87.02487946]
[112.66668701 89.89225769]
[127.39006805 87.02487946]
[142.11346436 84.15750122]
[156.83685303 81.29012299]
[171.56022644 78.42274475]
[186.28361511 75.55535889]
[201.00700378 72.68798065]
[215.73039246 69.82060242]
[223.73085022 65.02632141]
[230.97123718 67.10523987]
[245.77896118 64.71123505]
[260.58666992 62.31723785]
[268.85079956 52.25556183]
[281.36572266 50.65287781]
[291.24542236 57.83394241]
[306.12228394 55.91578293]
[320.99911499 53.99762726]
[335.87597656 52.07946777]
[350.75283813 50.16131210]
[363.45443726 39.78820038]
[378.69061279 45.85377121]
[380.78768921 62.11828232]
[367.58837891 71.85019684]
[352.67098999 65.03816223]
[337.79412842 66.95632172]
[322.91729736 68.87447357]
[308.04043579 70.79263306]
[293.16357422 72.71079254]
[279.92504883 84.10749054]
[262.98068237 77.12496948]
[248.17295837 79.51896667]
[233.36523438 81.91296387]
[218.59777832 84.54399109]
[203.87438965 87.41136932]
[189.15100098 90.27874756]
[174.42761230 93.14612579]
[159.70422363 96.01350403]
[144.98083496 98.88088989]
[130.25744629 101.74826813]
[115.53406525 104.61564636]
[130.43707275 106.31869507]
[141.80812073 116.10129547]
[145.71769714 130.58283997]
[140.81474304 144.75891113]
[128.79360962 153.73066711]
[113.80844116 154.39767456]
[101.03771973 146.52947998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[17 50]
[18 49]
[19 48]
[21 46]
[22 45]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[60 82]
[61 81]
[62 80]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
