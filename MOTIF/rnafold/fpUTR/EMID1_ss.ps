%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCGCGGAGCUGGAAACCGGGCUCCGCGCGUCCGGGGCGGCUGGCGGCGCGGGCAGGCAGGCGGGGAGGACAGGCUGGGGGCGGCGACCGCGAGGGGCCGCGCGCGGAGGGCGCCUGGUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[66.82000732 92.60359192]
[53.26016617 86.19026184]
[39.70032501 79.77693939]
[26.14048576 73.36360931]
[12.58064651 66.95028687]
[-0.97919250 60.53695679]
[-15.88779736 62.19028854]
[-27.71299362 71.41876221]
[-39.53818893 80.64723969]
[-51.36338806 89.87570953]
[-63.18858337 99.10418701]
[-75.01377869 108.33265686]
[-86.83897400 117.56113434]
[-98.66416931 126.78960419]
[-97.99652863 142.29231262]
[-106.59669495 155.20806885]
[-121.15773773 160.57049561]
[-136.08062744 156.31764221]
[-145.62722778 144.08482361]
[-146.12666321 128.57577515]
[-137.38688660 115.75408173]
[-122.76853180 110.54992676]
[-107.89264679 114.96440887]
[-96.06745148 105.73593903]
[-84.24225616 96.50746155]
[-72.41705322 87.27899170]
[-60.59186172 78.05051422]
[-48.76666260 68.82204437]
[-36.94146729 59.59356689]
[-25.11627007 50.36509323]
[-31.74633217 39.95180893]
[-31.92556763 28.58980942]
[-26.60609818 19.67157173]
[-33.99956894 6.62026596]
[-41.39304352 -6.43103886]
[-48.78651810 -19.48234367]
[-64.08015442 -19.71014977]
[-77.12026978 -27.51093102]
[-84.45618439 -40.70375824]
[-84.20526123 -55.69685745]
[-76.53501129 -68.46528625]
[-83.92848206 -81.51659393]
[-97.46269226 -89.71024323]
[-97.00381470 -104.59777832]
[-104.39728546 -117.64908600]
[-111.79076385 -130.70039368]
[-127.08206177 -132.56646729]
[-138.21240234 -142.95727539]
[-141.05638123 -157.73481750]
[-134.72915649 -171.19230652]
[-142.12261963 -184.24362183]
[-156.52381897 -192.08821106]
[-156.66024780 -208.48678589]
[-142.39155579 -216.56990051]
[-128.39616394 -208.02233887]
[-129.07131958 -191.63708496]
[-121.67784882 -178.58578491]
[-106.88212585 -177.09429932]
[-95.66909790 -167.05775452]
[-92.47874451 -152.16900635]
[-98.73945618 -138.09385681]
[-91.34598541 -125.04255676]
[-83.95250702 -111.99124908]
[-70.94713593 -104.73111725]
[-70.87718201 -88.91006470]
[-63.48370743 -75.85876465]
[-48.58856201 -75.87346649]
[-35.59955215 -68.38069916]
[-28.05510139 -55.30600739]
[-28.06810570 -40.11072159]
[-35.73521042 -26.87581635]
[-28.34173775 -13.82451153]
[-20.94826508 -0.77320689]
[-13.55479240 12.27809811]
[7.12454319 21.29622841]
[5.43413401 46.97711945]
[18.99397278 53.39044571]
[32.55381393 59.80377197]
[46.11365128 66.21709442]
[59.67349243 72.63042450]
[73.23332977 79.04374695]
[94.24790955 64.44260406]
[121.03359222 68.29823303]
[138.93281555 90.52094269]
[153.86058044 89.05068207]
[168.78836060 87.58042908]
[183.71612549 86.11016846]
[198.64389038 84.63991547]
[207.47200012 75.14208984]
[220.00701904 74.27768707]
[229.43124390 81.96611023]
[244.39059448 80.86264801]
[257.63934326 71.19812012]
[272.52178955 78.08609009]
[273.72817993 94.44080353]
[260.01748657 103.43793488]
[245.49406433 95.82199860]
[230.53469849 96.92546844]
[216.64236450 107.57386780]
[200.11415100 99.56768036]
[185.18638611 101.03794098]
[170.25860596 102.50820160]
[155.33084106 103.97845459]
[140.40307617 105.44871521]
[135.69784546 119.69163513]
[146.81211853 129.76501465]
[157.92637634 139.83840942]
[169.04064941 149.91178894]
[185.07043457 150.56390381]
[194.43841553 163.58773804]
[189.95826721 178.99253845]
[175.06678772 184.96105957]
[161.18742371 176.91474915]
[158.96725464 161.02606201]
[147.85299683 150.95266724]
[136.73872375 140.87928772]
[125.62445831 130.80590820]
[118.50928497 134.96717834]
[110.78779602 137.53816223]
[102.80574799 138.44897461]
[94.91146851 137.70306396]
[87.44068909 135.37525940]
[80.70225525 131.60673523]
[74.96535492 126.59722137]
[70.44886017 120.59477997]
[67.31304169 113.88378906]
[65.65415192 106.77158356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[33 74]
[34 73]
[35 72]
[36 71]
[41 66]
[42 65]
[44 63]
[45 62]
[46 61]
[50 57]
[51 56]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[91 98]
[92 97]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
