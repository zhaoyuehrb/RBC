%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGAGUUGGUCCGCGGACGCCGGAAGUAGUUCGUCGCUCCCUAGCGGCCGAAGGGGCGGGCUCGCGGGGUCUCGACUGCUUUCGGCUUGCUCGGCGGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[69.92317200 503.83065796]
[57.93886185 513.54559326]
[42.60224152 515.21636963]
[28.80716515 508.30990601]
[20.95559311 495.02999878]
[21.55293655 479.61419678]
[30.40858078 466.98165894]
[44.69672394 461.16336060]
[47.35007858 446.39990234]
[50.00343323 431.63644409]
[44.63947678 417.74121094]
[54.69588089 405.52731323]
[57.34923172 390.76385498]
[60.00258636 376.00039673]
[62.65594101 361.23693848]
[65.30929565 346.47348022]
[59.94533920 332.57827759]
[70.00173950 320.36437988]
[72.65509796 305.60092163]
[63.78176498 287.06768799]
[77.28514099 270.56939697]
[78.61708069 255.62864685]
[79.94902039 240.68789673]
[81.28096008 225.74714661]
[82.61289978 210.80639648]
[83.94483948 195.86566162]
[85.27677155 180.92491150]
[86.60871124 165.98416138]
[87.94065094 151.04341125]
[89.27259064 136.10266113]
[90.60453033 121.16191864]
[91.93647003 106.22116852]
[89.42866516 98.41254425]
[93.53569031 90.85964203]
[95.30978394 75.96492004]
[85.80844879 63.62140656]
[87.81981659 48.54132080]
[99.64602661 39.55931854]
[101.42012787 24.66460228]
[103.19422150 9.76988506]
[104.96832275 -5.12483120]
[106.74241638 -20.01954842]
[104.53787994 -25.11034775]
[104.61492157 -30.02062988]
[106.49033356 -33.87476730]
[109.39308167 -36.13628387]
[112.48275757 -50.81463242]
[115.57244110 -65.49298096]
[118.44426727 -80.21549988]
[121.09762573 -94.97895813]
[123.75097656 -109.74241638]
[112.38292694 -120.17175293]
[108.48014832 -135.09729004]
[113.28799438 -149.75636292]
[125.27230072 -159.47129822]
[140.60891724 -161.14208984]
[154.40399170 -154.23561096]
[162.25556946 -140.95568848]
[161.65821838 -125.53989410]
[152.80258179 -112.90735626]
[138.51443481 -107.08906555]
[135.86108398 -92.32560730]
[133.20773315 -77.56214905]
[135.15354919 -70.30574036]
[130.25077820 -62.40330124]
[127.16110992 -47.72495270]
[124.07142639 -33.04660416]
[121.63713074 -18.24545097]
[119.86303711 -3.35073376]
[118.08893585 11.54398251]
[116.31484222 26.43869972]
[114.54074097 41.33341599]
[123.92634583 52.84193802]
[122.33933258 67.97257233]
[110.20449829 77.73902130]
[108.43040466 92.63373566]
[106.87721252 107.55310822]
[105.54527283 122.49385834]
[104.21334076 137.43460083]
[102.88140106 152.37535095]
[101.54946136 167.31610107]
[100.21752167 182.25685120]
[98.88558197 197.19760132]
[97.55364227 212.13833618]
[96.22171021 227.07908630]
[94.88977051 242.01983643]
[93.55783081 256.96057129]
[92.22589111 271.90133667]
[99.39211273 278.46246338]
[102.59421539 287.48818970]
[101.20609283 296.82327271]
[95.68167114 304.30279541]
[87.41855621 308.25427246]
[84.76519775 323.01773071]
[89.93936920 337.96893311]
[80.07275391 349.12683105]
[77.41940308 363.89028931]
[74.76604462 378.65374756]
[72.11269379 393.41720581]
[69.45933533 408.18066406]
[74.63350677 423.13186646]
[64.76689148 434.28979492]
[62.11353683 449.05325317]
[59.46018219 463.81671143]
[70.82823181 474.24606323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 104]
[9 103]
[10 102]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[18 94]
[19 93]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[34 76]
[35 75]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[46 67]
[47 66]
[48 65]
[49 63]
[50 62]
[51 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
