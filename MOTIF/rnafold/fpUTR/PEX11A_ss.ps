%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAAAGUGUGCCCGCCCCCUCUGGGGCGGAGAGACUCAGCCCCUCCCCCUCAGCGGAUAACCUGGGACUGACCGUUCCCUGGGGAUCCGACGGGCCCCAGAGGACCCACGCCUGAGCCCCGUGCGACUCGUGGCCUUUGGGCUAGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[121.77912140 262.06570435]
[109.28043365 253.77214050]
[99.42572021 242.46354675]
[92.91929626 228.94813538]
[90.22619629 214.19186401]
[91.53890991 199.24942017]
[96.76359558 185.18873596]
[105.52684784 173.01478577]
[117.20234680 163.59762573]
[130.95561218 157.61033630]
[145.80368042 155.48083496]
[160.68104553 157.36018372]
[148.89891052 148.07679749]
[137.11677551 138.79341125]
[125.33464050 129.51002502]
[113.55250549 120.22664642]
[106.74712372 124.35407257]
[98.69600677 126.16313171]
[90.19650269 125.28586578]
[82.15051270 121.63009644]
[75.46894073 115.40721893]
[70.96967316 107.12696838]
[69.28034973 97.55805206]
[54.28746033 97.09612274]
[39.29457474 96.63420105]
[24.30169106 96.17227173]
[9.30880451 95.71035004]
[-5.68408155 95.24842072]
[-19.71597862 102.55707550]
[-32.19894409 94.43151093]
[-47.19182968 93.96958160]
[-62.18471527 93.50765228]
[-77.17760468 93.04573059]
[-84.64879608 106.40386963]
[-97.47837830 114.75015259]
[-112.71819305 116.16667938]
[-126.86624908 110.32792664]
[-136.67143250 98.57560730]
[-139.88056946 83.61031342]
[-135.75624084 68.87096405]
[-125.24617767 57.74454880]
[-110.76551056 52.78783798]
[-95.64179993 55.13985062]
[-83.35036469 64.26010895]
[-76.71567535 78.05284119]
[-61.72278976 78.51477051]
[-46.72990417 78.97669220]
[-31.73701859 79.43862152]
[-18.77751160 72.09693146]
[-5.22215557 80.25553894]
[9.77073002 80.71746063]
[24.76361656 81.17938995]
[39.75650024 81.64131165]
[54.74938583 82.10324097]
[69.74227142 82.56516266]
[79.84770966 71.48003387]
[78.00438690 56.59372330]
[76.16105652 41.70741653]
[74.31773376 26.82110786]
[72.47441101 11.93480110]
[60.29430389 2.22487235]
[58.63697052 -12.89821911]
[67.96896362 -24.45025253]
[66.12564087 -39.33655930]
[56.75110626 -52.08131027]
[62.86572647 -65.66294098]
[61.02240372 -80.54924774]
[59.17908096 -95.43555450]
[57.33575439 -110.32186127]
[43.69184494 -117.71262360]
[37.02825546 -131.72605896]
[39.90727615 -146.97370911]
[51.22186279 -157.59254456]
[66.62133026 -159.49940491]
[80.18425751 -151.96107483]
[86.69543457 -137.87617493]
[83.65117645 -122.66065979]
[72.22206116 -112.16518402]
[74.06538391 -97.27887726]
[75.90871429 -82.39257050]
[77.75203705 -67.50626373]
[86.99472046 -55.82628250]
[81.01194763 -41.17988586]
[82.85527039 -26.29357719]
[94.72311401 -17.36665154]
[96.80456543 -2.29607797]
[87.36071777 10.09147644]
[89.20404053 24.97778320]
[91.04736328 39.86408997]
[92.89069366 54.75040054]
[94.73401642 69.63670349]
[121.19916534 82.35471344]
[122.83588409 108.44451141]
[134.61802673 117.72789001]
[146.40016174 127.01127625]
[158.18229675 136.29466248]
[169.96443176 145.57804871]
[183.45982361 152.12591553]
[198.04356384 155.63508606]
[212.62731934 159.14425659]
[227.21107483 162.65342712]
[241.79481506 166.16258240]
[256.37857056 169.67175293]
[270.96231079 173.18092346]
[285.54605103 176.69009399]
[292.08111572 175.16178894]
[297.56109619 176.93881226]
[300.65048218 180.65431213]
[315.07785034 184.75926208]
[329.50524902 188.86419678]
[343.93261719 192.96914673]
[358.36001587 197.07409668]
[367.91006470 186.80776978]
[380.89477539 181.69468689]
[394.74838257 182.68362427]
[406.75988770 189.52372742]
[414.60360718 200.82469177]
[416.78924561 214.33909607]
[431.12930298 218.73939514]
[445.91891479 212.52268982]
[459.93087769 220.33578491]
[462.41644287 236.18511963]
[451.46887207 247.91246033]
[435.48620605 246.52157593]
[426.72900391 233.07945251]
[412.38894653 228.67915344]
[400.85986328 239.96081543]
[385.12832642 243.92895508]
[369.44757080 239.41349792]
[358.10614014 227.55122375]
[354.25506592 211.50148010]
[339.82766724 207.39653015]
[325.40029907 203.29159546]
[310.97290039 199.18664551]
[296.54553223 195.08169556]
[282.03689575 191.27383423]
[267.45315552 187.76467896]
[252.86940002 184.25550842]
[238.28564453 180.74633789]
[223.70190430 177.23716736]
[209.11814880 173.72799683]
[194.53440857 170.21884155]
[179.95065308 166.70967102]
[190.63703918 177.23587036]
[198.15270996 190.21720886]
[201.96047974 204.72584534]
[201.78822327 219.72486877]
[197.64823914 234.14222717]
[189.83642578 246.94752502]
[178.91110229 257.22552490]
[165.65312195 264.24166870]
[151.01005554 267.49444580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 97]
[13 96]
[14 95]
[15 94]
[16 93]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[30 48]
[31 47]
[32 46]
[33 45]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[63 84]
[64 83]
[66 81]
[67 80]
[68 79]
[69 78]
[98 143]
[99 142]
[100 141]
[101 140]
[102 139]
[103 138]
[104 137]
[105 136]
[108 135]
[109 134]
[110 133]
[111 132]
[112 131]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
