%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAGGCCUCGCGCAAAACCCAGGCGCCGCGGCUCCGCGCUCCGGCUGAGGGUCCGCGCCGCCGCCCGCCCGCUCCUUCCCGCUCGGCCGCGGCCUCAGGGACGGAUACUCCAGCGCGCGGUUCCAACCGAGGCCCGUGGUUUAGCCCCACGAAG\
) } def
/len { sequence length } bind def

/coor [
[70.79844666 247.25946045]
[65.26523590 233.31730652]
[67.31405640 218.45788574]
[76.41378784 206.53334045]
[90.20542145 200.63496399]
[105.11363220 202.29183960]
[117.27431488 211.07527161]
[113.15250397 196.65270996]
[109.03068542 182.23013306]
[104.90886688 167.80755615]
[100.78704834 153.38497925]
[96.66523743 138.96240234]
[82.24266052 134.84059143]
[71.12213898 144.90707397]
[60.00161362 154.97354126]
[48.88108826 165.04002380]
[51.50870514 180.24197388]
[45.47936249 194.44233704]
[32.71700287 203.10984802]
[17.29404831 203.47872925]
[4.13191032 195.43125916]
[-2.56942320 181.53538513]
[-0.67158055 166.22518921]
[9.21984386 154.38613892]
[23.94853210 149.79600525]
[38.81461334 153.91949463]
[49.93513489 143.85302734]
[61.05566025 133.78654480]
[72.17618561 123.72006989]
[65.58917236 106.58335876]
[68.27760315 89.20921326]
[78.76910400 76.08406067]
[93.67932892 70.21056366]
[94.27567291 55.22242737]
[83.83235168 43.66497421]
[84.65064240 28.47336197]
[95.73326874 18.58847237]
[96.32961273 3.60033154]
[96.92596436 -11.38780975]
[97.52230835 -26.37594986]
[98.11865997 -41.36408997]
[98.71500397 -56.35223389]
[96.48881531 -60.22479248]
[95.72319031 -64.20277405]
[96.26660156 -67.80386353]
[97.82355499 -70.64748383]
[100.00151825 -72.49374390]
[101.78678894 -87.38712311]
[103.57205963 -102.28050232]
[105.35733795 -117.17388153]
[106.99445343 -132.08427429]
[108.48326111 -147.01020813]
[102.15388489 -161.51019287]
[111.11621094 -173.40666199]
[112.60501862 -188.33259583]
[114.09382629 -203.25852966]
[115.58263397 -218.18446350]
[117.07144165 -233.11039734]
[107.33568573 -245.26986694]
[109.05817413 -260.38568115]
[120.71037292 -269.59228516]
[122.19918060 -284.51821899]
[123.09340668 -299.49154663]
[123.39163971 -314.48858643]
[123.68987274 -329.48562622]
[123.98810577 -344.48266602]
[124.28633881 -359.47970581]
[115.91068268 -369.33526611]
[116.49925232 -381.85369873]
[125.18817902 -390.31872559]
[125.78452301 -405.30688477]
[126.38087463 -420.29501343]
[117.43095398 -436.35897827]
[127.31021881 -450.83486938]
[127.60845184 -465.83190918]
[115.15785980 -475.09268188]
[110.56061554 -489.91311646]
[115.58446503 -504.59442139]
[128.29762268 -513.49133301]
[143.81163025 -513.18280029]
[156.16104126 -503.78750610]
[160.59722900 -488.91809082]
[155.41441345 -474.29214478]
[142.60548401 -465.53366089]
[142.30725098 -450.53662109]
[150.47607422 -441.56863403]
[150.31730652 -429.03738403]
[141.36901855 -419.69866943]
[140.77265930 -404.71054077]
[140.17631531 -389.72238159]
[149.17503357 -374.68328857]
[139.28337097 -359.18145752]
[138.98513794 -344.18441772]
[138.68690491 -329.18737793]
[138.38867188 -314.19033813]
[138.09043884 -299.19332886]
[139.99121094 -297.06274414]
[141.13858032 -294.03063965]
[141.17715454 -290.38897705]
[139.86703491 -286.55569458]
[137.12512207 -283.02941895]
[135.63630676 -268.10348511]
[145.24037170 -256.77664185]
[143.94313049 -241.61840820]
[131.99737549 -231.62158203]
[130.50856018 -216.69564819]
[129.01976013 -201.76972961]
[127.53095245 -186.84379578]
[126.04214478 -171.91786194]
[132.47801208 -158.48547363]
[123.40919495 -145.52140808]
[121.92038727 -130.59547424]
[124.39936829 -123.58925629]
[120.25071716 -115.38861084]
[118.46544647 -100.49523163]
[116.68016815 -85.60184479]
[114.89489746 -70.70846558]
[113.70314789 -55.75588608]
[113.10679626 -40.76774216]
[112.51045227 -25.77960205]
[111.91410065 -10.79146194]
[111.31775665 4.19667912]
[110.72140503 19.18482018]
[120.98364258 29.91897964]
[120.59236908 45.12757874]
[109.26381683 55.81877518]
[108.66746521 70.80691528]
[122.66860199 77.87733459]
[131.75474548 91.40835571]
[133.10176086 108.26699066]
[125.76856995 124.18523407]
[111.08780670 134.84059143]
[115.20962524 149.26316833]
[119.33144379 163.68574524]
[123.45325470 178.10830688]
[127.57507324 192.53088379]
[131.69688416 206.95346069]
[137.22984314 220.89570618]
[144.11930847 234.21995544]
[151.00877380 247.54418945]
[157.89822388 260.86843872]
[164.78768921 274.19265747]
[180.08381653 277.44265747]
[189.67150879 289.79620361]
[189.02372742 305.42034912]
[178.44635010 316.93786621]
[162.93370056 318.91052246]
[149.81034851 310.40689087]
[145.27276611 295.44210815]
[151.46345520 281.08212280]
[144.57398987 267.75787354]
[137.68452454 254.43365479]
[130.79507446 241.10940552]
[123.90560913 227.78517151]
[121.07742310 242.51614380]
[111.36260223 253.94514465]
[97.27959442 259.10934448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 137]
[8 136]
[9 135]
[10 134]
[11 133]
[12 132]
[13 29]
[14 28]
[15 27]
[16 26]
[33 127]
[34 126]
[37 123]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
[47 117]
[48 116]
[49 115]
[50 114]
[51 112]
[52 111]
[54 109]
[55 108]
[56 107]
[57 106]
[58 105]
[61 102]
[62 101]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
[70 90]
[71 89]
[72 88]
[74 85]
[75 84]
[138 154]
[139 153]
[140 152]
[141 151]
[142 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
