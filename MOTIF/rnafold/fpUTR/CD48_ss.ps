%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGGUAAGUUCCGUUUUUAGCCCCGGCCUUUUUCUAGCCAGGCUCUCAACUGUCUCCUGCGUUGCUGGGAAGUUCUGGAAGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[70.78511810 325.61578369]
[59.80845642 336.17196655]
[45.48498917 341.34478760]
[30.29634094 340.23806763]
[16.87403870 333.04348755]
[7.54357672 321.00762939]
[3.92151332 306.21569824]
[6.63539314 291.23056030]
[15.21502113 278.64843750]
[28.17392349 270.64926147]
[43.26689148 268.61895752]
[47.44667435 254.21307373]
[51.62645721 239.80718994]
[55.80623627 225.40130615]
[51.92187881 211.02212524]
[63.19816589 199.92456055]
[67.37794495 185.51867676]
[71.55773163 171.11279297]
[64.17494965 158.22752380]
[68.20862579 143.55838013]
[81.77393341 135.90199280]
[85.95372009 121.49611664]
[90.13349915 107.09024048]
[93.80226898 92.54582214]
[96.95546722 77.88098145]
[100.10865784 63.21614838]
[103.26185608 48.55131531]
[106.41504669 33.88648224]
[109.56824493 19.22164726]
[96.51917267 11.59412003]
[86.48017883 0.32197747]
[80.42502594 -13.48249531]
[78.93518829 -28.46232986]
[82.14403534 -43.14925766]
[89.72503662 -56.10762787]
[100.92489624 -66.07474518]
[114.63839722 -72.08389282]
[129.51750183 -73.55810547]
[132.67070007 -88.22293854]
[128.00724792 -103.34123230]
[138.24710083 -114.15764618]
[141.40029907 -128.82247925]
[144.55349731 -143.48731995]
[134.09780884 -154.95283508]
[132.41171265 -170.37803650]
[140.14355469 -183.83160400]
[154.32026672 -190.14036560]
[169.49061584 -186.87847900]
[179.82130432 -175.30020142]
[181.33996582 -159.85762024]
[173.46264648 -146.48872375]
[159.21832275 -140.33412170]
[156.06513977 -125.66928101]
[152.91194153 -111.00444794]
[157.80091858 -96.93508148]
[147.33552551 -85.06974792]
[144.18234253 -70.40490723]
[157.14048767 -62.94520569]
[167.17205811 -51.83045197]
[173.28527832 -38.14072418]
[174.86997986 -23.21156883]
[171.75843811 -8.50371647]
[164.24308777 4.53984261]
[153.04899597 14.63543034]
[139.26403809 20.78500938]
[124.23307800 22.37484169]
[121.07987976 37.03967667]
[117.92668915 51.70450974]
[114.77349854 66.36934662]
[111.62030029 81.03417969]
[108.46710968 95.69901276]
[110.34577942 100.85684204]
[109.06781006 106.68483734]
[104.53938293 111.27001953]
[100.35959625 125.67590332]
[96.17981720 140.08178711]
[103.54058838 153.80973816]
[99.09648132 168.35980225]
[85.96360779 175.29257202]
[81.78382874 189.69845581]
[77.60404968 204.10433960]
[81.18944550 219.51393127]
[70.21212006 229.58108521]
[66.03234100 243.98696899]
[61.85255432 258.39285278]
[57.67277527 272.79873657]
[69.33521271 282.59197998]
[76.00027466 296.28491211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 86]
[12 85]
[13 84]
[14 83]
[16 81]
[17 80]
[18 79]
[21 76]
[22 75]
[23 74]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
