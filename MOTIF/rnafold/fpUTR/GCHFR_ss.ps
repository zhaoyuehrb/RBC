%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGCUGCGCGUCGCAGUCCCGACGCGAGAAGGGCUGGAGUCGGCGUCCAGCCUAGAGCCCCCGGUGGGAGCCAGGCCGGGACGCGUGCACC\
) } def
/len { sequence length } bind def

/coor [
[42.96726227 136.44863892]
[36.29435349 132.62838745]
[31.49642563 126.70880890]
[16.66220856 128.93276978]
[1.82798982 131.15672302]
[-13.00622845 133.38067627]
[-27.84044647 135.60462952]
[-42.67466354 137.82858276]
[-58.73144531 153.29881287]
[-78.88562775 145.63447571]
[-93.29692841 149.79551697]
[-107.70823669 153.95655823]
[-122.11954498 158.11761475]
[-136.53085327 162.27865601]
[-150.94215393 166.43969727]
[-165.35345459 170.60073853]
[-172.76972961 184.55690002]
[-187.90655518 189.10134888]
[-201.78352356 181.53793335]
[-206.16767883 166.35391235]
[-198.45797729 152.55767822]
[-183.22845459 148.33430481]
[-169.51449585 156.18943787]
[-155.10319519 152.02839661]
[-140.69189453 147.86735535]
[-126.28058624 143.70629883]
[-111.86927795 139.54525757]
[-97.45797729 135.38421631]
[-83.04666901 131.22317505]
[-80.66264343 123.25773621]
[-75.17020416 116.88890076]
[-67.46874237 113.27895355]
[-58.86901474 113.12839508]
[-50.87022400 116.54147339]
[-44.89862061 122.99436951]
[-30.06440163 120.77041626]
[-15.23018265 118.54645538]
[-0.39596489 116.32250214]
[14.43825340 114.09854889]
[29.27247047 111.87459564]
[44.75606155 95.65379333]
[66.71183777 102.93001556]
[80.97768402 98.29475403]
[87.64913940 85.43248749]
[101.42948914 80.95497894]
[114.38706207 87.43939209]
[128.65290833 82.80413818]
[142.91874695 78.16888428]
[157.18460083 73.53363037]
[171.45045471 68.89837646]
[185.71629333 64.26312256]
[197.59222412 50.31182098]
[214.57327271 54.38848495]
[228.67805481 49.28408813]
[242.78285217 44.17968750]
[256.88763428 39.07529068]
[261.03802490 28.75156784]
[270.06646729 22.63607597]
[280.74905396 22.61298370]
[289.43484497 28.44214249]
[303.84616089 24.28109741]
[318.18670654 19.88234711]
[332.45254517 15.24709225]
[346.71838379 10.61183739]
[357.28347778 -1.93052495]
[373.37835693 1.21391892]
[378.44595337 16.81043434]
[367.27319336 28.81466484]
[351.35363770 24.87768555]
[337.08779907 29.51293945]
[322.82196045 34.14819717]
[317.32504272 39.31118011]
[308.00720215 38.69240189]
[293.59588623 42.85344696]
[281.48300171 57.77256775]
[261.99203491 53.18008423]
[247.88725281 58.28448105]
[233.78245544 63.38887787]
[219.67767334 68.49327850]
[214.17601013 79.40549469]
[202.30670166 83.70534515]
[190.35154724 78.52896881]
[176.08570862 83.16422272]
[161.81985474 87.79947662]
[147.55401611 92.43473053]
[133.28816223 97.06998444]
[119.02231598 101.70524597]
[112.35086060 114.56751251]
[98.57051086 119.04502106]
[85.61293793 112.56060791]
[71.34709167 117.19586182]
[69.41973877 124.99681091]
[64.84363556 131.51756287]
[58.27813339 135.90570068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[42 91]
[43 90]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[53 79]
[54 78]
[55 77]
[56 76]
[60 74]
[61 73]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
