%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCGCCGUCGUCGCCGCCAUCCUCGGCGCGACUCGCUUCUUUCGGUUCUACCUGGGAGAAUCCACCGCCAUCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[94.19119263 204.07376099]
[90.05564880 189.65512085]
[89.01059723 174.69157410]
[91.10178375 159.83805847]
[96.23767853 145.74470520]
[104.19348145 133.02836609]
[114.62097168 122.24563599]
[127.06172180 113.86953735]
[112.43780518 110.53172302]
[96.67115784 115.95415497]
[84.38842773 104.67919922]
[69.64993286 101.89052582]
[54.91143417 99.10185242]
[40.17293549 96.31317902]
[30.90550232 97.80743408]
[24.94001961 93.13481903]
[10.31610203 89.79700470]
[-4.30781698 86.45919037]
[-18.93173599 83.12138367]
[-33.55565262 79.78356934]
[-45.91079712 89.36920166]
[-61.53485107 88.71883392]
[-73.05061340 78.13954926]
[-75.02069092 62.62656403]
[-66.51487732 49.50463104]
[-51.54935837 44.96952820]
[-37.19038773 51.16259003]
[-30.21784019 65.15964508]
[-15.59392166 68.49745941]
[-0.97000283 71.83527374]
[13.65391541 75.17308807]
[28.27783394 78.51090240]
[42.96160889 81.57468414]
[57.70010757 84.36335754]
[72.43860626 87.15203094]
[87.17710114 89.94070435]
[97.32738495 83.92289734]
[108.87872314 86.33309174]
[115.77561951 95.90780640]
[130.39953613 99.24562073]
[144.81329346 95.09308624]
[155.41989136 84.48648834]
[166.02650452 73.87988281]
[176.63310242 63.27328110]
[187.23970032 52.66667938]
[197.84629822 42.06007767]
[208.45291138 31.45347595]
[219.05950928 20.84687424]
[229.66610718 10.24027252]
[229.41548157 -5.56202888]
[240.47201538 -16.85487556]
[256.27609253 -16.93842316]
[267.45141602 -5.76310349]
[267.36785889 10.04096413]
[256.07501221 21.09750748]
[240.27270508 20.84687424]
[229.66610718 31.45347595]
[219.05950928 42.06007767]
[208.45291138 52.66667938]
[197.84629822 63.27328110]
[187.23970032 73.87988281]
[176.63310242 84.48648834]
[166.02650452 95.09308624]
[155.41989136 105.69969177]
[170.41241455 106.17337036]
[184.97827148 109.75607300]
[198.47993469 116.29100037]
[210.32643127 125.49210358]
[219.99926758 136.95666504]
[227.07507324 150.18289185]
[231.24411011 164.59188843]
[232.32394409 179.55296326]
[230.26728821 194.41130066]
[225.16416931 208.51655579]
[217.23794556 221.25135803]
[206.83555603 232.05830383]
[194.41227722 240.46437073]
[180.51187134 246.10166931]
[165.74276733 248.72341919]
[150.75138855 248.21488953]
[136.19390869 244.59832764]
[122.70747375 238.03204346]
[110.88238525 228.80342102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 40]
[9 39]
[11 36]
[12 35]
[13 34]
[14 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
