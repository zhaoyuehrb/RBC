%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUACGGCGGGAGGCACUAGAGGGAGCUGCGGCCGCUCCGGCCCGGCCCCGAGCACCGCCUCCCCAGCCAGCGCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[125.37348175 314.78857422]
[120.71943665 310.62603760]
[117.27199554 305.38763428]
[115.27278137 299.41528320]
[114.86833191 293.10305786]
[116.09947205 286.87124634]
[118.89765930 281.13836670]
[123.08864594 276.29302979]
[128.40328979 272.66757202]
[126.19377136 257.83117676]
[123.98424530 242.99481201]
[121.22799683 228.25021362]
[117.92880249 213.61753845]
[114.62960815 198.98486328]
[111.33041382 184.35217285]
[108.03121948 169.71949768]
[104.73202515 155.08682251]
[101.43283081 140.45413208]
[85.93462372 137.95729065]
[72.55171967 129.75201416]
[63.29677582 117.07231140]
[59.56166077 101.82509613]
[61.90808868 86.30340576]
[69.98318481 72.84155273]
[82.57253265 63.46407700]
[78.73489380 48.96329880]
[74.89724731 34.46252441]
[69.55612946 26.74906158]
[71.19631958 19.35486221]
[67.89712524 4.72218227]
[64.59793091 -9.91049767]
[61.29873276 -24.54317665]
[56.24628830 -32.44873428]
[58.15858078 -39.77727509]
[55.40233612 -54.52187347]
[52.64609528 -69.26647186]
[49.88985062 -84.01106262]
[47.13360977 -98.75566101]
[38.27978516 -113.21408844]
[49.72219467 -125.72439575]
[64.91116333 -118.19235992]
[61.87820435 -101.51190186]
[64.63444519 -86.76731110]
[67.39069366 -72.02271271]
[70.14693451 -57.27811432]
[72.90317535 -42.53351974]
[75.93141174 -27.84237289]
[79.23060608 -13.20969296]
[82.52980042 1.42298687]
[85.82899475 16.05566597]
[89.39802551 30.62488174]
[93.23566437 45.12565613]
[97.07331085 59.62643433]
[111.12317657 61.07872772]
[123.81873322 67.26991272]
[133.61421204 77.44618225]
[139.31697083 90.36849976]
[140.23266602 104.46351624]
[136.24980164 118.01506805]
[127.85330200 129.37318420]
[116.06550598 137.15493774]
[119.36470032 151.78762817]
[122.66389465 166.42030334]
[125.96309662 181.05297852]
[129.26228333 195.68566895]
[132.56147766 210.31834412]
[135.86067200 224.95101929]
[140.30891418 230.36460876]
[141.04725647 236.31011963]
[138.82061768 240.78529358]
[141.03013611 255.62165833]
[143.23966980 270.45803833]
[162.46195984 287.39901733]
[156.42347717 311.68301392]
[163.35653687 324.98461914]
[170.28959656 338.28622437]
[184.40797424 346.62908936]
[183.97148132 363.02243042]
[169.42915344 370.60220337]
[155.74087524 361.57095337]
[156.98799133 345.21929932]
[150.05493164 331.91769409]
[143.12187195 318.61608887]
[136.96606445 318.90808105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 72]
[10 71]
[11 70]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[25 53]
[26 52]
[27 51]
[29 50]
[30 49]
[31 48]
[32 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
