%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCGUGGCCGGGUCCUCGCGGCUGGAGAACCCAACCGACAGUGGGCGGCAGGACGCACCGCGGACCCCGGAGAGAGCGGACGAGCAGGGCGCCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[207.87242126 322.74206543]
[199.38272095 305.93280029]
[200.39129639 287.04891968]
[210.70925903 271.10647583]
[203.20925903 258.11611938]
[195.70925903 245.12571716]
[188.20925903 232.13534546]
[169.18756104 228.70518494]
[158.42776489 212.29104614]
[163.00663757 192.89994812]
[154.34002686 180.65699768]
[145.67341614 168.41404724]
[137.00680542 156.17109680]
[128.34020996 143.92814636]
[119.48609161 131.82009888]
[110.44657135 119.84983826]
[101.40705109 107.87957764]
[97.46392059 115.05442810]
[88.99220276 119.65650940]
[77.53813171 119.56987762]
[65.49570465 113.50617981]
[51.06831741 109.40123749]
[36.64093018 105.29629517]
[21.25016022 108.96163177]
[11.12615585 98.03671265]
[-3.30122900 93.93177032]
[-17.72861290 89.82682037]
[-32.38745117 96.34587097]
[-46.55688477 88.82212830]
[-49.36733246 73.02716064]
[-38.66286469 61.07752228]
[-22.65502930 62.13994980]
[-13.62366867 75.39943695]
[0.80371577 79.50438690]
[15.23110008 83.60932922]
[29.58992958 79.65037537]
[40.74587631 90.86891174]
[55.17325974 94.97385406]
[69.60064697 99.07879639]
[75.85266113 94.93605804]
[74.92893982 79.96453094]
[88.35669708 86.65058899]
[94.60871887 82.50785065]
[96.45204163 67.62154388]
[98.29536438 52.73523331]
[100.13868713 37.84892654]
[101.75255585 22.93599701]
[103.13658142 7.99998474]
[104.52060699 -6.93602800]
[94.23253632 -18.93315887]
[95.52431488 -34.68456650]
[107.62954712 -44.84522247]
[123.36641693 -43.38698578]
[133.39851379 -31.17500496]
[131.77398682 -15.45443153]
[119.45661926 -5.55200243]
[118.07259369 9.38401031]
[116.68856812 24.32002258]
[119.24998474 31.39295769]
[115.02500153 39.69224930]
[113.18167114 54.57855606]
[111.33834839 69.46486664]
[109.49502563 84.35117340]
[113.37731171 98.84005737]
[122.41683197 110.81031799]
[131.45634460 122.78057861]
[139.26493835 127.85548401]
[140.58316040 135.26153564]
[149.24977112 147.50448608]
[157.91636658 159.74743652]
[166.58297729 171.99038696]
[175.24958801 184.23335266]
[186.18495178 183.34272766]
[196.39353943 187.13401794]
[203.98190308 194.83026123]
[207.57395935 204.93733215]
[206.56011963 215.53361511]
[201.19964600 224.63534546]
[208.69964600 237.62571716]
[216.19964600 250.61610413]
[223.69964600 263.60647583]
[235.20431519 261.82678223]
[246.66419983 263.71582031]
[256.94116211 269.06893921]
[265.01980591 277.33831787]
[270.10794067 287.68893433]
[271.71405029 299.08294678]
[269.69491577 310.38366699]
[264.26806641 320.46899414]
[255.98858643 328.34286499]
[261.83538818 342.15643311]
[267.68215942 355.97003174]
[273.52896118 369.78359985]
[286.93472290 379.22912598]
[285.18826294 395.53500366]
[270.08618164 401.92715454]
[257.16421509 391.82989502]
[259.71536255 375.63040161]
[253.86859131 361.81680298]
[248.02178955 348.00323486]
[242.17500305 334.18963623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 81]
[5 80]
[6 79]
[7 78]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[15 66]
[16 65]
[17 64]
[21 39]
[22 38]
[23 37]
[25 35]
[26 34]
[27 33]
[43 63]
[44 62]
[45 61]
[46 60]
[47 58]
[48 57]
[49 56]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
