%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCACUAGUACCCCGGAGCCCAUGGGCGCGCCGAGCCGGGCGCGGGGGCGCUGAACGGCGGAGCGGGAGCGGCCGGAGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[136.17298889 328.61373901]
[147.24766541 317.97198486]
[143.57888794 303.42755127]
[139.91011047 288.88314819]
[136.24134827 274.33871460]
[132.57257080 259.79431152]
[128.90379333 245.24987793]
[125.23502350 230.70545959]
[114.61981964 220.25717163]
[118.74681091 204.98371887]
[115.07804108 190.43930054]
[104.46283722 179.99101257]
[108.58982849 164.71754456]
[104.92105103 150.17312622]
[94.30585480 139.72483826]
[98.43283844 124.45137787]
[94.76406860 109.90695953]
[90.83917999 95.42955780]
[86.65939331 81.02367401]
[82.47961426 66.61779785]
[67.28788757 53.59782410]
[72.15193176 35.02204895]
[66.96638489 20.94688988]
[61.78083801 6.87172985]
[56.34769440 -7.10972023]
[50.66864777 -20.99310684]
[39.73065567 -22.61105347]
[30.58793640 -28.68242264]
[24.93848228 -37.99592590]
[23.79573441 -48.74637604]
[27.30740166 -58.88441849]
[34.74057007 -66.50721741]
[30.56078720 -80.91309357]
[26.38100433 -95.31897736]
[22.20122337 -109.72486115]
[18.02144051 -124.13074493]
[13.84165955 -138.53662109]
[-0.12413558 -145.93473816]
[-4.68826246 -161.06564331]
[2.85709476 -174.95243835]
[18.03540993 -179.35633850]
[31.84165573 -171.66458130]
[36.08483505 -156.44055176]
[28.24754143 -142.71640015]
[32.42732239 -128.31051636]
[36.60710526 -113.90464020]
[40.78688812 -99.49876404]
[44.96666718 -85.09288025]
[49.14645004 -70.68699646]
[66.77821350 -62.88016510]
[73.41539001 -44.46084213]
[64.55203247 -26.67215538]
[70.23107910 -12.78876877]
[75.80107880 -7.67710781]
[75.85599518 1.68618393]
[81.04154205 15.76134300]
[86.22708893 29.83650208]
[96.09539795 33.39462662]
[102.40870667 42.04916000]
[102.79969025 52.97711563]
[96.88549805 62.43801117]
[101.06527710 76.84389496]
[105.24505615 91.24977875]
[110.44521332 97.66213226]
[109.30848694 106.23818970]
[112.97725677 120.78260803]
[123.85487366 132.27120972]
[119.46546936 146.50436401]
[123.13424683 161.04878235]
[134.01185608 172.53738403]
[129.62245178 186.77052307]
[133.29122925 201.31494141]
[144.16883850 212.80354309]
[139.77943420 227.03669739]
[143.44821167 241.58111572]
[147.11698914 256.12551880]
[150.78576660 270.66995239]
[154.45452881 285.21435547]
[158.12330627 299.75878906]
[161.79208374 314.30319214]
[176.58926392 318.41888428]
[187.33470154 329.39300537]
[191.13790894 344.27355957]
[186.97586060 359.05776978]
[175.96812439 369.76876831]
[161.07571411 373.52532959]
[146.30461121 369.31695557]
[135.62818909 358.27569580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[10 72]
[11 71]
[13 69]
[14 68]
[16 66]
[17 65]
[18 63]
[19 62]
[20 61]
[22 57]
[23 56]
[24 55]
[25 53]
[26 52]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
