%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGGCGGGAGCUCUGGCUCAGGUAAAAACUCUUUCUUCGGCUCGCGAGCUGAGAGGAGCAGGUAGAGGGGCAGAGGCGGGACUGUCGUCUGGGGGAGCCGCCCAGGAGGCUCCUCAGGCCGACCCCAGACCCUGGCUGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[127.15261078 266.75311279]
[122.31335449 252.45458984]
[125.30044556 237.55578613]
[135.40985107 226.07766724]
[130.71406555 211.83163452]
[126.01829529 197.58558655]
[121.32251740 183.33955383]
[116.47580719 169.14414978]
[111.47871399 155.00099182]
[106.48161316 140.85781860]
[86.80435944 139.20776367]
[70.13358307 128.62464905]
[60.26753235 111.51972961]
[59.45407867 91.79016876]
[45.53573990 86.19732666]
[31.61740685 80.60447693]
[17.69907188 75.01162720]
[3.78073549 69.41878510]
[-11.90919590 71.45265198]
[-20.83378983 59.52785492]
[-34.75212479 53.93500519]
[-48.67045975 48.34215927]
[-60.40789413 55.03279877]
[-73.66023254 53.73820114]
[-83.58578491 45.15749359]
[-86.68897247 32.61014175]
[-100.48545837 26.72313309]
[-112.77956390 35.82270432]
[-127.87801361 37.53552628]
[-141.71463013 31.50110435]
[-150.61344910 19.43184853]
[-152.26516724 4.62855577]
[-166.06164551 -1.25845325]
[-179.85813904 -7.14546251]
[-193.65463257 -13.03247166]
[-207.45112610 -18.91948128]
[-221.24760437 -24.80648994]
[-227.95817566 -24.38612747]
[-233.07221985 -27.05917358]
[-235.49627686 -31.24729156]
[-249.03048706 -37.71453476]
[-262.56469727 -44.18178177]
[-276.09890747 -50.64902496]
[-289.63308716 -57.11626816]
[-303.16729736 -63.58351517]
[-319.46582031 -61.76966858]
[-328.96667480 -75.13626099]
[-321.89620972 -89.93289185]
[-305.52789307 -90.93804932]
[-296.70007324 -77.11772156]
[-283.16586304 -70.65047455]
[-269.63165283 -64.18323517]
[-256.09744263 -57.71598816]
[-242.56323242 -51.24874115]
[-229.02902222 -44.78149796]
[-215.36059570 -38.60297775]
[-201.56411743 -32.71596909]
[-187.76762390 -26.82896042]
[-173.97113037 -20.94195175]
[-160.17463684 -15.05494308]
[-146.37815857 -9.16793346]
[-134.54794312 -18.21844482]
[-119.67703247 -20.14507484]
[-105.74634552 -14.33109283]
[-96.53572845 -2.24550915]
[-94.59844971 12.92664242]
[-80.80196381 18.81365204]
[-65.51609039 11.87607861]
[-49.61697006 18.23441696]
[-43.07761383 34.42382431]
[-29.15927696 40.01667023]
[-15.24094200 45.60951614]
[-0.54654324 43.17560577]
[9.37358284 55.50044632]
[23.29191780 61.09329605]
[37.21025467 66.68614197]
[51.12858963 72.27899170]
[65.04692078 77.87183380]
[74.73104858 67.24555969]
[87.46715546 60.57537460]
[101.71698761 58.66690063]
[115.75943756 61.75064468]
[123.89338684 49.14751434]
[132.02732849 36.54438400]
[140.16128540 23.94125366]
[140.43232727 7.54434633]
[154.89744568 -0.18175614]
[168.67614746 8.71089840]
[167.59410095 25.07430840]
[152.76441956 32.07520294]
[144.63046265 44.67833328]
[136.49652100 57.28146362]
[128.36256409 69.88459015]
[134.27439880 76.83454895]
[138.51892090 84.91140747]
[153.24603271 82.06316376]
[167.97312927 79.21492004]
[182.70022583 76.36668396]
[197.42732239 73.51844025]
[212.15443420 70.67019653]
[226.88153076 67.82195282]
[241.60862732 64.97370911]
[248.05744934 50.86016083]
[261.58691406 43.26191711]
[276.99465942 45.10065842]
[288.35610962 55.66935730]
[291.30252075 70.90412903]
[284.70098877 84.94689178]
[271.08987427 92.39791870]
[255.70300293 90.39213562]
[244.45687866 79.70081329]
[229.72978210 82.54905701]
[215.00267029 85.39730072]
[200.27557373 88.24553680]
[185.54847717 91.09378052]
[170.82136536 93.94202423]
[156.09426880 96.79026794]
[141.36717224 99.63851166]
[140.02410889 110.46154785]
[135.89933777 120.55749512]
[129.27954102 129.22468567]
[120.62477875 135.86073303]
[125.62187195 150.00389099]
[130.61897278 164.14704895]
[136.46797180 171.25535583]
[135.56855774 178.64376831]
[140.26432800 192.88981628]
[144.96011353 207.13584900]
[149.65588379 221.38189697]
[164.60908508 224.59887695]
[175.87002563 234.80125427]
[180.48165894 249.17480469]
[177.30082703 263.82876587]
[167.27964783 274.84881592]
[171.97541809 289.09484863]
[176.67120361 303.34088135]
[181.36697388 317.58694458]
[186.06275940 331.83297729]
[198.64985657 342.34472656]
[195.57377625 358.45278931]
[179.99890137 363.58657837]
[167.94735718 352.46487427]
[171.81671143 336.52874756]
[167.12094116 322.28271484]
[162.42515564 308.03668213]
[157.72938538 293.79061890]
[153.03359985 279.54458618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 129]
[5 128]
[6 127]
[7 126]
[8 124]
[9 123]
[10 122]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[20 72]
[21 71]
[22 70]
[26 67]
[27 66]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[82 93]
[83 92]
[84 91]
[85 90]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
[134 147]
[135 146]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
