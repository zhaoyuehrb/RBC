%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGAGUUGGGUUCCGAGGGAGGAAGCCAGGCGGGGUGCAGACGGCUGCUGAUUCUGGGGCUGGUCAGGAAACCAAGGAGACCCCCCCCCCCAACC\
) } def
/len { sequence length } bind def

/coor [
[58.73118973 174.15663147]
[61.04297256 188.97741699]
[54.42369843 202.43791199]
[41.27436447 209.65560913]
[26.36464119 208.01242065]
[15.10272408 198.10438538]
[11.57365227 183.52543640]
[17.05730057 169.56408691]
[3.08575845 175.02265930]
[-10.88578320 180.48123169]
[-20.92411995 192.70999146]
[-35.59440231 190.13470459]
[-49.56594467 195.59327698]
[-63.53748322 201.05184937]
[-77.50902557 206.51042175]
[-83.62100220 221.08503723]
[-98.28005981 226.99160767]
[-112.78923798 220.72587585]
[-118.54049683 206.00518799]
[-112.12171936 191.56307983]
[-97.34104919 185.96777344]
[-82.96759796 192.53887939]
[-68.99605560 187.08030701]
[-55.02451706 181.62173462]
[-41.05297470 176.16316223]
[-32.01397705 164.32484436]
[-16.34435654 166.50968933]
[-2.37281561 161.05111694]
[11.59872532 155.59254456]
[24.74800491 148.37475586]
[36.85464096 139.51872253]
[38.87612152 124.80651093]
[51.02781296 115.65276337]
[66.44563293 117.87283325]
[78.55226898 109.01679993]
[90.65890503 100.16075897]
[84.23400116 94.30047607]
[81.67331696 84.21620178]
[76.89967346 69.99607086]
[72.12602997 55.77592850]
[67.35237885 41.55579376]
[54.70795822 31.11306190]
[57.69587708 14.98841000]
[73.24241638 9.76949596]
[85.35463715 20.82509232]
[81.57251740 36.78214645]
[86.34616089 51.00228500]
[91.11981201 65.22241974]
[95.89345551 79.44255829]
[94.34673309 64.52252197]
[102.25664520 51.77758408]
[116.31301117 46.54130554]
[130.63346863 51.00498199]
[139.22514343 63.30063629]
[138.49255371 78.28273773]
[128.74229431 89.68151855]
[114.05340576 92.72661591]
[129.05143738 92.96951294]
[144.04946899 93.21240997]
[159.04750061 93.45529938]
[170.35559082 82.74245453]
[185.56227112 83.20243835]
[195.70564270 94.04898834]
[210.70367432 94.29188538]
[225.70170593 94.53478241]
[240.69973755 94.77767944]
[247.08007812 80.94976044]
[258.53741455 70.91733551]
[273.08666992 66.41857147]
[288.20712280 68.23291016]
[301.27905273 76.04600525]
[310.03765869 88.50419617]
[312.96548462 103.44902039]
[309.55526733 118.29119110]
[300.39782715 130.45922852]
[287.07974243 137.84494019]
[271.90844727 139.16868591]
[257.51251221 134.20115662]
[246.38606262 123.80297852]
[240.45684814 109.77571106]
[225.45881653 109.53281403]
[210.46076965 109.28991699]
[195.46273804 109.04701996]
[184.97346497 119.55941772]
[169.75985718 119.52674103]
[158.80461121 108.45333862]
[143.80657959 108.21044159]
[128.80854797 107.96754456]
[113.81050873 107.72464752]
[99.51493835 112.26739502]
[87.40830231 121.12343597]
[75.30166626 129.97947693]
[72.74819183 145.34558105]
[60.34418106 154.15440369]
[45.71067429 151.62535095]
[33.60403824 160.48138428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 29]
[9 28]
[10 27]
[12 25]
[13 24]
[14 23]
[15 22]
[30 96]
[31 95]
[34 92]
[35 91]
[36 90]
[38 49]
[39 48]
[40 47]
[41 46]
[57 89]
[58 88]
[59 87]
[60 86]
[63 83]
[64 82]
[65 81]
[66 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
