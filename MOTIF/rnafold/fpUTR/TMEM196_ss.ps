%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGGGUAAGGAGGAUAGUGGAAGAAAAAAAGGUAGAUGGUUGAUUUCCCUCUCUGAUCUGGAAGGAAGAUGACCGAGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[-1.89225113 270.77990723]
[-14.13812828 279.47576904]
[-27.35983086 286.60079956]
[-41.35691833 292.04699707]
[-55.91720200 295.73181152]
[-70.81995392 297.59933472]
[-85.83924866 297.62130737]
[-100.74739075 295.79736328]
[-115.31838989 292.15515137]
[-129.33134460 286.74990845]
[-142.57382202 279.66354370]
[-154.84507751 271.00350952]
[-165.95907593 260.90112305]
[-175.74732971 249.50946045]
[-184.06144714 237.00126648]
[-190.77540588 223.56614685]
[-195.78741455 209.40777588]
[-199.02148438 194.74079895]
[-200.42860413 179.78755188]
[-199.98742676 164.77471924]
[-197.70463562 149.92990112]
[-193.61486816 135.47814941]
[-187.78009033 121.63852692]
[-180.28877258 108.62085724]
[-171.25448608 96.62247467]
[-160.81416321 85.82527924]
[-149.12611389 76.39294434]
[-136.36749268 68.46846771]
[-122.73173523 62.17198181]
[-108.42555237 57.59894180]
[-93.66581726 54.81866837]
[-78.67629242 53.87331390]
[-63.68420792 54.77721024]
[-48.91684341 57.51665115]
[-34.59806824 62.05010986]
[-20.94494820 68.30886078]
[-8.16446400 76.19802094]
[3.54963589 85.59799194]
[14.01976871 96.36627960]
[23.08720970 108.33963013]
[30.61450005 121.33653259]
[44.41969299 115.46996307]
[58.22488403 109.60339355]
[72.03007507 103.73682404]
[85.83527374 97.87024689]
[94.39783478 86.81700897]
[108.29815674 88.32455444]
[122.10334778 82.45798492]
[135.90853882 76.59141541]
[149.71372986 70.72484589]
[163.51893616 64.85827637]
[173.19377136 52.33996582]
[187.93336487 54.48326492]
[201.73855591 48.61669540]
[215.54374695 42.75012207]
[219.93630981 27.74214554]
[232.97676086 19.11191750]
[248.50778198 20.93436623]
[259.19610596 32.34899139]
[259.99502563 47.96615219]
[250.52734375 60.41190338]
[235.26338196 63.80974579]
[221.41032410 56.55531693]
[207.60511780 62.42188644]
[193.79992676 68.28845978]
[185.11253357 80.38714600]
[169.38549805 78.66346741]
[155.58030701 84.53003693]
[141.77511597 90.39660645]
[127.96992493 96.26317596]
[114.16472626 102.12975311]
[105.60216522 113.18299103]
[91.70184326 111.67544556]
[77.89665222 117.54201508]
[64.09145355 123.40858459]
[50.28626251 129.27516174]
[36.48107147 135.14172363]
[40.61309052 149.58146667]
[42.93927002 164.41954041]
[43.42434692 179.43101501]
[42.06096268 194.38830566]
[38.86979294 209.06469727]
[33.89921188 223.23765564]
[27.22457123 236.69235229]
[18.94705772 249.22480774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
