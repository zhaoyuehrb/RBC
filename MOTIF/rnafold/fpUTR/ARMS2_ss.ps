%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCUGAGUGAGAUGGCAGCUGGCUUGGCAAGGGGACAGCACCUUUGUCACCACAUUAUGUCCCUGUACCCUAC\
) } def
/len { sequence length } bind def

/coor [
[29.21050453 149.74888611]
[21.26909637 148.79467773]
[14.29740334 145.01840210]
[9.24931431 138.99516296]
[-5.54610491 141.46409607]
[-20.34152412 143.93301392]
[-35.13694382 146.40193176]
[-49.93236160 148.87084961]
[-64.72778320 151.33976746]
[-79.52320099 153.80868530]
[-91.86164093 163.71188354]
[-105.68885040 158.17495728]
[-120.48426819 160.64387512]
[-128.27073669 174.20503235]
[-142.97018433 179.53985596]
[-157.64196777 174.12942505]
[-165.35852051 160.52836609]
[-162.47633362 145.15867615]
[-150.35626221 135.27748108]
[-134.72106934 135.55035400]
[-122.95318604 145.84844971]
[-108.15776825 143.37953186]
[-96.87759399 133.65292358]
[-81.99211884 139.01325989]
[-67.19670105 136.54434204]
[-52.40128326 134.07542419]
[-37.60586166 131.60650635]
[-22.81044388 129.13758850]
[-8.01502323 126.66867065]
[6.78039598 124.19975281]
[21.76262474 107.55394745]
[43.98342133 113.80699158]
[57.95728683 108.35437775]
[71.93115234 102.90175629]
[85.90502167 97.44913483]
[94.79312897 86.65593719]
[108.64236450 88.57699585]
[122.61622620 83.12437439]
[136.59008789 77.67176056]
[150.56396484 72.21913910]
[161.55668640 57.61544037]
[178.72389221 60.59579086]
[192.46049500 54.57035828]
[195.75788879 38.12261581]
[208.01574707 26.91283417]
[224.36518860 25.13043785]
[238.46585083 33.27130890]
[251.94172668 26.68336105]
[265.41757202 20.09541130]
[274.12152100 6.19673300]
[290.49816895 7.05556059]
[297.70062256 21.78840637]
[288.31961060 35.23938370]
[272.00552368 33.57127762]
[258.52966309 40.15922546]
[245.05380249 46.74717331]
[243.93151855 60.20996094]
[236.18070984 71.40789032]
[223.77841187 77.29328918]
[209.98471069 76.19854736]
[198.48593140 68.30696106]
[184.74932861 74.33238983]
[179.94410706 85.62978363]
[168.31047058 90.67763519]
[156.01658630 86.19300842]
[142.04270935 91.64562225]
[128.06884766 97.09824371]
[114.09497833 102.55086517]
[105.20687103 113.34406281]
[91.35763550 111.42300415]
[77.38377380 116.87562561]
[63.40990448 122.32823944]
[49.43603897 127.78086090]
[47.92893219 135.92027283]
[43.56963348 142.87490845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[32 73]
[33 72]
[34 71]
[35 70]
[37 68]
[38 67]
[39 66]
[40 65]
[42 62]
[43 61]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
