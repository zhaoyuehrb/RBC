%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGCGGGAGCGCGCUUGGCGCGUGCGUACGCGACGGCGGUUGGCGGCGCGCGGGCAGCGUGAAGCGAGGCGAGGCAAGGCUUUUCGGACCCACGGAGCGACAGAGCGAGCGGCCCCUACGGCCGUCGGCGGCCCGGCGGCCCGAG\
) } def
/len { sequence length } bind def

/coor [
[102.90737915 253.09635925]
[101.65220642 238.14897156]
[100.39704132 223.20156860]
[96.67861176 216.75672913]
[99.27545929 207.92854309]
[98.33360291 192.95814514]
[89.81241608 180.74182129]
[96.66793060 166.48304749]
[95.72607422 151.51264954]
[94.78421783 136.54225159]
[93.84235382 121.57184601]
[91.09059143 120.58843231]
[88.48999786 119.25567627]
[76.93229675 128.81703186]
[65.37460327 138.37838745]
[53.81690216 147.93975830]
[42.25920486 157.50111389]
[30.70150566 167.06246948]
[27.76630783 182.83473206]
[13.53785324 190.24624634]
[-1.06900406 183.61155701]
[-4.84913445 168.02020264]
[5.09725523 155.43255615]
[21.14014626 155.50477600]
[32.69784546 145.94342041]
[44.25554276 136.38204956]
[55.81324005 126.82069397]
[67.37094116 117.25933075]
[78.92864227 107.69797516]
[77.76699829 97.00755310]
[81.71384430 87.00470734]
[89.86231232 79.98779297]
[100.34011841 77.56909943]
[105.56869507 63.50986862]
[110.79727936 49.45063782]
[115.87834930 35.33742523]
[120.81134796 21.17178154]
[125.74434662 7.00613546]
[130.67735291 -7.15951014]
[135.61035156 -21.32515526]
[140.54335022 -35.49080276]
[137.77484131 -51.06789780]
[149.26733398 -60.54269409]
[154.20033264 -74.70833588]
[149.47875977 -94.26119995]
[164.51887512 -106.35209656]
[168.85435486 -120.71189117]
[173.18983459 -135.07168579]
[169.77145386 -150.51918030]
[180.85710144 -160.46691895]
[185.19258118 -174.82670593]
[181.77420044 -190.27421570]
[192.85986328 -200.22195435]
[197.19532776 -214.58174133]
[201.53080750 -228.94154358]
[190.35832214 -246.67988586]
[195.69349670 -266.65310669]
[213.71029663 -276.18603516]
[216.82897949 -290.85824585]
[208.48719788 -304.01318359]
[211.85899353 -318.84848022]
[224.45162964 -326.72000122]
[227.57031250 -341.39221191]
[230.68898010 -356.06445312]
[233.80766296 -370.73666382]
[222.33129883 -383.11892700]
[220.49046326 -399.73425293]
[228.81143188 -414.04174805]
[243.85890198 -420.52679443]
[246.66963196 -435.26110840]
[249.48034668 -449.99542236]
[251.98187256 -464.78536987]
[254.17312622 -479.62445068]
[256.36437988 -494.46353149]
[245.18403625 -505.22363281]
[242.49674988 -520.50622559]
[249.33580017 -534.43487549]
[263.07147217 -541.65368652]
[278.42208862 -539.38690186]
[289.48501587 -528.50616455]
[292.00637817 -513.19531250]
[285.01660156 -499.34167480]
[271.20346069 -492.27227783]
[269.01220703 -477.43319702]
[266.82095337 -462.59411621]
[268.94012451 -458.24691772]
[268.30401611 -452.51553345]
[264.21466064 -447.18469238]
[261.40393066 -432.45037842]
[258.59320068 -417.71609497]
[268.61840820 -408.84399414]
[272.96954346 -396.06893921]
[270.40310669 -382.70904541]
[261.48712158 -372.29074097]
[248.47987366 -367.61798096]
[245.36119080 -352.94577026]
[242.24252319 -338.27355957]
[239.12384033 -323.60134888]
[247.42614746 -311.28845215]
[244.47238159 -296.36431885]
[231.50119019 -287.73956299]
[228.38252258 -273.06735229]
[235.75494385 -267.07327271]
[240.43400574 -258.73675537]
[241.72622681 -249.20587158]
[239.40800476 -239.81141663]
[233.76283264 -231.88096619]
[225.54747009 -226.55143738]
[215.89060974 -224.60606384]
[211.55513000 -210.24626160]
[207.21965027 -195.88647461]
[210.94813538 -181.46607971]
[199.55236816 -170.49124146]
[195.21690369 -156.13143921]
[198.94537354 -141.71105957]
[187.54962158 -130.73620605]
[183.21414185 -116.37641144]
[178.87866211 -102.01661682]
[184.53274536 -93.40840149]
[184.47843933 -82.88910675]
[178.49029541 -73.97360229]
[168.36598206 -69.77533722]
[163.43298340 -55.60969162]
[166.55433655 -41.04581833]
[154.70898438 -30.55780220]
[149.77598572 -16.39215660]
[144.84298706 -2.22651052]
[139.90998840 11.93913460]
[134.97698975 26.10478020]
[130.04399109 40.27042770]
[130.81959534 47.67050552]
[124.85650635 54.67921829]
[119.62792969 68.73844910]
[114.39934540 82.79767609]
[122.19282532 103.27715302]
[108.81275940 120.62998962]
[109.75461578 135.60038757]
[110.69647217 150.57078552]
[111.63832855 165.54118347]
[120.22688293 178.82830811]
[113.30400085 192.01628113]
[114.24585724 206.98669434]
[115.34443665 221.94641113]
[116.59960175 236.89379883]
[117.85476685 251.84118652]
[129.13099670 263.25286865]
[127.09658051 279.16641235]
[113.31217194 287.37429810]
[98.35197449 281.58016968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[5 142]
[6 141]
[8 139]
[9 138]
[10 137]
[11 136]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[33 134]
[34 133]
[35 132]
[36 130]
[37 129]
[38 128]
[39 127]
[40 126]
[41 125]
[43 123]
[44 122]
[46 118]
[47 117]
[48 116]
[50 114]
[51 113]
[53 111]
[54 110]
[55 109]
[58 102]
[59 101]
[62 98]
[63 97]
[64 96]
[65 95]
[69 90]
[70 89]
[71 88]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
