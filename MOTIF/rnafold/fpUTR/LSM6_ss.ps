%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGAGCACUGAUUGGCUGAGGCAGAAAAGUGCCCCUGCCUCGGCGCUUUCGGUUUUGGCUGGGAUCAUCCGCGGCGGCCGGGCUCGUGGGGCGCCUGGAGUGAGGGUUCUGGUUCCCGCCGGCGAGGAUUGUUAAA\
) } def
/len { sequence length } bind def

/coor [
[18.79028893 130.31150818]
[12.69359684 121.87788391]
[-2.21208644 123.55735016]
[-12.05540562 135.62991333]
[-27.19581223 137.12080383]
[-38.64449692 127.66230011]
[-53.55017853 129.34176636]
[-68.45586395 131.02124023]
[-76.71273041 135.12164307]
[-83.71433258 132.56729126]
[-98.65394592 133.91188049]
[-113.59355927 135.25646973]
[-128.53317261 136.60105896]
[-143.47279358 137.94564819]
[-151.91542053 152.55676270]
[-167.23916626 159.21876526]
[-183.35964966 155.50123596]
[-194.00300598 143.05314636]
[-208.90869141 144.73260498]
[-223.81437683 146.41207886]
[-238.72006226 148.09153748]
[-253.62574768 149.77101135]
[-268.53143311 151.45048523]
[-283.43710327 153.12994385]
[-298.34280396 154.80941772]
[-313.24847412 156.48887634]
[-328.15414429 158.16835022]
[-334.22244263 172.27761841]
[-346.54193115 181.44961548]
[-361.79879761 183.21708679]
[-375.88897705 177.10462952]
[-385.02230835 164.75642395]
[-386.74194336 149.49411011]
[-380.58535767 135.42315674]
[-368.20858765 126.32857513]
[-352.94094849 124.65677643]
[-338.88937378 130.85745239]
[-329.83361816 143.26266479]
[-314.92794800 141.58319092]
[-300.02224731 139.90373230]
[-285.11657715 138.22425842]
[-270.21087646 136.54479980]
[-255.30520630 134.86532593]
[-240.39952087 133.18586731]
[-225.49383545 131.50639343]
[-210.58816528 129.82691956]
[-195.68247986 128.14746094]
[-190.17234802 115.93688965]
[-179.24836731 107.99677277]
[-165.71759033 106.50032806]
[-153.12333679 111.94760132]
[-144.81738281 123.00603485]
[-129.87776184 121.66144562]
[-114.93814850 120.31685638]
[-99.99853516 118.97226715]
[-85.05892181 117.62767029]
[-70.13533020 116.11554718]
[-55.22964859 114.43608093]
[-40.32396317 112.75661469]
[-31.26703644 100.98768616]
[-16.17447853 99.07213593]
[-3.89155340 108.65167236]
[11.01412964 106.97219849]
[21.89417839 90.89767456]
[41.36650848 87.83149719]
[57.13555145 100.15625763]
[71.89449310 97.47789764]
[86.65344238 94.79954529]
[97.44235992 85.90625000]
[110.66820526 90.44150543]
[125.42715454 87.76315308]
[140.18609619 85.08480072]
[154.94503784 82.40644836]
[167.14189148 72.32937622]
[181.04617310 77.66979218]
[195.80511475 74.99143982]
[208.00196838 64.91436005]
[221.90625000 70.25477600]
[236.66520691 67.57642365]
[251.42414856 64.89807129]
[266.18307495 62.21971893]
[274.14541626 57.57315826]
[281.30297852 59.65074539]
[296.11831665 57.30422592]
[310.93365479 54.95771027]
[316.28582764 42.20498657]
[327.16732788 33.84553909]
[340.65365601 31.99050522]
[353.18661499 37.02078247]
[361.51324463 47.51490021]
[376.37750244 45.50139999]
[391.24176025 43.48790359]
[406.10598755 41.47440338]
[420.97024536 39.46090317]
[435.83447266 37.44740677]
[443.99728394 33.16275406]
[451.05441284 35.55936813]
[465.96011353 33.87990189]
[480.86578369 32.20043564]
[490.52239990 19.68943024]
[506.20773315 17.75396919]
[518.61596680 27.54232407]
[520.38543701 43.24723816]
[510.46646118 55.55126572]
[494.74371338 57.15464401]
[482.54525757 47.10611725]
[467.63955688 48.78558350]
[452.73388672 50.46505356]
[437.84799194 52.31165314]
[422.98373413 54.32514954]
[408.11947632 56.33864975]
[393.25524902 58.35214996]
[378.39099121 60.36564636]
[363.52676392 62.37914658]
[356.24758911 77.05053711]
[341.52404785 84.59426880]
[325.03698730 81.87841034]
[313.28015137 69.77303314]
[298.46484375 72.11955261]
[283.64950562 74.46607208]
[268.86145020 76.97866058]
[254.10249329 79.65701294]
[239.34355164 82.33537292]
[224.58460999 85.01372528]
[213.44342041 94.89922333]
[198.48347473 89.75038147]
[183.72453308 92.42873383]
[172.58334351 102.31423187]
[157.62339783 97.16539001]
[142.86444092 99.84374237]
[128.10549927 102.52210236]
[113.34655762 105.20045471]
[102.55764008 114.09375000]
[89.33179474 109.55849457]
[74.57284546 112.23684692]
[59.81390381 114.91519928]
[56.06073761 125.05552673]
[48.46248627 132.63374329]
[38.46475983 136.30412292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[6 59]
[7 58]
[8 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[66 136]
[67 135]
[68 134]
[70 132]
[71 131]
[72 130]
[73 129]
[75 127]
[76 126]
[78 124]
[79 123]
[80 122]
[81 121]
[83 120]
[84 119]
[85 118]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
