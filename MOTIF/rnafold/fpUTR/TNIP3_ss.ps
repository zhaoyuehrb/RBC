%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGUCUUAAAGACAGGUCUCCGUAUUAGACCUUGUAAUACGCUUACCUAGAUCUGAGAAGGACUUUCAGGAUAGAAC\
) } def
/len { sequence length } bind def

/coor [
[162.35891724 292.39648438]
[172.87239075 281.37890625]
[167.13212585 267.52069092]
[161.39187622 253.66250610]
[155.65162659 239.80432129]
[149.91137695 225.94612122]
[144.17112732 212.08793640]
[138.43087769 198.22973633]
[132.69062805 184.37155151]
[115.51770020 178.63046265]
[107.61688995 161.99185181]
[114.24182129 144.47131348]
[107.43196106 131.10621643]
[100.62210846 117.74111938]
[84.51142883 108.67401886]
[85.19825745 90.19985199]
[77.36077881 77.41025543]
[69.52330017 64.62065125]
[61.68582153 51.83104706]
[46.33943558 50.49139404]
[34.85869598 40.48909378]
[31.50871849 25.81797791]
[37.36989212 12.15106106]
[29.53241539 -0.63854158]
[21.69493675 -13.42814445]
[13.85745811 -26.21774673]
[6.01997948 -39.00734711]
[-1.81749916 -51.79695129]
[-9.65497780 -64.58655548]
[-25.14650345 -66.71883392]
[-35.60472107 -78.34465790]
[-36.09157562 -93.97466278]
[-26.37719345 -106.22883606]
[-11.04840660 -109.32113647]
[2.65699959 -101.79147339]
[8.26775169 -87.19512177]
[3.13462472 -72.42403412]
[10.97210312 -59.63442993]
[18.80958176 -46.84482574]
[26.64706039 -34.05522537]
[34.48453903 -21.26562309]
[42.32201767 -8.47601986]
[50.15949631 4.31358242]
[64.99772644 5.29588795]
[76.54892731 14.94128799]
[80.24889374 29.71165085]
[74.47542572 43.99356842]
[82.31290436 56.78317261]
[90.15038300 69.57277679]
[97.98786163 82.36237335]
[108.09259796 84.19985962]
[115.48857117 91.32598114]
[117.70020294 101.35547638]
[113.98720551 110.93126678]
[120.79706573 124.29636383]
[127.60691833 137.66146851]
[139.72229004 139.13449097]
[149.44784546 146.30474854]
[154.33822632 157.22077942]
[153.23724365 169.00930786]
[146.54881287 178.63128662]
[152.28906250 192.48948669]
[158.02931213 206.34767151]
[163.76957703 220.20587158]
[169.50982666 234.06407166]
[175.25007629 247.92225647]
[180.99032593 261.78045654]
[186.73057556 275.63864136]
[201.95532227 275.99511719]
[215.71604919 282.51907349]
[225.62863159 294.08023071]
[229.97566223 308.67556763]
[228.00398254 323.77630615]
[220.05520630 336.76617432]
[207.50650024 345.39459229]
[192.53199768 348.16665649]
[177.72613525 344.60205078]
[165.65411377 335.31842041]
[158.40747070 321.92416382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[12 56]
[13 55]
[14 54]
[16 50]
[17 49]
[18 48]
[19 47]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
