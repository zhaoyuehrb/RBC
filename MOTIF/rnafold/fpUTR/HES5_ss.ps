%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUUGGCCUUGCCCGCGCCCGCUCGCCUCGUCUCGCCCGGCCUCCCCGCGUCGCCUCGUCGCCUGUUCCGCGCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[21.10659981 160.96136475]
[-1.61928904 154.83737183]
[-13.19162655 164.38101196]
[-24.76396370 173.92463684]
[-36.33630371 183.46827698]
[-38.40503311 196.36833191]
[-48.45542908 204.06768799]
[-60.64495468 202.78988647]
[-72.57434845 211.88325500]
[-84.50373840 220.97663879]
[-93.43504333 235.38734436]
[-109.75499725 230.79434204]
[-109.85931396 213.84072876]
[-93.59712219 209.04724121]
[-81.66772461 199.95387268]
[-69.73833466 190.86048889]
[-64.00320435 174.39202881]
[-45.87994003 171.89593506]
[-34.30760193 162.35231018]
[-22.73526382 152.80867004]
[-11.16292572 143.26502991]
[-13.68612099 135.90518188]
[-14.30731583 128.13105774]
[-12.97854710 120.42733765]
[-9.77371597 113.27663422]
[-4.88454056 107.12921906]
[1.39089096 102.37467957]
[8.66628551 99.31723022]
[16.49091721 98.15627289]
[24.37755394 98.97340393]
[31.83278465 101.72676086]
[38.38790512 106.25304413]
[43.62836838 112.27719879]
[57.74546814 107.20694733]
[71.86257172 102.13668823]
[85.97966766 97.06643677]
[95.15826416 86.51916504]
[108.95007324 88.81645966]
[123.06717682 83.74620819]
[133.43972778 71.79963684]
[148.03321838 74.77948761]
[162.15031433 69.70922852]
[176.26741028 64.63897705]
[176.73228455 51.16048431]
[181.81301880 38.70256042]
[190.86317444 28.79103088]
[202.75164795 22.63148880]
[216.00399780 20.96265793]
[228.98532104 23.96787453]
[240.10191345 31.25523376]
[247.99697876 41.90853882]
[262.46078491 37.93381882]
[276.92459106 33.95909500]
[288.18121338 22.84158516]
[302.50375366 26.92981339]
[316.96755981 22.95508957]
[330.63833618 12.92780876]
[344.05819702 23.28849220]
[337.81738281 39.05202103]
[320.94229126 37.41889191]
[306.47848511 41.39361572]
[296.25640869 52.22682571]
[280.89929199 48.42289734]
[266.43548584 52.39762115]
[251.97169495 56.37234116]
[249.52792358 72.86767578]
[240.19393921 86.75138855]
[225.74754333 95.29543304]
[208.97645569 96.79682159]
[193.14044189 90.91684723]
[181.33767700 78.75608063]
[167.22056580 83.82633209]
[153.10346985 88.89658356]
[143.74066162 100.48049927]
[128.13743591 97.86331177]
[114.02033234 102.93356323]
[104.84173584 113.48083496]
[91.04992676 111.18354034]
[76.93282318 116.25379181]
[62.81572342 121.32404327]
[48.69862366 126.39430237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[8 16]
[9 15]
[10 14]
[33 81]
[34 80]
[35 79]
[36 78]
[38 76]
[39 75]
[41 73]
[42 72]
[43 71]
[51 65]
[52 64]
[53 63]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
