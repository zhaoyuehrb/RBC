%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUCGCUGGUGGUGGGCGCGCCGUGCUGAGCUCUGGCUGUCAGUGUGUUCGCCCGCGUCCCCUCCGCGCUCUCCGCUUGUGGAUAACUAGCUGCUGGUUGAUCGCACU\
) } def
/len { sequence length } bind def

/coor [
[180.50184631 213.48323059]
[167.48976135 204.74678040]
[157.78410339 192.41606140]
[152.33547974 177.67950439]
[151.68344116 161.96211243]
[155.90310669 146.78764343]
[143.35784912 138.56471252]
[130.81259155 130.34179688]
[123.38478851 129.29177856]
[118.03321838 121.70445251]
[105.72568512 113.12981415]
[91.81182098 111.75283051]
[85.69967651 99.17772675]
[73.39213562 90.60308075]
[64.42066193 88.21156311]
[60.86231613 81.60755920]
[48.80235672 72.68805695]
[36.74240112 63.76856232]
[24.68244362 54.84906387]
[12.62248707 45.92956543]
[0.56252968 37.01006699]
[-11.49742699 28.09057045]
[-24.44262695 29.21328163]
[-34.32786942 21.41489220]
[-36.12924194 9.36054897]
[-47.93195724 0.10334021]
[-59.73467255 -9.15386868]
[-72.75671387 -4.38903952]
[-86.31883240 -6.70042801]
[-96.85949707 -15.37153530]
[-101.66509247 -28.03027344]
[-99.56810760 -41.29705429]
[-111.10412598 -50.88455582]
[-126.66282654 -53.75466156]
[-131.50553894 -67.84002686]
[-143.04156494 -77.42752838]
[-154.57757568 -87.01502991]
[-170.62059021 -86.97914124]
[-180.53845215 -99.58927155]
[-176.72303772 -115.17202759]
[-162.10118103 -121.77363586]
[-147.88955688 -114.32991791]
[-144.99006653 -98.55105591]
[-133.45405579 -88.96354675]
[-121.91802979 -79.37604523]
[-107.18447113 -77.19170380]
[-101.51662445 -62.42057800]
[-89.98060608 -52.83307266]
[-74.28266907 -57.39845276]
[-58.78339386 -51.70011139]
[-49.59904099 -37.77777100]
[-50.47746277 -20.95658302]
[-38.67474747 -11.69937515]
[-26.87203217 -2.44216681]
[-9.44705009 -0.98085159]
[-2.57792974 16.03061295]
[9.48202705 24.95011139]
[21.54198456 33.86960983]
[33.60194016 42.78910828]
[45.66189957 51.70860291]
[57.72185516 60.62810135]
[69.78181458 69.54759979]
[81.96678162 78.29554749]
[94.27431488 86.87018585]
[108.18817902 88.24716949]
[114.30032349 100.82227325]
[126.60786438 109.39691925]
[139.03550720 117.79653931]
[151.58076477 126.01945496]
[164.12603760 134.24237061]
[175.24490356 124.98136139]
[188.51631165 119.25399780]
[202.85043335 117.52075195]
[217.07295227 119.91449738]
[230.02125549 126.23037720]
[240.63951111 135.94331360]
[248.06474304 148.25161743]
[251.69696045 162.14320374]
[251.24761963 176.47877502]
[246.76254272 190.08525085]
[259.07006836 198.65989685]
[271.37762451 207.23454285]
[283.68515015 215.80918884]
[295.99270630 224.38381958]
[311.73873901 225.92411804]
[317.75854492 239.54804993]
[330.06607056 248.12269592]
[342.37359619 256.69732666]
[354.68115234 265.27197266]
[366.98867798 273.84661865]
[379.29623413 282.42126465]
[391.60375977 290.99591064]
[408.05615234 295.08920288]
[408.67730713 312.03176880]
[392.56881714 317.31881714]
[383.02911377 303.30343628]
[370.72158813 294.72879028]
[358.41403198 286.15414429]
[346.10650635 277.57952881]
[333.79898071 269.00488281]
[321.49142456 260.43023682]
[309.18389893 251.85559082]
[294.31814575 250.92860413]
[287.41806030 236.69136047]
[275.11050415 228.11671448]
[262.80297852 219.54208374]
[250.49543762 210.96743774]
[238.18789673 202.39279175]
[225.86239624 211.94807434]
[211.17701721 217.25509644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 70]
[7 69]
[8 68]
[10 67]
[11 66]
[13 64]
[14 63]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[25 54]
[26 53]
[27 52]
[32 48]
[33 47]
[35 45]
[36 44]
[37 43]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
