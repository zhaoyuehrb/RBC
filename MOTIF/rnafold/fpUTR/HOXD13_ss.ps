%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAAGGAGAGGAGGGAGGAGGCGCGCCGCGCCAUGGUGUCCUGCGCGGGGCCAGGGCCAGGGCCGGGGCCGGGCCAGGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[26.17922974 114.33196259]
[15.93918896 120.91473389]
[4.39728832 124.74640656]
[-7.72239399 125.59291077]
[-19.66109848 123.40727234]
[-30.67289162 118.33215332]
[-40.07126236 110.69055176]
[-47.27193069 100.96527100]
[-51.82916641 89.76840210]
[-53.46337509 77.80281067]
[-52.07825089 65.81799316]
[-65.93643951 60.07774353]
[-79.79463959 54.33749390]
[-93.65283203 48.59724045]
[-103.51706696 59.03208160]
[-116.34070587 65.42588043]
[-130.55097961 67.01758575]
[-144.41300964 63.63365936]
[-156.24153137 55.70678711]
[-164.60586548 44.22063065]
[-168.50289917 30.58782387]
[-167.47735596 16.47624397]
[-181.12182617 10.24501801]
[-194.76631165 4.01379299]
[-208.41079712 -2.21743202]
[-222.05526733 -8.44865704]
[-238.97479248 -9.52852631]
[-242.62091064 -26.08576393]
[-227.72009277 -34.17289352]
[-215.82405090 -22.09313774]
[-202.17956543 -15.86191177]
[-188.53507996 -9.63068676]
[-174.89060974 -3.39946175]
[-161.24612427 2.83176351]
[-149.90901184 -8.08946037]
[-135.23022461 -13.88095379]
[-119.41381073 -13.64179611]
[-104.84659576 -7.37894106]
[-93.73799133 3.98943210]
[-87.78491211 18.76841927]
[-87.91257477 34.73904800]
[-74.05438232 40.47929764]
[-60.19618988 46.21955109]
[-46.33799744 51.95980072]
[-34.16553497 38.46437454]
[-17.83617020 30.41561508]
[0.34338036 28.97624207]
[17.79550362 34.37350082]
[32.03715515 45.86364746]
[41.03313446 61.83435440]
[43.48691559 80.03092194]
[58.14411926 83.21940613]
[72.80132294 86.40788269]
[87.45852661 89.59635925]
[97.75733948 83.86014557]
[109.22991943 86.57118988]
[115.87174988 96.31058502]
[130.40580750 100.02017975]
[144.93986511 103.72978210]
[159.47393799 107.43937683]
[174.75891113 103.35529327]
[185.17736816 113.99978638]
[199.71142578 117.70938110]
[214.99641418 113.62529755]
[225.41485596 124.26979065]
[239.94891357 127.97939301]
[254.48297119 131.68899536]
[270.11685181 126.73785400]
[282.03741455 137.99983215]
[277.98178101 153.88958740]
[262.12207031 158.06108093]
[250.77337646 146.22305298]
[236.23931885 142.51344299]
[221.70524597 138.80384827]
[207.45983887 143.15327454]
[196.00181580 132.24343872]
[181.46775818 128.53384399]
[167.22235107 132.88327026]
[155.76432800 121.97343445]
[141.23027039 118.26383972]
[126.69621277 114.55424500]
[112.16215515 110.84464264]
[96.25261688 115.85816193]
[84.27004242 104.25356293]
[69.61283875 101.06508636]
[54.95563889 97.87660980]
[40.29843521 94.68812561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 44]
[12 43]
[13 42]
[14 41]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[51 87]
[52 86]
[53 85]
[54 84]
[57 82]
[58 81]
[59 80]
[60 79]
[62 77]
[63 76]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
