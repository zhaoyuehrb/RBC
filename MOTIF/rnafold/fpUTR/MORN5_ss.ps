%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUAGUGAUGCCGUAUCCACUGAGACUCCGGAUCCUAACAGCUGGAAGCUAAAAACAGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[77.65914154 92.29885864]
[62.93021393 95.13762665]
[48.20128250 97.97639465]
[36.11479187 108.18557739]
[22.15322304 102.99674988]
[7.42429304 105.83551788]
[-7.30463743 108.67428589]
[-22.03356743 111.51305389]
[-36.76249695 114.35182190]
[-41.71000671 128.89202881]
[-53.27534485 138.99839783]
[-68.34749603 141.95234680]
[-82.87213135 136.95927429]
[-92.94218445 125.36231995]
[-95.84887695 110.28098297]
[-90.81031036 95.77207184]
[-79.18184662 85.73841858]
[-64.09146881 82.87901306]
[-49.59842682 87.96302795]
[-39.60126877 99.62289429]
[-24.87233734 96.78412628]
[-10.14340591 93.94535828]
[4.58552408 91.10659027]
[19.31445503 88.26782227]
[30.34743500 78.26168823]
[45.36251450 83.24746704]
[60.09144211 80.40869904]
[74.82037354 77.56993103]
[87.03901672 68.86907196]
[94.53901672 55.87869644]
[102.03901672 42.88831329]
[109.53901672 29.89793205]
[117.03901672 16.90755081]
[109.29018402 3.64666080]
[109.22599792 -11.71209717]
[116.86370850 -25.03729439]
[130.14881897 -32.74451828]
[145.50770569 -32.76056671]
[158.80889893 -25.08111954]
[166.47444153 -11.77191257]
[166.44235229 3.58694601]
[158.72125244 16.86400032]
[145.38807678 24.48778915]
[130.02938843 24.40755081]
[122.52939606 37.39793396]
[115.02939606 50.38831329]
[107.52939606 63.37869644]
[100.02939606 76.36907196]
[116.72267151 86.59615326]
[118.77612305 104.16317749]
[130.99476624 112.86402893]
[143.21340942 121.56488037]
[158.30332947 117.46266174]
[172.47798157 124.06669617]
[179.04452515 138.25875854]
[174.90243530 153.33778381]
[162.00749207 162.18392944]
[146.44827271 160.62030029]
[135.57138062 149.38520813]
[134.51255798 133.78352356]
[122.29391479 125.08266449]
[110.07527161 116.38181305]
[101.21736145 120.07501984]
[91.24417114 119.07839203]
[82.58460236 113.23112488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
