%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGGGGAGGGGCGGCCCUCAAACGGGUCAUUGCCAUUAAUAGAGACCUCAAACACCGCCUGCUAAAAAUACCCGACUGGAGGAGCAUAAAAGCGCAGCCGAGCCCAGCGCCCCGCACUUUUCUGAGCAGACGUCCAGAGCAGAGUCAGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[247.71426392 266.02777100]
[237.32339478 255.20973206]
[232.59715271 254.22303772]
[228.46072388 250.22117615]
[226.74285889 243.74063110]
[216.79602051 232.51296997]
[206.84918213 221.28530884]
[196.90234375 210.05764771]
[178.63786316 210.09306335]
[165.88711548 196.57560730]
[167.02587891 177.70977783]
[156.63500977 166.89173889]
[146.24414062 156.07369995]
[135.85327148 145.25566101]
[125.24667358 134.64906311]
[114.42863464 124.25819397]
[103.61060333 113.86733246]
[91.43993378 105.09949493]
[78.15809631 98.12865448]
[64.87625122 91.15780640]
[51.59441376 84.18695831]
[36.56504822 91.88683319]
[20.06783485 89.15944672]
[8.54723454 77.27020264]
[6.38446331 61.02404785]
[-7.03505611 54.32207108]
[-20.45457649 47.62009430]
[-33.87409592 40.91811752]
[-47.29361343 34.21614075]
[-56.42694092 33.16887283]
[-60.91384125 27.24170113]
[-74.19567871 20.27085304]
[-87.47752380 13.30000591]
[-96.61280060 25.24382019]
[-107.63530731 35.47183990]
[-120.22789764 43.68978500]
[-134.02825928 49.66120911]
[-148.63934326 53.21429825]
[-163.64073181 54.24682999]
[-178.60083008 52.72909164]
[-193.08920288 48.70475006]
[-206.68896484 42.28960037]
[-219.00886536 33.66821289]
[-229.69439697 23.08864212]
[-238.43814087 10.85528660]
[-244.98851013 -2.67987633]
[-249.15704346 -17.12741280]
[-250.82380676 -32.07164001]
[-249.94082642 -47.08258057]
[-246.53353882 -61.72834396]
[-240.69995117 -75.58753967]
[-232.60791016 -88.26140594]
[-222.49024963 -99.38529968]
[-210.63807678 -108.63916016]
[-197.39239502 -115.75672913]
[-183.13430786 -120.53323364]
[-168.27404785 -122.83123016]
[-153.23918152 -122.58460999]
[-138.46228027 -119.80046082]
[-124.36853027 -114.55889893]
[-111.36341095 -107.01072693]
[-99.82111359 -97.37312317]
[-90.07373810 -85.92337799]
[-82.40172577 -72.99092865]
[-77.02582550 -58.94786072]
[-74.10070801 -44.19822693]
[-73.71054077 -29.16640282]
[-75.86653900 -14.28488064]
[-80.50667572 0.01816542]
[-67.22483826 6.98901320]
[-53.94299316 13.95986080]
[-40.59163666 20.79661942]
[-27.17211723 27.49859619]
[-13.75259876 34.20057297]
[-0.33307904 40.90254974]
[13.08644009 47.60452652]
[24.34059334 40.36349869]
[37.81188202 39.63765335]
[49.97286987 45.72454834]
[57.58598709 57.12373352]
[58.56526184 70.90511322]
[71.84709930 77.87596130]
[85.12894440 84.84680939]
[98.41078186 91.81765747]
[97.50550079 82.73587799]
[97.47724152 73.56855774]
[104.71413422 60.42977905]
[100.07691956 45.32111359]
[107.55506134 31.39800453]
[122.71190643 26.92078781]
[136.55517578 34.54571533]
[140.87190247 49.74905396]
[133.10102844 63.51093292]
[117.85290527 67.66667175]
[110.61601257 80.80544281]
[125.14878845 77.09081268]
[134.90049744 88.48837280]
[128.98228455 102.27150726]
[114.00146484 103.04929352]
[124.81950378 113.44015503]
[135.63754272 123.83102417]
[142.04365540 125.80843353]
[145.87571716 130.10264587]
[146.67131042 134.86479187]
[157.06217957 145.68283081]
[167.45304871 156.50086975]
[177.84390259 167.31890869]
[189.61772156 165.23498535]
[200.81245422 169.07983398]
[208.66015625 177.77963257]
[211.28041077 189.07583618]
[208.13000488 200.11080933]
[218.07684326 211.33847046]
[228.02368164 222.56613159]
[237.97052002 233.79379272]
[248.14143372 244.81887817]
[258.53231812 255.63690186]
[267.99853516 252.98359680]
[277.71975708 253.98736572]
[286.34085083 258.46536255]
[292.67596436 265.75344849]
[295.87130737 274.80438232]
[295.52035522 284.33819580]
[291.71487427 293.02316284]
[301.20153809 304.64224243]
[310.68823242 316.26132202]
[318.58709717 320.96475220]
[320.24612427 328.21124268]
[329.49688721 340.01898193]
[344.09838867 346.11050415]
[345.85687256 360.90093994]
[355.10766602 372.70870972]
[364.35842896 384.51644897]
[372.16098022 389.37799072]
[373.67373657 396.65640259]
[382.68487549 408.64804077]
[398.30859375 409.30670166]
[409.81875610 419.89205933]
[411.78060913 435.40609741]
[403.26782227 448.52352905]
[388.29989624 453.05068970]
[373.94421387 446.85003662]
[366.97909546 432.84927368]
[370.69323730 417.65917969]
[361.68209839 405.66754150]
[352.55068970 393.76724243]
[343.29989624 381.95947266]
[334.04913330 370.15173340]
[320.10928345 364.90478516]
[317.68914795 349.26977539]
[308.43835449 337.46200562]
[299.06915283 325.74801636]
[289.58248901 314.12893677]
[280.09579468 302.50985718]
[259.70617676 302.26342773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[5 115]
[6 114]
[7 113]
[8 112]
[11 107]
[12 106]
[13 105]
[14 104]
[15 101]
[16 100]
[17 99]
[18 84]
[19 83]
[20 82]
[21 81]
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[31 71]
[32 70]
[33 69]
[86 95]
[87 94]
[124 154]
[125 153]
[126 152]
[128 151]
[129 150]
[131 148]
[132 147]
[133 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
