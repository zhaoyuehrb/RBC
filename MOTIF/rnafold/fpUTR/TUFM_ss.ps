%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACUGGCGGCUAGAGGGGCCCGGACUUGCCCUCCCAGCUCUAACUUCCGCCGGAAGUGCCUUCCAGCCGCAGGCGCCCUUCUUCUUCUGUGCGCUCGGGCUCCUGGUCCCGGCUCCCCGGUUACCGGGGCGCGAGU\
) } def
/len { sequence length } bind def

/coor [
[99.72406769 118.52806091]
[94.36277008 116.10800934]
[90.45408630 112.34062195]
[88.25760651 107.87325287]
[87.78199768 103.36695099]
[88.80638123 99.40783691]
[74.26103973 95.74272919]
[59.71569824 92.07762146]
[50.54454803 93.01531982]
[44.88694763 88.16365051]
[30.42750359 84.17309570]
[15.96806049 80.18254852]
[1.50861776 76.19199371]
[-12.95082474 72.20143890]
[-28.31208611 75.98855591]
[-38.52229691 65.14416504]
[-52.98173904 61.15361023]
[-67.44118500 57.16305923]
[-81.90062714 53.17250443]
[-96.36006927 49.18195343]
[-111.34496307 48.50897980]
[-126.10390472 51.18733215]
[-135.11282349 63.89470291]
[-150.11863708 66.40068817]
[-162.17765808 57.73375320]
[-176.93659973 60.41210556]
[-191.69554138 63.09046173]
[-199.28904724 76.76059723]
[-213.91140747 82.30321503]
[-228.65840149 77.10124969]
[-236.56692505 63.61091995]
[-233.90284729 48.20193863]
[-221.92404175 38.14995956]
[-206.28654480 38.20122147]
[-194.37390137 48.33151627]
[-179.61495972 45.65316391]
[-164.85601807 42.97481155]
[-156.61128235 30.62329102]
[-141.68176270 27.69681168]
[-128.78225708 36.42839050]
[-114.02331543 33.75003433]
[-111.70568848 26.61711121]
[-125.97146606 21.98163605]
[-121.33576965 7.71593237]
[-107.07043457 12.35126400]
[-104.75280762 5.21834040]
[-115.11874390 -5.62358236]
[-125.48468781 -16.46550560]
[-135.85063171 -27.30742836]
[-146.21656799 -38.14935303]
[-156.58250427 -48.99127579]
[-171.89860535 -56.26131821]
[-169.15258789 -72.99140167]
[-152.31614685 -74.98405457]
[-145.74058533 -59.35721588]
[-135.37464905 -48.51528931]
[-125.00870514 -37.67336655]
[-114.64276123 -26.83144569]
[-104.27682495 -15.98952198]
[-93.91088104 -5.14759922]
[-85.24330902 17.48864555]
[-92.36951447 34.72250748]
[-77.91007233 38.71306229]
[-63.45063019 42.70361328]
[-48.99118805 46.69416809]
[-34.53174210 50.68471909]
[-20.20471954 46.61217499]
[-8.96027279 57.74199677]
[5.49917030 61.73255157]
[19.95861244 65.72310638]
[34.41805649 69.71365356]
[48.87749863 73.70420837]
[63.38080597 77.53227997]
[77.92614746 81.19738770]
[92.47148895 84.86248779]
[106.73733521 80.22723389]
[116.35047150 68.71256256]
[125.96360779 57.19789505]
[135.57673645 45.68322372]
[129.21768188 31.80788231]
[129.51722717 16.54770470]
[136.41592407 2.93260884]
[148.54400635 -6.33411741]
[163.49345398 -9.41255951]
[178.29603577 -5.69149017]
[190.01268005 4.09026957]
[196.31706238 17.99054337]
[195.95741272 33.24942398]
[189.00515747 46.83724594]
[176.84068298 56.05614090]
[161.87922668 59.07569122]
[147.09141541 55.29635620]
[137.47827148 66.81102753]
[127.86514282 78.32569885]
[118.25200653 89.84037018]
[120.59852600 104.65569305]
[133.29939270 112.63617706]
[146.00025940 120.61666107]
[158.70111084 128.59713745]
[171.40197754 136.57762146]
[187.20341492 137.36839294]
[193.86340332 150.69107056]
[206.56427002 158.67155457]
[215.57632446 160.61380005]
[219.45776367 166.97630310]
[231.97636414 175.23974609]
[244.49496460 183.50320435]
[257.01354980 191.76666260]
[269.53216553 200.03012085]
[282.05075073 208.29356384]
[300.41561890 208.93130493]
[307.71771240 224.85018921]
[320.41857910 232.83067322]
[333.11944580 240.81114197]
[345.82031250 248.79162598]
[362.21929932 248.86376953]
[370.12030029 263.23410034]
[361.39541626 277.11965942]
[345.02008057 276.23617554]
[337.83984375 261.49249268]
[325.13897705 253.51200867]
[312.43811035 245.53152466]
[299.73724365 237.55104065]
[287.82467651 239.93209839]
[277.15911865 233.31762695]
[273.78732300 220.81216431]
[261.26870728 212.54870605]
[248.75010681 204.28526306]
[236.23150635 196.02180481]
[223.71290588 187.75834656]
[211.19432068 179.49488831]
[198.58378601 171.37242126]
[185.88291931 163.39193726]
[170.98994446 163.17198181]
[163.42149353 149.27848816]
[150.72062683 141.29800415]
[138.01977539 133.31752014]
[125.31890869 125.33703613]
[112.61804199 117.35655975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 75]
[7 74]
[8 73]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[21 41]
[22 40]
[25 37]
[26 36]
[27 35]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[76 95]
[77 94]
[78 93]
[79 92]
[96 139]
[97 138]
[98 137]
[99 136]
[100 135]
[102 133]
[103 132]
[105 131]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
