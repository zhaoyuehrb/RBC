%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACGGGAGCAUCGGCGCUGGCUGCCCGGGCCGCGAGCGCAGCAGAGCUGUCAGCGGGCGGACGGGCAGCGGGUGACGGAGCGGCGAGACGAGCGCACAGCAGUCGCGGCCCGGGAGCCGGAGCUGCCGCCGCACCCCGGGAAGGCUGCCUUGCCGCCGGCCCGCCGACCGCGGCCGGACGAAG\
) } def
/len { sequence length } bind def

/coor [
[269.97961426 282.52697754]
[258.59823608 272.75637817]
[247.21687317 262.98580933]
[232.52008057 260.56634521]
[227.08895874 245.70655823]
[215.70758057 235.93597412]
[204.32621765 226.16539001]
[189.62942505 223.74592590]
[184.19830322 208.88613892]
[172.81692505 199.11555481]
[161.43554688 189.34495544]
[146.73876953 186.92550659]
[141.30763245 172.06571960]
[129.92626953 162.29512024]
[118.54489899 152.52453613]
[107.16352081 142.75395203]
[95.78215027 132.98336792]
[81.71586609 127.77378845]
[66.71586609 127.77378845]
[51.71586990 127.77378845]
[37.91569901 135.51109314]
[25.18842506 127.77378845]
[10.18842506 127.77378845]
[-4.81157446 127.77378845]
[-19.81157494 127.77378845]
[-34.81157303 127.77378845]
[-49.81157303 127.77378845]
[-64.81157684 127.77378845]
[-79.81157684 127.77378845]
[-89.47974396 136.33288574]
[-101.98696899 136.01177979]
[-110.62991333 127.52899170]
[-125.62777710 127.27565002]
[-140.62564087 127.02230835]
[-155.62348938 126.76896667]
[-166.93904114 137.47393799]
[-182.14538574 137.00335693]
[-192.28120422 126.14974976]
[-207.27906799 125.89640808]
[-222.27906799 125.89640808]
[-237.27693176 126.14974976]
[-252.27478027 126.40309143]
[-267.27264404 126.65643311]
[-282.27050781 126.90977478]
[-298.00524902 133.22276306]
[-308.42733765 119.85054016]
[-298.46282959 106.13394928]
[-282.52386475 111.91191101]
[-267.52600098 111.65856934]
[-252.52812195 111.40522766]
[-237.53027344 111.15188599]
[-222.53240967 110.89854431]
[-218.61465454 108.13258362]
[-212.91302490 107.81314087]
[-207.02572632 110.89854431]
[-192.02786255 111.15188599]
[-181.53126526 100.64679718]
[-166.31768799 100.69007111]
[-155.37014771 111.77110291]
[-140.37229919 112.02444458]
[-125.37443542 112.27779388]
[-110.37657166 112.53113556]
[-95.52724457 103.19635773]
[-79.81157684 112.77378845]
[-64.81157684 112.77378845]
[-49.81157303 112.77378845]
[-34.81157303 112.77378845]
[-19.81157494 112.77378845]
[-4.81157446 112.77378845]
[10.18842506 112.77378845]
[25.18842506 112.77378845]
[37.91569901 105.03648376]
[51.71586990 112.77378845]
[66.71586609 112.77378845]
[81.71586609 112.77378845]
[79.02201843 99.78348541]
[84.12422180 88.41390228]
[94.23043060 82.60293579]
[95.74795532 67.67990112]
[97.26548004 52.75685883]
[95.01705170 43.88038635]
[98.93673706 37.59534073]
[100.70608521 22.70005989]
[94.65062714 8.08356380]
[103.83517456 -3.64218903]
[105.60452271 -18.53746986]
[107.37387848 -33.43275070]
[109.14322662 -48.32803345]
[100.63114166 -54.82288742]
[95.63149261 -64.19928741]
[94.99165344 -74.72504425]
[98.76049805 -84.48709106]
[106.19171906 -91.73915863]
[115.89054108 -95.21412659]
[118.41205597 -110.00067139]
[110.34680176 -123.86902618]
[116.29496765 -138.76864624]
[131.69363403 -143.26983643]
[144.73025513 -133.91964722]
[145.40426636 -117.89076233]
[133.19860840 -107.47916412]
[130.67709351 -92.69261169]
[143.08387756 -77.69699860]
[140.45614624 -58.10534286]
[124.03850555 -46.55868149]
[122.26915741 -31.66340065]
[120.49980927 -16.76811981]
[118.73045349 -1.87283826]
[124.91247559 11.67824745]
[115.60136414 24.46941185]
[113.83201599 39.36469269]
[112.18852234 54.27438354]
[110.67099762 69.19742584]
[109.15347290 84.12046051]
[117.34732056 91.48904419]
[120.12988281 102.74758148]
[115.91648865 114.17031097]
[105.55274200 121.60199738]
[116.93411255 131.37258911]
[128.31547546 141.14317322]
[139.69685364 150.91375732]
[151.07823181 160.68434143]
[166.58908081 163.80265808]
[171.20614624 177.96359253]
[182.58750916 187.73417664]
[193.96888733 197.50476074]
[209.47973633 200.62307739]
[214.09680176 214.78401184]
[225.47816467 224.55459595]
[236.85954285 234.32518005]
[252.37039185 237.44349670]
[256.98745728 251.60443115]
[268.36883545 261.37503052]
[279.75021362 271.14559937]
[296.74374390 262.19268799]
[316.40396118 262.03176880]
[334.35098267 271.11364746]
[346.39688110 287.78427124]
[349.52072144 308.57141113]
[363.90661621 312.81948853]
[378.29251099 317.06756592]
[393.71893311 313.55532837]
[403.73391724 324.58029175]
[418.11978149 328.82836914]
[432.50567627 333.07644653]
[446.89157104 337.32452393]
[463.79458618 336.01147461]
[469.73556519 351.89041138]
[456.12179565 361.99493408]
[442.64349365 351.71041870]
[428.25759888 347.46234131]
[413.87170410 343.21426392]
[399.48580933 338.96618652]
[385.08837891 342.78225708]
[374.04443359 331.45346069]
[359.65853882 327.20538330]
[345.27264404 322.95727539]
[336.39450073 335.04772949]
[344.75436401 347.50213623]
[353.11422729 359.95654297]
[361.47409058 372.41098022]
[369.83395386 384.86538696]
[378.19381714 397.31982422]
[385.59164429 402.71606445]
[386.58764648 410.05593872]
[394.73596191 422.64978027]
[410.05831909 427.40423584]
[415.76004028 442.39990234]
[407.46722412 456.13339233]
[391.54144287 458.06954956]
[380.19955444 446.72311401]
[382.14212036 430.79809570]
[373.99380493 418.20425415]
[365.73941040 405.67968750]
[357.37954712 393.22528076]
[349.01968384 380.77084351]
[340.65982056 368.31643677]
[332.29992676 355.86199951]
[323.94006348 343.40759277]
[310.22714233 346.71875000]
[296.35385132 345.60809326]
[283.69177246 340.30364990]
[273.45587158 331.44204712]
[266.58807373 319.99459839]
[263.67126465 307.16174316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[5 130]
[6 129]
[7 128]
[9 126]
[10 125]
[11 124]
[13 122]
[14 121]
[15 120]
[16 119]
[17 118]
[18 75]
[19 74]
[20 73]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[32 62]
[33 61]
[34 60]
[35 59]
[38 56]
[39 55]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[78 114]
[79 113]
[80 112]
[82 111]
[83 110]
[85 108]
[86 107]
[87 106]
[88 105]
[94 102]
[95 101]
[139 157]
[140 156]
[141 155]
[143 153]
[144 152]
[145 151]
[146 150]
[158 179]
[159 178]
[160 177]
[161 176]
[162 175]
[163 174]
[165 173]
[166 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
