%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGAUGGGCGGGGAGGGGGCGGGGCCGGGCAACCCGGAAGGUCCGGCGUCCCAGCCGCCUACCUCGCUGGGACCCUGGUCUUGCUGUCCCCCGCUGGCCUCCUGCCCAAGCGACUGCGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[152.74763489 462.43319702]
[154.50216675 453.11495972]
[160.48539734 445.58120728]
[156.81257629 431.03781128]
[143.93049622 423.64944458]
[139.99856567 408.95269775]
[147.83549500 395.49087524]
[144.16267395 380.94747925]
[140.48986816 366.40408325]
[136.81704712 351.86068726]
[133.14422607 337.31729126]
[129.47142029 322.77389526]
[125.79859924 308.23049927]
[122.12578583 293.68710327]
[117.38672638 287.91018677]
[118.54673004 278.73852539]
[115.23476410 264.10873413]
[111.92279053 249.47895813]
[99.33001709 237.32264709]
[104.79104614 219.78919983]
[101.11823273 205.24580383]
[97.44541168 190.70240784]
[93.77259827 176.15901184]
[90.09978485 161.61561584]
[86.42696381 147.07221985]
[82.75415039 132.52880859]
[71.21065521 122.95030975]
[56.23933029 122.02326965]
[41.26800537 121.09622192]
[26.29667854 120.16918182]
[11.32535362 119.24213409]
[-4.85718203 124.29801178]
[-14.19524384 110.14749908]
[-3.18277431 97.25712585]
[12.25239754 104.27080536]
[27.22372246 105.19785309]
[42.19504929 106.12490082]
[57.16637421 107.05194092]
[72.13770294 107.97898865]
[76.31441498 88.21096802]
[91.38525391 77.67196655]
[90.64344788 62.69031525]
[89.90164185 47.70867157]
[81.49134064 34.30802155]
[88.58975983 21.21368408]
[87.84795380 6.23203850]
[87.10614777 -8.74960804]
[86.36434174 -23.73125458]
[77.95404053 -37.13190079]
[85.05246735 -50.22623825]
[84.31066132 -65.20788574]
[83.56885529 -80.18952942]
[82.82704926 -95.17118073]
[82.08524323 -110.15282440]
[81.34343719 -125.13446808]
[80.60163116 -140.11611938]
[79.85982513 -155.09776306]
[66.15868378 -162.03854370]
[57.77697754 -174.90875244]
[56.96934509 -190.24639893]
[63.95302963 -203.92572021]
[76.84945679 -212.26704407]
[92.18955994 -213.02659607]
[105.84691620 -206.00006104]
[114.14777374 -193.07754517]
[114.85924530 -177.73515320]
[107.78993988 -164.09988403]
[94.84146881 -155.83956909]
[95.58327484 -140.85792542]
[96.32508087 -125.87627411]
[97.06688690 -110.89463043]
[97.80869293 -95.91298676]
[98.55049896 -80.93133545]
[99.29230499 -65.94969177]
[100.03411102 -50.96804428]
[108.39135742 -38.63898468]
[101.34599304 -24.47306061]
[102.08779907 -9.49141407]
[102.82960510 5.49023247]
[103.57141113 20.47187805]
[111.92864990 32.80094147]
[104.88328552 46.96686554]
[105.62509155 61.94850922]
[106.36689758 76.93016052]
[115.74905396 81.03230286]
[122.80270386 88.86738586]
[126.08443451 99.20405579]
[124.77180481 110.27436829]
[118.85158539 120.07579041]
[109.16547394 126.73329926]
[97.29754639 128.85600281]
[100.97036743 143.39939880]
[104.64318085 157.94279480]
[108.31599426 172.48619080]
[111.98880768 187.02958679]
[115.66162872 201.57298279]
[119.33444214 216.11639404]
[130.03996277 223.43565369]
[132.75714111 235.70451355]
[126.55258179 246.16697693]
[129.86454773 260.79678345]
[133.17652893 275.42657471]
[136.66918945 290.01428223]
[140.34199524 304.55767822]
[144.01481628 319.10107422]
[147.68763733 333.64447021]
[151.36044312 348.18786621]
[155.03326416 362.73126221]
[158.70608521 377.27465820]
[162.37889099 391.81805420]
[175.66781616 399.94473267]
[179.18539429 414.74612427]
[171.35597229 427.36499023]
[175.02879333 441.90838623]
[190.93547058 456.16055298]
[184.88751221 475.83135986]
[189.62850952 490.06243896]
[194.36950684 504.29348755]
[206.98992920 514.76519775]
[203.96501160 530.88293457]
[188.40652466 536.06616211]
[176.31971741 524.98278809]
[180.13844299 509.03448486]
[175.39746094 494.80343628]
[170.65646362 480.57235718]
[161.99969482 477.87930298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 114]
[4 113]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[14 103]
[16 102]
[17 101]
[18 100]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[41 84]
[42 83]
[43 82]
[45 80]
[46 79]
[47 78]
[48 77]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
