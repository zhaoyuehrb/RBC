%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCUCCGCCGCCCUCCGCUCCGCUCGGCUCGGGCUCGGCUCGGGCGCGGGCGCGGGGCGCGGGGCUGGGCCCGGGCGGAGCGGCGGCUGCUCCGGAC\
) } def
/len { sequence length } bind def

/coor [
[197.69929504 332.93338013]
[192.28067017 318.94628906]
[186.86204529 304.95919800]
[181.44342041 290.97210693]
[176.02479553 276.98504639]
[170.60617065 262.99795532]
[165.16061401 257.80822754]
[165.24334717 248.49577332]
[160.25802612 234.34846497]
[155.27270508 220.20114136]
[150.28738403 206.05383301]
[145.30206299 191.90650940]
[140.31674194 177.75920105]
[133.63066101 164.33174133]
[125.34519196 151.82771301]
[117.05971527 139.32366943]
[108.77423859 126.81964111]
[100.48876953 114.31560516]
[88.05952454 107.91204834]
[87.00719452 93.96987152]
[78.72172546 81.46583557]
[70.43624878 68.96179962]
[62.15077209 56.45776367]
[53.86529922 43.95372772]
[45.57982254 31.44969177]
[37.29434967 18.94565582]
[29.00887489 6.44162083]
[24.00959015 3.97645140]
[20.88277626 0.16168952]
[19.82790756 -4.01008701]
[20.59857368 -7.62079620]
[13.50216961 -20.83597946]
[6.40576649 -34.05116272]
[-0.69063699 -47.26634598]
[-7.78704023 -60.48152924]
[-21.13246918 -68.97917938]
[-20.33700371 -83.85253143]
[-27.43340683 -97.06771088]
[-34.52981186 -110.28289795]
[-41.62621307 -123.49807739]
[-48.72261810 -136.71325684]
[-61.54290771 -147.80725098]
[-54.43148804 -163.19763184]
[-37.67392731 -160.62461853]
[-35.50743484 -143.80966187]
[-28.41102982 -130.59448242]
[-21.31462669 -117.37929535]
[-14.21822357 -104.16411591]
[-7.12182045 -90.94893646]
[5.71602583 -83.39651489]
[5.42814255 -67.57793427]
[12.52454567 -54.36274719]
[19.62094879 -41.14756393]
[26.71735191 -27.93238258]
[33.81375504 -14.71719933]
[41.51290894 -1.84385395]
[49.79838562 10.66018200]
[58.08385849 23.16421700]
[66.36933136 35.66825485]
[74.65480804 48.17229080]
[82.94028473 60.67632675]
[91.22576141 73.18035889]
[99.51123047 85.68439484]
[111.94047546 92.08795166]
[112.99280548 106.03012848]
[121.27827454 118.53416443]
[129.56375122 131.03820801]
[137.84922791 143.54223633]
[146.13470459 156.04626465]
[149.54495239 141.43907166]
[160.73384094 131.44863892]
[175.63250732 129.70802307]
[188.82301331 136.85020447]
[195.50859070 150.27789307]
[193.25802612 165.10810852]
[182.88972473 175.94776917]
[168.17416382 178.85502625]
[154.46406555 172.77388000]
[159.44938660 186.92118835]
[164.43470764 201.06851196]
[169.42002869 215.21582031]
[174.40534973 229.36314392]
[179.39067078 243.51045227]
[184.59326172 257.57931519]
[190.01188660 271.56640625]
[195.43051147 285.55349731]
[200.84913635 299.54058838]
[206.26776123 313.52764893]
[211.68638611 327.51473999]
[226.89883423 328.22277832]
[240.50520325 335.06283569]
[250.14810181 346.84988403]
[254.15684509 361.54171753]
[251.83689880 376.59286499]
[243.59020996 389.39569092]
[230.84555054 397.73196411]
[215.81101990 400.15740967]
[201.09143066 396.25177002]
[189.23706055 386.69177246]
[182.30174255 373.13369751]
[181.48706055 357.92660522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
