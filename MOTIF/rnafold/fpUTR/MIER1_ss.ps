%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGGCGGAGGCGGAGGGGAGGGCAGAGGGUUGGUGGAGCUGGAGGAAGCUCCGGACGACGACUGGAAGAAGGAGGCGGGCGGCCCGGGCCUCAGGCCCCUCCCAGGCUCUGAGUCUCCCGGCUGCAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[68.45930481 475.61196899]
[53.31913757 478.57489014]
[38.98899841 472.86080933]
[30.04158401 460.29309082]
[29.33198357 444.88204956]
[37.08662796 431.54528809]
[50.83103561 424.53854370]
[52.22528458 409.60348511]
[43.13701248 402.53137207]
[38.58284378 391.82345581]
[39.81793594 380.13189697]
[46.64746475 370.41479492]
[57.44643784 365.18768311]
[59.53403473 350.33364868]
[61.62163162 335.47961426]
[63.70922470 320.62561035]
[54.56824493 308.92184448]
[56.47376251 293.82800293]
[68.81172180 284.31945801]
[70.89931488 269.46545410]
[72.98691559 254.61141968]
[75.07450867 239.75740051]
[77.16210938 224.90338135]
[79.24970245 210.04936218]
[71.78612518 194.20985413]
[83.12677765 179.75619507]
[84.86817169 164.85760498]
[86.60956573 149.95903015]
[88.35095978 135.06045532]
[90.09235382 120.16188812]
[79.47747040 109.13722229]
[78.38729095 93.87187958]
[66.15026855 85.19689178]
[53.91325378 76.52191162]
[41.67623520 67.84692383]
[23.34668922 66.60327911]
[16.56974602 50.45806122]
[4.13418245 42.07016754]
[-8.30138111 33.68227386]
[-20.73694420 25.29438210]
[-33.17250824 16.90648842]
[-45.60807037 8.51859474]
[-58.04363632 0.13070142]
[-73.50778198 3.39195085]
[-86.70283508 -5.30667543]
[-89.80040741 -20.80443764]
[-80.96276093 -33.90678787]
[-65.43311310 -36.84033203]
[-52.42493439 -27.86465454]
[-49.65574265 -12.30486202]
[-37.22017670 -3.91696858]
[-24.78461456 4.47092485]
[-12.34905148 12.85881805]
[0.08651219 21.24671173]
[12.52207565 29.63460541]
[24.95763969 38.02249908]
[36.94697189 36.02941513]
[47.39437485 42.99380112]
[50.35121918 55.60990524]
[62.58823776 64.28488922]
[74.82525635 72.95987701]
[87.06227875 81.63485718]
[94.92570496 78.11588287]
[103.53536987 77.81522369]
[111.62512207 80.77710724]
[123.22719574 71.26964569]
[134.82926941 61.76217651]
[146.43133545 52.25471497]
[152.20124817 37.52315521]
[166.94956970 35.44079590]
[178.55163574 25.93333244]
[172.96420288 22.61020470]
[168.21836853 17.20293427]
[164.92309570 9.95663166]
[163.61462402 1.27511728]
[164.71784973 -8.30005550]
[168.51358032 -18.11946487]
[177.88540649 -29.83137512]
[187.25723267 -41.54328537]
[186.92369080 -57.58287048]
[199.34765625 -67.73297882]
[214.99851990 -64.20732117]
[221.87026978 -49.71047211]
[214.69149780 -35.36318207]
[198.96914673 -32.17145538]
[189.59730530 -20.45954704]
[180.22547913 -8.74763584]
[184.41943359 -2.52985454]
[197.00126648 16.12349129]
[211.37110901 11.82144260]
[225.74095154 7.51939392]
[240.11079407 3.21734548]
[254.48063660 -1.08470309]
[267.92025757 -11.41974735]
[281.57186890 -1.36638474]
[275.69052124 14.53475475]
[258.78268433 13.28514004]
[244.41284180 17.58718872]
[230.04299927 21.88923645]
[215.67315674 26.19128418]
[201.30331421 30.49333382]
[188.05911255 37.53540802]
[176.45703125 47.04287338]
[171.51698303 61.09439087]
[155.93881226 63.85678864]
[144.33673096 73.36425018]
[132.73466492 82.87171936]
[121.13258362 92.37918091]
[119.71110535 110.77661133]
[104.99092865 121.90328217]
[103.24953461 136.80184937]
[101.50814056 151.70042419]
[99.76674652 166.59899902]
[98.02536011 181.49757385]
[105.42243195 192.13676453]
[103.60730743 204.56079102]
[94.10372162 212.13696289]
[92.01612854 226.99098206]
[89.92853546 241.84500122]
[87.84093475 256.69903564]
[85.75334167 271.55303955]
[83.66574097 286.40707397]
[92.90483856 298.94805908]
[90.57611847 313.98242188]
[78.56324768 322.71319580]
[76.47565460 337.56723022]
[74.38805389 352.42123413]
[72.30046082 367.27526855]
[84.27168274 381.86578369]
[81.91227722 400.27139282]
[67.16034698 410.99771118]
[65.76609802 425.93276978]
[77.97609711 435.36248779]
[83.12818146 449.90414429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 132]
[8 131]
[13 128]
[14 127]
[15 126]
[16 125]
[19 122]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[26 114]
[27 113]
[28 112]
[29 111]
[30 110]
[32 62]
[33 61]
[34 60]
[35 59]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[65 108]
[66 107]
[67 106]
[68 105]
[70 103]
[71 102]
[77 87]
[78 86]
[79 85]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
