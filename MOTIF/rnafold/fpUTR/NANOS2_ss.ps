%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAACGCCUGCUGCUCUUGCCCUUGCCCACGGGCCCCCAGCCCCAGCCCCUCUCCUGUGGCCCACCACCCCUGCUUUGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[77.13953400 109.19322968]
[62.17955017 110.28816223]
[47.21956635 111.38309479]
[41.82386780 119.62445831]
[33.29153442 124.26075745]
[23.72097778 124.30250549]
[15.39568233 119.87222290]
[10.23939323 112.14367676]
[-4.75059986 111.59584808]
[-19.74059296 111.04801941]
[-34.73058701 110.50019073]
[-49.72057724 109.95235443]
[-62.18564606 122.06275940]
[-79.22234344 121.54006958]
[-90.47088623 109.18292999]
[-105.47088623 109.18292999]
[-113.08074188 122.52405548]
[-126.34972382 130.25903320]
[-141.70854187 130.30717468]
[-155.02574158 122.65553284]
[-162.71908569 109.36237335]
[-162.71908569 94.00348663]
[-155.02574158 80.71032715]
[-141.70854187 73.05869293]
[-126.34972382 73.10683441]
[-113.08074188 80.84180450]
[-105.47088623 94.18292999]
[-90.47088623 94.18292999]
[-82.61552429 83.79720306]
[-70.00258636 79.84397888]
[-57.25181198 84.00966644]
[-49.17274857 94.96236420]
[-34.18275452 95.51019287]
[-19.19276237 96.05802917]
[-4.20276928 96.60585785]
[10.78722286 97.15368652]
[27.77506065 85.67766571]
[46.12463379 96.42310333]
[61.08461761 95.32817841]
[76.04460144 94.23324585]
[88.73367310 78.08684540]
[109.24861908 77.16188812]
[118.84371948 65.63217926]
[128.43881226 54.10247040]
[131.31915283 38.54566574]
[145.40769958 33.71222687]
[155.00279236 22.18251991]
[164.59788513 10.65281296]
[160.65249634 -4.35430288]
[166.31294250 -18.80210876]
[179.40264893 -27.13512993]
[194.88836670 -26.14914703]
[206.81552124 -16.22329140]
[210.59786987 -1.17425942]
[204.78103638 13.21129131]
[191.60171509 21.40182304]
[176.12759399 20.24790764]
[166.53250122 31.77761459]
[156.93740845 43.30732346]
[154.74336243 58.03944778]
[139.96852112 63.69756699]
[130.37342834 75.22727203]
[120.77832794 86.75698090]
[124.53705597 97.75289154]
[122.83811188 109.24861908]
[134.36782837 118.84371948]
[145.89752197 128.43881226]
[157.42723083 138.03390503]
[168.95693970 147.62899780]
[183.63859558 142.89057922]
[198.54550171 146.86395264]
[208.92091370 158.28123474]
[211.45410156 173.49920654]
[205.33670044 187.66186523]
[192.52076721 196.24996948]
[177.09582520 196.52307129]
[163.98390198 188.39404297]
[157.36897278 174.45681763]
[159.36184692 159.15870667]
[147.83213806 149.56361389]
[136.30242920 139.96852112]
[124.77272797 130.37342834]
[113.24301910 120.77832794]
[103.15656281 124.43670654]
[92.47155762 123.46143341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[15 28]
[16 27]
[42 63]
[43 62]
[44 61]
[46 59]
[47 58]
[48 57]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
