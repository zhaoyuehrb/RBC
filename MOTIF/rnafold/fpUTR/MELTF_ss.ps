%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUAAGGAGCUCGGGCCAGCGCGAGGGGGAGCAGGGAGGAAGCCCGGCUGCUGCGGACCUCCUCGGACCCGGACCCAGCCCCAGCCCGGCCCCAGCCAGCCCCGACGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-24.48490524 353.23251343]
[-25.93386459 359.31042480]
[-28.93450546 364.75360107]
[-33.25444031 369.17663574]
[-38.56864166 372.27182007]
[-44.48384476 373.83026123]
[-50.56765747 373.75616455]
[-56.38014221 372.07232666]
[-66.46775055 383.17370605]
[-63.17897797 398.33825684]
[-69.46260071 412.52612305]
[-82.90244293 420.28179932]
[-98.33060455 418.62304688]
[-109.81464386 408.18768311]
[-112.93872070 392.98834229]
[-106.50154877 378.86947632]
[-92.97837067 371.26007080]
[-77.56910706 373.08609009]
[-67.48149872 361.98474121]
[-66.23137665 337.65582275]
[-43.08639145 328.16833496]
[-35.64561462 315.14395142]
[-28.20483780 302.11953735]
[-20.76406097 289.09515381]
[-28.38793564 276.29898071]
[-28.58445740 261.30508423]
[-21.20072365 248.13894653]
[-8.13239193 240.38552856]
[7.16197157 240.21321106]
[14.60274887 227.18881226]
[22.04352570 214.16442871]
[22.63718224 206.69450378]
[29.86960602 200.88989258]
[37.66336441 188.07360840]
[37.66535187 173.17900085]
[51.44660187 165.40803528]
[59.24036026 152.59175110]
[55.47531509 138.22651672]
[63.19672394 125.11794281]
[78.28983307 121.26622009]
[86.08359528 108.44992828]
[84.01657104 96.90200043]
[90.24839020 86.96260071]
[101.54339600 83.79241943]
[109.68432617 71.19379425]
[117.82524872 58.59517288]
[118.81636810 42.80504227]
[132.22244263 36.31455231]
[140.36337280 23.71592903]
[148.50430298 11.11730576]
[156.64521790 -1.48131835]
[164.26319885 -14.40286636]
[171.34544373 -27.62564468]
[178.42768860 -40.84842300]
[185.50993347 -54.07120132]
[186.83714294 -63.24943542]
[192.97050476 -67.55454254]
[200.41127014 -80.57894135]
[200.53863525 -96.39963531]
[213.57026672 -103.61253357]
[221.01103210 -116.63692474]
[227.91201782 -129.95520020]
[234.26159668 -143.54501343]
[232.30642700 -159.82717896]
[245.59010315 -169.44363403]
[260.44750977 -162.50178528]
[261.59463501 -146.14280701]
[247.85140991 -137.19541931]
[241.50181580 -123.60561371]
[242.44566345 -120.07431793]
[241.63777161 -115.89909363]
[238.79037476 -111.95072174]
[234.03543091 -109.19615173]
[226.59465027 -96.17175293]
[226.99951172 -81.28265381]
[213.43566895 -73.13816071]
[205.99488831 -60.11376953]
[198.73271179 -46.98895645]
[191.65046692 -33.76617813]
[184.56822205 -20.54340172]
[177.48597717 -7.32062435]
[178.23558044 -3.74305725]
[177.20088196 0.38182262]
[174.14212036 4.16880655]
[169.24385071 6.65960741]
[161.10292053 19.25823212]
[152.96199036 31.85685539]
[144.82107544 44.45547867]
[144.41224670 59.34447479]
[130.42387390 66.73609924]
[122.28294373 79.33472443]
[114.14202118 91.93334961]
[113.79387665 108.64850616]
[98.89988708 116.24369049]
[91.10612488 129.05998230]
[94.63005066 144.23297119]
[86.54349518 157.11949158]
[72.05664825 160.38551331]
[64.26289368 173.20179749]
[63.70344162 189.01310730]
[50.47965622 195.86735535]
[42.68589783 208.68365479]
[35.06792068 221.60519409]
[27.62714195 234.62959290]
[20.18636513 247.65399170]
[27.80540276 260.91662598]
[27.76327515 276.11184692]
[20.17143631 289.15908813]
[7.15532732 296.60467529]
[-7.73966742 296.53591919]
[-15.18044376 309.56033325]
[-22.62122154 322.58471680]
[-30.06199837 335.60913086]
[-26.60872841 340.93405151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 19]
[9 18]
[21 113]
[22 112]
[23 111]
[24 110]
[29 105]
[30 104]
[31 103]
[33 102]
[34 101]
[36 99]
[37 98]
[40 95]
[41 94]
[44 92]
[45 91]
[46 90]
[48 88]
[49 87]
[50 86]
[51 85]
[52 81]
[53 80]
[54 79]
[55 78]
[57 77]
[58 76]
[60 74]
[61 73]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
