%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUAGGGCCGGGCGCGGGGGCGGGGAGGCCUGGAGGAUUUAACCCAGGAGAGCCGCUGGUGGGAGGCGCGGCUGGCGCCGCUGCGCGCAUGGGCCUGUUCCUGGCCCGCAGCCGCCACCUACCCAGUGACC\
) } def
/len { sequence length } bind def

/coor [
[101.31102753 160.63653564]
[91.47515869 149.31153870]
[88.01392365 134.71412659]
[75.38655090 142.81039429]
[62.75917435 150.90664673]
[50.13180161 159.00291443]
[42.11234665 175.53189087]
[24.60407448 175.76725769]
[12.16851044 184.15515137]
[-0.26705354 192.54304504]
[-12.70261669 200.93093872]
[-25.13817978 209.31883240]
[-25.47879219 226.18595886]
[-35.67771912 239.41612244]
[-51.58424377 243.94738770]
[-66.91394043 238.19418335]
[-79.15096283 246.86917114]
[-91.38798523 255.54415894]
[-97.73654175 270.66461182]
[-114.03731537 272.45809937]
[-123.52147675 259.07965088]
[-116.43252563 244.29187012]
[-100.06296539 243.30714417]
[-87.82595062 234.63215637]
[-75.58892822 225.95716858]
[-76.66664124 212.59931946]
[-70.93623352 200.36506653]
[-59.80691910 192.51663208]
[-46.14279175 191.20542908]
[-33.52607346 196.88327026]
[-21.09051132 188.49537659]
[-8.65494728 180.10748291]
[3.78061652 171.71958923]
[16.21618080 163.33169556]
[18.85950661 151.46875000]
[29.23043823 144.39100647]
[42.03554153 146.37553406]
[54.66291428 138.27928162]
[67.29029083 130.18301392]
[79.91766357 122.08675385]
[81.39154053 114.73300171]
[67.18061829 119.53401947]
[55.91729736 109.62757874]
[58.86477280 94.92001343]
[73.07560730 90.11873627]
[84.33928680 100.02549744]
[85.81316376 92.67174530]
[77.28114319 80.33461761]
[68.74913025 67.99748993]
[60.21710968 55.66036224]
[44.70168686 55.43394089]
[32.30274963 46.10409927]
[27.78793907 31.25835419]
[32.89329529 16.60519981]
[45.65570068 7.77906895]
[61.16775513 8.17379189]
[73.46475220 17.63758850]
[77.81825256 32.53143692]
[72.55423737 47.12834549]
[81.08625793 59.46547318]
[89.61827087 71.80259705]
[98.15029144 84.13972473]
[112.24567413 89.27002716]
[126.71173096 85.30351257]
[141.17779541 81.33700562]
[155.64384460 77.37049103]
[170.06277466 73.23593140]
[184.43261719 68.93388367]
[198.80245972 64.63183594]
[211.06726074 50.95361710]
[227.96215820 55.55330276]
[242.22801208 50.91804886]
[256.49386597 46.28279114]
[270.75970459 41.64753723]
[285.02554321 37.01228333]
[299.29141235 32.37702942]
[313.55725098 27.74177361]
[326.36959839 19.94153214]
[337.03771973 9.39681530]
[347.70584106 -1.14790034]
[358.37399292 -11.69261646]
[358.21530151 -27.49610901]
[369.33734131 -38.72444153]
[385.14163208 -38.71604156]
[396.25173950 -27.47589684]
[396.07626343 -11.67258263]
[384.71926880 -0.68192548]
[368.91870117 -1.02448761]
[358.25057983 9.52022839]
[347.58242798 20.06494331]
[336.91430664 30.60965919]
[339.64276123 37.59575653]
[345.09967041 51.56795502]
[347.82809448 58.55405045]
[362.81896973 59.07754517]
[377.80984497 59.60103607]
[392.80068970 60.12453079]
[407.79156494 60.64802170]
[418.11999512 48.90674210]
[433.58688354 46.60250854]
[446.88922119 54.82329941]
[451.74606323 69.68752289]
[445.86416626 84.17673492]
[432.02078247 91.44957733]
[416.75228882 88.07203674]
[407.26806641 75.63888550]
[392.27719116 75.11539459]
[377.28634644 74.59189606]
[362.29547119 74.06840515]
[347.30462646 73.54491425]
[323.51425171 61.28497696]
[318.19250488 42.00762177]
[303.92666626 46.64287567]
[289.66079712 51.27812958]
[275.39495850 55.91338730]
[261.12911987 60.54864120]
[246.86326599 65.18389893]
[232.59741211 69.81915283]
[226.78662109 80.49394226]
[214.86654663 84.43889618]
[203.10450745 79.00167847]
[188.73466492 83.30372620]
[174.36482239 87.60577393]
[168.80838013 92.58329773]
[159.61035156 91.83654785]
[145.14430237 95.80306244]
[130.67825317 99.76956940]
[116.21218872 103.73608398]
[131.06773376 105.81286621]
[143.26550293 114.54293823]
[150.02281189 127.93467712]
[149.79808044 142.93299866]
[142.64257812 156.11627197]
[130.18872070 164.47697449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[16 25]
[17 24]
[18 23]
[47 62]
[48 61]
[49 60]
[50 59]
[63 128]
[64 127]
[65 126]
[66 125]
[67 123]
[68 122]
[69 121]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[78 91]
[79 90]
[80 89]
[81 88]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
