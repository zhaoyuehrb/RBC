%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGUCUGCGCAGUGUGGGGCUGAGGGAGGCCGGACGGCGCGCGUGCGUGCUGGCGUGCGUUCAUUUUCAGCCUGGUGUGGGGUGAGUGGUACCCAACGGGCCGGGGCGCCGCGUCCGCAGGAAGAGGCGCGGGGUGCAGGCUUGUAAACAUAUAACAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[136.77975464 267.60934448]
[149.09103394 258.87234497]
[144.02078247 244.75524902]
[138.95053101 230.63815308]
[133.88027954 216.52105713]
[128.81001282 202.40394592]
[123.73976898 188.28684998]
[118.66950989 174.16975403]
[113.59925842 160.05264282]
[108.52900696 145.93554688]
[103.45875549 131.81845093]
[93.36827087 131.97753906]
[83.52832794 128.95245361]
[74.93779755 122.91973114]
[68.50818634 114.36703491]
[64.96759033 104.05525970]
[64.77996826 92.95137787]
[68.08840942 82.13793182]
[53.36278915 79.28206635]
[38.63716125 76.42619324]
[23.91153717 73.57032776]
[9.18591309 70.71446228]
[-5.53971195 67.85859680]
[-20.26533699 65.00273132]
[-34.99096298 62.14686203]
[-49.79255676 59.71524429]
[-64.65790558 57.70988083]
[-79.52324677 55.70451736]
[-94.23394775 61.52740479]
[-105.81256104 52.15803909]
[-120.67790222 50.15267563]
[-135.56178284 48.28978348]
[-150.46281433 46.56953430]
[-161.06394958 53.96990204]
[-173.46559143 52.20090103]
[-181.07043457 42.75631332]
[-195.93577576 40.75094986]
[-210.80111694 38.74558640]
[-225.66647339 36.74022293]
[-240.53181458 34.73485947]
[-255.39715576 32.72949600]
[-270.26251221 30.72413254]
[-285.21957397 37.44857407]
[-298.36160278 27.63942337]
[-296.16915894 11.38748932]
[-280.89770508 5.41137075]
[-268.25714111 15.85878563]
[-253.39179993 17.86414909]
[-238.52644348 19.86951256]
[-223.66110229 21.87487602]
[-208.79576111 23.88023949]
[-193.93041992 25.88560104]
[-179.06506348 27.89096451]
[-163.24060059 20.35063362]
[-148.74255371 31.66850090]
[-133.84152222 33.38875198]
[-126.80332947 31.02087975]
[-118.67253876 35.28733063]
[-103.80719757 37.29269409]
[-90.15976715 31.32637024]
[-77.51788330 40.83917236]
[-62.65253830 42.84453583]
[-47.78719330 44.84989929]
[-44.74946594 42.97448349]
[-40.64011383 42.50422668]
[-36.14218140 43.93203354]
[-32.13509369 47.42123795]
[-17.40946960 50.27710342]
[-2.68384528 53.13297272]
[12.04177952 55.98883820]
[26.76740456 58.84470367]
[41.49303055 61.70057297]
[56.21865463 64.55643463]
[70.94428253 67.41230774]
[83.68862915 59.50145721]
[87.66335297 45.03765488]
[91.63807678 30.57385254]
[87.83414459 15.21674538]
[98.66735840 4.99467087]
[102.64208221 -9.46913147]
[106.33901978 -24.00641632]
[109.75682068 -38.61184692]
[113.17462921 -53.21727753]
[116.59243011 -67.82270813]
[120.01023102 -82.42813873]
[112.80498505 -96.76215363]
[119.64996338 -111.27166748]
[135.29428101 -114.82621002]
[147.73696899 -104.69905090]
[147.43304443 -88.65888214]
[134.61566162 -79.01033783]
[131.19786072 -64.40490723]
[127.78005981 -49.79947662]
[124.36225128 -35.19404602]
[120.94445038 -20.58861351]
[122.68362427 -16.09509659]
[121.58527374 -10.45928764]
[117.10588074 -5.49440908]
[113.13115692 8.96939373]
[117.21938324 23.29195023]
[106.10187531 34.54857254]
[102.12715149 49.01237488]
[98.15243530 63.47617722]
[109.01734924 65.73738098]
[118.36531067 71.04492950]
[125.40195465 78.70523071]
[129.60520935 87.83825684]
[144.42941284 85.54851532]
[159.25361633 83.25877380]
[174.07783508 80.96903992]
[188.90203857 78.67929840]
[196.06481934 65.04109192]
[209.72509766 58.31427383]
[224.55166626 60.89051437]
[234.89442444 71.57534027]
[249.71862793 69.28559875]
[264.54284668 66.99585724]
[279.27337646 58.60255051]
[291.41647339 70.43390656]
[283.40905762 85.37771606]
[266.83258057 81.82006836]
[252.00836182 84.10980225]
[237.18415833 86.39954376]
[230.54725647 99.70703888]
[217.18896484 106.63669586]
[202.13568115 104.34496307]
[191.19177246 93.50350189]
[176.36756897 95.79324341]
[161.54336548 98.08298492]
[146.71916199 100.37271881]
[131.89494324 102.66246033]
[130.48197937 109.75836945]
[127.51128387 116.35560608]
[123.13468933 122.11701965]
[117.57585144 126.74819183]
[122.64611053 140.86529541]
[127.71636200 154.98239136]
[132.78662109 169.09948730]
[137.85687256 183.21659851]
[142.92712402 197.33369446]
[147.99737549 211.45079041]
[153.06762695 225.56790161]
[158.13787842 239.68499756]
[163.20812988 253.80209351]
[178.26499939 252.70964050]
[193.05801392 255.72111511]
[206.48947144 262.61303711]
[217.56263733 272.87402344]
[225.45582581 285.74258423]
[229.58329773 300.26382446]
[229.63877869 315.36016846]
[225.61814880 329.91134644]
[217.81976318 342.83761597]
[206.82231140 353.17968750]
[193.44189453 360.17016602]
[178.67140198 363.29028320]
[163.60691833 362.30853271]
[149.36631775 357.29772949]
[137.00636292 348.62973022]
[127.44422913 336.94778442]
[121.38950348 323.11871338]
[119.29148102 308.16876221]
[121.30584717 293.20733643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 144]
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[11 135]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[25 67]
[26 63]
[27 62]
[28 61]
[30 59]
[31 58]
[32 56]
[33 55]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[75 103]
[76 102]
[77 101]
[79 99]
[80 98]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[107 131]
[108 130]
[109 129]
[110 128]
[111 127]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
