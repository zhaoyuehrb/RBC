%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUACACGCGGAGAACUGGGAAGACAGAAAGAACAAUCCUUUAAGGGAGAACCUAGAAGCCAUUCAACAAGGUUAAAAUCUUCAGGCUUCCGAGGAUUUGGUAGACAGAUCAGAGGCACGUUUCCCACAACUGCGAAGAGGCGCUGAGGCAAUUCUGCAAGAAGAUUUUGGGGUUUUGGAAAAGAAGCU\
) } def
/len { sequence length } bind def

/coor [
[385.84979248 418.34829712]
[374.28637695 415.64489746]
[364.28686523 409.17538452]
[357.03961182 399.68066406]
[353.41531372 388.26290894]
[353.86239624 376.25741577]
[358.35165405 365.07650757]
[347.65774536 354.55795288]
[336.96380615 344.03942871]
[326.26989746 333.52087402]
[315.57595825 323.00231934]
[304.01025391 326.75735474]
[291.87466431 325.22262573]
[281.48590088 318.62911987]
[274.85357666 308.17941284]
[273.29153442 295.82882690]
[277.15798950 283.91949463]
[266.81768799 273.05310059]
[256.47738647 262.18673706]
[246.13706970 251.32034302]
[235.79676819 240.45396423]
[225.45646667 229.58758545]
[215.11616516 218.72120667]
[207.72212219 222.66712952]
[199.69044495 225.09164429]
[191.33097839 225.89772034]
[182.96690369 225.05079651]
[174.92225647 222.58032227]
[167.50935364 218.57868958]
[161.01666260 213.19776917]
[155.69760132 206.64323425]
[151.76065063 199.16661072]
[149.36111450 191.05569458]
[148.59510803 182.62339783]
[149.49560547 174.19577026]
[152.03112793 166.09928894]
[156.10675049 158.64833069]
[161.56768799 152.13281250]
[153.15696716 139.71269226]
[144.74623108 127.29255676]
[136.33551025 114.87242126]
[127.92478943 102.45228577]
[113.58815002 134.41883850]
[69.29936218 134.22331238]
[54.31781006 133.47955322]
[39.33626175 132.73580933]
[26.52637482 142.39428711]
[11.02472210 138.26168823]
[4.72284555 123.50819397]
[12.45500469 109.45140076]
[28.28974724 106.87449646]
[40.08001709 117.75425720]
[55.06156540 118.49800873]
[70.04311371 119.24176788]
[76.51971436 105.71129608]
[82.99574280 92.18202972]
[73.02037811 80.97970581]
[63.04500961 69.77738953]
[53.06964111 58.57506561]
[43.09427261 47.37274170]
[33.11890411 36.17042160]
[24.47183037 38.54437256]
[15.56653118 37.97437668]
[7.37295771 34.55091476]
[0.77428257 28.67371559]
[-3.52827930 21.00527191]
[-5.08993578 12.39625549]
[-3.76815867 3.79117179]
[0.26480219 -3.87526178]
[-8.75141525 -15.86308193]
[-17.76763153 -27.85090256]
[-26.78384972 -39.83872223]
[-35.80006790 -51.82654190]
[-51.09333038 -57.74668884]
[-53.34525299 -73.99048615]
[-40.23925018 -83.84770203]
[-25.25765419 -77.17808533]
[-23.81224632 -60.84275818]
[-14.79602909 -48.85493851]
[-5.77981234 -36.86711884]
[3.23640490 -24.87929916]
[12.25262260 -12.89147949]
[33.46103668 -11.92366219]
[47.24382401 4.59512901]
[44.32122421 26.19505119]
[54.29659271 37.39737320]
[64.27196503 48.59969711]
[74.24732971 59.80201721]
[84.22270203 71.00434113]
[94.19806671 82.20666504]
[101.49801636 80.48598480]
[98.05688477 65.88603210]
[112.65689087 62.44512177]
[116.09791565 77.04462433]
[123.39786530 75.32394409]
[127.32006836 60.84580994]
[131.24226379 46.36767578]
[135.16445923 31.88954353]
[139.08666992 17.41140938]
[143.00886536 2.93327594]
[136.30499268 -11.64196587]
[143.64898682 -25.90539360]
[159.40715027 -28.91532707]
[171.49118042 -18.36280251]
[170.63124084 -2.34281373]
[157.48699951 6.85547495]
[153.56480408 21.33360863]
[149.64259338 35.81174088]
[145.72039795 50.28987503]
[141.79820251 64.76801300]
[137.87600708 79.24614716]
[140.34492493 94.04156494]
[148.75564575 106.46169281]
[157.16636658 118.88182831]
[165.57710266 131.30195618]
[173.98782349 143.72209167]
[196.13185120 140.31254578]
[216.93925476 148.43606567]
[230.83058167 165.84112549]
[234.11764526 187.79733276]
[225.98254395 208.38090515]
[236.32284546 219.24728394]
[246.66314697 230.11366272]
[257.00344849 240.98004150]
[267.34375000 251.84642029]
[277.68405151 262.71279907]
[288.02435303 273.57919312]
[305.90228271 270.64688110]
[321.82846069 278.94815063]
[329.52786255 294.99987793]
[326.09451294 312.30838013]
[336.78845215 322.82693481]
[347.48236084 333.34548950]
[358.17630005 343.86404419]
[368.87020874 354.38259888]
[386.46185303 348.85015869]
[404.34793091 352.97775269]
[417.61294556 365.54269409]
[422.65618896 383.01574707]
[418.16891479 400.55212402]
[429.37124634 410.52749634]
[440.57357788 420.50286865]
[458.68106079 423.80349731]
[463.55923462 440.65289307]
[474.92495728 450.44168091]
[489.39749146 445.49267578]
[504.30563354 448.43283081]
[515.66497803 458.37426758]
[520.49072266 472.57171631]
[517.58172607 487.18005371]
[528.94744873 496.96884155]
[540.31317139 506.75762939]
[555.85852051 505.76797485]
[567.24554443 515.85711670]
[568.09326172 530.68334961]
[579.45898438 540.47210693]
[594.96478271 543.61523438]
[599.55920410 557.78356934]
[610.92492676 567.57232666]
[622.29064941 577.36114502]
[633.65637207 587.14990234]
[645.02209473 596.93872070]
[660.96936035 602.69366455]
[659.85394287 619.61090088]
[643.28912354 623.22222900]
[635.23327637 608.30444336]
[623.86755371 598.51562500]
[612.50183105 588.72686768]
[601.13610840 578.93804932]
[589.77038574 569.14929199]
[575.07751465 566.70629883]
[569.67016602 551.83782959]
[558.30444336 542.04907227]
[543.51641846 543.40893555]
[531.85052490 533.64361572]
[530.52441406 518.12335205]
[519.15869141 508.33456421]
[507.79293823 498.54577637]
[493.77737427 503.58850098]
[479.02133179 500.92102051]
[467.50561523 491.16119385]
[462.38763428 476.85375977]
[465.13616943 461.80740356]
[453.77044678 452.01861572]
[441.67669678 452.60223389]
[432.12576294 444.52441406]
[430.59820557 431.70520020]
[419.39587402 421.72982788]
[408.19354248 411.75445557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[22 122]
[23 121]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
[44 54]
[45 53]
[46 52]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[140 189]
[141 188]
[142 187]
[144 184]
[145 183]
[150 178]
[151 177]
[152 176]
[155 173]
[156 172]
[158 170]
[159 169]
[160 168]
[161 167]
[162 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
