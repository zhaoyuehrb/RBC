%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCACUCCCAUUGGGCGUCGCGUUUCUAGAGAAGCCAAUCAGUGUCGCCGCAGUUCCCAGGUUCUAAAGUCCCACGCACCCCGCGGGACUCAUAUUUUUCCCAGACGCGGAGGUUGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[142.73658752 151.54786682]
[138.22357178 165.85285950]
[128.94306946 177.63726807]
[116.09461975 185.37789917]
[101.33895111 188.07423401]
[86.58330536 185.37777710]
[73.73492432 177.63702393]
[64.45451355 165.85253906]
[59.94162750 151.54751587]
[60.77956390 136.57093811]
[66.86002350 122.85861206]
[77.39707947 112.18291473]
[91.02841187 105.92382050]
[76.29409790 103.11309814]
[61.55979156 100.30237579]
[46.82548141 97.49166107]
[32.05701828 94.86631012]
[17.25672913 92.42675781]
[2.45643950 89.98719788]
[-12.34385014 87.54763794]
[-27.21865845 92.93750763]
[-38.51810455 83.23329163]
[-53.31839371 80.79373169]
[-68.11868286 78.35417938]
[-83.06069183 77.03640747]
[-98.05950165 76.84791565]
[-113.05831909 76.65943146]
[-128.05712891 76.47093964]
[-143.05595398 76.28244781]
[-157.08752441 84.77050018]
[-171.32174683 76.62686157]
[-171.11567688 60.22900772]
[-156.68128967 52.44564438]
[-142.86746216 61.28363037]
[-127.86864471 61.47212219]
[-112.86982727 61.66061401]
[-97.87100983 61.84910202]
[-82.87220001 62.03759384]
[-91.96234131 50.10573578]
[-90.18296051 35.21164703]
[-78.53778839 25.75701904]
[-63.59581757 27.07515526]
[-53.78573608 38.42250443]
[-54.64136505 53.39807892]
[-65.67913055 63.55389023]
[-50.87883759 65.99344635]
[-36.07854843 68.43300629]
[-22.26235580 62.86864471]
[-9.90429211 72.74735260]
[4.89599705 75.18691254]
[19.69628525 77.62646484]
[34.49657440 80.06602478]
[41.68835068 78.02673340]
[49.63620377 82.75734711]
[64.37051392 85.56806946]
[79.10482025 88.37879181]
[93.83912659 91.18950653]
[108.83912659 91.18950653]
[123.57344055 88.37879181]
[138.30773926 85.56806946]
[153.04205322 82.75734711]
[167.77636719 79.94663239]
[182.51066589 77.13591003]
[194.61657715 66.94976807]
[208.56823730 72.16516113]
[223.30255127 69.35444641]
[238.03686523 66.54372406]
[252.77116394 63.73300552]
[257.18698120 58.99025345]
[262.72134399 56.90502167]
[268.04299927 57.46334457]
[280.50192261 49.11021042]
[292.96087646 40.75707626]
[305.41979980 32.40394211]
[317.87875366 24.05080795]
[330.33767700 15.69767380]
[337.49133301 1.58612478]
[352.37127686 0.92518723]
[364.83020020 -7.42794704]
[369.33352661 -22.82599068]
[384.23397827 -28.77210045]
[398.10119629 -20.70492744]
[400.29748535 -4.81291866]
[389.13800049 6.71293783]
[373.18334961 5.03099155]
[360.72439575 13.38412571]
[354.46191406 26.89820290]
[338.69082642 28.15661240]
[326.23187256 36.50974655]
[313.77294922 44.86288071]
[301.31399536 53.21601486]
[288.85507202 61.56914902]
[276.39611816 69.92228699]
[291.39590454 69.84086609]
[305.72171021 74.28736115]
[318.03924561 82.84764099]
[327.20126343 94.72439575]
[332.35443115 108.81143951]
[333.01879883 123.79672241]
[329.13244629 138.28451538]
[321.05737305 150.92546082]
[309.54571533 160.54217529]
[295.66958618 166.23896790]
[280.72146606 167.48524475]
[266.09353638 164.16494751]
[253.14831543 156.58729553]
[243.09144592 145.45808411]
[236.85963440 131.81387329]
[235.03329468 116.92546844]
[237.78256226 102.17956543]
[244.85133362 88.94958496]
[255.58189392 78.46731567]
[240.84757996 81.27803040]
[226.11326599 84.08875275]
[211.37896729 86.89947510]
[200.32695007 96.88457489]
[185.32139587 91.87021637]
[170.58708191 94.68093872]
[155.85276794 97.49166107]
[141.11846924 100.30237579]
[126.38415527 103.11309814]
[111.64984894 105.92382050]
[125.28147125 112.18311310]
[135.81843567 122.85890198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 57]
[14 56]
[15 55]
[16 54]
[17 52]
[18 51]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[58 122]
[59 121]
[60 120]
[61 119]
[62 118]
[63 117]
[65 115]
[66 114]
[67 113]
[68 112]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
