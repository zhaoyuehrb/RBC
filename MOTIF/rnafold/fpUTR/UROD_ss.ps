%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUCCGAUCAUGUGAUCUUCAACAUGGCGACGCUCUUGGUUCCCUACAGAAAGGGGCGGAGCCUGGACUGGGGGGCAGGCUCAGAUUCAGGUUAAAUUGUGGAUUGAGCUCGCAGUUACAGACAGCUGACC\
) } def
/len { sequence length } bind def

/coor [
[16.88136864 170.78863525]
[4.99893188 179.94329834]
[-6.88350487 189.09794617]
[-18.76594162 198.25259399]
[-30.64837837 207.40725708]
[-37.21203995 224.56547546]
[-54.63382339 226.31130981]
[-66.29838562 235.74200439]
[-71.06214142 243.64793396]
[-78.34873199 245.25318909]
[-90.23117065 254.40785217]
[-102.11360931 263.56250000]
[-113.99604797 272.71716309]
[-125.87848663 281.87179565]
[-137.76092529 291.02645874]
[-137.18983459 306.53302002]
[-145.87026978 319.39495850]
[-160.46441650 324.66662598]
[-175.36053467 320.32092285]
[-184.83076477 308.02886963]
[-185.23361206 292.51702881]
[-176.41415405 279.75000000]
[-161.76367188 274.63699341]
[-146.91557312 279.14401245]
[-135.03314209 269.98937988]
[-123.15070343 260.83471680]
[-111.26826477 251.68006897]
[-99.38582611 242.52540588]
[-87.50338745 233.37075806]
[-75.72908020 224.07743835]
[-64.06451416 214.64674377]
[-62.45526886 202.59869385]
[-52.73279572 194.65168762]
[-39.80303192 195.52481079]
[-27.92059517 186.37016296]
[-16.03815842 177.21551514]
[-4.15572166 168.06085205]
[7.72671509 158.90620422]
[13.08662891 145.00941467]
[28.74076080 142.71623230]
[40.62319946 133.56156921]
[52.50563431 124.40692139]
[53.55977631 109.44400787]
[43.07823563 98.71380615]
[32.59669495 87.98359680]
[22.11515427 77.25339508]
[11.63361263 66.52319336]
[-4.17054129 66.58856964]
[-15.33300686 55.40040970]
[-15.23129177 39.59645081]
[-3.92574167 28.55289650]
[11.87626076 28.82169342]
[22.79966927 40.24337006]
[22.36381721 56.04164886]
[32.84535980 66.77185059]
[43.32690048 77.50205994]
[53.80844116 88.23226166]
[64.28998566 98.96247101]
[69.99935150 84.29893494]
[81.00670624 74.25028229]
[94.53385925 70.36732483]
[107.55914307 72.76097107]
[115.26125336 59.88940048]
[122.96336365 47.01782227]
[130.66548157 34.14624786]
[138.36759949 21.27467155]
[146.06970215 8.40309715]
[153.77182007 -4.46847868]
[161.47393799 -17.34005356]
[169.02462769 -30.30103111]
[176.42288208 -43.34962463]
[183.82113647 -56.39822006]
[191.21939087 -69.44681549]
[198.61764526 -82.49541473]
[192.98544312 -97.08349609]
[198.09684753 -111.86211395]
[211.53840637 -119.85325623]
[226.96343994 -117.28374481]
[237.08871460 -105.36682129]
[237.13337708 -89.72930145]
[227.07633972 -77.75473785]
[211.66624451 -75.09716034]
[204.26799011 -62.04856491]
[196.86973572 -48.99996948]
[189.47148132 -35.95137405]
[182.07322693 -22.90277672]
[181.50544739 -15.46309566]
[174.34550476 -9.63794136]
[166.64338684 3.23363400]
[158.94128418 16.10520935]
[151.23916626 28.97678566]
[143.53704834 41.84836197]
[135.83494568 54.71993637]
[128.13282776 67.59151459]
[120.43071747 80.46308899]
[126.65069580 90.57421112]
[128.17080688 102.34757996]
[142.25277710 107.51458740]
[156.33474731 112.68158722]
[170.41673279 117.84858704]
[184.49870300 123.01559448]
[198.58068848 128.18260193]
[212.66265869 133.34959412]
[226.74464417 138.51660156]
[240.21653748 130.57670593]
[255.63168335 133.20494080]
[265.71148682 145.16033936]
[265.69659424 160.79791260]
[255.59403992 172.73408508]
[240.17393494 175.33296204]
[226.71717834 167.36743164]
[221.57763672 152.59857178]
[207.49566650 147.43157959]
[193.41368103 142.26457214]
[179.33171082 137.09756470]
[165.24972534 131.93057251]
[151.16775513 126.76356506]
[137.08576965 121.59656525]
[123.00379944 116.42955780]
[110.46750641 130.23614502]
[89.98854828 134.29362488]
[95.80992126 148.11793518]
[101.63130188 161.94224548]
[115.01966095 171.41239929]
[113.24322510 187.71504211]
[98.12943268 194.07942200]
[85.22605896 183.95840454]
[87.80699158 167.76362610]
[81.98561096 153.93931580]
[76.16423798 140.11500549]
[61.66028976 136.28935242]
[49.77785110 145.44401550]
[37.89541626 154.59866333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[7 31]
[8 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[40 133]
[41 132]
[42 131]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[62 95]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
