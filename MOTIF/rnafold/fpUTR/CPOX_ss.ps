%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCGCCUGUGCAGCUCGCCGGCUCAAUACUCCGGGGGUCUGGGUGGGGGGCUCAAACGCAGGGCUCUGGGACGCAGGCACUGCUCCAGGUGAUAGUGCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[70.85136414 321.95852661]
[76.89770508 306.11941528]
[76.89770508 291.11941528]
[76.89770508 276.11941528]
[76.89770508 261.11941528]
[76.89770508 246.11940002]
[76.89770508 231.11940002]
[76.89770508 216.11940002]
[76.67955017 201.12098694]
[76.24327850 186.12733459]
[75.80700684 171.13368225]
[75.37073517 156.14002991]
[74.71644592 141.15431213]
[73.84427643 126.17968750]
[65.60163879 113.64736938]
[52.19714737 106.91538239]
[38.79265976 100.18338776]
[25.38817024 93.45140076]
[11.98367977 86.71941376]
[2.75419402 85.62970734]
[-1.70850039 79.59172058]
[-14.91152096 72.47270966]
[-30.73057747 72.73352814]
[-38.26101303 59.88277817]
[-51.46403503 52.76377106]
[-64.66705322 45.64476776]
[-77.87007904 38.52576065]
[-91.07309723 31.40675545]
[-103.73394775 34.35412598]
[-114.62759399 28.02963829]
[-118.11411285 16.34516144]
[-131.10449219 8.84516144]
[-144.09487915 1.34516156]
[-157.08525085 -6.15483856]
[-173.82551575 -8.83812046]
[-175.88127136 -25.66697311]
[-160.27917480 -32.30107117]
[-149.58525085 -19.14521980]
[-136.59487915 -11.64521980]
[-123.60449219 -4.14521933]
[-110.61411285 3.35478044]
[-93.16115570 2.34003925]
[-83.95409393 18.20373535]
[-70.75106812 25.32274055]
[-57.54804993 32.44174576]
[-44.34503174 39.56075287]
[-31.14200974 46.67975616]
[-16.26732063 45.90974045]
[-7.79251575 59.26969147]
[5.41050529 66.38869476]
[18.71566772 73.31492615]
[32.12015533 80.04691315]
[45.52464676 86.77890015]
[58.92913818 93.51088715]
[72.33362579 100.24287415]
[75.07922363 89.79070282]
[81.49646759 81.45904541]
[90.39672089 76.42284393]
[100.26696014 75.28003693]
[109.52522278 77.98761749]
[116.77401733 83.90280914]
[130.36863708 77.56353760]
[143.96325684 71.22426605]
[157.55787659 64.88498688]
[166.79515076 52.04040909]
[181.59989929 53.67400742]
[195.19451904 47.33473206]
[201.77375793 40.77085495]
[209.27796936 41.01522446]
[223.05120850 35.07402802]
[236.82444763 29.13283157]
[244.06008911 14.81413364]
[259.79498291 11.68481445]
[271.95867920 22.14542007]
[271.22021484 38.17146683]
[258.14608765 47.46914673]
[242.76565552 42.90607071]
[228.99241638 48.84726715]
[215.21916199 54.78846359]
[201.53379822 60.92935181]
[187.93917847 67.26862335]
[179.67427063 79.65977478]
[163.89714050 78.47960663]
[150.30252075 84.81887817]
[136.70791626 91.15815735]
[123.11329651 97.49742889]
[123.29024506 105.73057556]
[120.53692627 113.76162720]
[115.02541351 120.55096436]
[107.29439545 125.15828705]
[98.19939423 126.87066650]
[88.81889343 125.30751038]
[89.69107056 140.28213501]
[93.36209869 148.81996155]
[90.36438751 155.70376587]
[90.80065918 170.69741821]
[91.23693085 185.69107056]
[91.67320251 200.68472290]
[95.09436035 209.32569885]
[91.89770508 216.11940002]
[91.89770508 231.11940002]
[91.89770508 246.11940002]
[91.89770508 261.11941528]
[91.89770508 276.11941528]
[91.89770508 291.11941528]
[91.89770508 306.11941528]
[97.94404602 321.95852661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[9 98]
[10 97]
[11 96]
[12 95]
[13 93]
[14 92]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[21 50]
[22 49]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[31 41]
[32 40]
[33 39]
[34 38]
[61 86]
[62 85]
[63 84]
[64 83]
[66 81]
[67 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
