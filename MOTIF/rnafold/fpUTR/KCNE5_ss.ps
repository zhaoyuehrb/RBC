%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGCGCUCGCCGGAGAGCUGGGUGCUACCGCUGUUUCCGCUGCUGAGCCCUGCCCGCCGGCCGGCCCGCUCGCUAGCUCGCUUCCCCUCGCCCAGGGGGAAAGGUCAGCAGCGUCCUGGAGCCGCCGUGUCACUCCCCGAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[69.05869293 602.17370605]
[54.41833115 605.43865967]
[39.47501755 604.13580322]
[25.62055206 598.38659668]
[14.14532948 588.72637939]
[6.11814165 576.05499268]
[2.28663325 561.55261230]
[3.00782084 546.56921387]
[-5.60302067 558.85144043]
[-14.21386242 571.13366699]
[-22.82470322 583.41589355]
[-19.84292793 598.93634033]
[-28.77815056 611.97235107]
[-44.32926559 614.78985596]
[-57.27006912 605.71734619]
[-59.92301178 590.13726807]
[-50.71415329 577.29315186]
[-35.10694504 574.80505371]
[-26.49610138 562.52282715]
[-17.88525963 550.24060059]
[-9.27441883 537.95831299]
[-8.89157200 529.32135010]
[-2.08938479 522.38360596]
[1.66546488 507.86117554]
[5.42031431 493.33871460]
[9.17516422 478.81628418]
[12.93001366 464.29385376]
[8.62498379 450.03497314]
[19.57045174 438.61099243]
[23.32530022 424.08856201]
[27.08015060 409.56613159]
[22.77511978 395.30722046]
[33.72058868 383.88323975]
[37.47543716 369.36080933]
[33.17040634 355.10192871]
[44.11587524 343.67794800]
[47.87072372 329.15551758]
[51.62557220 314.63305664]
[55.38042450 300.11062622]
[59.13527298 285.58819580]
[62.27456665 270.92037964]
[64.79273224 256.13327026]
[67.31089020 241.34614563]
[69.82904816 226.55903625]
[72.34721375 211.77191162]
[74.86537170 196.98480225]
[77.38353729 182.19767761]
[79.90169525 167.41055298]
[82.41985321 152.62344360]
[80.42873383 145.45298767]
[85.15013885 137.55249023]
[87.97949982 122.82175446]
[80.40001678 118.33655548]
[74.51703644 111.32519531]
[71.17036438 102.43624878]
[70.95041656 92.59490967]
[74.10860443 82.90705109]
[80.50449371 74.53498077]
[89.59829712 68.55888367]
[87.70574951 53.67875290]
[78.28911591 40.96507645]
[84.35878754 27.36329842]
[82.46623993 12.48316956]
[80.57368469 -2.39696026]
[71.15705109 -15.11063576]
[77.22672272 -28.71241379]
[75.33417511 -43.59254456]
[73.44162750 -58.47267532]
[60.79374695 -67.94931030]
[58.63407516 -83.60534668]
[68.24390411 -96.15232849]
[83.92189789 -98.14635468]
[96.36656952 -88.40440369]
[98.19473267 -72.70620728]
[88.32175446 -60.36522293]
[90.21430206 -45.48509216]
[92.10684967 -30.60496330]
[101.38812256 -18.95561409]
[95.45381927 -4.28950930]
[97.34636688 10.59062099]
[99.23891449 25.47075081]
[108.52017975 37.12009811]
[102.58588409 51.78620529]
[104.47843170 66.66633606]
[118.52512360 71.92849731]
[129.72854614 61.95436859]
[140.93197632 51.98024368]
[152.13540649 42.00611877]
[163.33883667 32.03199387]
[174.54226685 22.05786896]
[185.74569702 12.08374310]
[186.41122437 -3.70652676]
[198.10360718 -14.33967018]
[213.88595581 -13.50723267]
[224.39489746 -1.70308423]
[223.39564514 14.06958294]
[211.48104858 24.45312691]
[195.71981812 23.28717232]
[184.51638794 33.26129913]
[173.31297302 43.23542404]
[162.10954285 53.20954895]
[150.90611267 63.18367386]
[139.70268250 73.15779877]
[128.49925232 83.13192749]
[126.32064819 113.22302246]
[102.71024323 125.65110779]
[99.88088226 140.38185120]
[97.20697784 155.14160156]
[94.68881226 169.92872620]
[92.17065430 184.71583557]
[89.65248871 199.50296021]
[87.13433075 214.29006958]
[84.61617279 229.07719421]
[82.09800720 243.86430359]
[79.57984924 258.65142822]
[77.06168365 273.43853760]
[78.78553772 277.59228516]
[79.02965546 281.66171265]
[78.01052856 285.18017578]
[76.07712555 287.80340576]
[73.65770721 289.34304810]
[69.90285492 303.86547852]
[66.14801025 318.38790894]
[62.39315796 332.91036987]
[58.63830948 347.43280029]
[62.67476654 362.73040771]
[51.99787140 373.11566162]
[48.24302292 387.63809204]
[52.27947998 402.93572998]
[41.60258484 413.32095337]
[37.84773636 427.84341431]
[34.09288406 442.36584473]
[38.12934494 457.66348267]
[27.45244789 468.04870605]
[23.69759750 482.57113647]
[19.94274902 497.09356689]
[16.18789864 511.61599731]
[12.43305016 526.13842773]
[23.36293602 515.86529541]
[36.88233566 509.36715698]
[51.73206711 507.24926758]
[66.52903748 509.70886230]
[79.89507294 516.51690674]
[90.58527374 527.03924561]
[97.60395813 540.29583740]
[100.29741669 555.05206299]
[98.41477966 569.93341064]
[92.13140106 583.55395508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 21]
[9 20]
[10 19]
[11 18]
[23 138]
[24 137]
[25 136]
[26 135]
[27 134]
[29 132]
[30 131]
[31 130]
[33 128]
[34 127]
[36 125]
[37 124]
[38 123]
[39 122]
[40 121]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[51 107]
[52 106]
[59 84]
[60 83]
[62 81]
[63 80]
[64 79]
[66 77]
[67 76]
[68 75]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
