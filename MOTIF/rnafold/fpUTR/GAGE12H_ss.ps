%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUCUGCCCGGCCCCUUCGCCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[72.40184784 198.62974548]
[58.26239395 203.63732910]
[43.46374512 201.18783569]
[31.69191742 191.89138794]
[25.87901306 178.06350708]
[27.47289848 163.14843750]
[36.07657242 150.86117554]
[49.54446411 144.26274109]
[60.73971558 134.27943420]
[46.12870789 137.67332458]
[34.43704605 148.33238220]
[20.28919411 143.67539978]
[5.67818737 147.06927490]
[-8.93282032 150.46316528]
[-17.84595680 165.44258118]
[-34.49295807 169.32887268]
[-48.55327988 160.20976257]
[-63.06790161 163.99470520]
[-77.58252716 167.77964783]
[-92.09714508 171.56457520]
[-106.61177063 175.34951782]
[-121.12638855 179.13446045]
[-132.41352844 191.03118896]
[-148.29467773 186.94201660]
[-152.43266296 171.07353210]
[-140.57067871 159.74986267]
[-124.91132355 164.61982727]
[-110.39670563 160.83489990]
[-95.88208008 157.04995728]
[-81.36746216 153.26501465]
[-66.85283661 149.48008728]
[-52.33821869 145.69514465]
[-47.39459229 133.71406555]
[-36.26528549 126.69783783]
[-22.93336487 127.42464447]
[-12.32670498 135.85215759]
[2.28430247 132.45826721]
[16.89530945 129.06439209]
[27.54189491 118.64807892]
[42.73482132 123.06231689]
[57.34582901 119.66843414]
[93.94033051 76.32723236]
[97.13774872 61.67197800]
[100.33517456 47.01672363]
[103.33556366 32.31986618]
[106.13836670 17.58404732]
[108.94117737 2.84823227]
[107.46253967 -6.30151939]
[112.02211761 -12.24324417]
[115.21954346 -26.89849854]
[118.21993256 -41.59535980]
[121.02273560 -56.33117294]
[123.82554626 -71.06699371]
[126.62834930 -85.80280304]
[129.43115234 -100.53862000]
[122.93331146 -117.70328522]
[134.75607300 -130.59620667]
[137.16224670 -145.40196228]
[139.56840515 -160.20771790]
[133.25044250 -175.34095764]
[143.41099548 -188.21322632]
[159.59777832 -185.58261108]
[165.15921021 -170.15528870]
[154.37416077 -157.80154419]
[151.96800232 -142.99578857]
[149.56182861 -128.19003296]
[156.40266418 -118.11462402]
[154.42898560 -105.68952942]
[144.16697693 -97.73581696]
[141.36416626 -83.00000000]
[138.56135559 -68.26418304]
[135.75856018 -53.52836990]
[132.95574951 -38.79255295]
[134.82150269 -31.53908348]
[129.87480164 -23.70107460]
[126.67737579 -9.04582119]
[123.67698669 5.65103865]
[120.87418365 20.38685417]
[118.07138062 35.12266922]
[119.93714142 42.37614059]
[114.99043274 50.21414566]
[111.79300690 64.86940002]
[108.59558105 79.52465820]
[114.98300934 65.95259857]
[128.82249451 60.16737366]
[142.96867371 65.15591431]
[150.11784363 78.34262085]
[146.57888794 92.91917419]
[134.17895508 101.35965729]
[119.31838226 99.30524445]
[133.34362793 104.62432098]
[147.36886597 109.94338989]
[163.46003723 106.78013611]
[174.03977966 119.31014252]
[168.22456360 134.64361572]
[151.99658203 137.00679016]
[142.04978943 123.96863556]
[128.02455139 118.64955902]
[113.99930573 113.33049011]
[104.20366669 124.69118500]
[94.40888977 136.05085754]
[101.73381042 149.14076233]
[109.05873871 162.23066711]
[116.38365936 175.32055664]
[123.70858765 188.41046143]
[138.06843567 196.33047485]
[138.11886597 212.72953796]
[123.80798340 220.73771667]
[109.85761261 212.11686707]
[110.61869049 195.73538208]
[103.29376221 182.64549255]
[95.96884155 169.55558777]
[88.64391327 156.46568298]
[81.31898499 143.37579346]
[81.47158051 158.37501526]
[85.65725708 172.77919006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 41]
[10 40]
[12 38]
[13 37]
[14 36]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[42 83]
[43 82]
[44 81]
[45 79]
[46 78]
[47 77]
[49 76]
[50 75]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[57 66]
[58 65]
[59 64]
[90 99]
[91 98]
[92 97]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
