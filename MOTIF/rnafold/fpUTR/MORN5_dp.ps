%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:09 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MORN5)
} def

/sequence { (\
GUCAUAGUGAUGCCGUAUCCACUGAGACUCCGGAUCCUAACAGCUGGAAGCUAAAAACAGGCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 11 0.050588980 ubox
1 28 0.993504949 ubox
1 41 0.009715565 ubox
1 44 0.003701515 ubox
1 58 0.003219068 ubox
1 62 0.030479672 ubox
1 64 0.006335500 ubox
2 10 0.054582922 ubox
2 25 0.006436641 ubox
2 27 0.995776915 ubox
2 40 0.009303153 ubox
2 43 0.003628826 ubox
2 61 0.030447455 ubox
2 63 0.005399771 ubox
3 9 0.055335131 ubox
3 12 0.004222625 ubox
3 24 0.007254479 ubox
3 26 0.996165374 ubox
3 60 0.030241595 ubox
4 8 0.044848618 ubox
4 11 0.004589615 ubox
4 23 0.005147798 ubox
5 10 0.004415980 ubox
5 24 0.986483541 ubox
5 39 0.017503673 ubox
6 23 0.996214407 ubox
6 38 0.018540754 ubox
7 22 0.996998903 ubox
7 37 0.018619975 ubox
7 58 0.006976182 ubox
7 64 0.009431622 ubox
8 21 0.995037940 ubox
8 57 0.006934748 ubox
8 63 0.008768328 ubox
9 14 0.004678969 ubox
9 19 0.582112479 ubox
9 20 0.808535882 ubox
9 36 0.018845038 ubox
10 16 0.045243812 ubox
10 18 0.820122506 ubox
10 35 0.018841223 ubox
11 15 0.042838225 ubox
11 17 0.813073909 ubox
11 21 0.003702837 ubox
11 34 0.018727586 ubox
11 63 0.036171318 ubox
12 16 0.677325474 ubox
12 20 0.005456619 ubox
12 51 0.003546180 ubox
12 62 0.070123448 ubox
12 64 0.015323382 ubox
13 33 0.019015227 ubox
13 50 0.003541635 ubox
13 61 0.070221793 ubox
13 63 0.011073435 ubox
14 32 0.019035780 ubox
14 60 0.070171948 ubox
14 63 0.017639073 ubox
15 22 0.008772535 ubox
15 28 0.006281313 ubox
15 31 0.018703879 ubox
15 41 0.003556580 ubox
15 51 0.025931405 ubox
15 58 0.026640730 ubox
15 62 0.020965174 ubox
16 21 0.008228219 ubox
16 27 0.005975989 ubox
16 40 0.003509098 ubox
16 50 0.025747347 ubox
16 57 0.025955447 ubox
16 61 0.020817928 ubox
17 35 0.009243021 ubox
18 25 0.010512796 ubox
18 27 0.014412615 ubox
18 34 0.011049137 ubox
18 48 0.027490577 ubox
19 24 0.011052498 ubox
19 26 0.014800978 ubox
19 33 0.011366695 ubox
19 47 0.028060471 ubox
20 32 0.011357187 ubox
20 46 0.028060715 ubox
21 45 0.027905788 ubox
22 33 0.005740159 ubox
22 43 0.027903976 ubox
22 50 0.003596544 ubox
22 60 0.006356683 ubox
23 32 0.005779585 ubox
23 42 0.027898886 ubox
23 49 0.003594973 ubox
23 53 0.010708657 ubox
23 59 0.007021452 ubox
24 30 0.006369392 ubox
24 31 0.006082069 ubox
24 41 0.027726374 ubox
24 52 0.007281199 ubox
24 58 0.007108397 ubox
25 29 0.005564935 ubox
25 38 0.016477717 ubox
25 52 0.072024827 ubox
26 36 0.007369771 ubox
26 37 0.017520024 ubox
26 51 0.073485428 ubox
27 35 0.007527195 ubox
28 50 0.031345930 ubox
29 48 0.874083277 ubox
29 49 0.045824572 ubox
30 47 0.918921832 ubox
30 61 0.020225693 ubox
31 46 0.919101552 ubox
31 60 0.020456254 ubox
31 63 0.045439413 ubox
32 38 0.007080517 ubox
32 45 0.917355986 ubox
32 52 0.027347238 ubox
32 62 0.046696669 ubox
32 65 0.325709638 ubox
33 37 0.007513472 ubox
33 44 0.915135365 ubox
33 51 0.028568018 ubox
33 64 0.328009017 ubox
35 48 0.187828015 ubox
35 61 0.005266499 ubox
36 47 0.200577868 ubox
36 60 0.006089003 ubox
36 61 0.327586527 ubox
37 43 0.228976730 ubox
37 46 0.200614128 ubox
37 47 0.014994460 ubox
37 60 0.327837864 ubox
38 42 0.206701196 ubox
38 46 0.015129577 ubox
38 53 0.005951354 ubox
38 59 0.316207529 ubox
39 45 0.018690336 ubox
39 52 0.004997375 ubox
42 52 0.319470753 ubox
43 51 0.331274562 ubox
43 62 0.028499772 ubox
43 64 0.010237629 ubox
44 50 0.331218994 ubox
44 60 0.028298528 ubox
44 61 0.023468925 ubox
44 63 0.010177790 ubox
45 49 0.298390111 ubox
45 53 0.025537350 ubox
45 59 0.032976338 ubox
45 60 0.016631140 ubox
46 52 0.027287037 ubox
46 58 0.034493197 ubox
46 65 0.026818484 ubox
47 51 0.026841597 ubox
47 64 0.027279804 ubox
50 62 0.880133793 ubox
50 64 0.144721331 ubox
51 60 0.097561223 ubox
51 61 0.879327156 ubox
51 63 0.144812954 ubox
52 59 0.108809974 ubox
52 60 0.861073186 ubox
1 28 0.9500000 lbox
2 27 0.9500000 lbox
3 26 0.9500000 lbox
5 24 0.9500000 lbox
6 23 0.9500000 lbox
7 22 0.9500000 lbox
8 21 0.9500000 lbox
9 20 0.9500000 lbox
29 48 0.9500000 lbox
30 47 0.9500000 lbox
31 46 0.9500000 lbox
32 45 0.9500000 lbox
33 44 0.9500000 lbox
50 62 0.9500000 lbox
51 61 0.9500000 lbox
52 60 0.9500000 lbox
showpage
end
%%EOF
