%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGCCAAUCAGUGUCGUCGCGGUCGCUGUUCUAAAGCCCGCACGCACCCACCGGGACUCAGAUUCUCCCCAGACGCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[179.22732544 188.77519226]
[168.33082581 178.46664429]
[157.43432617 168.15809631]
[144.58769226 170.30393982]
[132.70692444 164.50447083]
[126.30908966 152.71139526]
[127.97287750 139.20062256]
[117.46472931 128.49647522]
[103.39237976 133.24992371]
[88.65001678 131.43635559]
[76.14933777 123.41392517]
[68.35928345 110.76713562]
[66.81843567 95.99377441]
[71.83111572 82.01166534]
[61.32297134 71.30751801]
[50.81482697 60.60336304]
[42.35741043 56.54169464]
[40.12529373 49.30414963]
[30.01985931 38.21901321]
[19.91442490 27.13388062]
[11.61287022 22.76247215]
[9.64971638 15.44738960]
[-0.03920441 3.99641490]
[-9.72812557 -7.45455933]
[-19.41704559 -18.90553284]
[-25.86380386 -21.65017700]
[-29.26658249 -26.58122063]
[-29.36050034 -31.57884979]
[-38.17728043 -43.71410370]
[-46.99405670 -55.84936142]
[-62.60512543 -56.75961685]
[-73.94325256 -67.52906036]
[-75.65492249 -83.07268524]
[-66.93193817 -96.05126190]
[-51.89302444 -100.33671570]
[-37.63909912 -93.90557098]
[-30.90042496 -79.79443359]
[-34.85880280 -64.66613770]
[-26.04202461 -52.53088379]
[-17.22524452 -40.39562988]
[-7.96607208 -28.59445381]
[1.72284889 -17.14348030]
[11.41176987 -5.69250584]
[21.10069084 5.75846815]
[30.99955940 17.02844620]
[41.10499191 28.11358070]
[51.21042633 39.19871521]
[61.51897812 50.09521866]
[72.02712250 60.79936981]
[82.53527069 71.50352478]
[96.60762024 66.75006866]
[111.34998322 68.56365204]
[123.85066223 76.58607483]
[131.64071655 89.23286438]
[133.18156433 104.00622559]
[128.16888428 117.98833466]
[138.67703247 128.69248962]
[156.05258179 128.46772766]
[168.06517029 140.55671692]
[167.74287415 157.26158142]
[178.63937378 167.57012939]
[189.53587341 177.87869263]
[200.19921875 174.83750916]
[211.06074524 176.61753845]
[220.06028748 182.81022644]
[225.52105713 192.17686462]
[226.46200562 202.89578247]
[222.77334595 212.91647339]
[232.46228027 224.36744690]
[242.15119934 235.81842041]
[257.25122070 233.01036072]
[271.72686768 238.14364624]
[281.68432617 249.83743286]
[284.44503784 264.94616699]
[279.26638794 279.40567017]
[267.54144287 289.32641602]
[252.42413330 292.03976440]
[237.98092651 286.81582642]
[228.09698486 275.05984497]
[225.43104553 259.93408203]
[230.70022583 245.50733948]
[221.01130676 234.05636597]
[211.32237244 222.60539246]
[192.05691528 222.68345642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[7 57]
[8 56]
[14 50]
[15 49]
[16 48]
[18 47]
[19 46]
[20 45]
[22 44]
[23 43]
[24 42]
[25 41]
[28 40]
[29 39]
[30 38]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
