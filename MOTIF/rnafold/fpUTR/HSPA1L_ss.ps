%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGGAAAAAGAUUACUGAGUUGGAGCCGUCUCAAAUUUGCAGGGAGGGACGGGGUGGGGGGUGGGGGGACCCCGGUUGUGCAGUUUGAUAUUGAGGGAGCCCCCACCUACUCGCUGGGGCUGCGUAAUCUGGACGUUUCCAAACUGAAGCGAAGGCGUCGGGAGACUAGGCCUCAGAGAACC\
) } def
/len { sequence length } bind def

/coor [
[188.70698547 226.85997009]
[185.26426697 241.45954895]
[179.39218140 255.26240540]
[171.26133728 267.86752319]
[161.10794067 278.90875244]
[149.22695923 288.06530762]
[135.96354675 295.07113647]
[121.70303345 299.72277832]
[106.85970306 301.88507080]
[91.86476898 301.49517822]
[77.15386200 298.56445312]
[63.15435028 293.17803955]
[50.27293777 285.49237061]
[38.88384628 275.73080444]
[29.31794739 264.17684937]
[21.85314178 251.16621399]
[16.70629311 237.07685852]
[14.02692413 222.31809998]
[13.89287281 207.31869507]
[16.30803490 192.51440430]
[21.20224571 178.33531189]
[28.43332291 165.19334412]
[37.79119492 153.47027588]
[49.00399780 143.50668335]
[61.73851395 135.59584045]
[73.16378784 125.87663269]
[84.58906555 116.15742493]
[69.90280151 119.20925903]
[55.21654129 122.26110077]
[40.53028107 125.31294250]
[25.84402084 128.36477661]
[11.15775871 131.41662598]
[-3.52850246 134.46846008]
[-6.72131205 149.35893250]
[-15.69983006 161.65957642]
[-28.90847397 169.23925781]
[-44.05876541 170.78475952]
[-58.52582550 166.02827454]
[-69.80315399 155.79393005]
[-75.93687439 141.85487366]
[-75.86428833 126.62612915]
[-69.59797668 112.74617767]
[-58.22360611 102.61978912]
[-43.71186447 98.00143433]
[-28.57699203 99.69126892]
[-15.44120026 107.39652252]
[-6.58034277 119.78220367]
[8.10591888 116.73036194]
[22.79218102 113.67852020]
[37.47844315 110.62667847]
[52.16470337 107.57484436]
[66.85096741 104.52300262]
[81.53722382 101.47116089]
[89.54866028 88.78980255]
[85.99719238 74.21629333]
[82.44573212 59.64278793]
[78.89426422 45.06928253]
[75.34279633 30.49577522]
[71.79132843 15.92226887]
[68.11558533 1.37961197]
[64.31581879 -13.13113594]
[60.51605606 -27.64188385]
[56.71629333 -42.15262985]
[52.91653061 -56.66337967]
[49.11676788 -71.17412567]
[45.31700516 -85.68487549]
[41.51724243 -100.19562531]
[37.71747971 -114.70636749]
[24.35805702 -122.71659088]
[20.71126747 -137.48667908]
[28.43011475 -150.17347717]
[24.63035202 -164.68423462]
[20.83058929 -179.19497681]
[16.90708923 -193.67276001]
[12.86013699 -208.11651611]
[8.81318569 -222.56027222]
[4.76623440 -237.00404358]
[-0.57463878 -244.44445801]
[0.77574563 -251.72900391]
[-3.02401710 -266.23974609]
[-17.52700233 -271.75726318]
[-25.98884583 -284.76406860]
[-25.15579605 -300.25875854]
[-15.34817696 -312.28335571]
[-0.33721900 -316.21408081]
[14.10505867 -310.53955078]
[22.42530441 -297.44174194]
[21.42421532 -281.95697021]
[11.48673058 -270.03952026]
[15.28649330 -255.52876282]
[19.20999336 -241.05099487]
[23.25694466 -226.60722351]
[27.30389595 -212.16346741]
[31.35084915 -197.71971130]
[36.19457245 -192.11376953]
[35.34133530 -182.99473572]
[39.14109802 -168.48399353]
[42.94086075 -153.97325134]
[55.88700867 -146.69773865]
[59.94721985 -132.03591919]
[52.22822571 -118.50613403]
[56.02798843 -103.99538422]
[59.82775116 -89.48463440]
[63.62751389 -74.97389221]
[67.42727661 -60.46314240]
[71.22704315 -45.95239258]
[75.02680206 -31.44164658]
[78.82656860 -16.93089867]
[82.62632751 -2.42015076]
[87.37363434 3.26766348]
[86.36483765 12.37080288]
[89.91630554 26.94430923]
[93.46776581 41.51781464]
[97.01923370 56.09132004]
[100.57070160 70.66482544]
[104.12216949 85.23833466]
[114.54613495 96.02447510]
[128.98989868 100.07142639]
[143.43365479 104.11837769]
[157.87741089 108.16532898]
[172.32116699 112.21228027]
[186.76493835 116.25923157]
[200.42453003 108.77236176]
[215.01490784 113.08230591]
[222.06831360 126.15077972]
[236.51206970 130.19772339]
[248.13223267 124.56414032]
[260.08993530 128.24917603]
[266.12274170 138.75125122]
[280.49530029 143.04421997]
[294.86785889 147.33717346]
[310.30517578 143.87309265]
[320.28567505 154.92926025]
[334.65823364 159.22221375]
[349.03079224 163.51518250]
[363.40335083 167.80813599]
[377.77590942 172.10110474]
[392.18460083 176.27120972]
[406.62835693 180.31816101]
[421.07211304 184.36511230]
[431.53109741 173.19065857]
[445.98889160 168.16763306]
[461.12322998 170.45031738]
[473.45632935 179.51414490]
[480.15414429 193.27633667]
[479.67758179 208.57441711]
[472.13613892 221.89302063]
[459.26275635 230.17161560]
[444.01571655 231.50785828]
[429.89859009 225.59466553]
[420.15545654 213.79086304]
[417.02517700 198.80886841]
[402.58142090 194.76191711]
[388.13766479 190.71496582]
[380.83111572 191.94078064]
[373.48297119 186.47366333]
[359.11041260 182.18069458]
[344.73785400 177.88774109]
[330.36529541 173.59478760]
[315.99273682 169.30181885]
[301.58343506 173.07296753]
[290.57489014 161.70973206]
[276.20233154 157.41677856]
[261.82977295 153.12380981]
[245.01278687 158.10371399]
[232.46511841 144.64149475]
[218.02136230 140.59454346]
[205.20462036 148.09565735]
[190.49894714 144.19723511]
[182.71798706 130.70298767]
[168.27421570 126.65604401]
[153.83045959 122.60909271]
[139.38670349 118.56214142]
[124.94294739 114.51519012]
[110.49918365 110.46823883]
[121.23456573 120.94448090]
[131.96994019 131.42071533]
[145.55929565 137.77127075]
[157.87277222 146.33740234]
[168.55264282 156.87020874]
[177.28865051 169.06373596]
[183.82701111 182.56373596]
[187.97776794 196.97801208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
[59 111]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[68 101]
[71 98]
[72 97]
[73 96]
[74 94]
[75 93]
[76 92]
[77 91]
[79 90]
[80 89]
[117 175]
[118 174]
[119 173]
[120 172]
[121 171]
[122 170]
[125 167]
[126 166]
[129 164]
[130 163]
[131 162]
[133 160]
[134 159]
[135 158]
[136 157]
[137 156]
[138 154]
[139 153]
[140 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
