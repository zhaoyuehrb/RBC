%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCACUCCUAGGGCUGCUCGCGCUAGUUAAGGUCUGGGGCUUUCUUGCUCCGAGAGGGACCAGUUACUUCCGCCGUAGCUGCUGUUGCUCUGUCGACUGCGCUGUGACCUGCACUGUUCACGGGACCUUUAGAGAGGACGCCAGAAUACCUGGAAGCCAGGAA\
) } def
/len { sequence length } bind def

/coor [
[91.10556030 613.80230713]
[97.15190125 597.96319580]
[97.15190125 582.96319580]
[97.15190125 567.96319580]
[97.15190125 552.96319580]
[86.47103119 542.64550781]
[86.25734711 527.43341064]
[97.15190125 516.30023193]
[97.15190125 501.30026245]
[89.41460419 488.57299805]
[97.15190125 474.77282715]
[97.15190125 459.77282715]
[97.15190125 444.77282715]
[97.15190125 429.77282715]
[97.15190125 414.77282715]
[84.18457794 407.44381714]
[76.57618713 394.52218628]
[76.45634460 379.42742920]
[83.95738983 366.21261597]
[97.15190125 358.47619629]
[97.15190125 343.47619629]
[89.41460419 330.74893188]
[97.15190125 316.94876099]
[97.15190125 301.94876099]
[97.15190125 286.94876099]
[97.01081085 271.94943237]
[96.72865295 256.95208740]
[85.85558319 246.83714294]
[85.35578918 231.63171387]
[96.03899384 220.29562378]
[95.75682831 205.29827881]
[95.19260406 190.30889893]
[94.34651947 175.33277893]
[93.50042725 160.35665894]
[92.65434265 145.38053894]
[91.80825043 130.40441895]
[90.96216583 115.42830658]
[81.02345276 104.19345093]
[66.26235199 101.52699280]
[51.50125504 98.86054230]
[36.74015808 96.19409180]
[21.97905922 93.52763367]
[7.21796036 90.86118317]
[-5.62140703 100.07672119]
[-21.20281792 97.43188477]
[-30.28209877 84.49580383]
[-27.47267151 68.94322205]
[-14.44132042 60.00122070]
[1.08068454 62.97492218]
[9.88441372 76.10008240]
[24.64551163 78.76654053]
[39.40661240 81.43299103]
[54.16770935 84.09944153]
[68.92881012 86.76589966]
[83.68990326 89.43235016]
[93.52250671 78.10450745]
[88.80681610 63.86505127]
[84.09112549 49.62558746]
[79.37543488 35.38612747]
[67.69194794 24.71810722]
[71.03575134 10.20369244]
[66.32006073 -4.03576851]
[61.60437012 -18.27523041]
[56.62165451 -32.42346573]
[51.37368393 -46.47546768]
[46.12571335 -60.52747345]
[40.87774277 -74.57947540]
[35.62977219 -88.63147736]
[30.38180161 -102.68347931]
[25.13383102 -116.73548889]
[10.33563423 -121.78993225]
[2.29278111 -135.20062256]
[4.80286121 -150.63543701]
[16.68069077 -160.80653381]
[32.31792068 -160.91142273]
[44.33113480 -150.90058899]
[47.04805374 -135.50083923]
[39.18583298 -121.98345947]
[44.43380356 -107.93144989]
[49.68177414 -93.87944794]
[54.92974854 -79.82744598]
[60.17771912 -65.77544403]
[65.42568970 -51.72343826]
[70.67366028 -37.67143631]
[74.60798645 -34.89575195]
[76.81607819 -29.60062027]
[75.84383392 -22.99092102]
[80.55952454 -8.75146008]
[85.27521515 5.48800182]
[96.62140656 15.13751984]
[93.61489105 30.67043686]
[98.33058929 44.90989685]
[103.04627991 59.14935684]
[107.76197052 73.38881683]
[114.54094696 76.59747314]
[117.22930145 61.84035110]
[114.44348145 47.10131454]
[122.23818970 34.28559875]
[136.60705566 29.98030090]
[150.16470337 36.39827728]
[155.94267273 50.24078369]
[150.97119141 64.39296722]
[137.80755615 71.58054352]
[128.09889221 83.01478577]
[134.87786865 86.22344208]
[148.87989807 80.84353638]
[162.88191223 75.46362305]
[176.88394165 70.08371735]
[190.88595581 64.70380402]
[204.88796997 59.32389450]
[207.20658875 44.14102554]
[216.81852722 32.16161728]
[231.13822937 26.60807419]
[246.31376648 28.97427177]
[258.26296997 38.62371445]
[263.77160645 52.96074677]
[261.35784912 68.12878418]
[251.67100525 80.04769897]
[237.31677246 85.51136017]
[222.15637207 83.05007935]
[210.26788330 73.32591248]
[196.26586914 78.70582581]
[182.26383972 84.08573151]
[168.26182556 89.46564484]
[154.25981140 94.84555054]
[140.25778198 100.22546387]
[105.93828583 114.58221436]
[106.78437042 129.55833435]
[107.63046265 144.53445435]
[108.47654724 159.51057434]
[109.32263184 174.48669434]
[110.16872406 189.46281433]
[113.50153351 195.25296021]
[113.39345551 200.98901367]
[110.75417328 205.01612854]
[111.03633881 220.01347351]
[122.13838959 230.93968201]
[122.21089935 246.15315247]
[111.72599792 256.66992188]
[112.00816345 271.66726685]
[115.31002808 280.23110962]
[112.15190125 286.94876099]
[112.15190125 301.94876099]
[112.15190125 316.94876099]
[119.88919830 330.74893188]
[112.15190125 343.47619629]
[112.15190125 358.47619629]
[125.34641266 366.21261597]
[132.84745789 379.42742920]
[132.72761536 394.52218628]
[125.11922455 407.44381714]
[112.15190125 414.77282715]
[112.15190125 429.77282715]
[112.15190125 444.77282715]
[112.15190125 459.77282715]
[112.15190125 474.77282715]
[119.88919830 488.57299805]
[112.15190125 501.30026245]
[112.15190125 516.30023193]
[123.04645538 527.43341064]
[122.83277130 542.64550781]
[112.15190125 552.96319580]
[112.15190125 567.96319580]
[112.15190125 582.96319580]
[112.15190125 597.96319580]
[118.19824219 613.80230713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 165]
[3 164]
[4 163]
[5 162]
[8 159]
[9 158]
[11 156]
[12 155]
[13 154]
[14 153]
[15 152]
[20 147]
[21 146]
[23 144]
[24 143]
[25 142]
[26 140]
[27 139]
[30 136]
[31 135]
[32 132]
[33 131]
[34 130]
[35 129]
[36 128]
[37 127]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[56 94]
[57 93]
[58 92]
[59 91]
[61 89]
[62 88]
[63 87]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
