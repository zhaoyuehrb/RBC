%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACUGGCCCGCGCCGUCCGCCCGCCGACAGCUCCCUGAGCCAGCCCGGGAGGCAGCCGCGCGCAGCGAGCCGGUGGCGCAGGUGUCGGGGUCCUCGAGCGCCCAGCCUGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[100.13941956 443.40429688]
[102.46911621 428.35464478]
[110.72410583 415.55715942]
[123.47415924 407.22915649]
[121.04743195 392.42675781]
[118.62069702 377.62435913]
[116.19396973 362.82196045]
[113.42469788 360.43997192]
[111.73670197 356.54034424]
[111.85723114 351.67819214]
[114.22229004 346.72387695]
[113.00490570 331.77334595]
[111.78752899 316.82281494]
[110.57014465 301.87231445]
[109.15043640 286.93963623]
[107.52864838 272.02758789]
[94.53259277 264.79983521]
[88.20974731 251.14384460]
[91.17510223 236.20864868]
[102.49703217 225.76260376]
[100.87524414 210.85052490]
[99.25345612 195.93846130]
[97.63167572 181.02639771]
[94.43132782 177.31861877]
[93.61545563 171.52374268]
[96.34835815 165.26617432]
[95.53627777 150.28817749]
[94.72418976 135.31016541]
[93.91210938 120.33216858]
[93.10002899 105.35416412]
[90.87014008 103.06253815]
[89.47485352 99.86716461]
[89.26599121 96.09529877]
[90.46167755 92.20504761]
[93.10002899 88.72999573]
[93.91210938 73.75199890]
[94.72418976 58.77399826]
[95.53627777 43.79599380]
[88.55744934 29.59717369]
[96.97244263 17.30745506]
[97.78453064 2.32945466]
[98.59661102 -12.64854622]
[99.40869141 -27.62654686]
[96.67578888 -33.88411331]
[97.49166107 -39.67899323]
[100.69200897 -43.38676834]
[102.31378937 -58.29883575]
[103.93557739 -73.21090698]
[105.55736542 -88.12297821]
[94.23543549 -98.56903076]
[91.27008057 -113.50422668]
[97.59292603 -127.16020203]
[110.58898163 -134.38795471]
[112.21076965 -149.30001831]
[106.01088715 -163.85585022]
[115.07888794 -175.67196655]
[116.70067596 -190.58403015]
[107.81069183 -203.93872070]
[112.84600067 -219.17109680]
[127.94394684 -224.59617615]
[141.52267456 -216.05232239]
[143.16575623 -200.09362793]
[131.61274719 -188.96224976]
[129.99095154 -174.05018616]
[136.30683899 -160.56095886]
[127.12284088 -147.67823792]
[125.50105286 -132.76617432]
[136.63951111 -122.91362762]
[139.87890625 -108.21769714]
[133.77226257 -94.26914215]
[120.46942902 -86.50119019]
[118.84764862 -71.58911896]
[117.22586060 -56.67705154]
[115.60408020 -41.76498032]
[114.38669586 -26.81446457]
[113.57461548 -11.83646297]
[112.76252747 3.14153838]
[111.95044708 18.11953926]
[118.98735809 31.24703407]
[110.51427460 44.60807800]
[109.70219421 59.58607864]
[108.89011383 74.56407928]
[108.07802582 89.54208374]
[108.07802582 104.54208374]
[108.89011383 119.52008057]
[109.70219421 134.49809265]
[110.51427460 149.47608948]
[111.32636261 164.45408630]
[112.54373932 179.40460205]
[114.16552734 194.31668091]
[115.78731537 209.22874451]
[117.40909576 224.14080811]
[130.71191406 231.90876770]
[136.81857300 245.85731506]
[133.57917786 260.55325317]
[122.44071960 270.40579224]
[124.06250000 285.31787109]
[128.14909363 293.63964844]
[125.52066803 300.65493774]
[126.73804474 315.60543823]
[127.95542908 330.55596924]
[129.17280579 345.50646973]
[130.99636841 360.39523315]
[133.42309570 375.19763184]
[135.84982300 390.00003052]
[138.27656555 404.80242920]
[153.01834106 408.62338257]
[164.92745972 418.11511230]
[171.94058228 431.63308716]
[172.84265137 446.83526611]
[167.47737122 461.08776855]
[156.77430725 471.92126465]
[142.58784485 477.45877075]
[127.37585449 476.74087524]
[113.77391815 469.89199829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 106]
[5 105]
[6 104]
[7 103]
[11 102]
[12 101]
[13 100]
[14 99]
[15 97]
[16 96]
[20 92]
[21 91]
[22 90]
[23 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[35 83]
[36 82]
[37 81]
[38 80]
[40 78]
[41 77]
[42 76]
[43 75]
[46 74]
[47 73]
[48 72]
[49 71]
[53 67]
[54 66]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
