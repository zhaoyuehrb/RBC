%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGACUCUGAGAGAACGCCCGGCCAGGGUGAACGCCGCGGCAGGAGAGCACGGGAGAUUGUGAAGAGCAUGGGGAGCCUUUGUCGUGCAGCGUGAAACCCUUGAGCCUUUGGCCUAGGAGCUGGGAGACUCAGGGCCCUUCUCACACUCAGAAUUGGAGCAGGGCCUUCUAGACAGUCCCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[85.16515350 126.19545746]
[82.68328857 140.98870850]
[80.20143127 155.78196716]
[83.54372406 172.40319824]
[68.49729919 180.21609497]
[56.82447052 167.92051697]
[65.40817261 153.30009460]
[67.89003754 138.50685120]
[70.37189484 123.71359253]
[65.73453522 137.97875977]
[54.37186813 147.77108765]
[39.57836151 150.25144958]
[25.64319420 144.70068359]
[16.60667992 132.72814941]
[15.08883762 117.80514526]
[21.52974510 104.25838470]
[34.06194687 96.01557922]
[49.05189896 95.46661377]
[62.15172577 102.76893616]
[50.27042389 93.61280823]
[38.38912201 84.45668030]
[18.31905174 82.70851135]
[11.69962025 64.55233765]
[-0.47944969 55.79618073]
[-12.65851974 47.04002762]
[-24.90994072 38.38539505]
[-37.23286819 29.83288193]
[-49.62644958 21.38308144]
[-62.08982849 13.03657532]
[-74.55320740 4.69006968]
[-87.01658630 -3.65643644]
[-104.10238647 0.05548832]
[-118.31212616 -9.54121685]
[-121.13699341 -26.11143303]
[-133.73738098 -34.24962616]
[-146.33776855 -42.38782120]
[-158.93815613 -50.52601624]
[-171.67207336 -58.45364761]
[-184.53599548 -66.16853333]
[-197.39991760 -73.88341522]
[-210.26385498 -81.59829712]
[-223.12777710 -89.31317902]
[-235.99169922 -97.02806091]
[-248.85562134 -104.74294281]
[-261.71954346 -112.45782471]
[-274.58346558 -120.17270660]
[-276.48764038 -112.53300476]
[-281.67684937 -105.27575684]
[-289.98989868 -99.56982422]
[-300.88970947 -96.50526428]
[-313.49801636 -96.98031616]
[-327.63555908 -101.99329376]
[-341.77310181 -107.00627136]
[-355.91064453 -112.01924896]
[-370.04818726 -117.03222656]
[-386.06680298 -113.51998138]
[-396.91638184 -125.81707001]
[-391.43582153 -141.27331543]
[-375.26303101 -143.98864746]
[-365.03518677 -131.16976929]
[-350.89767456 -126.15679169]
[-336.76013184 -121.14381409]
[-322.62258911 -116.13083649]
[-308.48504639 -111.11785126]
[-303.90698242 -117.05850220]
[-315.78826904 -126.21463013]
[-327.66958618 -135.37075806]
[-339.55072021 -144.52708435]
[-330.39419556 -156.40808105]
[-318.51345825 -147.25205994]
[-306.63214111 -138.09593201]
[-294.75085449 -128.93980408]
[-290.17279053 -134.88046265]
[-298.62258911 -147.27403259]
[-313.62442017 -153.89799500]
[-315.11959839 -170.22883606]
[-301.56997681 -179.46679688]
[-286.91427612 -172.10865784]
[-286.22900391 -155.72384644]
[-277.77920532 -143.33026123]
[-266.86859131 -133.03663635]
[-254.00466919 -125.32175446]
[-241.14074707 -117.60686493]
[-228.27682495 -109.89198303]
[-215.41288757 -102.17710114]
[-202.54896545 -94.46221924]
[-189.68504333 -86.74733734]
[-176.82112122 -79.03245544]
[-163.95718384 -71.31757355]
[-159.17201233 -71.59293365]
[-154.16633606 -68.85218048]
[-150.79995728 -63.12640381]
[-138.19956970 -54.98820877]
[-125.59918213 -46.85001373]
[-112.99879456 -38.71182251]
[-100.89376068 -43.15938950]
[-88.25014496 -39.76649475]
[-79.74874878 -29.55694962]
[-78.67008209 -16.11981583]
[-66.20670319 -7.77331018]
[-53.74332428 0.57319587]
[-41.27994537 8.91970158]
[-33.95893860 10.03139496]
[-28.68035698 17.50995445]
[-16.35742950 26.06246758]
[-9.05591202 27.29569244]
[-3.90236473 34.86095810]
[8.27670574 43.61711121]
[20.45577621 52.37326813]
[30.37415123 49.82142258]
[40.26400757 53.23132324]
[46.77008057 61.70214844]
[47.54524994 72.57537842]
[59.42655182 81.73150635]
[71.30785370 90.88763428]
[85.41716003 75.60287476]
[104.93975830 73.71817017]
[119.79052734 84.62533569]
[123.33169556 101.49658203]
[137.20178223 107.20802307]
[152.90850830 105.30815125]
[161.73098755 117.30869293]
[175.60107422 123.02014160]
[189.47117615 128.73158264]
[203.34126282 134.44302368]
[217.21134949 140.15447998]
[231.08143616 145.86592102]
[244.95152283 151.57736206]
[258.13793945 143.61337280]
[273.30801392 144.92567444]
[284.66220093 154.80221558]
[287.98376465 169.29722595]
[301.85385132 175.00868225]
[315.86199951 180.37255859]
[329.99954224 185.38552856]
[344.13708496 190.39851379]
[358.27462769 195.41148376]
[372.41217041 200.42446899]
[386.54971313 205.43743896]
[400.68725586 210.45042419]
[414.82479858 215.46340942]
[430.41729736 212.78297424]
[439.82696533 224.32884216]
[453.96450806 229.34181213]
[468.10205078 234.35479736]
[477.25552368 234.27511597]
[482.43173218 239.57037354]
[496.48400879 244.81764221]
[509.34506226 236.13587952]
[524.85168457 236.70535278]
[537.04125977 246.30711365]
[541.22668457 261.24908447]
[535.79852295 275.78573608]
[522.84405518 284.32748413]
[507.34451294 283.58981323]
[495.25979614 273.85638428]
[491.23672485 258.86990356]
[477.18447876 253.62263489]
[463.08908081 248.49234009]
[448.95153809 243.47935486]
[434.81399536 238.46636963]
[420.23272705 241.50537109]
[409.81182861 229.60093689]
[395.67428589 224.58796692]
[381.53674316 219.57498169]
[367.39920044 214.56201172]
[353.26165771 209.54902649]
[339.12411499 204.53605652]
[324.98657227 199.52307129]
[310.84902954 194.51010132]
[307.51171875 195.70211792]
[303.42861938 195.32527161]
[299.34878540 193.04559326]
[296.14239502 188.87876892]
[282.27230835 183.16732788]
[269.70703125 191.12043762]
[254.69041443 190.13796997]
[242.99499512 180.38755798]
[239.24008179 165.44744873]
[225.36999512 159.73600769]
[211.49990845 154.02456665]
[197.62982178 148.31312561]
[183.75971985 142.60166931]
[169.88963318 136.89022827]
[156.01954651 131.17878723]
[141.30490112 133.48718262]
[131.49034119 121.07811737]
[117.62025452 115.36666870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[19 115]
[20 114]
[21 113]
[23 109]
[24 108]
[25 107]
[26 105]
[27 104]
[28 102]
[29 101]
[30 100]
[31 99]
[34 95]
[35 94]
[36 93]
[37 92]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[73 80]
[74 79]
[119 188]
[120 187]
[122 185]
[123 184]
[124 183]
[125 182]
[126 181]
[127 180]
[128 179]
[132 175]
[133 174]
[134 170]
[135 169]
[136 168]
[137 167]
[138 166]
[139 165]
[140 164]
[141 163]
[143 161]
[144 160]
[145 159]
[147 158]
[148 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
