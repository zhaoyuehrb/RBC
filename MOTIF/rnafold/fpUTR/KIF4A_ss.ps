%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGUCCGCACUGCAAUUGGUUGGCGUCUCCGGGACGGAUUUGAAACUUGGCGGUUAAAGCUCCGGCUGGGACAGGGCGGCGGGAGGCCCAGGGAGAACGGGGAAGGGACAUUUAGUUUGAGACGGUGCUGAGAUAGGAUC\
) } def
/len { sequence length } bind def

/coor [
[7.85776377 347.19387817]
[-3.45889497 359.26568604]
[-19.57300949 362.21084595]
[-25.61421013 375.94052124]
[-31.65541077 389.67019653]
[-37.69660950 403.39987183]
[-43.73781204 417.12954712]
[-41.41559219 433.36343384]
[-54.47879791 443.27731323]
[-69.48912811 436.67260742]
[-71.00523376 420.34368896]
[-57.46748352 411.08834839]
[-51.42628479 397.35867310]
[-45.38508224 383.62899780]
[-39.34388351 369.89932251]
[-33.30268097 356.16964722]
[-41.08680344 345.27166748]
[-42.46141815 331.84082031]
[-36.95862579 319.39343262]
[-25.92527008 311.24185181]
[-12.19503975 309.61328125]
[-5.85576534 296.01864624]
[0.48350847 282.42404175]
[6.82278252 268.82943726]
[0.75364184 257.41329956]
[2.41610146 244.39485168]
[11.42308140 234.58280945]
[24.63330650 231.73219299]
[31.26763725 218.27909851]
[37.90196609 204.82600403]
[44.53629684 191.37292480]
[51.17062759 177.91983032]
[51.30906677 170.47328186]
[58.09923935 164.24800110]
[65.02546692 150.94284058]
[64.03919983 136.08093262]
[77.27448273 127.41271210]
[84.20070648 114.10755157]
[78.96868134 102.51479340]
[81.31990051 90.01528168]
[90.40660095 81.11595154]
[102.95238495 79.02563477]
[110.16721344 65.87473297]
[117.38204956 52.72383118]
[117.23627472 36.90329742]
[130.14144897 29.46651077]
[137.35627747 16.31560898]
[144.57112122 3.16470766]
[151.78594971 -9.98619366]
[159.00077820 -23.13709450]
[151.11582947 -34.74060822]
[149.02592468 -48.54604340]
[153.08442688 -61.83659363]
[162.44038391 -72.02175903]
[175.21623230 -77.14223480]
[188.88439941 -76.24669647]
[196.38439941 -89.23707581]
[203.88439941 -102.22746277]
[196.32582092 -115.52465057]
[196.43713379 -130.71952820]
[204.08828735 -143.73207092]
[217.13816833 -151.11831665]
[232.03269958 -150.98175049]
[239.53269958 -163.97213745]
[247.03269958 -176.96250916]
[254.53269958 -189.95289612]
[262.03268433 -202.94328308]
[261.57382202 -221.31663513]
[277.03372192 -229.55226135]
[284.24856567 -242.70317078]
[276.48760986 -253.12951660]
[273.28399658 -265.67785645]
[275.08407593 -278.45562744]
[281.58233643 -289.54956055]
[291.77249146 -297.31228638]
[304.10314941 -300.60684204]
[316.71408081 -298.97305298]
[324.49566650 -311.79675293]
[332.27728271 -324.62042236]
[340.05886841 -337.44409180]
[333.93429565 -351.70135498]
[337.39242554 -366.82815552]
[349.10354614 -377.00799561]
[364.56451416 -378.32650757]
[377.83023071 -370.27664185]
[383.79980469 -355.95379639]
[380.17776489 -340.86538696]
[368.35690308 -330.81317139]
[352.88253784 -329.66250610]
[345.10095215 -316.83880615]
[337.31936646 -304.01513672]
[329.53775024 -291.19146729]
[338.35397339 -276.47537231]
[338.54904175 -259.23309326]
[329.98049927 -244.16741943]
[314.90829468 -235.43244934]
[297.39944458 -235.48832703]
[290.18463135 -222.33743286]
[293.26657104 -210.59107971]
[287.30056763 -199.55465698]
[275.02307129 -195.44328308]
[267.52307129 -182.45289612]
[260.02307129 -169.46250916]
[252.52307129 -156.47213745]
[245.02307129 -143.48175049]
[252.58860779 -130.65100098]
[252.71685791 -115.65634918]
[245.27325439 -102.52397919]
[232.16976929 -94.83013916]
[216.87477112 -94.72746277]
[209.37477112 -81.73707581]
[201.87477112 -68.74669647]
[210.28656006 -54.99065018]
[210.63710022 -38.77669525]
[202.73703003 -24.50610542]
[188.64935303 -16.10003853]
[172.15167236 -15.92226315]
[164.93684387 -2.77136207]
[157.72201538 10.37953949]
[150.50718689 23.53044128]
[143.29235840 36.68134308]
[143.95417786 51.56123734]
[130.53294373 59.93866348]
[123.31811523 73.08956146]
[116.10328674 86.24046326]
[121.09242249 101.93658447]
[113.32853699 116.46179962]
[97.50587463 121.03378296]
[90.57964325 134.33894348]
[91.07050323 150.15252686]
[78.33062744 157.86907959]
[71.40440369 171.17424011]
[64.62371826 184.55415344]
[57.98938751 198.00724792]
[51.35505676 211.46034241]
[44.72072601 224.91343689]
[38.08639908 238.36653137]
[44.01953125 254.78450012]
[36.42649078 270.12896729]
[20.41739845 275.16870117]
[14.07812500 288.76330566]
[7.73885155 302.35794067]
[1.39957738 315.95254517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[21 143]
[22 142]
[23 141]
[24 140]
[28 137]
[29 136]
[30 135]
[31 134]
[32 133]
[34 132]
[35 131]
[37 129]
[38 128]
[42 125]
[43 124]
[44 123]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[56 112]
[57 111]
[58 110]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[69 98]
[70 97]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
