%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCACCGCGGCGGCGGCAGGGCGACGUGGCGCGGCCGGCUGCGGCUGCGCAGGCAGGUGGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[83.19889069 110.97716522]
[80.16213226 103.03882599]
[65.56056213 99.60456848]
[50.95899582 96.17031097]
[37.62727356 104.22654724]
[22.86812592 100.53572083]
[15.26989365 87.77631378]
[0.66832268 84.34204865]
[-13.93324852 80.90779114]
[-29.13832092 85.28002167]
[-39.75607300 74.83432007]
[-54.35764313 71.40006256]
[-68.95921326 67.96580505]
[-84.16428375 72.33802795]
[-94.78203583 61.89233017]
[-109.38360596 58.45807266]
[-122.68705750 66.99000549]
[-138.10894775 63.53446198]
[-146.49975586 50.14155197]
[-142.88134766 34.75705719]
[-129.40048218 26.50832176]
[-114.05509949 30.28917313]
[-105.94934845 43.85650253]
[-91.34777832 47.29076004]
[-77.18711090 42.67289352]
[-65.52495575 53.36423492]
[-50.92338562 56.79849243]
[-36.32181549 60.23274994]
[-22.16114426 55.61488342]
[-10.49899006 66.30622101]
[4.10258102 69.74047852]
[18.70415115 73.17473602]
[31.19316673 65.13980865]
[46.05015945 68.41463470]
[54.39325333 81.56874084]
[68.99481964 85.00299835]
[83.59639740 88.43725586]
[102.77269745 80.12319183]
[118.94170380 93.36771393]
[133.92570496 94.06047058]
[148.90969849 94.75321960]
[163.05247498 87.66151428]
[175.40882874 95.97834778]
[190.39282227 96.67110443]
[204.53561401 89.57939911]
[216.89196777 97.89623260]
[231.87596130 98.58898163]
[246.85995483 99.28173065]
[261.84396362 99.97448730]
[276.15301514 91.96307373]
[290.10534668 100.58076477]
[289.34796143 116.96241760]
[274.66003418 124.25598907]
[261.15118408 114.95848083]
[246.16720581 114.26573181]
[231.18321228 113.57297516]
[216.19921875 112.88022614]
[203.12818909 120.02147675]
[189.70007324 111.65509796]
[174.71607971 110.96234131]
[161.64505005 118.10359955]
[148.21693420 109.73721313]
[133.23294067 109.04446411]
[118.24895477 108.35170746]
[113.15569305 115.15596008]
[105.70291901 119.24193573]
[97.22730255 119.87680817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[7 32]
[8 31]
[9 30]
[11 28]
[12 27]
[13 26]
[15 24]
[16 23]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
