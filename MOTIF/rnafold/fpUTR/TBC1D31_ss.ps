%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUCCCGGGCCGGGAGCGCUGGGCCUGCCGGGAAGGCGCUGGGACGGUUACCCAGCGGGCCGCCGGCGGUCGUGGGCAAGCUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[72.39910889 146.48381042]
[70.83860779 131.56520081]
[77.24075317 118.00008392]
[89.74700928 109.72222900]
[74.85637665 111.53028107]
[59.96574020 113.33833313]
[45.07510757 115.14637756]
[30.18447495 116.95442963]
[15.29384232 118.76248169]
[0.40320960 120.57053375]
[-14.48742390 122.37857819]
[-29.26450920 124.95497131]
[-43.88842773 128.29278564]
[-58.51234436 131.63059998]
[-70.24480438 142.24473572]
[-84.37469482 137.53350830]
[-98.99861145 140.87132263]
[-110.64546204 152.41613770]
[-126.39366150 147.84162903]
[-130.04281616 131.85363770]
[-117.83898163 120.89925385]
[-102.33642578 126.24740601]
[-87.71250916 122.90959167]
[-77.02604675 112.53419495]
[-61.85015869 117.00667572]
[-47.22624207 113.66886139]
[-32.60232162 110.33104706]
[-30.37944794 107.33367920]
[-26.49189186 105.36534119]
[-21.49122429 105.24504089]
[-16.29547310 107.48794556]
[-1.40484059 105.67990112]
[13.48579216 103.87184906]
[28.37642479 102.06379700]
[43.26705933 100.25574493]
[58.15769196 98.44770050]
[73.04832458 96.63964844]
[87.93895721 94.83159637]
[89.38229370 86.93803406]
[95.93592834 79.86172485]
[100.52190399 65.57996368]
[105.10787964 51.29819870]
[109.69386292 37.01643372]
[114.27983856 22.73466873]
[118.86581421 8.45290279]
[123.45178986 -5.82886219]
[114.96685791 -18.96430397]
[116.96160126 -34.47414017]
[128.49417114 -45.03509903]
[144.11923218 -45.66062164]
[156.45912170 -36.05535126]
[159.68731689 -20.75460625]
[152.27955627 -6.98292875]
[137.73355103 -1.24288452]
[133.14758301 13.03888035]
[128.56159973 27.32064629]
[123.97562408 41.60240936]
[119.38964844 55.88417435]
[114.80367279 70.16593933]
[110.21768951 84.44770813]
[116.95825195 97.84788513]
[131.15873718 102.67969513]
[145.35920715 107.51150513]
[163.21635437 103.44656372]
[174.38304138 116.86441803]
[188.74183655 121.20319366]
[203.10063171 125.54197693]
[218.54890442 122.12715149]
[228.49409485 133.21510315]
[242.85289001 137.55387878]
[258.68750000 133.28800964]
[270.10647583 145.05825806]
[265.36300659 160.75639343]
[249.33671570 164.23352051]
[238.51411438 151.91267395]
[224.15531921 147.57389832]
[209.73406982 151.29905701]
[198.76184082 139.90077209]
[184.40304565 135.56199646]
[170.04425049 131.22320557]
[159.10087585 136.68481445]
[147.00825500 133.02516174]
[140.52740479 121.71198273]
[126.32691956 116.88017273]
[112.12644196 112.04837036]
[122.66412354 122.72344971]
[126.13832855 137.31556702]
[121.54177094 151.59393311]
[110.20715332 161.41871643]
[95.42079926 163.94136047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 27]
[13 26]
[14 25]
[16 23]
[17 22]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[61 85]
[62 84]
[63 83]
[65 80]
[66 79]
[67 78]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
