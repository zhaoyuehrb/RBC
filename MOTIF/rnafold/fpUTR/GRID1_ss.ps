%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGCGGCCCGGGACUGCACCGGGACCAGCGCCUCCCCGCUUCGCGCUGCCCUCGGCCUCGCCCCGGGCCCGGGUGGAUGAGCCGCGCGCCCGGGGGAC\
) } def
/len { sequence length } bind def

/coor [
[75.09273529 115.79393768]
[60.79860687 120.34122467]
[46.50447845 124.88851166]
[32.21035004 129.43580627]
[17.91621780 133.98309326]
[3.69380856 138.74996948]
[-10.45350838 143.73529053]
[-24.35548973 149.36866760]
[-37.98246765 155.63806152]
[-51.51128769 162.11657715]
[-64.93873596 168.80265808]
[-78.36618805 175.48872375]
[-91.79363251 182.17480469]
[-105.22108459 188.86087036]
[-108.70325470 204.10581970]
[-121.20115662 213.50457764]
[-136.81365967 212.61932373]
[-148.16902161 201.86805725]
[-149.90559387 186.32719421]
[-141.20339966 173.33465576]
[-126.17137146 169.02513123]
[-111.90715790 175.43342590]
[-98.47971344 168.74734497]
[-85.05226135 162.06127930]
[-71.62480927 155.37519836]
[-58.19736099 148.68913269]
[-53.53224182 142.78794861]
[-44.25187302 142.01109314]
[-30.62489510 135.74168396]
[-29.06396103 132.39584351]
[-25.70810127 129.70239258]
[-20.91394043 128.54248047]
[-15.43883038 129.58796692]
[-1.29151356 124.60264587]
[4.06343317 119.31948853]
[13.36892796 119.68896484]
[27.66305733 115.14167786]
[41.95718765 110.59438324]
[56.25131989 106.04709625]
[70.54544830 101.49980164]
[71.04946136 90.95418549]
[75.31130219 80.97439575]
[82.98451996 72.89042664]
[93.25638580 67.85447693]
[104.93152618 66.67957306]
[116.57043457 69.71540833]
[120.22914124 55.16845322]
[123.88784790 40.62150192]
[116.03786469 27.16729927]
[119.95553589 12.46673870]
[132.83044434 5.06589413]
[136.48915100 -9.48106003]
[140.14785767 -24.02801323]
[138.14750671 -40.86354065]
[153.77134705 -47.44624329]
[164.42190552 -34.25526428]
[154.69480896 -20.36930847]
[151.03610229 -5.82235432]
[147.37739563 8.72459984]
[155.21903992 21.33586693]
[151.71582031 36.14066696]
[138.43479919 44.28020477]
[134.77609253 58.82715988]
[131.11738586 73.37411499]
[138.61738586 86.36449432]
[153.04476929 90.46943665]
[167.47215271 94.57438660]
[181.89953613 98.67932892]
[196.32691956 102.78427124]
[210.75430298 106.88922119]
[225.18170166 110.99416351]
[240.57246399 107.32882690]
[250.69647217 118.25374603]
[265.12387085 122.35868835]
[279.61273193 126.24097443]
[294.15969849 129.89967346]
[308.70666504 133.55838013]
[322.13989258 125.23233032]
[337.50674438 128.92495728]
[345.69030762 142.44548035]
[341.83544922 157.77243042]
[328.22915649 165.81259155]
[312.94381714 161.79588318]
[305.04794312 148.10534668]
[290.50097656 144.44664001]
[275.95404053 140.78793335]
[268.57189941 142.23410034]
[261.01892090 136.78607178]
[246.59152222 132.68112183]
[232.23269653 136.64007568]
[221.07675171 125.42154694]
[206.64936829 121.31660461]
[192.22198486 117.21166229]
[177.79460144 113.10671234]
[163.36721802 109.00177002]
[148.93981934 104.89682770]
[134.51243591 100.79187775]
[130.35163879 114.60647583]
[121.07595825 125.19155884]
[108.57096100 130.83819580]
[95.20362091 130.79772949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 34]
[7 33]
[8 29]
[9 28]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[46 64]
[47 63]
[48 62]
[51 59]
[52 58]
[53 57]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[73 89]
[74 88]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
