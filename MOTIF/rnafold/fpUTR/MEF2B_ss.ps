%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCACCUGCGGCCGCGGGCCCCUGAUCUUCGUGCAGCCGCCGCGGGUCCGUGCGCCCAGCGUCCCAGGGCCCAGGCCGAGCAGACAAAGAUCAUUCCACUCAGCCUGGGACG\
) } def
/len { sequence length } bind def

/coor [
[165.73721313 153.33845520]
[159.72918701 141.79127502]
[158.57839966 128.77835083]
[144.44448853 123.75515747]
[129.86100769 126.78360748]
[119.44871521 114.87165070]
[105.31480408 109.84845734]
[91.11359406 105.01878357]
[76.84774780 100.38352966]
[62.58190155 95.74827576]
[53.31354523 96.06314087]
[47.99275589 90.78666687]
[33.85884094 85.76347351]
[19.72492790 80.74028015]
[5.52372313 75.91059875]
[-8.74212456 71.27534485]
[-23.00797272 66.64009094]
[-37.27381897 62.00483704]
[-51.53966904 57.36958313]
[-65.80551910 52.73432922]
[-80.07136536 48.09907150]
[-94.33721161 43.46381760]
[-108.60305786 38.82856369]
[-113.50830841 43.47196579]
[-119.51419067 46.47228622]
[-126.09233856 47.59206390]
[-132.67163086 46.75813675]
[-138.68780518 44.06593323]
[-143.63188171 39.76920700]
[-147.09313965 34.25630951]
[-148.79324341 28.01515961]
[-148.60848999 21.59009361]
[-161.73329163 14.32790565]
[-170.89254761 12.87545395]
[-175.11347961 6.68386698]
[-188.03503418 -0.93411183]
[-204.42948914 -0.54229760]
[-212.73385620 -14.68335819]
[-204.40530396 -28.81018257]
[-188.01152039 -28.39030457]
[-180.41705322 -13.85565948]
[-167.49549866 -6.23768091]
[-154.47109985 1.20309567]
[-141.34629822 8.46528244]
[-117.89471436 4.44725561]
[-103.96780396 24.56271553]
[-89.70195770 29.19796944]
[-75.43611145 33.83322525]
[-61.17026138 38.46847916]
[-46.90441132 43.10373688]
[-32.63856506 47.73899078]
[-18.37271690 52.37424469]
[-4.10686970 57.00949860]
[10.15897846 61.64475632]
[17.59343338 60.70619583]
[24.74812317 66.60636139]
[38.88203812 71.62955475]
[53.01594925 76.65275574]
[67.21715546 81.48242950]
[81.48300171 86.11768341]
[95.74884796 90.75293732]
[103.89797211 90.05219269]
[110.33799744 95.71454620]
[124.47190857 100.73773956]
[140.06632996 98.06858063]
[149.46768188 109.62123871]
[163.60159302 114.64443207]
[176.58699036 102.97730255]
[193.58976746 99.43045807]
[209.98957825 104.87732697]
[221.37524414 117.75956726]
[224.73120117 134.53161621]
[239.11833191 138.77546692]
[253.50547791 143.01931763]
[267.89260864 147.26318359]
[282.27975464 151.50703430]
[296.66687012 155.75090027]
[311.05401611 159.99475098]
[326.47940063 156.47796631]
[336.49761963 167.50000000]
[350.88473511 171.74385071]
[365.27188110 175.98770142]
[379.03247070 168.68811035]
[393.56262207 173.19692993]
[400.43685913 186.36051941]
[414.82400513 190.60438538]
[425.89746094 179.96134949]
[440.81271362 176.29652405]
[455.55761719 180.59571838]
[466.16589355 191.70248413]
[469.78393555 206.62915039]
[465.43853760 221.36050415]
[454.29858398 231.93391418]
[439.36065674 235.50515747]
[424.64297485 231.11361694]
[414.10455322 219.94056702]
[410.58013916 204.99151611]
[396.19302368 200.74766541]
[383.27502441 208.07302856]
[368.62396240 203.97409058]
[361.02801514 190.37484741]
[346.64089966 186.13098145]
[332.25375366 181.88713074]
[317.85742188 185.70745850]
[306.81015015 174.38188171]
[292.42303467 170.13803101]
[278.03588867 165.89416504]
[263.64874268 161.65031433]
[249.26161194 157.40646362]
[234.87448120 153.16259766]
[220.48735046 148.91874695]
[212.21365356 158.66093445]
[200.80644226 164.52987671]
[187.97592163 165.60528564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[6 64]
[7 63]
[8 61]
[9 60]
[10 59]
[12 58]
[13 57]
[14 56]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[32 44]
[33 43]
[35 42]
[36 41]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[77 106]
[78 105]
[80 103]
[81 102]
[82 101]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
