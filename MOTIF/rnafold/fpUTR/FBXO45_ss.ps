%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCGGCGGUUGGCACUGACAGGGGCGGUGAGCGAGCCGCUCCGGUCUCCGGGCGAGGCUUGGCCUUCCGAGCAGAGACGGCGGGAAGCGGCGGCGGCAGCGGCGGCCCUAGGGCCGGCUGGUGAGGCG\
) } def
/len { sequence length } bind def

/coor [
[74.68219757 486.69903564]
[80.72853851 470.85989380]
[80.72853851 455.85989380]
[70.04766846 445.54220581]
[69.83398438 430.33007812]
[80.72853851 419.19696045]
[80.72853851 404.19696045]
[72.99124146 391.46969604]
[80.72853851 377.66952515]
[80.72853851 362.66952515]
[80.72853851 347.66952515]
[80.72853851 332.66952515]
[80.72853851 317.66952515]
[80.72853851 302.66952515]
[80.72853851 287.66952515]
[80.72853851 272.66952515]
[72.99124146 259.94226074]
[80.72853851 246.14207458]
[80.72853851 231.14207458]
[78.73900604 229.03723145]
[77.50602722 225.97953796]
[77.41159821 222.26936340]
[78.71565247 218.34486389]
[81.51019287 214.73323059]
[82.93602753 199.80114746]
[84.36186981 184.86906433]
[85.78771210 169.93698120]
[87.21355438 155.00491333]
[80.72109222 141.59979248]
[89.73514557 128.59757996]
[91.16098785 113.66550446]
[84.27548981 104.19689941]
[85.52696228 92.55652618]
[94.26779938 84.76792908]
[96.04858398 69.87400818]
[88.67816925 59.21175385]
[90.52983093 46.78940201]
[100.05960083 39.24037933]
[102.19432068 24.39305687]
[104.32904816 9.54573441]
[106.46376801 -5.30158710]
[108.59848785 -20.14890862]
[110.73321533 -34.99623108]
[112.69110870 -49.86790466]
[114.47189331 -64.76181793]
[116.25267792 -79.65573883]
[108.59397125 -96.35196686]
[119.53871918 -110.01654816]
[120.96456146 -124.94862366]
[118.64993286 -133.88804626]
[122.60614777 -140.21762085]
[124.38693237 -155.11154175]
[126.16771698 -170.00546265]
[118.79730225 -180.66772461]
[120.64896393 -193.09007263]
[130.17874146 -200.63909912]
[132.31346130 -215.48641968]
[119.41497803 -230.77099609]
[121.72308350 -250.33386230]
[137.33972168 -261.83950806]
[138.40980530 -276.80126953]
[139.47988892 -291.76306152]
[140.54998779 -306.72485352]
[141.62007141 -321.68661499]
[142.69015503 -336.64840698]
[135.04183960 -351.15478516]
[144.00836182 -364.88555908]
[160.36572266 -363.71563721]
[167.28688049 -348.84857178]
[157.65194702 -335.57830811]
[156.58184814 -320.61654663]
[155.51176453 -305.65475464]
[154.44168091 -290.69296265]
[153.37158203 -275.73120117]
[152.30149841 -260.76940918]
[160.99688721 -255.00602722]
[166.51423645 -246.05682373]
[167.77713013 -235.53778076]
[164.48477173 -225.38223267]
[157.17993164 -217.48562622]
[147.16078186 -213.35169983]
[145.02606201 -198.50437927]
[152.44073486 -182.64465332]
[141.06163025 -168.22467041]
[139.28085327 -153.33076477]
[137.50006104 -138.43684387]
[135.89663696 -123.52278137]
[134.47079468 -108.59070587]
[141.95219421 -99.00775146]
[140.82296753 -86.49901581]
[131.14659119 -77.87495422]
[129.36581421 -62.98103714]
[127.58502197 -48.08711624]
[129.93746948 -41.00324631]
[125.58053589 -32.86150742]
[123.44581604 -18.01418686]
[121.31108856 -3.16686463]
[119.17636871 11.68045712]
[117.04164124 26.52777863]
[114.90692139 41.37509918]
[122.32160187 57.23481369]
[110.94250488 71.65480042]
[109.16172028 86.54871368]
[116.18170166 101.73971558]
[106.09306335 115.09134674]
[104.66722870 130.02342224]
[111.05770111 144.49658203]
[102.14562988 156.43075562]
[100.71978760 171.36282349]
[99.29395294 186.29490662]
[97.86811066 201.22698975]
[96.44226837 216.15905762]
[95.72853851 231.14207458]
[95.72853851 246.14207458]
[103.46584320 259.94226074]
[95.72853851 272.66952515]
[95.72853851 287.66952515]
[95.72853851 302.66952515]
[95.72853851 317.66952515]
[95.72853851 332.66952515]
[95.72853851 347.66952515]
[95.72853851 362.66952515]
[95.72853851 377.66952515]
[103.46584320 391.46969604]
[95.72853851 404.19696045]
[95.72853851 419.19696045]
[106.62309265 430.33007812]
[106.40941620 445.54220581]
[95.72853851 455.85989380]
[95.72853851 470.85989380]
[101.77487946 486.69903564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[6 126]
[7 125]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 116]
[18 114]
[19 113]
[24 112]
[25 111]
[26 110]
[27 109]
[28 108]
[30 106]
[31 105]
[34 103]
[35 102]
[38 100]
[39 99]
[40 98]
[41 97]
[42 96]
[43 95]
[44 93]
[45 92]
[46 91]
[48 88]
[49 87]
[51 86]
[52 85]
[53 84]
[56 82]
[57 81]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
