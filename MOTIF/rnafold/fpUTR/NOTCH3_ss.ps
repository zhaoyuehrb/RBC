%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCGGAGGCUGGCCCGGGACGCGCCCGGAGCCCAGGGAAGGAGGGAGGAGGGGAGGGUCGCGGCCGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[66.93319702 296.38769531]
[58.23035431 309.23449707]
[43.62702942 314.48068237]
[28.73850632 310.10903931]
[19.28972054 297.80047607]
[18.91392326 282.28796387]
[27.75561905 269.53634644]
[42.41499329 264.44885254]
[46.64097977 250.05647278]
[42.80278397 235.66488647]
[54.11462402 224.60357666]
[58.34061432 210.21118164]
[62.56660080 195.81878662]
[66.79258728 181.42639160]
[71.01857758 167.03399658]
[75.24456787 152.64160156]
[79.47055817 138.24920654]
[78.29958344 130.73371887]
[84.17359924 123.36248016]
[88.98311615 109.15443420]
[86.43231964 95.40724945]
[96.80883789 86.03604889]
[101.61835480 71.82800293]
[106.42787170 57.61996078]
[96.50122833 44.09373093]
[96.48793793 27.48024940]
[106.19886017 14.20354366]
[121.72228241 9.28263187]
[125.94827271 -5.10976315]
[130.17425537 -19.50215721]
[119.69381714 -30.64251900]
[116.21966553 -45.43532181]
[120.58733368 -59.88488388]
[131.52796936 -70.13955688]
[146.03485107 -73.51835632]
[150.26083374 -87.91075134]
[154.48681641 -102.30314636]
[144.30656433 -113.89477539]
[142.03187561 -129.15351868]
[148.38862610 -143.21037292]
[161.34838867 -151.57984924]
[176.77575684 -151.59127808]
[189.74789429 -143.24101257]
[196.12545776 -129.19358826]
[193.87338257 -113.93148041]
[183.71031189 -102.32479095]
[168.87921143 -98.07715607]
[164.65322876 -83.68476105]
[160.42724609 -69.29236603]
[170.80447388 -58.60693359]
[174.46423340 -44.06519699]
[170.32653809 -29.54811096]
[159.40629578 -18.98188400]
[144.56665039 -15.27616978]
[140.34066772 -0.88377470]
[136.11466980 13.50862026]
[145.29508972 23.41516304]
[148.33552551 36.68680573]
[144.31953430 49.81073761]
[134.21330261 59.25736237]
[120.63591766 62.42947769]
[115.82640076 76.63751984]
[111.01688385 90.84556580]
[113.56768036 104.59275055]
[103.19116211 113.96395111]
[98.38164520 128.17199707]
[93.86295319 142.47518921]
[89.63696289 156.86758423]
[85.41097260 171.25997925]
[81.18498230 185.65237427]
[76.95899963 200.04476929]
[72.73300934 214.43716431]
[68.50701904 228.82955933]
[72.04294586 244.25057983]
[61.03337479 254.28245544]
[56.80738831 268.67483521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 76]
[9 75]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[19 66]
[20 65]
[22 63]
[23 62]
[24 61]
[28 56]
[29 55]
[30 54]
[35 49]
[36 48]
[37 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
