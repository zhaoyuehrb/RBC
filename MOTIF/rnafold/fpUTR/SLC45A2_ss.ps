%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGCUCCACGUCAAAUCCAGUUUGAAACACAGACCCUAGGACCACGCAGGAGGUGGUGGGCUCGCAGGAAGGUUCCUCUCCCAGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[85.70291901 100.87681580]
[72.46664429 93.81983185]
[59.23036575 86.76284790]
[45.99408722 79.70586395]
[33.31314468 82.71346283]
[22.37576866 76.39934540]
[18.87137985 64.68686676]
[5.88099766 57.18686295]
[-7.10938311 49.68686295]
[-20.09976387 42.18686295]
[-38.41038132 42.69977570]
[-46.74947357 27.35973930]
[-59.98574829 20.30275726]
[-73.22202301 13.24577427]
[-83.93154907 18.94952583]
[-95.94099426 18.67861557]
[-106.17380524 12.62117386]
[-112.06671906 2.43249917]
[-112.21147156 -9.21551418]
[-124.94113922 -17.14997482]
[-137.67080688 -25.08443451]
[-158.93782043 -24.16688538]
[-168.53373718 -42.30490494]
[-182.00080872 -48.91081619]
[-195.46788025 -55.51673126]
[-208.93495178 -62.12264252]
[-222.40200806 -68.72855377]
[-237.98670959 -64.92108917]
[-250.59178162 -74.84539032]
[-250.54769897 -90.88838196]
[-237.88827515 -100.74325562]
[-222.32473755 -96.85019684]
[-215.79609680 -82.19562531]
[-202.32902527 -75.58970642]
[-188.86196899 -68.98379517]
[-175.39489746 -62.37788391]
[-161.92782593 -55.77197266]
[-153.77777100 -60.12198257]
[-144.39984131 -60.11069107]
[-136.01412964 -55.60905838]
[-130.66792297 -47.56662369]
[-129.73634338 -37.81409836]
[-117.00667572 -29.87963867]
[-104.27701569 -21.94517899]
[-86.91265106 -27.23832893]
[-70.81671906 -18.18587875]
[-66.16504669 0.00949860]
[-52.92876816 7.06648064]
[-39.69248962 14.12346268]
[-27.89906311 10.90196133]
[-16.75514412 16.84396172]
[-12.59976387 29.19648361]
[0.39061680 36.69648361]
[13.38099766 44.19648361]
[26.37137985 51.69648361]
[43.80068970 50.65908051]
[53.05107117 66.46958923]
[66.28734589 73.52657318]
[79.52362061 80.58355713]
[92.75989532 87.64053345]
[106.73892212 87.36029053]
[114.29708099 99.12318420]
[127.53335571 106.18016815]
[140.76963806 113.23715210]
[150.02125549 114.56456757]
[154.32785034 120.76257324]
[167.31823730 128.26257324]
[180.30860901 135.76257324]
[196.12857056 135.96195984]
[203.28205872 149.02629089]
[216.27243042 156.52629089]
[232.09239197 156.72569275]
[239.24588013 169.79002380]
[252.23625183 177.29002380]
[265.22665405 184.79002380]
[281.61685181 184.24893188]
[290.04965210 198.31379700]
[281.85006714 212.51586914]
[265.45315552 212.24528503]
[257.72665405 197.78039551]
[244.73625183 190.28039551]
[231.74588013 182.78039551]
[216.85508728 183.11746216]
[208.77243042 169.51667786]
[195.78205872 162.01667786]
[180.89126587 162.35374451]
[172.80860901 148.75296021]
[159.81823730 141.25296021]
[146.82785034 133.75296021]
[133.71264648 126.47342682]
[120.47637939 119.41644287]
[107.24010468 112.35946655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[7 55]
[8 54]
[9 53]
[10 52]
[12 49]
[13 48]
[14 47]
[19 44]
[20 43]
[21 42]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[62 92]
[63 91]
[64 90]
[66 89]
[67 88]
[68 87]
[70 85]
[71 84]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
