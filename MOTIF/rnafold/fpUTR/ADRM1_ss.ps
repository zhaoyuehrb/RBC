%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGAGCCGGCUGCGCGGCUUACGGGGCUCAAUCGGCGGCGAGAGCGGCAGGCGGGGCGGGCCGAACGCGGGUUUCCGGCGGGGCCCGGCAGGCGCCGAGGAGGAAGAGCGAGCCCGGACGGCGCCUCUCGAACGAGUGUGGGCGCGAGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[150.69976807 379.25909424]
[141.60670471 367.32946777]
[146.73309326 353.23266602]
[147.38894653 338.24703979]
[139.91326904 338.85052490]
[132.15319824 351.68725586]
[124.39313507 364.52395630]
[116.63306427 377.36068726]
[108.87300110 390.19738770]
[101.11293030 403.03411865]
[105.13801575 418.31726074]
[97.10531616 431.92794800]
[81.78047943 435.79122925]
[68.25546265 427.61508179]
[64.55442047 412.25024414]
[72.87311554 398.81243896]
[88.27621460 395.27404785]
[96.03627777 382.43734741]
[103.79634857 369.60061646]
[111.55641174 356.76388550]
[119.31648254 343.92718506]
[127.07654572 331.09045410]
[111.43892670 312.12518311]
[107.97044373 288.84896851]
[116.60241699 268.08587646]
[133.86865234 255.37728882]
[129.98635864 240.88839722]
[126.10407257 226.39950562]
[122.22178650 211.91061401]
[118.33950043 197.42173767]
[114.45721436 182.93284607]
[101.46987152 175.73114014]
[97.32628632 161.09265137]
[104.96814728 147.51916504]
[101.08586884 133.03027344]
[77.59135437 124.29055786]
[66.98944855 101.57549286]
[52.23515320 98.87166595]
[37.26634216 103.99467468]
[26.14223099 94.08995819]
[11.38793278 91.38613129]
[-3.86947322 97.39808655]
[-16.53451729 86.98037720]
[-13.57848835 70.84984589]
[1.95770442 65.60020447]
[14.09175873 76.63183594]
[28.84605598 79.33566284]
[42.75954056 74.01924896]
[54.93898010 84.11736298]
[69.69327545 86.82118988]
[77.34790802 75.93630981]
[88.67510986 68.95285034]
[86.86705780 54.06222153]
[85.05900574 39.17158890]
[83.25096130 24.28095436]
[67.17858887 15.99166203]
[59.32802582 -0.12559220]
[62.65104294 -17.58319283]
[75.64299774 -29.47778130]
[73.23683167 -44.28353500]
[70.83065796 -59.08929062]
[68.42449188 -73.89504242]
[66.01831818 -88.70079803]
[63.61215210 -103.50655365]
[54.37635422 -109.38742065]
[50.02117920 -119.19258118]
[51.77656555 -129.55351257]
[58.81716919 -137.05543518]
[57.00912094 -151.94606018]
[55.20106888 -166.83670044]
[45.85675430 -179.60362244]
[52.00354004 -193.17073059]
[50.19548798 -208.06135559]
[42.28403854 -223.05619812]
[54.50276566 -234.80944824]
[69.17918396 -226.32185364]
[65.08612061 -209.86940002]
[66.89417267 -194.97877502]
[76.10916138 -183.27693176]
[70.09170532 -168.64474487]
[71.89974976 -153.75410461]
[73.70780182 -138.86347961]
[86.44742584 -124.36183929]
[78.41790771 -105.91271973]
[80.82407379 -91.10696411]
[83.23023987 -76.30121613]
[85.63641357 -61.49546051]
[88.04257965 -46.68970490]
[90.44875336 -31.88395119]
[102.03682709 -28.05538559]
[110.93445587 -19.59690857]
[115.39649963 -8.08227921]
[114.51151276 4.30749941]
[108.38719940 15.19723892]
[98.14159393 22.47290421]
[99.94963837 37.36353683]
[101.75769043 52.25416946]
[103.56574249 67.14480591]
[111.71561432 69.09817505]
[119.11207581 73.03878784]
[125.27947235 78.71322632]
[129.82118225 85.75657654]
[132.44515991 93.71589661]
[132.98265076 102.07933807]
[131.39906311 110.30906677]
[127.79627991 117.87583160]
[122.40596008 124.29302979]
[115.57475281 129.14799500]
[119.45703888 143.63688660]
[132.86183167 151.57093811]
[136.59262085 166.32003784]
[128.94610596 179.05056763]
[132.82838440 193.53944397]
[136.71067810 208.02833557]
[140.59295654 222.51722717]
[144.47525024 237.00610352]
[148.35752869 251.49499512]
[160.81552124 251.61453247]
[172.91065979 255.70173645]
[183.38240051 263.53207397]
[191.07853699 274.48220825]
[195.08047485 287.57714844]
[194.80941772 301.57598877]
[190.10130310 315.08947754]
[181.24166870 326.71780396]
[190.96040344 338.14349365]
[200.67913818 349.56915283]
[210.39785767 360.99484253]
[220.11659241 372.42053223]
[234.95153809 377.91918945]
[237.30413818 392.62683105]
[247.02285767 404.05249023]
[262.53469849 405.47399902]
[272.22811890 417.19970703]
[270.77734375 431.97912598]
[280.49609375 443.40478516]
[296.11676025 448.39736938]
[299.33856201 464.47692871]
[286.84710693 475.10220337]
[271.49258423 469.34280396]
[269.07040405 453.12353516]
[259.35165405 441.69784546]
[244.53092957 440.75903320]
[234.51199341 429.31021118]
[235.59718323 413.77124023]
[225.87844849 402.34555054]
[211.73866272 397.66415405]
[208.69090271 382.13925171]
[198.97218323 370.71359253]
[189.25344849 359.28790283]
[179.53471375 347.86221313]
[169.81597900 336.43652344]
[162.34030151 337.04003906]
[165.39152527 351.72640991]
[172.71282959 364.81835938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[34 109]
[35 108]
[37 50]
[38 49]
[40 47]
[41 46]
[52 98]
[53 97]
[54 96]
[55 95]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[68 82]
[69 81]
[70 80]
[72 78]
[73 77]
[125 152]
[126 151]
[127 150]
[128 149]
[129 148]
[131 146]
[132 145]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
