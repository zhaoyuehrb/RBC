%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCAGGGAGGCGUCGCCCUGCCGCGUCGGAGCUGCUUCCUGGGCGCCGUGGGCGCGGACUGCGCGGGCUGCGCGGGUGCCGAGGAGCGCGAGGCGCGGGGAAGGCGCACCUGGGGUGGCCCUGGCGUGCGGGCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[105.35335541 257.50851440]
[90.85895538 253.64683533]
[83.16443634 240.77145386]
[77.96489716 254.84144592]
[72.76535797 268.91143799]
[78.14075470 284.02716064]
[69.55227661 297.57772827]
[53.58826828 299.16830444]
[42.49494934 287.57873535]
[44.78216934 271.69955444]
[58.69536591 263.71191406]
[63.89490509 249.64190674]
[69.09444427 235.57191467]
[73.34936523 221.18804932]
[76.64094543 206.55364990]
[79.93252563 191.91926575]
[83.22409821 177.28486633]
[86.51567841 162.65046692]
[89.80725861 148.01608276]
[93.09883118 133.38168335]
[73.91548920 118.56700134]
[70.30374908 96.12582397]
[82.19576263 78.54782867]
[76.07450867 64.85366058]
[69.95325470 51.15949631]
[63.83200455 37.46532440]
[57.71075058 23.77115822]
[51.58949661 10.07698917]
[45.46824265 -3.61717916]
[32.37331772 -6.96578979]
[23.74335480 -17.11362648]
[22.57631302 -30.18778229]
[29.07649803 -41.36633682]
[23.25968552 -55.19256592]
[16.99835968 -61.95420837]
[17.47087479 -69.38958740]
[11.96135139 -83.34111786]
[6.45182705 -97.29264069]
[0.34161511 -104.19114685]
[0.97850019 -111.61425018]
[-4.22103834 -125.68424225]
[-9.42057705 -139.75424194]
[-21.46179771 -150.01676941]
[-18.61594200 -164.63697815]
[-23.81548119 -178.70697021]
[-29.01502037 -192.77696228]
[-34.21455765 -206.84696960]
[-39.41409683 -220.91696167]
[-44.61363602 -234.98695374]
[-49.96849442 -248.99858093]
[-55.47801971 -262.95010376]
[-60.98754120 -276.90164185]
[-66.65105438 -290.79135132]
[-72.46787262 -304.61758423]
[-78.28468323 -318.44381714]
[-90.76806641 -328.16369629]
[-88.57169342 -342.89547729]
[-94.38850403 -356.72171021]
[-109.38056946 -361.16827393]
[-117.96377563 -374.23971558]
[-116.08540344 -389.76409912]
[-104.63235474 -400.41122437]
[-89.01242065 -401.15393066]
[-76.60084534 -391.64144897]
[-73.25800323 -376.36535645]
[-80.56227112 -362.53851318]
[-74.74546051 -348.71228027]
[-62.67813873 -339.98135376]
[-64.45845032 -324.26065063]
[-58.64163971 -310.43441772]
[-52.82482529 -296.60818481]
[-47.28790665 -291.62313843]
[-47.03601456 -282.41116333]
[-41.52648926 -268.45962524]
[-36.01696777 -254.50810242]
[-30.59168053 -249.40179443]
[-30.54364014 -240.18649292]
[-25.34410095 -226.11650085]
[-20.14456177 -212.04650879]
[-14.94502354 -197.97650146]
[-9.74548435 -183.90650940]
[-4.54594564 -169.83651733]
[7.12336969 -160.58036804]
[4.64941883 -144.95378113]
[9.84895802 -130.88378906]
[15.04849625 -116.81378937]
[20.40335464 -102.80216980]
[25.91287994 -88.85063934]
[31.42240334 -74.89910889]
[37.08591843 -61.00938034]
[42.90272903 -47.18314743]
[58.70712662 -41.53870773]
[65.71193695 -25.91864586]
[59.16241074 -9.73843288]
[65.28366089 3.95573521]
[71.40491486 17.64990425]
[77.52616882 31.34407234]
[83.64742279 45.03823853]
[89.76867676 58.73241043]
[95.88993073 72.42657471]
[106.58821869 71.84763336]
[117.10054779 75.41447449]
[125.82718658 82.88592529]
[131.33187866 93.40840912]
[132.57341003 105.60810852]
[129.08985901 117.76914215]
[142.02458191 125.36473846]
[154.95930481 132.96032715]
[167.89402771 140.55592346]
[183.71206665 140.87197876]
[190.76902771 153.98870850]
[203.70373535 161.58430481]
[219.52178955 161.90034485]
[226.57875061 175.01707458]
[239.51345825 182.61267090]
[252.44818115 190.20826721]
[268.84194946 189.78807068]
[277.17077637 203.91473389]
[268.86669922 218.05595398]
[252.47221375 217.66445923]
[244.85258484 203.14299011]
[231.91786194 195.54739380]
[218.98315430 187.95179749]
[204.09027100 188.17904663]
[196.10815430 174.51901245]
[183.17343140 166.92343140]
[168.28056335 167.15066528]
[160.29843140 153.49064636]
[147.36370850 145.89505005]
[134.42898560 138.29945374]
[121.49427032 130.70385742]
[107.73323059 136.67326355]
[104.44165039 151.30764771]
[101.15007782 165.94204712]
[97.85849762 180.57644653]
[94.56691742 195.21084595]
[91.27534485 209.84523010]
[87.98376465 224.47962952]
[101.44516754 217.86218262]
[115.70767975 222.50769043]
[122.68946075 235.78379822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[33 91]
[34 90]
[36 89]
[37 88]
[38 87]
[40 86]
[41 85]
[42 84]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 75]
[51 74]
[52 73]
[53 71]
[54 70]
[55 69]
[57 67]
[58 66]
[106 131]
[107 130]
[108 129]
[109 128]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
