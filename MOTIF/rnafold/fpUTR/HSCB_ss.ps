%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGUUAGACGCUCUCUUUGCUUUUCCCCACGAGUGACCACGGCUAGAUAGGCCGCCGGCCAG\
) } def
/len { sequence length } bind def

/coor [
[81.22104645 90.11306763]
[71.27420807 78.88540649]
[61.32736588 67.65774536]
[51.38052750 56.43008423]
[41.43368912 45.20242310]
[31.48684883 33.97476196]
[21.54000854 22.74710083]
[3.88608479 25.16224670]
[-11.68377972 16.81587982]
[-19.31219673 1.05120635]
[-16.24914360 -16.03729820]
[-27.23317528 -26.25253677]
[-38.21720505 -36.46777344]
[-49.20123291 -46.68301392]
[-60.18526459 -56.89825058]
[-73.52869415 -49.74063110]
[-88.47362518 -47.30589676]
[-103.39892578 -49.85815430]
[-116.68562317 -57.12055206]
[-126.89247131 -68.30531311]
[-132.91230774 -82.19920349]
[-134.09214783 -97.29512024]
[-130.30401611 -111.95557404]
[-121.95880890 -124.59029388]
[-109.96176147 -133.82878113]
[-95.61421204 -138.66888428]
[-80.47248840 -138.58561707]
[-66.17904663 -133.58799744]
[-54.28433609 -124.21811676]
[-46.07859802 -111.49237823]
[-42.45193481 -96.79115295]
[-43.79773712 -81.70912170]
[-49.97002792 -67.88227844]
[-38.98599625 -57.66704178]
[-28.00196648 -47.45180511]
[-17.01793671 -37.23656464]
[-6.03390646 -27.02132797]
[5.80396557 -31.17774963]
[18.34306526 -29.75163269]
[29.06958580 -22.96434784]
[35.80501556 -12.11847782]
[37.14848709 0.65173310]
[32.76766968 12.80026150]
[42.71450806 24.02792358]
[52.66135025 35.25558472]
[62.60818863 46.48324585]
[72.55503082 57.71090698]
[82.50186920 68.93856812]
[92.44870758 80.16622925]
[108.77959442 80.67852783]
[119.90666199 92.64301300]
[119.23469543 108.96810913]
[129.71237183 119.70209503]
[140.19003296 130.43608093]
[150.66770935 141.17005920]
[166.05827332 148.28109741]
[163.48567200 165.03872681]
[146.67077637 167.20564270]
[139.93371582 151.64773560]
[129.45605469 140.91375732]
[118.97837830 130.17976379]
[108.50070953 119.44577789]
[95.68463898 120.77927399]
[84.45932770 114.45295715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
