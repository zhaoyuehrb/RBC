%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACACUGGGAACCUGGGGCAGAAUCAGACCCAGCGUCUGACUCCUCCUGAGAGGGCUCCCUUUUUUCUCCUCUCCUCCGCUGUCAGAAACAGAUCUGGGCUGGA\
) } def
/len { sequence length } bind def

/coor [
[75.73879242 96.47562408]
[62.12841034 102.78098297]
[48.51802826 109.08634186]
[39.24875259 121.90785217]
[24.44812202 120.23735046]
[10.83774090 126.54270935]
[-2.77263951 132.84806824]
[-16.38302040 139.15342712]
[-29.99340057 145.45878601]
[-33.21901703 156.06257629]
[-41.63677597 162.92713928]
[-52.23133850 163.91209412]
[-61.38080978 158.92866516]
[-75.34391785 164.40878296]
[-89.30702209 169.88890076]
[-103.27013397 175.36901855]
[-108.07865143 190.24894714]
[-121.35420990 198.51292419]
[-136.82850647 196.25897217]
[-147.19503784 184.55133057]
[-147.55905151 168.91798401]
[-137.74867249 156.74052429]
[-122.39605713 153.76878357]
[-108.75024414 161.40591431]
[-94.78713989 155.92579651]
[-80.82403564 150.44567871]
[-66.86092377 144.96556091]
[-56.14237976 128.98959351]
[-36.29875946 131.84840393]
[-22.68837738 125.54304504]
[-9.07799816 119.23768616]
[4.53238249 112.93232727]
[18.14276314 106.62696838]
[26.43853378 94.25646210]
[42.21266937 95.47596741]
[55.82305145 89.17060852]
[69.43343353 82.86524963]
[54.59716415 85.07548523]
[40.34416962 80.40085602]
[29.69871712 69.83324432]
[24.91961479 55.61494446]
[27.02091217 40.76285553]
[35.55674744 28.42836952]
[48.71594238 21.22867775]
[63.70631790 20.69144821]
[77.34714508 26.93067169]
[86.74404144 38.62247849]
[89.90312958 53.28604507]
[86.15419006 67.80980682]
[93.84767914 54.93307495]
[101.54116821 42.05634308]
[109.23465729 29.17961311]
[116.92814636 16.30288124]
[124.62163544 3.42614889]
[132.31512451 -9.45058346]
[123.86376953 -22.16031837]
[121.77241516 -37.27947998]
[126.45629883 -51.80614090]
[136.98544312 -62.85602951]
[151.26925659 -68.23518372]
[166.47169495 -66.87555695]
[179.57431030 -59.04711533]
[187.97554016 -46.30419922]
[190.00733948 -31.17691994]
[185.26628113 -16.66881371]
[174.69371033 -5.66047335]
[160.38882446 -0.33761454]
[145.19186401 -1.75709379]
[137.49836731 11.11963844]
[129.80487061 23.99637032]
[122.11138916 36.87310028]
[114.41790009 49.74983215]
[106.72441101 62.62656403]
[99.03092194 75.50329590]
[116.95444489 86.48104095]
[118.19953156 104.92078400]
[129.92700195 114.27313232]
[141.65447998 123.62547302]
[153.52053833 132.80134583]
[165.52253723 141.79867554]
[177.52455139 150.79598999]
[184.29600525 152.00938416]
[188.67628479 155.94972229]
[189.95368958 160.70790100]
[201.39613342 170.40689087]
[212.83857727 180.10589600]
[224.28102112 189.80488586]
[240.00926208 188.25636292]
[252.17260742 198.34736633]
[253.55476379 214.09111023]
[243.33570862 226.14707947]
[227.57824707 227.36270142]
[215.63098145 217.01676941]
[214.58201599 201.24732971]
[203.13957214 191.54833984]
[191.69712830 181.84933472]
[180.25468445 172.15034485]
[168.52722168 162.79800415]
[156.52522278 153.80067444]
[144.52320862 144.80334473]
[137.16310120 143.28488159]
[132.30212402 135.35295105]
[120.57465363 126.00060272]
[108.84718323 116.64825439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[13 27]
[14 26]
[15 25]
[16 24]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[76 104]
[77 103]
[78 102]
[79 100]
[80 99]
[81 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
