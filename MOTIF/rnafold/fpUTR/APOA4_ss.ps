%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGCGCAGGUGAGCUCUCCUGAGGACCUCUCUGUCAGCUCCCCUGAUUGUAGGGAGGAUCCAGUGUGGCAAGAAACUCCUCCAGCCCAGCAAGCAGCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[91.74763489 195.49244690]
[102.57221985 184.20695496]
[100.78131104 169.31425476]
[91.57979584 157.60180664]
[97.61408234 142.97656250]
[95.82317352 128.08384705]
[88.84093475 126.10793304]
[82.58758545 122.42668915]
[70.58557892 131.42402649]
[58.58357620 140.42134094]
[46.58157349 149.41867065]
[46.94834137 164.93141174]
[38.09922791 177.67790222]
[23.43689537 182.75683594]
[8.59931183 178.21528625]
[-0.70816982 165.79954529]
[-0.90663254 150.28373718]
[8.08023643 137.63400269]
[22.79680252 132.71443176]
[37.58424759 137.41667175]
[49.58625031 128.41934204]
[61.58825302 119.42201996]
[73.59025574 110.42469025]
[72.22769165 94.09681702]
[80.11360168 79.73476410]
[72.80876923 66.63363647]
[65.50393677 53.53251648]
[58.00393677 40.54213715]
[50.31044769 27.66540337]
[42.61695862 14.78867149]
[34.92346954 1.91193986]
[27.22997856 -10.96479225]
[19.53648949 -23.84152412]
[11.84300137 -36.71825409]
[3.57954645 -49.23685455]
[-5.23723221 -61.37210846]
[-14.05401134 -73.50736237]
[-22.87079048 -85.64261627]
[-31.68756866 -97.77787781]
[-47.24440384 -101.69763184]
[-53.74788666 -116.36338043]
[-46.20910645 -130.52481079]
[-30.41116524 -133.31849670]
[-18.47289658 -122.60134888]
[-19.55231285 -106.59465027]
[-10.73553467 -94.45939636]
[-1.91875625 -82.32414246]
[6.89802265 -70.18888855]
[15.71480179 -58.05363464]
[19.29142189 -57.17603302]
[22.58070946 -54.42154312]
[24.65708733 -49.96542740]
[24.71973228 -44.41174316]
[32.41322327 -31.53501320]
[40.10671234 -18.65828133]
[47.80020142 -5.78154945]
[55.49369049 7.09518242]
[63.18717957 19.97191429]
[70.88066864 32.84864807]
[77.11516571 37.04483032]
[78.60505676 46.22768402]
[85.90988922 59.32880783]
[93.21472168 72.42993164]
[114.19638062 75.41114807]
[127.26902008 92.09118652]
[142.26733398 91.86679840]
[153.23623657 80.80691528]
[168.44987488 80.79300690]
[178.92617798 91.31833649]
[193.92449951 91.09394836]
[208.92282104 90.86956024]
[219.89172363 79.80967712]
[235.10534668 79.79576874]
[245.58164978 90.32109833]
[260.57998657 90.09671021]
[271.40563965 78.58233643]
[287.20477295 78.17885590]
[298.60403442 89.12564087]
[298.84045410 104.92816162]
[287.77377319 116.21105957]
[271.96963501 116.28039551]
[260.80438232 105.09503174]
[245.80604553 105.31941986]
[235.64930725 116.15345001]
[220.44206238 116.59466553]
[209.14721680 105.86788177]
[194.14889526 106.09226990]
[179.15057373 106.31665802]
[168.99382019 117.15068817]
[153.78659058 117.59190369]
[142.49172974 106.86511993]
[127.49340820 107.08950806]
[124.01297760 115.15010834]
[118.23633575 121.76200104]
[110.71587372 126.29293823]
[112.50679016 141.18563843]
[121.83640289 153.96331787]
[115.67401123 167.52333069]
[117.46492767 182.41604614]
[130.65647888 190.81347656]
[135.31469727 205.74114990]
[129.24011230 220.15063477]
[115.30095673 227.23823547]
[100.07888031 223.65739441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[5 96]
[6 95]
[8 23]
[9 22]
[10 21]
[11 20]
[25 63]
[26 62]
[27 61]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[65 92]
[66 91]
[69 88]
[70 87]
[71 86]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
