%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAACCCGCGGCCGCGCCUGCCCGCUCGCACCCCUCUCCCGCGCCCGGUUCUCCCUCGCAGCACCUCGAAGUGCGCCCCUCGCCCUCCUGCUCGCGCCCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[63.36631393 317.30361938]
[59.10263062 331.68487549]
[65.45973969 346.41467285]
[57.78030777 360.50033569]
[41.95532990 363.13656616]
[30.12438011 352.30105591]
[31.36314774 336.30590820]
[44.72135925 327.42120361]
[48.98504257 313.03991699]
[52.83251572 298.54174805]
[56.26058578 283.93872070]
[59.68865585 269.33569336]
[63.11672592 254.73268127]
[66.54479218 240.12965393]
[59.50233078 222.21861267]
[73.16287231 207.53318787]
[75.74393463 192.75691223]
[78.32500458 177.98065186]
[80.90606689 163.20437622]
[72.15988159 151.20272827]
[74.56695557 136.18072510]
[87.21469879 127.08828735]
[89.79576874 112.31201935]
[83.70788574 98.60298157]
[71.01524353 90.60942841]
[58.32260132 82.61588287]
[43.09627533 85.90171051]
[30.33800125 77.61430359]
[27.29929924 63.07807541]
[14.60665798 55.08452606]
[1.91401601 47.09097672]
[-11.29467392 54.82331848]
[-26.58431816 55.51999664]
[-40.44146729 49.02092361]
[-49.68185425 36.81953430]
[-52.18209839 21.71962166]
[-47.36766815 7.19103432]
[-36.34488297 -3.42766476]
[-21.64669800 -7.69637680]
[-6.65064621 -4.63418245]
[5.19728708 5.05524826]
[11.17453384 19.14535522]
[9.90756702 34.39833450]
[22.60020828 42.39188385]
[35.29285049 50.38543701]
[49.71529770 46.84586334]
[62.70131302 54.77164841]
[66.31615448 69.92324066]
[79.00879669 77.91679382]
[91.70143890 85.91033936]
[79.33701324 77.41793060]
[73.16899109 63.74476242]
[74.98571777 48.85518646]
[84.26045227 37.06623840]
[98.30410767 31.79596519]
[113.04491425 34.57241821]
[124.20896912 44.59059525]
[128.55940247 58.94586563]
[124.83486176 73.47610474]
[114.11737823 83.96728516]
[125.24524689 73.90892029]
[129.60046387 65.70238495]
[136.84176636 63.72672653]
[148.25486755 53.99322510]
[159.66796875 44.25972748]
[171.08108521 34.52622604]
[172.08241272 18.75369263]
[183.99838257 8.37172699]
[199.75946045 9.53976631]
[210.01486206 21.56483459]
[208.68025208 37.31267166]
[196.54742432 47.44036484]
[180.81457520 45.93933487]
[169.40147400 55.67283249]
[157.98837280 65.40633392]
[146.57525635 75.13983154]
[135.30360413 85.03678894]
[124.17573547 95.09514618]
[138.76359558 91.60308838]
[153.76339722 91.52610779]
[167.56629944 97.39804840]
[177.91340637 108.25794983]
[183.11135864 122.32853699]
[182.30947876 137.30708313]
[175.63900757 150.74229431]
[164.19160461 160.43542480]
[149.84066772 164.80015564]
[134.93482971 163.12217712]
[121.91345978 155.67610168]
[112.90759277 143.68049622]
[109.39105988 129.09791565]
[104.57203674 114.89308167]
[101.99096680 129.66935730]
[110.80733490 142.51106262]
[107.97927856 157.45953369]
[95.68233490 165.78544617]
[93.10127258 180.56172180]
[90.52020264 195.33798218]
[87.93914032 210.11425781]
[94.80246735 218.79791260]
[95.64859009 229.61184692]
[90.43645477 238.87113953]
[81.14781952 243.55772400]
[77.71974945 258.16073608]
[74.29167938 272.76376343]
[70.86360931 287.36679077]
[67.43553925 301.96981812]
[69.03527069 308.64022827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[10 107]
[11 106]
[12 105]
[13 104]
[14 103]
[16 99]
[17 98]
[18 97]
[19 96]
[22 93]
[23 92]
[24 50]
[25 49]
[26 48]
[29 45]
[30 44]
[31 43]
[60 78]
[61 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
