%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGACGUCGCUGAGCAACGGAAGAGUGGGCAGCAUUUGCUCUGAACGCUCGUGCGCGCUACCGCCCAGACGGAAGCGGAAGUGCCGGUGGAGCGCGAGUAGGAAGUGGUGAGUUCGGAGUAGAG\
) } def
/len { sequence length } bind def

/coor [
[12.11810970 234.37466431]
[16.50393867 248.71916199]
[14.46802711 263.58035278]
[6.38594007 276.21679688]
[-6.25142193 284.29745483]
[-21.11284447 286.33169556]
[-35.45684433 281.94424438]
[-46.63738251 271.94445801]
[-52.59198761 258.17700195]
[-52.22221375 243.18157959]
[-45.59817886 229.72674561]
[-59.21449661 236.01927185]
[-72.83081055 242.31179810]
[-86.44712830 248.60432434]
[-88.12825775 262.34634399]
[-96.33757782 273.35913086]
[-108.82794189 278.80825806]
[-122.26860809 277.35818481]
[-133.13330078 269.49761963]
[-146.90109253 275.45144653]
[-152.48893738 290.23492432]
[-166.92781067 296.66101074]
[-181.65139771 290.91717529]
[-187.92445374 276.41116333]
[-182.02526855 261.74911499]
[-167.45375061 255.62979126]
[-152.85490417 261.68365479]
[-139.08711243 255.72982788]
[-136.04904175 239.64793396]
[-123.92911530 228.40473938]
[-107.33580780 226.54356384]
[-92.73965454 234.98800659]
[-79.12334442 228.69548035]
[-65.50702667 222.40295410]
[-51.89070892 216.11042786]
[-46.73781586 208.26011658]
[-36.36320877 206.18077087]
[-24.93906593 196.46023560]
[-13.51492310 186.73968506]
[-2.09077978 177.01914978]
[9.33336353 167.29859924]
[20.75750732 157.57806396]
[32.18165207 147.85751343]
[43.60579300 138.13697815]
[55.02993774 128.41642761]
[66.45407867 118.69589233]
[77.87822723 108.97534943]
[89.30236816 99.25480652]
[99.16345978 87.95175934]
[107.24467468 75.31475067]
[115.32588959 62.67774582]
[123.40710449 50.04073715]
[131.48832703 37.40372849]
[139.56953430 24.76672173]
[147.65074158 12.12971306]
[155.73196411 -0.50729507]
[162.69017029 -13.79576206]
[168.47325134 -27.63613892]
[174.25631714 -41.47651672]
[180.03939819 -55.31689453]
[185.82246399 -69.15727234]
[184.00382996 -84.87360382]
[196.04981995 -93.63392639]
[201.83290100 -107.47430420]
[207.61596680 -121.31468201]
[213.39904785 -135.15505981]
[218.83801270 -149.13424683]
[223.92955017 -163.24368286]
[220.50646973 -179.28158569]
[232.86372375 -190.06260681]
[248.28923035 -184.49613953]
[250.91456604 -168.30850220]
[238.03898621 -158.15214539]
[232.94744873 -144.04269409]
[234.18199158 -139.32734680]
[232.38989258 -133.79087830]
[227.23942566 -129.37197876]
[221.45634460 -115.53160858]
[215.67326355 -101.69123077]
[209.89019775 -87.85085297]
[212.12248230 -73.12447357]
[199.66284180 -63.37419510]
[193.87977600 -49.53381729]
[188.09669495 -35.69343948]
[182.31362915 -21.85306358]
[176.53054810 -8.01268673]
[190.66268921 -13.04087448]
[204.79176331 -8.00407028]
[212.55627441 4.82995176]
[210.46035767 19.68280029]
[199.44766235 29.86712646]
[184.47654724 30.79753494]
[172.28761292 22.05512047]
[168.36897278 7.57391930]
[160.28775024 20.21092796]
[152.20654297 32.84793472]
[144.12532043 45.48494339]
[136.04411316 58.12195206]
[127.96289825 70.75895691]
[119.88168335 83.39596558]
[111.80046844 96.03297424]
[125.90357208 90.92391205]
[140.84049988 92.29799652]
[153.77479553 99.89431000]
[162.25028992 112.27033997]
[164.65751648 127.07592010]
[160.53933716 141.49954224]
[150.67781067 152.80220032]
[136.94557190 158.83758545]
[121.95034027 158.45957947]
[108.53963470 151.73997498]
[99.26010895 139.95480347]
[95.87389374 125.34201813]
[99.02291107 110.67894745]
[87.59877014 120.39949036]
[76.17462158 130.12004089]
[64.75048065 139.84057617]
[53.32633591 149.56112671]
[41.90219116 159.28166199]
[30.47805023 169.00219727]
[19.05390549 178.72274780]
[7.62976265 188.44328308]
[-3.79438066 198.16383362]
[-15.21852398 207.88436890]
[-26.64266777 217.60491943]
[-11.64718437 217.23683167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 35]
[12 34]
[13 33]
[14 32]
[19 28]
[20 27]
[37 125]
[38 124]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[48 114]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[63 80]
[64 79]
[65 78]
[66 77]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
