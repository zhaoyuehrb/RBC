%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGCUAUGGAGAGGCGGCCCCCGAGCCAGGCCCUCCGCCACCGCCCCCGGGCCAUGGCCCCCCGCCGCCACCCUUCCUCGCGCGGCCCGGCCCGCGGGGCUCCCGGCCGCCGCAGCUG\
) } def
/len { sequence length } bind def

/coor [
[109.22356415 215.72988892]
[118.85773468 202.90170288]
[118.08554840 187.92158508]
[117.12056732 172.95266724]
[115.96292877 157.99739075]
[114.80529785 143.04212952]
[113.64766693 128.08686829]
[107.47951508 123.82027435]
[93.92140961 130.23725891]
[95.14319611 115.28707886]
[88.97504425 111.02048492]
[74.57279205 115.21276855]
[60.17054749 119.40505219]
[45.76829910 123.59733582]
[38.29769897 129.06228638]
[30.94105148 127.70701599]
[16.43563461 131.52708435]
[1.93021894 135.34715271]
[-12.47202873 139.53942871]
[-26.76156044 144.10115051]
[-41.05109024 148.66287231]
[-48.07487869 162.82063293]
[-63.07894516 167.78585815]
[-77.16164398 160.61277771]
[-81.96796417 145.55705261]
[-74.64640045 131.55097961]
[-59.54069901 126.90410614]
[-45.61281204 134.37335205]
[-31.32328224 129.81163025]
[-17.03375244 125.24990082]
[-14.04355431 121.38764954]
[-8.54705143 119.43384552]
[-1.88984787 120.84172821]
[12.61556816 117.02166748]
[27.12098312 113.20159912]
[41.57601547 109.19509125]
[55.97826385 105.00280762]
[70.38050842 100.81052399]
[84.78276062 96.61824036]
[97.43939209 88.56779480]
[107.34167480 77.30081177]
[117.24395752 66.03383636]
[113.29421234 49.64554214]
[119.78586578 34.26748276]
[133.99981689 25.83574104]
[150.27841187 27.47798729]
[159.88731384 15.95978069]
[169.49621582 4.44157457]
[179.10510254 -7.07663202]
[188.71400452 -18.59483910]
[198.17381287 -30.23580551]
[207.48295593 -41.99760437]
[216.79209900 -53.75939941]
[226.10124207 -65.52119446]
[235.41038513 -77.28299713]
[244.71952820 -89.04479218]
[244.01795959 -102.00144196]
[252.11227417 -111.62264252]
[264.19876099 -113.05275726]
[273.80764771 -124.57096863]
[283.41656494 -136.08917236]
[293.02545166 -147.60737610]
[291.41226196 -158.51504517]
[296.03588867 -168.28105164]
[305.11624146 -173.71902466]
[315.46667480 -173.20652771]
[325.65576172 -184.21479797]
[335.84484863 -195.22308350]
[329.45794678 -209.01713562]
[328.84097290 -224.20555115]
[334.08801270 -238.47218323]
[344.39892578 -249.64151001]
[358.20135498 -256.01025391]
[373.39056396 -256.60726929]
[387.65029907 -251.34146118]
[398.80603027 -241.01586914]
[405.15661621 -227.20506287]
[405.73364258 -212.01509094]
[400.44909668 -197.76229858]
[390.10885620 -186.62014771]
[376.28970337 -180.28771973]
[361.09896851 -179.73069763]
[346.85314941 -185.03398132]
[336.66403198 -174.02569580]
[326.47494507 -163.01742554]
[323.72125244 -143.94905090]
[304.54364014 -137.99847412]
[294.93475342 -126.48027039]
[285.32586670 -114.96206665]
[275.71694946 -103.44386292]
[273.71652222 -86.06039429]
[256.48132324 -79.73564911]
[247.17218018 -67.97385406]
[237.86303711 -56.21205521]
[228.55389404 -44.45025635]
[219.24475098 -32.68846130]
[209.93560791 -20.92666435]
[208.23146057 -13.64291954]
[200.23220825 -8.98594093]
[190.62332153 2.53226542]
[181.01441956 14.05047226]
[171.40551758 25.56867790]
[161.79661560 37.08688736]
[166.25955200 49.73898315]
[163.83897400 63.04540634]
[155.06649780 73.48159790]
[142.17053223 78.22908020]
[128.51094055 75.93611908]
[118.60865021 87.20309448]
[108.70636749 98.47007751]
[123.05309296 106.89590454]
[128.60293579 126.92923737]
[129.76055908 141.88450623]
[130.91819763 156.83976746]
[132.07582092 171.79502869]
[135.89709473 180.22552490]
[133.06565857 187.14941406]
[133.83784485 202.12951660]
[144.73995972 213.89912415]
[142.19309998 229.73872375]
[128.15100098 237.49754333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[4 115]
[5 114]
[6 113]
[7 112]
[11 39]
[12 38]
[13 37]
[14 36]
[16 35]
[17 34]
[18 33]
[19 30]
[20 29]
[21 28]
[40 110]
[41 109]
[42 108]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[56 92]
[59 90]
[60 89]
[61 88]
[62 87]
[66 85]
[67 84]
[68 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
