%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCGUGGAGGCGGGCGGCGGGCGCACAGCAGCAGCCCGGGCGGUGGGCAGCCAGGAGCCCCCGGCCCGGCCCGGCCCGGCCCGCCGAGGGCCCCAGCGCAGGAGCCGCGCCCGGACCCAGGCGAUGCCCUCCUAGCUAGCCGUCACGGG\
) } def
/len { sequence length } bind def

/coor [
[93.38559723 333.27139282]
[77.89794922 332.31613159]
[65.95111847 322.41397095]
[62.13889694 307.37246704]
[67.92716980 292.97540283]
[81.09021759 284.75872803]
[82.01363373 269.78720093]
[82.93704987 254.81564331]
[83.86045837 239.84408569]
[84.78387451 224.87254333]
[77.84474945 211.69308472]
[86.41692352 198.39541626]
[87.34033966 183.42385864]
[88.26375580 168.45231628]
[81.32463074 155.27285767]
[89.89680481 141.97517395]
[90.82022095 127.00363159]
[91.74363708 112.03208160]
[85.33465576 98.47018433]
[73.18132782 89.67833710]
[61.02799225 80.88649750]
[48.87466049 72.09465790]
[36.72132492 63.30281448]
[24.56799316 54.51097107]
[12.41466045 45.71912766]
[1.08325732 51.16253662]
[-11.41510296 51.24618149]
[-22.68696785 46.01586914]
[-30.60015106 36.52912903]
[-33.68699646 24.64198875]
[-31.41630554 12.64601898]
[-43.19844055 3.36263347]
[-56.18314362 8.09025192]
[-69.69839478 5.78692436]
[-80.21645355 -2.83721733]
[-85.04592133 -15.43655205]
[-83.02001190 -28.66711426]
[-94.60905457 -38.19045258]
[-106.19810486 -47.71379089]
[-121.77249146 -50.49750519]
[-126.69329834 -64.55577850]
[-138.28234863 -74.07911682]
[-153.85673523 -76.86283112]
[-158.77752686 -90.92110443]
[-170.36657715 -100.44443512]
[-181.95562744 -109.96777344]
[-190.63008118 -113.02548981]
[-193.68223572 -119.80756378]
[-205.07330322 -129.56683350]
[-216.46438599 -139.32611084]
[-227.85545349 -149.08538818]
[-242.91754150 -145.35537720]
[-257.28277588 -151.22219849]
[-265.42742920 -164.42993164]
[-264.21972656 -179.89994812]
[-254.12403870 -191.68368530]
[-239.02235413 -195.25007629]
[-224.72161865 -189.22776794]
[-216.72071838 -175.93244934]
[-218.09617615 -160.47645569]
[-206.70510864 -150.71719360]
[-195.31402588 -140.95791626]
[-183.92295837 -131.19863892]
[-172.43229675 -121.55682373]
[-160.84324646 -112.03348541]
[-149.25419617 -102.51014709]
[-134.50872803 -100.40760803]
[-128.75900269 -85.66815948]
[-117.16996002 -76.14482880]
[-102.42449951 -74.04228210]
[-96.67476654 -59.30283737]
[-85.08572388 -49.77949905]
[-73.49667358 -40.25616455]
[-57.78158951 -44.90226364]
[-42.23046494 -39.23002243]
[-33.01439667 -25.28037643]
[-33.91505814 -8.41950321]
[-22.13291931 0.86388183]
[-5.43453264 -4.73210430]
[11.44319725 0.82022613]
[21.73764610 15.49314022]
[21.20650291 33.56579590]
[33.35983658 42.35763550]
[45.51316833 51.14947891]
[57.66650391 59.94132233]
[69.81983185 68.73316193]
[81.97316742 77.52500916]
[94.12650299 86.31684875]
[120.04718781 81.61769104]
[134.91378784 79.62163544]
[149.78038025 77.62557983]
[164.64698792 75.62951660]
[179.51358032 73.63346100]
[194.38018799 71.63740540]
[198.58045959 61.71335983]
[206.48400879 54.50769043]
[216.59841919 51.28930664]
[227.05171204 52.58275223]
[235.93872070 58.08399963]
[241.66828918 66.72840118]
[256.62957764 65.65133667]
[271.59085083 64.57426453]
[286.55334473 53.88994980]
[302.04077148 62.08654785]
[316.97677612 60.70252228]
[327.05718994 48.82720947]
[342.22415161 47.63637924]
[353.48330688 57.31969452]
[368.41934204 55.93566895]
[383.35534668 54.55164337]
[396.42037964 44.64017105]
[411.42947388 51.24761963]
[412.94259644 67.57681274]
[399.40316772 76.82967377]
[384.73937988 69.48765564]
[369.80334473 70.87168121]
[354.86734009 72.25570679]
[345.57919312 83.84300995]
[330.45166016 85.45938110]
[318.36080933 75.63853455]
[303.42480469 77.02256012]
[295.42471313 86.14730072]
[282.94964600 87.38984680]
[272.66793823 79.53554535]
[257.70663452 80.61261749]
[242.74536133 81.68968201]
[231.19660950 97.31329346]
[211.59107971 99.53737640]
[196.37623596 86.50400543]
[181.50964355 88.50006104]
[166.64303589 90.49611664]
[151.77644348 92.49217224]
[136.90985107 94.48823547]
[122.04324341 96.48429108]
[133.98216248 105.56515503]
[131.10850525 120.28732300]
[116.63101196 124.21188354]
[106.71518707 112.95549011]
[105.79177094 127.92704010]
[104.86835480 142.89859009]
[111.74143219 157.14891052]
[103.23530579 169.37571716]
[102.31188965 184.34727478]
[101.38847351 199.31881714]
[108.26155090 213.56913757]
[99.75542450 225.79595947]
[98.83200836 240.76750183]
[97.90859985 255.73905945]
[96.98518372 270.71060181]
[96.06176758 285.68215942]
[108.11531830 295.45413208]
[112.09048462 310.45339966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 150]
[7 149]
[8 148]
[9 147]
[10 146]
[12 144]
[13 143]
[14 142]
[16 140]
[17 139]
[18 138]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[31 78]
[32 77]
[37 73]
[38 72]
[39 71]
[41 69]
[42 68]
[44 66]
[45 65]
[46 64]
[48 63]
[49 62]
[50 61]
[51 60]
[89 134]
[90 133]
[91 132]
[92 131]
[93 130]
[94 129]
[100 126]
[101 125]
[102 124]
[104 121]
[105 120]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
