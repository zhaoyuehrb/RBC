%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGGAUCUGUCAGCCGCUCCCUCUGGGCUUCCGUCCUCCGCCCGCGCCCGACGGAGCCUGUUCGCGUCGACUGCCCAGAGUCCGCGAAUCCUCCGCUCCGAGCCCGUCCGGACUCCCCCGAUCCCAGCUUUCUCUCCUUUGAAAACACUAAGAAUA\
) } def
/len { sequence length } bind def

/coor [
[76.33057404 232.51338196]
[85.70006561 220.79960632]
[98.04620361 212.28063965]
[112.32273865 207.67840576]
[127.31983185 207.38293457]
[141.76657104 211.41923523]
[154.44165039 219.44783020]
[147.45098877 206.17640686]
[140.46034241 192.90498352]
[133.46969604 179.63356018]
[126.47903442 166.36213684]
[119.48838043 153.09069824]
[106.22210693 156.21125793]
[92.59451294 156.06762695]
[79.39695740 152.66815186]
[67.39581299 146.21025085]
[57.28799820 137.06892395]
[44.75568008 145.31155396]
[32.22336197 153.55418396]
[19.69104576 161.79681396]
[20.66417503 177.12484741]
[13.82853985 190.87875366]
[1.02289069 199.35877991]
[-14.30811691 200.28385925]
[-28.04051971 193.40515137]
[-36.48036957 180.57298279]
[-37.35738754 165.23915100]
[-30.43566322 151.52836609]
[-17.57710457 143.12878418]
[-2.24059820 142.29983521]
[11.44841099 149.26451111]
[23.98072815 141.02186584]
[36.51304626 132.77923584]
[49.04536438 124.53659821]
[44.81127167 112.35411835]
[43.44738770 99.52913666]
[45.02463531 86.72864532]
[49.46098709 74.61835480]
[56.52572632 63.82808685]
[65.85143280 54.91901779]
[76.95310211 48.35447311]
[89.25337982 44.47586060]
[88.38120270 29.50123978]
[87.50903320 14.52661705]
[86.63685608 -0.44800505]
[75.11340332 -10.92883205]
[74.44221497 -26.12765312]
[84.50509644 -37.04891586]
[83.63292694 -52.02354050]
[75.10630798 -65.35047913]
[82.09049225 -78.50610352]
[81.21832275 -93.48072815]
[72.69170380 -106.80766296]
[79.67588806 -119.96328735]
[78.80371094 -134.93791199]
[66.95662689 -151.20773315]
[76.25656128 -168.12789917]
[74.80439758 -183.05743408]
[73.35223389 -197.98698425]
[71.90007019 -212.91651917]
[70.44790649 -227.84606934]
[61.61585236 -234.30012512]
[57.89660645 -244.35290527]
[60.30070877 -254.57246399]
[67.79091644 -261.61099243]
[66.91873932 -276.58563232]
[66.04656982 -291.56024170]
[65.17439270 -306.53488159]
[64.30222321 -321.50949097]
[63.43004990 -336.48413086]
[62.55788040 -351.45874023]
[59.20980072 -357.25198364]
[59.31223297 -362.99615479]
[61.95368958 -367.02877808]
[61.66282272 -382.02593994]
[61.37195206 -397.02313232]
[61.08108139 -412.02029419]
[49.51883698 -422.79479980]
[49.04532623 -438.59201050]
[59.94147491 -450.03970337]
[75.74279022 -450.34616089]
[87.07463837 -439.32958984]
[87.21402740 -423.52590942]
[76.07826233 -412.31115723]
[76.36913300 -397.31399536]
[76.66000366 -382.31680298]
[76.95087433 -367.31964111]
[77.53250122 -352.33090210]
[78.40467072 -337.35629272]
[79.27684784 -322.38168335]
[80.14901733 -307.40704346]
[81.02119446 -292.43243408]
[81.89336395 -277.45779419]
[82.76553345 -262.48318481]
[94.56826019 -247.20324707]
[85.37744904 -229.29823303]
[86.82961273 -214.36868286]
[88.28177643 -199.43914795]
[89.73394012 -184.50959778]
[91.18610382 -169.58006287]
[99.67393494 -163.78343201]
[103.62828064 -154.05807495]
[101.50704193 -143.55134583]
[93.77833557 -135.81008911]
[94.65051270 -120.83546448]
[103.11474609 -108.57960510]
[96.19293976 -94.35289764]
[97.06511688 -79.37827301]
[105.52935028 -67.12242126]
[98.60755157 -52.89570999]
[99.47972107 -37.92108917]
[110.74244690 -28.24190140]
[111.84027100 -13.06792831]
[101.61148071 -1.32017744]
[102.48365784 13.65444469]
[103.35582733 28.62906647]
[104.22799683 43.60369110]
[121.02699280 47.49966049]
[135.87092590 56.27704239]
[147.37962341 69.11972809]
[154.48303223 84.83361053]
[156.52067566 101.95764923]
[153.30311584 118.89966583]
[145.12950134 134.08442688]
[132.75981140 146.10005188]
[139.75045776 159.37147522]
[146.74111938 172.64289856]
[153.73176575 185.91433716]
[160.72242737 199.18576050]
[167.71307373 212.45718384]
[172.78797913 214.65559387]
[176.40290833 218.25405884]
[178.26478577 222.54008484]
[178.38098145 226.78666687]
[189.08992004 237.28991699]
[199.79887390 247.79318237]
[210.50781250 258.29644775]
[225.78666687 255.58784485]
[239.72482300 262.40750122]
[246.96276855 276.13305664]
[244.71739197 291.48681641]
[233.85206604 302.56494141]
[218.54473877 305.10760498]
[204.68138123 298.13717651]
[197.59274292 284.33389282]
[200.00454712 269.00540161]
[189.29560852 258.50213623]
[178.58666992 247.99887085]
[167.87771606 237.49560547]
[171.93327332 251.93695068]
[171.65779114 266.93441772]
[167.07460022 281.21707153]
[158.57208252 293.57455444]
[146.87080383 302.95965576]
[132.96235657 308.57702637]
[118.02538300 309.95065308]
[103.32569885 306.96414185]
[90.10900879 299.87054443]
[79.49534607 289.27099609]
[72.38414001 276.06378174]
[69.37802124 261.36810303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[12 125]
[17 34]
[18 33]
[19 32]
[20 31]
[42 117]
[43 116]
[44 115]
[45 114]
[48 111]
[49 110]
[51 108]
[52 107]
[54 105]
[55 104]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[74 87]
[75 86]
[76 85]
[77 84]
[134 149]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
