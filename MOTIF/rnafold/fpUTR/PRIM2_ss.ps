%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUACUGAACAUGGCUGCUGAAAUGUAUAACAUUAUUGUGCAUUAUUGCUACCGUGAUAUGCGGAUUUAUAUUGCAAUUGCCUCUGGAUUCAGAAAAACACCCUUCACAGUGAGGUGACCAAG\
) } def
/len { sequence length } bind def

/coor [
[131.96852112 238.22773743]
[139.30584717 224.84391785]
[151.72856140 215.97605896]
[149.12384033 201.20393372]
[146.51911926 186.43182373]
[143.91438293 171.65969849]
[141.30966187 156.88758850]
[138.70494080 142.11546326]
[136.10021973 127.34335327]
[104.58240509 140.54331970]
[76.67498779 127.83544159]
[68.23281097 102.01428986]
[53.46069336 99.40956116]
[38.68857574 96.80484009]
[23.91646004 94.20011902]
[9.14434242 91.59539795]
[-3.71146417 100.39118958]
[-18.65538597 97.53919220]
[-26.96160507 85.22894287]
[-41.73371887 82.62422180]
[-52.90588379 93.23030090]
[-68.00453186 95.20114136]
[-81.21231079 87.98875427]
[-87.56449127 74.54302216]
[-102.33660889 71.93829346]
[-117.10872650 69.33357239]
[-131.88084412 66.72885132]
[-146.65295410 64.12413025]
[-161.42507935 61.51940536]
[-176.19718933 58.91468430]
[-190.96931458 56.30995941]
[-205.74142456 53.70523834]
[-219.65496826 61.69228745]
[-234.52087402 55.66032791]
[-238.93528748 40.23656464]
[-229.51185608 27.25278664]
[-213.47941589 26.66903877]
[-203.13670349 38.93312073]
[-188.36459351 41.53784180]
[-173.59246826 44.14256668]
[-158.82035828 46.74728775]
[-144.04823303 49.35201263]
[-129.27612305 51.95673370]
[-114.50400543 54.56145859]
[-99.73188782 57.16617966]
[-84.95977020 59.77090073]
[-74.39196014 49.30862045]
[-59.51392365 47.04851913]
[-45.99990463 54.06454468]
[-39.12899780 67.85210419]
[-24.35688210 70.45682526]
[-12.34123421 61.72986603]
[2.67689729 64.16099548]
[11.74906540 76.82328033]
[26.52118111 79.42800140]
[41.29329681 82.03272247]
[56.06541443 84.63745117]
[70.83753204 87.24217224]
[77.06603241 73.30327606]
[90.04821777 62.74753189]
[107.81996155 58.81302643]
[126.91083527 63.57621765]
[132.04113770 49.48082733]
[137.17143250 35.38544083]
[142.30174255 21.29005051]
[147.43203735 7.19466019]
[139.45707703 -6.25651217]
[142.04515076 -21.67844200]
[153.97424316 -31.78936386]
[169.61181641 -31.81521225]
[181.57426453 -21.74378014]
[184.21330261 -6.33049107]
[176.28285217 7.14697170]
[161.52743530 12.32496262]
[156.39712524 26.42035103]
[151.26683044 40.51573944]
[146.13652039 54.61112976]
[141.00622559 68.70652008]
[145.89837646 74.39130402]
[157.15834045 64.48104095]
[168.63609314 54.82386780]
[178.42047119 66.19338989]
[167.16047668 76.10374451]
[155.68269348 85.76088715]
[160.57484436 91.44567108]
[175.27743530 88.47348022]
[189.98002625 85.50128937]
[204.68260193 82.52909851]
[216.61366272 71.27822113]
[232.24291992 76.24393463]
[235.49234009 92.31792450]
[223.01921082 102.96466064]
[207.65480042 97.23168182]
[192.95220947 100.20387268]
[178.24961853 103.17606354]
[163.54704285 106.14826202]
[177.87471008 110.58870697]
[192.20239258 115.02915955]
[207.19720459 114.63429260]
[220.62754822 121.31452942]
[229.35943604 133.51101685]
[231.35522461 148.37765503]
[226.14921570 162.44525146]
[214.95622253 172.43109131]
[200.38818359 176.00492859]
[185.84461975 172.33280945]
[174.71929932 162.27162170]
[169.60832214 148.16859436]
[160.24032593 136.45361328]
[150.87232971 124.73863220]
[153.47706604 139.51074219]
[156.08178711 154.28286743]
[158.68650818 169.05497742]
[161.29122925 183.82710266]
[163.89595032 198.59921265]
[166.50067139 213.37132263]
[181.20718384 217.45558167]
[192.67955017 227.52273560]
[198.63990784 241.57395935]
[197.90483093 256.81936646]
[190.62026978 270.23196411]
[178.23258972 279.14868164]
[163.20135498 281.79910278]
[148.51103210 277.65698242]
[137.07839966 267.54470825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[19 51]
[20 50]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
