%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUAGUCAGUUCUGCGUCCGCUGAGGCUCGGUCACCGCCUCGCUGUCGUCGCGGCGCCCCCGCCCCGUCCUCUGUCCGUACCGCCCCCGGAGCCAGGGCCGAGUCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[11.52977753 313.18392944]
[-1.40583479 314.06219482]
[-9.61005688 326.61968994]
[-10.68062782 342.40466309]
[-24.11919403 348.82760620]
[-32.32341766 361.38510132]
[-40.52763748 373.94259644]
[-37.03946686 389.35711670]
[-45.54322433 402.67858887]
[-60.99378586 406.00360107]
[-74.22460938 397.35949707]
[-77.38607788 381.87463379]
[-68.60254669 368.73593140]
[-53.08513641 365.73837280]
[-44.88091278 353.18087769]
[-36.67669296 340.62338257]
[-36.19294357 325.73663330]
[-22.16755486 318.41549683]
[-13.96333218 305.85797119]
[-18.13909531 289.63159180]
[-9.16780472 275.08450317]
[7.86265326 271.38848877]
[15.71774673 258.60971069]
[16.55108643 251.16072083]
[23.96946144 245.59123230]
[32.17368317 233.03373718]
[40.37790680 220.47624207]
[48.58212662 207.91874695]
[56.61254883 195.24938965]
[64.46764374 182.47059631]
[72.32273865 169.69181824]
[80.17783356 156.91302490]
[88.03292084 144.13423157]
[95.88801575 131.35543823]
[103.74311066 118.57664490]
[92.77821350 121.14098358]
[80.54747772 116.84272766]
[71.37888336 105.37425232]
[69.37545776 89.08436584]
[61.17123413 76.52687073]
[45.96143723 73.16534424]
[37.82007217 60.31338501]
[41.11850357 45.83388519]
[32.91428375 33.27639008]
[18.04572296 26.35844231]
[16.87228584 10.00133228]
[30.60110092 1.03184867]
[45.10914230 8.67702866]
[45.47177887 25.07216644]
[53.67600250 37.62966156]
[68.26091003 40.42539597]
[76.76004028 53.04361343]
[73.72872925 68.32264709]
[81.93295288 80.88014221]
[96.65472412 78.00448608]
[99.53038025 63.28271103]
[102.40604401 48.56093979]
[105.28170013 33.83916855]
[99.44803619 18.51270676]
[110.01270294 5.96998072]
[126.10766602 9.11387157]
[131.17582703 24.71021271]
[120.00347137 36.71482849]
[117.12781525 51.43659973]
[114.25215912 66.15837097]
[111.37649536 80.88014221]
[116.06420135 86.73466492]
[119.37307739 72.10417175]
[132.87463379 65.56904602]
[146.40216064 72.05027771]
[149.76934814 86.66745758]
[140.44068909 98.41379547]
[125.43961334 98.44370270]
[130.12731934 104.29822540]
[145.12162781 104.71154022]
[160.11593628 105.12485504]
[175.11593628 105.12485504]
[190.11024475 104.71154022]
[205.10453796 104.29822540]
[220.09884644 103.88491058]
[227.99055481 90.62879944]
[241.80645752 83.76407623]
[257.13793945 85.48126221]
[269.09283447 95.23240662]
[273.85629272 109.90594482]
[269.90838623 124.81961060]
[258.50885010 135.21450806]
[243.29522705 137.77366638]
[229.12213135 131.68046570]
[220.51216125 118.87921143]
[205.51785278 119.29252625]
[190.52355957 119.70584106]
[175.52925110 120.11915588]
[171.57226562 123.01383209]
[165.72369385 123.35783386]
[159.70262146 120.11915588]
[144.70831299 119.70584106]
[129.71400452 119.29252625]
[116.52190399 126.43173981]
[108.66680908 139.21052551]
[100.81171417 151.98931885]
[92.95661926 164.76811218]
[85.10152435 177.54690552]
[77.24643707 190.32569885]
[69.39134216 203.10449219]
[67.52052307 212.19027710]
[61.13962555 216.12295532]
[52.93540192 228.68046570]
[44.73118210 241.23796082]
[36.52695847 253.79545593]
[28.49653816 266.46481323]
[20.64144516 279.24359131]
[25.26818466 291.98101807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[22 112]
[23 111]
[25 110]
[26 109]
[27 108]
[28 107]
[29 105]
[30 104]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[39 54]
[40 53]
[43 50]
[44 49]
[55 66]
[56 65]
[57 64]
[58 63]
[74 98]
[75 97]
[76 96]
[77 93]
[78 92]
[79 91]
[80 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
