%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUUCUCGCGAGAGUUGAGCGCGCCUGGCCGGACGGGAGGAAAGUAUCCGUUCCGCCAAGGGGGGAAAGGAGGAGCUGGAGACAGAUUGUAGGACCGAGCGCGGGCAGGCGGGAGGCAACGGAGCUACCAGCCGCUCCUCUCUGCUAUAUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[64.61217499 401.98126221]
[50.76623535 395.96524048]
[39.05757523 386.43582153]
[30.35505104 374.10015869]
[25.30444908 359.87362671]
[24.28055763 344.81195068]
[27.35935593 330.03277588]
[34.31237793 316.63284302]
[44.62366104 305.60653687]
[57.52804565 297.77200317]
[72.06793213 293.71069336]
[72.06793213 278.71069336]
[71.91974640 263.71142578]
[71.62339020 248.71437073]
[71.32702637 233.71728516]
[71.03067017 218.72021484]
[70.73431396 203.72314453]
[67.93408966 199.79464722]
[67.60817719 194.05371094]
[70.73431396 188.13043213]
[71.03067017 173.13336182]
[71.32702637 158.13629150]
[71.62339020 143.13922119]
[71.91974640 128.14215088]
[86.94739532 90.95637512]
[81.17293549 77.11239624]
[75.39847565 63.26842499]
[69.62401581 49.42445374]
[63.84955597 35.58047867]
[58.07509232 21.73650551]
[45.62152481 11.97847366]
[47.86297989 -2.74651003]
[42.08852005 -16.59048271]
[36.31406021 -30.43445778]
[18.55813599 -36.92037964]
[11.25500298 -54.01086807]
[18.58539581 -70.74313354]
[12.26851463 -84.34816742]
[5.95163345 -97.95320129]
[-10.09725285 -94.68989563]
[-26.45136833 -95.36810303]
[-42.15742874 -99.94391632]
[-56.30096817 -108.14635468]
[-68.05960083 -119.49343109]
[-76.75080872 -133.32043457]
[-81.87159729 -148.81890869]
[-83.12757111 -165.08389282]
[-80.44986725 -181.16679382]
[-73.99890900 -196.13064575]
[-64.15481567 -209.10479736]
[-73.72074127 -220.65872192]
[-83.28666687 -232.21264648]
[-98.04717255 -237.90808105]
[-100.20397186 -252.64570618]
[-109.76990509 -264.19961548]
[-119.33583069 -275.75354004]
[-128.90174866 -287.30746460]
[-143.66226196 -293.00289917]
[-145.81906128 -307.74053955]
[-155.38497925 -319.29443359]
[-170.14331055 -327.63879395]
[-166.21057129 -344.13031006]
[-149.27487183 -344.91656494]
[-143.83106995 -328.86038208]
[-134.26513672 -317.30645752]
[-120.18885040 -312.43743896]
[-117.34783173 -296.87338257]
[-107.78190613 -285.31945801]
[-98.21598053 -273.76556396]
[-88.65005493 -262.21163940]
[-74.57376862 -257.34259033]
[-71.73274994 -241.77856445]
[-62.16682434 -230.22465515]
[-52.60089874 -218.67073059]
[-45.26033020 -222.84854126]
[-37.45507431 -226.07591248]
[-29.30758667 -228.30221558]
[-20.94569969 -229.49252319]
[-12.50060749 -229.62815857]
[-10.13945580 -244.44114685]
[-7.77830315 -259.25415039]
[-14.14225006 -274.36813354]
[-4.02086496 -287.27120972]
[12.17383957 -284.68981934]
[17.78213882 -269.27947998]
[7.03469658 -256.89300537]
[4.67354441 -242.08000183]
[2.31239200 -227.26699829]
[16.83460236 -221.41239929]
[29.62351418 -212.36160278]
[39.98738098 -200.59869385]
[47.36437225 -186.75460815]
[51.35303116 -171.57330322]
[51.73410797 -155.87171936]
[48.48261261 -140.49591064]
[41.76941681 -126.27534485]
[31.95225143 -113.97825623]
[19.55666924 -104.27008820]
[25.87355042 -90.66504669]
[32.19043350 -77.06001282]
[43.56021118 -75.53915405]
[52.86557007 -68.62775421]
[57.70625687 -57.96350861]
[56.76374817 -46.16943741]
[50.15803146 -36.20891953]
[55.93249130 -22.36494446]
[61.70695496 -8.52097130]
[73.74749756 0.24684736]
[71.91906738 15.96204472]
[77.69352722 29.80601883]
[83.46798706 43.64999008]
[89.24244690 57.49396515]
[95.01691437 71.33793640]
[100.79137421 85.18191528]
[112.53202820 94.51770020]
[127.32098389 97.02507019]
[142.22033691 91.70345306]
[153.47518921 101.45935822]
[168.26414490 103.96673584]
[183.05308533 106.47410583]
[195.79249573 97.12087250]
[211.40147400 99.59780121]
[220.61950684 112.43537903]
[217.97769165 128.01730347]
[205.04336548 137.09909058]
[189.49024963 134.29267883]
[180.54571533 121.26306152]
[165.75675964 118.75568390]
[150.96780396 116.24830627]
[137.12625122 121.74927521]
[124.81360626 111.81402588]
[110.02465820 109.30664825]
[104.24769592 114.08961487]
[106.75537872 128.87850952]
[92.69377899 123.65554047]
[86.91681671 128.43850708]
[86.62046051 143.43557739]
[86.32410431 158.43264771]
[86.02774811 173.42971802]
[85.73138428 188.42678833]
[85.73138428 203.42678833]
[86.02774811 218.42385864]
[86.32410431 233.42092896]
[86.62046051 248.41799927]
[86.91681671 263.41506958]
[90.22959900 271.98605347]
[87.06793213 278.71069336]
[87.06793213 293.71069336]
[101.60781860 297.77200317]
[114.51219940 305.60653687]
[124.82348633 316.63284302]
[131.77650452 330.03277588]
[134.85530090 344.81195068]
[133.83140564 359.87362671]
[128.78080750 374.10015869]
[120.07828522 386.43582153]
[108.36962128 395.96524048]
[94.52368927 401.98126221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 148]
[12 147]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[32 107]
[33 106]
[34 105]
[37 100]
[38 99]
[39 98]
[50 74]
[51 73]
[52 72]
[54 70]
[55 69]
[56 68]
[57 67]
[59 65]
[60 64]
[79 88]
[80 87]
[81 86]
[115 132]
[116 131]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
