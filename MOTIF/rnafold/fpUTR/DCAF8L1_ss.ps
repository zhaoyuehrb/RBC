%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUACCUACUGCCUUCUCCGACCGUCCGUCCUCGGGGCAGGCGUGCUCUCUUCCCUGAGCUUUUAGGGGUUGGCUUUUCCAGUUCCAGAUCAGCUACAGCAAACAUCGUUCGAG\
) } def
/len { sequence length } bind def

/coor [
[119.97101593 170.38616943]
[114.41894531 156.45152283]
[108.86687469 142.51687622]
[95.95370483 143.24272156]
[83.39936066 140.13383484]
[72.31715393 133.46589661]
[63.68984985 123.83020782]
[58.28251266 112.08127594]
[43.37044144 113.70305634]
[28.45837212 115.32484436]
[20.13657761 119.41143799]
[13.12130547 116.78300476]
[-1.82921219 118.00038910]
[-16.77972984 119.21776581]
[-31.73024750 120.43515015]
[-44.85694504 129.26693726]
[-58.17018127 122.58808136]
[-73.12070465 123.80546570]
[-88.07122040 125.02284241]
[-103.02173615 126.24022675]
[-117.97225189 127.45760345]
[-132.92277527 128.67498779]
[-139.42477417 142.58970642]
[-152.02221680 151.37605286]
[-167.32646179 152.67054749]
[-181.22073364 146.12495422]
[-189.96755981 133.50003052]
[-191.21406555 118.19180298]
[-184.62495422 104.31811523]
[-171.97267151 95.61091614]
[-156.66061401 94.41239929]
[-142.80764771 101.04496002]
[-134.14015198 113.72447205]
[-119.18963623 112.50708771]
[-104.23912048 111.28971100]
[-89.28859711 110.07232666]
[-74.33808136 108.85494995]
[-59.38756561 107.63756561]
[-47.33022690 98.89286041]
[-32.94762802 105.48463440]
[-17.99711037 104.26725006]
[-3.04659295 103.04987335]
[11.90392494 101.83248901]
[26.83658791 100.41277313]
[41.74865723 98.79099274]
[56.66072464 97.16920471]
[58.29109192 87.88913727]
[61.88445663 79.17906189]
[67.27170563 71.44891357]
[74.19928741 65.06250000]
[82.34115601 60.32039261]
[91.31413269 57.44577789]
[100.69590759 56.57395172]
[103.52258301 41.84269714]
[106.34926605 27.11144066]
[109.17594147 12.38018513]
[112.00262451 -2.35107040]
[114.82929993 -17.08232498]
[117.65598297 -31.81358147]
[111.77137756 -47.12055588]
[122.29426575 -59.69834900]
[138.39959717 -56.60800552]
[143.51959229 -41.02860641]
[132.38723755 -28.98690033]
[129.56056213 -14.25564575]
[126.73387909 0.47560948]
[123.90719604 15.20686436]
[121.08052063 29.93811989]
[118.25383759 44.66937637]
[115.42716217 59.40063095]
[131.53115845 70.13209534]
[141.37503052 86.79347229]
[156.23771667 84.76847076]
[171.10040283 82.74346924]
[185.96308899 80.71846771]
[200.82577515 78.69347382]
[210.38621521 66.39567566]
[225.48793030 64.55376434]
[237.15309143 73.74397278]
[252.01576233 71.71897125]
[259.23934937 57.98581314]
[273.17034912 51.15156937]
[288.45202637 53.84415054]
[299.20825195 65.02819824]
[301.30307007 80.40322876]
[293.93093872 94.05721283]
[279.92660522 100.73992920]
[264.67504883 97.88173676]
[254.04077148 86.58165741]
[239.17808533 88.60665894]
[230.39677429 100.58264160]
[215.35275269 102.84799957]
[202.85076904 93.55615234]
[187.98808289 95.58115387]
[173.12541199 97.60615540]
[158.26272583 99.63115692]
[143.40003967 101.65615845]
[137.51448059 121.88536835]
[122.80152130 136.96479797]
[128.35359192 150.89945984]
[133.90567017 164.83410645]
[149.08242798 164.65969849]
[163.29595947 169.98320007]
[174.62402344 180.08467102]
[181.53456116 193.59794617]
[183.09300232 208.69549561]
[179.08856201 223.33546448]
[170.06283569 235.53794861]
[157.23645020 243.65264893]
[142.34407043 246.58210754]
[127.39979553 243.93016052]
[114.42469025 236.05545044]
[105.17353821 224.02296448]
[100.89748383 209.46000671]
[102.17482758 194.33609009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[8 46]
[9 45]
[10 44]
[12 43]
[13 42]
[14 41]
[15 40]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
