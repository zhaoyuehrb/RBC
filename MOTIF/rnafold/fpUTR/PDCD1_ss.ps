%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUCCCUUCCGCUCACCUCCGCCUGAGCAGUGGAGAAGGCGGCACUCUGGUGGGGCUGCUCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[80.45523071 113.33536530]
[77.48646545 107.27809143]
[76.34764862 100.62924194]
[61.99974823 96.25455475]
[47.65185547 91.87986755]
[33.30395889 87.50517273]
[18.95606422 83.13048553]
[4.51230526 79.08353424]
[-10.01983261 75.36641693]
[-15.70457649 77.00453186]
[-20.84376526 76.13584900]
[-24.49969292 73.47566986]
[-26.20859909 70.02475739]
[-40.09923935 64.36347198]
[-53.98987579 58.70218277]
[-67.88051605 53.04089355]
[-81.77114868 47.37960434]
[-94.88376617 55.67653275]
[-110.36670685 54.64789200]
[-122.26647186 44.68921661]
[-126.00735474 29.62981987]
[-120.15091705 15.26034927]
[-106.94906616 7.10615730]
[-91.47819519 8.30269814]
[-79.68716431 18.38987732]
[-76.10986328 33.48896790]
[-62.21922684 39.15025711]
[-48.32858658 44.81154251]
[-34.43795013 50.47283173]
[-20.54731178 56.13412094]
[-6.30271626 60.83427811]
[8.22942162 64.55139923]
[15.73797417 63.10818863]
[23.33075333 68.78259277]
[37.67864990 73.15727997]
[52.02654266 77.53196716]
[66.37443542 81.90665436]
[80.72233582 86.28134918]
[102.68739319 76.49238586]
[121.87644958 90.98608398]
[136.84147644 89.96244812]
[151.80651855 88.93881226]
[166.77154541 87.91517639]
[181.73657227 86.89154053]
[196.70161438 85.86790466]
[205.37915039 82.05352020]
[212.36825562 85.15410614]
[227.36436462 84.81265259]
[242.36047363 84.47120667]
[256.08346558 75.49279785]
[270.59646606 83.12854767]
[270.96975708 99.52344513]
[256.81933594 107.81182861]
[242.70193481 99.46732330]
[227.70581055 99.80876923]
[212.70970154 100.15021515]
[197.72525024 100.83293152]
[182.76020813 101.85657501]
[167.79518127 102.88021088]
[152.83015442 103.90384674]
[137.86512756 104.92748260]
[122.90008545 105.95111847]
[120.29006958 112.17140198]
[116.03083038 117.40236664]
[110.46857452 121.21883392]
[104.05540466 123.31058502]
[97.31260681 123.50761414]
[90.78825378 121.79388428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 32]
[9 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
