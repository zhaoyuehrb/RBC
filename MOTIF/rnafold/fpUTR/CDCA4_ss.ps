%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGCUCCUUCCUCAGCGGCGGGAAGCUGGCGGCAGCGGCGGUGGCGGUGGCUGAGCAGAGGACCCGGCGGGCGGCCUCGCGGGUCAGGACACA\
) } def
/len { sequence length } bind def

/coor [
[193.49934387 198.35563660]
[181.99134827 188.73451233]
[170.48335266 179.11338806]
[158.97535706 169.49226379]
[155.26660156 169.52549744]
[151.37402344 167.63766479]
[148.26216125 163.77261353]
[146.87715149 158.33601379]
[136.35676575 147.64387512]
[125.83639526 136.95175171]
[115.31602478 126.25961304]
[104.79564667 115.56747437]
[88.57529449 111.61122894]
[84.35691071 95.45706940]
[73.49581909 85.11121368]
[62.63473129 74.76535034]
[51.77363968 64.41949463]
[40.91255188 54.07363892]
[30.05146408 43.72778320]
[14.72253704 39.81184387]
[10.84366798 25.43117523]
[-0.01742074 15.08531857]
[-13.31720638 19.74210358]
[-27.25487137 18.17992401]
[-39.08093262 10.76500607]
[-46.48765182 -0.98760635]
[-48.05929947 -14.72328472]
[-43.54242325 -27.71948242]
[-54.06279755 -38.41161728]
[-64.58317566 -49.10374832]
[-75.10354614 -59.79588318]
[-90.29763031 -64.20614624]
[-93.70879364 -78.70487976]
[-104.22916412 -89.39701843]
[-120.17030334 -93.24566650]
[-124.54767609 -109.04979706]
[-112.85822296 -120.55147552]
[-97.12704468 -115.91876221]
[-93.53703308 -99.91738892]
[-83.01665497 -89.22525787]
[-68.57506561 -85.57976532]
[-64.41141510 -70.31626129]
[-53.89103699 -59.62412643]
[-43.37066269 -48.93199158]
[-32.85028839 -38.23985672]
[-17.40621185 -42.68300629]
[-1.72525477 -38.76206207]
[9.94387913 -27.44305229]
[14.39128113 -11.70935535]
[10.32843590 4.22422934]
[21.18952560 14.57008648]
[35.74159241 17.74602127]
[40.39731979 32.86669540]
[51.25840759 43.21255112]
[62.11949921 53.55840683]
[72.98058319 63.90426636]
[83.84167480 74.25012207]
[94.70276642 84.59597778]
[106.46014404 85.04637146]
[114.84706116 93.29855347]
[115.48777771 105.04710388]
[126.00815582 115.73923492]
[136.52853394 126.43137360]
[147.04890442 137.12350464]
[157.56927490 147.81564331]
[168.59648132 157.98426819]
[180.10447693 167.60539246]
[191.61247253 177.22651672]
[203.12046814 186.84762573]
[216.49656677 193.63583374]
[231.05621338 197.24371338]
[245.61585999 200.85159302]
[260.17550659 204.45945740]
[274.73513794 208.06733704]
[290.33401489 203.00698853]
[302.33303833 214.18534851]
[298.38864136 230.10307312]
[282.55847168 234.38536072]
[271.12728882 222.62698364]
[256.56762695 219.01910400]
[242.00798035 215.41122437]
[227.44834900 211.80335999]
[212.88870239 208.19548035]
[221.74681091 220.30059814]
[225.45782471 234.83428955]
[223.48753357 249.70433044]
[216.11955261 262.77005005]
[204.41456604 272.15051270]
[190.05760193 276.49536133]
[175.11546326 275.17910767]
[161.73919678 268.39123535]
[151.85440063 257.10891724]
[146.88407898 242.95631409]
[147.54376221 227.97082520]
[153.73847961 214.30972290]
[164.57643127 203.93963623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[21 51]
[22 50]
[28 45]
[29 44]
[30 43]
[31 42]
[33 40]
[34 39]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
