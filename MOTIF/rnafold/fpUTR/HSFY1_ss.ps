%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAGUGUACAUGCUUAGGCCUUCUGAAGCAGCAUUUGAAGCUGCAGUCCUGAAAACCAUGCAGGCCGGAAGAGUAGAUAAAGAAAUAUUUAUUUGAG\
) } def
/len { sequence length } bind def

/coor [
[130.71717834 474.10879517]
[129.31948853 459.17404175]
[127.92179871 444.23931885]
[126.52410889 429.30456543]
[125.12641907 414.36984253]
[123.72872925 399.43508911]
[122.33103943 384.50036621]
[120.93334961 369.56561279]
[119.53566742 354.63085938]
[118.13797760 339.69613647]
[103.37858582 337.22430420]
[89.75152588 331.01141357]
[78.18819427 321.47549438]
[69.48065186 309.26193237]
[64.22734833 295.19979858]
[62.79201889 280.24557495]
[65.27847290 265.41806030]
[71.52313995 251.72898865]
[81.10581207 240.11399841]
[93.37790680 231.36863708]
[107.50635529 226.09396362]
[106.10866547 211.15922546]
[104.47888184 196.24803162]
[102.61740112 181.36398315]
[100.75592041 166.47993469]
[98.89443970 151.59588623]
[97.03295898 136.71183777]
[95.17147827 121.82778931]
[79.69202423 117.23714447]
[69.12724304 101.68381500]
[70.84535980 80.27532196]
[61.00642776 68.95298004]
[51.16749954 57.63063049]
[41.32857132 46.30828857]
[31.48964310 34.98594284]
[15.85856628 35.43704224]
[3.62664819 25.69465065]
[0.56942463 10.35883045]
[8.13042355 -3.32931471]
[22.73957253 -8.90666008]
[37.49887848 -3.73975444]
[45.43944550 9.73174763]
[42.81198502 25.14701462]
[52.65091705 36.46936035]
[62.48984528 47.79170227]
[72.32877350 59.11404800]
[82.16770172 70.43639374]
[89.63507080 69.73754883]
[95.89172363 56.10470963]
[104.56981659 68.33985901]
[112.03718567 67.64101410]
[119.60442352 54.68968964]
[127.17166901 41.73836136]
[134.73890686 28.78703690]
[127.64938354 15.08513546]
[129.11584473 -0.27237210]
[138.67036438 -12.38496017]
[153.26411438 -17.38754654]
[168.24029541 -13.68382454]
[178.82005310 -2.45563698]
[181.62744141 12.71414089]
[175.76660156 26.98488808]
[163.10774231 35.80286407]
[147.69023132 36.35427856]
[140.12300110 49.30560684]
[132.55575562 62.25693130]
[124.98851013 75.20825958]
[128.40380859 104.62471771]
[110.05552673 119.96630859]
[111.91700745 134.85035706]
[113.77848816 149.73440552]
[115.63996887 164.61845398]
[117.50144958 179.50250244]
[119.36293030 194.38655090]
[123.59928131 202.68389893]
[121.04340363 209.76153564]
[122.44109344 224.69627380]
[137.30290222 227.25785828]
[150.98457336 233.57429504]
[162.55598450 243.20954895]
[171.23220825 255.50224304]
[176.42668152 269.61093140]
[177.79100037 284.57177734]
[175.23811340 299.36447144]
[168.94798279 312.98159790]
[159.35481262 324.49749756]
[147.11717224 333.13098145]
[133.07270813 338.29843140]
[134.47039795 353.23318481]
[135.86808777 368.16790771]
[137.26577759 383.10266113]
[138.66346741 398.03741455]
[140.06115723 412.97213745]
[141.45884705 427.90689087]
[142.85653687 442.84161377]
[144.25422668 457.77636719]
[145.65191650 472.71109009]
[155.57533264 485.76705933]
[148.98162842 500.78219604]
[132.65382385 502.31027222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[21 77]
[22 76]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[51 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
