%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGCCGGUUUCCGCCGAGCUGGAGCGCGCGGGCCACGGCUUCUCUGGGGACGCAGAAGCGAGAAGCGGGGACCUCGGCGCGCGCCCCGCGUCCCGCUCUUCCUGCCCGCGCCCCGGCCCCCGGCCCGCGCCCCGGCCGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[10.25073528 529.52832031]
[-4.72271967 535.28808594]
[-18.48825645 527.04858398]
[-20.48613167 511.13040161]
[-9.18374825 499.74462891]
[-7.89427662 484.80017090]
[-6.60480452 469.85568237]
[-5.31533241 454.91122437]
[-4.02586031 439.96673584]
[-15.79201317 449.27038574]
[-30.78984261 449.01522827]
[-42.23270416 439.31671143]
[-44.94260788 424.56353760]
[-37.69329834 411.43161011]
[-23.76515007 405.86325073]
[-9.46076679 410.37817383]
[-1.25290728 422.93374634]
[2.26446366 408.35198975]
[0.76447123 401.05929565]
[6.01756716 393.49597168]
[9.84786606 378.99325562]
[13.67816639 364.49053955]
[17.50846481 349.98782349]
[21.33876419 335.48510742]
[15.38336658 327.07315063]
[15.07381916 316.55053711]
[20.75735664 307.42861938]
[30.74067688 302.88623047]
[35.19136810 288.56170654]
[39.64206314 274.23721313]
[44.09275436 259.91271973]
[48.54344559 245.58821106]
[52.99413681 231.26371765]
[57.44483185 216.93920898]
[61.89552307 202.61471558]
[66.34621429 188.29020691]
[57.88722610 173.79244995]
[62.58971786 157.32897949]
[78.02529144 149.17117310]
[82.16674805 134.75422668]
[86.30820465 120.33728027]
[90.44966125 105.92033386]
[76.13251495 110.39464569]
[63.58565140 102.17417908]
[61.97058105 87.26137543]
[72.46660614 76.54534149]
[87.40969849 77.85075378]
[95.88837433 90.22275543]
[101.55399323 76.33388519]
[107.21961212 62.44501114]
[112.88523102 48.55614090]
[113.23944092 39.35432434]
[118.82506561 34.43150330]
[124.78820801 20.66774940]
[130.75135803 6.90399408]
[121.95552826 -7.50293875]
[123.43848419 -24.15104103]
[134.42228699 -36.52851868]
[150.45167542 -39.91178513]
[156.11729431 -53.80065536]
[154.16557312 -69.50101471]
[166.13693237 -78.36307526]
[171.80255127 -92.25194550]
[177.46817017 -106.14081573]
[183.13378906 -120.02968597]
[183.48799133 -129.23150635]
[189.07362366 -134.15432739]
[195.03675842 -147.91807556]
[200.99990845 -161.68183899]
[206.96304321 -175.44558716]
[212.92619324 -189.20933533]
[218.88932800 -202.97309875]
[208.99140930 -214.53996277]
[205.11291504 -229.19754028]
[207.97135925 -244.02485657]
[216.94717407 -256.09115601]
[230.21708679 -263.03512573]
[245.12425232 -263.52691650]
[251.08740234 -277.29067993]
[257.05053711 -291.05444336]
[254.63618469 -307.27487183]
[267.64288330 -317.26275635]
[282.69046021 -310.74340820]
[284.29928589 -294.42333984]
[270.81430054 -285.09127808]
[264.85116577 -271.32754517]
[258.88800049 -257.56378174]
[268.72451782 -246.35180664]
[272.73403931 -231.92150879]
[270.06973267 -217.12075806]
[261.20727539 -204.89466858]
[247.86116028 -197.69966125]
[232.65309143 -197.00994873]
[226.68994141 -183.24620056]
[220.72680664 -169.48245239]
[214.76365662 -155.71868896]
[208.80052185 -141.95494080]
[202.83737183 -128.19117737]
[197.02265930 -114.36406708]
[191.35704041 -100.47519684]
[185.69142151 -86.58632660]
[180.02580261 -72.69745636]
[182.38276672 -57.99051666]
[170.00616455 -48.13503647]
[164.34054565 -34.24616623]
[172.41735840 -23.56552124]
[174.15765381 -10.17898560]
[168.99797058 2.41253281]
[158.19360352 10.86229515]
[144.51510620 12.86713696]
[138.55195618 26.63089180]
[132.58882141 40.39464569]
[126.77410126 54.22175980]
[121.10848236 68.11063385]
[115.44286346 81.99950409]
[109.77724457 95.88837433]
[104.86660767 110.06178284]
[100.72515106 124.47872925]
[96.58369446 138.89567566]
[92.44223785 153.31262207]
[100.29795074 164.30676270]
[100.36283112 177.62391663]
[92.83818054 188.37442017]
[80.67071533 192.74090576]
[76.22002411 207.06539917]
[71.76933289 221.38990784]
[67.31864166 235.71440125]
[62.86794662 250.03890991]
[58.41725540 264.36340332]
[53.96656418 278.68792725]
[49.51586914 293.01242065]
[45.06517792 307.33691406]
[50.45081329 326.71304321]
[35.84148026 339.31539917]
[32.01118088 353.81811523]
[28.18088341 368.32083130]
[24.35058403 382.82354736]
[20.52028465 397.32626343]
[16.84623718 411.86935425]
[13.32886600 426.45114136]
[10.91861248 441.25622559]
[9.62913990 456.20068359]
[8.33966827 471.14517212]
[7.05019617 486.08963013]
[5.76072407 501.03411865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[17 140]
[18 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[28 132]
[29 131]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[39 120]
[40 119]
[41 118]
[42 117]
[48 116]
[49 115]
[50 114]
[51 113]
[53 112]
[54 111]
[55 110]
[59 105]
[60 104]
[62 102]
[63 101]
[64 100]
[65 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
