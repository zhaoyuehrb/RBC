%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCCGGCCCGCCCGGCCCAGCCGCUCCUGCUGGGCGCCCCAACCGGGUCCGGCCCGGGGGGGCGGGGGCCGCGGCCGCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[121.42801666 298.22311401]
[132.23674011 287.08978271]
[129.54315186 272.33361816]
[126.84957886 257.57745361]
[124.15599823 242.82125854]
[121.46241760 228.06509399]
[118.50286865 213.35995483]
[115.27831268 198.71064758]
[112.05375671 184.06134033]
[108.82920074 169.41203308]
[105.60464478 154.76272583]
[102.38008881 140.11341858]
[97.76061249 134.12033081]
[99.31367493 124.87729645]
[96.62009430 110.12112427]
[91.25643921 109.87326050]
[85.81356049 106.73973083]
[81.79158783 100.74744415]
[68.29388428 94.20435333]
[54.79618454 87.66126251]
[41.29848099 81.11816406]
[27.80078125 74.57507324]
[14.30307961 68.03198242]
[0.80537814 61.48888779]
[-13.38996792 68.04832458]
[-28.46692085 63.89868164]
[-37.30660248 50.99930191]
[-35.73519135 35.44087601]
[-24.49465179 24.56961250]
[-8.89242840 23.51859474]
[3.70458746 32.78408051]
[7.34847069 47.99118805]
[20.84617233 54.53427887]
[34.34387207 61.07737350]
[47.84157562 67.62046814]
[61.33927536 74.16355896]
[74.83697510 80.70664978]
[88.33467865 87.24974060]
[102.92338562 83.76123047]
[112.00099945 71.81983185]
[121.07860565 59.87843704]
[130.15621948 47.93704224]
[139.23384094 35.99564743]
[138.28941345 22.98060417]
[146.28819275 13.18656158]
[158.42846680 11.61668110]
[167.93127441 0.01079324]
[177.43408203 -11.59509468]
[186.93688965 -23.20098114]
[196.43969727 -34.80686951]
[205.94250488 -46.41275787]
[211.29870605 -62.49838257]
[228.23844910 -61.80444336]
[232.26101685 -45.33461380]
[217.54838562 -36.90995026]
[208.04557800 -25.30405998]
[198.54277039 -13.69817352]
[189.03996277 -2.09228563]
[179.53715515 9.51360226]
[170.03434753 21.11948967]
[168.25132751 38.47719574]
[151.17523193 45.07326126]
[142.09762573 57.01465607]
[133.02000427 68.95605469]
[123.94239044 80.89744568]
[114.86477661 92.83884430]
[111.37626648 107.42755127]
[114.06984711 122.18372345]
[117.02939606 136.88885498]
[120.25395203 151.53816223]
[123.47850800 166.18746948]
[126.70306396 180.83677673]
[129.92762756 195.48608398]
[133.15217590 210.13540649]
[138.15998840 218.05798340]
[136.21859741 225.37152100]
[138.91217041 240.12768555]
[141.60575867 254.88386536]
[144.29933167 269.64004517]
[146.99290466 284.39620972]
[161.03802490 290.99273682]
[168.49391174 304.60116577]
[166.49362183 319.98876953]
[155.80630493 331.23870850]
[140.54147339 334.02514648]
[126.56874084 327.27664185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[14 68]
[15 67]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
