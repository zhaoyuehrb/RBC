%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGCGCGUGCGUAGAGGGGCGGUGAGAGCUAAGAGGGGCAGCGCGUGUGCAGAGGGGCGGUGUGACUUAGGACGGGGCGAUGGCGGCUGAGAGGAGCUGCGCGUGCGCGAACAUGUAACUGGUGGGAUCUGCGGCGGCUCCCAG\
) } def
/len { sequence length } bind def

/coor [
[86.28308868 489.46554565]
[94.64929962 475.36099243]
[94.33091736 460.36437988]
[86.32521820 447.80419922]
[93.76786041 433.84289551]
[93.44948578 418.84628296]
[93.13110352 403.84967041]
[89.82169342 397.18292236]
[92.96852112 388.53213501]
[92.96852112 373.53213501]
[92.96852112 358.53213501]
[89.80136871 351.79666138]
[93.13110352 343.21459961]
[93.44948578 328.21798706]
[93.76786041 313.22134399]
[94.08624268 298.22473145]
[94.40462494 283.22811890]
[94.72300720 268.23150635]
[79.72146606 259.89923096]
[70.92533112 245.06182861]
[70.81308746 227.72483826]
[79.50470734 212.62126160]
[94.70453644 203.91940308]
[94.38615417 188.92279053]
[94.06777191 173.92616272]
[93.74939728 158.92953491]
[74.84547424 153.65641785]
[58.70046234 142.49833679]
[47.08511353 126.67912292]
[41.27338028 107.93378448]
[41.90267944 88.31828308]
[48.90399933 69.98400879]
[37.03607941 60.81054306]
[25.16815948 51.63707733]
[13.30023861 42.46361160]
[1.43231833 33.29014587]
[-9.92126369 37.08491898]
[-21.57204437 34.91758347]
[-30.61594963 27.44705772]
[-34.85640335 16.63912392]
[-33.33724976 5.25027609]
[-44.80514145 -4.41861248]
[-56.27303696 -14.08750153]
[-71.81103516 -17.06762123]
[-76.55396271 -31.18689537]
[-88.02185822 -40.85578156]
[-99.48975372 -50.52467346]
[-113.39578247 -44.23300552]
[-128.65432739 -44.60659409]
[-142.23579407 -51.57126236]
[-151.44355774 -63.74416733]
[-154.44943237 -78.70837402]
[-150.65658569 -93.49272919]
[-140.81809998 -105.16178131]
[-126.88739777 -111.39863586]
[-111.63044739 -110.96496582]
[-98.07651520 -103.94686890]
[-88.91674805 -91.73779297]
[-85.96982574 -76.76187134]
[-89.82086182 -61.99256516]
[-78.35296631 -52.32367706]
[-66.88507843 -42.65478897]
[-52.16733551 -40.36625290]
[-46.60414886 -25.55539513]
[-35.13625336 -15.88650608]
[-23.66835976 -6.21761799]
[-5.61134052 -8.90426159]
[8.96809673 2.60256338]
[10.60578346 21.42222595]
[22.47370338 30.59569168]
[34.34162521 39.76915741]
[46.20954514 48.94262314]
[58.07746506 58.11608887]
[68.45520020 49.83340836]
[80.41658020 44.06923294]
[93.36109924 41.11293793]
[106.63890076 41.11293793]
[119.58341980 44.06923294]
[131.54479980 49.83340836]
[141.92253113 58.11608887]
[153.79045105 48.94262314]
[165.65837097 39.76915741]
[177.42826843 30.47025108]
[189.09880066 21.04695129]
[200.76933289 11.62365055]
[212.33920288 2.07701898]
[223.80709839 -7.59186983]
[235.27499390 -17.26075745]
[246.74288940 -26.92964745]
[258.21078491 -36.59853745]
[269.67868042 -46.26742554]
[270.76907349 -62.03405380]
[282.74349976 -72.34855652]
[298.49771118 -71.09152222]
[308.68502808 -59.00873184]
[307.26150513 -43.26868439]
[295.07168579 -33.20967102]
[279.34756470 -34.79953003]
[267.87966919 -25.13064194]
[256.41177368 -15.46175289]
[244.94387817 -5.79286432]
[233.47598267 3.87602425]
[222.00810242 13.54491329]
[218.90016174 20.30792618]
[210.19264221 23.29418755]
[198.52210999 32.71748734]
[186.85156250 42.14078903]
[183.60079956 48.83631134]
[174.83184814 51.63707733]
[162.96392822 60.81054306]
[151.09599304 69.98400879]
[155.95114136 80.47485352]
[158.67721558 91.70867920]
[159.17048645 103.25800323]
[157.41220093 114.68335724]
[153.46923828 125.54997253]
[147.49166870 135.44436646]
[139.70692444 143.99000549]
[130.41125488 150.86174011]
[119.95836639 155.79806519]
[108.74601746 158.61116028]
[109.06439209 173.60778809]
[109.38277435 188.60440063]
[109.70115662 203.60102844]
[121.62626648 208.75357056]
[130.66662598 218.01710510]
[135.49177551 229.97734070]
[135.41107178 242.82707214]
[130.47222900 254.63922119]
[121.44889069 263.65588379]
[109.71962738 268.54986572]
[109.40124512 283.54650879]
[109.08286285 298.54312134]
[108.76448059 313.53973389]
[108.44610596 328.53634644]
[108.12772369 343.53298950]
[107.96852112 358.53213501]
[107.96852112 373.53213501]
[107.96852112 388.53213501]
[108.12772369 403.53128052]
[108.44610596 418.52789307]
[108.76448059 433.52453613]
[116.79295349 447.15737915]
[109.32753754 460.04598999]
[109.64591980 475.04260254]
[118.60321045 488.77938843]
[110.94515228 503.28063965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[5 142]
[6 141]
[7 140]
[9 139]
[10 138]
[11 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[23 124]
[24 123]
[25 122]
[26 121]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[41 66]
[42 65]
[43 64]
[45 62]
[46 61]
[47 60]
[80 111]
[81 110]
[82 109]
[83 107]
[84 106]
[85 105]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
