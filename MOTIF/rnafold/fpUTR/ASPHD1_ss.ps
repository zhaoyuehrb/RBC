%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGUGGGAGAGAGAAGCAGAGCGAGAGAGAGGAGGCUGCUGGAAGGAGAAAGAAGAGGGUGAGGAGGCGACAGAGGGAGAGGAGGAAGAAGAGGUAGAAGGAGAGAGAAAGGGGAGAGAAAGGAGAGAGGAGGGUUGGAGGUGC\
) } def
/len { sequence length } bind def

/coor [
[312.34323120 292.81301880]
[298.60119629 286.79199219]
[285.18173218 280.08264160]
[272.11932373 272.70220947]
[259.44750977 264.66964722]
[247.19879150 256.00561523]
[235.40461731 246.73226929]
[224.09527588 236.87348938]
[213.29977417 226.45454407]
[203.04585266 215.50218201]
[193.35983276 204.04452515]
[184.26654053 192.11099243]
[175.78936768 179.73220825]
[167.95004272 166.93994141]
[160.76869202 153.76704407]
[154.26376343 140.24731445]
[148.45195007 126.41547394]
[143.34815979 112.30702209]
[138.96551514 97.95817566]
[124.41625977 101.60773468]
[109.86700439 105.25730133]
[95.35758209 109.06211853]
[80.88964844 113.02175903]
[66.42170715 116.98139954]
[63.71496964 132.00259399]
[54.75188065 144.35678101]
[41.31206512 151.59101868]
[26.06401062 152.26893616]
[12.03522873 146.25595093]
[2.01114321 134.74592590]
[-2.01795530 120.02420807]
[0.74791342 105.01378632]
[9.75958347 92.69499969]
[23.22778320 85.51374817]
[38.47838974 84.89587402]
[52.48338318 90.96405792]
[62.46206665 102.51346588]
[76.93000031 98.55381775]
[91.39794159 94.59417725]
[97.77558136 89.56452179]
[106.21744537 90.70804596]
[120.76669312 87.05848694]
[135.31594849 83.40892792]
[132.40727234 68.69034576]
[130.24781799 53.84333038]
[128.84312439 38.90599823]
[128.19679260 23.91669273]
[128.31048584 8.91388988]
[129.18392944 -6.06389856]
[130.81484985 -20.97822380]
[133.19908142 -35.79080200]
[136.33050537 -50.46360779]
[140.20106506 -64.95897675]
[144.80084229 -79.23970032]
[150.11802673 -93.26911926]
[156.13896179 -107.01122284]
[162.84820557 -120.43073273]
[170.22851562 -133.49319458]
[178.26095581 -146.16508484]
[186.92492676 -158.41387939]
[196.19815063 -170.20812988]
[206.05685425 -181.51754761]
[216.47570801 -192.31312561]
[227.42797852 -202.56713867]
[238.88555908 -212.25326538]
[250.81901550 -221.34664917]
[263.19772339 -229.82392883]
[275.98992920 -237.66336060]
[289.16278076 -244.84481812]
[302.68243408 -251.34985352]
[316.51425171 -257.16177368]
[330.62265015 -262.26568604]
[344.97146606 -266.64846802]
[359.52383423 -270.29882812]
[374.24243164 -273.20748901]
[389.08944702 -275.36688232]
[404.02679443 -276.77154541]
[419.01608276 -277.41784668]
[434.01889038 -277.30410767]
[448.99667358 -276.43063354]
[463.91101074 -274.79965210]
[478.72357178 -272.41537476]
[493.39636230 -269.28393555]
[507.89172363 -265.41329956]
[522.17242432 -260.81350708]
[536.20184326 -255.49627686]
[549.94390869 -249.47529602]
[563.36340332 -242.76602173]
[576.42584229 -235.38568115]
[589.09771729 -227.35319519]
[601.34649658 -218.68920898]
[613.14074707 -209.41593933]
[624.45013428 -199.55722046]
[635.24566650 -189.13833618]
[645.49963379 -178.18603516]
[655.18572998 -166.72842407]
[664.27911377 -154.79493713]
[672.75634766 -142.41619873]
[680.59576416 -129.62397766]
[687.77716064 -116.45111847]
[694.28216553 -102.93142700]
[700.09405518 -89.09961700]
[705.19793701 -74.99119568]
[709.58062744 -60.64237213]
[713.23101807 -46.08998489]
[716.13958740 -31.37138748]
[718.29895020 -16.52436256]
[719.70355225 -1.58702350]
[720.34985352 13.40228653]
[720.23602295 28.40508842]
[719.36254883 43.38287354]
[717.73150635 58.29719162]
[715.34722900 73.10975647]
[712.21569824 87.78254700]
[708.34503174 102.27789307]
[703.74517822 116.55859375]
[698.42791748 130.58798218]
[692.40692139 144.33004761]
[685.69763184 157.74952698]
[678.31726074 170.81195068]
[670.28472900 183.48379517]
[661.62072754 195.73254395]
[652.34741211 207.52673340]
[642.48864746 218.83610535]
[632.06970215 229.63162231]
[621.11737061 239.88557434]
[609.65979004 249.57164001]
[597.72625732 258.66494751]
[585.34747314 267.14218140]
[572.55523682 274.98153687]
[559.38238525 282.16290283]
[545.86267090 288.66787720]
[532.03082275 294.47973633]
[517.92242432 299.58355713]
[503.57357788 303.96624756]
[489.02117920 307.61654663]
[474.30255127 310.52511597]
[459.45553589 312.68444824]
[444.51818848 314.08901978]
[429.52886963 314.73522949]
[414.52606201 314.62139893]
[399.54830933 313.74783325]
[384.63397217 312.11679077]
[369.82141113 309.73245239]
[355.14865112 306.60089111]
[340.65328979 302.73022461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 43]
[20 42]
[21 41]
[22 39]
[23 38]
[24 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
