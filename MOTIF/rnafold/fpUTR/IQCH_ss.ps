%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCGCGGUGUUGCCAUGGGGACGAGCGGCUCCGGCUGAAGGUUUCCGUGCUUGGAAACCGCGCCUCCGCGGAGGUAGCCGUUCCCUGACCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[90.80971527 366.49282837]
[76.86659241 358.55752563]
[74.51971436 342.68704224]
[85.56939697 331.05587769]
[86.53044891 316.08670044]
[76.53257751 305.10589600]
[77.29398346 289.91131592]
[88.87945557 279.49908447]
[89.84050751 264.52990723]
[90.80155945 249.56072998]
[89.04634094 247.75880432]
[87.86476135 245.17807007]
[87.54101562 242.02046204]
[88.28634644 238.58114624]
[90.21065521 235.22244263]
[93.30317688 232.33976746]
[96.64099121 217.71585083]
[95.03024292 210.35714722]
[100.32726288 202.68031311]
[104.13208008 188.17088318]
[107.93689728 173.66146851]
[111.74171448 159.15203857]
[115.54653931 144.64260864]
[119.35135651 130.13319397]
[123.15617371 115.62377167]
[101.32352448 125.95713043]
[81.53691101 115.40793610]
[78.48193359 94.94223022]
[65.91061401 86.75920868]
[53.33929443 78.57618713]
[40.76797104 70.39316559]
[24.37224579 70.05818939]
[16.70259857 55.56306458]
[25.64890671 41.81913757]
[42.00797272 42.96497345]
[48.95099640 57.82184219]
[61.52231598 66.00486755]
[74.09363556 74.18788910]
[86.66496277 82.37091064]
[96.43374634 76.21823883]
[108.90982056 75.58403015]
[120.96144104 81.53575134]
[123.35543823 66.72801971]
[125.74943542 51.92029572]
[128.14343262 37.11256790]
[130.53742981 22.30484009]
[132.93142700 7.49711418]
[135.32542419 -7.31061268]
[137.71943665 -22.11833954]
[131.38902283 -37.24639130]
[141.53900146 -50.12699509]
[157.72793579 -47.50969315]
[163.30204773 -32.08694077]
[152.52716064 -19.72434044]
[150.13316345 -4.91661406]
[147.73916626 9.89111233]
[145.34515381 24.69883919]
[142.95115662 39.50656509]
[140.55715942 54.31429291]
[138.16316223 69.12201691]
[135.76916504 83.92974854]
[146.37576294 94.53634644]
[161.18350220 92.14234924]
[175.95094299 89.51132202]
[190.67433167 86.64394379]
[205.39772034 83.77656555]
[220.12110901 80.90918732]
[234.84449768 78.04180145]
[246.85539246 66.87621307]
[262.44888306 71.95313263]
[265.58370972 88.04986572]
[253.03504944 98.60747528]
[237.71188354 92.76519012]
[222.98849487 95.63256836]
[208.26510620 98.49995422]
[193.54171753 101.36733246]
[178.81832886 104.23471069]
[172.74143982 108.68627930]
[163.57749939 106.95007324]
[148.76976013 109.34407806]
[137.66560364 119.42858887]
[133.86077881 133.93801880]
[130.05595398 148.44743347]
[126.25114441 162.95686340]
[122.44631958 177.46627808]
[118.64150238 191.97570801]
[114.83668518 206.48512268]
[111.26490784 221.05366516]
[107.92709351 235.67758179]
[105.77073669 250.52178955]
[104.80968475 265.49096680]
[103.84863281 280.46014404]
[114.00749969 292.26840210]
[112.81961823 307.43560791]
[101.49963379 317.04776001]
[100.53857422 332.01693726]
[110.01018524 344.96560669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 96]
[5 95]
[8 92]
[9 91]
[10 90]
[16 89]
[17 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[24 82]
[25 81]
[28 39]
[29 38]
[30 37]
[31 36]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[62 80]
[63 79]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
