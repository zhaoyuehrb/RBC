%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGUGACUGCCUCUUCCAGGGCGGGCGGUGUGGUGCACGCAUUGCUGUGCUCCAACUCCCUCAGGGCCUGUGUUGCCGCACUCUGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[112.25392151 216.47497559]
[109.73240662 201.68843079]
[107.21089935 186.90188599]
[104.68938446 172.11534119]
[102.16786957 157.32879639]
[99.64635468 142.54223633]
[97.12483978 127.75569916]
[87.20149994 126.14211273]
[78.10314941 120.95706940]
[71.11730194 112.60210419]
[67.34268188 101.94106293]
[53.46037674 107.62274170]
[39.57806778 113.30442810]
[25.69575882 118.98611450]
[19.81803513 133.65675354]
[5.25547695 139.79739380]
[-9.35220814 133.76489258]
[-15.33853912 119.13822937]
[-9.15193176 104.59513855]
[5.53720856 98.76378632]
[20.01407623 105.10380554]
[33.89638519 99.42211914]
[47.77869415 93.74043274]
[61.66099930 88.05875397]
[68.71797943 74.82247925]
[65.69850159 60.12952805]
[62.67902756 45.43658066]
[57.79384232 37.46855545]
[59.81453705 30.19676399]
[57.29302597 15.41021729]
[54.77151108 0.62366998]
[50.15822983 -7.50480223]
[52.42337036 -14.70419598]
[50.40269852 -29.56746864]
[48.38202667 -44.43074417]
[38.85620880 -57.06282043]
[44.80847549 -70.71638489]
[42.78780365 -85.57965851]
[40.76713181 -100.44293213]
[38.74645996 -115.30620575]
[36.47504044 -130.13322449]
[33.95352936 -144.91976929]
[25.33065605 -159.51712036]
[36.97048187 -171.84394836]
[52.03780365 -164.07142639]
[48.74007416 -147.44128418]
[51.26158905 -132.65473938]
[55.57807922 -126.46361542]
[53.60972977 -117.32687378]
[55.63040161 -102.46360016]
[57.65107346 -87.60033417]
[59.67174530 -72.73706055]
[69.05303192 -61.16809845]
[63.24529648 -46.45141602]
[65.26596832 -31.58814049]
[67.28664398 -16.72486877]
[69.55805969 -1.89784348]
[72.07957458 12.88870335]
[74.60108185 27.67525101]
[77.37197876 42.41710281]
[80.39145660 57.11005020]
[83.41093445 71.80300140]
[96.14255524 68.48237610]
[108.75222778 70.47944641]
[119.17567444 77.15194702]
[125.83292389 87.11873627]
[127.86569977 98.53433990]
[142.50555420 101.80153656]
[157.14540100 105.06874084]
[169.45414734 95.42359924]
[185.08116150 95.99855804]
[196.64784241 106.52214050]
[198.69276428 122.02544403]
[190.25036621 135.18827820]
[175.30690002 139.79554749]
[160.91821289 133.67184448]
[153.87820435 119.70860291]
[139.23834229 116.44139862]
[124.59849548 113.17419434]
[119.22508240 120.22477722]
[111.91139221 125.23418427]
[114.43290710 140.02073669]
[116.95441437 154.80728149]
[119.47592926 169.59382629]
[121.99744415 184.38037109]
[124.51895905 199.16691589]
[127.04047394 213.95346069]
[140.07862854 222.88552856]
[142.89991760 238.43595886]
[133.83050537 251.37896729]
[118.25110626 254.03567505]
[105.40471649 244.82992554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[11 24]
[12 23]
[13 22]
[14 21]
[25 62]
[26 61]
[27 60]
[29 59]
[30 58]
[31 57]
[33 56]
[34 55]
[35 54]
[37 52]
[38 51]
[39 50]
[40 49]
[41 47]
[42 46]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
