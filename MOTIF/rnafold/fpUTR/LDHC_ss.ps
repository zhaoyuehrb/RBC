%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGCGUGUCUCGAGUCGCACGGAGGGCAACCGUCGACGGGCUUAGCGCCUCAACUGUCGUUGGUGUAUUUUUCUGGUGUCACUUCUGUGCCUUCCUUCAAAGGUGGUGCUUUGUCCCUGUGGGUCAUCUGUACUGAUUGCGCCAAGCAAAGCAUUUGUUCUCCAA\
) } def
/len { sequence length } bind def

/coor [
[56.96712875 233.00270081]
[54.33904648 234.08970642]
[48.04954147 247.70742798]
[41.76004028 261.32513428]
[35.47053528 274.94284058]
[29.18103027 288.56057739]
[38.10192871 301.06307983]
[39.56041336 316.35256958]
[33.16416550 330.31622314]
[20.63373756 339.19790649]
[5.33975410 340.60845947]
[-8.60377979 334.16845703]
[-17.44612312 321.61026001]
[-18.80873108 306.31192017]
[-12.32506943 292.38864136]
[0.26079136 283.58569336]
[15.56331635 282.27105713]
[21.85282135 268.65335083]
[28.14232445 255.03562927]
[34.43182755 241.41792297]
[40.72133255 227.80020142]
[46.49415588 213.95555115]
[51.74212646 199.90354919]
[56.99009705 185.85154724]
[62.23806763 171.79953003]
[67.48603821 157.74752808]
[72.73400879 143.69552612]
[77.98197937 129.64352417]
[83.22994995 115.59152222]
[76.05811310 102.41712952]
[61.40775681 99.19732666]
[46.75740433 95.97751617]
[32.10705185 92.75771332]
[16.96771622 97.35240173]
[6.19795465 87.06349945]
[-8.45239830 83.84369659]
[-23.10275269 80.62389374]
[-37.75310516 77.40408325]
[-52.53863144 74.87658691]
[-67.42663574 73.04699707]
[-82.31463623 71.21739960]
[-97.20263672 69.38780212]
[-110.68000793 78.09067535]
[-125.84067535 72.84342194]
[-131.05467224 57.67127991]
[-122.32226562 44.21302795]
[-106.34220886 42.79267502]
[-95.37303925 54.49980164]
[-80.48503876 56.32939529]
[-65.59703827 58.15899277]
[-50.70903397 59.98859024]
[-57.52530670 46.62676239]
[-51.50467682 32.88805771]
[-37.06034851 28.84313965]
[-24.78021622 37.45698929]
[-23.66579437 52.41553497]
[-34.53330231 62.75373077]
[-19.88294792 65.97353363]
[-5.23259354 69.19334412]
[9.41775990 72.41314697]
[23.50920105 67.58815765]
[35.32685471 78.10736084]
[49.97720718 81.32716370]
[64.62756348 84.54696655]
[79.27791595 87.76677704]
[85.29540253 83.29018402]
[73.98216248 73.44078064]
[62.66892242 63.59138489]
[51.35568619 53.74198532]
[37.54180908 47.89589310]
[29.44771767 35.26712799]
[29.90528107 20.27410889]
[38.75441360 8.16242599]
[52.89907837 3.16958213]
[67.39049530 7.04241896]
[77.15856171 18.42595100]
[78.78608704 33.33565521]
[84.96751404 47.00276947]
[91.14894104 60.66988373]
[97.33036804 74.33699799]
[103.34785461 69.86040497]
[104.47550201 54.90284729]
[105.60314941 39.94529343]
[98.01071167 25.40958405]
[107.02999878 11.71343231]
[123.38273621 12.94626713]
[130.24664307 27.83985329]
[120.56070709 41.07294464]
[119.43305206 56.03049850]
[118.30540466 70.98805237]
[132.63105774 75.43505096]
[140.17173767 62.46825027]
[147.71243286 49.50144958]
[155.25312805 36.53464508]
[150.96878052 21.32215691]
[158.76890564 7.57684755]
[174.02584839 3.45356798]
[187.68791199 11.39858627]
[191.64965820 26.69826508]
[183.56063843 40.27557373]
[168.21992493 44.07533646]
[160.67924500 57.04214096]
[153.13854980 70.00894165]
[145.59785461 82.97574615]
[130.47682190 93.35961151]
[113.67615509 99.01729584]
[128.32650757 102.23710632]
[142.97686768 105.45690918]
[157.62721252 108.67671204]
[172.27757263 111.89651489]
[186.92791748 115.11632538]
[201.57827759 118.33612823]
[216.22863770 121.55593109]
[230.87898254 124.77574158]
[245.52934265 127.99554443]
[251.67387390 122.20496368]
[259.52700806 119.37106323]
[267.76513672 119.89175415]
[275.03106689 123.60610199]
[280.15777588 129.83326721]
[282.35556030 137.49606323]
[296.72238159 141.80812073]
[311.08923340 146.12017822]
[325.49600220 150.29690552]
[339.94140625 154.33795166]
[355.31579590 150.60453796]
[365.48806763 161.48452759]
[379.93347168 165.52557373]
[394.37890625 169.56661987]
[408.02703857 161.59770203]
[423.29116821 165.69427490]
[431.11535645 179.42590332]
[426.85763550 194.64587402]
[413.04403687 202.32443237]
[397.86993408 197.90603638]
[390.33786011 184.01202393]
[375.89242554 179.97099304]
[361.44702148 175.92994690]
[347.10586548 179.95240784]
[335.90036011 168.78337097]
[321.45495605 164.74232483]
[314.13482666 165.97393799]
[306.77716064 160.48701477]
[292.41033936 156.17495728]
[278.04348755 151.86289978]
[257.61923218 158.97981262]
[242.30952454 142.64588928]
[227.65917969 139.42608643]
[213.00881958 136.20628357]
[198.35847473 132.98648071]
[183.70811462 129.76667786]
[169.05776978 126.54686737]
[154.40740967 123.32706451]
[139.75706482 120.10726166]
[125.10670471 116.88745880]
[110.45635223 113.66764832]
[97.28195953 120.83949280]
[92.03398895 134.89149475]
[86.78601837 148.94349670]
[81.53804016 162.99549866]
[76.29006958 177.04750061]
[71.04209900 191.09951782]
[65.79412842 205.15151978]
[60.54615784 219.20352173]
[61.44377518 223.55168152]
[60.93618774 227.54768372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[22 164]
[23 163]
[24 162]
[25 161]
[26 160]
[27 159]
[28 158]
[29 157]
[30 65]
[31 64]
[32 63]
[33 62]
[35 60]
[36 59]
[37 58]
[38 57]
[39 51]
[40 50]
[41 49]
[42 48]
[81 90]
[82 89]
[83 88]
[91 104]
[92 103]
[93 102]
[94 101]
[106 156]
[107 155]
[108 154]
[109 153]
[110 152]
[111 151]
[112 150]
[113 149]
[114 148]
[115 147]
[121 145]
[122 144]
[123 143]
[124 141]
[125 140]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
