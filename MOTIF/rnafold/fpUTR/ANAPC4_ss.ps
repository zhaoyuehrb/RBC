%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCUGGAGCGCGCGACAGCGGCGGGGCGGGGCGGCCUGGAGGCUGUGGCGCGCGGCCGGCAGAGGGAGGGGAGAGGCCACUGGGGCCGUGUUAGUCUGCCGGUGGGGACUCUUGCAGGGCCGUCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.06571198 117.50354767]
[80.18709564 107.50000000]
[65.18709564 107.50000000]
[50.18709183 107.50000000]
[35.18709183 107.50000000]
[26.50416374 110.65489197]
[19.82573128 107.31437683]
[4.83011150 106.95191956]
[-11.06341076 116.15774536]
[-25.70400810 106.56083679]
[-40.70400620 106.56083679]
[-55.70400620 106.56083679]
[-70.70401001 106.56083679]
[-85.70401001 106.56083679]
[-100.70401001 106.56083679]
[-114.50418091 114.29813385]
[-127.23145294 106.56083679]
[-142.23144531 106.56083679]
[-157.23144531 106.56083679]
[-172.23144531 106.56083679]
[-187.23144531 106.56083679]
[-199.31838989 119.13964844]
[-216.42675781 119.13610077]
[-228.04228210 107.03739929]
[-243.03790283 107.39985657]
[-258.03350830 107.76231384]
[-273.02914429 108.12476349]
[-286.63830566 116.19326782]
[-299.54882812 108.76576996]
[-314.54446411 109.12822723]
[-330.23284912 115.55553436]
[-340.75198364 102.25949097]
[-330.88751221 88.47076416]
[-314.90692139 94.13260651]
[-299.91128540 93.77014923]
[-287.37469482 85.72756958]
[-273.39160156 93.12914276]
[-258.39596558 92.76669312]
[-243.40036011 92.40423584]
[-228.40473938 92.04177856]
[-220.86337280 81.52159119]
[-208.44422913 77.23171234]
[-195.64268494 80.96359253]
[-187.23144531 91.56083679]
[-172.23144531 91.56083679]
[-157.23144531 91.56083679]
[-142.23144531 91.56083679]
[-127.23145294 91.56083679]
[-114.50418091 83.82353210]
[-100.70401001 91.56083679]
[-85.70401001 91.56083679]
[-70.70401001 91.56083679]
[-55.70400620 91.56083679]
[-40.70400620 91.56083679]
[-25.70400810 91.56083679]
[-16.87329483 83.20119476]
[-4.31129694 83.13865662]
[5.19256735 91.95629883]
[20.18818855 92.31875610]
[35.18709183 92.50000000]
[50.18709183 92.50000000]
[65.18709564 92.50000000]
[80.18709564 92.50000000]
[91.53547668 80.57956696]
[107.99278259 80.38070679]
[119.62589264 92.02343750]
[134.62152100 91.66098022]
[149.61714172 91.29852295]
[164.61274719 90.93606567]
[178.22193909 82.86756134]
[191.13244629 90.29506683]
[206.12806702 89.93260956]
[221.05804443 88.48490143]
[235.84393311 85.95954132]
[250.62983704 83.43418884]
[265.41571045 80.90883636]
[280.20159912 78.38347626]
[294.99822998 64.79231262]
[312.86444092 72.03011322]
[327.51104736 68.79335022]
[342.15765381 65.55658722]
[356.80429077 62.31982040]
[371.45089722 59.08305740]
[386.09750366 55.84629440]
[400.74414062 52.60953140]
[415.30825806 49.01979828]
[429.78140259 45.07918549]
[444.25451660 41.13857651]
[450.64138794 26.86475754]
[464.73153687 20.08231926]
[479.87207031 23.99372292]
[488.91403198 36.75212479]
[487.58810425 52.33339310]
[476.52038574 63.38053513]
[460.93667603 64.67742157]
[448.19512939 55.61170959]
[433.72201538 59.55232239]
[419.24887085 63.49293137]
[416.10162354 67.20742798]
[410.54901123 68.92212677]
[403.98089600 67.25614929]
[389.33428955 70.49291229]
[374.68765259 73.72967529]
[360.04104614 76.96643829]
[345.39443970 80.20320129]
[330.74780273 83.43996429]
[316.10119629 86.67672729]
[311.32992554 95.85231781]
[302.07604980 100.94533539]
[291.33129883 100.02977753]
[282.72695923 93.16936493]
[267.94107056 95.69472504]
[253.15518188 98.22007751]
[238.36929321 100.74543762]
[223.58340454 103.27079010]
[234.72741699 113.31126404]
[235.73054504 128.27767944]
[226.02615356 139.71553040]
[211.09620667 141.16360474]
[199.37463379 131.80386353]
[197.48294067 116.92362213]
[206.49052429 104.92823029]
[191.49490356 105.29068756]
[178.95831299 113.33326721]
[164.97520447 105.93168640]
[149.97958374 106.29414368]
[134.98396301 106.65660095]
[119.98834991 107.01905823]
[112.35375214 117.21006012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[7 59]
[8 58]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[24 40]
[25 39]
[26 38]
[27 37]
[29 35]
[30 34]
[66 128]
[67 127]
[68 126]
[69 125]
[71 123]
[72 122]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[79 107]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
