%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUGGAGGACGCGGCCGCCCGAAGCUGAUAAAUCAGGGGCCGGGUCGCGGCUGCGGGCCAAGUUGGACGCCCCGACCCGUGCGAGGGCCAGGUCCGCGCCUGCCCCGCCAGGCGAAGCGAGGCGACCCGCGUGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[112.87656403 125.11495972]
[108.30448151 139.40118408]
[103.73239136 153.68739319]
[112.23010254 166.81457520]
[110.25044250 182.32635498]
[98.72814941 192.89851379]
[83.10369873 193.53923035]
[70.75447083 183.94596863]
[67.51140594 168.64837646]
[74.90576935 154.86949158]
[89.44617462 149.11531067]
[94.01825714 134.82908630]
[98.59034729 120.54287720]
[88.96266174 109.04036713]
[74.09462738 111.02567291]
[59.22658920 113.01097870]
[44.35855103 114.99629211]
[29.49051285 116.98159790]
[14.62247372 118.96690369]
[-0.19800624 121.28063965]
[-14.96367455 123.92166901]
[-29.72934341 126.56269836]
[-44.49501419 129.20372009]
[-47.83702087 132.25242615]
[-51.60546494 133.86546326]
[-55.28013992 134.08956909]
[-58.41294479 133.14077759]
[-60.67837524 131.36466980]
[-75.61968231 132.69036865]
[-90.56098175 134.01606750]
[-105.50228119 135.34176636]
[-118.60590363 145.20214844]
[-133.58911133 138.53616333]
[-135.03846741 122.20118713]
[-121.46299744 113.00125122]
[-106.82798767 120.40046692]
[-91.88668060 119.07476807]
[-76.94538116 117.74906158]
[-62.00407791 116.42336273]
[-47.13603973 114.43805695]
[-32.37037277 111.79702759]
[-17.60470200 109.15599823]
[-2.83903408 106.51496887]
[0.61478609 103.11283112]
[6.26802969 101.89492035]
[12.63716602 104.09886932]
[27.50520325 102.11355591]
[42.37324142 100.12825012]
[57.24127960 98.14294434]
[72.10932159 96.15763855]
[86.97735596 94.17232513]
[101.36122131 89.91740417]
[114.91662598 83.49470520]
[128.47203064 77.07199860]
[142.02743530 70.64929962]
[155.58282471 64.22660065]
[169.13822937 57.80390167]
[182.69363403 51.38120270]
[191.85180664 38.48009872]
[206.66632080 40.02268219]
[220.22171021 33.59998322]
[221.11329651 25.93298912]
[224.61875916 19.13330460]
[230.24514771 14.05165386]
[237.23785400 11.30452156]
[244.68150330 11.19960117]
[251.61984253 13.70205879]
[257.17849731 18.44518471]
[271.36007690 13.55817604]
[281.88647461 1.74693072]
[296.44015503 4.91552019]
[310.62173462 0.02851138]
[324.80331421 -4.85849714]
[338.98489380 -9.74550533]
[349.51129150 -21.55675125]
[364.06497192 -18.38816261]
[378.24652100 -23.27517128]
[382.87237549 -37.96896744]
[395.12026978 -47.01568604]
[410.16864014 -47.11454391]
[422.24514771 -38.43721008]
[436.42672729 -43.32421875]
[450.60830688 -48.21122742]
[464.61993408 -53.56608582]
[478.44616699 -59.38289642]
[492.27239990 -65.19970703]
[499.03402710 -71.46103668]
[506.46942139 -70.98851776]
[520.42095947 -76.49804688]
[534.37249756 -82.00756836]
[548.32397461 -87.51708984]
[555.22247314 -93.62730408]
[562.64562988 -92.99041748]
[576.71557617 -98.18995667]
[590.78558350 -103.38949585]
[604.85559082 -108.58903503]
[614.91296387 -121.54207611]
[631.12023926 -119.04090118]
[636.80480957 -103.65850830]
[626.11877441 -91.21897888]
[610.05511475 -94.51904297]
[595.98510742 -89.31950378]
[581.91516113 -84.11996460]
[567.84515381 -78.92042542]
[553.83349609 -73.56556702]
[539.88201904 -68.05603790]
[525.93048096 -62.54651642]
[511.97894287 -57.03699112]
[498.08920288 -51.37347794]
[484.26296997 -45.55666733]
[470.43673706 -39.73985291]
[468.76953125 -36.54822159]
[465.43188477 -34.03463745]
[460.77374268 -32.99446487]
[455.49533081 -34.02964783]
[441.31375122 -29.14263916]
[427.13217163 -24.25563049]
[422.96505737 -9.98071098]
[411.05041504 -0.78803730]
[395.82946777 -0.36892200]
[383.13354492 -9.09359360]
[368.95196533 -4.20658445]
[359.43994141 7.25510979]
[343.87188721 4.43607187]
[329.69030762 9.32308006]
[315.50875854 14.21008873]
[301.32717896 19.09709740]
[291.81512451 30.55879211]
[276.24710083 27.73975372]
[262.06552124 32.62676239]
[249.46356201 51.20190430]
[226.64440918 47.15538406]
[213.08901978 53.57808304]
[204.90042114 66.01979828]
[189.11633301 64.93660736]
[175.56092834 71.35930634]
[162.00552368 77.78200531]
[148.45013428 84.20470428]
[134.89472961 90.62740326]
[121.33932495 97.05010223]
[107.78392029 103.47280121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 43]
[21 42]
[22 41]
[23 40]
[28 39]
[29 38]
[30 37]
[31 36]
[52 141]
[53 140]
[54 139]
[55 138]
[56 137]
[57 136]
[58 135]
[60 133]
[61 132]
[68 130]
[69 129]
[71 127]
[72 126]
[73 125]
[74 124]
[76 122]
[77 121]
[81 117]
[82 116]
[83 115]
[84 111]
[85 110]
[86 109]
[88 108]
[89 107]
[90 106]
[91 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
