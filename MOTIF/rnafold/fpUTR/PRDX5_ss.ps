%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCUGCGCAGUGGAGGCGGCCCAGGCCCGCCUUCCGCAGGGUGUCGCCGCUGUGCCGCUAGCGGUGCCCCGCCUGCUGCGGUGGCACCAGCCAGGAGGCGGAGUGGAAGUGGCCGUGGGGCGGGU\
) } def
/len { sequence length } bind def

/coor [
[68.45420837 122.55894470]
[54.79597092 128.75994873]
[41.13772583 134.96095276]
[34.53407288 141.42446899]
[27.07056046 141.14213562]
[13.26536751 147.00869751]
[-0.53982484 152.87527466]
[-14.34501743 158.74183655]
[-28.15020943 164.60841370]
[-41.95540237 170.47499084]
[-44.56216812 174.24172974]
[-47.92121506 176.67459106]
[-51.49790573 177.70182800]
[-54.79232407 177.44061279]
[-57.40035629 176.16758728]
[-71.71067810 180.66365051]
[-86.02100372 185.15972900]
[-100.33132935 189.65579224]
[-114.64164734 194.15185547]
[-128.95198059 198.64793396]
[-143.26229858 203.14399719]
[-157.51681519 207.81398010]
[-171.71340942 212.65718079]
[-182.09411621 225.35258484]
[-198.23320007 222.44364929]
[-203.52816772 206.92283630]
[-192.53199768 194.75663757]
[-176.55662537 198.46058655]
[-162.36001587 193.61738586]
[-156.98982239 188.42655945]
[-147.75836182 188.83367920]
[-133.44804382 184.33760071]
[-119.13771820 179.84153748]
[-104.82739258 175.34547424]
[-90.51707458 170.84939575]
[-76.20674896 166.35333252]
[-61.89642334 161.85726929]
[-47.82197571 156.66978455]
[-34.01678085 150.80322266]
[-20.21158791 144.93664551]
[-6.40639544 139.07008362]
[7.39879704 133.20350647]
[21.20398903 127.33693695]
[34.93672562 121.30270386]
[48.59496689 115.10169983]
[62.25320816 108.90070343]
[63.60956573 86.59183502]
[77.05197144 68.73611450]
[98.11591339 61.26380539]
[119.80560303 66.65662384]
[129.81538391 55.48504257]
[139.82516479 44.31345749]
[149.83494568 33.14187622]
[159.84472656 21.97029305]
[163.29132080 6.52906227]
[177.54699707 2.21339035]
[187.55677795 -8.95819283]
[197.56655884 -20.12977600]
[207.57633972 -31.30135727]
[210.88954163 -49.36620712]
[227.69184875 -54.27537155]
[237.42662048 -65.68738556]
[240.49617004 -81.20796967]
[254.64253235 -85.86949921]
[264.37731934 -97.28151703]
[273.97241211 -108.81122589]
[283.42639160 -120.45690918]
[292.88040161 -132.10260010]
[302.33438110 -143.74829102]
[311.78836060 -155.39396667]
[321.24237061 -167.03965759]
[330.55386353 -178.79959106]
[339.72146606 -190.67204285]
[348.88906860 -202.54449463]
[358.05667114 -214.41693115]
[357.44543457 -230.44834900]
[369.69177246 -240.81207275]
[385.40133667 -237.55796814]
[392.52310181 -223.18229675]
[385.59384155 -208.71284485]
[369.92910767 -205.24932861]
[360.76150513 -193.37689209]
[351.59390259 -181.50444031]
[342.42630005 -169.63198853]
[340.81170654 -162.33975220]
[332.88806152 -157.58566284]
[323.43405151 -145.93997192]
[313.98007202 -134.29429626]
[304.52606201 -122.64860535]
[295.07208252 -111.00292206]
[285.61807251 -99.35723114]
[283.82638550 -92.10647583]
[275.78933716 -87.54674530]
[266.05453491 -76.13472748]
[263.68127441 -61.43041229]
[248.83863831 -55.95261383]
[239.10386658 -44.54059601]
[239.73258972 -32.39560318]
[231.62583923 -22.79762650]
[218.74792480 -21.29157639]
[208.73814392 -10.11999321]
[198.72836304 1.05158973]
[188.71858215 12.22317219]
[185.98796082 26.86533737]
[171.01631165 31.98007584]
[161.00653076 43.15165710]
[150.99674988 54.32324219]
[140.98696899 65.49481964]
[130.97718811 76.66640472]
[135.93232727 85.40856171]
[138.47505188 95.13035583]
[138.43461609 105.17909241]
[135.81375122 114.88011169]
[130.78842163 123.58210754]
[123.69600677 130.70085144]
[130.39169312 144.12350464]
[137.08738708 157.54615784]
[151.05534363 166.13848877]
[150.32774353 182.52148438]
[135.65306091 189.84173584]
[122.12737274 180.56877136]
[123.66473389 164.24185181]
[116.96903992 150.81919861]
[110.27335358 137.39653015]
[102.52230835 138.69987488]
[94.66767120 138.41365051]
[87.03205109 136.54962158]
[79.92907715 133.18434143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 29]
[23 28]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[56 103]
[57 102]
[58 101]
[59 100]
[61 97]
[62 96]
[64 94]
[65 93]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 84]
[73 83]
[74 82]
[75 81]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
