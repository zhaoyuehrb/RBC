%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGCUCCUCCUCUGUGGAUGGUCACUGCCCCUCCACCAGGCUUCCUGCUGGAGGAGUUUCCUUCCCAGCCAGGCCGGCCCAGAAGCCAG\
) } def
/len { sequence length } bind def

/coor [
[224.56976318 212.05282593]
[238.73115540 207.10740662]
[226.47660828 198.45719910]
[214.22206116 189.80699158]
[201.96749878 181.15678406]
[189.71295166 172.50659180]
[177.45840454 163.85638428]
[165.20385742 155.20617676]
[152.94931030 146.55596924]
[140.69476318 137.90576172]
[128.44021606 129.25555420]
[116.18566895 120.60535431]
[101.57558441 127.85437012]
[84.45938873 125.18703461]
[71.28415680 112.43398285]
[67.67333221 93.42320251]
[53.22957611 89.37625122]
[38.78581619 85.32929993]
[24.34205627 81.28234863]
[9.89829731 77.23539734]
[-7.71180439 82.27093506]
[-19.59430504 69.48022461]
[-34.16781235 65.92876434]
[-48.74131775 62.37729645]
[-64.32048035 67.49800110]
[-76.36269379 56.36619568]
[-72.47996521 40.43332291]
[-56.66650391 36.08975983]
[-45.18984985 47.80378723]
[-30.61634445 51.35525513]
[-16.04283714 54.90671921]
[-5.41526508 48.85868073]
[6.85654640 51.85224533]
[13.94524860 62.79163361]
[28.38900757 66.83858490]
[42.83276749 70.88553619]
[57.27652740 74.93248749]
[71.72028351 78.97943878]
[83.02597809 69.12138367]
[80.98348236 54.26109695]
[78.94097900 39.40080643]
[76.89848328 24.54051781]
[68.75169373 9.67222214]
[80.78367615 -2.27213740]
[95.59203339 5.98310280]
[91.75877380 22.49801826]
[93.80126953 37.35830688]
[95.84377289 52.21859741]
[97.88626862 67.07888794]
[117.06893921 74.45044708]
[126.94027710 90.81053925]
[124.83586884 108.35080719]
[137.09042358 117.00101471]
[149.34497070 125.65121460]
[161.59951782 134.30142212]
[173.85406494 142.95162964]
[186.10861206 151.60183716]
[198.36315918 160.25202942]
[210.61770630 168.90223694]
[222.87225342 177.55244446]
[235.12680054 186.20265198]
[247.38134766 194.85285950]
[260.45626831 202.20451355]
[274.21444702 208.18052673]
[287.97259521 214.15653992]
[301.73077393 220.13255310]
[315.06726074 212.42254639]
[330.20941162 214.02513123]
[341.37240601 224.11730957]
[344.41574097 238.67326355]
[358.17391968 244.64927673]
[371.93209839 250.62528992]
[387.32403564 246.10113525]
[400.37460327 255.43185425]
[401.07250977 271.45971680]
[388.88241577 281.88952637]
[373.15548706 278.72042847]
[365.95608521 264.38345337]
[352.19790649 258.40744019]
[338.43972778 252.43142700]
[325.72445679 260.14245605]
[310.72943115 258.87258911]
[299.22286987 248.90000916]
[295.75476074 233.89073181]
[281.99658203 227.91471863]
[268.23840332 221.93869019]
[254.48023987 215.96267700]
[257.61282349 230.63192749]
[249.72041321 243.38771057]
[235.19511414 247.13148499]
[222.12020874 239.77984619]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[22 31]
[23 30]
[24 29]
[39 49]
[40 48]
[41 47]
[42 46]
[63 87]
[64 86]
[65 85]
[66 84]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
