%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCCUUUCCUUACCUCCCUCCAUGCUGUCCACUUCCUCUGUAAAGCUCUCAACCCUGUCCCCUUCCCCCUCUCUCCUGGGAAAGAGCCCUCCCAUGCCUAGCUGCUGCUCUUAGGGACCCUGUGGCUAGGUGCGCGGAUGGAAAUCCAGGAUCUCCGCCUGGUUCGGCCCGCCUGCCUCCACUCCUGCCUCUACC\
) } def
/len { sequence length } bind def

/coor [
[286.56604004 428.64639282]
[291.69503784 423.82147217]
[284.22924805 410.81140137]
[276.76342773 397.80133057]
[269.29763794 384.79125977]
[261.83184814 371.78118896]
[244.21205139 370.71264648]
[230.63656616 359.18539429]
[226.65621948 341.66540527]
[234.04652405 325.11706543]
[226.17375183 312.34918213]
[218.30096436 299.58126831]
[210.42817688 286.81338501]
[194.29681396 287.67709351]
[179.84654236 280.24755859]
[171.06210327 266.46710205]
[170.41932678 250.04362488]
[178.18812561 235.45307922]
[170.11476135 222.81105042]
[162.04139709 210.16902161]
[148.67027283 203.60685730]
[147.76370239 187.81164551]
[139.69033813 175.16961670]
[131.61697388 162.52758789]
[118.24584961 155.96540833]
[117.33927155 140.17019653]
[109.26591492 127.52817535]
[101.19255829 114.88614655]
[102.21668243 129.85113525]
[107.12886047 144.02401733]
[107.91529083 159.00338745]
[104.51421356 173.61273193]
[97.19275665 186.70457458]
[86.52597046 197.25064087]
[73.35165405 204.42263794]
[58.70455933 207.65722656]
[43.73510742 206.70037842]
[29.61904907 201.62722778]
[17.46509552 192.83624268]
[8.22785378 181.01788330]
[2.63284612 167.10041809]
[1.11951935 152.17695618]
[3.80673504 137.41963196]
[10.48343086 123.98751068]
[20.62520027 112.93560791]
[33.43547821 105.13197327]
[47.90712357 101.18964386]
[62.82006073 102.80344391]
[50.50642776 94.23755646]
[38.19279480 85.67166901]
[25.87915993 77.10578156]
[13.56552696 68.53989410]
[0.66447228 72.43034363]
[-11.93680191 68.23836517]
[-19.70523071 57.70820999]
[-19.98297119 44.82026291]
[-32.15984726 36.06105804]
[-44.33672333 27.30184937]
[-56.01081085 36.86103821]
[-69.76161194 43.07213974]
[-84.65158081 45.51167679]
[-99.66548920 44.01331711]
[-113.77965546 38.67921829]
[-126.03176117 29.87306976]
[-135.58644104 18.19528961]
[-141.79223633 4.44208908]
[-144.22602844 -10.44881725]
[-142.72186279 -25.46214294]
[-137.38232422 -39.57425308]
[-128.57144165 -51.82295990]
[-116.88997650 -61.37312698]
[-103.13437653 -67.57360840]
[-88.24253082 -70.00164795]
[-73.22978973 -68.49169159]
[-59.11974335 -63.14669800]
[-46.87443542 -54.33109283]
[-37.32878113 -42.64593887]
[-31.13360786 -28.88794708]
[-28.71132088 -13.99516678]
[-30.22707176 1.01699221]
[-35.57751465 15.12497425]
[-23.40064049 23.88418198]
[-11.22376442 32.64338684]
[5.23849249 29.22515297]
[19.36012840 38.95850372]
[22.13141632 56.22626114]
[34.44504929 64.79214478]
[46.75868225 73.35803986]
[59.07231522 81.92392731]
[71.38594818 90.48981476]
[78.71626282 88.90346527]
[72.01673889 75.48271942]
[64.16932678 62.69921112]
[70.05948639 48.90406799]
[84.72000122 45.73085403]
[95.78752899 55.85556793]
[93.92807770 70.74089050]
[93.37688446 85.73075867]
[100.70719910 84.14440918]
[108.37744141 71.25382233]
[116.04769135 58.36322784]
[123.71793365 45.47263718]
[131.38818359 32.58204269]
[139.05842590 19.69145203]
[146.72866821 6.80086136]
[154.39891052 -6.08973026]
[162.06915283 -18.98032188]
[169.73939514 -31.87091446]
[162.85282898 -47.31477737]
[166.48881531 -63.65877914]
[179.02215576 -74.50896454]
[195.38706970 -75.74171448]
[202.85285950 -88.75177765]
[210.31864929 -101.76184845]
[212.95788574 -118.50910950]
[229.78126526 -120.60913086]
[236.45639038 -105.02455139]
[223.32872009 -94.29605865]
[215.86293030 -81.28598785]
[208.39714050 -68.27591705]
[214.96795654 -56.64788437]
[214.93229675 -43.18349838]
[208.19244385 -31.40245628]
[196.41722107 -24.43728638]
[182.62998962 -24.20067024]
[174.95974731 -11.31007767]
[167.28950500 1.58051372]
[159.61926270 14.47110558]
[151.94902039 27.36169624]
[144.27876282 40.25228882]
[136.60852051 53.14287949]
[128.93827820 66.03347015]
[121.26803589 78.92406464]
[113.59779358 91.81465912]
[113.83458710 106.81278992]
[121.90794373 119.45481110]
[129.98130798 132.09684753]
[143.92990112 139.56324768]
[144.25900269 154.45422363]
[152.33236694 167.09625244]
[160.40573120 179.73828125]
[174.35432434 187.20469666]
[174.68342590 202.09565735]
[182.75679016 214.73768616]
[190.83015442 227.37971497]
[204.75820923 226.03027344]
[217.84571838 230.79277039]
[227.55638123 240.68356323]
[232.03459167 253.73118591]
[230.45974731 267.36911011]
[223.19607544 278.94058228]
[231.06886292 291.70849609]
[238.94165039 304.47637939]
[246.81443787 317.24429321]
[259.30648804 316.53973389]
[270.84432983 321.18994141]
[279.25823975 330.25421143]
[282.99426270 341.96810913]
[281.40090942 354.08688354]
[274.84191895 364.31539917]
[282.30770874 377.32546997]
[289.77349854 390.33551025]
[297.23931885 403.34558105]
[304.70510864 416.35565186]
[329.02722168 413.85842896]
[351.37185669 423.63549805]
[365.97113037 443.09869385]
[369.08822632 467.16790771]
[359.97369385 489.59698486]
[370.45397949 500.32843018]
[380.93426514 511.05987549]
[396.73843384 510.99633789]
[407.89956665 522.18579102]
[407.79598999 537.98974609]
[396.48913574 549.03198242]
[380.68716431 548.76135254]
[369.76510620 537.33837891]
[370.20281982 521.54016113]
[359.72253418 510.80871582]
[349.24227905 500.07727051]
[343.29336548 503.68939209]
[336.87680054 506.39526367]
[330.12979126 508.13565063]
[323.19680786 508.87213135]
[316.22653198 508.58761597]
[309.36859131 507.28707886]
[302.77032471 504.99722290]
[296.57379150 501.76608276]
[290.91244507 497.66186523]
[285.90853882 492.77175903]
[281.67025757 487.19976807]
[278.28952026 481.06478882]
[275.83993530 474.49786377]
[274.37515259 467.63949585]
[273.92782593 460.63665771]
[274.50872803 453.63949585]
[276.10659790 446.79827881]
[278.68829346 440.26007080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 164]
[3 163]
[4 162]
[5 161]
[6 160]
[10 154]
[11 153]
[12 152]
[13 151]
[18 145]
[19 144]
[20 143]
[22 141]
[23 140]
[24 139]
[26 137]
[27 136]
[28 135]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[56 83]
[57 82]
[58 81]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[105 128]
[106 127]
[107 126]
[108 125]
[112 120]
[113 119]
[114 118]
[169 180]
[170 179]
[171 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
