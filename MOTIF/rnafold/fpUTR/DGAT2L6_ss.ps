%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUAAGAGAUUAUAGCAAAGCAUCUAUAAUCAACUCAGCUUAAGAAGUUUUGACCUUCUGGUUAGGCUUCUUGCCACAACAGAACAGCACCAUAACC\
) } def
/len { sequence length } bind def

/coor [
[37.06452560 216.05175781]
[27.45466614 218.28411865]
[17.61609840 218.96827698]
[7.79656029 218.08807373]
[-1.75686157 215.66673279]
[-10.80394745 211.76625061]
[-19.11738586 206.48582458]
[-26.48848343 199.95928955]
[-32.73241043 192.35173035]
[-37.69282150 183.85533142]
[-41.24578094 174.68452454]
[-56.02681351 177.23817444]
[-70.80784607 179.79183960]
[-85.58887482 182.34548950]
[-100.36990356 184.89913940]
[-115.15093231 187.45278931]
[-129.93196106 190.00643921]
[-144.71299744 192.56010437]
[-151.44230652 206.54208374]
[-165.12075806 213.86871338]
[-180.48872375 211.72271729]
[-191.63690186 200.92930603]
[-194.27857971 185.63874817]
[-187.39799500 171.73057556]
[-173.64085388 164.55278015]
[-158.29707336 166.86535645]
[-147.26664734 177.77906799]
[-132.48561096 175.22541809]
[-117.70458984 172.67176819]
[-102.92355347 170.11810303]
[-88.14252472 167.56445312]
[-73.36149597 165.01080322]
[-58.58046722 162.45715332]
[-43.79943466 159.90348816]
[-41.12764740 138.34997559]
[-31.17705345 119.01963806]
[-15.15442944 104.29090118]
[4.98528242 95.98202515]
[26.77748489 95.12667847]
[47.54953003 101.84539032]
[64.74850464 115.32881165]
[77.07283783 106.77832031]
[89.39717102 98.22783661]
[99.92097473 87.53907776]
[108.27875519 75.08325958]
[116.63654327 62.62744141]
[124.99432373 50.17162323]
[133.35211182 37.71580124]
[141.70989990 25.25998116]
[150.06767273 12.80416203]
[158.42546082 0.34834248]
[166.78324890 -12.10747719]
[175.14103699 -24.56329727]
[177.38580322 -33.60506821]
[183.95747375 -37.27096176]
[192.69857788 -49.46083069]
[201.43969727 -61.65069962]
[210.18081665 -73.84056854]
[211.25415039 -90.20455170]
[226.08010864 -97.21333313]
[239.40701294 -87.65687561]
[237.52528381 -71.36605072]
[222.37068176 -65.09945679]
[213.62956238 -52.90958405]
[204.88844299 -40.71971512]
[196.14733887 -28.52984810]
[187.59684753 -16.20551300]
[179.23905945 -3.74969316]
[170.88128662 8.70612621]
[162.52349854 21.16194725]
[154.16571045 33.61776733]
[145.80793762 46.07358551]
[137.45014954 58.52940369]
[129.09236145 70.98522186]
[120.73458099 83.44104767]
[112.37679291 95.89686584]
[126.82121277 91.85227203]
[141.62020874 94.29963684]
[153.99348450 102.77916718]
[161.61640930 115.69779205]
[163.05688477 130.62846375]
[158.04426575 144.76612854]
[147.52029419 155.45472717]
[133.46211243 160.68614197]
[118.51088715 159.47756958]
[105.47550964 152.05604553]
[96.80497742 139.81587219]
[94.12823486 125.05663300]
[97.94765472 110.55217743]
[85.62332153 119.10266113]
[73.29898834 127.65314484]
[77.19689178 136.75709534]
[79.60502625 146.35964966]
[80.46382904 156.21879578]
[79.75275421 166.08628845]
[77.49078369 175.71377563]
[73.73590851 184.85919189]
[68.58364105 193.29272461]
[62.16460419 200.80262756]
[54.64120102 207.20056152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[41 91]
[42 90]
[43 89]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
