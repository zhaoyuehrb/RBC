%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAAGAAGAAGCUUUUGAUUGGACAGUCGCUAGUCCGACCUCAGAGAACUCAGCCAAUCAUAAUGCUUAU\
) } def
/len { sequence length } bind def

/coor [
[41.56344604 394.78125000]
[29.95486069 404.63827515]
[15.33885765 408.91522217]
[0.24774957 406.87112427]
[-12.70383739 398.86010742]
[-21.27196312 386.27014160]
[-23.97214890 371.28253174]
[-20.33657074 356.49392700]
[-10.99511242 344.46658325]
[2.43375897 337.28430176]
[17.62341118 336.19143677]
[22.68625450 322.07168579]
[27.74909782 307.95190430]
[32.81194305 293.83215332]
[23.16880035 280.72381592]
[23.12797928 264.28637695]
[32.89917374 250.86471558]
[48.86722946 245.75410461]
[53.31792068 231.42961121]
[57.76861191 217.10510254]
[62.21930313 202.78060913]
[66.66999817 188.45610046]
[71.12068939 174.13160706]
[75.57138062 159.80709839]
[67.10691071 145.43754578]
[71.59938049 129.03059387]
[86.78763580 120.65509796]
[90.61793518 106.15237427]
[94.13530731 91.57060242]
[97.33811951 76.91652679]
[92.72587585 61.78253174]
[103.00228119 51.00084686]
[106.20509338 36.34676743]
[109.09187317 21.62717056]
[111.66127014 6.84886980]
[102.36155701 -5.92966270]
[104.90394592 -21.52811813]
[117.78009033 -30.69220734]
[133.35078430 -27.98504066]
[142.37823486 -15.01273251]
[139.50659180 0.52847886]
[126.43956757 9.41826725]
[123.87017059 24.19656944]
[125.88996124 31.54915428]
[120.85917664 39.54958344]
[117.65635681 54.20365906]
[122.49768829 68.28949738]
[111.99219513 80.11933899]
[108.78938293 94.77342224]
[110.30455017 102.96515656]
[105.12065125 109.98267365]
[101.29035187 124.48539734]
[109.44222260 135.43661499]
[109.69383240 148.88996887]
[102.17971802 159.81449890]
[89.89588165 164.25779724]
[85.44519043 178.58229065]
[80.99449921 192.90679932]
[76.54380798 207.23129272]
[72.09311676 221.55580139]
[67.64241791 235.88031006]
[63.19173050 250.20480347]
[72.32564545 260.75753784]
[74.95214844 274.35357666]
[70.47710419 287.34243774]
[60.19835281 296.29193115]
[46.93170166 298.89498901]
[41.86885834 313.01477051]
[36.80601501 327.13452148]
[31.74317169 341.25427246]
[42.77752304 351.75012207]
[48.58285522 365.82913208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 70]
[12 69]
[13 68]
[14 67]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[27 52]
[28 51]
[29 49]
[30 48]
[32 46]
[33 45]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
