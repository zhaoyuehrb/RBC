%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACCCACAGCUCCUCUGCCCCUGGCCCAUGAGAAUUUCAGCUGGAGAGAUAGCAUGCCCUGGUAAGUGAAGUCCUGCCACUUCGAGAC\
) } def
/len { sequence length } bind def

/coor [
[200.22355652 237.40248108]
[197.97219849 227.22845459]
[199.00764465 216.82968140]
[203.24536133 207.24440002]
[192.91691589 196.36676025]
[182.58847046 185.48910522]
[164.45765686 186.25592041]
[151.14669800 173.46501160]
[151.19201660 154.69113159]
[140.13772583 144.55198669]
[128.91006470 134.60513306]
[117.51238251 124.85357666]
[106.11470795 115.10202026]
[89.62314606 112.56111145]
[84.01532745 96.84551239]
[72.28785706 87.49316406]
[60.56038284 78.14081573]
[48.83291245 68.78846741]
[39.97083664 65.79274750]
[36.86940002 58.90529633]
[25.47172165 49.15373611]
[19.90332794 48.14405441]
[15.80605984 45.27463913]
[13.65903950 41.48283768]
[13.46799374 37.75605774]
[3.13954544 26.87841225]
[-7.18890285 16.00076866]
[-12.62307358 14.42081451]
[-16.40173531 11.14318466]
[-18.14524078 7.14973450]
[-17.94997215 3.42317224]
[-27.09850311 -8.46398067]
[-36.24703217 -20.35113335]
[-51.90617752 -23.83979225]
[-58.81217575 -38.32035828]
[-51.66733551 -52.68457794]
[-35.95256805 -55.91345215]
[-23.72289658 -45.53006744]
[-24.35988045 -29.49966240]
[-15.21134949 -17.61251068]
[-6.06281996 -5.72535801]
[3.68874145 5.67231941]
[14.01718998 16.54996490]
[24.34563828 27.42760849]
[35.22328186 37.75605774]
[46.62096024 47.50761795]
[58.18525696 57.06099701]
[69.91272736 66.41334534]
[81.64020538 75.76569366]
[93.36767578 85.11803436]
[105.13387299 84.53701782]
[114.21611786 92.03994751]
[115.86626434 103.70433807]
[127.26394653 113.45590210]
[138.66162109 123.20746613]
[147.41500854 126.50728607]
[150.27687073 133.49768066]
[161.33117676 143.63684082]
[173.13540649 140.78732300]
[184.70446777 144.05635071]
[193.10069275 152.49034119]
[196.25282288 163.84031677]
[193.46611023 175.16065979]
[203.79455566 186.03829956]
[214.12300110 196.91595459]
[234.11878967 192.68499756]
[252.67283630 200.93705750]
[262.78979492 218.39118958]
[260.75509644 238.32977295]
[272.79840088 247.27175903]
[284.84167480 256.21374512]
[296.88497925 265.15573120]
[308.92828369 274.09771729]
[320.97155762 283.03970337]
[336.56744385 280.48150635]
[349.35537720 289.76828003]
[351.74853516 305.39031982]
[342.32708740 318.07937622]
[326.68060303 320.30722046]
[314.09188843 310.75213623]
[312.02957153 295.08300781]
[299.98629761 286.14099121]
[287.94299316 277.19900513]
[275.89968872 268.25701904]
[263.85641479 259.31503296]
[251.81312561 250.37306213]
[243.07876587 255.71762085]
[233.08428955 258.07992554]
[222.82148743 257.20626831]
[213.31481934 253.16505432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[9 58]
[10 57]
[11 55]
[12 54]
[13 53]
[15 50]
[16 49]
[17 48]
[18 47]
[20 46]
[21 45]
[25 44]
[26 43]
[27 42]
[31 41]
[32 40]
[33 39]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
