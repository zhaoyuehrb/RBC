%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAAUCGGCUGGUUUAUAUUGGCGCGGCCCAGACGGCAGAGGUCUCUGCGGCGCGGUCCUCGGAGACACGCGGCGGUGUCCUGUGUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[27.36966705 188.87139893]
[18.50594330 194.02674866]
[8.65379429 196.81692505]
[-1.56828153 197.07414246]
[-11.52038956 194.78939819]
[-20.58129883 190.11262512]
[-28.18722153 183.34278870]
[-33.86688995 174.90888977]
[-48.25278091 179.15696716]
[-62.63866806 183.40504456]
[-77.02455902 187.65313721]
[-91.41044617 191.90121460]
[-105.72253418 196.39166260]
[-119.95674133 201.12319946]
[-134.19094849 205.85472107]
[-141.04566956 220.09509277]
[-155.98956299 225.23861694]
[-170.15666199 218.23370361]
[-175.14190674 203.23628235]
[-167.98760986 189.14402771]
[-152.93830872 184.31762695]
[-138.92247009 191.62051392]
[-124.68827057 186.88899231]
[-110.45406342 182.15745544]
[-104.98796844 176.95323181]
[-95.65853119 177.51533508]
[-81.27263641 173.26724243]
[-66.88674927 169.01916504]
[-52.50086212 164.77107239]
[-38.11497498 160.52299500]
[-35.14886093 140.31700134]
[-22.69655609 124.04308319]
[-3.84241176 115.84240723]
[16.68970680 117.84267426]
[33.71993637 129.60655212]
[46.71031570 122.10655975]
[59.70069885 114.60655975]
[72.69107819 107.10655975]
[85.68145752 99.60655975]
[92.83802795 87.59510040]
[106.81854248 87.40306091]
[119.80892181 79.90306091]
[132.79930115 72.40306091]
[134.54022217 57.09700394]
[144.83961487 45.88202667]
[159.59339905 42.91724014]
[173.10220337 49.13416672]
[186.09259033 41.63416672]
[199.08297729 34.13416672]
[212.07334900 26.63416672]
[220.15600586 13.03338146]
[235.04679871 13.37044334]
[248.03717041 5.87044382]
[261.02755737 -1.62955618]
[265.18292236 -13.98207760]
[276.32684326 -19.92407799]
[288.12026978 -16.70257568]
[301.35656738 -23.75955963]
[314.59283447 -30.81654167]
[318.95620728 -46.00655746]
[332.82281494 -53.58895874]
[347.96585083 -49.06524277]
[355.40121460 -35.11924744]
[350.71765137 -20.02488518]
[336.69381714 -12.73737431]
[321.64981079 -17.58026505]
[308.41354370 -10.52328300]
[295.17727661 -3.46630073]
[286.83816528 11.87373447]
[268.52755737 11.36082458]
[255.53717041 18.86082458]
[242.54679871 26.36082458]
[235.39329529 39.42515945]
[219.57334900 39.62454605]
[206.58297729 47.12454605]
[193.59259033 54.62454605]
[180.60220337 62.12454605]
[179.23182678 76.93197632]
[169.28735352 88.22673798]
[154.42520142 91.53879547]
[140.29930115 85.39344025]
[127.30892181 92.89344025]
[114.31854248 100.39344025]
[107.16197205 112.40489960]
[93.18145752 112.59693909]
[80.19107819 120.09693909]
[67.20069885 127.59693909]
[54.21031570 135.09693909]
[41.21993637 142.59693909]
[43.37342453 152.69538879]
[42.95369339 162.99803162]
[39.99410629 172.86041260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 24]
[14 23]
[15 22]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[41 83]
[42 82]
[43 81]
[47 77]
[48 76]
[49 75]
[50 74]
[52 72]
[53 71]
[54 70]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
