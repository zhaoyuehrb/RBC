%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCUCCGACCCCGAGGCCGAAGGCCUUCCAGGUCACCUGAGAGUCUCCGCCCAAUGGGGCGGCCCUGGCCAGAAGCGGAGGAGGUGGCACCCGGGACCGAGCUGGGGUCUUGGAGGAAGAGAGG\
) } def
/len { sequence length } bind def

/coor [
[38.38930893 244.21672058]
[25.54846382 241.60302734]
[17.46724892 254.24003601]
[9.38603497 266.87704468]
[1.30482030 279.51406860]
[-6.77639437 292.15106201]
[-7.69278240 307.94570923]
[-21.06799126 314.49957275]
[-29.14920616 327.13656616]
[-29.35173607 343.53445435]
[-43.78443527 351.32095337]
[-57.60017776 342.48593140]
[-56.58651733 326.11816406]
[-41.78621292 319.05535889]
[-33.70500183 306.41833496]
[-33.36663437 291.52758789]
[-19.41340256 284.06985474]
[-11.33218765 271.43283081]
[-3.25097322 258.79583740]
[4.83024120 246.15882874]
[12.91145515 233.52182007]
[3.64704108 219.50207520]
[1.38243461 202.79573059]
[6.61421013 186.71118164]
[18.34963799 174.45458984]
[34.29466248 168.49081421]
[51.30224991 170.04783630]
[58.74862671 157.02664185]
[66.19500732 144.00544739]
[73.64138794 130.98426819]
[81.08776855 117.96306610]
[74.05969238 102.72853088]
[77.76412964 86.36509705]
[90.66841888 75.64294434]
[89.55627441 60.68423462]
[88.44413757 45.72551727]
[87.33199310 30.76680374]
[86.21984863 15.80808926]
[85.10771179 0.84937453]
[83.99556732 -14.10933971]
[71.99423218 -5.11112547]
[57.41479111 -8.63815975]
[50.85348892 -22.12701988]
[57.07903290 -35.77409363]
[71.56674194 -39.66078186]
[83.78711700 -30.96213913]
[84.52892303 -45.94378662]
[85.27072906 -60.92543411]
[86.01253510 -75.90708160]
[86.75434113 -90.88872528]
[87.49614716 -105.87036896]
[88.23795319 -120.85202026]
[87.86693573 -135.84742737]
[86.38513947 -150.77406311]
[84.90334320 -165.70068359]
[81.27066803 -171.43284607]
[81.17638397 -177.25137329]
[83.73618317 -181.39939880]
[82.99437714 -196.38104248]
[82.25257111 -211.36268616]
[72.91088867 -224.84100342]
[80.15632629 -239.55274963]
[96.53540802 -240.36375427]
[105.19873810 -226.43971252]
[97.23421478 -212.10449219]
[97.97602081 -197.12284851]
[98.71782684 -182.14120483]
[99.82997131 -167.18247986]
[101.31176758 -152.25585938]
[102.79356384 -137.32922363]
[113.61982727 -147.71151733]
[128.61958313 -147.62594604]
[139.32667542 -137.12080383]
[139.69781494 -122.12538910]
[129.52352905 -111.10342407]
[114.54636383 -110.27590942]
[103.21959686 -120.11021423]
[102.47779083 -105.12856293]
[101.73598480 -90.14691925]
[100.99417877 -75.16527557]
[100.25237274 -60.18362808]
[99.51056671 -45.20198059]
[98.76876068 -30.22033310]
[98.95428467 -15.22148132]
[100.06642151 -0.26276678]
[101.17856598 14.69594765]
[102.29071045 29.65466309]
[103.40284729 44.61337662]
[104.51499176 59.57209015]
[105.62712860 74.53080750]
[117.11338806 80.31558228]
[124.43923187 90.88581848]
[125.82367706 103.67179108]
[139.44000244 109.96431732]
[153.05630493 116.25685120]
[166.67262268 122.54937744]
[180.28894043 128.84190369]
[193.90525818 135.13444519]
[207.52157593 141.42697144]
[221.13789368 147.71949768]
[235.20959473 140.89884949]
[250.36065674 144.76914978]
[259.43722534 157.50296021]
[258.15359497 173.08776855]
[247.11589050 184.16491699]
[231.53575134 185.50408936]
[218.76965332 176.47299194]
[214.84536743 161.33581543]
[201.22904968 155.04328918]
[187.61273193 148.75076294]
[173.99641418 142.45822144]
[160.38009644 136.16569519]
[146.76377869 129.87316895]
[133.14746094 123.58063507]
[119.53115082 117.28810883]
[107.93739319 124.84637451]
[94.10895538 125.40944672]
[86.66257477 138.43063354]
[79.21620178 151.45182800]
[71.76982117 164.47302246]
[64.32344055 177.49421692]
[72.63505554 187.91432190]
[76.86870575 200.51918030]
[76.53398895 213.77970886]
[71.69329071 226.09513855]
[62.95162201 235.98637390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[8 15]
[9 14]
[27 121]
[28 120]
[29 119]
[30 118]
[31 117]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[46 83]
[47 82]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[53 70]
[54 69]
[55 68]
[58 67]
[59 66]
[60 65]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
