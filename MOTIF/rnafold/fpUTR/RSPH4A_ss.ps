%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAUAGGACGCAGCAACUCACAGAGCAACCAGGACCCAGAAAUCGCUUAAGAGACCGCGGCAAAGUAACUUAACUGAGUUGCCUUCUUCCAUAUUUUCACGCCCCUUUCAUCCAGAACAUUUUUUUUCUUGAACUGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[234.20207214 226.73007202]
[235.20202637 219.09402466]
[223.61968994 209.56254578]
[212.03733826 200.03105164]
[200.45498657 190.49957275]
[188.87263489 180.96807861]
[177.29028320 171.43659973]
[165.70794678 161.90512085]
[154.12559509 152.37362671]
[142.44136047 142.96731567]
[130.65661621 133.68724060]
[118.87187195 124.40716553]
[104.07284546 130.58216858]
[88.17354584 128.49548340]
[75.46913147 118.71080017]
[69.39167786 103.87143707]
[71.58299255 87.98622131]
[59.60129929 78.96186066]
[47.61960983 69.93750000]
[35.63791656 60.91313934]
[23.65622711 51.88877869]
[11.67453671 42.86441803]
[-0.30715415 33.84005737]
[-12.28884506 24.81569672]
[-29.52639580 27.58582497]
[-43.18747711 17.26427078]
[-45.15280914 0.59462810]
[-57.32589340 -8.16984463]
[-69.49897766 -16.93431664]
[-84.89961243 -14.59802628]
[-97.12000275 -23.65985870]
[-99.25238800 -38.35640717]
[-111.42547607 -47.12088013]
[-123.90210724 -40.71010971]
[-137.85755920 -40.31813431]
[-150.55319214 -45.96458435]
[-159.52229309 -56.48971176]
[-163.04936218 -69.79209137]
[-160.49800110 -83.24807739]
[-172.47969055 -92.27243805]
[-185.58633423 -84.62446594]
[-200.58213806 -82.58265686]
[-215.17776489 -86.42729950]
[-227.15701294 -95.54241180]
[-234.71328735 -108.51421356]
[-236.72203064 -123.35033417]
[-232.90800476 -137.78579712]
[-244.88969421 -146.81015015]
[-260.50274658 -144.35896301]
[-273.22671509 -153.73321533]
[-275.51269531 -169.37130737]
[-266.00445557 -181.99543762]
[-250.34306335 -184.11595154]
[-237.82014465 -174.47477722]
[-235.86534119 -158.79183960]
[-223.88365173 -149.76748657]
[-211.06233215 -157.41883850]
[-196.24829102 -159.58438110]
[-181.69444275 -155.90330505]
[-169.62620544 -146.90634155]
[-161.90119934 -133.93954468]
[-159.72334290 -118.96289825]
[-163.45533752 -104.25412750]
[-151.47363281 -95.22976685]
[-136.79498291 -101.90605164]
[-120.65741730 -100.28022003]
[-107.45388794 -90.70014191]
[-100.82625580 -75.69183350]
[-102.66100311 -59.29396439]
[-90.48791504 -50.52949142]
[-75.87390137 -53.16883469]
[-63.40380478 -44.45382309]
[-60.73450851 -29.10740280]
[-48.56142044 -20.34292984]
[-36.38833618 -11.57845783]
[-24.04223633 -15.41084003]
[-11.56393528 -11.35056305]
[-3.60384417 -0.67407155]
[-3.26448369 12.83400536]
[8.71720695 21.85836601]
[20.69889832 30.88272667]
[32.68058777 39.90708923]
[44.66227722 48.93144989]
[56.64397049 57.95581055]
[68.62565613 66.98017120]
[80.60735321 76.00453186]
[92.83502960 69.99132538]
[106.46035004 69.83178711]
[118.82547760 75.55702972]
[127.51840210 86.05027008]
[130.84341431 99.26461792]
[128.15194702 112.62242126]
[139.93669128 121.90248871]
[151.72143555 131.18255615]
[160.46777344 134.06359863]
[163.65707397 140.79127502]
[175.23942566 150.32276917]
[186.82177734 159.85424805]
[198.40412903 169.38574219]
[209.98646545 178.91722107]
[221.56881714 188.44869995]
[233.15116882 197.98019409]
[244.73352051 207.51167297]
[267.85147095 209.16705322]
[275.50482178 230.26924133]
[288.04370117 238.50187683]
[299.07510376 233.84324646]
[310.86169434 235.10954285]
[320.45498657 241.86657715]
[325.51217651 252.32142639]
[324.86785889 263.79678345]
[337.04095459 272.56124878]
[349.21405029 281.32571411]
[361.38711548 290.09017944]
[366.72656250 290.61853027]
[370.87988281 292.94778442]
[373.35260010 296.30508423]
[374.03805542 299.83367920]
[385.62039185 309.36514282]
[397.20275879 318.89663696]
[408.78509521 328.42813110]
[423.77026367 324.40017700]
[438.24902344 329.98101807]
[446.65396118 343.02465820]
[445.75323486 358.51556396]
[435.89318848 370.49716187]
[420.86520386 374.36230469]
[406.44784546 368.62475586]
[398.18487549 355.49069214]
[399.25360107 340.01046753]
[387.67126465 330.47900391]
[376.08892822 320.94750977]
[364.50656128 311.41601562]
[352.62265015 302.26327515]
[340.44958496 293.49880981]
[328.27648926 284.73434448]
[316.10339355 275.96984863]
[298.30715942 280.02978516]
[282.89016724 269.67636108]
[279.81106567 251.04077148]
[267.27218628 242.80812073]
[260.73101807 246.02664185]
[253.40739441 246.74325562]
[246.23405457 244.81825256]
[240.14173889 240.45147705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 94]
[11 93]
[12 92]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[24 79]
[27 75]
[28 74]
[29 73]
[32 70]
[33 69]
[39 64]
[40 63]
[47 56]
[48 55]
[105 141]
[106 140]
[111 137]
[112 136]
[113 135]
[114 134]
[118 133]
[119 132]
[120 131]
[121 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
