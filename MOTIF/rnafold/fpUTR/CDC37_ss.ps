%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGUUUCCCGCGCUCGGCGGAAGCGGAAGGGGCGGGGCUCCGCGCUCCUAGUCUCCACUGCUGCCGCCGUCGCCGCCACCCGAGCCGGAGCGGGCUGGGCCGCCAAGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[99.34803009 131.83236694]
[93.09291840 131.08081055]
[86.48117065 144.54502869]
[79.86943054 158.00923157]
[73.25768280 171.47343445]
[66.64594269 184.93763733]
[68.28522491 201.25465393]
[54.81769562 210.61187744]
[40.09759521 203.38342285]
[39.26770020 187.00527954]
[53.18173218 178.32589722]
[59.79347610 164.86169434]
[66.40522003 151.39749146]
[73.01696777 137.93327332]
[79.62870789 124.46907043]
[71.93690491 115.03953552]
[68.34442139 103.41310120]
[69.37602997 91.28809357]
[74.88103485 80.43567657]
[65.55120087 68.69028473]
[56.22136307 56.94490051]
[46.89152527 45.19951248]
[37.56168747 33.45412445]
[28.23185158 21.70873642]
[13.58978844 15.71536160]
[11.73206902 0.93706161]
[2.40223217 -10.80832672]
[-6.92760515 -22.55371475]
[-16.25744247 -34.29910278]
[-25.58728027 -46.04449081]
[-41.04267883 -47.98572159]
[-50.33714294 -60.03012085]
[-48.39123154 -74.75251770]
[-57.72106552 -86.49790955]
[-67.05090332 -98.24329376]
[-76.38074493 -109.98868561]
[-85.71057892 -121.73406982]
[-95.35239410 -133.22473145]
[-105.29923248 -144.45239258]
[-115.24607086 -155.68005371]
[-125.19290924 -166.90771484]
[-135.13975525 -178.13537598]
[-151.00227356 -180.53538513]
[-158.89083862 -194.50498962]
[-152.75402832 -209.32792664]
[-137.29946899 -213.63328552]
[-124.38258362 -204.11837769]
[-123.91209412 -188.08222961]
[-113.96524811 -176.85456848]
[-104.01840973 -165.62690735]
[-94.07157135 -154.39924622]
[-84.12473297 -143.17158508]
[-79.37202454 -141.99740601]
[-75.35669708 -137.74468994]
[-73.96518707 -131.06390381]
[-64.63535309 -119.31851959]
[-55.30551529 -107.57313538]
[-45.97567749 -95.82774353]
[-36.64584351 -84.08235931]
[-21.86495590 -82.64672852]
[-12.23585796 -70.86814880]
[-13.84189129 -55.37432861]
[-4.51205444 -43.62894058]
[4.81778288 -31.88355064]
[14.14762020 -20.13816261]
[23.47745705 -8.39277554]
[37.45219040 -3.23950934]
[39.97724152 12.37889957]
[49.30707550 24.12428665]
[58.63691330 35.86967468]
[67.96675110 47.61506271]
[77.29658508 59.36045074]
[86.62642670 71.10584259]
[108.68175507 69.36746979]
[126.54524994 82.41948700]
[131.59182739 103.95995331]
[145.61708069 109.27902222]
[159.64231873 114.59809875]
[173.87036133 119.34811401]
[188.27813721 123.52137756]
[202.00276184 116.15439606]
[216.55484009 120.59191895]
[223.49356079 133.72164917]
[237.90132141 137.89491272]
[252.30909729 142.06817627]
[261.55722046 141.45468140]
[267.04486084 146.55172729]
[281.33538818 151.11030579]
[295.62591553 155.66888428]
[309.91647339 160.22746277]
[323.84271240 152.75515747]
[338.94943237 157.39869690]
[346.27407837 171.40316772]
[341.47106934 186.45994568]
[327.38995361 193.63612366]
[312.38479614 188.67419434]
[305.35787964 174.51799011]
[291.06735229 169.95941162]
[276.77682495 165.40083313]
[262.48626709 160.84225464]
[248.13583374 156.47593689]
[233.72805786 152.30268860]
[219.32029724 148.12942505]
[206.43836975 155.51803589]
[191.76739502 151.49099731]
[184.10487366 137.92915344]
[169.69709778 133.75588989]
[166.35763550 135.22996521]
[162.11441040 135.07769775]
[157.77932739 132.88211060]
[154.32324219 128.62333679]
[140.29800415 123.30426788]
[126.27275848 117.98519135]
[122.21708679 122.80627441]
[117.29152679 126.73439789]
[111.68893433 129.61576843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[19 73]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[76 113]
[77 112]
[78 111]
[79 107]
[80 106]
[83 103]
[84 102]
[85 101]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
