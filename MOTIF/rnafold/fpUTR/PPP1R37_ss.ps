%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGACGACUACGACCACUAGGAGAGCGGACGGAGGCGGCGCCUGAAGCGGCGGCGGAGCCCAUGCCCCGGGACGGCGGGCGGACCCGGAGAGACAAAUCCGGGGCCCGGGGCAUGUCCCCGGGGCCCCCGUGAGGAGGCGGCGGCGGCU\
) } def
/len { sequence length } bind def

/coor [
[95.55464172 210.20132446]
[95.55464172 195.20132446]
[95.55464172 180.20132446]
[87.81733704 167.47404480]
[95.55464172 153.67387390]
[95.55464172 138.67387390]
[89.00905609 135.01255798]
[86.09017944 149.72581482]
[71.19504547 151.49642944]
[64.90827179 137.87745667]
[75.91787720 127.68991089]
[69.37229156 124.02858734]
[56.59068680 131.87910461]
[48.88092041 145.69468689]
[33.98647308 145.76272583]
[21.20487022 153.61323547]
[13.49510479 167.42881775]
[-1.39934492 167.49685669]
[-14.18094635 175.34738159]
[-21.89071083 189.16294861]
[-36.78516006 189.23098755]
[-49.56676483 197.08151245]
[-54.67950058 212.28807068]
[-69.80485535 217.63627625]
[-83.33994293 209.02343750]
[-84.90180969 193.05659485]
[-73.29232025 181.98414612]
[-57.41728210 184.29991150]
[-44.63568115 176.44938660]
[-37.84014130 163.19534302]
[-22.03146553 162.56578064]
[-9.24986458 154.71525574]
[-2.45432544 141.46119690]
[13.35435009 140.83163452]
[26.13595200 132.98112488]
[32.93149185 119.72706604]
[48.74016571 119.09750366]
[61.52176666 111.24698639]
[65.69962311 101.73218536]
[71.88003540 94.78250885]
[58.36549759 88.27425385]
[42.57488251 89.25765228]
[34.46509552 76.76442719]
[20.95056343 70.25617218]
[7.43603134 63.74791336]
[-6.07850170 57.23965836]
[-20.91125107 62.69539642]
[-35.22212601 55.98910141]
[-40.52074051 41.09949875]
[-33.66351318 26.86032486]
[-18.71872520 21.71943092]
[-4.55284691 28.72681808]
[0.42975426 43.72512436]
[13.94428730 50.23337936]
[27.45882034 56.74163818]
[40.97335434 63.24989319]
[55.79731750 61.80098343]
[64.87375641 74.75971985]
[78.38829041 81.26797485]
[91.75735474 72.61362457]
[107.68228912 72.45118713]
[121.22511292 80.83102417]
[134.60406494 74.04844666]
[147.98303223 67.26586914]
[150.89407349 62.78819275]
[154.85116577 60.17588425]
[158.95169067 59.51289749]
[162.39422607 60.50601196]
[176.16297913 54.55440903]
[189.93171692 48.60280609]
[203.63905334 42.51107788]
[217.28352356 36.27985382]
[220.52186584 23.16881180]
[230.58615112 14.45857716]
[243.63816833 13.17350960]
[254.86891174 19.56105804]
[268.63766479 13.60945702]
[282.40640259 7.65785551]
[296.17517090 1.70625424]
[302.85989380 -4.60900784]
[310.28601074 -4.22313786]
[324.17327881 -9.89263821]
[338.06057739 -15.56213856]
[351.94787598 -21.23163986]
[346.29464722 -28.80796623]
[344.10763550 -39.56191635]
[346.66558838 -51.96408081]
[354.61123657 -64.04734802]
[365.74472046 -74.09945679]
[376.87823486 -84.15156555]
[388.01174927 -94.20368195]
[399.14526367 -104.25579071]
[410.27877808 -114.30789948]
[408.50198364 -129.72291565]
[416.15454102 -143.22172546]
[430.29388428 -149.61376953]
[445.48315430 -146.44119263]
[455.88177490 -134.92388916]
[457.49127197 -119.49050903]
[449.69271851 -106.07550049]
[435.48486328 -99.83721161]
[420.33090210 -103.17438507]
[409.19738770 -93.12227631]
[398.06387329 -83.07016754]
[386.93035889 -73.01805878]
[375.79684448 -62.96594620]
[364.66333008 -52.91383743]
[369.32788086 -38.65684128]
[373.99203491 -24.40111160]
[388.91406250 -22.87376785]
[403.83609009 -21.34642220]
[418.75814819 -19.81907845]
[433.68017578 -18.29173279]
[448.60220337 -16.76438904]
[463.52426147 -15.23704338]
[476.82238770 -24.21140099]
[492.08633423 -19.27262878]
[497.60690308 -4.20933008]
[489.14916992 9.42322063]
[473.20120239 11.16729736]
[461.99691772 -0.31500545]
[447.07485962 -1.84235024]
[432.15283203 -3.36969495]
[417.23080444 -4.89703989]
[402.30874634 -6.42438459]
[387.38671875 -7.95172930]
[372.46469116 -9.47907448]
[357.61737061 -7.34435177]
[343.73007202 -1.67485118]
[329.84277344 3.99464941]
[315.95550537 9.66415024]
[302.12677002 15.47500324]
[288.35800171 21.42660332]
[274.58926392 27.37820625]
[260.82052612 33.32980728]
[255.32264709 49.19482040]
[239.75749207 56.34190369]
[223.51475525 49.92433167]
[209.87026978 56.15555954]
[205.06341553 61.82917404]
[195.88331604 62.37155533]
[182.11457825 68.32315826]
[168.34582520 74.27475739]
[154.76560974 80.64482880]
[141.38665771 87.42740631]
[128.00769043 94.20999146]
[129.27456665 117.95872498]
[110.55464172 138.67387390]
[110.55464172 153.67387390]
[118.29193878 167.47404480]
[110.55464172 180.20132446]
[110.55464172 195.20132446]
[110.55464172 210.20132446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[5 149]
[6 148]
[12 38]
[13 37]
[15 35]
[16 34]
[18 32]
[19 31]
[21 29]
[22 28]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[46 53]
[62 146]
[63 145]
[64 144]
[68 143]
[69 142]
[70 141]
[71 139]
[72 138]
[76 135]
[77 134]
[78 133]
[79 132]
[81 131]
[82 130]
[83 129]
[84 128]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
