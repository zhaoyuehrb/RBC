%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCGCCUUUGCCUCCAAGGCUUUGCUGGCUUGUGCGGCAUCCUGCUCCGUCUGCAGGUUGUGCUUCCGGUGCGGAGGUCAGGGACAAG\
) } def
/len { sequence length } bind def

/coor [
[79.96139526 354.23461914]
[65.31696320 350.05606079]
[53.64234161 340.27737427]
[46.96023941 326.59271240]
[46.42836761 311.37310791]
[52.13887787 297.25537109]
[63.10239029 286.68554688]
[77.41940308 281.49490356]
[78.44303894 266.52984619]
[79.46668243 251.56483459]
[80.49031830 236.59979248]
[73.63959503 223.37417603]
[82.30061340 210.13418579]
[83.32424927 195.16915894]
[84.34788513 180.20413208]
[85.37152100 165.23910522]
[86.39515686 150.27406311]
[87.41879272 135.30903625]
[85.19424438 132.31790161]
[84.43192291 128.03323364]
[85.75456238 123.21646118]
[89.39042664 118.89102173]
[91.93907928 104.10913086]
[90.02403259 100.48887634]
[89.82534790 96.01270294]
[91.69696808 91.51988220]
[95.57934570 87.97881317]
[99.62629700 73.53505707]
[103.67324829 59.09129715]
[107.72019958 44.64753723]
[111.76715088 30.20377922]
[104.14420319 22.22472382]
[100.65848541 11.84093571]
[101.90423584 1.04124534]
[107.57637787 -8.13684654]
[116.54140472 -13.99156380]
[127.06324768 -15.47225571]
[132.56605530 -29.42643166]
[138.06887817 -43.38060760]
[138.33401489 -52.72734070]
[144.00512695 -57.71200562]
[149.98114014 -71.47017670]
[148.38241577 -87.21039581]
[160.54971313 -95.80144501]
[166.52572632 -109.55961609]
[172.50173950 -123.31778717]
[178.47775269 -137.07595825]
[184.45378113 -150.83412170]
[177.30958557 -164.74435425]
[180.82853699 -179.98086548]
[193.34907532 -189.34942627]
[208.95941162 -188.42649841]
[220.28878784 -177.64785767]
[221.98783875 -162.10284424]
[213.25433350 -149.13134766]
[198.21194458 -144.85810852]
[192.23593140 -131.09994507]
[186.25991821 -117.34176636]
[180.28388977 -103.58360291]
[174.30787659 -89.82543182]
[176.33406067 -75.06928253]
[163.73931885 -65.49415588]
[157.76330566 -51.73598862]
[152.02305603 -37.87779617]
[146.52023315 -23.92361832]
[141.01742554 -9.96944237]
[150.18705750 7.00698996]
[144.13783264 25.64066124]
[126.21091461 34.25072861]
[122.16396332 48.69448853]
[118.11701202 63.13824844]
[114.07006073 77.58200836]
[110.02310944 92.02576447]
[106.72097015 106.65778351]
[104.17231750 121.43967438]
[102.38382721 136.33267212]
[101.36019135 151.29769897]
[100.33655548 166.26274109]
[99.31291199 181.22776794]
[98.28927612 196.19279480]
[97.26564026 211.15782166]
[104.04315186 225.45384216]
[95.45534515 237.62342834]
[94.43170929 252.58847046]
[93.40807343 267.55349731]
[92.38443756 282.51852417]
[105.86131287 289.61035156]
[115.28344727 301.57458496]
[119.01840973 316.33837891]
[116.41909027 331.34384155]
[107.93582916 343.99114990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 86]
[9 85]
[10 84]
[11 83]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[22 75]
[23 74]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[37 66]
[38 65]
[39 64]
[41 63]
[42 62]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
