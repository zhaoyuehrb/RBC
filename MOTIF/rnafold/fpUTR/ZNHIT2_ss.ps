%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAACCGGAAGUAAUCGAAGAAGCCCCGGAAGUUUCGAACUACCACCGGCGUGCGUUCGCAGGUAGAUCGCGGUGCCAGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[26.75814438 130.48091125]
[24.86990547 128.74624634]
[9.95989132 130.38681030]
[-4.95012331 132.02737427]
[-19.86013794 133.66795349]
[-34.61062241 136.39250183]
[-49.12287903 140.18650818]
[-63.63513565 143.98049927]
[-78.14739227 147.77450562]
[-79.26056671 162.87548828]
[-85.21900940 176.79582214]
[-95.37638092 188.02552795]
[-108.63088226 195.34652710]
[-123.54476929 197.96464539]
[-138.50030518 195.59591675]
[-151.87521362 188.49728394]
[-162.21867371 177.43873596]
[-168.40872192 163.61984253]
[-169.77391052 148.53955078]
[-166.16613770 133.83367920]
[-157.97676086 121.09740448]
[-146.09410095 111.71224976]
[-131.80709839 106.69626617]
[-116.66548920 106.59353638]
[-102.31173706 111.41520691]
[-90.30282593 120.63825989]
[-81.94139099 133.26225281]
[-67.42913818 129.46824646]
[-52.91687775 125.67424774]
[-38.40462494 121.88024902]
[-36.87782288 119.26010895]
[-34.09719467 117.16675568]
[-30.29067802 116.13214111]
[-25.89385796 116.58158875]
[-21.50070572 118.75793457]
[-6.59069157 117.11736298]
[8.31932354 115.47679901]
[23.22933769 113.83622742]
[37.92760086 110.84272766]
[52.29161072 106.52124023]
[66.65561676 102.19975281]
[81.01963043 97.87826538]
[87.97136688 85.16529846]
[101.84654236 80.99088287]
[114.65888214 87.75772095]
[129.02288818 83.43623352]
[143.38690186 79.11475372]
[157.75091553 74.79326630]
[172.11491394 70.47177887]
[185.92012024 64.60520935]
[199.00085449 57.26393890]
[207.24851990 43.76258087]
[222.13409424 44.28093338]
[235.21484375 36.93966675]
[248.29557800 29.59839821]
[256.19766235 15.22866440]
[272.59664917 15.15776062]
[280.62268066 29.45862770]
[272.01925659 43.41975784]
[255.63684082 42.67913818]
[242.55610657 50.02040863]
[229.47537231 57.36167526]
[222.16333008 70.33793640]
[206.34211731 70.34468079]
[193.26138306 77.68595123]
[206.76368713 84.21952820]
[212.00698853 98.27327728]
[206.08381653 112.05428314]
[192.27864075 117.92087555]
[178.24650574 112.61998749]
[171.76835632 99.09099579]
[176.43640137 84.83578491]
[162.07240295 89.15727234]
[147.70838928 93.47875977]
[133.34437561 97.80024719]
[118.98036957 102.12173462]
[112.02863312 114.83470154]
[98.15345764 119.00911713]
[85.34111786 112.24227905]
[70.97710419 116.56376648]
[56.61309814 120.88524628]
[42.24908829 125.20673370]
[39.50914764 128.60258484]
[36.18178940 130.80146790]
[32.69359970 131.76380920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 30]
[7 29]
[8 28]
[9 27]
[39 82]
[40 81]
[41 80]
[42 79]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 65]
[51 64]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
