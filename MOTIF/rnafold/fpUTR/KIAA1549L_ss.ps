%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUCCAUCAUCUCUGAGCCAGCAGAGCAAUCCCCCAAAGUGCUGUUAGUUCCCCAAACAGCUCCAGCCGACCCCUCUUUAGGUCAGAACAUAGCUAAUCCCUUAAUCCCAUUUUCUGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[93.12622833 315.60302734]
[77.96441650 318.45309448]
[63.67722321 312.63247681]
[54.82364655 299.99847412]
[54.22882462 284.58258057]
[62.08256912 271.30395508]
[75.87877655 264.39971924]
[77.38420105 249.47546387]
[78.88962555 234.55119324]
[80.39505005 219.62692261]
[81.90047455 204.70266724]
[43.06543350 189.71452332]
[12.96860218 160.95716858]
[0.10570241 168.67375183]
[-12.75719738 176.39035034]
[-25.62009811 184.10694885]
[-38.48299789 191.82353210]
[-42.07347870 207.21456909]
[-55.53936005 215.48774719]
[-70.89157867 211.73475647]
[-79.02192688 198.18214417]
[-75.10681915 182.87046814]
[-61.46902084 174.88386536]
[-46.19958878 178.96063232]
[-33.33668900 171.24404907]
[-20.47379112 163.52745056]
[-7.61089039 155.81085205]
[5.25200939 148.09426880]
[0.94355589 138.44555664]
[-2.38523054 128.41662598]
[-4.70142841 118.10665131]
[-5.98213053 107.61759949]
[-6.21467066 97.05321503]
[-5.39674950 86.51797485]
[-3.53645563 76.11606598]
[-0.65218759 65.95037842]
[3.22752929 56.12143326]
[8.06432438 46.72644806]
[13.81036282 37.85833740]
[20.40881538 29.60480881]
[27.79442215 22.04748535]
[35.89414215 15.26111317]
[44.62786865 9.31280708]
[37.73417282 -4.00923967]
[30.84047318 -17.33128738]
[23.94677544 -30.65333366]
[17.05307770 -43.97537994]
[10.15937996 -57.29742813]
[-5.20962095 -58.63808823]
[-17.40003967 -68.09310150]
[-22.52195740 -82.64540100]
[-18.94099236 -97.65140533]
[-7.79981279 -108.32275391]
[7.34646893 -111.25425720]
[21.66473007 -105.51048279]
[30.58606339 -92.92424774]
[31.26370811 -77.51177216]
[23.48142624 -64.19112396]
[30.37512398 -50.86907959]
[37.26882172 -37.54703140]
[44.16252136 -24.22498512]
[51.05621719 -10.90293789]
[57.94991684 2.41910911]
[72.24059296 -2.56537008]
[87.09448242 -5.46889353]
[102.21021271 -6.23255062]
[117.28109741 -4.84084797]
[132.00137329 -1.32202220]
[146.07235718 4.25253344]
[159.20858765 11.76971626]
[171.14352417 21.07700920]
[181.94816589 10.67220974]
[192.75279236 0.26741013]
[203.55743408 -10.13738918]
[201.28602600 -25.48731995]
[208.50071716 -39.22515106]
[222.42729187 -46.06840515]
[237.71070862 -43.38571167]
[248.47416687 -32.20862198]
[250.57891846 -16.83495522]
[243.21563721 -3.17619872]
[229.21565247 3.51557636]
[213.96223450 0.66724592]
[203.15759277 11.07204533]
[192.35296631 21.47684479]
[181.54832458 31.88164520]
[186.22294617 37.90456772]
[190.45365906 44.24719238]
[194.21865845 50.87685776]
[197.49858093 57.75943375]
[200.27653503 64.85948944]
[202.53822327 72.14045715]
[204.27197266 79.56486511]
[205.46888733 87.09448242]
[206.12280273 94.69054413]
[206.23034668 102.31394196]
[205.79095459 109.92542267]
[204.80690002 117.48580933]
[203.28324890 124.95616150]
[201.22784424 132.29803467]
[198.65127563 139.47361755]
[195.56678772 146.44596863]
[191.99028015 153.17919922]
[187.94017029 159.63864136]
[183.43728638 165.79101562]
[178.50483704 171.60467529]
[173.16819763 177.04968262]
[167.45486450 182.09799194]
[161.39422607 186.72363281]
[155.01751709 190.90277100]
[148.35752869 194.61389160]
[141.44859314 197.83790588]
[134.32624817 200.55818176]
[127.02716827 202.76075745]
[119.58895111 204.43424988]
[112.04987335 205.57006836]
[104.44876099 206.16236877]
[96.82474518 206.20808411]
[95.31931305 221.13235474]
[93.81388855 236.05661011]
[92.30846405 250.98088074]
[90.80303955 265.90515137]
[102.94248199 275.42553711]
[107.98612976 290.00512695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[71 86]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
