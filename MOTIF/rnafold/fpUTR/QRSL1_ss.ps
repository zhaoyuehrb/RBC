%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGAAGGGCUCAGUGACAAUUAAAGAUGGCUGCGCCCAUGUAACAUCACUAGCGACCGGUGACCUCUUUUUCCCCCUUGCCUGGCUCCUGUGGUGGCAGGCUGGGCACGAGGACC\
) } def
/len { sequence length } bind def

/coor [
[81.01667786 114.56536102]
[66.85368347 119.50596619]
[52.69068909 124.44657135]
[38.52769470 129.38717651]
[31.27168846 145.23576355]
[15.13721752 150.88418579]
[0.18036184 143.32487488]
[-13.84488201 148.64393616]
[-27.87012482 153.96301270]
[-41.89537048 159.28208923]
[-52.05506897 171.41020203]
[-66.69895935 168.68885803]
[-80.72420502 174.00791931]
[-94.74945068 179.32699585]
[-108.77468872 184.64607239]
[-109.19882965 199.84109497]
[-115.41011810 213.71510315]
[-126.46139526 224.15242004]
[-140.66741943 229.56144714]
[-155.86186218 229.11732483]
[-169.72769165 222.88778687]
[-180.15046692 211.82278442]
[-185.54080200 197.60966492]
[-185.07669067 182.41581726]
[-178.82891846 168.55818176]
[-167.75021362 158.14997864]
[-153.53001404 152.77835083]
[-138.33679199 153.26245117]
[-124.48739624 159.52844238]
[-114.09376526 170.62083435]
[-100.06851959 165.30175781]
[-86.04327393 159.98268127]
[-72.01803589 154.66360474]
[-62.86151123 142.91595459]
[-47.21444321 145.25685120]
[-33.18919754 139.93777466]
[-19.16395569 134.61869812]
[-5.13871145 129.29962158]
[-1.50792754 116.85762787]
[8.80511951 108.68878937]
[22.13813019 107.98225403]
[33.58708954 115.22418213]
[47.75008392 110.28357697]
[61.91307831 105.34297180]
[76.07607269 100.40236664]
[82.79556274 79.04974365]
[106.38965607 70.39060211]
[103.58684540 55.65478516]
[100.78404236 40.91896820]
[97.98123169 26.18315315]
[95.17842865 11.44733715]
[81.44469452 3.96946430]
[75.77887726 -10.60560226]
[80.85620880 -25.39596176]
[94.27931976 -33.41806030]
[109.71023560 -30.88410378]
[119.86294556 -18.99055481]
[119.94364929 -3.35317922]
[109.91424561 8.64453030]
[112.71704865 23.38034630]
[115.51985931 38.11616135]
[118.32266235 52.85197830]
[121.12546539 67.58779144]
[118.82869720 52.76467514]
[122.96174622 38.34531784]
[132.76220703 26.98966026]
[146.42218018 20.79247665]
[161.42181396 20.89696312]
[174.99414062 27.28384399]
[184.63545227 38.77493286]
[188.56721497 53.25046921]
[186.06416321 68.04015350]
[177.58801270 80.41573334]
[164.70237732 88.09428406]
[149.78424072 89.65933990]
[135.58819580 84.82379150]
[149.61343384 90.14286804]
[163.63867188 95.46194458]
[177.80166626 100.40254974]
[192.09220886 104.96112823]
[206.38273621 109.51969910]
[220.67327881 114.07827759]
[234.96380615 118.63685608]
[249.25434875 123.19543457]
[263.54489136 127.75401306]
[277.83541870 132.31259155]
[284.57550049 131.24462891]
[289.97570801 133.49099731]
[292.75891113 137.51849365]
[306.78414917 142.83755493]
[320.80938721 148.15663147]
[334.83462524 153.47570801]
[350.92581177 150.31245422]
[361.50555420 162.84245300]
[355.69033813 178.17593384]
[339.46234131 180.53910828]
[329.51556396 167.50094604]
[315.49032593 162.18186951]
[301.46508789 156.86280823]
[287.43981934 151.54373169]
[273.27682495 146.60311890]
[258.98629761 142.04454041]
[244.69577026 137.48596191]
[230.40522766 132.92739868]
[216.11470032 128.36882019]
[201.82415771 123.81023407]
[187.53363037 119.25166321]
[173.24308777 114.69308472]
[168.55871582 116.11559296]
[162.93299866 114.51568604]
[158.31961060 109.48718262]
[144.29435730 104.16811371]
[130.26911926 98.84903717]
[125.91078949 113.06484222]
[115.63761902 122.91896057]
[102.47743225 126.35660553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[7 38]
[8 37]
[9 36]
[10 35]
[12 33]
[13 32]
[14 31]
[15 30]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[76 113]
[77 112]
[78 111]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
