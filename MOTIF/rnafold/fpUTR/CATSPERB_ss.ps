%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAUUGGCUGUUACCAAAGGUGACUAGAGUGCUAAGCCAGUCAACAGGGAAAACUUGGCUCCUGACUUUGGGUCUUUCUUCUCAGUCUAUAUGGAAGAAAACUGAGAAAAAAUAUAAAAAAGAAGAACACAACUAGUUGCGCAUCUCCUAAAGAG\
) } def
/len { sequence length } bind def

/coor [
[108.62536621 135.40371704]
[104.79111481 120.90203857]
[90.69007111 115.78730774]
[78.45049286 124.45868683]
[66.21092224 133.13006592]
[53.97134781 141.80145264]
[41.73177338 150.47282410]
[29.49220085 159.14421082]
[17.25262642 167.81558228]
[5.01305294 176.48696899]
[-7.22652102 185.15835571]
[-5.62733698 216.86364746]
[-15.91292381 227.78182983]
[-26.19851112 238.70001221]
[-36.48409653 249.61817932]
[-46.76968384 260.53637695]
[-57.05527115 271.45455933]
[-63.51525497 287.12951660]
[-80.36595154 285.26126099]
[-83.23544312 268.55191040]
[-67.97345734 261.16897583]
[-57.68786621 250.25077820]
[-47.40227890 239.33259583]
[-37.11669159 228.41441345]
[-26.83110619 217.49623108]
[-16.54551888 206.57804871]
[-24.59802437 193.92272949]
[-38.84532547 198.61468506]
[-53.09262848 203.30662537]
[-63.60776138 215.89091492]
[-79.71499634 212.81048584]
[-84.84459686 197.23425293]
[-73.71966553 185.18568420]
[-57.78457642 189.05932617]
[-43.53727722 184.36738586]
[-29.28997421 179.67543030]
[-15.89790058 172.91877747]
[-3.65832710 164.24739075]
[8.58124638 155.57601929]
[20.82081985 146.90463257]
[33.06039429 138.23326111]
[45.29996872 129.56187439]
[57.53954315 120.89049530]
[69.77911377 112.21911621]
[82.01869202 103.54773712]
[81.72052002 96.05366516]
[80.82599640 73.57145691]
[67.93617249 65.89991760]
[55.04634476 58.22838974]
[42.15652084 50.55685806]
[26.31531715 53.09376144]
[14.55256557 42.18426132]
[15.89163971 26.19718933]
[29.30531693 17.39646149]
[44.50377274 22.53324127]
[49.82805252 37.66703033]
[62.71787643 45.33856583]
[75.60770416 53.01009750]
[88.49752808 60.68162918]
[103.45011139 59.48987579]
[114.96205139 49.87347031]
[116.52188110 34.37493134]
[128.33361816 24.78652382]
[143.09948730 26.36909485]
[154.61141968 16.75268936]
[166.12336731 7.13628483]
[166.47532654 -3.80373096]
[172.68804932 -12.54652023]
[182.49249268 -16.31891251]
[192.53305054 -14.09042263]
[204.41821289 -23.24155045]
[216.30335999 -32.39267731]
[222.51750183 -46.94242096]
[237.32220459 -48.57641220]
[249.20736694 -57.72753906]
[255.42150879 -72.27728271]
[270.22622681 -73.91127014]
[282.11135864 -83.06240082]
[293.99652100 -92.21353149]
[305.88168335 -101.36465454]
[317.76681519 -110.51578522]
[328.37344360 -121.12238312]
[337.52456665 -133.00753784]
[346.67568970 -144.89268494]
[355.82681274 -156.77784729]
[364.97793579 -168.66299438]
[374.12905884 -180.54815674]
[383.28018188 -192.43330383]
[375.67123413 -205.59278870]
[373.68234253 -220.66305542]
[377.61682129 -235.34597778]
[386.87469482 -247.40254211]
[400.04418945 -254.99417114]
[415.11703491 -256.96322632]
[429.79476929 -253.00944519]
[441.83914185 -243.73573303]
[449.41345215 -230.55627441]
[451.36267090 -215.48083496]
[447.38958740 -200.80830383]
[438.10003662 -188.77615356]
[424.91061401 -181.21917725]
[409.83264160 -179.28977966]
[395.16534424 -183.28218079]
[386.01422119 -171.39701843]
[376.86309814 -159.51187134]
[367.71197510 -147.62672424]
[358.56085205 -135.74156189]
[349.40969849 -123.85640717]
[340.25857544 -111.97126007]
[354.49905396 -116.68392944]
[369.43551636 -115.30488586]
[382.57238770 -108.06454468]
[391.71472168 -96.17263031]
[395.33502197 -81.61607361]
[392.82836914 -66.82699585]
[384.61361694 -54.27639389]
[372.06326294 -46.06124496]
[357.27426147 -43.55414963]
[342.71759033 -47.17399597]
[330.82537842 -56.31597900]
[323.58465576 -69.45262909]
[322.20516968 -84.38906097]
[326.91796875 -98.63063049]
[315.03280640 -89.47949982]
[303.14764404 -80.32837677]
[291.26248169 -71.17724609]
[279.37734985 -62.02611923]
[274.01330566 -48.13092804]
[258.35848999 -45.84238434]
[246.47334290 -36.69125748]
[241.10929871 -22.79606628]
[225.45448303 -20.50752449]
[213.56933594 -11.35639668]
[201.68418884 -2.20526958]
[195.70669556 16.15034485]
[175.73977661 18.64822578]
[164.22782898 28.26462936]
[152.71589661 37.88103485]
[151.64489746 52.69280624]
[140.10714722 62.60919952]
[124.57845306 61.38541031]
[113.06651306 71.00181580]
[119.29279327 117.06778717]
[123.12703705 131.56945801]
[138.19590759 133.56883240]
[151.35011292 141.18693542]
[160.58370972 153.26208496]
[164.48864746 167.95289612]
[162.46945190 183.01913452]
[154.83404541 196.16328430]
[142.74676514 205.38099670]
[128.05082703 209.26660156]
[112.98727417 207.22760010]
[99.85316467 199.57490540]
[90.65136719 187.47550964]
[86.78509521 172.77447510]
[88.84391022 157.71360779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[27 36]
[28 35]
[29 34]
[47 59]
[48 58]
[49 57]
[50 56]
[60 142]
[61 141]
[64 138]
[65 137]
[66 136]
[70 134]
[71 133]
[72 132]
[74 130]
[75 129]
[77 127]
[78 126]
[79 125]
[80 124]
[81 123]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
