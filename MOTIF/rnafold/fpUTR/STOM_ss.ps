%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGAUUGGGGGCGGGGCGGCAAUCUGGGUCUUGUGCCUCUGGCUCCUCAGGGCAUUCCCGGCGGCUCCGGGUUUGGCAACGAGGACGGGGGAGUGCGACUGCGUCUCGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[95.78673553 137.46139526]
[97.97112274 122.62171173]
[91.77294159 136.28123474]
[85.57476044 149.94075012]
[79.37657166 163.60028076]
[83.65071106 179.06350708]
[74.10973358 191.96115112]
[58.07265854 192.39924622]
[47.84176636 180.04171753]
[51.26531601 164.36820984]
[65.71704865 157.40209961]
[71.91523743 143.74256897]
[78.11341858 130.08305359]
[84.31159973 116.42353058]
[81.33630371 101.72156525]
[70.31468964 91.54689026]
[59.29307938 81.37221527]
[48.27146530 71.19753265]
[37.24985123 61.02285767]
[26.22824097 50.84818268]
[10.83992863 47.17253113]
[6.73656034 32.85430145]
[-4.28505182 22.67962456]
[-8.84895611 21.84543991]
[-12.48519516 19.74910927]
[-14.90008163 16.86432838]
[-15.99486923 13.71203613]
[-15.86340904 10.78883171]
[-25.74107933 -0.49972984]
[-35.61875153 -11.78829098]
[-45.49642181 -23.07685280]
[-55.13245010 -22.43485641]
[-63.82417297 -26.31507683]
[-69.60828400 -33.69897079]
[-71.24510193 -42.79362488]
[-68.48258209 -51.46618271]
[-77.42809296 -63.50685501]
[-86.37360382 -75.54753113]
[-95.31911469 -87.58820343]
[-104.26462555 -99.62887573]
[-111.99675751 -104.73486328]
[-113.28292847 -112.11126709]
[-121.90473938 -124.38580322]
[-130.52655029 -136.66035461]
[-139.14836121 -148.93489075]
[-154.24111938 -155.34898376]
[-155.96388245 -171.65739441]
[-142.54441833 -181.08341980]
[-127.78752136 -173.93037415]
[-126.87382507 -157.55670166]
[-118.25201416 -145.28216553]
[-109.63020325 -133.00761414]
[-101.00839233 -120.73307800]
[-92.22395325 -108.57438660]
[-83.27844238 -96.53371429]
[-74.33293152 -84.49304199]
[-65.38742065 -72.45236969]
[-56.44190979 -60.41168976]
[-36.85620880 -54.13280487]
[-34.20785904 -32.95452499]
[-24.33018875 -21.66596222]
[-14.45251751 -10.37740040]
[-4.57484722 0.91116101]
[5.88962555 11.65801239]
[16.91123772 21.83268929]
[31.51121140 24.78058052]
[36.40291977 39.82656860]
[47.42453003 50.00124741]
[58.44614410 60.17592239]
[69.46775818 70.35060120]
[80.48936462 80.52527618]
[91.51097870 90.69995880]
[94.34155273 86.75764465]
[98.90193939 83.82782745]
[104.77524567 82.62609863]
[111.26461029 83.68381500]
[117.47562408 87.24424744]
[122.43520355 93.19492340]
[125.23158264 101.04824066]
[138.89109802 107.24642944]
[151.30255127 103.44061279]
[162.59484863 108.98339081]
[166.89105225 120.37707520]
[180.38073730 126.93668365]
[193.87040710 133.49629211]
[207.36009216 140.05590820]
[216.57554626 141.02146912]
[221.11804199 146.97389221]
[234.42832947 153.89028931]
[247.73860168 160.80667114]
[263.55181885 160.30412292]
[271.27777100 173.03828430]
[284.58807373 179.95466614]
[298.40899658 172.90049744]
[313.73144531 175.35055542]
[324.66357422 186.36273193]
[327.00177002 201.70263672]
[319.84695435 215.47174072]
[305.95031738 222.37556458]
[290.65536499 219.75942993]
[279.84335327 208.62930298]
[277.67169189 193.26495361]
[264.36138916 186.34855652]
[249.50021362 187.34582520]
[240.82221985 174.11695862]
[227.51193237 167.20056152]
[214.20166016 160.28417969]
[200.80049133 153.54557800]
[187.31080627 146.98597717]
[173.82112122 140.42636108]
[160.33143616 133.86676025]
[142.98126221 136.10595703]
[132.69291687 120.90595245]
[119.03340149 114.70776367]
[130.44960022 124.43763733]
[130.96595764 139.42874146]
[120.24628448 149.92106628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[22 65]
[23 64]
[28 63]
[29 62]
[30 61]
[31 60]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[42 53]
[43 52]
[44 51]
[45 50]
[79 114]
[80 113]
[83 111]
[84 110]
[85 109]
[86 108]
[88 107]
[89 106]
[90 105]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
