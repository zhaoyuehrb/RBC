%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAACUGCAGGGCGUAUUCCCGGAGGGCAGUUGGGGAGCGCAGAUCCCGAAGCAGCGCUGGGAGCGUAAGUGCGGGCAGAGCACUGCGCCGUUUGGGAACGCAACUUUGAGGAGACAGUGCGGUGGUUCUGGAGGCUGGGAAGUCCAAGACCAGUUGGCUCGCAUCUGACUUCAGUGAAGUUCCUU\
) } def
/len { sequence length } bind def

/coor [
[331.00094604 273.07635498]
[325.44869995 287.29379272]
[314.27172852 297.68792725]
[299.68923950 302.19500732]
[284.59661865 299.92016602]
[271.99047852 291.31506348]
[264.37377930 278.08822632]
[263.25885010 262.86587524]
[268.86706543 248.67042542]
[280.08486938 238.32038879]
[294.68499756 233.87075806]
[296.92062378 219.03829956]
[299.15625000 204.20584106]
[291.76449585 191.15357971]
[277.89440918 185.44212341]
[264.02429199 179.73068237]
[250.15422058 174.01924133]
[245.46351624 175.00471497]
[240.10527039 173.04063416]
[235.92311096 167.88053894]
[222.25051880 161.71122742]
[208.57794189 155.54193115]
[194.90534973 149.37261963]
[181.23275757 143.20330811]
[167.56018066 137.03401184]
[153.88758850 130.86470032]
[139.10435486 132.68272400]
[129.70767212 119.95430756]
[116.03507996 113.78499603]
[102.36248779 107.61569214]
[99.94820404 115.37338257]
[93.10623932 121.70473480]
[82.67267609 124.70166016]
[67.82214355 126.81394958]
[55.24904251 136.41748047]
[41.55903625 130.54951477]
[26.70850563 132.66180420]
[11.85797405 134.77407837]
[-2.99255610 136.88636780]
[-11.10300732 150.25628662]
[-25.92653084 155.23596191]
[-40.46391296 149.47413635]
[-47.85104752 135.69139099]
[-44.59995270 120.39549255]
[-32.24569702 110.80870819]
[-16.62158394 111.45761871]
[-5.10484028 122.03583527]
[9.74569035 119.92355347]
[24.59622002 117.81127167]
[39.44675064 115.69898224]
[50.95764160 106.24654388]
[65.70986176 111.96341705]
[80.56038666 109.85113525]
[85.45569611 95.67241669]
[75.07174683 84.84774017]
[64.68780518 74.02306366]
[54.30385590 63.19838715]
[39.16691971 58.59580612]
[35.93988419 44.05498505]
[25.55593681 33.23030472]
[15.17199039 22.40562820]
[0.67609107 27.05646324]
[-14.34040833 24.96082306]
[-26.90648079 16.58740997]
[-34.55941772 3.64161777]
[-35.82741165 -11.28157330]
[-30.51232910 -25.21769142]
[-40.89627457 -36.04236984]
[-51.28022385 -46.86704636]
[-67.17127991 -50.91753006]
[-71.34789276 -66.77590179]
[-59.51353073 -78.12842560]
[-43.84236145 -73.29660034]
[-40.45554733 -57.25099182]
[-30.07159805 -46.42631531]
[-19.68765259 -35.60163879]
[-5.54275751 -40.33317566]
[9.31487370 -38.44631577]
[21.93156052 -30.26217270]
[29.77570534 -17.35908890]
[31.24569893 -2.26849198]
[25.99666786 12.02168083]
[36.38061523 22.84635925]
[46.76456070 33.67103577]
[61.15876770 37.49936295]
[65.12853241 52.81443787]
[75.51248169 63.63911438]
[85.89643097 74.46379089]
[96.28037262 85.28846741]
[108.53179932 93.94309998]
[122.20438385 100.11241150]
[135.87696838 106.28171539]
[151.63816833 104.90495300]
[160.05690002 117.19211578]
[173.72947693 123.36141968]
[187.40206909 129.53073120]
[201.07466125 135.70002747]
[214.74723816 141.86933899]
[228.41983032 148.03865051]
[242.09242249 154.20794678]
[255.86566162 160.14915466]
[269.73574829 165.86059570]
[283.60583496 171.57203674]
[297.47592163 177.28347778]
[327.16293335 182.24955750]
[342.10031128 183.61897278]
[357.03765869 184.98840332]
[371.97500610 186.35781860]
[386.91238403 187.72723389]
[401.84973145 189.09666443]
[416.78710938 190.46607971]
[433.31326294 182.36393738]
[447.24734497 193.01878357]
[462.20541382 194.13973999]
[477.16345215 195.26069641]
[492.12152100 196.38163757]
[506.46130371 189.69726562]
[518.57476807 198.36404419]
[533.53283691 199.48498535]
[548.49090576 200.60594177]
[563.45776367 201.60253906]
[578.43237305 202.47471619]
[593.40698242 203.34687805]
[608.38159180 204.21905518]
[623.35626221 205.09123230]
[638.35571289 205.21589661]
[653.34277344 204.59274292]
[668.32983398 203.96958923]
[683.31689453 203.34643555]
[698.30395508 202.72328186]
[711.77075195 194.41935730]
[724.80847168 201.62124634]
[739.79553223 200.99809265]
[754.78259277 200.37493896]
[760.58782959 197.14759827]
[766.29199219 197.32427979]
[770.27636719 199.98854065]
[785.27587891 199.86387634]
[800.27539062 199.73921204]
[814.12670898 190.96009827]
[828.52783203 198.80480957]
[828.66412354 215.20338440]
[814.39532471 223.28637695]
[800.40002441 214.73869324]
[785.40057373 214.86335754]
[770.40106201 214.98802185]
[755.40570068 215.36198425]
[740.41870117 215.98513794]
[725.43164062 216.60829163]
[713.03680420 224.86764526]
[698.92706299 217.71034241]
[683.94000244 218.33348083]
[668.95300293 218.95663452]
[653.96594238 219.57978821]
[638.97888184 220.20294189]
[649.16278076 231.21604919]
[648.73028564 246.20980835]
[637.92852783 256.61758423]
[622.92901611 256.49291992]
[612.30175781 245.90702820]
[612.11853027 230.90814209]
[622.48406982 220.06585693]
[607.50946045 219.19367981]
[592.53485107 218.32150269]
[577.56018066 217.44934082]
[562.58557129 216.57716370]
[555.71221924 219.33213806]
[547.36993408 215.56399536]
[532.41186523 214.44305420]
[517.45385742 213.32209778]
[504.18392944 220.08665466]
[491.00057983 211.33970642]
[476.04251099 210.21875000]
[461.08444214 209.09779358]
[446.12640381 207.97685242]
[436.74481201 215.63188171]
[424.26248169 214.80831909]
[415.41766357 205.40344238]
[400.48031616 204.03401184]
[385.54296875 202.66459656]
[370.60559082 201.29518127]
[355.66824341 199.92575073]
[340.73086548 198.55633545]
[325.79351807 197.18692017]
[313.98873901 206.44146729]
[311.75308228 221.27394104]
[309.51745605 236.10639954]
[322.15737915 244.66180420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 187]
[12 186]
[13 185]
[14 104]
[15 103]
[16 102]
[17 101]
[20 100]
[21 99]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[28 92]
[29 91]
[30 90]
[33 53]
[34 52]
[36 50]
[37 49]
[38 48]
[39 47]
[54 89]
[55 88]
[56 87]
[57 86]
[59 84]
[60 83]
[61 82]
[67 76]
[68 75]
[69 74]
[105 184]
[106 183]
[107 182]
[108 181]
[109 180]
[110 179]
[111 178]
[113 175]
[114 174]
[115 173]
[116 172]
[118 170]
[119 169]
[120 168]
[121 166]
[122 165]
[123 164]
[124 163]
[125 162]
[126 155]
[127 154]
[128 153]
[129 152]
[130 151]
[132 149]
[133 148]
[134 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
