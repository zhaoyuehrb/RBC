%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCCCUCAGCCUUUGUGUCCUUCUCUGCGCCGGAGUGGCUGCAGCUCACCCCUCAGCUCCCCUUGGGGCCCAGCUGGGAGCCGAGAUAGAAGCUCCUGUCGCCGCUGGGCUUCUCGCCUCCCGCAGAGGGCCACACAGAGACCGGG\
) } def
/len { sequence length } bind def

/coor [
[56.40456772 519.37561035]
[41.44111633 525.16137695]
[27.66132164 516.94573975]
[25.63586235 501.03103638]
[36.91849899 489.62570190]
[38.18206787 474.67901611]
[39.44564056 459.73233032]
[29.12620544 453.19528198]
[22.54908943 442.81546021]
[21.02696800 430.54891968]
[24.91293716 418.73876953]
[33.52108002 409.66757202]
[45.24666977 405.11624146]
[47.13921738 390.23611450]
[49.03176498 375.35598755]
[50.92431259 360.47586060]
[52.81686401 345.59573364]
[54.70941162 330.71560669]
[56.60195923 315.83547974]
[58.49451065 300.95535278]
[49.20077133 289.37252808]
[50.90811157 274.25497437]
[63.12026978 264.58538818]
[65.01281738 249.70526123]
[66.90536499 234.82513428]
[68.79791260 219.94500732]
[70.69046783 205.06488037]
[72.58301544 190.18475342]
[74.47556305 175.30461121]
[76.36811066 160.42448425]
[78.26065826 145.54435730]
[76.05356598 141.23956299]
[76.57511139 135.49465942]
[80.55951691 130.08181763]
[83.07767487 115.29470825]
[86.65779877 84.89105988]
[85.07938385 69.97433472]
[83.50097656 55.05761337]
[81.92256165 40.14088821]
[80.34415436 25.22416687]
[78.76573944 10.30744457]
[69.61923981 -2.60193610]
[75.97432709 -16.07272530]
[74.39591217 -30.98944664]
[72.81750488 -45.90616989]
[70.76819611 -60.76552200]
[68.25003052 -75.55264282]
[65.73187256 -90.33975983]
[51.12432098 -94.62705231]
[39.87264633 -104.79006195]
[34.17264557 -118.77326965]
[35.10528183 -133.78297424]
[42.43211365 -146.84539795]
[54.65318680 -155.39588928]
[52.13502502 -170.18301392]
[49.61686325 -184.97012329]
[39.67263412 -197.27552795]
[45.16350555 -211.12109375]
[42.64534378 -225.90820312]
[40.12718201 -240.69532776]
[37.60902405 -255.48245239]
[35.09086227 -270.26956177]
[32.57270050 -285.05667114]
[20.49206161 -298.91256714]
[27.14599800 -315.11996460]
[24.31663895 -329.85070801]
[21.48728180 -344.58145142]
[18.65792465 -359.31219482]
[9.73248291 -373.72650146]
[21.11268425 -386.29342651]
[36.33883286 -378.83682251]
[33.38866806 -362.14154053]
[36.21802521 -347.41079712]
[39.04738235 -332.68005371]
[41.87673950 -317.94931030]
[51.73837280 -310.87106323]
[54.18490982 -298.57138062]
[47.35981750 -287.57482910]
[49.87797928 -272.78771973]
[52.39614105 -258.00061035]
[54.91430283 -243.21348572]
[57.43246460 -228.42637634]
[59.95062256 -213.63925171]
[69.71473694 -202.39152527]
[64.40398407 -187.48828125]
[66.92214203 -172.70117188]
[69.44030762 -157.91404724]
[83.80265045 -153.89056396]
[95.04003143 -143.98951721]
[100.88815308 -130.13453674]
[100.13774109 -115.05285645]
[92.88412476 -101.73850250]
[80.51898956 -92.85791779]
[83.03714752 -78.07080078]
[85.55531311 -63.28368378]
[88.27236938 -60.93721008]
[89.95561218 -57.12914658]
[89.91748810 -52.37530136]
[87.73423004 -47.48458099]
[89.31263733 -32.56785965]
[90.89105225 -17.65113640]
[99.92465210 -5.80869913]
[93.68246460 8.72903347]
[95.26087189 23.64575577]
[96.83928680 38.56247711]
[98.41769409 53.47920227]
[99.99610901 68.39592743]
[101.57451630 83.31264496]
[112.01207733 94.08563995]
[126.87142944 96.13495636]
[141.73077393 98.18426514]
[156.59013367 100.23357391]
[170.19458008 91.73072815]
[185.27609253 97.20135498]
[190.26541138 112.44885254]
[181.33515930 125.77664948]
[165.33586121 126.96080017]
[154.54081726 115.09292603]
[139.68147278 113.04361725]
[124.82211304 110.99430084]
[109.96276093 108.94499207]
[97.86479950 117.81286621]
[95.34663391 132.59999084]
[93.14079285 147.43690491]
[91.24823761 162.31703186]
[89.35569000 177.19715881]
[87.46314240 192.07730103]
[85.57059479 206.95742798]
[83.67804718 221.83755493]
[81.78549957 236.71768188]
[79.89294434 251.59780884]
[78.00039673 266.47793579]
[87.40322113 278.89666748]
[85.27193451 293.96026611]
[73.37464142 302.84790039]
[71.48209381 317.72802734]
[69.58953857 332.60815430]
[67.69699097 347.48828125]
[65.80444336 362.36840820]
[63.91189575 377.24853516]
[62.01934814 392.12866211]
[60.12679672 407.00881958]
[73.67738342 418.97134399]
[77.35397339 436.50915527]
[69.88029480 452.62304688]
[54.39232635 460.99591064]
[53.12875366 475.94259644]
[51.86518097 490.88928223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 148]
[6 147]
[7 146]
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[23 132]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[34 123]
[35 122]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[43 101]
[44 100]
[45 99]
[46 95]
[47 94]
[48 93]
[54 87]
[55 86]
[56 85]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[65 75]
[66 74]
[67 73]
[68 72]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
