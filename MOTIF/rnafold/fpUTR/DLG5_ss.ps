%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGCCCGCCCGCCGGCCUCGGGGGGCCCGGGAGGCGUCCGGCGGGGCGGGGCGGCGCGGCCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[150.84677124 113.16358948]
[135.93846130 111.50767517]
[121.03013611 109.85176849]
[106.12181854 108.19586182]
[98.12133789 110.55987549]
[90.59595490 106.12271118]
[75.77547455 103.80897522]
[60.95499420 101.49524689]
[46.04667664 99.83933258]
[31.07970428 98.84449005]
[16.11273193 97.84964752]
[1.14575803 96.85480499]
[-13.13718987 103.65979767]
[-25.32327843 95.09542084]
[-40.29025269 94.10057831]
[-55.25722504 93.10573578]
[-69.72497559 100.82689667]
[-83.50064087 91.92953491]
[-82.41300201 75.56649017]
[-67.58092499 68.57066345]
[-54.26237869 78.13876343]
[-39.29540634 79.13360596]
[-24.32843399 80.12844849]
[-11.11602402 73.25229645]
[2.14060235 81.88782501]
[17.10757637 82.88267517]
[32.07454681 83.87751770]
[47.04152298 84.87236023]
[51.37377167 82.23135376]
[57.46207047 82.52023315]
[63.26873016 86.67476654]
[78.08921051 88.98849487]
[92.90969086 91.30223083]
[107.77772522 93.28753662]
[122.68605042 94.94345093]
[137.59436035 96.59935760]
[152.50268555 98.25527191]
[161.64840698 85.99546051]
[175.61051941 79.99909973]
[190.59979248 81.78457642]
[202.60252380 90.77293396]
[208.45520020 104.47007751]
[223.36352539 106.12598419]
[238.27183533 107.78189850]
[253.18016052 109.43780518]
[268.08847046 111.09371948]
[282.99679565 112.74962616]
[297.56677246 106.58307648]
[309.36209106 115.67810059]
[324.27041626 117.33400726]
[334.62127686 105.77376556]
[349.79730225 102.53833771]
[363.96298218 108.87181091]
[371.67135620 122.33883667]
[369.95837402 137.76107788]
[359.48269653 149.20834351]
[344.27246094 152.27896118]
[330.17633057 145.79217529]
[322.61450195 132.24232483]
[307.70617676 130.58641052]
[294.20254517 136.87141418]
[281.34088135 127.65794373]
[266.43255615 126.00203705]
[251.52424622 124.34612274]
[236.61592102 122.69021606]
[221.70761108 121.03430939]
[206.79928589 119.37839508]
[198.08357239 131.45738220]
[184.40101624 137.59280396]
[169.38528442 136.04553223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[6 33]
[7 32]
[8 31]
[9 28]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[16 21]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
