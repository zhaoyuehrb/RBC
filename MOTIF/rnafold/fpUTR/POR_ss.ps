%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCGGUGGUAGCGCCUCAGUGGUGUGGGCCUGAGCCCUGCCCAGGUGCCCGCAGAGAGCAGCCGGGCUGCCAGCGUUUC\
) } def
/len { sequence length } bind def

/coor [
[100.80290985 391.78738403]
[93.38696289 377.16085815]
[102.57135773 363.57485962]
[103.13897705 348.58560181]
[103.70659637 333.59634399]
[104.27422333 318.60708618]
[104.84184265 303.61782837]
[97.59170532 290.60690308]
[105.84568024 277.10940552]
[106.41329956 262.12014771]
[106.98092651 247.13087463]
[107.54854584 232.14161682]
[108.11617279 217.15235901]
[108.68379211 202.16311646]
[109.25141144 187.17385864]
[108.11698151 172.21681213]
[105.29511261 157.48463440]
[102.19494629 142.80850220]
[98.81761169 128.19366455]
[95.44026947 113.57881927]
[86.04385376 103.22512054]
[89.94489288 89.79852295]
[86.56755066 75.18368530]
[83.19020844 60.56884003]
[79.81287384 45.95399857]
[74.71367645 38.06655884]
[76.59537506 30.72239685]
[73.77349854 15.99021912]
[69.49362946 10.42212009]
[68.95450592 4.44256067]
[71.33991241 0.03955265]
[69.64029694 -14.86384678]
[67.94068146 -29.76724625]
[66.24106598 -44.67064667]
[64.54145813 -59.57404327]
[55.29031754 -72.40864563]
[61.53569031 -85.93064880]
[59.83607483 -100.83405304]
[52.03398132 -115.88607788]
[64.33793640 -127.55008698]
[78.95217896 -118.95588684]
[74.73947906 -102.53366852]
[76.43908691 -87.63026428]
[85.56865692 -75.86165619]
[79.44485474 -61.27365875]
[81.14447021 -46.37025833]
[82.84408569 -31.46686172]
[84.54370117 -16.56346130]
[86.24331665 -1.66006255]
[88.50567627 13.16834641]
[91.32755280 27.90052223]
[94.42771149 42.57666016]
[97.80505371 57.19150162]
[101.18238831 71.80634308]
[104.55973053 86.42118073]
[113.95614624 96.77487946]
[110.05510712 110.20147705]
[113.43244934 124.81631470]
[116.80979156 139.43115234]
[121.90898132 147.31860352]
[120.02728271 154.66276550]
[122.84915924 169.39494324]
[133.38966370 158.72265625]
[148.38319397 158.28199768]
[159.53227234 168.31683350]
[160.66697693 183.27384949]
[151.15936279 194.87579346]
[136.27095032 196.70210266]
[124.24066925 187.74147034]
[123.67304993 202.73072815]
[123.10542297 217.71998596]
[122.53780365 232.70924377]
[121.97018433 247.69850159]
[121.40255737 262.68774414]
[120.83493805 277.67700195]
[128.04447937 291.76010132]
[119.83110046 304.18545532]
[119.26347351 319.17471313]
[118.69585419 334.16397095]
[118.12823486 349.15322876]
[117.56060791 364.14248657]
[125.69120789 378.38415527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 62]
[17 61]
[18 59]
[19 58]
[20 57]
[22 55]
[23 54]
[24 53]
[25 52]
[27 51]
[28 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
