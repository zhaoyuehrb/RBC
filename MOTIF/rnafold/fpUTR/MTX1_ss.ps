%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCCCAGCCCGGCCUCCGCUCCGGCCGCCGCCACCGCCCCUGUUUUGUUUCCAUGGCGACAGGCGGCGCAGGGCCCGCUCCAAACAUAACGCGCUGUGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[93.44554138 261.24981689]
[85.40625763 248.16296387]
[85.00349426 232.80935669]
[92.34560394 219.31903076]
[105.45758057 211.32080078]
[105.01723480 196.32727051]
[104.35683441 181.34181213]
[103.47651672 166.36766052]
[102.59620667 151.39352417]
[101.71588898 136.41937256]
[85.34284210 130.05293274]
[75.17971802 117.57664490]
[61.17864609 122.95902252]
[47.17757416 128.34138489]
[33.17649841 133.72375488]
[19.17542458 139.10614014]
[15.29689026 154.13066101]
[3.30649233 163.98002625]
[-12.18521500 164.86694336]
[-25.22135544 156.45037842]
[-30.78926659 141.96665955]
[-26.74797249 126.98508453]
[-14.65143299 117.26637268]
[0.84898424 116.54756165]
[13.79305363 125.10505676]
[27.79412842 119.72268677]
[41.79520035 114.34031677]
[55.79627609 108.95794678]
[69.79734802 103.57557678]
[71.66411591 88.95180511]
[80.18883514 76.92398071]
[93.36849213 70.31822205]
[93.80883789 55.32468796]
[94.24919128 40.33115387]
[82.03853607 27.91081619]
[82.50001526 10.83532429]
[94.86811066 -0.45456287]
[94.86811066 -15.45456314]
[94.86811066 -30.45456314]
[94.86811066 -45.45456314]
[94.64791870 -60.45294571]
[94.20757294 -75.44647980]
[93.76721954 -90.44001770]
[93.32687378 -105.43355560]
[92.88652802 -120.42708588]
[92.44618225 -135.42062378]
[89.18112946 -141.46429443]
[89.52940369 -147.33790588]
[92.44618225 -151.30131531]
[92.88652802 -166.29484558]
[93.32687378 -181.28839111]
[83.41107178 -193.90014648]
[87.22903442 -209.48226929]
[101.85195160 -216.08149719]
[116.06237793 -208.63545227]
[118.95928192 -192.85612488]
[108.32041168 -180.84803772]
[107.88006592 -165.85450745]
[107.43972015 -150.86096191]
[107.43972015 -135.86096191]
[107.88006592 -120.86743164]
[108.32041168 -105.87390137]
[108.76075745 -90.88036346]
[109.20110321 -75.88682556]
[109.64144897 -60.89329529]
[113.03724670 -54.19437027]
[109.86811066 -45.45456314]
[109.86811066 -30.45456314]
[109.86811066 -15.45456314]
[109.86811066 -0.45456287]
[120.22442627 7.36485481]
[124.19823456 19.92347717]
[120.10545349 32.64941406]
[109.24272156 40.77149963]
[108.80237579 55.76503372]
[108.36203003 70.75856781]
[123.88087463 78.06050110]
[133.79927063 93.36491394]
[134.18173218 112.68561554]
[148.18280029 118.06798553]
[159.26324463 107.57100677]
[173.80345154 102.92935944]
[188.91647339 105.06464386]
[201.60159302 113.55290222]
[209.34017944 126.70877838]
[210.59571838 141.92016602]
[205.11894226 156.16683960]
[193.99723816 166.62010193]
[179.43885803 171.20445251]
[164.33436584 169.00967407]
[151.68276978 160.47152710]
[143.99606323 147.28527832]
[142.80043030 132.06906128]
[128.79934692 126.68669128]
[116.69004059 135.53906250]
[117.57035065 150.51321411]
[118.45066833 165.48735046]
[119.33097839 180.46150208]
[123.00756836 189.00025940]
[120.01077271 195.88691711]
[120.45111847 210.88046265]
[134.00988770 218.09538269]
[142.13105774 231.13157654]
[142.63006592 246.48236084]
[135.37266541 260.01846313]
[122.31108856 268.09872437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 101]
[6 100]
[7 98]
[8 97]
[9 96]
[10 95]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[32 76]
[33 75]
[34 74]
[37 70]
[38 69]
[39 68]
[40 67]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[49 59]
[50 58]
[51 57]
[79 94]
[80 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
