%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGUGACAAUGCAGGGAACCCGUGCUGAGCUCUCUGCACACAGCCCCAGUCGGGCAGCAGGAAACCGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[101.30953217 290.15823364]
[111.19290924 277.82559204]
[109.31291199 262.94387817]
[107.43291473 248.06214905]
[105.55291748 233.18041992]
[103.67292023 218.29870605]
[90.62309265 213.76914978]
[80.79571533 203.96681213]
[76.18878937 190.80256653]
[77.77453613 176.87873840]
[85.29487610 164.97465515]
[97.30133057 157.49183655]
[96.04615784 142.54444885]
[94.79099274 127.59706116]
[76.03609467 120.25540161]
[65.33567810 100.66622162]
[50.36527634 99.72435760]
[35.92494965 107.49668121]
[22.11787605 98.64813995]
[23.14758682 82.28135681]
[37.95480347 75.23307037]
[51.30713272 84.75395966]
[66.27753448 85.69581604]
[74.83824158 73.37857819]
[68.73719025 59.67539597]
[62.63613892 45.97221756]
[56.53509140 32.26903534]
[43.85367966 22.80899239]
[45.74540710 8.03500748]
[39.64435577 -5.66817427]
[26.06634903 -14.86435604]
[27.51119614 -31.19972992]
[42.49256516 -37.86986542]
[55.59890366 -28.01309586]
[53.34753799 -11.76922417]
[59.44858932 1.93395805]
[71.69361115 10.41385555]
[70.23827362 26.16798401]
[76.33932495 39.87116623]
[82.44036865 53.57434845]
[88.54141998 67.27752686]
[98.76311493 66.99903870]
[108.12430573 69.69248199]
[115.82471466 74.83041382]
[121.29524994 81.69033813]
[134.86766052 75.30364990]
[148.44006348 68.91696167]
[162.01246643 62.53026962]
[168.77784729 47.98347855]
[184.40246582 44.34327698]
[196.90043640 54.40211487]
[196.68440247 70.44371796]
[183.92007446 80.16233063]
[168.39915466 76.10267639]
[154.82675171 82.48936462]
[141.25434875 88.87605286]
[127.68193817 95.26274872]
[124.32176971 114.04218292]
[109.73838806 126.34188843]
[110.99355316 141.28927612]
[112.24871826 156.23667908]
[127.17242432 163.02088928]
[136.65473938 176.27954102]
[138.23332214 192.41011047]
[131.57803345 207.08638000]
[118.55464172 216.41870117]
[120.43463898 231.30043030]
[122.31463623 246.18214417]
[124.19463348 261.06387329]
[126.07463074 275.94558716]
[138.71450806 285.43289185]
[140.86097717 301.09072876]
[131.24057007 313.62960815]
[115.56090546 315.61041260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[12 61]
[13 60]
[14 59]
[16 23]
[17 22]
[24 41]
[25 40]
[26 39]
[27 38]
[29 36]
[30 35]
[45 57]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
