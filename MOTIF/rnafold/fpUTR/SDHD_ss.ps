%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUUUUCUUUCGUCGUCGUGGGUGGGAAUUGUCGCCUAAGUGGUUCCGGGUUGGUGGAUGACCUUGAGCCCUCAGGAACGAG\
) } def
/len { sequence length } bind def

/coor [
[106.41056824 162.53155518]
[103.11137390 147.89888000]
[99.81217957 133.26620483]
[96.51298523 118.63352203]
[89.92737579 115.04468536]
[85.80741119 129.46778870]
[83.70643616 144.31991577]
[70.30354309 151.05508423]
[57.13228607 143.87747192]
[55.52690125 128.96363831]
[66.86902618 119.14728546]
[76.75615692 107.86701202]
[70.17054749 104.27817535]
[56.08572006 109.43740845]
[45.99130249 122.36159515]
[29.79124451 119.81403351]
[24.15077400 104.41542053]
[34.87232590 92.00653839]
[50.92648697 95.35257721]
[65.01131439 90.19334412]
[67.49462128 75.40033722]
[55.86656189 65.92466736]
[44.23850250 56.44900513]
[32.61044312 46.97333908]
[20.98238373 37.49767303]
[9.35432339 28.02200890]
[-2.27373648 18.54634476]
[-17.96905327 20.39906120]
[-30.32546997 10.54540730]
[-32.01214600 -5.16862059]
[-22.02840042 -17.42016792]
[-6.29741859 -18.94060898]
[5.84788990 -8.82789326]
[7.20192862 6.91828489]
[18.82998848 16.39394951]
[30.45804787 25.86961555]
[42.08610916 35.34527969]
[53.71416855 44.82094574]
[65.34222412 54.29661179]
[76.97028351 63.77227402]
[110.89640045 88.35816956]
[124.32384491 81.67208862]
[130.80020142 74.88373566]
[138.37329102 74.99739075]
[152.03862000 68.81204987]
[165.70396423 62.62670135]
[179.36930847 56.44135666]
[193.03463745 50.25601196]
[202.41639709 37.51656723]
[217.20175171 39.31725311]
[230.86708069 33.13190842]
[244.53242493 26.94656372]
[258.19775391 20.76121902]
[271.86309814 14.57587433]
[285.52844238 8.39052868]
[292.50814819 -6.05465651]
[308.18487549 -9.46347618]
[320.53277588 0.77902567]
[320.07958984 16.81567764]
[307.17300415 26.34453201]
[291.71377563 22.05586815]
[278.04846191 28.24121284]
[264.38311768 34.42655945]
[250.71777344 40.61190414]
[237.05242920 46.79724884]
[223.38708496 52.98259354]
[214.98278809 65.27961731]
[199.21998596 63.92135239]
[185.55465698 70.10669708]
[171.88931274 76.29203796]
[158.22396851 82.47738647]
[144.55862427 88.66272736]
[131.00991821 95.09954071]
[117.58247375 101.78561401]
[111.14566040 115.33432007]
[114.44486237 129.96701050]
[117.74405670 144.59968567]
[121.04325104 159.23236084]
[135.02185059 166.24183655]
[141.17698669 180.61711121]
[136.60238647 195.57060242]
[123.45804596 204.04174805]
[107.95030975 202.03071594]
[97.40146637 190.48707581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[13 20]
[14 19]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[41 74]
[42 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
