%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:01 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PF4V1)
} def

/sequence { (\
ACUGCCUGCAGAACCCCAGCCCGACUUUCCCUGCGCACUGGGAUCCUGCUGGAACCUCAGCUGCAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 11 0.036618983 ubox
2 19 0.003668862 ubox
2 60 0.082258143 ubox
3 10 0.036858915 ubox
3 18 0.003693806 ubox
3 23 0.003182167 ubox
3 37 0.009089632 ubox
3 59 0.082732656 ubox
3 63 0.012693500 ubox
3 65 0.729090609 ubox
4 9 0.036686345 ubox
4 17 0.003675939 ubox
4 20 0.007971349 ubox
4 22 0.003879137 ubox
4 34 0.003688690 ubox
4 36 0.010276389 ubox
4 58 0.082760296 ubox
4 61 0.074613388 ubox
4 62 0.016321052 ubox
4 64 0.787873458 ubox
5 19 0.005805877 ubox
5 33 0.003672127 ubox
5 35 0.010152346 ubox
5 52 0.116124818 ubox
5 60 0.053274514 ubox
5 63 0.786757170 ubox
6 19 0.010413036 ubox
6 51 0.116152885 ubox
6 52 0.011083960 ubox
6 60 0.403681319 ubox
7 18 0.011850672 ubox
7 35 0.007037260 ubox
7 51 0.010416121 ubox
7 59 0.411591046 ubox
7 65 0.542937655 ubox
8 17 0.011861926 ubox
8 20 0.004415270 ubox
8 34 0.094089796 ubox
8 49 0.117493286 ubox
8 58 0.411520895 ubox
8 61 0.676640312 ubox
8 62 0.003917257 ubox
8 64 0.586735779 ubox
9 19 0.004425233 ubox
9 33 0.094191159 ubox
9 48 0.117838521 ubox
9 60 0.675855158 ubox
9 63 0.586824686 ubox
10 32 0.094043223 ubox
10 47 0.118158399 ubox
10 57 0.420533733 ubox
10 62 0.586008576 ubox
11 29 0.011202757 ubox
11 31 0.093215412 ubox
11 45 0.029135278 ubox
11 46 0.116619674 ubox
11 56 0.423825664 ubox
11 58 0.640174405 ubox
11 61 0.578222189 ubox
12 27 0.005740867 ubox
12 28 0.013689779 ubox
12 44 0.033757444 ubox
12 57 0.633204092 ubox
13 26 0.005171517 ubox
13 27 0.013079500 ubox
14 42 0.015624594 ubox
14 52 0.011417893 ubox
15 41 0.013762218 ubox
15 42 0.141978250 ubox
15 51 0.010057236 ubox
15 52 0.062457650 ubox
16 40 0.011557079 ubox
16 41 0.142441828 ubox
16 51 0.044406518 ubox
16 52 0.980882048 ubox
17 33 0.010909855 ubox
17 40 0.142651311 ubox
17 48 0.003913140 ubox
17 51 0.983488804 ubox
18 26 0.033725681 ubox
18 27 0.005075513 ubox
18 32 0.011004174 ubox
18 39 0.142492157 ubox
18 47 0.004006677 ubox
18 50 0.984303850 ubox
19 25 0.034815737 ubox
19 26 0.004591370 ubox
19 31 0.010977826 ubox
19 34 0.009714057 ubox
19 36 0.032971157 ubox
19 38 0.140446742 ubox
19 46 0.004009409 ubox
19 49 0.984544951 ubox
20 33 0.009881157 ubox
20 35 0.035110311 ubox
20 48 0.983445592 ubox
20 52 0.010742646 ubox
21 51 0.010700297 ubox
21 52 0.004827845 ubox
22 33 0.036278548 ubox
22 35 0.137356571 ubox
22 48 0.018036658 ubox
22 51 0.004885983 ubox
23 29 0.014140713 ubox
23 32 0.034599988 ubox
23 34 0.136211715 ubox
23 45 0.918699453 ubox
23 47 0.056045852 ubox
23 50 0.004422957 ubox
24 28 0.012514044 ubox
24 44 0.913974986 ubox
25 42 0.007667678 ubox
26 41 0.006418106 ubox
26 43 0.032207563 ubox
27 40 0.006022672 ubox
27 42 0.008328045 ubox
27 43 0.070276331 ubox
28 41 0.004987056 ubox
28 42 0.026187292 ubox
28 43 0.974958583 ubox
29 40 0.004911554 ubox
29 41 0.025591897 ubox
29 42 0.984225337 ubox
30 40 0.024644946 ubox
30 41 0.984304880 ubox
30 42 0.007014617 ubox
31 40 0.984243899 ubox
31 41 0.007927141 ubox
32 40 0.008576494 ubox
32 65 0.008595059 ubox
33 39 0.026299887 ubox
33 64 0.009277441 ubox
34 40 0.003432079 ubox
34 63 0.009272134 ubox
35 39 0.006819331 ubox
35 61 0.004223564 ubox
35 62 0.007832215 ubox
35 64 0.095219783 ubox
36 60 0.004138177 ubox
36 63 0.095433117 ubox
37 62 0.094935011 ubox
38 60 0.098974213 ubox
39 59 0.099046214 ubox
40 57 0.014709512 ubox
40 58 0.098090332 ubox
41 56 0.090413706 ubox
41 57 0.040844246 ubox
42 55 0.090706462 ubox
42 56 0.039986784 ubox
44 53 0.108186609 ubox
45 52 0.110565948 ubox
46 51 0.110515287 ubox
48 61 0.059451980 ubox
49 60 0.065962151 ubox
50 59 0.066383642 ubox
51 58 0.066355230 ubox
52 56 0.008527849 ubox
52 57 0.051816235 ubox
52 58 0.013547382 ubox
52 61 0.003331179 ubox
53 57 0.014891861 ubox
3 65 0.9500000 lbox
4 64 0.9500000 lbox
5 63 0.9500000 lbox
8 61 0.9500000 lbox
9 60 0.9500000 lbox
11 58 0.9500000 lbox
12 57 0.9500000 lbox
16 52 0.9500000 lbox
17 51 0.9500000 lbox
18 50 0.9500000 lbox
19 49 0.9500000 lbox
20 48 0.9500000 lbox
23 45 0.9500000 lbox
24 44 0.9500000 lbox
28 43 0.9500000 lbox
29 42 0.9500000 lbox
30 41 0.9500000 lbox
31 40 0.9500000 lbox
showpage
end
%%EOF
