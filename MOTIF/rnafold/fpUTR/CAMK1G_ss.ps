%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGCAGCUAAUCCUCACAGACCUGUAGGAGCUGGAGUGGGAGCUCAAGCAGGAUUCUUCCCGAGUCCCUGGCAUCCUCAGAAGCUUCAACUCUGGAGGCA\
) } def
/len { sequence length } bind def

/coor [
[99.48120880 141.33866882]
[86.36544800 139.02888489]
[78.93158722 152.05722046]
[71.49771881 165.08555603]
[78.00356293 179.17291260]
[74.95354462 194.38728333]
[63.52045822 204.87843323]
[48.10055542 206.61228943]
[34.62310791 198.92216492]
[28.27046585 184.76506042]
[31.48535156 169.58468628]
[43.03157425 159.21818542]
[58.46937943 157.65168762]
[65.90324402 144.62335205]
[73.33711243 131.59501648]
[68.02870178 126.21051025]
[63.78974915 119.94924927]
[60.76205063 113.02066803]
[59.04687881 105.65654755]
[58.70161438 98.10321045]
[59.73780060 90.61331940]
[62.12077713 83.43741608]
[65.77083588 76.81554413]
[55.08366394 66.29013062]
[44.39649582 55.76471329]
[33.70932388 45.23929596]
[23.02215385 34.71387863]
[7.44540024 34.66395950]
[-3.24297142 23.83744621]
[-3.09938431 8.98769951]
[-13.78655434 -1.53771663]
[-24.47372437 -12.06313324]
[-35.16089630 -22.58854866]
[-45.84806442 -33.11396408]
[-61.13248825 -30.43702126]
[-75.05648804 -37.28551102]
[-82.26600647 -51.02605438]
[-79.98883057 -66.37512970]
[-69.10058594 -77.43070221]
[-53.78802109 -79.94168091]
[-39.93913269 -72.94255066]
[-32.87910080 -59.12460327]
[-35.32264709 -43.80113602]
[-24.63547897 -33.27571869]
[-13.94830799 -22.75030327]
[-3.26113796 -12.22488689]
[7.42603207 -1.69947052]
[22.27186203 -2.06949759]
[33.26011276 8.45252895]
[33.54756927 24.02671051]
[44.23474121 34.55212784]
[54.92191315 45.07754135]
[65.60908508 55.60295868]
[76.29624939 66.12837219]
[96.52443695 58.80442810]
[117.69375610 62.63577271]
[134.07182312 76.58492279]
[141.22361755 96.87460327]
[156.13822937 98.47286224]
[171.05284119 100.07112122]
[185.96743774 101.66938019]
[200.88204956 103.26763153]
[215.42808533 97.04479980]
[227.25848389 106.09414673]
[242.17309570 107.69240570]
[257.08770752 109.29066467]
[272.00231934 110.88892365]
[280.53247070 99.93958282]
[293.27514648 94.71771240]
[306.82015991 96.50392914]
[317.60040283 104.71875763]
[322.83105469 117.10420990]
[337.68997192 119.15656281]
[352.54891968 121.20891571]
[367.27795410 115.43257141]
[378.82687378 124.83849335]
[393.68582153 126.89084625]
[408.66406250 120.21372223]
[421.77499390 130.06437683]
[419.53121948 146.30929565]
[404.24090576 152.23710632]
[391.63345337 141.74977112]
[376.77453613 139.69741821]
[363.10830688 145.62057495]
[350.49655151 136.06784058]
[335.63763428 134.01548767]
[320.77868652 131.96315002]
[309.86807251 144.12301636]
[293.71029663 147.47737122]
[278.56094360 140.52761841]
[270.40405273 125.80352783]
[255.48944092 124.20526886]
[240.57482910 122.60701752]
[225.66023254 121.00875854]
[212.18099976 127.34591675]
[199.28379822 118.18224335]
[184.36918640 116.58398438]
[169.45457458 114.98573303]
[154.53996277 113.38747406]
[139.62535095 111.78921509]
[133.82130432 123.77549744]
[124.50762177 133.29461670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[58 100]
[59 99]
[60 98]
[61 97]
[62 96]
[64 94]
[65 93]
[66 92]
[67 91]
[72 87]
[73 86]
[74 85]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
