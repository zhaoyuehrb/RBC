%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAGAAUGGAAGUGAGGAAAGGCAACCAGCUGACACAGGAGCCAGAGUGAGACCAGCAGACUCUCACACUCAACCUACACCAUGAAUUUGUGUCUAUCUUCUACGCGUUAAGAGCCAAGGACAGGUGAAGUUGCCAGAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[99.95195007 342.77941895]
[88.90216064 352.99209595]
[76.11914825 360.92877197]
[62.06501389 366.30258179]
[47.24781036 368.91928101]
[32.20317078 368.68423462]
[17.47494316 365.60592651]
[3.59554887 359.79568481]
[-8.93328285 351.46353149]
[-19.65864182 340.91064453]
[-28.19281387 328.51855469]
[-34.22729492 314.73516846]
[-37.54393768 300.05877686]
[-38.02285385 285.01992798]
[-35.64672470 270.16226196]
[-30.50145149 256.02285767]
[-22.77302933 243.11285400]
[-12.74083614 231.89895630]
[-0.76753062 222.78651428]
[12.71406078 216.10496521]
[27.21658707 212.09580994]
[42.21578979 210.90400696]
[57.16946030 212.57263184]
[61.62015152 198.24812317]
[66.07084656 183.92362976]
[70.52153778 169.59912109]
[74.97222900 155.27462769]
[79.42292023 140.95011902]
[67.32992554 132.14024353]
[58.71893311 119.90483856]
[54.50770187 105.54795837]
[39.52159119 104.90262604]
[24.53548050 104.25728607]
[14.98893738 116.49015808]
[0.06605825 120.74308014]
[-14.49500656 115.38070679]
[-23.09523010 102.46498871]
[-22.42765045 86.96228027]
[-12.74896622 74.83368683]
[2.21917081 70.74290466]
[16.72120667 76.26292419]
[25.18081284 89.27117920]
[40.16692352 89.91651154]
[55.15303802 90.56184387]
[56.59505463 85.29151154]
[58.65406799 80.23025513]
[61.30080414 75.45002747]
[64.49764252 71.01876831]
[68.19915009 66.99947357]
[59.69861984 54.64063263]
[51.19809341 42.28178406]
[42.69756699 29.92294121]
[34.19704056 17.56409645]
[25.69651413 5.20525074]
[10.28026676 5.79079294]
[-2.99364352 -2.07093978]
[-9.88956070 -15.87129784]
[-8.20702267 -31.20663643]
[1.51707971 -43.18350601]
[16.17981911 -47.98012924]
[31.10237122 -44.06592178]
[41.52300262 -32.68989563]
[44.11652374 -17.48209381]
[38.05535889 -3.29527593]
[46.55588531 9.06356907]
[55.05641174 21.42241478]
[63.55693817 33.78125763]
[72.05746460 46.14010620]
[80.55799103 58.49895096]
[86.89562225 56.08412552]
[93.52024078 54.63105011]
[100.28675842 54.17155075]
[107.04699707 54.71569061]
[113.65291595 56.25154877]
[119.95983124 58.74549484]
[125.82962799 62.14291000]
[131.13375854 66.36939240]
[135.75605774 71.33237457]
[139.59532166 76.92317963]
[142.56744385 83.01936340]
[157.22151184 79.81655121]
[171.87559509 76.61373138]
[186.52967834 73.41091919]
[194.31198120 68.48808289]
[201.53340149 70.30043030]
[216.25299072 67.41365814]
[225.08132935 54.58017349]
[240.05021667 51.86226273]
[252.23057556 60.35781860]
[266.95016479 57.47104263]
[281.66976929 54.58427048]
[296.38937378 51.69749451]
[305.21771240 38.86401367]
[320.18658447 36.14609909]
[332.36694336 44.64165497]
[347.08654785 41.75488281]
[361.80615234 38.86810684]
[364.43386841 23.91954613]
[372.28753662 10.93169308]
[384.30499268 1.66104996]
[398.86102295 -2.63860488]
[413.98696899 -1.38577843]
[427.63723755 5.25009441]
[437.96569824 16.37156677]
[443.57556152 30.47455025]
[443.70806885 45.65173340]
[438.34533691 59.85052490]
[428.21264648 71.15065765]
[414.68035889 78.02388000]
[399.57858276 79.54064178]
[384.94970703 75.49581909]
[372.77218628 66.43643951]
[364.69290161 53.58770370]
[349.97332764 56.47447968]
[335.25372314 59.36125183]
[327.18444824 71.82811737]
[312.29782104 74.96540070]
[299.27615356 66.41709137]
[284.55654907 69.30386353]
[269.83694458 72.19064331]
[255.11735535 75.07741547]
[247.04809570 87.54428101]
[232.16145325 90.68156433]
[219.13977051 82.13325500]
[204.42016602 85.02002716]
[189.73248291 88.06500244]
[175.07839966 91.26781464]
[160.42433167 94.47062683]
[145.77024841 97.67343903]
[139.41712952 123.37986755]
[119.90483856 141.28106689]
[93.74742126 145.40081787]
[89.29673004 159.72531128]
[84.84603882 174.04981995]
[80.39534760 188.37431335]
[75.94465637 202.69882202]
[71.49395752 217.02333069]
[84.76023865 224.12278748]
[96.44303131 233.60481262]
[106.12001038 245.12664795]
[113.44135284 258.27175903]
[118.14240265 272.56500244]
[120.05321503 287.48965454]
[119.10472870 302.50622559]
[115.33121490 317.07183838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[31 44]
[32 43]
[33 42]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[80 129]
[81 128]
[82 127]
[83 126]
[85 125]
[86 124]
[89 121]
[90 120]
[91 119]
[92 118]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
