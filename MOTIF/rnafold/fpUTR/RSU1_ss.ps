%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUGUGCGCCUGCGCGGGGCGCCGAGACAGGGCGUGUUCGCUGUUCAGUGCCGGUGUUGCAGGGAGUGAGGGCAGCUGGAGUGCGUUCUGCCGAAGCUUGUGGUUGCACGCCCAUCGUCUUAGGGGCUACCUUCCGUGACC\
) } def
/len { sequence length } bind def

/coor [
[75.85952759 381.73486328]
[68.64469147 394.88577271]
[61.42985916 408.03668213]
[61.57563019 423.85720825]
[48.67045975 431.29397583]
[41.45562744 444.44488525]
[34.24079514 457.59579468]
[27.02596283 470.74670410]
[19.81113243 483.89758301]
[20.70963860 500.27209473]
[6.83209133 509.00970459]
[-7.54548025 501.12191772]
[-7.63266182 484.72299194]
[6.66023064 476.68276978]
[13.87506199 463.53186035]
[21.08989334 450.38095093]
[28.30472565 437.23007202]
[35.51955795 424.07916260]
[34.85773468 409.19924927]
[48.27896118 400.82183838]
[55.49378967 387.67092896]
[62.70862198 374.52001953]
[67.68486786 360.36950684]
[70.28958893 345.59741211]
[72.89431000 330.82528687]
[75.01431274 315.97586060]
[76.64731598 301.06500244]
[78.28031921 286.15417480]
[79.91331482 271.24331665]
[81.54631805 256.33248901]
[72.43468475 239.32791138]
[84.41061401 223.17462158]
[85.39166260 208.20674133]
[86.37271118 193.23884583]
[87.35375977 178.27096558]
[88.33480072 163.30308533]
[89.31584930 148.33520508]
[90.29689789 133.36730957]
[91.27794647 118.39942932]
[73.37853241 100.61435699]
[84.55326080 70.95722961]
[79.42295837 56.86183929]
[74.29265594 42.76645279]
[60.24737167 36.03089142]
[55.24530792 21.66308022]
[61.75318909 8.31455803]
[56.62288666 -5.78083181]
[51.49258423 -19.87622070]
[46.36228561 -33.97161102]
[41.23198318 -48.06700134]
[35.94823074 -62.10558701]
[30.51165962 -76.08570862]
[25.07509041 -90.06582642]
[19.63851929 -104.04594421]
[4.53593493 -103.17008209]
[-10.09761906 -107.00600433]
[-22.82849503 -115.17790222]
[-32.40945435 -126.88518524]
[-37.90184784 -140.98088074]
[-38.76758957 -156.08404541]
[-34.92186356 -170.71502686]
[-26.74143410 -183.44042969]
[-15.02773571 -193.01353455]
[-0.92835748 -198.49649048]
[14.17538738 -199.35211182]
[28.80378723 -195.49658203]
[41.52370071 -187.30763245]
[51.08895874 -175.58752441]
[56.56245804 -161.48446655]
[57.40796280 -146.38015747]
[53.54262924 -131.75434875]
[45.34515381 -119.03991699]
[33.61863708 -109.48251343]
[39.05520630 -95.50239563]
[44.49177933 -81.52227783]
[49.92834854 -67.54216003]
[55.32499313 -62.40927887]
[55.32736969 -53.19729996]
[60.45767212 -39.10191345]
[65.58797455 -25.00652313]
[70.71827698 -10.91113377]
[75.84857941 3.18425560]
[89.41416931 9.22663116]
[94.81782532 23.44827652]
[88.38804626 37.63615036]
[93.51834869 51.73153687]
[98.64865112 65.82692719]
[105.51348114 68.84752655]
[111.55489349 55.11795044]
[125.28437805 61.15957260]
[119.24315643 74.88872528]
[126.10799408 77.90933228]
[139.96618652 72.16907501]
[153.82437134 66.42882538]
[167.68257141 60.68857574]
[172.21200562 45.72133636]
[185.33071899 37.21055984]
[200.84445190 39.17476654]
[211.42810059 50.68652344]
[212.08438110 66.31033325]
[202.50341797 78.66910553]
[187.20906067 81.92740631]
[173.42282104 74.54676819]
[159.56463623 80.28701782]
[145.70643616 86.02726746]
[131.84823608 91.76752472]
[123.32984924 112.83736420]
[106.24582672 119.38047791]
[105.26477814 134.34835815]
[104.28373718 149.31625366]
[103.30268860 164.28413391]
[102.32164001 179.25201416]
[101.34059143 194.21989441]
[100.35955048 209.18778992]
[99.37850189 224.15567017]
[107.07211304 231.97862244]
[109.10589600 242.53622437]
[105.03903198 252.25047302]
[96.45716858 257.96548462]
[94.82416534 272.87631226]
[93.19116211 287.78717041]
[91.55815887 302.69802856]
[89.92515564 317.60885620]
[92.09786224 322.52203369]
[92.11434174 327.28930664]
[90.40528107 331.09725952]
[87.66642761 333.43002319]
[85.06170654 348.20211792]
[82.45698547 362.97424316]
[92.79912567 352.10961914]
[106.32211304 345.61895752]
[121.26799774 344.34597778]
[135.69387817 348.45617676]
[147.72445679 357.41525269]
[155.79580688 370.05856323]
[158.85867310 384.74255371]
[156.51490784 399.55828857]
[149.06918335 412.57986450]
[137.48941040 422.11450195]
[123.28092957 426.92269897]
[108.29076385 426.37945557]
[94.46759033 420.55538940]
[83.60836029 410.20758057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[23 129]
[24 128]
[25 127]
[26 123]
[27 122]
[28 121]
[29 120]
[30 119]
[32 115]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[41 87]
[42 86]
[43 85]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 76]
[52 75]
[53 74]
[54 73]
[92 106]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
