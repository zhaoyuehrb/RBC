%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGAGGAGUGAGUCCUGGCCGCGUCCCCGUCGCUAGGGAAACCGAUGCAGCUGGAGGCCGCGCGCG\
) } def
/len { sequence length } bind def

/coor [
[14.40532017 216.67858887]
[8.90474129 222.07113647]
[1.96186996 225.28332520]
[-5.60346222 225.97503662]
[-12.91095352 224.10151672]
[-19.12226105 219.91444397]
[-32.44054031 226.81541443]
[-45.75881958 233.71640015]
[-59.07709503 240.61737061]
[-65.28131866 255.41220093]
[-80.75531769 259.64718628]
[-93.62876129 250.07356262]
[-94.02625275 234.03543091]
[-81.64286041 223.83586121]
[-65.97807312 227.29908752]
[-52.65979385 220.39811707]
[-39.34151459 213.49714661]
[-26.02323723 206.59616089]
[-17.10255241 185.22720337]
[6.62687063 183.32876587]
[17.58941078 173.09046936]
[28.31605339 162.60528564]
[38.80123901 151.87864685]
[49.28642654 141.15199280]
[59.77161407 130.42535400]
[63.13511658 115.91548920]
[78.31462860 111.45532990]
[88.79981232 100.72868347]
[99.03810883 89.76614380]
[109.02421570 78.57338715]
[118.75294495 67.15621948]
[128.21926880 55.52054977]
[130.92646790 39.93268204]
[144.96041870 34.94291306]
[154.42672729 23.30724335]
[152.24690247 6.11376762]
[162.83799744 -7.18118811]
[179.42050171 -8.83341599]
[188.34741211 -20.88788223]
[189.67143250 -37.23349380]
[204.60307312 -44.01422119]
[217.78193665 -34.25463486]
[215.65074158 -17.99455833]
[200.40188599 -11.96096706]
[191.47497559 0.09349986]
[195.14894104 12.64524078]
[190.75799561 25.17305183]
[179.73004150 32.91062927]
[166.06240845 32.77356339]
[156.59608459 44.40923309]
[154.56596375 59.16483688]
[139.85493469 64.98686981]
[130.38861084 76.62253571]
[128.55149841 84.04454803]
[120.21696472 88.55949402]
[110.23086548 99.75225067]
[107.51789856 107.65439606]
[99.52645874 111.21387482]
[89.04126740 121.94051361]
[84.92779541 137.21762085]
[70.49825287 140.91053772]
[60.01306915 151.63719177]
[49.52788162 162.36383057]
[39.04269409 173.09046936]
[35.10704422 181.71368408]
[27.82770729 184.05300903]
[16.86516762 194.29130554]
[18.66618919 201.94438171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[20 67]
[21 66]
[22 64]
[23 63]
[24 62]
[25 61]
[27 59]
[28 58]
[29 56]
[30 55]
[31 53]
[32 52]
[34 50]
[35 49]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
