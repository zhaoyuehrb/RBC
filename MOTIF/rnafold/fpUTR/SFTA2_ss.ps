%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUGUAGAAACAGGCCUGUUAAGGAGAGGCCACCGGGACUUCAGUGUCUCCUCCAUCCCAGGAGCGCAGUGGCCACU\
) } def
/len { sequence length } bind def

/coor [
[200.60038757 199.48118591]
[190.85867310 188.07508850]
[181.11694336 176.66900635]
[171.37522888 165.26290894]
[161.63351440 153.85682678]
[151.89178467 142.45072937]
[137.74259949 137.79782104]
[134.66358948 122.27910614]
[124.92186737 110.87301636]
[117.19397736 120.07151031]
[106.53072357 124.82304382]
[95.20301819 124.44007874]
[85.48627472 119.29597473]
[79.20335388 110.69091797]
[77.38407135 100.53760529]
[63.11822510 95.90235138]
[48.85237885 91.26709747]
[34.58653259 86.63184357]
[20.32068443 81.99658966]
[4.80498219 85.09070587]
[-4.90841532 73.79915619]
[-19.17426300 69.16390228]
[-36.10659409 70.01975250]
[-41.61633301 53.98606491]
[-27.73449707 44.25308228]
[-14.53900814 54.89805222]
[-0.27316031 59.53330994]
[14.22215176 56.10764313]
[24.95593834 67.73074341]
[39.22178650 72.36599731]
[53.48763275 77.00125122]
[67.75347900 81.63650513]
[82.01933289 86.27175903]
[88.86751556 79.00446320]
[98.59684753 75.13315582]
[109.53610992 75.75987244]
[119.61814117 81.17314148]
[124.80989838 67.10027313]
[130.00166321 53.02740479]
[135.19340515 38.95453262]
[140.38516235 24.88166428]
[133.54176331 10.63584137]
[138.85482788 -4.24861050]
[153.17221069 -10.94101048]
[167.99966431 -5.47087669]
[174.54031372 8.91645813]
[168.91372681 23.68524170]
[154.45803833 30.07341957]
[149.26628113 44.14628983]
[144.07452393 58.21915817]
[138.88276672 72.29203033]
[133.69100952 86.36489868]
[136.32795715 101.13130188]
[146.06968689 112.53738403]
[160.91566467 118.00614929]
[163.29788208 132.70901489]
[173.03959656 144.11509705]
[182.78131104 155.52119446]
[192.52304077 166.92727661]
[202.26475525 178.33337402]
[212.00648499 189.73945618]
[221.97026062 200.95208740]
[232.15228271 211.96691895]
[247.70956421 212.74699402]
[257.87866211 224.06265259]
[257.03912354 238.88934326]
[267.22113037 249.90419006]
[283.02108765 250.27413940]
[293.87115479 261.76550293]
[293.33416748 277.56066895]
[281.72872925 288.28863525]
[265.94012451 287.58468628]
[255.33544922 275.86648560]
[256.20626831 260.08618164]
[246.02427673 249.07135010]
[231.17741394 248.74504089]
[220.69450378 237.71946716]
[221.13743591 222.14894104]
[210.95542908 211.13409424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[6 56]
[8 54]
[9 53]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[21 27]
[22 26]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[62 79]
[63 78]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
