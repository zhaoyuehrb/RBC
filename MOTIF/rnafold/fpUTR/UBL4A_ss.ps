%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCCAGCGCGCGCCCGGGGCGGCGGCGCGCGGCGGGGGGUGGUUGGGGUGCGCGCCGGCCCGAGUGGACGCCGUCGCGACCGCC\
) } def
/len { sequence length } bind def

/coor [
[99.53576660 110.92956543]
[94.64498901 110.61045837]
[90.01054382 108.05262756]
[75.03253937 108.86470795]
[60.05454254 109.67679596]
[45.07654190 110.48887634]
[34.54956436 121.97019196]
[19.34817123 122.58039093]
[8.46737003 112.47377014]
[-6.51063061 113.28585052]
[-21.48863220 114.09793854]
[-36.46663284 114.91001892]
[-51.44463348 115.72210693]
[-66.42263794 116.53418732]
[-81.40063477 117.34627533]
[-90.02902985 121.00637054]
[-96.93212891 117.90736389]
[-111.92968750 118.17817688]
[-122.71965027 129.72599792]
[-138.51745605 130.17837524]
[-149.95056152 119.26692963]
[-150.23590088 103.46521759]
[-139.20417786 92.14811707]
[-123.40032959 92.02986908]
[-112.20050049 103.18061829]
[-97.20294189 102.90980530]
[-82.21272278 102.36827087]
[-67.23471832 101.55619049]
[-52.25671768 100.74410248]
[-37.27871704 99.93202209]
[-22.30071640 99.11993408]
[-7.32271433 98.30785370]
[7.65528679 97.49576569]
[17.37958527 86.27197266]
[32.55784225 85.23503876]
[44.26445770 95.51087952]
[59.24245834 94.69879150]
[74.22045898 93.88671112]
[89.19846344 93.07462311]
[104.11052704 91.45284271]
[118.91292572 89.02611542]
[133.71533203 86.59938049]
[148.51773071 84.17265320]
[163.32011414 81.74591827]
[178.12251282 79.31919098]
[192.92491150 76.89246368]
[207.72731018 74.46572876]
[220.09393311 64.59774017]
[233.90530396 70.17407227]
[248.70770264 67.74733734]
[263.51010132 65.32061005]
[278.31250000 62.89387894]
[286.49456787 58.32234192]
[293.69226074 60.65682983]
[308.57263184 58.76608276]
[323.45300293 56.87533569]
[338.29678345 54.71624756]
[353.09918213 52.28951645]
[367.90158081 49.86278915]
[375.72668457 36.32389069]
[390.44128418 31.03098869]
[405.09759521 36.48323059]
[412.77532959 50.10623169]
[409.84933472 65.46762848]
[397.70114136 75.31423950]
[382.06680298 74.99679565]
[370.32830811 64.66518402]
[355.52590942 67.09191895]
[340.72351074 69.51864624]
[334.48913574 73.80688477]
[325.34375000 71.75569916]
[310.46337891 73.64643860]
[295.58300781 75.53718567]
[280.73922729 77.69627380]
[265.93682861 80.12300873]
[251.13442993 82.54973602]
[236.33203125 84.97646332]
[225.02416992 94.67088318]
[210.15403748 89.26812744]
[195.35165405 91.69486237]
[180.54925537 94.12158966]
[165.74685669 96.54831696]
[150.94445801 98.97505188]
[136.14205933 101.40177917]
[121.33966064 103.82850647]
[106.53726196 106.25524139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 36]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[17 26]
[18 25]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[49 77]
[50 76]
[51 75]
[52 74]
[54 73]
[55 72]
[56 71]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
