%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGACGCUCCACGUGUCCCUCGCCGCGCCCCGUCUACCCGCCCCUGCCCUGAGGACCCUAGUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[89.22835541 109.05673981]
[75.18482971 114.32736206]
[61.14130783 119.59798431]
[47.48414612 125.80136108]
[34.27521133 132.90939331]
[21.06628036 140.01742554]
[7.85734653 147.12545776]
[-5.35158634 154.23348999]
[-18.56052017 161.34150696]
[-24.53304291 176.23139954]
[-39.93904877 180.70738220]
[-52.96036911 171.33589172]
[-53.60815811 155.30592346]
[-41.38549042 144.91430664]
[-25.66854858 148.13258362]
[-12.45961666 141.02455139]
[0.74931675 133.91651917]
[13.95825005 126.80849457]
[27.16718292 119.70046234]
[40.37611389 112.59243011]
[41.70881271 108.98712921]
[45.05308151 105.95899963]
[50.05686569 104.54582977]
[55.87068558 105.55446625]
[69.91420746 100.28384399]
[83.95773315 95.01322174]
[92.50000000 82.68318939]
[92.50000000 67.68318939]
[92.50000000 52.68318558]
[78.91812134 45.62689972]
[70.18070221 33.06043243]
[68.29554749 17.87146378]
[73.69583893 3.55030966]
[85.14063263 -6.61213350]
[100.00000000 -10.28061104]
[114.85936737 -6.61213350]
[126.30416107 3.55030966]
[131.70445251 17.87146378]
[129.81929016 33.06043243]
[121.08187866 45.62689972]
[107.50000000 52.68318558]
[107.50000000 67.68318939]
[107.50000000 82.68318939]
[109.87187958 67.87190247]
[118.63129425 55.69517899]
[131.91963196 48.73673248]
[146.91731262 48.47304535]
[160.44206238 54.96006012]
[169.62411499 66.82134247]
[172.51518250 81.54009247]
[168.50183105 95.99322510]
[158.43563843 107.11399841]
[144.45248413 112.54275513]
[129.51939392 111.12759399]
[116.80506897 103.16893005]
[128.10113525 113.03800964]
[139.39721680 122.90709686]
[150.69328308 132.77616882]
[166.87908936 135.41279602]
[172.43478394 150.84219360]
[161.64515686 163.19192505]
[145.60963440 159.75764465]
[140.82420349 144.07225037]
[129.52812195 134.20317078]
[118.23205566 124.33408356]
[106.93598175 114.46500397]
[102.85315704 115.38587952]
[98.77487183 115.20514679]
[94.98596954 113.98923492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[27 43]
[28 42]
[29 41]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
