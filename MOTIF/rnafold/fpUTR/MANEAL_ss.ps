%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGCGCGCGGCCGGGCGGGCGGCCAUGGCGCGGCACGCUGGGAGGUAGCGCGGCGGCUGCAGGAGCGCACAGUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[172.74955750 203.59020996]
[157.91564941 205.81617737]
[145.64686584 197.18617249]
[142.72824097 182.47285461]
[150.77386475 169.81315613]
[165.33352661 166.20819092]
[154.13522339 156.22831726]
[142.93693542 146.24842834]
[131.73863220 136.26853943]
[120.35121918 126.50498962]
[108.77888489 116.96134949]
[94.34611511 118.24253082]
[83.16761017 109.02368164]
[81.67747498 94.61098480]
[70.10514069 85.06735229]
[54.53565979 82.25634003]
[49.63950348 68.18946075]
[38.06716537 58.64582825]
[26.49482918 49.10219193]
[14.92249203 39.55855560]
[-0.64699090 36.74754333]
[-5.54314470 22.68066788]
[-17.11548233 13.13703156]
[-32.68496323 10.32601929]
[-37.58111954 -3.74085474]
[-49.15345764 -13.28449154]
[-64.85935974 -11.52377129]
[-77.15782928 -21.44965935]
[-78.75239563 -37.17330170]
[-68.69703674 -49.36613846]
[-52.95741653 -50.79437637]
[-40.87157059 -40.61067200]
[-39.60982132 -24.85682869]
[-28.03748131 -15.31319237]
[-13.29573059 -13.18480492]
[-7.57184553 1.56469357]
[4.00049210 11.10832977]
[18.74224281 13.23671722]
[24.46612740 27.98621559]
[36.03846741 37.52985382]
[47.61080170 47.07349014]
[59.18313980 56.61712646]
[73.92489624 58.74551392]
[79.64878082 73.49501038]
[91.22111511 83.03865051]
[105.65388489 81.75746918]
[116.83238983 90.97631836]
[118.32252502 105.38901520]
[129.89485168 114.93264771]
[138.74526978 118.09198761]
[141.71852112 125.07024384]
[152.91680908 135.05012512]
[164.11511230 145.03001404]
[175.31341553 155.00990295]
[187.58235168 163.63967896]
[200.76004028 170.80548096]
[213.93771362 177.97126770]
[227.25024414 184.88333130]
[240.69273376 191.53913879]
[254.13520813 198.19493103]
[267.57769775 204.85073853]
[281.02017212 211.50653076]
[293.75958252 202.92730713]
[309.08294678 201.88320923]
[322.86834717 208.65507507]
[331.40759277 221.42131042]
[332.40365601 236.74787903]
[325.58862305 250.51199341]
[312.79568481 259.01116943]
[297.46606445 259.95919800]
[283.72338867 253.10104370]
[275.26434326 240.28150940]
[274.36437988 224.94900513]
[260.92190552 218.29321289]
[247.47941589 211.63742065]
[234.03692627 204.98161316]
[220.59445190 198.32582092]
[213.01065063 198.17672729]
[206.77192688 191.14895630]
[193.59423828 183.98315430]
[180.41654968 176.81736755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 54]
[7 53]
[8 52]
[9 51]
[10 49]
[11 48]
[14 45]
[15 44]
[17 42]
[18 41]
[19 40]
[20 39]
[22 37]
[23 36]
[25 34]
[26 33]
[55 81]
[56 80]
[57 79]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
