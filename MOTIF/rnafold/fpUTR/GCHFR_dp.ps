%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:55 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (GCHFR)
} def

/sequence { (\
UCCCAGCUGCGCGUCGCAGUCCCGACGCGAGAAGGGCUGGAGUCGGCGUCCAGCCUAGAGCCCCCGGUGGGAGCCAGGCCGGGACGCGUGCACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 36 0.010837227 ubox
1 40 0.007501036 ubox
1 41 0.191310323 ubox
1 84 0.005705072 ubox
2 35 0.014909499 ubox
2 36 0.359726299 ubox
2 39 0.003856732 ubox
2 40 0.167206666 ubox
2 45 0.009787718 ubox
2 83 0.006332735 ubox
3 34 0.014394083 ubox
3 35 0.364062669 ubox
3 36 0.013533213 ubox
3 39 0.118773987 ubox
3 40 0.913554385 ubox
3 82 0.006335519 ubox
4 34 0.363883493 ubox
4 35 0.013765332 ubox
4 39 0.923394616 ubox
4 81 0.006329539 ubox
5 38 0.930696149 ubox
6 37 0.930985770 ubox
6 79 0.006162463 ubox
6 91 0.003295356 ubox
7 31 0.363544389 ubox
7 34 0.031804317 ubox
7 35 0.072463911 ubox
7 36 0.926541978 ubox
7 78 0.005771072 ubox
7 90 0.003283097 ubox
8 30 0.370443638 ubox
8 33 0.064760778 ubox
8 34 0.088910951 ubox
8 35 0.832870418 ubox
8 76 0.003183911 ubox
8 77 0.004963091 ubox
8 92 0.004877781 ubox
9 28 0.003710921 ubox
9 75 0.003385419 ubox
9 91 0.005503222 ubox
10 27 0.003545230 ubox
10 29 0.977082717 ubox
10 90 0.005499535 ubox
11 28 0.999270113 ubox
11 89 0.005432566 ubox
12 27 0.999332563 ubox
12 88 0.005400265 ubox
13 26 0.999313715 ubox
13 87 0.005200510 ubox
14 25 0.999227822 ubox
14 30 0.035018421 ubox
14 86 0.004973819 ubox
15 24 0.999313983 ubox
15 29 0.035205054 ubox
16 23 0.969096153 ubox
16 28 0.035209108 ubox
17 27 0.035125447 ubox
19 26 0.028510816 ubox
19 85 0.005588415 ubox
20 25 0.026410325 ubox
20 84 0.005649130 ubox
21 83 0.005652326 ubox
22 82 0.005652994 ubox
23 81 0.005652700 ubox
24 80 0.005565396 ubox
27 79 0.003646903 ubox
28 78 0.003658988 ubox
34 56 0.009310490 ubox
35 55 0.009678128 ubox
36 54 0.009703152 ubox
36 91 0.003185699 ubox
37 53 0.009716496 ubox
37 90 0.003322627 ubox
38 45 0.006047526 ubox
38 52 0.009715973 ubox
38 92 0.012797642 ubox
39 44 0.007161428 ubox
39 51 0.009718531 ubox
39 91 0.014101498 ubox
39 94 0.323519389 ubox
40 50 0.009718244 ubox
40 93 0.327173568 ubox
41 49 0.009620015 ubox
42 89 0.009979969 ubox
42 91 0.953731813 ubox
42 93 0.209222124 ubox
43 88 0.004245429 ubox
43 90 0.943278750 ubox
43 92 0.208662561 ubox
44 88 0.112512103 ubox
44 90 0.240890963 ubox
45 87 0.080298701 ubox
45 89 0.214809025 ubox
46 87 0.996551259 ubox
46 89 0.003281103 ubox
47 86 0.999903019 ubox
47 88 0.003183244 ubox
48 85 0.999905105 ubox
49 83 0.045598394 ubox
49 84 0.998764019 ubox
50 82 0.087242145 ubox
50 83 0.996130011 ubox
51 81 0.114386445 ubox
51 82 0.993174025 ubox
53 79 0.999544398 ubox
54 78 0.999933777 ubox
55 77 0.999890828 ubox
55 78 0.004111612 ubox
56 76 0.987629370 ubox
56 77 0.004638475 ubox
60 68 0.004082323 ubox
60 74 0.988839757 ubox
60 79 0.003492679 ubox
61 67 0.004124556 ubox
61 70 0.008032294 ubox
61 71 0.137511367 ubox
61 73 0.988961419 ubox
61 78 0.003496041 ubox
62 66 0.004096198 ubox
62 69 0.008041553 ubox
62 70 0.137625900 ubox
62 71 0.800984613 ubox
62 77 0.003488931 ubox
63 69 0.137203040 ubox
63 70 0.800777752 ubox
63 71 0.579991601 ubox
63 83 0.004612235 ubox
64 69 0.796905592 ubox
64 70 0.580748970 ubox
64 71 0.046711657 ubox
64 82 0.004644074 ubox
65 69 0.576962075 ubox
65 70 0.048016694 ubox
65 81 0.004655422 ubox
66 75 0.007739518 ubox
66 80 0.004659787 ubox
67 74 0.007742875 ubox
67 79 0.004656311 ubox
68 73 0.007617809 ubox
68 78 0.004097896 ubox
69 75 0.003793845 ubox
70 74 0.003740813 ubox
3 40 0.9500000 lbox
4 39 0.9500000 lbox
5 38 0.9500000 lbox
6 37 0.9500000 lbox
7 36 0.9500000 lbox
8 35 0.9500000 lbox
10 29 0.9500000 lbox
11 28 0.9500000 lbox
12 27 0.9500000 lbox
13 26 0.9500000 lbox
14 25 0.9500000 lbox
15 24 0.9500000 lbox
16 23 0.9500000 lbox
42 91 0.9500000 lbox
43 90 0.9500000 lbox
46 87 0.9500000 lbox
47 86 0.9500000 lbox
48 85 0.9500000 lbox
49 84 0.9500000 lbox
50 83 0.9500000 lbox
51 82 0.9500000 lbox
53 79 0.9500000 lbox
54 78 0.9500000 lbox
55 77 0.9500000 lbox
56 76 0.9500000 lbox
60 74 0.9500000 lbox
61 73 0.9500000 lbox
62 71 0.9500000 lbox
63 70 0.9500000 lbox
64 69 0.9500000 lbox
showpage
end
%%EOF
