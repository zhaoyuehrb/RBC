%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAUUUGGGGCUGGGUCGGCCGGGGUCGGGGAGGGGGGUGGUGAAAAGGUGACAGGGAGCUGCCCUCGCUCAAGAGCCGGUGGUUGGGGGUCUGAGAAGAAGUCACCAAU\
) } def
/len { sequence length } bind def

/coor [
[126.85578918 302.40292358]
[125.60616302 287.45504761]
[116.83547211 275.41659546]
[123.39620209 261.01983643]
[122.14657593 246.07197571]
[120.89694977 231.12411499]
[118.61223602 216.29913330]
[115.30347443 201.66860962]
[104.94931793 190.96156311]
[109.45192719 175.79460144]
[106.14316559 161.16407776]
[102.83439636 146.53355408]
[99.52562714 131.90304565]
[96.21686554 117.27252197]
[87.36631012 112.37101746]
[82.65181732 103.41944122]
[83.61682892 93.34840393]
[89.94541168 85.45498657]
[87.45484924 70.66319275]
[84.96428680 55.87140274]
[82.47371674 41.07961273]
[79.98315430 26.28782082]
[77.49258423 11.49602890]
[75.00202179 -3.29576206]
[72.10123444 -18.01260376]
[68.79246521 -32.64312363]
[58.20164871 -44.39663696]
[62.94092560 -58.51713943]
[59.63216019 -73.14765930]
[47.42123032 -79.02857971]
[40.96127319 -90.72048950]
[42.43804550 -103.79977417]
[51.08190918 -113.46543121]
[48.18112183 -128.18228149]
[45.28033447 -142.89912415]
[42.17525482 -157.57421875]
[38.86648941 -172.20472717]
[35.55772400 -186.83525085]
[32.24895477 -201.46577454]
[28.94018936 -216.09628296]
[25.63142204 -230.72680664]
[22.32265663 -245.35733032]
[19.01388931 -259.98785400]
[15.70512199 -274.61834717]
[0.66506189 -276.50842285]
[-12.82011032 -283.43130493]
[-23.12199402 -294.55096436]
[-28.99658775 -308.52468872]
[-29.73450470 -323.66506958]
[-25.24663734 -338.14382935]
[-16.07491875 -350.21261597]
[-3.32687831 -358.41403198]
[11.45809650 -361.75772095]
[26.49464798 -359.83993530]
[39.96704102 -352.89224243]
[50.24841309 -341.75363159]
[56.09724808 -327.76910400]
[56.80725861 -312.62738037]
[52.29271698 -298.15689087]
[43.09877396 -286.10504150]
[30.33563995 -277.92712402]
[33.64440536 -263.29660034]
[36.95317459 -248.66609192]
[40.26194000 -234.03556824]
[43.57070923 -219.40505981]
[46.87947464 -204.77453613]
[50.18824005 -190.14401245]
[53.49700928 -175.51350403]
[56.80577469 -160.88298035]
[61.41544342 -154.97000122]
[59.99717331 -145.79991150]
[62.89796066 -131.08306885]
[65.79875183 -116.36621857]
[80.12071228 -107.67292023]
[83.86415863 -90.99821472]
[74.26268005 -76.45642090]
[77.57144165 -61.82590485]
[87.92559814 -51.11886215]
[83.42298889 -35.95188904]
[86.73175049 -21.32137108]
[90.34010315 -17.99859810]
[91.80986023 -12.32374477]
[89.79381561 -5.78632784]
[92.28437805 9.00546360]
[94.77494049 23.79725456]
[97.26551056 38.58904648]
[99.75607300 53.38083649]
[102.24664307 68.17263031]
[104.73720551 82.96441650]
[117.34818268 96.58055878]
[110.84738159 113.96375275]
[114.15615082 128.59426880]
[117.46491241 143.22479248]
[120.77368164 157.85531616]
[124.08245087 172.48582458]
[134.67326355 184.23934937]
[129.93399048 198.35984802]
[133.24275208 212.99035645]
[143.91998291 202.45486450]
[158.84516907 203.95109558]
[167.21859741 216.39640808]
[162.98133850 230.78549194]
[149.19941711 236.70654297]
[135.84480286 229.87448120]
[137.09443665 244.82234192]
[138.34405518 259.77020264]
[147.20413208 272.87780762]
[140.55401611 286.20544434]
[141.80364990 301.15328979]
[151.59719849 314.30691528]
[144.85502625 329.25601196]
[128.51287842 330.62219238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[4 106]
[5 105]
[6 104]
[7 98]
[8 97]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 80]
[26 79]
[28 77]
[29 76]
[33 73]
[34 72]
[35 71]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
