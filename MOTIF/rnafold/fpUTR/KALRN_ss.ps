%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGGGAGGACUGGUGGCUGUCUUUGCAGGCAGGCAUUUGCUUAGAGCAGGCUGUGUGCGAGCCCAGCGUCAAGUGAUUCCGGCCUCCUCGAGUCAGCGGUGGUGGGAUGAGGCUCUGCCGAGGGGACUGGCUGUGAAGGAUGAGUUCAGGGUGGG\
) } def
/len { sequence length } bind def

/coor [
[82.49716949 108.63523102]
[79.82394409 96.41944885]
[85.19328308 84.45877075]
[70.43281555 81.78880310]
[55.47579956 86.94614410]
[44.32899475 77.06697083]
[29.56853104 74.39700317]
[14.80806923 71.72703552]
[0.04760594 69.05706787]
[-17.10268211 75.69179535]
[-30.06796646 63.89974594]
[-44.87859726 61.52377319]
[-59.68922806 59.14780426]
[-69.41796112 70.95030212]
[-83.65408325 76.26345062]
[-98.53930664 73.75415039]
[-110.09263611 64.19504547]
[-115.27510834 50.23053360]
[-130.08573914 47.85456467]
[-144.89636230 45.47859192]
[-159.70700073 43.10262299]
[-172.42524719 52.09616852]
[-187.41148376 49.47561646]
[-195.90708923 37.29528427]
[-210.71771240 34.91931534]
[-225.52833557 32.54334259]
[-240.33897400 30.16737366]
[-255.14959717 27.79140282]
[-269.96023560 25.41543388]
[-284.81176758 30.86913300]
[-296.15277100 21.21353912]
[-310.96340942 18.83756828]
[-325.77404785 16.46159744]
[-340.58465576 14.08562756]
[-345.56112671 15.99268436]
[-350.28875732 15.78383446]
[-353.99206543 13.91869450]
[-356.19656372 11.10106277]
[-370.83920288 7.84638071]
[-385.48187256 4.59169865]
[-400.12451172 1.33701670]
[-414.76715088 -1.91766548]
[-429.40979004 -5.17234755]
[-446.18350220 -2.70681000]
[-453.19610596 -18.14247131]
[-440.30496216 -29.15404129]
[-426.15512085 -19.81499290]
[-411.51245117 -16.56031036]
[-396.86981201 -13.30562782]
[-382.22717285 -10.05094624]
[-367.58453369 -6.79626369]
[-352.94189453 -3.54158163]
[-338.20870972 -0.72500277]
[-323.39807129 1.65096760]
[-308.58743286 4.02693796]
[-293.77679443 6.40290833]
[-279.98464966 0.77926350]
[-267.58425903 10.60480309]
[-252.77363586 12.98077297]
[-237.96299744 15.35674381]
[-223.15237427 17.73271370]
[-208.34173584 20.10868454]
[-193.53111267 22.48465538]
[-181.65185547 13.57292557]
[-166.59793091 15.77151394]
[-157.33102417 28.29199219]
[-142.52040100 30.66796303]
[-127.70977020 33.04393387]
[-112.89913940 35.41990280]
[-103.60867310 23.77718735]
[-89.64502716 18.31160355]
[-74.72184753 20.58426285]
[-62.86201859 30.08380699]
[-57.31325531 44.33717346]
[-42.50262833 46.71314621]
[-27.69199753 49.08911514]
[-17.67743301 42.24346542]
[-5.28938675 44.13922882]
[2.71757436 54.29660416]
[17.47803688 56.96657562]
[32.23849869 59.63654327]
[46.99896240 62.30651093]
[60.90021515 56.95819473]
[73.10279083 67.02834320]
[87.86325073 69.69831085]
[102.69676971 67.46969604]
[116.02101135 60.58023834]
[129.34524536 53.69077682]
[142.66949463 46.80131912]
[155.99372864 39.91186142]
[169.31796265 33.02239990]
[182.64221191 26.13294029]
[169.50807190 18.88761902]
[166.78311157 4.13721132]
[176.46170044 -7.32249832]
[191.46011353 -7.10417795]
[200.80104065 4.63238478]
[197.64880371 19.29603767]
[211.59106445 13.76307964]
[225.53330994 8.23012066]
[239.47557068 2.69716167]
[246.34330750 -3.40988708]
[253.75042725 -2.80416703]
[267.79992676 -8.05882931]
[281.84942627 -13.31349277]
[285.86462402 -28.30208778]
[297.94418335 -38.04186630]
[313.44332886 -38.78768539]
[326.40231323 -30.25276566]
[331.83810425 -15.71895218]
[327.66055298 -0.77479666]
[315.47604370 8.83336926]
[299.96969604 9.41100979]
[287.10409546 0.73601002]
[273.05459595 5.99067259]
[259.00509644 11.24533558]
[245.00852966 16.63941193]
[231.06626892 22.17237091]
[217.12402344 27.70532990]
[203.18176270 33.23828888]
[189.53166199 39.45718002]
[176.20742798 46.34663773]
[162.88317871 53.23609924]
[149.55894470 60.12555695]
[136.23471069 67.01501465]
[122.91046906 73.90447998]
[109.58622742 80.79393768]
[118.71707916 94.46941376]
[115.12955475 108.93048859]
[123.55587006 121.34004974]
[137.70927429 128.41052246]
[138.45777893 143.28630066]
[146.88409424 155.69586182]
[155.31040955 168.10542297]
[169.46382141 175.17590332]
[170.21232605 190.05169678]
[178.63864136 202.46125793]
[187.06495667 214.87081909]
[195.49127197 227.28036499]
[211.06549072 228.68673706]
[222.05531311 239.81137085]
[223.27171326 255.40156555]
[214.14030457 268.09613037]
[198.97270203 271.90103149]
[184.93054199 265.01977539]
[178.64413452 250.70141602]
[183.08171082 235.70669556]
[174.65539551 223.29713440]
[166.22908020 210.88757324]
[157.80276489 198.47801208]
[144.25205994 192.29515076]
[142.90084839 176.53173828]
[134.47453308 164.12219238]
[126.04821777 151.71263123]
[112.49752045 145.52976990]
[111.14630890 129.76635742]
[102.71999359 117.35680389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[6 82]
[7 81]
[8 80]
[9 79]
[11 76]
[12 75]
[13 74]
[18 69]
[19 68]
[20 67]
[21 66]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[31 56]
[32 55]
[33 54]
[34 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[86 127]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[98 120]
[99 119]
[100 118]
[101 117]
[103 116]
[104 115]
[105 114]
[129 157]
[130 156]
[132 154]
[133 153]
[134 152]
[136 150]
[137 149]
[138 148]
[139 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
