%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGGCCUGGCGCGCGCGCGGGCGGGAGCGGAGGGCAACGGGGCGGCGCGGGCGGCCGGGCGCAGGGUCGCGGGAGGUGACGCGCGGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[202.04798889 212.92582703]
[201.16813660 205.57693481]
[202.73625183 198.28987122]
[191.61146545 188.22810364]
[180.48669434 178.16633606]
[169.19532776 168.29185486]
[157.74055481 158.60743713]
[146.28576660 148.92301941]
[134.83097839 139.23860168]
[123.37619781 129.55418396]
[111.92141724 119.86976624]
[100.46663666 110.18534851]
[92.60316467 107.73025513]
[88.79792023 99.98087311]
[77.67314148 89.91910553]
[66.54835510 79.85733795]
[51.12336731 76.33877563]
[46.87422562 62.06312943]
[35.74944305 52.00135803]
[24.62466049 41.93958664]
[13.49987888 31.87781715]
[0.47072828 31.71449089]
[-8.60427856 22.93522835]
[-9.16118717 10.72486115]
[-19.94354248 0.29697466]
[-33.42029953 3.69207764]
[-46.69539261 -0.03700143]
[-56.28026581 -9.79777050]
[-59.71223068 -22.92773438]
[-56.18663406 -35.92004776]
[-66.61451721 -46.70240402]
[-81.95955658 -44.39817429]
[-95.71278381 -51.58345413]
[-102.58581543 -65.49536133]
[-99.93581390 -80.78447723]
[-88.78177643 -91.57183075]
[-73.41264343 -93.70946503]
[-59.73817062 -86.37540436]
[-53.01646423 -72.38976288]
[-55.83216476 -57.13029099]
[-45.40427780 -46.34793472]
[-29.33137131 -49.19070816]
[-14.55088520 -41.88542557]
[-6.89576960 -27.09712219]
[-9.51565647 -10.48538017]
[1.26669908 -0.05749418]
[18.42821121 3.16731644]
[23.56164932 20.75303650]
[34.68643188 30.81480598]
[45.81121445 40.87657928]
[56.93599319 50.93834686]
[71.56526947 53.73722458]
[76.61013031 68.73255157]
[87.73490906 78.79432678]
[98.85969543 88.85609436]
[110.15105438 98.73056793]
[121.60583496 108.41498566]
[133.06062317 118.09940338]
[144.51539612 127.78382111]
[155.97018433 137.46824646]
[167.42497253 147.15266418]
[178.87974548 156.83708191]
[187.64118958 160.07989502]
[190.54846191 167.04154968]
[201.67324829 177.10331726]
[212.79801941 187.16508484]
[236.55680847 189.20150757]
[244.74589539 210.87298584]
[257.65191650 218.51724243]
[270.55795288 226.16149902]
[283.46395874 233.80574036]
[296.36999512 241.44999695]
[309.27600098 249.09423828]
[322.62240601 241.49362183]
[337.98092651 241.60054016]
[351.22021484 249.38621521]
[358.77896118 262.75637817]
[358.62390137 278.11447144]
[350.79675293 291.32928467]
[337.40298462 298.84609985]
[322.04544067 298.64291382]
[308.85522461 290.77438354]
[301.38043213 277.35708618]
[301.63177490 262.00027466]
[288.72573853 254.35601807]
[275.81970215 246.71176147]
[262.91369629 239.06752014]
[250.00765991 231.42326355]
[237.10163879 223.77902222]
[231.00578308 227.39265442]
[224.01486206 228.83879089]
[216.88148499 227.92687988]
[210.38500977 224.72215271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[14 55]
[15 54]
[16 53]
[18 51]
[19 50]
[20 49]
[21 48]
[24 46]
[25 45]
[30 41]
[31 40]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
