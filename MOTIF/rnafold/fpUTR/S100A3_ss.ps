%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCAGAUUGGUAAACACCCGAACUGGUCAACUCUCAAGAGACCAUCUGGUUCAGGUUCCUGACUGGGCCAGCGAGUGAGG\
) } def
/len { sequence length } bind def

/coor [
[91.38848877 214.91259766]
[77.53096008 206.82875061]
[75.35379791 190.93411255]
[86.52713776 179.42169189]
[87.64808655 164.46362305]
[88.76904297 149.50556946]
[89.88999176 134.54751587]
[81.37895203 130.80583191]
[74.11010742 125.00912476]
[68.56835175 117.54407501]
[54.23476028 121.96540070]
[39.90116882 126.38672638]
[25.56757545 130.80805969]
[19.66052437 145.28703308]
[5.80451584 152.53582764]
[-9.45806885 149.13177490]
[-18.92070198 136.68217468]
[-18.11541748 121.06534576]
[-7.42244720 109.65506744]
[8.10931587 107.83893585]
[21.14624786 116.47446442]
[35.47983932 112.05313873]
[49.81343460 107.63181305]
[64.14702606 103.21047974]
[65.30222321 90.41839600]
[70.87508392 78.84622192]
[80.15608978 69.96731567]
[74.67597961 56.00420761]
[69.19586182 42.04109955]
[63.71574783 28.07799339]
[58.23563004 14.11488724]
[43.01466751 12.50839233]
[30.29018784 4.00273275]
[22.98618698 -9.44755268]
[22.78107262 -24.75168610]
[29.72197342 -38.39289093]
[42.21392441 -47.23651886]
[57.38636780 -49.25036621]
[71.75278473 -43.97166824]
[82.01187897 -32.61343002]
[85.80618286 -17.78569031]
[82.26380157 -2.89575744]
[72.19873810 8.63477230]
[77.67885590 22.59787750]
[83.15896606 36.56098557]
[88.63908386 50.52408981]
[94.11920166 64.48719788]
[118.57798004 69.16817474]
[134.14532471 88.60528564]
[149.05101013 86.92581940]
[163.95669556 85.24635315]
[178.86238098 83.56688690]
[193.76806641 81.88742065]
[208.67375183 80.20795441]
[223.57942200 78.52848816]
[238.48510742 76.84902191]
[253.39079285 75.16954803]
[260.93118286 61.60776138]
[275.01705933 55.09872055]
[290.23211670 58.14529037]
[300.72586060 69.57599640]
[302.46322632 84.99550629]
[294.77615356 98.47469330]
[280.62048340 104.83055115]
[265.43939209 101.61910248]
[255.07026672 90.07523346]
[240.16458130 91.75469971]
[225.25889587 93.43416595]
[210.35321045 95.11363220]
[195.44752502 96.79310608]
[180.54183960 98.47257233]
[165.63616943 100.15203857]
[150.73048401 101.83150482]
[135.82479858 103.51097107]
[133.62133789 112.85880280]
[129.02455139 121.29128265]
[122.36165619 128.20814514]
[114.10694885 133.11701965]
[104.84804535 135.66847229]
[103.72709656 150.62652588]
[102.60614777 165.58457947]
[101.48519135 180.54263306]
[110.81789398 193.59178162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 82]
[5 81]
[6 80]
[7 79]
[10 24]
[11 23]
[12 22]
[13 21]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
