%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGCGCAAACUUCCCGGGCCGGCGGGCAGGGGCGGCGGCGGCGGGGCCCGGAUGGGAGCCCGGGCCGGCGGCGGCGGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[81.25215912 107.50000000]
[66.25215912 107.50000000]
[51.25215912 107.50000000]
[36.25215912 107.50000000]
[21.25216103 107.50000000]
[12.43365383 110.68875122]
[5.70683241 107.21603394]
[-9.28316021 106.66820526]
[-24.27315331 106.12036896]
[-33.13016129 116.45411682]
[-46.15099335 119.67794800]
[-58.44171524 114.81458282]
[-65.51801300 103.88315582]
[-80.47799683 102.78822327]
[-94.80614471 109.49753571]
[-106.93467712 100.85184479]
[-121.89466095 99.75691986]
[-136.85464478 98.66198730]
[-151.81463623 97.56706238]
[-163.61056519 108.08521271]
[-179.38400269 107.09828186]
[-189.77685547 95.19180298]
[-188.62321472 79.42967224]
[-176.60752869 69.16329193]
[-160.85847473 70.48351288]
[-150.71969604 82.60707092]
[-135.75971985 83.70200348]
[-120.79972839 84.79693604]
[-105.83974457 85.89186096]
[-92.58164215 79.10423279]
[-79.38307190 87.82823944]
[-64.42308807 88.92317200]
[-52.30253601 77.42008972]
[-35.27313614 78.14239502]
[-23.72532272 91.13037872]
[-8.73532963 91.67820740]
[6.25466251 92.22603607]
[21.25216103 92.50000000]
[36.25215912 92.50000000]
[51.25215912 92.50000000]
[66.25215912 92.50000000]
[81.25215912 92.50000000]
[98.96792603 76.23774719]
[124.44108582 87.66588593]
[137.78121948 80.80725098]
[142.54405212 68.65502930]
[153.98843384 63.26953506]
[165.61999512 67.09411621]
[179.20172119 60.72726440]
[192.78344727 54.36041260]
[206.36515808 47.99356461]
[219.94688416 41.62671280]
[233.52861023 35.25986099]
[247.11033630 28.89301300]
[249.90786743 13.63019848]
[261.16555786 2.95106745]
[276.55462646 0.96196270]
[290.15762329 8.42773533]
[296.74395752 22.47764397]
[293.78100586 37.70921326]
[282.40814209 48.26559067]
[266.99841309 50.08763504]
[253.47718811 42.47473526]
[239.89546204 48.84158707]
[226.31373596 55.20843506]
[212.73200989 61.57528687]
[199.15028381 67.94213867]
[185.56857300 74.30899048]
[171.98684692 80.67584229]
[162.88862610 95.56279755]
[144.63984680 94.14738464]
[131.29971313 101.00601959]
[127.24129486 115.44655609]
[135.05540466 128.25045776]
[142.86950684 141.05435181]
[150.68360901 153.85824585]
[165.33236694 161.23023987]
[166.00213623 177.61570740]
[152.00393677 186.15867615]
[137.73791504 178.07089233]
[137.87971497 161.67234802]
[130.06561279 148.86845398]
[122.25150299 136.06455994]
[114.43740082 123.26066589]
[99.33989716 124.97335815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[7 37]
[8 36]
[9 35]
[13 32]
[14 31]
[16 29]
[17 28]
[18 27]
[19 26]
[44 72]
[45 71]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
