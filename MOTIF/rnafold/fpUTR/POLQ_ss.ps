%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCCGGGAGGUUUGAGUUUGAAGACUGGCGGGAAGAUGUCCGCAGCUGUUGCCAGGCCAGGGUUCUCCCGAGAGGGAGGACGCUGGGACUGUGGCUUGCCCUGAUCGGCCGAGAAGAGUUUGCC\
) } def
/len { sequence length } bind def

/coor [
[200.63349915 207.99546814]
[192.71890259 195.25344849]
[184.80429077 182.51142883]
[176.88969421 169.76940918]
[168.97508240 157.02738953]
[161.06048584 144.28536987]
[153.14587402 131.54335022]
[145.23127747 118.80133057]
[137.31666565 106.05931091]
[129.40206909 93.31729126]
[126.19170380 111.63785553]
[113.28838348 123.69842529]
[96.65642548 125.46006775]
[83.12399292 117.32742310]
[69.84214783 124.29827118]
[56.56031036 131.26911926]
[43.27846909 138.23997498]
[29.99662971 145.21081543]
[27.88791847 160.58393860]
[17.12156868 171.75825500]
[1.83746386 174.43701172]
[-12.08734894 167.59017944]
[-19.29849243 153.85047913]
[-17.02313805 138.50114441]
[-6.13620234 127.44427490]
[9.17606354 124.93148041]
[23.02578163 131.92897034]
[36.30762100 124.95812988]
[49.58946228 117.98728180]
[62.87130356 111.01643372]
[76.15314484 104.04558563]
[75.84066010 101.16858673]
[75.87401581 98.27485657]
[61.98139191 92.61843109]
[48.08877563 86.96201324]
[34.19615555 81.30558777]
[20.30353546 75.64916229]
[5.83822298 82.01551056]
[-8.86150074 76.21088409]
[-15.07455063 61.67906952]
[-9.11483479 47.04153824]
[5.48185349 40.98247528]
[20.05555725 47.09661484]
[25.95995712 61.75654602]
[39.85257721 67.41297150]
[53.74519730 73.06938934]
[67.63781738 78.72581482]
[81.53043365 84.38223267]
[89.40402222 74.98157501]
[102.03735352 69.91696167]
[94.12274933 57.17493820]
[79.41645050 49.91843414]
[78.61777496 33.53874588]
[92.54832458 24.88589668]
[106.87754822 32.86119461]
[106.86476898 49.26033783]
[114.77937317 62.00235367]
[129.77827454 62.18359756]
[137.99845886 49.63654327]
[146.21865845 37.08949280]
[146.78466797 18.73109055]
[162.66189575 11.35809135]
[170.57650757 -1.38392782]
[178.49110413 -14.12594700]
[186.40571594 -26.86796570]
[187.11465454 -42.67328262]
[200.40266418 -49.40217972]
[208.31726074 -62.14419937]
[216.23185730 -74.88621521]
[224.14646912 -87.62823486]
[232.06106567 -100.37025452]
[239.97567749 -113.11227417]
[247.89027405 -125.85429382]
[255.80488586 -138.59631348]
[255.79209900 -154.99545288]
[270.12133789 -162.97074890]
[284.05187988 -154.31790161]
[283.25320435 -137.93821716]
[268.54690552 -130.68170166]
[260.63229370 -117.93968964]
[252.71769714 -105.19766998]
[244.80308533 -92.45565033]
[236.88848877 -79.71363068]
[228.97387695 -66.97161102]
[221.05928040 -54.22959518]
[213.14468384 -41.48757553]
[213.00184631 -26.59365463]
[199.14773560 -18.95336151]
[191.23312378 -6.21134329]
[183.31852722 6.53067589]
[175.40391541 19.27269554]
[177.84571838 31.18498611]
[171.27062988 41.88899612]
[158.76570129 45.30968094]
[150.54551697 57.85673141]
[142.32533264 70.40378571]
[142.14408875 85.40268707]
[150.05868530 98.14470673]
[157.97329712 110.88672638]
[165.88789368 123.62874603]
[173.80250549 136.37075806]
[181.71710205 149.11277771]
[189.63171387 161.85479736]
[197.54631042 174.59681702]
[205.46092224 187.33883667]
[213.37551880 200.08085632]
[221.94148254 200.44548035]
[229.55314636 204.18122864]
[234.95970154 210.58940125]
[237.30703735 218.53961182]
[236.27206421 226.66876221]
[232.10493469 233.61466980]
[238.75280762 247.06106567]
[245.40068054 260.50747681]
[258.45272827 269.44921875]
[257.15740967 284.28738403]
[263.80529785 297.73379517]
[278.85440063 302.56079102]
[286.00811768 316.65335083]
[281.02227783 331.65057373]
[266.85488892 338.65490723]
[251.91120911 333.51077271]
[245.05705261 319.27011108]
[250.35888672 304.38165283]
[243.71101379 290.93527222]
[231.13446045 282.95529175]
[231.95426941 267.15533447]
[225.30639648 253.70893860]
[218.65852356 240.26254272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[50 57]
[51 56]
[58 96]
[59 95]
[60 94]
[62 91]
[63 90]
[64 89]
[65 88]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[112 129]
[113 128]
[114 127]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
