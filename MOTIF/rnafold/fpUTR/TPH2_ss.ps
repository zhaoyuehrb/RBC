%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGCUCUUCAGCACCAGGGUUCUGGACAGCGCCCCAAGCAGGCAGCUGAUCGCACGCCCCUUCCUCUCAAUCUCCGCCAGCGCUGCUACUGCCCCUCUAGUACCCCCUGCUGCAGAGAAAGAAUAUUACACCGGGAUCC\
) } def
/len { sequence length } bind def

/coor [
[166.71649170 459.53338623]
[168.93305969 444.64108276]
[174.19783020 430.53521729]
[182.28068542 417.83239746]
[192.82823181 407.08798218]
[205.37940979 398.77163696]
[199.86988831 384.82009888]
[194.36036682 370.86856079]
[188.85084534 356.91705322]
[176.97961426 347.92129517]
[179.10726929 332.24380493]
[173.59774780 318.29229736]
[168.08822632 304.34075928]
[162.57868958 290.38922119]
[157.06916809 276.43771362]
[144.60577393 272.99151611]
[136.29808044 262.82894897]
[135.37171936 249.53997803]
[142.39160156 237.98959351]
[137.19206238 223.91960144]
[131.99252319 209.84959412]
[126.79298401 195.77960205]
[115.12367249 186.52345276]
[117.59761810 170.89686584]
[112.39807892 156.82687378]
[107.19854736 142.75688171]
[101.99900818 128.68687439]
[96.79946899 114.61688232]
[85.29695892 104.98919678]
[70.53128815 102.34816742]
[55.76562119 99.70714569]
[40.99995041 97.06611633]
[26.20597267 94.58858490]
[11.38549137 92.27484894]
[-3.43498850 89.96111298]
[-15.09430408 100.38198090]
[-30.72578812 100.81868744]
[-42.94873428 91.06503296]
[-45.99183655 75.72640991]
[-38.41823578 62.04522705]
[-23.80395889 56.48133469]
[-9.04941750 61.66182709]
[-1.12125444 75.14063263]
[13.69922543 77.45436859]
[28.51970673 79.76810455]
[35.67016602 77.67549896]
[43.64097977 82.30044556]
[58.40664673 84.94147491]
[73.17231750 87.58250427]
[87.93798828 90.22353363]
[93.68923950 85.40969086]
[91.10237122 70.63443756]
[105.19174957 75.78200531]
[110.94300079 70.96816254]
[110.94300079 55.96816254]
[110.94300079 40.96816254]
[110.77707672 25.96907997]
[110.44524384 10.97275162]
[110.11341095 -4.02357769]
[95.45369720 -7.59501791]
[82.21832275 -14.83982944]
[71.30970001 -25.26404953]
[63.47159958 -38.15693665]
[59.23842621 -52.63943100]
[58.89881516 -67.72409058]
[62.47591400 -82.38243103]
[69.72583771 -95.61500549]
[80.15426636 -106.51959991]
[93.05017853 -114.35272980]
[107.53430939 -118.58030701]
[122.61910248 -118.91409302]
[137.27604675 -115.33133698]
[150.50582886 -108.07630920]
[161.40640259 -97.64366913]
[169.23454285 -84.74472809]
[173.45652771 -70.25897217]
[173.78450012 -55.17404938]
[170.19607544 -40.51848221]
[162.93594360 -27.29150772]
[152.49908447 -16.39496803]
[139.59713745 -8.57180214]
[125.10974121 -4.35540915]
[125.44157410 10.64092064]
[125.77340698 25.63724899]
[129.09228516 32.30756378]
[125.94300079 40.96816254]
[125.94300079 55.96816254]
[125.94300079 70.96816254]
[140.53323364 67.48601532]
[155.06739807 71.19520569]
[166.20466614 81.24314117]
[171.38505554 95.32019806]
[169.41778564 110.19063568]
[160.75505066 122.43633270]
[147.38806152 129.24249268]
[132.38937378 129.04464722]
[119.20655823 121.88829041]
[110.86946106 109.41734314]
[116.06900024 123.48734283]
[121.26853943 137.55734253]
[126.46807861 151.62733459]
[131.66761780 165.69732666]
[143.70883179 175.95985413]
[140.86297607 190.58006287]
[146.06251526 204.65005493]
[151.26205444 218.72006226]
[156.46159363 232.79005432]
[172.45764160 239.77734375]
[178.37220764 255.84194946]
[171.02070618 270.92819214]
[176.53022766 284.87969971]
[182.03974915 298.83123779]
[187.54927063 312.78277588]
[193.05879211 326.73428345]
[205.32409668 336.72793579]
[202.80236816 351.40753174]
[208.31188965 365.35903931]
[213.82141113 379.31057739]
[219.33093262 393.26211548]
[234.17773438 390.75885010]
[249.22053528 391.39755249]
[263.80172729 395.15020752]
[277.28387451 401.85284424]
[289.07760620 411.21240234]
[298.66735840 422.81976318]
[305.63391113 436.16744995]
[309.67269897 450.67199707]
[310.60714722 465.69931030]
[308.39645386 480.59249878]
[303.13720703 494.70043945]
[295.05935669 507.40643311]
[284.51605225 518.15502930]
[271.96813965 526.47625732]
[257.96420288 532.00653076]
[243.11640930 534.50390625]
[228.07386780 533.85931396]
[213.49415588 530.10089111]
[200.01463318 523.39294434]
[188.22457886 514.02874756]
[178.63940430 502.41766357]
[171.67811584 489.06723022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 119]
[7 118]
[8 117]
[9 116]
[11 114]
[12 113]
[13 112]
[14 111]
[15 110]
[19 107]
[20 106]
[21 105]
[22 104]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[29 50]
[30 49]
[31 48]
[32 47]
[33 45]
[34 44]
[35 43]
[54 88]
[55 87]
[56 86]
[57 84]
[58 83]
[59 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
