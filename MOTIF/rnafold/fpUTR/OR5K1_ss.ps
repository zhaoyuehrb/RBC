%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUCUCCUUCCUUUAAGCCAAAGAGACCUAAAUAACUGUGGCAUAUUAUAAAUUAGUGCCUUCUUUCUCCACAAUUUUUUUUCAGACAAGUCAGGA\
) } def
/len { sequence length } bind def

/coor [
[90.69816589 276.69705200]
[77.93158722 286.01315308]
[62.32987976 283.49078369]
[53.14926529 270.62643433]
[55.83643723 255.05226135]
[68.79714966 246.00816345]
[71.19114685 231.20043945]
[73.58514404 216.39271545]
[75.97914124 201.58499146]
[67.08187866 189.69490051]
[69.29878998 174.64364624]
[81.83054352 165.39199829]
[84.22454071 150.58427429]
[86.61853790 135.77655029]
[73.95629883 127.94191742]
[65.25166321 115.86122131]
[61.82740021 101.37024689]
[64.20384979 86.67105865]
[72.01989746 73.99732971]
[84.08780670 65.27497864]
[98.57373047 61.82945251]
[100.96773529 47.02172470]
[103.36173248 32.21399689]
[105.75572968 17.40627098]
[108.14972687 2.59854412]
[110.54372406 -12.20918274]
[112.93772125 -27.01690865]
[98.55654907 -32.54366684]
[85.62831116 -40.91331863]
[74.70714569 -51.76437759]
[66.26056671 -64.62905121]
[60.64950180 -78.95342255]
[58.11283112 -94.12129211]
[58.75724411 -109.48069000]
[62.55274963 -124.37189484]
[69.33405304 -138.15576172]
[78.80776215 -150.24119568]
[90.56507111 -160.11044312]
[104.09942627 -167.34129333]
[118.82830811 -171.62518311]
[134.11834717 -172.78030396]
[136.03649902 -187.65715027]
[137.95465088 -202.53399658]
[139.87281799 -217.41084290]
[141.79096985 -232.28770447]
[129.22294617 -241.02285767]
[122.16422272 -254.60348511]
[122.23686218 -269.90881348]
[129.42416382 -283.42181396]
[142.07453918 -292.03729248]
[157.28103638 -293.77548218]
[171.54928589 -288.23693848]
[181.60058594 -276.69442749]
[185.12518311 -261.80026245]
[181.31317139 -246.97706604]
[171.04052734 -235.63108826]
[156.66781616 -230.36953735]
[154.74966431 -215.49269104]
[152.83151245 -200.61584473]
[150.91334534 -185.73898315]
[148.99519348 -170.86213684]
[162.84866333 -166.16162109]
[175.51065063 -158.82446289]
[186.48504639 -149.13586426]
[195.34140015 -137.47320557]
[201.73184204 -124.29134369]
[205.40470886 -110.10488892]
[206.21449280 -95.46807098]
[204.12753296 -80.95313263]
[199.22351074 -67.12793732]
[191.69233704 -54.53375626]
[181.82679749 -43.66406631]
[170.01123047 -34.94523621]
[156.70648193 -28.71977997]
[142.43199158 -25.23291779]
[127.74545288 -24.62291145]
[125.35145569 -9.81518459]
[122.95745087 4.99254227]
[120.56345367 19.80027008]
[118.16945648 34.60799408]
[115.77545929 49.41572189]
[113.38146210 64.22344971]
[126.04370117 72.05808258]
[134.74833679 84.13877869]
[138.17260742 98.62975311]
[135.79614258 113.32894135]
[127.98010254 126.00267029]
[115.91219330 134.72502136]
[101.42626953 138.17054749]
[99.03226471 152.97827148]
[96.63826752 167.78599548]
[105.61632538 180.51518250]
[102.97753143 195.49822998]
[90.78686523 203.97898865]
[88.39286804 218.78671265]
[85.99887085 233.59443665]
[83.60487366 248.40217590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 97]
[7 96]
[8 95]
[9 94]
[12 91]
[13 90]
[14 89]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
