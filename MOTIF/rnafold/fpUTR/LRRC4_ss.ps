%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACCACGCCAGUGCUUUCCUGCCUUCCUUCCGAGAUGGAAAGAGGAGCUCCUAGCUCACUUAAGCCGGGGUAGGGCUGGUUCUCCUUUCCGAGCCAAAAUCCCAGGCGAUGGUGAAUUAUGAACGUGCCACACC\
) } def
/len { sequence length } bind def

/coor [
[118.05096436 182.76223755]
[116.34725952 167.85929871]
[112.42857361 161.51649475]
[114.77838135 152.59826660]
[113.41435242 137.66040039]
[112.05033112 122.72255707]
[97.39975739 119.50374603]
[89.89975739 132.49412537]
[82.39975739 145.48451233]
[82.94084167 161.87472534]
[68.87599182 170.30751038]
[54.67391205 162.10794067]
[54.94448853 145.71102905]
[69.40937805 137.98451233]
[76.90937805 124.99413300]
[84.40937805 112.00374603]
[81.11136627 105.26779175]
[68.30157471 113.07223511]
[56.73277283 122.62014771]
[43.66855240 115.24951935]
[45.85860825 100.41026306]
[60.49499130 97.12781525]
[74.51535034 91.79587555]
[71.21733856 85.05992126]
[56.35704803 83.01741791]
[41.47447205 81.14419556]
[26.57154083 79.44049072]
[11.66860771 77.73678589]
[-3.23432493 76.03308868]
[-17.82399750 82.15289307]
[-29.59010506 73.02009583]
[-44.49303818 71.31639099]
[-59.39596939 69.61268616]
[-74.29890442 67.90898895]
[-87.70223999 76.72545624]
[-102.90671539 71.60652161]
[-108.24875641 56.47898865]
[-99.63040924 42.94741058]
[-83.66292572 41.39205551]
[-72.59519958 53.00605392]
[-57.69226837 54.70975494]
[-42.78933716 56.41345978]
[-27.88640213 58.11716080]
[-14.36268711 51.87549591]
[-1.53062201 61.13015366]
[13.37231064 62.83385849]
[28.27524376 64.53755951]
[43.17817688 66.24126434]
[50.24173737 63.85519028]
[58.39954758 68.15712738]
[73.25983429 70.19963074]
[87.70359802 66.15267944]
[99.33926392 56.68635941]
[105.16130066 41.97532272]
[119.91690063 39.94520569]
[131.55256653 30.47888756]
[143.18824768 21.01256943]
[149.01026917 6.30153561]
[163.76588440 4.27141905]
[175.40155029 -5.19490051]
[187.03721619 -14.66121960]
[198.67288208 -24.12753868]
[210.30856323 -33.59385681]
[209.59861755 -48.98223495]
[217.98789978 -61.68944931]
[232.08428955 -66.95783997]
[246.40844727 -62.96329498]
[258.04412842 -72.42961121]
[269.67977905 -81.89593506]
[281.20693970 -91.49407959]
[292.62411499 -101.22280884]
[304.04129028 -110.95154572]
[315.45846558 -120.68027496]
[326.87564087 -130.40901184]
[327.92184448 -147.82977295]
[340.95919800 -158.91894531]
[357.65228271 -157.22413635]
[368.84506226 -167.21023560]
[380.03781128 -177.19635010]
[391.23056030 -187.18244934]
[402.30892944 -197.29530334]
[413.27145386 -207.53359985]
[410.40762329 -222.69281006]
[416.21527100 -236.98529053]
[428.84121704 -245.85034180]
[444.25656128 -246.45915222]
[457.54232788 -238.61747742]
[464.45907593 -224.82754517]
[462.79968262 -209.48968506]
[453.09368896 -197.49813843]
[438.43820190 -192.67938232]
[423.50976562 -196.57106018]
[412.54721069 -186.33276367]
[409.78207397 -179.40879822]
[401.21667480 -175.98968506]
[390.02389526 -166.00358582]
[378.83114624 -156.01748657]
[367.63839722 -146.03138733]
[368.70483398 -133.14030457]
[362.02914429 -121.83374786]
[349.87039185 -116.38118744]
[336.60437012 -118.99183655]
[325.18719482 -109.26309967]
[313.77001953 -99.53437042]
[302.35284424 -89.80564117]
[290.93566895 -80.07691193]
[287.85824585 -73.28598022]
[279.14608765 -70.26026154]
[267.51043701 -60.79394531]
[255.87477112 -51.32762527]
[256.87142944 -36.49035263]
[248.84523010 -23.76069069]
[234.69694519 -18.13223267]
[219.77487183 -21.95818901]
[208.13920593 -12.49186897]
[196.50354004 -3.02555013]
[184.86787415 6.44076920]
[173.23219299 15.90708828]
[168.24243164 29.94102669]
[152.65455627 32.64823914]
[141.01889038 42.11455917]
[129.38322449 51.58087540]
[124.39344788 65.61481476]
[108.80558777 68.32202911]
[97.16991425 77.78834534]
[116.23352814 79.18107605]
[130.19163513 96.37406921]
[126.98818207 121.35853577]
[128.35220337 136.29638672]
[129.71623230 151.23423767]
[131.25019836 166.15559387]
[132.95390320 181.05853271]
[145.48059082 190.69479370]
[147.44154358 206.37695312]
[137.67338562 218.80105591]
[121.97136688 220.59611511]
[109.65122986 210.69714355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[4 130]
[5 129]
[6 128]
[7 16]
[8 15]
[9 14]
[24 51]
[25 50]
[26 48]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[33 41]
[34 40]
[52 125]
[53 124]
[55 122]
[56 121]
[57 120]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[67 110]
[68 109]
[69 108]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[77 98]
[78 97]
[79 96]
[80 95]
[81 93]
[82 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
