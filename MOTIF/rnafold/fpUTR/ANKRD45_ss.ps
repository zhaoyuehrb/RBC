%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCGCCGUUGCUAUGGUAACCGAGGAGGCCGGGGCCCGGGUGUGGUAUUUUUGGAGUUA\
) } def
/len { sequence length } bind def

/coor [
[11.39142418 223.95883179]
[2.99648452 225.09930420]
[-5.38970375 224.03578186]
[-13.19957066 220.84997559]
[-19.90706635 215.76687622]
[-25.06309319 209.13894653]
[-39.37518311 213.62939453]
[-53.68727112 218.11984253]
[-67.99935913 222.61029053]
[-82.31144714 227.10073853]
[-93.00310516 239.53538513]
[-109.06526947 236.22799683]
[-113.97457123 220.58093262]
[-102.68073273 208.69055176]
[-86.80189514 212.78865051]
[-72.48980713 208.29820251]
[-58.17771912 203.80775452]
[-43.86563110 199.31730652]
[-29.55354118 194.82685852]
[-22.86064339 172.38597107]
[-2.59995079 160.23393250]
[20.75638962 164.97888184]
[31.62828064 154.64437866]
[42.50017166 144.30987549]
[53.37206268 133.97537231]
[64.24395752 123.64086914]
[75.11584473 113.30636597]
[85.98773956 102.97186279]
[90.13127899 89.61811066]
[103.67775726 86.15625000]
[114.54964447 75.82173920]
[125.42153931 65.48723602]
[136.29342651 55.15273666]
[137.47560120 42.05364609]
[147.07304382 33.66586685]
[159.40100098 34.21348572]
[170.78236389 24.44289970]
[175.70387268 8.79966259]
[191.76861572 5.50480223]
[202.45056152 17.94778824]
[196.76104736 33.32834244]
[180.55296326 35.82427216]
[169.17158508 45.59486008]
[164.47897339 62.32812881]
[146.62792969 66.02462769]
[135.75604248 76.35913086]
[124.88415527 86.69363403]
[114.01226044 97.02813721]
[109.86872101 110.38188934]
[96.32224274 113.84375000]
[85.45035553 124.17826080]
[74.57846069 134.51275635]
[63.70656967 144.84725952]
[52.83467484 155.18176270]
[41.96278381 165.51626587]
[31.09089279 175.85076904]
[34.38098145 183.79974365]
[35.50452805 192.31013489]
[34.39490128 200.80351257]
[31.13694000 208.70504761]
[25.96053123 215.48252869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[30 48]
[31 47]
[32 46]
[33 45]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
