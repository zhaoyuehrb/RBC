%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGGAGGGGCCUGUGCCCGGGAGCAGCGGGAACCUAUCUGCUGGUGGGAGAGGACUCAGGCUAAGGUGGCCCCCACUGAAGACUCCUGCUAAGCAACCCACUGAAGACCCCUCCGAAUCAUCGACGGGGCGUCCUUGGGGUGCAGCCCAGGAAGCUCAGUUCACAGCCUUGGGGCGCGCGGCCC\
) } def
/len { sequence length } bind def

/coor [
[164.89837646 288.44891357]
[162.64477539 303.64157104]
[153.08421326 315.66201782]
[138.78842163 321.27679443]
[123.60289764 318.97558594]
[111.61248016 309.37741089]
[106.04251862 295.06408691]
[108.39131927 279.88583374]
[118.02705383 267.92556763]
[132.35775757 262.40051270]
[134.60519409 247.56982422]
[136.85263062 232.73915100]
[139.10006714 217.90846252]
[141.34750366 203.07778931]
[143.47094727 188.22885132]
[145.47026062 173.36268616]
[147.46955872 158.49652100]
[149.46887207 143.63037109]
[151.46817017 128.76420593]
[153.46746826 113.89804077]
[155.46678162 99.03187561]
[146.07249451 87.33796692]
[131.12481689 86.08613586]
[116.17715454 84.83429718]
[130.84234619 102.81441498]
[123.60976410 131.99951172]
[89.94876099 147.51133728]
[75.86291504 152.66780090]
[61.77708054 157.82426453]
[47.69123840 162.98072815]
[33.60540009 168.13719177]
[19.51956177 173.29365540]
[15.39985466 188.25386047]
[3.25257969 197.90908813]
[-12.25138950 198.54669189]
[-25.15046120 189.92152405]
[-30.48467827 175.35011292]
[-26.20292473 160.43548584]
[-13.95162392 150.91261292]
[1.55835068 150.44322205]
[14.36309624 159.20780945]
[28.44893646 154.05134583]
[42.53477478 148.89488220]
[56.62061310 143.73841858]
[70.70645142 138.58195496]
[84.79228973 133.42549133]
[84.41646576 125.93491364]
[83.28897095 103.46318054]
[68.75772858 99.74254608]
[54.22649384 96.02191162]
[39.69525528 92.30127716]
[26.22665787 100.57003784]
[10.87567616 96.81198883]
[2.74977541 83.25672150]
[6.66990948 67.94633484]
[20.31033134 59.96419907]
[35.57842255 64.04598236]
[43.41589355 77.77003479]
[57.94712830 81.49067688]
[72.47837067 85.21131134]
[87.00960541 88.93194580]
[93.88637543 75.60115814]
[82.43159485 65.91674042]
[70.97681427 56.23231888]
[59.52202988 46.54790115]
[48.06724548 36.86348343]
[32.06797409 31.25459862]
[33.02862167 14.32788944]
[49.55976105 10.56521511]
[57.75166321 25.40870094]
[69.20645142 35.09311676]
[80.66123199 44.77753448]
[92.11601257 54.46195221]
[103.57079315 64.14636993]
[117.42899323 69.88661957]
[132.37666321 71.13845825]
[147.32434082 72.39029694]
[161.65087891 67.94616699]
[173.26588440 58.45450592]
[184.88088989 48.96284866]
[196.49589539 39.47118759]
[201.17294312 31.60126877]
[208.38520813 29.91992569]
[220.15721130 20.62367630]
[222.14257812 5.17388582]
[234.21348572 -4.08613586]
[248.93025208 -2.09817553]
[260.70223999 -11.39442348]
[272.47424316 -20.69067192]
[284.24621582 -29.98692131]
[296.01821899 -39.28316879]
[293.91244507 -54.43285751]
[299.63467407 -68.50954437]
[311.55529785 -77.77047729]
[326.41146851 -79.80758667]
[340.19976807 -74.17298889]
[351.97174072 -83.46923065]
[363.74374390 -92.76548004]
[369.77893066 -107.39036560]
[384.56246948 -109.20586395]
[396.33447266 -118.50211334]
[408.10644531 -127.79836273]
[419.87844849 -137.09460449]
[421.86380005 -152.54440308]
[433.93472290 -161.80441284]
[448.65148926 -159.81646729]
[460.42349243 -169.11270142]
[460.44741821 -182.59362793]
[468.12445068 -193.43737793]
[480.46453857 -197.80882263]
[492.88076782 -194.32106018]
[504.80645752 -203.41931152]
[516.73211670 -212.51754761]
[528.65783691 -221.61579895]
[530.90106201 -237.03025818]
[543.12506104 -246.08728027]
[557.80651855 -243.85368347]
[569.73223877 -252.95191956]
[581.65789795 -262.05017090]
[587.47302246 -277.38366699]
[603.70098877 -279.74697876]
[613.64788818 -266.70892334]
[607.08117676 -251.68191528]
[590.75616455 -250.12448120]
[578.83044434 -241.02622986]
[566.90478516 -231.92799377]
[565.18023682 -217.17802429]
[553.21551514 -207.78123474]
[537.75610352 -209.69010925]
[525.83038330 -200.59185791]
[513.90472412 -191.49362183]
[501.97900391 -182.39538574]
[500.45837402 -165.65545654]
[487.04312134 -154.97703552]
[469.71972656 -157.34071350]
[457.94775391 -148.04446411]
[456.46990967 -133.26774597]
[444.66384888 -123.67233276]
[429.17468262 -125.32261658]
[417.40270996 -116.02636719]
[405.63070679 -106.73011780]
[393.85870361 -97.43386841]
[388.66555786 -83.47391510]
[373.04000854 -80.99349213]
[361.26800537 -71.69724274]
[349.49600220 -62.40099335]
[351.78073120 -47.68210602]
[346.35513306 -33.70286942]
[334.58303833 -24.25383949]
[319.56329346 -21.95077896]
[305.31448364 -27.51117897]
[293.54248047 -18.21492958]
[281.77047729 -8.91868114]
[269.99850464 0.37756684]
[258.22650146 9.67381477]
[256.74865723 24.45053864]
[244.94262695 34.04595184]
[229.45346069 32.39566803]
[217.68145752 41.69191742]
[205.98754883 51.08619690]
[194.37254333 60.57785416]
[182.75753784 70.06951141]
[171.14253235 79.56117249]
[185.88619995 76.79998779]
[199.85929871 71.34540558]
[214.75601196 73.10272217]
[227.07627869 81.65904999]
[233.92544556 95.00405121]
[233.69424438 110.00227356]
[226.43701172 123.12982178]
[213.85885620 131.30233765]
[198.91506958 132.59965515]
[185.11672974 126.71697998]
[175.70559692 115.03598785]
[170.33294678 101.03118134]
[168.33363342 115.89734650]
[166.33433533 130.76350403]
[164.33502197 145.62966919]
[162.33572388 160.49583435]
[160.33642578 175.36199951]
[158.33711243 190.22814941]
[160.29710388 199.17068481]
[156.17819214 205.32522583]
[153.93075562 220.15589905]
[151.68331909 234.98658752]
[149.43588257 249.81726074]
[147.18844604 264.64794922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 187]
[11 186]
[12 185]
[13 184]
[14 183]
[15 181]
[16 180]
[17 179]
[18 178]
[19 177]
[20 176]
[21 175]
[22 77]
[23 76]
[24 75]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[48 61]
[49 60]
[50 59]
[51 58]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
[78 163]
[79 162]
[80 161]
[81 160]
[83 159]
[84 158]
[87 155]
[88 154]
[89 153]
[90 152]
[91 151]
[96 146]
[97 145]
[98 144]
[100 142]
[101 141]
[102 140]
[103 139]
[106 136]
[107 135]
[111 132]
[112 131]
[113 130]
[114 129]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
