%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGCCGCAUAGAGACGCAGCGCACGCGCAGUCGCGUAUCCGUGUGAUGGGCGGGCUGUUGACGGCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[7.09371519 266.79907227]
[5.58990622 281.86618042]
[-0.72696650 295.62756348]
[-11.17169571 306.59051514]
[-24.61131477 313.56585693]
[-39.58799362 315.79693604]
[-54.47717667 313.04177856]
[-67.66379547 305.59921265]
[-77.71746826 294.27655029]
[-83.54763794 280.30200195]
[-84.52189636 265.19143677]
[-80.53456879 250.58390808]
[-72.01816559 238.06393433]
[-59.89647675 228.98960876]
[-45.48438263 224.34523010]
[-30.34519577 224.63458252]
[-16.12110138 229.82629395]
[-6.69780159 218.15576172]
[2.72549844 206.48521423]
[12.14879799 194.81468201]
[21.57209778 183.14414978]
[30.99539757 171.47361755]
[40.41869736 159.80307007]
[49.84199905 148.13253784]
[51.64625549 140.72915649]
[59.92133713 136.17782593]
[69.83145905 124.91773987]
[79.50035095 113.44984436]
[88.92364502 101.77931213]
[98.09711456 89.91139221]
[107.01660919 77.85143280]
[115.93611145 65.79147339]
[124.85560608 53.73151779]
[133.77510071 41.67156219]
[142.43661499 29.42500114]
[150.83624268 16.99735641]
[152.15356445 1.23108792]
[165.69093323 -4.98088646]
[174.09056091 -17.40853119]
[182.49017334 -29.83617592]
[190.88980103 -42.26382065]
[189.26747131 -58.22463608]
[200.83494568 -69.34098816]
[216.71862793 -67.08535767]
[224.73394775 -53.18807983]
[218.73220825 -38.30995178]
[203.31744385 -33.86420059]
[194.91783142 -21.43655396]
[186.51820374 -9.00890923]
[178.11857605 3.41873527]
[177.40205383 18.29609680]
[163.26388550 25.39697838]
[154.86425781 37.82462311]
[153.69435120 45.35434723]
[145.83506775 50.59106064]
[136.91555786 62.65101624]
[127.99606323 74.71097565]
[119.07656860 86.77092743]
[110.15707397 98.83088684]
[108.18897247 106.91995239]
[100.59418488 111.20260620]
[91.17088318 122.87314606]
[88.08351135 131.79837036]
[81.09154510 134.82786560]
[71.18141937 146.08795166]
[61.51253510 157.55583191]
[52.08923340 169.22637939]
[42.66593552 180.89691162]
[33.24263382 192.56744385]
[23.81933403 204.23799133]
[14.39603424 215.90852356]
[4.97273493 227.57905579]
[-4.45056534 239.24958801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[26 65]
[27 64]
[28 62]
[29 61]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 53]
[36 52]
[38 50]
[39 49]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
