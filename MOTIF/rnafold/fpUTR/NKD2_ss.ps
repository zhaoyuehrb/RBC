%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCGGCCCAUGCGGCCCCCGCGGGCUCCCGGCCCCGGCUUCAGAACUCAGCCCUGCACCUGAGCGCGGGGCCCGGCGGGGCGUGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[101.09951782 296.30395508]
[100.61379242 281.31182861]
[100.12805939 266.31970215]
[91.98268890 253.84965515]
[99.26905060 239.80616760]
[98.78332520 224.81404114]
[98.29759979 209.82189941]
[95.34349060 205.84785461]
[94.98795319 199.93202209]
[98.29759979 193.85044861]
[98.78332520 178.85830688]
[99.26905060 163.86618042]
[99.75478363 148.87403870]
[100.24050903 133.88191223]
[100.72624207 118.88977814]
[89.69904327 108.72115326]
[74.79531097 110.41786194]
[59.89158249 112.11457062]
[44.98785019 113.81127167]
[30.08412170 115.50798035]
[17.22966576 125.69105530]
[2.08538175 119.39957428]
[0.23041148 103.10567474]
[13.57298851 93.57112885]
[28.38741302 100.60424805]
[43.29114532 98.90754700]
[58.19487381 97.21083832]
[73.09860229 95.51412964]
[88.00233459 93.81742096]
[100.38939667 85.35807037]
[107.39331055 72.09363556]
[114.39723206 58.82920074]
[120.52785492 45.13922501]
[125.75946808 31.08112526]
[130.99108887 17.02302361]
[136.22270203 2.96492338]
[141.45431519 -11.09317684]
[146.68592834 -25.15127754]
[151.91755676 -39.20937729]
[156.92083740 -53.35035324]
[161.69447327 -67.57048798]
[166.46812439 -81.79062653]
[166.24784851 -91.11871338]
[171.63345337 -96.38957214]
[176.86506653 -110.44766998]
[182.09667969 -124.50577545]
[170.72537231 -134.55851746]
[163.75688171 -148.04200745]
[162.13363647 -163.13272095]
[166.07519531 -177.78974915]
[175.04846191 -190.03086853]
[187.83988953 -198.20054626]
[202.71954346 -201.19392395]
[217.67507935 -198.60614014]
[230.68386841 -190.78720093]
[239.98658752 -178.79455566]
[244.32511902 -164.25007629]
[243.11271667 -149.12081909]
[236.51333618 -135.45288086]
[225.41949463 -125.09472656]
[211.33155823 -119.44722748]
[196.15478516 -119.27415466]
[190.92317200 -105.21605682]
[185.69154358 -91.15795898]
[180.68826294 -77.01698303]
[175.91461182 -62.79684448]
[171.14097595 -48.57670593]
[172.01335144 -41.09168243]
[165.97564697 -33.97776031]
[160.74403381 -19.91966057]
[155.51242065 -5.86156082]
[150.28080750 8.19653988]
[145.04917908 22.25464058]
[139.81756592 36.31274033]
[134.58595276 50.37084198]
[135.80738831 53.09747696]
[135.91384888 56.51573181]
[134.61845398 60.15978622]
[131.82554626 63.46284866]
[127.66165924 65.83311462]
[120.65774536 79.09754944]
[113.65383148 92.36198425]
[115.71837616 119.37550354]
[115.23264313 134.36764526]
[114.74691772 149.35977173]
[114.26118469 164.35191345]
[113.77545929 179.34403992]
[113.28973389 194.33618164]
[113.28973389 209.33618164]
[113.77545929 224.32830811]
[114.26118469 239.32043457]
[122.44130707 252.86282349]
[115.12019348 265.83398438]
[115.60592651 280.82611084]
[116.09165192 295.81823730]
[118.90494537 314.99465942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[5 91]
[6 90]
[7 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[30 82]
[31 81]
[32 80]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[39 69]
[40 67]
[41 66]
[42 65]
[44 64]
[45 63]
[46 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
