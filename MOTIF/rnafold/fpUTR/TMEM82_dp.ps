%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:53 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TMEM82)
} def

/sequence { (\
UUGCCCAGUGACGUUGGUCUGUCCUUACGCAGACCUGGCCGGAGGCUGGGGCUCCUUCCGGGGCUGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 32 0.004269805 ubox
2 31 0.005269948 ubox
2 41 0.003550272 ubox
2 66 0.008752901 ubox
3 30 0.005429524 ubox
3 40 0.003859746 ubox
3 46 0.010860112 ubox
3 52 0.020646658 ubox
3 64 0.022015700 ubox
3 65 0.008494462 ubox
3 67 0.068227566 ubox
4 29 0.005422478 ubox
4 45 0.010804269 ubox
4 49 0.014245840 ubox
4 50 0.968515306 ubox
4 51 0.018511166 ubox
4 63 0.021945681 ubox
4 66 0.064797026 ubox
5 17 0.005542549 ubox
5 38 0.004431117 ubox
5 42 0.006541267 ubox
5 44 0.010572639 ubox
5 48 0.010179783 ubox
5 49 0.999109348 ubox
5 50 0.016095778 ubox
5 62 0.021926237 ubox
6 16 0.005718190 ubox
6 37 0.004599164 ubox
6 41 0.006764680 ubox
6 48 0.999372554 ubox
6 49 0.011792464 ubox
6 61 0.021405391 ubox
7 15 0.005784451 ubox
7 25 0.009226562 ubox
7 36 0.004678052 ubox
7 47 0.999212372 ubox
8 14 0.004887906 ubox
8 24 0.009818631 ubox
8 39 0.007281584 ubox
8 46 0.999390953 ubox
9 38 0.007220801 ubox
9 41 0.011892237 ubox
9 45 0.994283909 ubox
10 19 0.007118231 ubox
10 23 0.011266804 ubox
10 40 0.025640270 ubox
11 18 0.007321466 ubox
11 22 0.011280980 ubox
12 17 0.007355056 ubox
12 21 0.011285108 ubox
12 37 0.024530490 ubox
12 41 0.925443467 ubox
13 20 0.008881654 ubox
13 36 0.020042467 ubox
13 39 0.598433121 ubox
13 40 0.786600976 ubox
14 38 0.768923679 ubox
14 42 0.068874979 ubox
15 37 0.610905949 ubox
15 41 0.071141266 ubox
16 35 0.993176245 ubox
16 36 0.083317532 ubox
16 40 0.071389669 ubox
17 34 0.995559220 ubox
17 35 0.059269321 ubox
17 39 0.071347471 ubox
18 33 0.997219870 ubox
18 38 0.071088735 ubox
19 32 0.997359127 ubox
19 37 0.070740520 ubox
20 29 0.004756107 ubox
20 31 0.997116163 ubox
21 28 0.010210071 ubox
21 30 0.997251190 ubox
21 34 0.070613281 ubox
22 27 0.011488801 ubox
22 29 0.962018374 ubox
22 33 0.070687704 ubox
23 32 0.070262090 ubox
24 32 0.008259519 ubox
25 31 0.010703393 ubox
29 67 0.013048849 ubox
30 66 0.013085649 ubox
31 65 0.013078717 ubox
32 64 0.012614397 ubox
34 50 0.007135366 ubox
34 62 0.012940004 ubox
35 49 0.007692528 ubox
35 61 0.013056180 ubox
36 48 0.008639593 ubox
36 60 0.017635820 ubox
37 47 0.014300422 ubox
37 59 0.019661216 ubox
38 46 0.016495242 ubox
38 58 0.019653919 ubox
39 45 0.017066679 ubox
39 61 0.005114927 ubox
40 44 0.017287928 ubox
40 60 0.014913410 ubox
41 55 0.020023983 ubox
41 59 0.015050092 ubox
42 54 0.020037920 ubox
42 58 0.015039558 ubox
43 53 0.019772703 ubox
43 56 0.006071116 ubox
43 57 0.013795212 ubox
44 52 0.018631181 ubox
44 53 0.007059040 ubox
44 55 0.008424036 ubox
44 56 0.010368833 ubox
44 68 0.008844894 ubox
45 52 0.010328098 ubox
45 54 0.008331756 ubox
45 55 0.009094891 ubox
45 67 0.008922368 ubox
46 51 0.012363810 ubox
46 66 0.008915473 ubox
48 54 0.003658839 ubox
48 55 0.004391406 ubox
48 59 0.003879556 ubox
48 68 0.011289126 ubox
49 54 0.004882815 ubox
49 58 0.003884431 ubox
49 67 0.012322443 ubox
49 68 0.003755340 ubox
50 57 0.003537306 ubox
50 64 0.004088837 ubox
50 65 0.233795929 ubox
50 67 0.008327376 ubox
50 68 0.021301291 ubox
51 64 0.995895276 ubox
51 67 0.048141446 ubox
52 62 0.006266682 ubox
52 63 0.998115104 ubox
52 66 0.047919682 ubox
53 61 0.005619805 ubox
53 62 0.996084625 ubox
53 63 0.025940248 ubox
54 60 0.006064279 ubox
54 61 0.996694227 ubox
54 62 0.063435270 ubox
54 63 0.039368663 ubox
55 60 0.995019041 ubox
55 61 0.063599347 ubox
55 62 0.039389926 ubox
55 63 0.009020974 ubox
56 60 0.057471183 ubox
56 61 0.036425651 ubox
56 62 0.008865330 ubox
57 61 0.006622821 ubox
60 68 0.005291732 ubox
61 67 0.005322313 ubox
61 68 0.004607687 ubox
62 67 0.004803987 ubox
4 50 0.9500000 lbox
5 49 0.9500000 lbox
6 48 0.9500000 lbox
7 47 0.9500000 lbox
8 46 0.9500000 lbox
9 45 0.9500000 lbox
12 41 0.9500000 lbox
13 40 0.9500000 lbox
16 35 0.9500000 lbox
17 34 0.9500000 lbox
18 33 0.9500000 lbox
19 32 0.9500000 lbox
20 31 0.9500000 lbox
21 30 0.9500000 lbox
22 29 0.9500000 lbox
51 64 0.9500000 lbox
52 63 0.9500000 lbox
53 62 0.9500000 lbox
54 61 0.9500000 lbox
55 60 0.9500000 lbox
showpage
end
%%EOF
