%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCUCGCUUCCGCCGGUGGGACGGAACUGGUGCCCUCCGUGGACAAUUGUGUUGAAGCAGAAAUUGUUCCGGAUCUCGGGUCGGACACGGAAGUCUUCCUGCAGUGUUUCUGGAUGCGGGGACAGGG\
) } def
/len { sequence length } bind def

/coor [
[58.80649567 294.27902222]
[54.36583328 279.67614746]
[56.70935822 264.59402466]
[65.37176514 252.02719116]
[78.63311768 244.47079468]
[77.54660034 229.51019287]
[76.46007538 214.54959106]
[75.37355804 199.58898926]
[74.28703308 184.62840271]
[65.64816284 172.49501038]
[72.36552429 158.17063904]
[71.27899933 143.21003723]
[70.19248199 128.24945068]
[57.26293182 120.64504242]
[43.65981674 126.96606445]
[30.05670166 133.28707886]
[16.45358658 139.60809326]
[2.85047174 145.92910767]
[-10.75264359 152.25012207]
[-13.60161972 167.50341797]
[-24.89526367 178.14453125]
[-40.29094315 180.08172607]
[-53.86869812 172.57012939]
[-60.40761185 158.49809265]
[-57.39333344 143.27661133]
[-45.98491669 132.75863647]
[-30.56913185 130.98855591]
[-17.07365990 138.64701843]
[-3.47054482 132.32600403]
[10.13257027 126.00498199]
[23.73568535 119.68396759]
[37.33880234 113.36294556]
[50.94191742 107.04193115]
[56.93238449 93.29004669]
[52.29713058 79.02420044]
[47.66187668 64.75835419]
[43.02661896 50.49250412]
[37.70754623 36.46726227]
[31.71707916 22.71537781]
[25.72661018 8.96349525]
[19.73614120 -4.78838778]
[13.37610531 -11.48887634]
[13.77153397 -18.94569397]
[8.11511135 -32.83831406]
[2.45868826 -46.73093414]
[-3.19773436 -60.62355423]
[-8.85415649 -74.51617432]
[-14.51057911 -88.40879059]
[-20.16700172 -102.30141449]
[-25.82342529 -116.19403076]
[-40.61056137 -127.08860779]
[-37.65912247 -144.34365845]
[-43.64959335 -158.09555054]
[-49.64006042 -171.84742737]
[-63.14355087 -181.15267944]
[-61.56716156 -197.47589111]
[-46.53255463 -204.02513123]
[-33.50603867 -194.06311035]
[-35.88817978 -177.83789062]
[-29.89770889 -164.08601379]
[-23.90723991 -150.33413696]
[-12.71651459 -145.57675171]
[-7.64236212 -134.08497620]
[-11.93080521 -121.85045624]
[-6.27438259 -107.95783234]
[-0.61795980 -94.06521606]
[5.03846264 -80.17259979]
[10.69488525 -66.27997589]
[16.35130882 -52.38735580]
[22.00773048 -38.49473572]
[27.66415405 -24.60211754]
[33.48802567 -10.77885628]
[39.47849274 2.97302628]
[45.46895981 16.72490883]
[51.45943069 30.47679138]
[54.12852478 31.61121178]
[56.48411179 33.92532349]
[58.05360031 37.29573822]
[58.42168808 41.42280197]
[57.29246902 45.85725021]
[61.92772293 60.12309647]
[66.56298065 74.38894653]
[71.19823456 88.65479279]
[100.95335388 72.93234253]
[122.14302063 93.03302765]
[137.13864136 93.39547729]
[152.13426208 93.75793457]
[167.12988281 94.12039185]
[182.12550354 94.48284912]
[197.12112427 94.84530640]
[212.11674500 94.48284912]
[227.07733154 93.39632416]
[242.03793335 92.30980682]
[256.99853516 91.22328186]
[272.35809326 84.04552460]
[283.50729370 96.81782532]
[274.32055664 111.06703186]
[258.08505249 106.18388367]
[243.12445068 107.27040100]
[228.16386414 108.35692596]
[213.20326233 109.44344330]
[211.24725342 111.58470917]
[208.28248596 113.03869629]
[204.58221436 113.40054321]
[200.56694031 112.37796021]
[196.75866699 109.84092712]
[181.76304626 109.47846985]
[166.76742554 109.11601257]
[151.77180481 108.75355530]
[136.77618408 108.39109802]
[121.78056335 108.02864075]
[115.50767517 120.61174011]
[102.05250549 128.30053711]
[85.15307617 127.16292572]
[86.23960114 142.12351990]
[87.32611847 157.08412170]
[96.04270935 170.28758240]
[89.24762726 183.54187012]
[90.33415222 198.50247192]
[91.42067719 213.46307373]
[92.50719452 228.42367554]
[93.59371948 243.38426208]
[107.80773163 248.94525146]
[118.19500732 260.12860107]
[122.69314575 274.71383667]
[120.40902710 289.80508423]
[111.79618073 302.40594482]
[98.56468201 310.01449585]
[83.34165955 311.12008667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[11 116]
[12 115]
[13 114]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[34 83]
[35 82]
[36 81]
[37 80]
[38 75]
[39 74]
[40 73]
[41 72]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[52 61]
[53 60]
[54 59]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
