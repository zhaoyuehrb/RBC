%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCCGGGCGGGAUAAUUGAACGGCGCGGCCCUGGCCCAGCGUUGGCUGCCGAGGCUCGGCCGGAGCGUGGAGCCCGCGCCGCUGCCCCAGGACCGCGCCCGCGCCUUUGUCCGCCGCCGCCCACCGCCCGUCGCCCGCCGCCC\
) } def
/len { sequence length } bind def

/coor [
[45.83748245 290.26361084]
[39.02076721 276.79385376]
[36.09206390 261.98419189]
[37.26871109 246.93368530]
[42.46338654 232.75914001]
[51.29061127 220.51239014]
[63.09535217 211.10224915]
[77.00160980 205.22700500]
[75.09634399 190.34851074]
[73.19107819 175.47000122]
[71.28581238 160.59149170]
[69.38054657 145.71298218]
[67.47527313 130.83447266]
[87.75824738 91.91300964]
[82.16539764 77.99467468]
[76.57255554 64.07633972]
[70.97970581 50.15800476]
[65.38685608 36.23966980]
[59.79401398 22.32133484]
[43.74834824 22.26191711]
[28.98389626 16.07761955]
[17.73997116 4.73832989]
[11.70969391 -10.00665855]
[11.78506660 -25.89847565]
[17.92515945 -40.51471329]
[29.16683197 -51.63867188]
[23.27982140 -65.43515778]
[17.39281273 -79.23165131]
[11.50580406 -93.02813721]
[5.61879444 -106.82463074]
[-0.26821464 -120.62111664]
[-6.15522385 -134.41760254]
[-18.68784523 -144.07389832]
[-16.56637764 -158.81665039]
[-22.45338631 -172.61314392]
[-28.34039688 -186.40962219]
[-34.22740555 -200.20611572]
[-40.11441422 -214.00260925]
[-54.50424194 -219.96672058]
[-60.27796936 -234.04219055]
[-54.50341797 -247.72392273]
[-60.39042664 -261.52041626]
[-66.27743530 -275.31689453]
[-72.16444397 -289.11340332]
[-76.45599365 -292.32312012]
[-78.80530548 -296.45901489]
[-79.18859863 -300.60687256]
[-77.95593262 -303.98022461]
[-82.95302582 -318.12338257]
[-87.95012665 -332.26654053]
[-93.79912567 -339.37484741]
[-92.89971161 -346.76327515]
[-97.59548950 -361.00930786]
[-107.65173340 -365.37786865]
[-113.49054718 -374.39648438]
[-113.36542511 -384.91897583]
[-107.56189728 -393.43173218]
[-111.64882660 -407.86422729]
[-115.73575592 -422.29672241]
[-119.82267761 -436.72921753]
[-123.90960693 -451.16171265]
[-135.11419678 -462.33166504]
[-131.13732910 -476.68554688]
[-135.22424316 -491.11804199]
[-149.14212036 -498.60592651]
[-153.60870361 -513.76593018]
[-145.97407532 -527.60382080]
[-130.76773071 -531.90991211]
[-117.01129150 -524.12939453]
[-112.86624146 -508.87835693]
[-120.79174805 -495.20495605]
[-116.70482635 -480.77246094]
[-105.79255676 -470.63482666]
[-109.47710419 -455.24865723]
[-105.39018250 -440.81616211]
[-101.30325317 -426.38363647]
[-97.21632385 -411.95114136]
[-93.12940216 -397.51864624]
[-78.29955292 -385.17361450]
[-83.34944916 -365.70507812]
[-78.65367126 -351.45904541]
[-73.80696106 -337.26364136]
[-68.80986786 -323.12048340]
[-63.81277084 -308.97732544]
[-58.36795807 -295.00039673]
[-52.48094559 -281.20391846]
[-46.59393692 -267.40744019]
[-40.70692825 -253.61093140]
[-26.83367348 -248.31297302]
[-20.66687393 -234.40524292]
[-26.31792450 -219.88961792]
[-20.43091583 -206.09312439]
[-14.54390621 -192.29663086]
[-8.65689754 -178.50015259]
[-2.76988816 -164.70365906]
[9.34165478 -156.03417969]
[7.64126587 -140.30461121]
[13.52827454 -126.50812531]
[19.41528320 -112.71163940]
[25.30229378 -98.91514587]
[31.18930244 -85.11865997]
[37.07631302 -71.32216644]
[42.96332169 -57.52568054]
[57.01565170 -58.20522308]
[70.48119354 -54.02766037]
[81.72898865 -45.47754288]
[89.38939667 -33.57030106]
[92.52080536 -19.73169899]
[90.72538757 -5.62711763]
[84.19947815 7.03886986]
[73.71234894 16.72848701]
[79.30519867 30.64682198]
[84.89804077 44.56515884]
[90.49089050 58.48349380]
[96.08374023 72.40183258]
[101.67658234 86.32016754]
[112.17001343 97.03874207]
[125.96650696 102.92575073]
[142.17337036 100.42180634]
[152.23295593 113.37313080]
[145.79682922 128.45651245]
[129.48591614 130.15545654]
[120.07949829 116.72223663]
[106.28300476 110.83522797]
[100.30070496 115.35872650]
[109.34751129 127.32347870]
[97.38261414 136.37010193]
[88.33609009 124.40571594]
[82.35378265 128.92921448]
[84.25904846 143.80772400]
[86.16431427 158.68621826]
[88.06958771 173.56472778]
[89.97485352 188.44323730]
[91.88011932 203.32174683]
[106.81809998 205.50334167]
[120.61308289 211.63529968]
[132.24139404 221.26260376]
[140.84011841 233.67085266]
[145.77120972 247.93923950]
[146.66870117 263.00897217]
[143.46603394 277.76177979]
[136.40084839 291.10290527]
[125.99742889 302.04235840]
[113.02777863 309.76834106]
[98.45433044 313.70755005]
[83.35853577 313.56762695]
[68.86060333 309.35900879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 134]
[9 133]
[10 132]
[11 131]
[12 130]
[13 129]
[14 116]
[15 115]
[16 114]
[17 113]
[18 112]
[19 111]
[26 103]
[27 102]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[41 88]
[42 87]
[43 86]
[44 85]
[48 84]
[49 83]
[50 82]
[52 81]
[53 80]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[63 72]
[64 71]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
