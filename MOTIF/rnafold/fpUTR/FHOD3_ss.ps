%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGCCCGGCGCGCCUGAGCCUGCGAGUCCGCGAGCCAGCGAGCUGCGGCUGCGGCCUCCCCUGCGCGCAGCUACCCGGGCGUCCCGGCCCGCGGCCCCGCUAACCCCGGGGCCCGCGCCCCCGCGGCAGGGAUGCAUC\
) } def
/len { sequence length } bind def

/coor [
[-116.08008575 196.82164001]
[-130.30404663 201.58386230]
[-144.52803040 206.34606934]
[-158.75199890 211.10827637]
[-172.97596741 215.87048340]
[-187.19993591 220.63270569]
[-201.42390442 225.39491272]
[-215.59394836 230.31527710]
[-229.70828247 235.39320374]
[-243.82263184 240.47113037]
[-257.93698120 245.54905701]
[-268.30303955 257.50125122]
[-282.89813232 254.52934265]
[-297.01248169 259.60726929]
[-311.12683105 264.68518066]
[-318.21142578 270.58139038]
[-325.61257935 269.71520996]
[-339.83654785 274.47741699]
[-347.05075073 280.21429443]
[-354.43075562 279.18344116]
[-368.75729370 283.62756348]
[-379.64550781 295.10614014]
[-394.09371948 291.48699951]
[-408.42025757 295.93112183]
[-422.74679565 300.37527466]
[-437.07333374 304.81939697]
[-447.80514526 317.21942139]
[-463.85653687 313.86007690]
[-468.71520996 298.19720459]
[-457.38296509 286.34341431]
[-441.51748657 290.49285889]
[-427.19094849 286.04873657]
[-412.86441040 281.60458374]
[-398.53787231 277.16046143]
[-388.67437744 265.99975586]
[-373.20144653 269.30102539]
[-358.87490845 264.85690308]
[-344.59875488 260.25344849]
[-330.37478638 255.49122620]
[-316.20474243 250.57084656]
[-302.09039307 245.49291992]
[-287.97607422 240.41500854]
[-278.61953735 228.82600403]
[-263.01489258 231.43470764]
[-248.90055847 226.35679626]
[-234.78620911 221.27886963]
[-220.67187500 216.20094299]
[-215.40026855 210.93429565]
[-206.18611145 211.17094421]
[-191.96214294 206.40872192]
[-177.73817444 201.64651489]
[-163.51420593 196.88430786]
[-149.29023743 192.12210083]
[-135.06626892 187.35987854]
[-120.84229279 182.59767151]
[-106.84458160 177.20655823]
[-93.10092926 171.19723511]
[-84.53937531 159.00917053]
[-68.79532623 160.56977844]
[-55.05166626 154.56047058]
[-41.30801010 148.55114746]
[-27.56435394 142.54182434]
[-22.65629196 136.93482971]
[-13.44692039 136.55551147]
[0.42720622 130.85388184]
[14.30133247 125.15225220]
[19.33309364 119.65599060]
[28.54863167 119.48194885]
[42.54634094 114.09083557]
[56.54404831 108.69971466]
[55.95121002 95.12058258]
[59.50160980 82.00041199]
[66.86129761 70.57328796]
[77.33802795 61.91405106]
[89.94634247 56.83718491]
[103.50031281 55.82022476]
[116.72503662 58.95882797]
[124.65492249 46.22631454]
[132.58480835 33.49379730]
[140.51469421 20.76128387]
[148.44458008 8.02877045]
[151.68572998 -8.61248016]
[168.57388306 -10.10474300]
[174.68293762 5.71030855]
[161.17709351 15.95865536]
[153.24720764 28.69116974]
[145.31732178 41.42368317]
[137.38743591 54.15620041]
[129.45755005 66.88871002]
[135.99530029 74.14572906]
[140.78457642 82.65862274]
[143.59272766 92.01387024]
[158.59179688 91.84677124]
[173.59086609 91.67967224]
[188.58993530 91.51256561]
[203.58900452 91.34546661]
[218.58528137 91.01127625]
[233.57690430 90.51005554]
[248.56852722 90.00882721]
[263.56015015 89.50760651]
[278.55178833 89.00637817]
[288.05447388 76.58733368]
[303.32794189 73.23247528]
[317.16052246 80.52587128]
[323.02090454 95.02380371]
[318.14196777 109.88079071]
[304.82742310 118.08181763]
[289.36398315 115.75460815]
[279.05300903 103.99800110]
[264.06137085 104.49922943]
[249.06976318 105.00045013]
[234.07814026 105.50167847]
[219.08651733 106.00290680]
[212.45297241 109.39756012]
[203.75611877 106.34453583]
[188.75704956 106.51163483]
[173.75798035 106.67874146]
[158.75891113 106.84584045]
[143.75984192 107.01293945]
[137.39720154 123.78138733]
[124.90996552 136.65512085]
[108.34320068 143.52580261]
[90.41005707 143.26820374]
[74.04747009 135.92451477]
[61.93516541 122.69742584]
[47.93745804 128.08854675]
[33.93974686 133.47966003]
[20.00296593 139.02638245]
[6.12883902 144.72801208]
[-7.74528742 150.42964172]
[-21.55503654 156.28547668]
[-35.29869080 162.29479980]
[-49.04234695 168.30412292]
[-62.78600311 174.31343079]
[-72.33059692 186.93133545]
[-87.09160614 184.94090271]
[-100.83526611 190.95021057]
[-103.37675476 194.69729614]
[-106.66867828 197.14559937]
[-110.19308472 198.21917725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 47]
[9 46]
[10 45]
[11 44]
[13 42]
[14 41]
[15 40]
[17 39]
[18 38]
[20 37]
[21 36]
[23 34]
[24 33]
[25 32]
[26 31]
[56 137]
[57 136]
[59 134]
[60 133]
[61 132]
[62 131]
[64 130]
[65 129]
[66 128]
[68 127]
[69 126]
[70 125]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
