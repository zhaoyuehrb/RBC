%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCUGCCGAGCUGUAGCUAUGGAGACGUGGGGGGCGGGCCGCCCGGAGAGCGCGACCUUUGACCUGCAGUAGAGCCUACGUCAGAGGCUGGCGCAAACAGAAGUGCAGCGGUGGCGGCGGCUGGUUGCGGGCCGGCGGCGGGCUGGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[7.48644590 240.03315735]
[-6.90876865 244.24952698]
[-20.71397400 238.38298035]
[-27.66999435 225.09336853]
[-24.62318420 210.40635681]
[-37.35284805 218.34082031]
[-44.97153091 232.20683289]
[-59.86521149 232.37289429]
[-72.59487152 240.30734253]
[-85.32453918 248.24180603]
[-89.01356506 260.64123535]
[-99.82818604 266.97912598]
[-111.66508484 264.31341553]
[-124.55294037 271.98825073]
[-137.44079590 279.66308594]
[-138.07408142 291.60479736]
[-144.35285950 301.64080811]
[-154.60435486 307.31698608]
[-166.20213318 307.31231689]
[-176.23870850 301.74447632]
[-189.42701721 308.89074707]
[-202.61531067 316.03698730]
[-215.80360413 323.18322754]
[-228.99189758 330.32946777]
[-237.10644531 344.58029175]
[-253.50468445 344.40771484]
[-261.31750488 329.98925781]
[-252.50775146 316.15740967]
[-236.13813782 317.14117432]
[-222.94984436 309.99493408]
[-209.76155090 302.84869385]
[-196.57325745 295.70245361]
[-183.38496399 288.55618286]
[-179.28504944 270.75885010]
[-163.23370361 261.39843750]
[-145.11563110 266.77520752]
[-132.22778320 259.10037231]
[-119.33992767 251.42553711]
[-111.64517212 235.68138123]
[-93.25899506 235.51214600]
[-80.52933502 227.57768250]
[-67.79966736 219.64321899]
[-61.09149933 206.34474182]
[-45.28730774 205.61116028]
[-32.55764389 197.67669678]
[-20.42238808 188.85992432]
[-8.94258595 179.20516968]
[2.53721642 169.55043030]
[1.84501493 156.64965820]
[8.82924747 145.54989624]
[21.11903763 140.44140625]
[34.29397202 143.40521240]
[45.96708679 133.98510742]
[57.64020538 124.56500244]
[62.68558884 110.55096436]
[78.28406525 107.90558624]
[89.95718384 98.48548126]
[93.78227997 91.33219147]
[101.96367645 88.99564362]
[113.82531738 79.81404877]
[120.00210571 65.24841309]
[134.80258179 63.57644272]
[146.66421509 54.39485550]
[158.52584839 45.21326447]
[164.70263672 30.64762688]
[179.50311279 28.97565651]
[191.36474609 19.79406738]
[203.22637939 10.61247730]
[215.08801270 1.43088806]
[226.94964600 -7.75070190]
[238.81127930 -16.93229103]
[250.67292786 -26.11388206]
[250.83242798 -39.61712265]
[258.64147949 -50.39461136]
[271.05432129 -54.62614441]
[283.44635010 -50.97282791]
[295.49160767 -59.91213226]
[307.53689575 -68.85143280]
[319.58218384 -77.79074097]
[322.02963257 -93.17409515]
[334.37261963 -102.06823730]
[349.02322388 -99.64015198]
[361.06851196 -108.57946014]
[373.11376953 -117.51876068]
[385.15905762 -126.45806885]
[397.20434570 -135.39736938]
[397.63748169 -148.89460754]
[405.66336060 -159.51161194]
[418.15939331 -163.49070740]
[430.47485352 -159.58699036]
[442.69882202 -168.28034973]
[454.92279053 -176.97369385]
[467.14678955 -185.66703796]
[472.36581421 -193.23689270]
[479.70776367 -194.40974426]
[492.10540771 -202.85356140]
[504.50308228 -211.29737854]
[504.84014893 -226.81079102]
[514.25817871 -239.14288330]
[529.13574219 -243.55169678]
[543.75213623 -238.34197998]
[552.48699951 -225.51695251]
[551.98168945 -210.00810242]
[542.43041992 -197.77891541]
[527.50592041 -193.53173828]
[512.94689941 -198.89971924]
[500.54925537 -190.45590210]
[488.15158081 -182.01208496]
[475.84011841 -173.44305420]
[463.61614990 -164.74971008]
[451.39218140 -156.05636597]
[439.16818237 -147.36300659]
[437.10089111 -130.69947815]
[423.36825562 -120.46266937]
[406.14364624 -123.35208893]
[394.09835815 -114.41278839]
[382.05307007 -105.47348022]
[370.00781250 -96.53417206]
[357.96252441 -87.59487152]
[356.04254150 -72.86907196]
[343.95425415 -63.63175201]
[328.52148438 -65.74546051]
[316.47619629 -56.80615234]
[304.43090820 -47.86684799]
[292.38565063 -38.92754364]
[290.65649414 -22.22553253]
[277.13412476 -11.71251202]
[259.85452271 -14.25224495]
[247.99287415 -5.07065535]
[236.13124084 4.11093426]
[224.26960754 13.29252434]
[212.40797424 22.47411346]
[200.54632568 31.65570450]
[188.68469238 40.83729172]
[183.35632324 54.74620056]
[167.70744324 57.07490158]
[155.84579468 66.25649261]
[143.98416138 75.43807983]
[138.65579224 89.34699249]
[123.00690460 91.67568970]
[111.14527130 100.85727692]
[99.37728882 110.15859985]
[87.70417023 119.57870483]
[81.82384491 134.26654053]
[67.06031036 136.23812866]
[55.38719177 145.65821838]
[43.71407318 155.07832336]
[42.19386292 172.47731018]
[28.84172249 183.20570374]
[12.19196320 181.03022766]
[0.71216065 190.68498230]
[-10.76764202 200.33972168]
[4.14232731 201.98069763]
[14.63182354 212.70312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[6 44]
[8 42]
[9 41]
[10 40]
[13 38]
[14 37]
[15 36]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[46 152]
[47 151]
[48 150]
[52 147]
[53 146]
[54 145]
[56 143]
[57 142]
[59 141]
[60 140]
[62 138]
[63 137]
[64 136]
[66 134]
[67 133]
[68 132]
[69 131]
[70 130]
[71 129]
[72 128]
[76 125]
[77 124]
[78 123]
[79 122]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[90 112]
[91 111]
[92 110]
[93 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
