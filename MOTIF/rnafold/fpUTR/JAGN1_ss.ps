%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGACAGAGGGGCCGGAAGUUCUCUUCACGGAGCCGCGCGGCUGCGGGGGCGCAAAUAGGGUCAGUGGGCCGCUUGGCGGUGUCGUUGCGGUACCAGGUCCGCGUGAGGGGUUCGGGGGUUCUGGGCAGGCACA\
) } def
/len { sequence length } bind def

/coor [
[85.95036316 576.12652588]
[78.63098907 562.87115479]
[76.01467133 547.95697021]
[78.38520813 533.00170898]
[85.48547363 519.62768555]
[96.54526520 509.28555298]
[110.36492157 503.09716797]
[108.99096680 488.16021729]
[107.61701202 473.22326660]
[106.24306488 458.28634644]
[104.86911011 443.34939575]
[91.99485779 435.90682983]
[85.89964294 422.14776611]
[89.11257935 407.26385498]
[100.60639954 397.00723267]
[99.23245239 382.07031250]
[97.85849762 367.13336182]
[96.48455048 352.19641113]
[95.11059570 337.25946045]
[92.94729614 335.34744263]
[91.44613647 332.42587280]
[91.01000977 328.75582886]
[91.93473053 324.74438477]
[94.35984039 320.90130615]
[94.35984039 305.90130615]
[94.35984039 290.90130615]
[94.35984039 275.90130615]
[94.35984039 260.90130615]
[94.35984039 245.90129089]
[94.35984039 230.90129089]
[94.35984039 215.90129089]
[94.35984039 200.90129089]
[81.98218536 189.57443237]
[81.57582855 172.46456909]
[93.87609863 160.08511353]
[93.53215790 145.08906555]
[93.18822479 130.09300232]
[80.88391876 124.21909332]
[72.31249237 113.61583710]
[69.14770508 100.35375977]
[72.00756836 87.02259827]
[80.33361816 76.22559357]
[92.50000000 70.07109833]
[92.50000000 55.07109833]
[92.50000000 40.07109833]
[92.50000000 25.07110023]
[92.50000000 10.07109928]
[92.50000000 -4.92890024]
[92.50000000 -19.92889977]
[84.76270294 -33.72907257]
[92.50000000 -46.45634460]
[92.50000000 -61.45634460]
[92.50000000 -76.45634460]
[92.50000000 -91.45634460]
[92.50000000 -106.45634460]
[78.12564850 -114.54286194]
[69.81600952 -128.68093872]
[69.74478912 -144.98645020]
[77.83718872 -159.03437805]
[91.81571960 -167.05972290]
[91.47177887 -182.05578613]
[90.95593262 -197.04690552]
[90.26822662 -212.03114319]
[89.58052826 -227.01536560]
[88.89282990 -241.99958801]
[79.59988403 -255.51155090]
[86.89840698 -270.19705200]
[103.28031158 -270.94888306]
[111.89329529 -256.99365234]
[103.87705994 -242.68728638]
[104.56475830 -227.70306396]
[105.25245667 -212.71884155]
[105.94015503 -197.73460388]
[109.41973114 -191.13912964]
[106.46784210 -182.39971924]
[106.81177521 -167.40367126]
[119.23757172 -161.62460327]
[127.98864746 -150.99259949]
[131.30256653 -137.55870056]
[128.47305298 -123.94670868]
[119.99949646 -112.84084320]
[107.50000000 -106.45634460]
[107.50000000 -91.45634460]
[107.50000000 -76.45634460]
[107.50000000 -61.45634460]
[107.50000000 -46.45634460]
[115.23729706 -33.72907257]
[107.50000000 -19.92889977]
[107.50000000 -4.92890024]
[107.50000000 10.07109928]
[107.50000000 25.07110023]
[107.50000000 40.07109833]
[107.50000000 55.07109833]
[107.50000000 70.07109833]
[121.50212860 77.87202454]
[129.70146179 91.64463806]
[129.88523865 107.67212677]
[122.00386047 121.62912750]
[108.18428040 129.74906921]
[108.52822113 144.74511719]
[108.87215424 159.74118042]
[119.65400696 167.90109253]
[123.68163300 180.60432434]
[119.68962097 193.11412048]
[109.35984039 200.90129089]
[109.35984039 215.90129089]
[109.35984039 230.90129089]
[109.35984039 245.90129089]
[109.35984039 260.90130615]
[109.35984039 275.90130615]
[109.35984039 290.90130615]
[109.35984039 305.90130615]
[109.35984039 320.90130615]
[110.04753876 335.88552856]
[111.42149353 350.82247925]
[112.79544067 365.75939941]
[114.16939545 380.69635010]
[115.54334259 395.63330078]
[128.71534729 403.62106323]
[134.58955383 417.66909790]
[131.10658264 432.30920410]
[119.80605316 441.97543335]
[121.18000793 456.91238403]
[122.55395508 471.84933472]
[123.92790985 486.78628540]
[125.30186462 501.72320557]
[140.01852417 505.28671265]
[152.77938843 513.43774414]
[162.20024109 525.29211426]
[167.25918579 539.56396484]
[167.40747070 554.70520020]
[162.62901306 569.07336426]
[153.44212341 581.10998535]
[140.84335327 589.50939941]
[126.19930267 593.36041260]
[111.09846497 592.24542236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 126]
[8 125]
[9 124]
[10 123]
[11 122]
[15 118]
[16 117]
[17 116]
[18 115]
[19 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 105]
[35 101]
[36 100]
[37 99]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[60 76]
[61 75]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
