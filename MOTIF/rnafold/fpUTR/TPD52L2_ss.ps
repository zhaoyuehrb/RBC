%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGUCGCAUCGCGGAUUACGAAACGCCGCGGAGCUGAGGCAGUUCCGCUGGCUAGUGUGUACGCGGCGAGCUUCUCCCGGCGCCGCCCGCUCGGCUCCCAUAGCGCCCGCGACAGCGGUCCGGACGCCGCCCGAAC\
) } def
/len { sequence length } bind def

/coor [
[88.93150330 106.17529297]
[74.04724884 104.31547546]
[59.16299057 102.45565796]
[44.25866699 100.76416016]
[29.33618164 99.24119568]
[14.41369629 97.71823120]
[-0.50878936 96.19526672]
[-15.43127537 94.67230225]
[-30.35375977 93.14933777]
[-39.78892899 102.83190155]
[-52.89192963 105.25023651]
[-64.80763245 99.73735809]
[-71.25247955 88.52333069]
[-86.13673401 86.66351318]
[-101.02099609 84.80369568]
[-115.67401123 90.77024078]
[-127.34374237 81.51461792]
[-142.22799683 79.65480804]
[-157.11225891 77.79499054]
[-171.99652100 75.93517303]
[-164.13664246 88.71102905]
[-167.40922546 103.34968567]
[-179.96122742 111.56232452]
[-194.68534851 108.69871521]
[-203.24438477 96.38031769]
[-200.79196167 81.58215332]
[-188.71572876 72.68310547]
[-203.21191406 68.82811737]
[-217.70808411 64.97312927]
[-232.24688721 61.28219604]
[-246.82649231 57.75579834]
[-261.40606689 54.22939682]
[-275.98565674 50.70299911]
[-290.56527710 47.17659760]
[-305.14486694 43.65019989]
[-319.72445679 40.12379837]
[-334.30404663 36.59740067]
[-348.88363647 33.07100296]
[-365.70028687 35.22420502]
[-372.42465210 19.66081238]
[-359.33099365 8.89085770]
[-345.35723877 18.49140930]
[-330.77764893 22.01780891]
[-316.19805908 25.54420853]
[-301.61846924 29.07060814]
[-287.03884888 32.59700775]
[-272.45925903 36.12340546]
[-257.87966919 39.64980698]
[-243.30009460 43.17620468]
[-228.72048950 46.70260620]
[-221.41813660 45.20506668]
[-213.85308838 50.47695160]
[-199.35691833 54.33194351]
[-184.86074829 58.18693161]
[-170.13670349 61.05091476]
[-155.25244141 62.91073227]
[-140.36817932 64.77054596]
[-125.48393250 66.63036346]
[-111.89553070 60.53079224]
[-99.16117859 69.91944122]
[-84.27692413 71.77925873]
[-69.39266205 73.63907623]
[-56.61658096 62.76107407]
[-39.58697128 64.48229980]
[-28.83079529 78.22685242]
[-13.90830994 79.74981689]
[1.01417542 81.27278137]
[15.93666077 82.79574585]
[30.85914612 84.31871033]
[45.78163147 85.84167480]
[52.81449127 83.37065887]
[61.02280807 87.57140350]
[75.90705872 89.43122101]
[90.79132080 91.29103851]
[105.73006439 92.64527130]
[120.70612335 93.49237061]
[130.55163574 81.64450073]
[145.31315613 77.90941620]
[159.27833557 83.51634216]
[167.16964722 96.12052155]
[182.14570618 96.96762085]
[197.12176514 97.81472015]
[212.09782410 98.66182709]
[227.07388306 99.50892639]
[242.05856323 100.18673706]
[257.04995728 100.69516754]
[272.04132080 101.20360565]
[288.03424072 92.15538025]
[302.57604980 101.91455078]
[317.57510376 102.08405304]
[332.57412720 102.25356293]
[347.57318115 102.42307281]
[362.57220459 102.59257507]
[377.56359863 102.08414459]
[392.51669312 100.89880371]
[407.45544434 99.54457092]
[422.37792969 98.02160645]
[429.26593018 84.21729279]
[442.53530884 76.34795380]
[457.95190430 76.92465210]
[470.59628296 85.76337433]
[476.43371582 100.04371643]
[473.60144043 115.20886993]
[463.00329590 126.41969299]
[448.02105713 130.09884644]
[433.43551636 125.07233429]
[423.90087891 112.94409180]
[408.97839355 114.46705627]
[402.58972168 118.30785370]
[393.70202637 115.85189819]
[378.74893188 117.03723145]
[376.81048584 119.17219543]
[373.87411499 120.63388062]
[370.20489502 121.02458954]
[366.21145630 120.05483246]
[362.40270996 117.59162140]
[347.40365601 117.42211151]
[332.40463257 117.25260162]
[317.40557861 117.08309937]
[302.40652466 116.91358948]
[293.49182129 125.16786194]
[280.94076538 125.09876251]
[271.53289795 116.19498444]
[256.54150391 115.68655396]
[241.55012512 115.17811584]
[234.70085144 118.11994934]
[226.22679138 114.48498535]
[211.25073242 113.63788605]
[196.27465820 112.79078674]
[181.29859924 111.94367981]
[166.32254028 111.09658051]
[157.06024170 122.73049164]
[142.55186462 126.72684479]
[128.30567932 121.35098267]
[119.85902405 108.46843719]
[104.88295746 107.62133789]
[101.60485840 109.82702637]
[97.35410309 110.53585815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[13 62]
[14 61]
[15 60]
[17 58]
[18 57]
[19 56]
[20 55]
[27 54]
[28 53]
[29 52]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[75 136]
[76 135]
[80 131]
[81 130]
[82 129]
[83 128]
[84 127]
[85 125]
[86 124]
[87 123]
[89 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 111]
[95 110]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
