%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCAACUUCUCCAGCCGGCCGGGGCGAGCGCCAGCGCGGCGUCCGGGGCGAGUGACACGCAGAGCUGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[119.89272308 338.25811768]
[130.19082642 326.49023438]
[127.72190857 311.69482422]
[125.25299072 296.89938354]
[122.78407288 282.10397339]
[107.92757416 280.35415649]
[94.15219116 274.48303223]
[82.57765961 264.95855713]
[74.14744568 252.54595947]
[69.55182648 238.24644470]
[69.17137146 223.21623230]
[73.04547119 208.67320251]
[80.86840820 195.79815674]
[92.01349640 185.63896179]
[105.58328247 179.02526855]
[103.11435699 164.22984314]
[90.88092804 155.81089783]
[88.16632843 140.84140015]
[97.07984161 128.06694031]
[94.61092377 113.27152252]
[85.87141418 102.35764313]
[90.59365845 89.19740295]
[88.12474060 74.40197754]
[78.22153473 62.06354141]
[83.75846863 48.23633575]
[81.28955078 33.44091797]
[78.82063293 18.64549637]
[76.35170746 3.85007715]
[73.88278961 -10.94534206]
[61.84578323 -24.70101929]
[68.28567505 -40.89123917]
[65.20744324 -55.57199097]
[62.12921524 -70.25274658]
[50.79252625 -82.10227966]
[55.64530182 -97.76697540]
[71.69542694 -101.13233185]
[82.43190002 -88.73635864]
[76.80996704 -73.33097076]
[79.88819885 -58.65022278]
[82.96643066 -43.96946716]
[93.03726959 -36.94812012]
[95.59028625 -24.52618599]
[88.67821503 -13.41426086]
[91.14713287 1.38115835]
[93.61605072 16.17657852]
[96.08496857 30.97199821]
[98.55388641 45.76741791]
[108.28050232 57.04758835]
[102.92015839 71.93305969]
[105.38907623 86.72847748]
[114.12858582 97.64235687]
[109.40634155 110.80259705]
[111.87525940 125.59802246]
[124.45367432 134.78611755]
[126.74674225 149.82594299]
[117.90978241 161.76092529]
[120.37870026 176.55635071]
[135.36070251 178.40559387]
[149.20060730 184.39552307]
[160.78018188 194.03286743]
[169.16648865 206.52999878]
[173.68695068 220.86935425]
[173.98338318 235.88629150]
[170.04029846 250.36361694]
[162.18550110 263.13027954]
[151.06286621 273.15615845]
[137.57949829 279.63504028]
[140.04841614 294.43048096]
[142.51733398 309.22589111]
[144.98625183 324.02130127]
[158.54739380 331.80780029]
[163.88223267 346.50723267]
[158.47178650 361.17901611]
[144.87072754 368.89556885]
[129.50105286 366.01336670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[15 57]
[16 56]
[19 53]
[20 52]
[22 50]
[23 49]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
