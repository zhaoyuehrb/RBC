%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:31 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (FAM102B)
} def

/sequence { (\
CUGGGCUGAUCCGGGGCUCGGCCAAGCUGAGGCGGCGGCGCCCGGCCGUGCGCCCAGCUUGCAGGCGCCUGGCUCUCACG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 14 0.117975447 ubox
1 15 0.010054727 ubox
1 21 0.016925056 ubox
1 72 0.005485425 ubox
2 13 0.135717870 ubox
2 14 0.010295282 ubox
2 20 0.018262553 ubox
2 71 0.005554733 ubox
2 78 0.447748748 ubox
2 80 0.195238395 ubox
3 7 0.005808787 ubox
3 11 0.008583179 ubox
3 12 0.204143228 ubox
3 19 0.019481467 ubox
3 70 0.005558627 ubox
3 74 0.011299436 ubox
3 75 0.423372102 ubox
3 76 0.040282878 ubox
3 77 0.504507844 ubox
3 79 0.350944771 ubox
4 10 0.008727576 ubox
4 11 0.204040463 ubox
4 12 0.044151752 ubox
4 18 0.019481160 ubox
4 23 0.006744262 ubox
4 69 0.005582435 ubox
4 73 0.012537736 ubox
4 74 0.427451262 ubox
4 75 0.055066670 ubox
4 76 0.498592108 ubox
4 77 0.221157610 ubox
5 10 0.138330462 ubox
5 11 0.043935634 ubox
5 17 0.019497507 ubox
5 22 0.007028326 ubox
5 68 0.005579915 ubox
5 73 0.430770100 ubox
5 74 0.029719291 ubox
5 75 0.440992026 ubox
5 76 0.186190563 ubox
6 16 0.019440789 ubox
6 21 0.007052543 ubox
6 67 0.005540839 ubox
6 72 0.408544607 ubox
7 13 0.003339838 ubox
7 15 0.019239433 ubox
7 20 0.007093204 ubox
7 71 0.370593648 ubox
7 78 0.285468036 ubox
7 80 0.007973324 ubox
8 12 0.010239033 ubox
8 19 0.007133415 ubox
8 70 0.302272481 ubox
8 75 0.671726366 ubox
8 77 0.320725129 ubox
8 79 0.010561749 ubox
9 18 0.007045986 ubox
9 74 0.687426845 ubox
9 76 0.318021595 ubox
10 72 0.041963599 ubox
11 71 0.083091867 ubox
11 72 0.883816781 ubox
12 71 0.897236361 ubox
12 80 0.006156534 ubox
13 69 0.387906034 ubox
13 70 0.891369625 ubox
13 75 0.006028071 ubox
13 76 0.138572254 ubox
13 77 0.074118393 ubox
13 79 0.008310605 ubox
14 68 0.388913717 ubox
14 69 0.891485100 ubox
14 70 0.075422236 ubox
14 74 0.004982945 ubox
14 75 0.170805715 ubox
14 76 0.053424180 ubox
14 77 0.004830150 ubox
15 68 0.890105380 ubox
15 69 0.087092198 ubox
15 73 0.003974083 ubox
15 74 0.201851751 ubox
15 75 0.058889707 ubox
15 77 0.003956687 ubox
16 66 0.966317846 ubox
16 68 0.093134569 ubox
16 73 0.213853557 ubox
16 74 0.006947192 ubox
17 64 0.015341759 ubox
17 65 0.965899982 ubox
17 67 0.098735449 ubox
17 72 0.213993053 ubox
18 63 0.019770009 ubox
18 64 0.885616676 ubox
18 65 0.127958047 ubox
18 71 0.209358940 ubox
18 72 0.003485059 ubox
19 64 0.380962534 ubox
19 67 0.009694344 ubox
19 71 0.022738450 ubox
20 66 0.009146945 ubox
20 69 0.213236668 ubox
20 70 0.006411077 ubox
21 62 0.948325534 ubox
21 66 0.030408472 ubox
21 68 0.213341350 ubox
21 69 0.004373724 ubox
22 61 0.675700696 ubox
22 65 0.031336566 ubox
22 67 0.213227836 ubox
23 61 0.736060420 ubox
23 64 0.027972841 ubox
24 60 0.992934929 ubox
25 59 0.999036414 ubox
25 60 0.004355329 ubox
26 58 0.999986052 ubox
27 57 0.999988466 ubox
28 56 0.999736066 ubox
29 55 0.999691707 ubox
31 54 0.999860486 ubox
32 51 0.004069881 ubox
32 53 0.999983936 ubox
33 50 0.004220468 ubox
33 52 0.999948321 ubox
34 49 0.004027387 ubox
34 51 0.982900514 ubox
35 49 0.945822397 ubox
35 51 0.009564598 ubox
36 48 0.999602149 ubox
36 50 0.012378502 ubox
37 47 0.999966412 ubox
38 46 0.999986112 ubox
39 45 0.999839829 ubox
61 77 0.004590708 ubox
62 71 0.006668899 ubox
63 70 0.006812309 ubox
63 76 0.009675129 ubox
64 69 0.006797240 ubox
64 74 0.014576953 ubox
64 75 0.010208223 ubox
65 73 0.018376426 ubox
66 72 0.018422870 ubox
67 73 0.005155691 ubox
68 72 0.005121952 ubox
70 78 0.009187200 ubox
70 80 0.004294781 ubox
71 77 0.010459414 ubox
71 79 0.007982586 ubox
72 76 0.006786739 ubox
8 75 0.9500000 lbox
9 74 0.9500000 lbox
11 72 0.9500000 lbox
12 71 0.9500000 lbox
13 70 0.9500000 lbox
14 69 0.9500000 lbox
15 68 0.9500000 lbox
16 66 0.9500000 lbox
17 65 0.9500000 lbox
18 64 0.9500000 lbox
21 62 0.9500000 lbox
22 61 0.9500000 lbox
24 60 0.9500000 lbox
25 59 0.9500000 lbox
26 58 0.9500000 lbox
27 57 0.9500000 lbox
28 56 0.9500000 lbox
29 55 0.9500000 lbox
31 54 0.9500000 lbox
32 53 0.9500000 lbox
33 52 0.9500000 lbox
34 51 0.9500000 lbox
35 49 0.9500000 lbox
36 48 0.9500000 lbox
37 47 0.9500000 lbox
38 46 0.9500000 lbox
39 45 0.9500000 lbox
showpage
end
%%EOF
