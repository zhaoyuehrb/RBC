%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCCGCGGGGCGGUGUCAUCGCCCCCGCCCCGCCCGGUCCAGCCAGCUCGGCCCGGGGGCUUCGGGCUGUCGGGCCGGCGCUCCCUUCUCUGCCAGGUGGCGAGUACACCUGCUCACGUAGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[74.63475800 137.21633911]
[63.93410110 126.97595978]
[50.59396744 133.83459473]
[37.25383759 140.69322205]
[23.99820518 147.71379089]
[10.82904434 154.89523315]
[-2.16133666 162.39523315]
[-14.96523285 170.20933533]
[-27.76912880 178.02345276]
[-40.57302475 185.83755493]
[-53.37692261 193.65165710]
[-66.18081665 201.46575928]
[-78.98471832 209.27986145]
[-91.78861237 217.09396362]
[-104.59250641 224.90808105]
[-112.96970367 241.25245667]
[-130.47392273 241.11274719]
[-143.08374023 249.23632812]
[-150.09683228 264.06024170]
[-166.46112061 265.12881470]
[-175.34243774 251.34280396]
[-167.60443115 236.88406372]
[-151.20730591 236.62651062]
[-138.59748840 228.50292969]
[-135.70060730 216.69174194]
[-125.17240906 209.83625793]
[-112.40661621 212.10418701]
[-99.60271454 204.29006958]
[-86.79882050 196.47596741]
[-73.99492645 188.66186523]
[-61.19102859 180.84776306]
[-48.38713074 173.03366089]
[-35.58323288 165.21954346]
[-22.77933884 157.40544128]
[-9.97544193 149.59133911]
[-7.98643208 145.14556885]
[-3.12808967 141.95207214]
[3.64759731 141.72607422]
[16.81675911 134.54463196]
[21.22849846 128.51799011]
[30.39520073 127.35309601]
[43.73533249 120.49446106]
[57.07546616 113.63582611]
[55.35560226 94.05615997]
[62.13832092 75.60851288]
[76.13184357 61.80625153]
[94.67108917 55.27803421]
[95.40139771 40.29582596]
[96.13171387 25.31361389]
[96.67954254 10.32362175]
[97.04480743 -4.67193079]
[97.41007233 -19.66748238]
[97.77533722 -34.66303635]
[98.14060211 -49.65858841]
[98.50587463 -64.65413666]
[98.87113953 -79.64968872]
[99.23640442 -94.64524078]
[99.60166931 -109.64079285]
[92.20271301 -123.62528992]
[100.24763489 -136.16036987]
[100.61289978 -151.15592957]
[100.97816467 -166.15147400]
[101.34343719 -181.14703369]
[95.68458557 -197.12869263]
[109.47515869 -206.99057007]
[122.76923370 -196.46896362]
[116.33898926 -180.78176880]
[115.97371674 -165.78620911]
[115.60845184 -150.79066467]
[115.24318695 -135.79510498]
[122.66827393 -122.88320160]
[114.59722137 -109.27552795]
[114.23195648 -94.27997589]
[113.86669159 -79.28442383]
[113.50142670 -64.28887177]
[113.13615417 -49.29331970]
[112.77088928 -34.29776764]
[112.40562439 -19.30221748]
[112.04035950 -4.30666542]
[111.67509460 10.68888664]
[114.68843842 17.52288055]
[111.11392212 26.04392815]
[110.38361359 41.02613831]
[109.65329742 56.00835037]
[118.53215027 58.95111465]
[126.61164856 63.66445923]
[133.54330444 69.94507599]
[139.02810669 77.52205658]
[142.82951355 86.06858826]
[144.78353882 95.21603394]
[159.75573730 96.12872314]
[174.72795105 97.04141235]
[183.58883667 94.42029572]
[190.05224609 98.16300964]
[204.99780273 99.44001770]
[219.94334412 100.71702576]
[234.55416870 93.27015686]
[248.15954590 102.42580414]
[246.76341248 118.76541901]
[231.80201721 125.48020172]
[218.66633606 115.66256714]
[203.72079468 114.38555908]
[188.77523804 113.10855103]
[173.81526184 112.01361847]
[158.84304810 111.10092926]
[143.87084961 110.18824005]
[138.72724915 122.99243164]
[129.94845581 133.63839722]
[137.91787720 146.34619141]
[151.80479431 153.92672729]
[152.01179504 168.81988525]
[159.98121643 181.52769470]
[167.95065308 194.23548889]
[175.92008972 206.94328308]
[183.88951111 219.65109253]
[198.62693787 226.84416199]
[199.49618530 243.22026062]
[185.60305786 251.93304443]
[171.23959351 244.01956177]
[171.18171692 227.62051392]
[163.21228027 214.91271973]
[155.24285889 202.20492554]
[147.27342224 189.49711609]
[139.30398560 176.78932190]
[125.98711395 170.11773682]
[125.21008301 154.31562805]
[117.24065399 141.60783386]
[102.81164551 144.95048523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[5 39]
[6 38]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[17 24]
[18 23]
[47 84]
[48 83]
[49 82]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[60 70]
[61 69]
[62 68]
[63 67]
[90 106]
[91 105]
[92 104]
[94 103]
[95 102]
[96 101]
[108 127]
[109 126]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
