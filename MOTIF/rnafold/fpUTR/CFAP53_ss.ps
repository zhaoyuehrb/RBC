%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCCGCGAGGCGCACCAUGGCAACCAGACUUCUGCGUCGCGGAAGCGGGUCCCGCAGGUCGCCACGGUUGGGGGAAACGCGGCGGACGCCGCCCCCGUCCCGAAGGGGACUCGAAA\
) } def
/len { sequence length } bind def

/coor [
[94.90995789 137.44413757]
[86.16680908 135.16554260]
[78.21447754 130.87658691]
[71.50758362 124.82246399]
[66.42955780 117.34928894]
[52.00217056 121.45423126]
[37.57478714 125.55917358]
[23.14740181 129.66412354]
[8.72001648 133.76905823]
[-5.70736790 137.87400818]
[-16.86331558 149.09254456]
[-31.22214317 145.13359070]
[-45.64952850 149.23854065]
[-60.07691193 153.34347534]
[-62.70048904 169.34104919]
[-71.97968292 182.56326294]
[-86.03080750 190.41363525]
[-102.03932953 191.37730408]
[-116.82353210 185.31315613]
[-127.46695709 173.47184753]
[-141.78096008 177.95620728]
[-156.09495544 182.44055176]
[-169.40211487 192.94560242]
[-183.18040466 183.06657410]
[-177.50166321 167.09194946]
[-160.57931519 168.12655640]
[-146.26530457 163.64221191]
[-131.95130920 159.15785217]
[-130.60459900 145.28454590]
[-124.03060913 132.94441223]
[-113.20091248 124.03196716]
[-99.74326324 119.92989349]
[-85.69697571 121.29457855]
[-73.20390320 127.95137787]
[-64.18186188 138.91609192]
[-49.75447464 134.81115723]
[-35.32708740 130.70620728]
[-25.20308495 119.78128815]
[-9.81231308 123.44662476]
[4.61507177 119.34168243]
[19.04245758 115.23673248]
[33.46984100 111.13179016]
[47.89722443 107.02684784]
[62.32461166 102.92189789]
[63.61499405 89.79686737]
[69.33718872 77.91460419]
[78.79421234 68.72241974]
[73.00826263 54.88324356]
[67.22231293 41.04406738]
[61.43635559 27.20489502]
[49.74830246 14.92378139]
[58.31388855 0.29275087]
[74.74432373 4.47331858]
[75.27553558 21.41894150]
[81.06148529 35.25811768]
[86.84743500 49.09729004]
[92.63338470 62.93646622]
[118.16978455 66.86646271]
[135.21211243 86.28580475]
[149.99180603 83.72442627]
[164.77149963 81.16304016]
[179.55119324 78.60166168]
[191.82746887 68.62150574]
[205.68902588 74.07186890]
[220.46871948 71.51049042]
[234.25253296 59.38864899]
[250.48083496 65.92483521]
[265.18777466 62.97421265]
[279.89468384 60.02358627]
[286.44018555 46.07859802]
[299.78585815 38.74740601]
[314.71282959 40.65778351]
[325.52322388 50.86921692]
[340.23016357 47.91859055]
[354.93710327 44.96796417]
[369.64401245 42.01734161]
[372.99447632 38.81645584]
[376.82116699 37.10416031]
[380.57000732 36.84039307]
[383.76260376 37.80030823]
[386.05276489 39.61790848]
[400.98880005 38.23388290]
[415.92480469 36.84985733]
[430.86080933 35.46583176]
[445.79684448 34.08180618]
[458.86184692 24.17033577]
[473.87097168 30.77778435]
[475.38409424 47.10697556]
[461.84463501 56.35983658]
[447.18084717 49.01781845]
[432.24484253 50.40184402]
[417.30883789 51.78586960]
[402.37280273 53.16989517]
[387.43679810 54.55392075]
[372.59463501 56.72426987]
[357.88772583 59.67489624]
[343.18078613 62.62552261]
[328.47384644 65.57614899]
[322.43890381 79.16722870]
[309.40402222 86.68754578]
[294.26327515 85.07153320]
[282.84533691 74.73051453]
[268.13839722 77.68114471]
[253.43145752 80.63176727]
[246.40536499 90.57511139]
[234.08290100 93.09625244]
[223.03010559 86.29018402]
[208.25041199 88.85156250]
[197.03128052 98.64852142]
[182.11257935 93.38135529]
[167.33288574 95.94273376]
[152.55319214 98.50411987]
[137.77349854 101.06549835]
[136.44084167 110.00186920]
[133.02493286 118.36645508]
[127.72103119 125.68106079]
[120.83237457 131.52752686]
[112.75276184 135.57160950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[12 37]
[13 36]
[14 35]
[20 28]
[21 27]
[22 26]
[47 57]
[48 56]
[49 55]
[50 54]
[59 113]
[60 112]
[61 111]
[62 110]
[64 108]
[65 107]
[67 104]
[68 103]
[69 102]
[73 98]
[74 97]
[75 96]
[76 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
