%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:46 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (FDXR)
} def

/sequence { (\
GCUUGUGGGCGGGCCCGGGCAGGAGCGGGCUUGCCCUGCGGAGCAGUAGCUAGGAACAGAUCCACUUGCAGGUUGCUGUUCCCAGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 39 0.077683953 ubox
1 44 0.959829296 ubox
1 47 0.017787445 ubox
1 86 0.135896780 ubox
2 38 0.077387367 ubox
2 41 0.015957001 ubox
2 43 0.960519157 ubox
2 46 0.018411540 ubox
2 85 0.136192009 ubox
3 40 0.013593227 ubox
3 41 0.279727191 ubox
3 42 0.916267051 ubox
3 45 0.016093188 ubox
3 46 0.005436534 ubox
3 84 0.116456102 ubox
3 85 0.008778137 ubox
4 38 0.014456802 ubox
4 40 0.603575793 ubox
4 41 0.735737976 ubox
4 42 0.008085966 ubox
4 45 0.009087917 ubox
4 84 0.031744072 ubox
5 37 0.044274209 ubox
5 39 0.822790092 ubox
5 44 0.011071065 ubox
5 83 0.042947535 ubox
5 86 0.012523498 ubox
6 38 0.796580316 ubox
6 40 0.014714889 ubox
6 43 0.011016136 ubox
6 85 0.011893058 ubox
7 35 0.003829993 ubox
7 36 0.989024460 ubox
7 37 0.129893539 ubox
7 39 0.005831620 ubox
8 35 0.994286997 ubox
8 36 0.106505443 ubox
9 34 0.997148651 ubox
9 35 0.075345125 ubox
10 33 0.999960481 ubox
11 32 0.996678289 ubox
12 31 0.998886860 ubox
13 30 0.999987394 ubox
14 29 0.999994397 ubox
15 28 0.999991924 ubox
16 27 0.999897743 ubox
17 26 0.991946454 ubox
19 26 0.121005807 ubox
20 25 0.132595193 ubox
36 46 0.006959881 ubox
36 85 0.055890551 ubox
37 45 0.016050893 ubox
37 48 0.018232527 ubox
37 84 0.165083134 ubox
38 44 0.017195856 ubox
38 47 0.019502331 ubox
38 83 0.184523672 ubox
38 86 0.086701119 ubox
39 43 0.017073341 ubox
39 46 0.019581903 ubox
39 85 0.086616131 ubox
40 82 0.271384269 ubox
40 83 0.023327628 ubox
41 81 0.272505261 ubox
41 82 0.016658313 ubox
42 51 0.009758422 ubox
42 80 0.272855534 ubox
43 50 0.010075769 ubox
43 79 0.272893583 ubox
44 49 0.010068767 ubox
44 78 0.273022719 ubox
45 77 0.272960697 ubox
46 76 0.273023360 ubox
46 86 0.007509783 ubox
47 75 0.272949519 ubox
47 85 0.005916574 ubox
48 74 0.272477577 ubox
49 69 0.028460982 ubox
49 73 0.271274925 ubox
49 86 0.959187597 ubox
50 68 0.028574978 ubox
50 71 0.016630349 ubox
50 72 0.270892245 ubox
50 85 0.961437498 ubox
51 68 0.048036071 ubox
51 70 0.021690246 ubox
51 71 0.257028210 ubox
51 84 0.943306868 ubox
52 66 0.097005339 ubox
52 67 0.091581472 ubox
53 62 0.007232957 ubox
53 63 0.201823199 ubox
53 65 0.089441737 ubox
53 66 0.081024325 ubox
53 67 0.012786002 ubox
53 82 0.960394481 ubox
53 83 0.041232172 ubox
54 61 0.005116055 ubox
54 62 0.203512739 ubox
54 65 0.080807749 ubox
54 66 0.010605331 ubox
54 67 0.031997028 ubox
54 81 0.961547813 ubox
54 82 0.029289829 ubox
55 61 0.195199094 ubox
55 66 0.030592569 ubox
55 67 0.044212062 ubox
55 80 0.961654830 ubox
56 66 0.037017388 ubox
56 79 0.961529991 ubox
57 68 0.087376284 ubox
57 78 0.961963168 ubox
58 66 0.044869597 ubox
58 67 0.086002491 ubox
58 77 0.960961101 ubox
59 65 0.049650768 ubox
59 66 0.073860505 ubox
59 67 0.009855363 ubox
59 74 0.092386211 ubox
59 76 0.951837796 ubox
60 66 0.010176610 ubox
60 73 0.268077357 ubox
61 72 0.268347532 ubox
62 71 0.271394317 ubox
62 72 0.736152122 ubox
63 71 0.739002662 ubox
63 75 0.153333135 ubox
64 73 0.456306698 ubox
64 74 0.111798102 ubox
65 71 0.241473106 ubox
65 72 0.478836513 ubox
66 70 0.218910108 ubox
66 71 0.442853210 ubox
66 72 0.020285534 ubox
67 71 0.020902755 ubox
68 76 0.027823417 ubox
68 79 0.003556604 ubox
69 75 0.031270544 ubox
69 78 0.003980052 ubox
70 74 0.025351017 ubox
70 77 0.004289258 ubox
71 76 0.004556667 ubox
1 44 0.9500000 lbox
2 43 0.9500000 lbox
3 42 0.9500000 lbox
4 41 0.9500000 lbox
5 39 0.9500000 lbox
6 38 0.9500000 lbox
7 36 0.9500000 lbox
8 35 0.9500000 lbox
9 34 0.9500000 lbox
10 33 0.9500000 lbox
11 32 0.9500000 lbox
12 31 0.9500000 lbox
13 30 0.9500000 lbox
14 29 0.9500000 lbox
15 28 0.9500000 lbox
16 27 0.9500000 lbox
17 26 0.9500000 lbox
49 86 0.9500000 lbox
50 85 0.9500000 lbox
51 84 0.9500000 lbox
53 82 0.9500000 lbox
54 81 0.9500000 lbox
55 80 0.9500000 lbox
56 79 0.9500000 lbox
57 78 0.9500000 lbox
58 77 0.9500000 lbox
59 76 0.9500000 lbox
62 72 0.9500000 lbox
63 71 0.9500000 lbox
showpage
end
%%EOF
