%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGUCAGUGGCCUUCCGGCCGGAAGUCCGCAGCCUCCCGAGCCGCUGAUUGGCUUUCAGGCUGGCGCCUGUCUCGGCCCCCGCGCCAGUUUUGGGCUGGUUGGCGCGGAAUCGGGAGAUUCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[53.98579025 217.60125732]
[53.12449265 226.24148560]
[50.21770096 234.40669250]
[45.44292068 241.62100220]
[39.08628082 247.46592712]
[31.52538872 251.60466003]
[23.20691872 253.80136108]
[14.62021065 253.93472290]
[6.26849079 252.00456238]
[-1.36061823 248.13139343]
[-12.09460258 258.60906982]
[-22.82858658 269.08673096]
[-33.56257248 279.56442261]
[-44.29655457 290.04208374]
[-48.20872116 305.96774292]
[-64.03017426 310.28210449]
[-75.48516846 298.54687500]
[-70.78977966 282.83428955]
[-54.77422714 279.30810547]
[-44.04024124 268.83041382]
[-33.30625916 258.35275269]
[-22.57227325 247.87509155]
[-11.83828831 237.39741516]
[-17.32464790 216.10667419]
[-9.14272881 195.56787109]
[9.68759441 183.75157166]
[31.98443413 185.33483887]
[40.50540543 172.99008179]
[49.02637863 160.64532471]
[57.54734802 148.30056763]
[54.61827469 133.74185181]
[63.08389664 121.10112762]
[78.37427521 118.12755585]
[86.89524078 105.78279877]
[88.21162415 91.86307526]
[100.76000214 85.69622803]
[109.28096771 73.35147095]
[117.80194092 61.00671387]
[126.32291412 48.66195679]
[134.84388733 36.31719971]
[143.36485291 23.97244072]
[151.88581848 11.62768364]
[152.89527893 -6.71167994]
[168.94604492 -13.69887447]
[177.16622925 -26.24592590]
[185.38641357 -38.79297638]
[193.60659790 -51.34003067]
[193.73095703 -71.43093109]
[211.19813538 -79.58473206]
[218.80252075 -92.51427460]
[226.40692139 -105.44382477]
[234.01132202 -118.37336731]
[241.61572266 -131.30291748]
[249.22012329 -144.23245239]
[256.82452393 -157.16200256]
[264.42892456 -170.09155273]
[272.03332520 -183.02108765]
[269.55761719 -195.74687195]
[276.23895264 -206.38488770]
[287.99966431 -209.47540283]
[295.91424561 -222.21742249]
[303.82885742 -234.95944214]
[311.74346924 -247.70146179]
[319.65805054 -260.44348145]
[327.57266235 -273.18551636]
[335.48727417 -285.92752075]
[343.40188599 -298.66955566]
[351.31646729 -311.41156006]
[359.23107910 -324.15356445]
[350.34225464 -336.48471069]
[346.85382080 -351.27996826]
[349.29776001 -366.28314209]
[357.30139160 -379.20639038]
[369.64422607 -388.07901001]
[384.44403076 -391.54797363]
[399.44400024 -389.08428955]
[412.35671997 -381.06365967]
[421.21307373 -368.70916748]
[424.66256714 -353.90481567]
[422.17913818 -338.90811157]
[414.14154053 -326.00595093]
[401.77542114 -317.16586304]
[386.96652222 -313.73583984]
[371.97311401 -316.23898315]
[364.05850220 -303.49694824]
[356.14389038 -290.75494385]
[348.22927856 -278.01290894]
[340.31469727 -265.27090454]
[332.40008545 -252.52888489]
[324.48547363 -239.78686523]
[316.57086182 -227.04484558]
[308.65628052 -214.30282593]
[300.74166870 -201.56080627]
[301.16897583 -184.06036377]
[284.96286011 -175.41670227]
[277.35845947 -162.48715210]
[269.75405884 -149.55760193]
[262.14965820 -136.62806702]
[254.54525757 -123.69851685]
[246.94087219 -110.76896667]
[239.33647156 -97.83942413]
[231.73207092 -84.90988159]
[224.12767029 -71.98033142]
[227.59736633 -62.23777008]
[225.02478027 -51.99301529]
[217.03700256 -44.74848557]
[206.15365601 -43.11984253]
[197.93347168 -30.57279015]
[189.71327209 -18.02573776]
[181.49308777 -5.47868633]
[183.64633179 6.48912859]
[176.81451416 17.03113556]
[164.23059082 20.14865494]
[155.70960999 32.49341202]
[147.18864441 44.83816910]
[138.66766357 57.18292999]
[130.14669800 69.52768707]
[121.62572479 81.87244415]
[113.10475922 94.21720123]
[111.78837585 108.13692474]
[99.23999786 114.30377197]
[90.71903229 126.64852905]
[93.36073303 141.99972534]
[84.54340363 154.39767456]
[69.89210510 156.82153320]
[61.37113571 169.16629028]
[52.85016251 181.51104736]
[44.32919312 193.85580444]
[49.46295547 200.91767883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[27 128]
[28 127]
[29 126]
[30 125]
[33 122]
[34 121]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[42 113]
[44 110]
[45 109]
[46 108]
[47 107]
[49 103]
[50 102]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[57 95]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
