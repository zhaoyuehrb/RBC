%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGCAGUCUCCCCAGGUCCGCCCAGCAGCCGCGCUUCAGCCAGAAUACUGGGAUCUUCAGUGGCAGGAGGAGUAAUCAGAAGACGGAG\
) } def
/len { sequence length } bind def

/coor [
[81.16191864 288.83273315]
[68.34287262 277.73730469]
[75.45601654 262.34771729]
[76.47965240 247.38267517]
[77.50329590 232.41764832]
[69.96234131 225.14736938]
[67.73429871 214.68489075]
[71.82501984 204.56077576]
[81.06432343 198.33427429]
[83.10682678 183.47398376]
[85.14932251 168.61369324]
[86.93782043 153.72068787]
[88.47177887 138.79933167]
[74.56524658 131.48590088]
[64.49154663 119.42775726]
[59.76870728 104.44200134]
[61.10843277 88.78687286]
[68.30883026 74.82147217]
[80.28485870 64.65029907]
[95.23181915 59.80606079]
[96.25545502 44.84103012]
[97.27909088 29.87599754]
[90.50157928 15.57998562]
[99.08938599 3.41039562]
[100.11302185 -11.55463600]
[93.17958832 -17.00391960]
[89.12814331 -24.72895432]
[88.59918976 -33.34011459]
[91.60733795 -41.32401657]
[97.55240631 -47.30949402]
[105.33733368 -50.30298996]
[108.38917542 -64.98925018]
[111.44100952 -79.67551422]
[114.49285126 -94.36177826]
[117.54469299 -109.04803467]
[104.02464294 -117.28939056]
[94.13114929 -129.61772156]
[89.03018951 -144.55116272]
[89.31304169 -160.30258179]
[94.92784882 -174.99348450]
[105.18794250 -186.87800598]
[118.85578918 -194.55039978]
[134.29220581 -197.11129761]
[136.84086609 -211.89318848]
[139.38952637 -226.67509460]
[141.93817139 -241.45698547]
[135.76625061 -256.65039062]
[146.05030823 -269.42419434]
[162.21101379 -266.63778687]
[167.62359619 -251.15760803]
[156.72006226 -238.90832520]
[154.17141724 -224.12643433]
[151.62275696 -209.34454346]
[149.07409668 -194.56265259]
[161.65437317 -187.84440613]
[171.53752136 -177.53242493]
[177.73439026 -164.63940430]
[179.61868286 -150.43734741]
[176.99035645 -136.33203125]
[170.09671021 -123.72388458]
[159.60919189 -113.86890411]
[146.55801392 -107.75360107]
[132.23095703 -105.99619293]
[129.17910767 -91.30993652]
[126.12727356 -76.62367249]
[123.07543182 -61.93741226]
[120.02359009 -47.25115204]
[129.22338867 -27.75644684]
[115.07805634 -10.53100014]
[114.05441284 4.43403196]
[120.90513611 17.65964508]
[112.24411774 30.89963531]
[111.22048187 45.86466599]
[110.19684601 60.82969666]
[123.02251434 66.70957947]
[133.05067444 76.63462067]
[139.06282043 89.39882660]
[140.32836914 103.45119476]
[136.69357300 117.08420563]
[128.60008240 128.64128113]
[117.03136444 136.71812439]
[103.39314270 140.33329773]
[101.85917664 155.25465393]
[104.12558746 164.32632446]
[100.00961304 170.65618896]
[97.96711731 185.51647949]
[95.92461395 200.37677002]
[104.49789429 218.46430969]
[92.46832275 233.44128418]
[91.44468689 248.40631104]
[90.42105103 263.37133789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[9 87]
[10 86]
[11 85]
[12 83]
[13 82]
[20 74]
[21 73]
[22 72]
[24 70]
[25 69]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
