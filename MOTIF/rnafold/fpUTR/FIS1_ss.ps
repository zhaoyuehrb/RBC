%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUGGUUCUCCGCCCCUGCCACUGGGCCAUGGAGACUGUGGCACAGUAGACUGUAGUGUGAGGCUCGCGGGGGCAGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[16.46336937 223.67312622]
[13.40660381 225.32455444]
[10.39324570 225.62159729]
[0.89043689 237.22749329]
[-8.61237144 248.83337402]
[-4.54738522 263.80853271]
[-10.09237862 278.30105591]
[-23.11518860 286.73822021]
[-38.60828018 285.87582397]
[-50.61424255 276.04544067]
[-54.51653671 261.02703857]
[-48.81465530 246.59555054]
[-35.70108414 238.30014038]
[-20.21825981 239.33056641]
[-10.71545029 227.72468567]
[-1.21264195 216.11878967]
[7.42794037 203.85746765]
[15.16124821 191.00460815]
[22.89455605 178.15174866]
[22.82638931 163.25729370]
[36.57088089 155.42150879]
[44.30419159 142.56864929]
[52.03749847 129.71580505]
[59.77080536 116.86293793]
[67.50411224 104.01008606]
[69.12590027 89.09801483]
[64.33637238 74.88321686]
[59.54685211 60.66841888]
[54.75733185 46.45362091]
[43.01863861 35.84637833]
[46.28707504 21.31480598]
[41.49755478 7.10000753]
[36.70803070 -7.11478996]
[31.91850853 -21.32958794]
[27.12898445 -35.54438400]
[22.33946228 -49.75918198]
[17.54993820 -63.97397995]
[6.76264668 -77.05337524]
[16.34467697 -91.03984070]
[32.43711090 -85.70410919]
[31.76473618 -68.76350403]
[36.55426025 -54.54870605]
[41.34378052 -40.33390808]
[46.13330460 -26.11911011]
[50.92282867 -11.90431309]
[55.71235275 2.31048465]
[60.50187302 16.52528191]
[71.89798737 26.11578941]
[68.97212982 41.66410065]
[73.76165009 55.87889481]
[78.55117035 70.09369659]
[83.34069824 84.30849457]
[93.16294861 79.37484741]
[103.58420563 79.74268341]
[112.06158447 84.78607941]
[116.77936554 92.80176544]
[131.77691650 93.07257843]
[146.77447510 93.34339142]
[161.77203369 93.61420441]
[176.77203369 93.61420441]
[191.76959229 93.34339142]
[206.76713562 93.07257843]
[218.89472961 82.57014465]
[234.64030457 85.64525604]
[241.92521667 99.93894958]
[235.16110229 114.48632812]
[219.53680420 118.12788391]
[207.03794861 108.07012939]
[192.04040527 108.34094238]
[177.04284668 108.61175537]
[170.25611877 111.95796204]
[161.50122070 108.61175537]
[146.50366211 108.34094238]
[131.50610352 108.07012939]
[116.50855255 107.79931641]
[101.00218964 120.54753113]
[80.35697174 111.74339294]
[72.62366486 124.59625244]
[64.89035797 137.44911194]
[57.15704727 150.30197144]
[49.42374039 163.15481567]
[48.93877029 178.96859741]
[35.74741364 185.88505554]
[28.01410484 198.73791504]
[20.28079796 211.59077454]
[20.41618156 216.48017883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[17 85]
[18 84]
[19 83]
[21 81]
[22 80]
[23 79]
[24 78]
[25 77]
[26 52]
[27 51]
[28 50]
[29 49]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[56 75]
[57 74]
[58 73]
[59 72]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
