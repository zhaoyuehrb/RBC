%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGUACGCGCACUUCCGGUCUUUGUGGCUUGCAGCUCGGGGUGGGUGGCUCAUUUCCUGGCCGCUCCUGGGCUUCGCGGAAAGAAGAGAUUACUCACACUCCUUCGCAAGCACAGAACCAGUUGUACUGAGCUUUUUGCUAAGCUGUUUCAGCCAAGA\
) } def
/len { sequence length } bind def

/coor [
[101.90820312 133.42782593]
[94.70640564 135.52166748]
[90.37840271 149.88371277]
[86.05039978 164.24575806]
[81.72239685 178.60780334]
[86.00013733 194.43919373]
[74.23847198 205.86701965]
[58.53678513 201.13531494]
[55.04762650 185.11164856]
[67.36034393 174.27980042]
[71.68835449 159.91775513]
[76.01635742 145.55570984]
[80.34436035 131.19364929]
[73.35603333 122.39012146]
[69.71291351 112.42127228]
[69.42903137 102.43656921]
[72.15341949 93.47608185]
[77.23937988 86.36297607]
[83.84294128 81.62796783]
[77.86692047 67.86979675]
[71.89090729 54.11162567]
[65.56989288 47.44601059]
[65.93541718 40.02622223]
[60.22898865 26.15407181]
[54.52255630 12.28191853]
[48.81612396 -1.59023476]
[43.10969162 -15.46238804]
[37.40325928 -29.33454132]
[31.21350098 -36.12222290]
[31.72373772 -43.53346252]
[26.28906059 -57.51431656]
[20.85438538 -71.49517059]
[15.41970825 -85.47602844]
[9.98503208 -99.45687866]
[-3.95857835 -100.87355042]
[-15.86892891 -108.13452148]
[-23.44335938 -119.76902771]
[-25.24647522 -133.46746826]
[-20.98186874 -146.53974915]
[-11.53906155 -156.44363403]
[-16.69991112 -170.52787781]
[-21.86076164 -184.61210632]
[-27.15877724 -198.64530945]
[-32.59345245 -212.62617493]
[-38.02812958 -226.60702515]
[-43.46280670 -240.58787537]
[-48.89748001 -254.56874084]
[-54.33215714 -268.54959106]
[-59.76683426 -282.53045654]
[-65.20150757 -296.51129150]
[-70.77233124 -310.43847656]
[-76.47875977 -324.31060791]
[-82.18519592 -338.18276978]
[-98.68922424 -349.69982910]
[-95.41690063 -368.72723389]
[-101.66023254 -382.36618042]
[-107.90355682 -396.00512695]
[-114.14688110 -409.64407349]
[-120.39020538 -423.28302002]
[-138.59614563 -434.52337646]
[-135.98043823 -454.96850586]
[-143.01101685 -468.21881104]
[-150.04161072 -481.46914673]
[-157.07218933 -494.71945190]
[-172.40197754 -497.80679321]
[-182.12033081 -510.05783081]
[-181.63853455 -525.68798828]
[-171.18408203 -537.31719971]
[-155.69325256 -539.45446777]
[-142.48033142 -531.09069824]
[-137.78405762 -516.17498779]
[-143.82186890 -501.75003052]
[-136.79129028 -488.49972534]
[-129.76071167 -475.24942017]
[-122.73012543 -461.99908447]
[-113.84461212 -460.79565430]
[-106.41363525 -455.53482056]
[-102.20026398 -447.30825806]
[-102.27594757 -437.92767334]
[-106.75125885 -429.52636719]
[-100.50793457 -415.88742065]
[-94.26460266 -402.24847412]
[-88.02127838 -388.60952759]
[-81.77795410 -374.97058105]
[-71.86193085 -372.25952148]
[-64.95079803 -364.35449219]
[-63.52973557 -353.72872925]
[-68.31304169 -343.88919067]
[-62.60660934 -330.01705933]
[-56.90017700 -316.14489746]
[-51.41952515 -311.12997437]
[-51.22065735 -301.94598389]
[-45.78598022 -287.96511841]
[-40.35130310 -273.98425293]
[-34.91662598 -260.00341797]
[-29.48195076 -246.02255249]
[-24.04727554 -232.04170227]
[-18.61259842 -218.06085205]
[-13.17792320 -204.07998657]
[-7.79616356 -198.95910645]
[-7.77652884 -189.77294922]
[-2.61567831 -175.68872070]
[2.54517198 -161.60449219]
[18.50594521 -159.23478699]
[31.17580795 -149.09231567]
[37.04922485 -133.86245728]
[34.44042206 -117.65417480]
[23.96588707 -104.89155579]
[29.40056229 -90.91070557]
[34.83523941 -76.92984772]
[40.26991653 -62.94899368]
[45.70458984 -48.96813965]
[51.27540970 -35.04097366]
[56.98184204 -21.16881943]
[62.68827438 -7.29666710]
[68.39470673 6.57548571]
[74.10114288 20.44763947]
[79.80757141 34.31978989]
[85.64907837 48.13560867]
[91.62509155 61.89377975]
[97.60111237 75.65194702]
[125.08094025 82.35156250]
[133.31637573 115.79265594]
[144.67001343 125.59544373]
[156.02366638 135.39822388]
[167.37731934 145.20101929]
[180.35847473 139.91697693]
[194.28279114 140.74855042]
[206.42684937 147.47576904]
[214.44018555 158.73120117]
[216.80007935 172.27751160]
[213.10073853 185.45205688]
[224.26095581 195.47450256]
[235.42117310 205.49694824]
[246.58139038 215.51939392]
[257.74160767 225.54185486]
[273.50772095 224.44401550]
[285.37734985 234.87895203]
[286.30841064 250.65579224]
[275.74856567 262.41442871]
[259.96276855 263.17864990]
[248.31645203 252.49507141]
[247.71916199 236.70207214]
[236.55894470 226.67962646]
[225.39872742 216.65716553]
[214.23851013 206.63471985]
[203.07829285 196.61227417]
[187.86857605 201.99989319]
[171.92276001 198.97892761]
[159.59613037 188.27847290]
[154.30372620 172.73805237]
[157.57453918 156.55465698]
[146.22088623 146.75187683]
[134.86723328 136.94909668]
[123.51358032 127.14630890]
[116.31179047 129.24014282]
[121.57585144 143.28613281]
[129.17939758 156.21617126]
[119.73144531 167.86676025]
[105.50974274 163.09779358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[19 121]
[20 120]
[21 119]
[23 118]
[24 117]
[25 116]
[26 115]
[27 114]
[28 113]
[30 112]
[31 111]
[32 110]
[33 109]
[34 108]
[40 103]
[41 102]
[42 101]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 90]
[52 89]
[53 88]
[55 84]
[56 83]
[57 82]
[58 81]
[59 80]
[61 75]
[62 74]
[63 73]
[64 72]
[123 155]
[124 154]
[125 153]
[126 152]
[132 147]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
