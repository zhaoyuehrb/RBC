%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGCUUUCUUUGCCCGCCGUUCGCCAAACGAAGUCGUGGAGGUGGCGAAACGAGGAGGAGAUAACGCGGCCUUGGGCUCUGGUGUCUCCCAGUCUGCUAAAGCCCUAAGGCCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[119.21508789 170.31155396]
[116.84333801 155.50024414]
[121.47728729 141.23396301]
[132.10000610 130.64350891]
[146.37934875 126.05301666]
[132.39634705 120.62388611]
[118.41333771 115.19475555]
[106.02797699 123.09967804]
[91.35926819 122.25464630]
[79.96359253 112.97975922]
[76.15753174 98.78825378]
[62.17452240 93.35912323]
[48.19151306 87.92999268]
[34.20850372 82.50086212]
[20.22549629 77.07173157]
[4.56051207 79.28958130]
[-4.50340414 67.47032928]
[-18.48641205 62.04119873]
[-32.53761292 56.79108047]
[-46.65471268 51.72082520]
[-56.34284973 56.97972870]
[-67.09997559 55.99192047]
[-75.32450104 49.33445740]
[-78.39971924 39.44108582]
[-92.23951721 33.65662003]
[-106.07930756 27.87215424]
[-119.91910553 22.08768654]
[-133.75889587 16.30322075]
[-147.59869385 10.51875305]
[-161.43849182 4.73428631]
[-183.27882385 9.46609688]
[-196.21049500 -7.83507204]
[-210.56806946 -12.17788410]
[-224.92564392 -16.52069473]
[-240.76142883 -12.25927448]
[-252.17712402 -24.03272057]
[-247.42922974 -39.72951889]
[-231.40197754 -43.20215225]
[-220.58282471 -30.87827110]
[-206.22525024 -26.53545952]
[-191.86767578 -22.19264793]
[-185.67716980 -27.46755219]
[-177.79486084 -29.82722092]
[-169.53593445 -28.79817963]
[-162.31079102 -24.47916031]
[-157.38417053 -17.53718567]
[-155.65402222 -9.10550880]
[-141.81422424 -3.32104230]
[-127.97443390 2.46342444]
[-114.13463593 8.24789143]
[-100.29484558 14.03235817]
[-86.45504761 19.81682587]
[-72.61524963 25.60129166]
[-53.76034546 21.63501358]
[-41.58446121 37.60372543]
[-27.46735954 42.67398071]
[-20.02228737 41.96551895]
[-13.05728245 48.05819321]
[0.92572683 53.48732376]
[15.59055138 50.88114166]
[25.65462685 63.08871841]
[39.63763428 68.51785278]
[53.62064362 73.94698334]
[67.60365295 79.37611389]
[81.58666229 84.80524445]
[93.97202301 76.90032196]
[108.64073181 77.74535370]
[120.03640747 87.02024078]
[123.84246826 101.21174622]
[137.82548523 106.64087677]
[151.80848694 112.07000732]
[166.41392517 115.48781586]
[181.35401917 116.82695007]
[196.29412842 118.16609192]
[211.23423767 119.50522614]
[226.17433167 120.84436798]
[241.11444092 122.18350220]
[256.07043457 123.33174133]
[271.03985596 124.28889465]
[286.00927734 125.24604797]
[300.97872925 126.20320129]
[315.94815063 127.16034698]
[330.93713379 126.58580780]
[345.78936768 124.48556519]
[360.64163208 122.38532257]
[375.49386597 120.28507996]
[384.79287720 107.50605011]
[400.41720581 105.12786865]
[413.09722900 114.56147766]
[415.31008911 130.21008301]
[405.74291992 142.78964233]
[390.07180786 144.83692932]
[377.59408569 135.13732910]
[362.74185181 137.23756409]
[347.88961792 139.33779907]
[333.03738403 141.43804932]
[345.04705811 150.42514038]
[349.66809082 164.69560242]
[345.20596313 179.01654053]
[333.29693604 188.13658142]
[318.30795288 188.71144104]
[305.73538208 180.53034973]
[300.18951416 166.59323120]
[303.70394897 152.01074219]
[314.99099731 142.12977600]
[300.02157593 141.17262268]
[285.05212402 140.21548462]
[270.08270264 139.25833130]
[255.11326599 138.30117798]
[248.15655518 141.04618835]
[239.77529907 137.12361145]
[224.83518982 135.78446960]
[209.89509583 134.44532776]
[194.95498657 133.10618591]
[180.01487732 131.76705933]
[165.07478333 130.42791748]
[175.83505249 140.87858582]
[180.65515137 155.08303833]
[178.47726440 169.92410278]
[169.77935791 182.14483643]
[156.47019958 189.06338501]
[141.47052002 189.16145325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[17 59]
[18 58]
[19 56]
[20 55]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[32 41]
[33 40]
[34 39]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
