%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGUCCCUCCGCAGCGGGUUCUCAGUUGCUCGCUGGGCAGACCCAGGUCGCGCUCCCACUGCCGAGCCCGCGAG\
) } def
/len { sequence length } bind def

/coor [
[83.04796600 123.09394073]
[73.78638458 111.55629730]
[71.51638794 96.93640137]
[57.54252625 91.48378754]
[43.56865692 86.03116608]
[29.59479141 80.57854462]
[17.79922867 87.43031311]
[4.41440630 86.16152954]
[-5.58707952 77.47291565]
[-8.62309742 64.77882385]
[-22.35969734 58.75339508]
[-31.77005959 58.12199020]
[-36.53135300 52.18462372]
[-50.00721741 45.59667206]
[-63.48308182 39.00872421]
[-76.95894623 32.42077637]
[-90.43481445 25.83282661]
[-103.91067505 19.24487877]
[-117.38654327 12.65692997]
[-130.86241150 6.06898117]
[-144.50622559 13.45990467]
[-159.88412476 11.38628101]
[-171.08297729 0.64545977]
[-173.79661560 -14.63249302]
[-166.98156738 -28.57289314]
[-153.25836182 -35.81537247]
[-137.90386963 -33.57505035]
[-126.82218933 -22.71337509]
[-124.27445984 -7.40688372]
[-110.79859161 -0.81893492]
[-97.32273102 5.76901388]
[-83.84686279 12.35696316]
[-70.37100220 18.94491196]
[-56.89513397 25.53285980]
[-43.41926956 32.12080765]
[-29.94340515 38.70875931]
[-16.33426666 45.01679611]
[-2.59766650 51.04222870]
[12.63879490 44.24011230]
[28.44285965 50.55701065]
[35.04741287 66.60467529]
[49.02127838 72.05729675]
[62.99514389 77.50991821]
[76.96900940 82.96253967]
[88.54087830 73.74375916]
[103.16908264 71.52793121]
[116.95203400 76.90605927]
[126.21361542 88.44370270]
[128.48361206 103.06359863]
[142.45747375 108.51621246]
[156.43133545 113.96883392]
[170.40521240 119.42145538]
[184.59246826 124.29194641]
[198.96887207 128.57199097]
[213.34529114 132.85203552]
[227.72171021 137.13208008]
[239.96293640 127.59626007]
[255.47239685 127.11048126]
[268.28640747 135.86154175]
[273.47769165 150.48446655]
[269.05010986 165.35646057]
[256.70614624 174.75892639]
[241.19232178 175.07643127]
[228.47401428 166.18687439]
[223.44166565 151.50848389]
[209.06524658 147.22843933]
[194.68884277 142.94839478]
[180.31242371 138.66836548]
[175.52923584 140.26808167]
[169.69229126 138.66349792]
[164.95259094 133.39532471]
[150.97872925 127.94270325]
[137.00485229 122.49008179]
[123.03099060 117.03746033]
[111.45912170 126.25624084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 44]
[4 43]
[5 42]
[6 41]
[10 38]
[11 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[49 74]
[50 73]
[51 72]
[52 71]
[53 68]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
