%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCUUCCCCCUCCCGCGCGCCCGCCCGCCGCCUGCCGCCGCCGCCGCCGCCGCCGGAGCUCUGUAGU\
) } def
/len { sequence length } bind def

/coor [
[75.33473969 355.45797729]
[60.62350845 352.06942749]
[47.37258148 344.83648682]
[36.56526566 334.29586792]
[29.00353622 321.22979736]
[25.24852180 306.60778809]
[25.57887077 291.51498413]
[29.97006989 277.07128906]
[38.09626007 264.34857178]
[49.35442734 254.29092407]
[62.90913773 247.64469910]
[77.75454712 244.90307617]
[79.09913635 229.96347046]
[80.44372559 215.02384949]
[81.78831482 200.08422852]
[75.22303009 186.71463013]
[84.16621399 173.66358948]
[85.51080322 158.72396851]
[86.85540009 143.78434753]
[84.23168182 136.60845947]
[88.61022949 128.20976257]
[90.62373352 113.34551239]
[84.06453705 103.47536469]
[85.91841888 91.77040100]
[95.20662689 84.41023254]
[97.88497925 69.65129089]
[91.12275696 58.41825485]
[93.87788391 46.01441956]
[104.08760834 39.15341949]
[107.42542267 24.52950096]
[102.95294189 9.35361671]
[113.32833862 -1.33284426]
[116.66615295 -15.95676327]
[106.35583496 -27.55318832]
[104.86433411 -42.99841690]
[112.76515198 -56.35343933]
[127.02027130 -62.48298264]
[142.14830017 -59.03010941]
[152.33221436 -47.32251740]
[153.65606689 -31.86201859]
[145.61083984 -18.59349060]
[131.29006958 -12.61894894]
[127.95225525 2.00496960]
[132.66348267 16.13485336]
[122.04934692 27.86731529]
[118.71153259 42.49123383]
[124.87445068 58.77062988]
[112.64392853 72.32964325]
[109.96557617 87.08858490]
[116.10923004 102.55145264]
[105.48797607 115.35901642]
[103.47447968 130.22326660]
[101.79501343 145.12893677]
[100.45042419 160.06855774]
[99.10583496 175.00817871]
[105.57494354 189.44635010]
[96.72792816 201.42881775]
[95.38333893 216.36843872]
[94.03874969 231.30805969]
[92.69416046 246.24766541]
[106.81146240 251.59597778]
[118.96161652 260.55569458]
[128.24299622 272.46191406]
[133.96685791 286.43118286]
[135.70848083 301.42681885]
[133.33859253 316.33609009]
[127.03306580 330.05261230]
[117.25981140 341.55853271]
[104.74407196 350.00003052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 60]
[13 59]
[14 58]
[15 57]
[17 55]
[18 54]
[19 53]
[21 52]
[22 51]
[25 49]
[26 48]
[29 46]
[30 45]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
