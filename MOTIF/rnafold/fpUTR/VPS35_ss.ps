%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAGAGAGGGCGGGGCUUGGAGGGGCCGCAGCGUCACAUGACCGCGGGAGGCUACGCGCGGGGCGGGUGCUGCUUGCUGCAGGCUCUGGGGAGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[25.83479691 323.88296509]
[19.87757874 337.64926147]
[13.92036152 351.41558838]
[19.97060966 366.01593018]
[13.84766960 380.58593750]
[-0.81582546 386.48147583]
[-15.32028484 380.20486450]
[-21.06047058 365.47982788]
[-14.63083076 351.04254150]
[0.15404174 345.45837402]
[6.11125994 331.69204712]
[12.06847858 317.92572021]
[17.80872917 304.06753540]
[23.33059883 290.12088013]
[28.63272095 276.08923340]
[33.71379089 261.97601318]
[38.79485703 247.86280823]
[43.87592697 233.74960327]
[48.95699692 219.63638306]
[40.44612122 207.44200134]
[40.75138092 192.39637756]
[49.96524429 180.27374268]
[64.72110748 175.84988403]
[69.80217743 161.73666382]
[74.88324738 147.62345886]
[79.96431732 133.51023865]
[85.04538727 119.39703369]
[90.12645721 105.28382111]
[94.98521423 91.09253693]
[99.62046814 76.82669067]
[104.25572205 62.56084442]
[108.89097595 48.29499435]
[113.52623749 34.02914810]
[118.16149139 19.76329994]
[113.86060333 1.94503021]
[127.15914154 -9.38629150]
[131.34400940 -23.79069710]
[135.30210876 -38.25905991]
[139.03245544 -52.78780365]
[142.76280212 -67.31655121]
[131.56715393 -83.78981781]
[135.74650574 -102.95948029]
[152.27407837 -112.96904755]
[154.62059021 -127.78437042]
[156.96710205 -142.59970093]
[159.31362915 -157.41502380]
[161.66014099 -172.23034668]
[149.67370605 -181.83352661]
[144.10969543 -196.14915466]
[146.46479797 -211.32641602]
[156.10549927 -223.28268433]
[170.43849182 -228.80180359]
[185.60829163 -226.39913940]
[197.53428650 -216.72100830]
[203.00845337 -202.37077332]
[200.55825806 -187.20858765]
[190.84278870 -175.31297302]
[176.47546387 -169.88383484]
[174.12895203 -155.06849670]
[171.78244019 -140.25317383]
[169.43591309 -125.43785095]
[167.08940125 -110.62252808]
[175.36401367 -104.03844452]
[180.10891724 -94.49690247]
[180.36952209 -83.76206970]
[176.02758789 -73.85173798]
[167.83651733 -66.65802002]
[157.29154968 -63.58620453]
[153.56120300 -49.05745697]
[149.83085632 -34.52870941]
[151.24172974 -27.13452530]
[145.74841309 -19.60583115]
[141.56355286 -5.20142508]
[147.13768005 5.66129971]
[143.63331604 17.77734947]
[132.42733765 24.39855576]
[127.79208374 38.66440201]
[123.15682983 52.93025208]
[118.52157593 67.19609833]
[113.88631439 81.46194458]
[109.25106049 95.72779083]
[109.95122528 103.91644287]
[104.23966217 110.36489105]
[99.15859985 124.47809601]
[94.07752991 138.59130859]
[88.99645996 152.70452881]
[83.91539001 166.81773376]
[78.83432007 180.93093872]
[87.38403320 193.74534607]
[86.75617981 208.95912170]
[77.40093994 220.74655151]
[63.07020950 224.71745300]
[57.98913956 238.83067322]
[52.90806961 252.94387817]
[47.82699966 267.05709839]
[42.74593353 281.17028809]
[42.76486588 290.49005127]
[37.27724457 295.64276123]
[31.75537682 309.58941650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[13 99]
[14 98]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[36 73]
[37 72]
[38 70]
[39 69]
[40 68]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
