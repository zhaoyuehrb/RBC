%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUUGCCAUGGGGACGGAGCUUGGGUGGCAACCAGAACUAGGGAGCUGGUGGAGAAGGUGGCGGCCGCUGGAAGGAGGCCCGGGAGGUGGCUGAGGGGUCCAGGCGGCGGGACGACUCUGGCCUUUUGAAGACCGGGAGGAAACUCUACAGAGAAGA\
) } def
/len { sequence length } bind def

/coor [
[86.36709595 164.80758667]
[90.02185822 150.25962830]
[82.53089142 149.89163208]
[72.34887695 160.90646362]
[62.16687012 171.92129517]
[51.98485947 182.93614197]
[41.80284500 193.95097351]
[31.62083626 204.96582031]
[21.43882370 215.98065186]
[11.25681305 226.99548340]
[1.07480216 238.01033020]
[-2.54476190 256.04077148]
[-19.45799065 260.63800049]
[-29.42177773 271.85061646]
[-39.38556290 283.06323242]
[-38.20507050 298.82339478]
[-48.57762146 310.74755859]
[-64.34935760 311.76135254]
[-76.16319275 301.26330566]
[-77.01019287 285.48175049]
[-66.38784027 273.77954102]
[-50.59819031 273.09945679]
[-40.63440323 261.88684082]
[-30.67061615 250.67420959]
[-31.06143570 238.55148315]
[-22.80702019 229.12393188]
[-9.94003582 227.82832336]
[0.24197567 216.81347656]
[10.42398643 205.79864502]
[20.60599709 194.78379822]
[30.78800964 183.76896667]
[40.97002029 172.75413513]
[51.15203094 161.73928833]
[61.33404160 150.72445679]
[71.51605225 139.70960999]
[60.62642670 129.01063538]
[53.56221390 115.46403503]
[51.01871109 100.38735962]
[53.25114822 85.24953461]
[38.59965897 82.03489685]
[23.94816971 78.82025909]
[9.29668236 75.60562134]
[-5.35480595 72.39098358]
[-20.81181335 77.86939240]
[-33.10739136 67.01808929]
[-29.59290314 50.99996185]
[-13.88375378 46.29308701]
[-2.14016867 57.73949432]
[12.51131916 60.95413208]
[27.16280746 64.16876984]
[41.81429672 67.38340759]
[56.46578598 70.59804535]
[62.26336288 65.84009552]
[50.94665146 55.99468613]
[39.62994003 46.14928055]
[26.01155281 39.86123276]
[21.15797043 25.66817856]
[28.07433510 12.35788536]
[42.47830963 8.17154598]
[55.45154190 15.70117283]
[58.96162033 30.28417969]
[66.41007233 43.30418777]
[73.85852051 56.32419586]
[79.65609741 51.56624603]
[79.36159515 36.56913757]
[79.06708527 21.57202721]
[78.77258301 6.57491875]
[78.47807312 -8.42218971]
[78.18357086 -23.41929817]
[77.88906860 -38.41640854]
[77.59455872 -53.41351700]
[64.25070190 -60.88938522]
[56.49164581 -73.95436859]
[56.31509399 -89.04858398]
[63.66832352 -102.11709595]
[76.48925018 -109.69927216]
[76.19474792 -124.69638062]
[67.25933838 -138.44740295]
[74.94047546 -152.93643188]
[91.33645630 -153.25840759]
[99.58051300 -139.08210754]
[91.19185638 -124.99088287]
[91.48635864 -109.99377441]
[104.59507751 -102.92079163]
[112.45570374 -90.15104675]
[112.87187958 -75.06153870]
[105.63174438 -61.70200348]
[92.59166718 -53.70801926]
[92.88617706 -38.71091080]
[93.18067932 -23.71380424]
[93.47518158 -8.71669483]
[93.76969147 6.28041363]
[94.06419373 21.27752304]
[94.35870361 36.27463150]
[94.65320587 51.27173996]
[111.19135284 54.32054901]
[125.05178070 62.56984329]
[134.74926758 74.58800507]
[139.43911743 88.57929993]
[154.36688232 87.10903931]
[169.29466248 85.63878632]
[184.22242737 84.16852570]
[199.11845398 82.40546417]
[213.97698975 80.35028076]
[228.83554077 78.29509735]
[243.69407654 76.23990631]
[256.30398560 66.68478394]
[269.97134399 72.60532379]
[284.82989502 70.55014038]
[299.68841553 68.49494934]
[312.29833984 58.93982697]
[325.96569824 64.86036682]
[340.82424927 62.80517960]
[355.68276978 60.74999237]
[368.28823853 50.26026154]
[383.57968140 56.18515396]
[385.82653809 72.42964935]
[372.71749878 82.28279877]
[357.73797607 75.60853577]
[342.87942505 77.66371918]
[328.02087402 79.71890259]
[316.47375488 89.12702942]
[301.74362183 83.35349274]
[286.88507080 85.40867615]
[272.02651978 87.46385956]
[260.47940063 96.87198639]
[245.74926758 91.09844971]
[230.89071655 93.15363312]
[216.03218079 95.20881653]
[201.17364502 97.26400757]
[197.60177612 100.50504303]
[191.94061279 101.50299072]
[185.69268799 99.09629822]
[170.76490784 100.56655121]
[155.83714294 102.03681183]
[140.90937805 103.50706482]
[137.94927979 124.11715698]
[124.45456696 142.31031799]
[133.50790405 154.27012634]
[142.56124878 166.22993469]
[151.61457825 178.18974304]
[166.92613220 184.06245422]
[169.22839355 200.29919434]
[156.15301514 210.19699097]
[141.15081787 203.57385254]
[139.65476990 187.24308777]
[130.60144043 175.28327942]
[121.54809570 163.32347107]
[112.49475861 151.36366272]
[105.00379181 150.99565125]
[107.21500397 165.83177185]
[109.42621613 180.66789246]
[118.02460480 192.95886230]
[117.62257385 207.95346069]
[108.37792206 219.76602173]
[93.91938019 223.75984192]
[79.92223358 218.36726379]
[71.88066101 205.70500183]
[72.95114899 190.74325562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[13 24]
[14 23]
[15 22]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[76 83]
[77 82]
[99 136]
[100 135]
[101 134]
[102 133]
[103 130]
[104 129]
[105 128]
[106 127]
[108 125]
[109 124]
[110 123]
[112 121]
[113 120]
[114 119]
[138 149]
[139 148]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
