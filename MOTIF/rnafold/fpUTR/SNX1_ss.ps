%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCUCCGCCCCUCGGAUCCCACGGGGUCCCUUGCGGCCCUCCCACUCCUCGCACCGUUGGAUCGCUUUGCUCACGGCGCUAUCUCUCGAUAAAGUUGUUGUUGCGGCUUCCGCCGCGGGUGGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[99.54215240 307.82073975]
[88.69865417 296.32318115]
[89.24465179 280.52832031]
[100.85621643 269.80697632]
[101.21591187 254.81129456]
[101.57559967 239.81561279]
[101.75545502 224.81669617]
[101.75545502 209.81669617]
[101.75545502 194.81669617]
[101.75545502 179.81669617]
[101.75545502 164.81669617]
[101.75545502 149.81669617]
[89.66951752 147.59228516]
[78.77303314 142.55293274]
[69.69139099 135.14181519]
[62.90684128 125.93280792]
[49.35904312 132.37152100]
[35.81124115 138.81024170]
[22.26344299 145.24896240]
[8.71564293 151.68768311]
[-4.83215714 158.12640381]
[-13.68907261 171.92811584]
[-30.05523300 170.88847351]
[-37.09453583 156.07698059]
[-27.56554794 142.73043823]
[-11.27087688 144.57861328]
[2.27692246 138.13989258]
[15.82472229 131.70117188]
[29.37252235 125.26244354]
[42.92032242 118.82373047]
[56.46812057 112.38500977]
[54.74061584 100.03150177]
[56.45092392 87.67559814]
[61.46913528 76.25583649]
[69.41407013 66.63963318]
[61.24951553 54.05631256]
[52.78556824 41.67238998]
[44.02709579 29.49498558]
[35.26862335 17.31758118]
[19.92351913 14.64072227]
[11.21465397 2.16633558]
[13.86119843 -12.44637775]
[5.10272503 -24.62378120]
[-3.65574789 -36.80118561]
[-17.99499130 -43.48674011]
[-19.14507484 -58.33687592]
[-27.90354729 -70.51428223]
[-43.17761230 -68.90230560]
[-57.20480347 -75.15798187]
[-66.21187592 -87.59857178]
[-67.77596283 -102.87761688]
[-61.47634888 -116.88513184]
[-49.00758743 -125.85315704]
[-33.72371292 -127.36935425]
[-19.73601723 -121.02585602]
[-10.80711460 -108.52904510]
[-9.33883762 -93.24050140]
[-15.72614479 -79.27275085]
[-6.96767139 -67.09535217]
[6.74510813 -61.28080368]
[8.52165508 -45.55965805]
[17.28012848 -33.38225555]
[26.03860092 -21.20485115]
[40.73409653 -19.06522179]
[49.78990555 -6.84037066]
[47.44602585 8.55910873]
[56.20449829 20.73651314]
[64.96297455 32.91391754]
[69.54234314 34.56132507]
[73.09162903 39.15962219]
[73.83283997 45.89175415]
[81.99739838 58.47507858]
[101.06429291 54.75312042]
[119.93511200 59.36744690]
[135.13307190 71.46791840]
[148.18299866 64.07199860]
[161.23291016 56.67608261]
[174.28283691 49.28016663]
[187.33274841 41.88424683]
[191.64683533 26.91673279]
[204.98666382 19.60212135]
[219.22930908 23.80717468]
[232.27923584 16.41125488]
[245.32914734 9.01533794]
[258.37905884 1.61941981]
[266.22097778 -12.78324223]
[282.61953735 -12.92273903]
[290.70532227 1.34443092]
[282.16036987 15.34142685]
[265.77499390 14.66933918]
[252.72506714 22.06525803]
[239.67515564 29.46117592]
[226.62522888 36.85709381]
[222.91523743 51.23664474]
[209.78611755 58.92305756]
[194.72866821 54.93416595]
[181.67875671 62.33008575]
[168.62882996 69.72600555]
[155.57891846 77.12191772]
[142.52899170 84.51783752]
[145.69143677 93.32077789]
[147.01324463 102.76848602]
[146.36398315 112.47252655]
[143.69587708 122.01844025]
[139.04882812 130.98344421]
[151.12033081 139.88729858]
[163.19183350 148.79115295]
[175.26335144 157.69502258]
[187.33485413 166.59887695]
[203.68296814 167.89164734]
[210.49223328 182.81028748]
[200.75785828 196.00779724]
[184.49372864 193.90768433]
[178.43099976 178.67037964]
[166.35949707 169.76652527]
[154.28797913 160.86267090]
[142.21647644 151.95881653]
[130.14495850 143.05496216]
[116.75545502 149.81669617]
[116.75545502 164.81669617]
[116.75545502 179.81669617]
[116.75545502 194.81669617]
[116.75545502 209.81669617]
[116.75545502 224.81669617]
[119.90984344 233.49760437]
[116.57128143 240.17530823]
[116.21159363 255.17098999]
[115.85190582 270.16668701]
[126.93608856 281.43240356]
[126.72417450 297.23526001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 128]
[5 127]
[6 126]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[35 72]
[36 71]
[37 68]
[38 67]
[39 66]
[42 63]
[43 62]
[44 61]
[46 59]
[47 58]
[75 100]
[76 99]
[77 98]
[78 97]
[79 96]
[82 93]
[83 92]
[84 91]
[85 90]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
