%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCGGGUGCGGCUACCCCACCGCUCCCCUGCGACCGCUGCCGCGGUCCCGUGGCUCUUUCCCUGCUCACCUCCCAGGGACGGCAGAGAAGGGCUGGCCCGAGCACCGCCUUCGCGGCGCUGCCGGCGACGGUCGCUACCUUCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[41.92761230 299.34130859]
[40.99198151 284.37051392]
[40.05635452 269.39971924]
[36.87372208 268.65692139]
[33.78496170 267.58895874]
[30.82318878 266.20736694]
[20.84046364 277.40313721]
[10.85773659 288.59887695]
[7.44851351 304.04840088]
[-6.79667807 308.39855957]
[-16.77940369 319.59432983]
[-26.76213074 330.79010010]
[-36.74485779 341.98587036]
[-33.31357193 357.11880493]
[-39.46344757 371.36514282]
[-52.82973099 379.24691772]
[-68.27281189 377.73336792]
[-79.85451508 367.40652466]
[-83.12143707 352.23724365]
[-76.81737518 338.05844116]
[-63.36637878 330.32214355]
[-47.94062424 332.00314331]
[-37.95789719 320.80737305]
[-27.97517014 309.61160278]
[-17.99244308 298.41583252]
[-15.29725266 283.76712036]
[-0.33802935 278.61614990]
[9.64469719 267.42041016]
[19.62742424 256.22463989]
[14.22647190 232.97863770]
[26.67952919 212.36216736]
[50.19503403 206.21348572]
[55.68206406 192.25309753]
[61.16909409 178.29270935]
[66.65612793 164.33232117]
[72.14315796 150.37193298]
[77.63018799 136.41154480]
[83.11722565 122.45114899]
[76.17534637 114.88181305]
[72.41835022 105.32306671]
[72.34847260 95.05274200]
[58.82428360 88.56457520]
[45.30009460 82.07640839]
[31.77590370 75.58824921]
[18.25171280 69.10008240]
[4.72752380 62.61191559]
[-11.57378960 64.40055847]
[-21.05395889 51.01928711]
[-13.96060085 36.23360825]
[2.40924692 35.25375748]
[11.21568871 49.08772659]
[24.73987770 55.57588959]
[38.26406860 62.06405640]
[51.78825760 68.55222321]
[65.31244659 75.04038239]
[78.83663940 81.52854919]
[89.41905975 70.98072052]
[105.16500854 66.71273804]
[105.16500854 51.71273422]
[105.16500854 36.71273422]
[105.16500854 21.71273422]
[105.16500854 6.71273470]
[97.42770386 -7.08743763]
[105.16500854 -19.81470871]
[105.16500854 -34.81470871]
[105.16500854 -49.81470871]
[105.16500854 -64.81471252]
[105.16500854 -79.81471252]
[94.27045441 -90.94783783]
[94.48413086 -106.15996552]
[105.16500854 -116.47764587]
[105.16500854 -131.47764587]
[105.16500854 -146.47764587]
[96.50130463 -160.40145874]
[104.46543121 -174.73689270]
[120.86457825 -174.73689270]
[128.82870483 -160.40145874]
[120.16500854 -146.47764587]
[120.16500854 -131.47764587]
[120.16500854 -116.47764587]
[130.84587097 -106.15996552]
[131.05955505 -90.94783783]
[120.16500854 -79.81471252]
[120.16500854 -64.81471252]
[120.16500854 -49.81470871]
[120.16500854 -34.81470871]
[120.16500854 -19.81470871]
[127.90230560 -7.08743763]
[120.16500854 6.71273470]
[120.16500854 21.71273422]
[120.16500854 36.71273422]
[120.16500854 51.71273422]
[120.16500854 66.71273804]
[131.25631714 76.81138611]
[146.19062805 75.40908051]
[161.12493896 74.00677490]
[176.05924988 72.60447693]
[190.99354553 71.20217133]
[205.92785645 69.79986572]
[210.28546143 66.69650269]
[214.93261719 65.71857452]
[218.99514771 66.61164093]
[221.83291626 68.80584717]
[236.82560730 68.33780670]
[251.81829834 67.86976624]
[265.37033081 59.70562744]
[278.33282471 67.04203796]
[293.32553101 66.57398987]
[308.31823730 66.10594940]
[323.31091309 65.63790894]
[336.95761108 56.54396057]
[351.53457642 64.05690765]
[352.04626465 80.44806671]
[337.96630859 88.85562897]
[323.77896118 80.63060760]
[308.78625488 81.09864807]
[293.79357910 81.56668854]
[278.80087280 82.03472900]
[266.32122803 90.16539001]
[252.28634644 82.86245728]
[237.29365540 83.33050537]
[222.30094910 83.79854584]
[207.33015442 84.73417664]
[192.39585876 86.13647461]
[177.46154785 87.53878021]
[162.52723694 88.94108582]
[147.59292603 90.34339142]
[132.65863037 91.74568939]
[129.39108276 112.19486237]
[115.31475830 125.74482727]
[97.07761383 127.93817902]
[91.59058380 141.89857483]
[86.10354614 155.85896301]
[80.61651611 169.81935120]
[75.12948608 183.77973938]
[69.64245605 197.74012756]
[64.15542603 211.70051575]
[70.68687439 217.90008545]
[75.24311829 225.63223267]
[77.48634338 234.29052734]
[77.25936890 243.20126343]
[74.59656525 251.67585754]
[69.71986389 259.06405640]
[63.02040100 264.80380249]
[55.02714539 268.46411133]
[55.96277237 283.43490601]
[56.89840317 298.40567017]
[66.41373444 311.76196289]
[59.35929108 326.56625366]
[42.99207687 327.58917236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[6 29]
[7 28]
[8 27]
[10 25]
[11 24]
[12 23]
[13 22]
[32 137]
[33 136]
[34 135]
[35 134]
[36 133]
[37 132]
[38 131]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[71 80]
[72 79]
[73 78]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[99 123]
[103 122]
[104 121]
[105 120]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
