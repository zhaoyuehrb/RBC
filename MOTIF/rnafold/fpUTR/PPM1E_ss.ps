%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUGAUCGCUCGUGCCGGUGCGGCCGUUAACCGCCCUUGCCGGAGCCCUAGGCUCAAAAGCAGCCCCUUACCCUUCCUGGGCUUCCCCCAACCCCUUUCCCGGUCUGCCCUGGGGCAUGAGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[75.34784698 317.52044678]
[61.28123474 309.80618286]
[58.68418884 293.97473145]
[69.54894257 282.17062378]
[70.27364349 267.18814087]
[70.99834442 252.20565796]
[69.10845947 250.00581360]
[68.02244568 246.88740540]
[68.10925293 243.17048645]
[69.60836792 239.30773926]
[72.58593750 235.83305359]
[74.75327301 220.99044800]
[76.92060852 206.14785767]
[79.08794403 191.30526733]
[81.25527954 176.46266174]
[83.42261505 161.62007141]
[85.58995056 146.77748108]
[87.75728607 131.93487549]
[89.92462921 117.09228516]
[79.31802368 106.48567963]
[64.47542572 108.65301514]
[56.33946228 113.02938843]
[49.24844360 110.68888855]
[34.35781097 112.49694061]
[19.46717644 114.30499268]
[4.57654285 116.11304474]
[-3.80571437 129.31423950]
[-18.72800446 133.98963928]
[-33.14447784 127.93164062]
[-40.24811554 114.00065613]
[-36.68479919 98.77446747]
[-24.13701630 89.44242096]
[-8.52944660 90.41081238]
[2.76849294 101.22240448]
[17.65912628 99.41436005]
[32.54975891 97.60630798]
[47.44039154 95.79825592]
[62.30809021 93.81041718]
[77.15068817 91.64308167]
[83.30687714 77.96458435]
[75.08669281 65.41753387]
[66.86650848 52.87048340]
[58.64631653 40.32342911]
[40.03334427 37.24818039]
[29.66734886 21.86635017]
[33.66505051 4.07792091]
[24.84827042 -8.05733395]
[16.03149223 -20.19258881]
[7.21471310 -32.32784271]
[-1.60206556 -44.46310043]
[-15.80366516 -53.72327805]
[-10.83677292 -69.93334198]
[6.11477232 -69.64795685]
[10.53318977 -53.27987671]
[19.34996796 -41.14462280]
[28.16674614 -29.00936699]
[36.98352432 -16.87411308]
[45.80030441 -4.73885822]
[57.30663681 -5.42991638]
[67.80585480 -0.38684091]
[74.59786987 9.22340584]
[75.87313080 21.04343414]
[71.19336700 32.10324097]
[79.41355896 44.65029526]
[87.63374329 57.19734573]
[95.85393524 69.74440002]
[94.65541840 54.79235840]
[96.90741730 39.96237183]
[105.19517517 27.45984650]
[117.97725677 19.61010742]
[132.87634277 17.87311935]
[147.12138367 22.57193565]
[158.06295776 32.83263779]
[163.66606140 46.74684525]
[162.88858032 61.72668457]
[155.87512207 74.98606873]
[143.93009949 84.05891418]
[129.27798462 87.25778198]
[116.11425018 94.44916534]
[131.11424255 94.44916534]
[144.91441345 86.71186066]
[157.64169312 94.44916534]
[172.64169312 94.44916534]
[187.64169312 94.44916534]
[202.64169312 94.44916534]
[211.80239868 82.06418610]
[226.32943726 77.50143433]
[240.58897400 82.31074524]
[249.17947388 94.44916534]
[264.17947388 94.44916534]
[269.96429443 80.39197540]
[280.69174194 69.62210083]
[294.72598267 63.78187180]
[309.92691040 63.76187897]
[323.97647095 69.56516266]
[334.73223877 80.30677795]
[340.55398560 94.34869385]
[340.55398560 109.54962921]
[334.73223877 123.59155273]
[323.97647095 134.33316040]
[309.92691040 140.13645935]
[294.72598267 140.11645508]
[280.69174194 134.27622986]
[269.96429443 123.50635529]
[264.17947388 109.44916534]
[249.17947388 109.44916534]
[240.58897400 121.58758545]
[226.32943726 126.39688873]
[211.80239868 121.83414459]
[202.64169312 109.44916534]
[187.64169312 109.44916534]
[172.64169312 109.44916534]
[157.64169312 109.44916534]
[144.91441345 117.18646240]
[131.11424255 109.44916534]
[116.11425018 109.44916534]
[104.76721954 119.25962067]
[102.59988403 134.10221863]
[100.43254852 148.94480896]
[98.26521301 163.78739929]
[96.09787750 178.63000488]
[93.93054199 193.47259521]
[91.76320648 208.31520081]
[89.59587097 223.15779114]
[87.42853546 238.00038147]
[85.98082733 252.93035889]
[85.25612640 267.91284180]
[84.53142548 282.89532471]
[94.20619965 295.69293213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 128]
[5 127]
[6 126]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[16 120]
[17 119]
[18 118]
[19 117]
[20 39]
[21 38]
[23 37]
[24 36]
[25 35]
[26 34]
[40 66]
[41 65]
[42 64]
[43 63]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[79 116]
[80 115]
[82 113]
[83 112]
[84 111]
[85 110]
[89 106]
[90 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
