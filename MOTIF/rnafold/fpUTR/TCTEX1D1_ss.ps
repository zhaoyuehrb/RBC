%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAGUCCAGGGAGAGUGCGCGGGCGGCCGCCGGCUGAAUGAAGCCUGGGACGCGGGAGCCGCGCCGCGCGCAGUGUCUGCAGUGCCGGAGGUCUGGGAGGCUCCGGGCGAAGCCUCCCUGCUGCAGGUU\
) } def
/len { sequence length } bind def

/coor [
[-31.88659668 105.63501740]
[-38.81993484 109.26258850]
[-46.23718262 111.74113464]
[-53.94947433 113.00908661]
[-61.76067734 113.03566742]
[-69.47237396 111.82166290]
[-76.88890839 109.39934540]
[-83.82234192 105.83162689]
[-90.09722900 101.21041870]
[-95.55504608 95.65428162]
[-100.05819702 89.30536652]
[-103.49347687 82.32577515]
[-105.77494812 74.89344788]
[-106.84603119 67.19759369]
[-106.68097687 59.43389511]
[-105.28542328 51.79952621]
[-102.69625854 44.48814392]
[-115.31506348 36.37853241]
[-127.93386078 28.26891899]
[-140.55267334 20.15930748]
[-153.17146301 12.04969501]
[-165.79026794 3.94008279]
[-178.40907288 -4.16952944]
[-191.02787781 -12.27914143]
[-203.74229431 -20.23801994]
[-216.55050659 -28.04503632]
[-229.35873413 -35.85205460]
[-242.16694641 -43.65907288]
[-254.97517395 -51.46608734]
[-270.15179443 -47.95786667]
[-283.02993774 -56.05775070]
[-286.28097534 -70.54796600]
[-299.08917236 -78.35498810]
[-312.58151245 -84.90914917]
[-326.63577271 -90.15111542]
[-340.69000244 -95.39308167]
[-354.74426270 -100.63504028]
[-369.01440430 -93.84254456]
[-383.87979126 -99.20870972]
[-390.52105713 -113.54988861]
[-384.99801636 -128.35771179]
[-370.58743286 -134.84696960]
[-355.83880615 -129.16767883]
[-349.50228882 -114.68928528]
[-335.44802856 -109.44732666]
[-321.39379883 -104.20536041]
[-307.33953857 -98.96340179]
[-313.74743652 -112.52581024]
[-311.14013672 -127.29747772]
[-300.47640991 -137.84664917]
[-285.67745972 -140.29423523]
[-272.18502808 -133.74024963]
[-264.96051025 -120.59467316]
[-266.66043091 -105.69131470]
[-276.65972900 -94.51033783]
[-291.28216553 -91.16320801]
[-278.47393799 -83.35618591]
[-264.10482788 -87.10636139]
[-251.00425720 -79.37139893]
[-247.16815186 -64.27430725]
[-234.35992432 -56.46728897]
[-221.55171204 -48.66027451]
[-208.74349976 -40.85325623]
[-195.93527222 -33.04623795]
[-188.51432800 -32.24334717]
[-182.91827393 -24.89794540]
[-170.29946899 -16.78833199]
[-157.68066406 -8.67872047]
[-145.06185913 -0.56910789]
[-132.44305420 7.54050446]
[-119.82424927 15.65011692]
[-107.20545197 23.75972939]
[-94.58664703 31.86934090]
[-74.89875031 18.34791183]
[-51.09389114 15.80501556]
[-28.88975334 24.90531158]
[-13.64516449 43.51040268]
[-9.06680202 67.18105316]
[5.59040070 70.36953735]
[20.24760437 73.55801392]
[34.90480804 76.74649048]
[49.56201172 79.93497467]
[64.21921539 83.12345123]
[78.87641907 86.31193542]
[93.53361511 89.50041199]
[108.44766998 87.89698792]
[122.09215546 81.66575623]
[135.73663330 75.43453217]
[147.63267517 63.35477829]
[162.53350830 71.44190979]
[158.88737488 87.99914551]
[141.96786499 89.07901001]
[128.32337952 95.31024170]
[114.67890167 101.54146576]
[114.58965302 109.04093170]
[114.41115570 124.03987122]
[114.32190704 131.53933716]
[127.81423187 138.09350586]
[141.30656433 144.64767456]
[154.79888916 151.20184326]
[168.29121399 157.75601196]
[181.78353882 164.31018066]
[195.27586365 170.86434937]
[208.76820374 177.41851807]
[222.39346313 169.99343872]
[237.77650452 172.02851868]
[249.00222778 182.74125671]
[251.75411987 198.01235962]
[244.97402954 211.96978760]
[231.26901245 219.24662781]
[215.90895081 217.04478455]
[204.80009460 206.21090698]
[202.21403503 190.91084290]
[188.72169495 184.35667419]
[175.22937012 177.80250549]
[161.73704529 171.24833679]
[148.24472046 164.69416809]
[134.75239563 158.13999939]
[121.26007080 151.58583069]
[107.76773834 145.03166199]
[86.60803986 124.70850372]
[90.34513855 104.15761566]
[75.68793488 100.96913147]
[61.03073502 97.78065491]
[46.37353134 94.59217834]
[31.71632767 91.40369415]
[17.05912399 88.21521759]
[2.40192151 85.02674103]
[-12.25528145 81.83825684]
[-15.67090034 88.89878082]
[-20.16221809 95.32324219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[32 57]
[33 56]
[34 47]
[35 46]
[36 45]
[37 44]
[78 129]
[79 128]
[80 127]
[81 126]
[82 125]
[83 124]
[84 123]
[85 122]
[86 94]
[87 93]
[88 92]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
