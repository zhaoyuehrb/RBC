%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUCCGGCUCCCGCGGCUGCAGGCGCGCGGCUAGAGUGCCUGGCGGGCUCCGGCUUCCGCGUCCGCCCCGGCCCCGGUCCAGACUUAGUCUUCAGCUCCGCGCCCGCUCCGCCGCGGCCCACCGCGCCCGCCGGCAGCCGAGCCCCCAGCGACGCCCGCACAGCUCCGGGUGCCCAGACAGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[434.12792969 458.00817871]
[423.43402100 447.48962402]
[408.79769897 450.11944580]
[395.25918579 443.54882812]
[388.10202026 430.10903931]
[390.25588989 414.85562134]
[379.56198120 404.33706665]
[368.86804199 393.81851196]
[358.17410278 383.29995728]
[347.48019409 372.78140259]
[332.84387207 375.41125488]
[319.30535889 368.84063721]
[312.14819336 355.40081787]
[314.30206299 340.14739990]
[303.60815430 329.62884521]
[292.91421509 319.11029053]
[282.22030640 308.59173584]
[271.52636719 298.07318115]
[264.54046631 295.61972046]
[260.74438477 287.29119873]
[250.22584534 276.59729004]
[245.52537537 275.66394043]
[241.36746216 271.75671387]
[239.54360962 265.37158203]
[229.38438416 254.33570862]
[219.22515869 243.29985046]
[212.36950684 240.50302124]
[208.99105835 231.99653625]
[199.01568604 220.79420471]
[189.04031372 209.59188843]
[179.06495667 198.38957214]
[169.08958435 187.18724060]
[159.11421204 175.98492432]
[147.04914856 174.96836853]
[138.64704895 165.70143127]
[138.82357788 152.79270935]
[129.03479004 141.42698669]
[119.24600983 130.06126404]
[109.45722198 118.69554138]
[99.66843414 107.32981873]
[95.30062866 115.48121643]
[87.04571533 121.40554047]
[75.85750580 123.74345398]
[63.10281754 121.49774170]
[48.76227951 117.09899139]
[34.42174149 112.70024109]
[20.08120728 108.30148315]
[5.74066973 103.90273285]
[-8.59986687 99.50398254]
[-22.94040298 95.10523224]
[-34.69094849 100.45227051]
[-46.55245590 96.48034668]
[-52.32986832 85.83982086]
[-66.59571838 81.20456696]
[-80.86156464 76.56931305]
[-97.79389191 77.42515564]
[-103.30363464 61.39147186]
[-89.42179871 51.65848923]
[-76.22631073 62.30346298]
[-61.96046066 66.93871307]
[-47.69461060 71.57397461]
[-30.76025391 66.99946594]
[-18.54165268 80.76470184]
[-4.20111609 85.16345215]
[10.13942051 89.56220245]
[24.47995758 93.96095276]
[38.82049561 98.35970306]
[53.16102982 102.75845337]
[67.50156403 107.15720367]
[73.06130219 102.12338257]
[84.18077087 92.05574036]
[89.74050903 87.02191925]
[86.78375244 72.31622314]
[83.82699585 57.61052322]
[73.53177643 49.82113266]
[71.37953186 37.49882126]
[77.98784637 27.35341072]
[75.27464294 12.60083389]
[72.56143188 -2.15174198]
[54.97389984 -9.65406418]
[45.51729584 -26.10010910]
[47.84360504 -44.77700424]
[60.83709335 -58.18561554]
[57.39573669 -72.78551483]
[53.95437622 -87.38541412]
[50.51301956 -101.98531342]
[40.99407959 -116.01478577]
[51.84017181 -129.04547119]
[67.36410522 -122.23049164]
[65.11291504 -105.42667389]
[68.55427551 -90.82677460]
[71.99563599 -76.22687531]
[75.43699646 -61.62697220]
[86.38404846 -59.32766724]
[95.72028351 -53.07374191]
[102.07021332 -43.74034119]
[104.48112488 -32.65954208]
[102.56580353 -21.43029785]
[96.56417847 -11.68771267]
[87.31401062 -4.86494970]
[90.02721405 9.88762665]
[92.74042511 24.64020157]
[104.82344055 37.35630417]
[98.53269958 54.65376663]
[101.48944855 69.35946655]
[104.44620514 84.06516266]
[111.03415680 97.54103088]
[120.82294464 108.90675354]
[130.61172485 120.27247620]
[140.40051270 131.63819885]
[150.18930054 143.00392151]
[167.70329285 148.66395569]
[170.31652832 166.00955200]
[180.29190063 177.21186829]
[190.26727295 188.41419983]
[200.24264526 199.61651611]
[210.21800232 210.81884766]
[220.19337463 222.02116394]
[230.26101685 233.14064026]
[240.42024231 244.17649841]
[250.57946777 255.21235657]
[260.91976929 266.07873535]
[271.43832397 276.77264404]
[282.04492188 287.37927246]
[292.73886108 297.89779663]
[303.43276978 308.41635132]
[314.12670898 318.93490601]
[324.82061768 329.45346069]
[340.03634644 327.04769897]
[353.59265137 333.98165894]
[360.38623047 347.40966797]
[357.99874878 362.08746338]
[368.69265747 372.60601807]
[379.38659668 383.12457275]
[390.08050537 393.64312744]
[400.77444458 404.16168213]
[415.99017334 401.75588989]
[429.54647827 408.68988037]
[436.34005737 422.11788940]
[433.95254517 436.79568481]
[444.64648438 447.31423950]
[460.22326660 447.35415649]
[470.91857910 458.17379761]
[470.78454590 473.02365112]
[481.47845459 483.54220581]
[492.17239380 494.06076050]
[502.86633301 504.57928467]
[513.56024170 515.09783936]
[524.25415039 525.61639404]
[540.95928955 519.07885742]
[558.78942871 520.49060059]
[574.16644287 529.52197266]
[584.02465820 544.31896973]
[586.42218018 561.88336182]
[580.92321777 578.68060303]
[592.12554932 588.65594482]
[603.32781982 598.63134766]
[614.53015137 608.60668945]
[625.73248291 618.58209229]
[636.93481445 628.55743408]
[652.06549072 625.11621094]
[666.31591797 631.25671387]
[674.20642090 644.61779785]
[672.70306396 660.06188965]
[662.38378906 671.65039062]
[647.21667480 674.92724609]
[633.03375244 668.63250732]
[625.28857422 655.18664551]
[626.95947266 639.75976562]
[615.75714111 629.78436279]
[604.55480957 619.80902100]
[593.35247803 609.83367920]
[582.15014648 599.85827637]
[570.94781494 589.88293457]
[560.19702148 595.78094482]
[548.12982178 598.09411621]
[535.91149902 596.58380127]
[524.72644043 591.38116455]
[515.66363525 582.97625732]
[509.61056519 572.17150879]
[507.16622925 560.00537109]
[508.58193970 547.65252686]
[513.73559570 536.31030273]
[503.04168701 525.79174805]
[492.34777832 515.27325439]
[481.65383911 504.75466919]
[470.95989990 494.23611450]
[460.26599121 483.71755981]
[445.42041016 484.09713745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[14 128]
[15 127]
[16 126]
[17 125]
[18 124]
[20 123]
[21 122]
[24 121]
[25 120]
[26 119]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[33 113]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[53 61]
[54 60]
[55 59]
[72 106]
[73 105]
[74 104]
[77 102]
[78 101]
[79 100]
[83 93]
[84 92]
[85 91]
[86 90]
[144 188]
[145 187]
[146 186]
[147 185]
[148 184]
[149 183]
[155 174]
[156 173]
[157 172]
[158 171]
[159 170]
[160 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
