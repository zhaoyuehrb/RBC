%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGUUGGUUGGUGCGCGGCUGAAGGGUGUGGCGCGAGCAGCGUCGUUGGUUGGCCGGCGGCGGGCCGGGACGGGC\
) } def
/len { sequence length } bind def

/coor [
[115.45121765 161.89181519]
[110.13214874 147.86657715]
[104.81307220 133.84132385]
[99.49399567 119.81608582]
[89.40189362 117.82195282]
[81.24998474 110.81909180]
[77.44169617 100.27953339]
[79.38482666 88.77618408]
[87.02079010 79.35612488]
[74.03041077 71.85612488]
[61.04002762 64.35612488]
[48.04964447 56.85612869]
[29.77353859 57.39815140]
[21.37902260 42.12382126]
[8.09718132 35.15297318]
[-5.18465853 28.18212509]
[-18.46649933 21.21127892]
[-31.74833870 14.24043083]
[-47.56348801 14.67821026]
[-55.23722458 1.91251254]
[-68.51906586 -5.05833483]
[-82.36878204 1.93916023]
[-97.68104553 -0.57363540]
[-108.56798553 -11.63050079]
[-110.84333801 -26.97984505]
[-103.63219452 -40.71953201]
[-89.70738220 -47.56637192]
[-74.42327881 -44.88761902]
[-63.65692902 -33.71329880]
[-61.54821777 -18.34017563]
[-48.26637650 -11.36932755]
[-33.40123367 -12.30570889]
[-24.77749252 0.95859015]
[-11.49565125 7.92943764]
[1.78618896 14.90028572]
[15.06802940 21.87113380]
[28.34986877 28.84197998]
[40.16805267 25.54423714]
[51.37026215 31.47268677]
[55.54964447 43.86574554]
[68.54002380 51.36574554]
[81.53041077 58.86574554]
[94.52079010 66.36574554]
[109.49342346 67.27142334]
[123.29311371 61.39192581]
[137.09280396 55.51242447]
[150.89250183 49.63292694]
[164.69218445 43.75342560]
[178.49188232 37.87392807]
[192.29156494 31.99442863]
[206.09126282 26.11492920]
[215.50498962 12.68683529]
[231.81497192 14.39465809]
[238.24288940 29.48153687]
[228.17625427 42.42738342]
[211.97076416 39.91461945]
[198.17106628 45.79412079]
[184.37138367 51.67361832]
[170.57168579 57.55311966]
[156.77200317 63.43261719]
[142.97230530 69.31211853]
[129.17260742 75.19161224]
[115.37292480 81.07111359]
[122.09085083 99.24406433]
[113.51924133 114.49700928]
[118.83831787 128.52226257]
[124.15738678 142.54750061]
[129.47645569 156.57273865]
[144.64912415 158.95724487]
[156.58668518 168.62110901]
[162.07801819 182.96476746]
[159.64596558 198.12988281]
[149.94473267 210.03710938]
[135.58392334 215.48344421]
[120.42650604 213.00386047]
[108.54975891 203.26536560]
[103.14846039 188.88755798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[9 43]
[10 42]
[11 41]
[12 40]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 31]
[21 30]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
