%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGUUUGUCGUUGCUAUAGGAACCGCUACGGCGUUUGAAAGUGUCCGGGUUGCUUAGGAUCCCUACAGGUAGCGCCUCUGGAUACAUGCGUGGUCUGCUGACCCAGAGAGAAACGAAAGCAGAACUGUUUGGCGGGAGAUC\
) } def
/len { sequence length } bind def

/coor [
[169.93138123 357.55535889]
[179.67753601 344.81204224]
[179.03659058 329.82574463]
[178.39564514 314.83944702]
[177.75469971 299.85314941]
[177.11375427 284.86685181]
[176.47280884 269.88055420]
[172.97891235 255.29313660]
[166.76095581 241.64260864]
[160.54298401 227.99208069]
[154.32501221 214.34155273]
[142.00794983 205.96664429]
[143.32856750 190.20065308]
[137.11059570 176.55012512]
[124.79352570 168.17521667]
[126.11414337 152.40921021]
[119.89617157 138.75869751]
[113.67820740 125.10816193]
[112.59057617 140.06867981]
[114.38513947 154.96093750]
[109.14006805 169.01402283]
[98.02700043 179.08874512]
[83.52839661 182.93457031]
[68.88296509 179.69244385]
[57.36222839 170.08657837]
[51.53969955 156.26275635]
[52.71602249 141.30894470]
[60.62856293 128.56542969]
[72.66972351 119.62057495]
[57.81421661 121.69758606]
[42.95870972 123.77460480]
[30.36867905 134.28283691]
[15.06856441 128.38043213]
[12.79781342 112.13925171]
[25.89237976 102.26685333]
[40.88169861 108.91909790]
[55.73720169 106.84208679]
[70.59270477 104.76506805]
[74.81760406 98.56828308]
[59.85956192 99.68940735]
[49.65671539 88.69386292]
[51.89183044 73.86132812]
[64.88185883 66.36071777]
[78.84528351 71.84001923]
[83.26741028 86.17469788]
[87.49230957 79.97790527]
[83.99842072 65.39048767]
[80.50453186 50.80307388]
[77.01064301 36.21565628]
[73.51676178 21.62823677]
[70.02287292 7.04081964]
[66.52898407 -7.54659843]
[63.03509903 -22.13401604]
[58.92108536 -36.55881882]
[54.19446182 -50.79465485]
[49.46783829 -65.03048706]
[44.74121475 -79.26632690]
[40.01459122 -93.50215912]
[35.28796768 -107.73799896]
[30.25820923 -121.86957550]
[24.92760849 -135.89044189]
[19.59700966 -149.91131592]
[14.26640892 -163.93217468]
[2.98594213 -176.58869934]
[12.02509308 -190.93199158]
[28.31013107 -186.21670532]
[28.28727531 -169.26277161]
[33.61787415 -155.24191284]
[38.94847488 -141.22103882]
[44.27907562 -127.20018005]
[48.25473785 -124.43893433]
[50.49772263 -119.12002563]
[49.52380371 -112.46462250]
[54.25042725 -98.22878265]
[58.97705078 -83.99295044]
[63.70367432 -69.75711060]
[68.43029785 -55.52127838]
[73.15692139 -41.28544235]
[75.67829132 -39.91283035]
[77.78725433 -37.42327118]
[79.04203796 -33.97641373]
[79.06983185 -29.89357758]
[77.62251282 -25.62790298]
[81.11640167 -11.04048538]
[84.61029053 3.54693222]
[88.10417938 18.13434982]
[91.59806061 32.72176743]
[95.09194946 47.30918503]
[98.58583832 61.89660263]
[102.07972717 76.48402405]
[108.65357208 80.09436035]
[108.33293152 65.09779358]
[121.15997314 57.32174301]
[134.30780029 64.54219055]
[134.62870789 79.53875732]
[121.80125427 87.31504822]
[128.37510681 90.92539215]
[142.55961609 86.04692078]
[156.74414062 81.16844940]
[170.92864990 76.28997803]
[181.27777100 63.56882858]
[197.42404175 66.43765259]
[202.75755310 81.94525146]
[191.79165649 94.13874054]
[175.80712891 90.47450256]
[161.62260437 95.35296631]
[147.43809509 100.23143768]
[133.25357056 105.10990906]
[127.32873535 118.89019775]
[133.54669189 132.54072571]
[139.76466370 146.19125366]
[152.52648926 155.54254150]
[150.76112366 170.33215332]
[156.97908020 183.98268127]
[169.74090576 193.33396912]
[167.97554016 208.12358093]
[174.19351196 221.77410889]
[180.41146851 235.42463684]
[186.62944031 249.07516479]
[196.73437500 241.00152588]
[212.22546387 239.28210449]
[229.44126892 246.43298340]
[240.10438538 256.98275757]
[250.76750183 267.53256226]
[261.43063354 278.08233643]
[272.09375000 288.63211060]
[288.08517456 292.26617432]
[292.67453003 308.01004028]
[281.14071655 319.66778564]
[265.34869385 315.24691772]
[261.54394531 299.29522705]
[250.88084412 288.74545288]
[240.21772766 278.19567871]
[229.55459595 267.64587402]
[218.89147949 257.09609985]
[212.03338623 260.13198853]
[198.31719971 266.20373535]
[191.45910645 269.23959351]
[192.10005188 284.22589111]
[192.74099731 299.21221924]
[193.38194275 314.19851685]
[194.02288818 329.18481445]
[194.66383362 344.17111206]
[205.46243286 356.03573608]
[202.77694702 371.85244751]
[188.66743469 379.48797607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 143]
[3 142]
[4 141]
[5 140]
[6 139]
[7 138]
[8 119]
[9 118]
[10 117]
[11 116]
[13 114]
[14 113]
[16 111]
[17 110]
[18 109]
[29 38]
[30 37]
[31 36]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 70]
[61 69]
[62 68]
[63 67]
[97 108]
[98 107]
[99 106]
[100 105]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
