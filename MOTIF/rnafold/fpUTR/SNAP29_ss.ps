%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUUCGCGCGACGACCGCGGGGUCGGCGGGCGGGGCGAGGCCCUGGACGGCGGCGGCAGUGGGGCUCCUCCUUCUGUUUCCCAGACCGAGAGCCGCGCCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[87.90699768 260.92910767]
[87.90699768 245.92912292]
[80.16969299 233.20184326]
[87.90699768 219.40167236]
[87.90699768 204.40167236]
[87.90699768 189.40167236]
[80.16969299 176.67440796]
[87.90699768 162.87423706]
[87.90699768 147.87423706]
[87.90699768 132.87423706]
[87.90699768 117.87422943]
[74.90987396 125.36254883]
[60.68910217 120.59080505]
[54.83936310 106.77847290]
[61.30745316 93.24467468]
[75.72937775 89.12059784]
[88.37512970 97.18934631]
[77.76852417 86.58274078]
[67.16192627 75.97614288]
[56.55532074 65.36953735]
[39.96547318 68.26110840]
[25.04311180 60.81995773]
[17.52081490 46.12368393]
[20.15799904 29.99349403]
[9.24739361 19.69986916]
[-1.66321087 9.40624523]
[-12.57381535 -0.88737905]
[-27.92135429 -4.72972345]
[-31.86917877 -19.09161568]
[-42.77978516 -29.38524055]
[-58.35402298 -29.10084343]
[-69.27229309 -39.69546890]
[-69.44744110 -54.54487610]
[-80.35804749 -64.83850098]
[-91.26864624 -75.13212585]
[-102.17925262 -85.42575073]
[-113.08985901 -95.71937561]
[-124.00046539 -106.01300049]
[-139.67068481 -112.48451996]
[-137.79000854 -129.33383179]
[-121.07855225 -132.19102478]
[-113.70684052 -116.92360687]
[-102.79623413 -106.62998199]
[-91.88562775 -96.33635712]
[-80.97502136 -86.04273224]
[-70.06442261 -75.74910736]
[-59.15381622 -65.45548248]
[-44.31934738 -66.14404297]
[-33.10780334 -55.86027145]
[-32.48616028 -40.29584503]
[-21.57555389 -30.00222015]
[-7.00841475 -26.89614487]
[-2.28019094 -11.79798412]
[8.63041401 -1.50435913]
[19.54101753 8.78926563]
[30.45162201 19.08288956]
[43.37282944 15.39859772]
[56.52314758 18.64437675]
[66.40354919 28.06784058]
[70.32997894 41.25832748]
[67.16192627 54.76293945]
[77.76852417 65.36953735]
[88.37512970 75.97614288]
[98.98172760 86.58274078]
[112.92194366 92.12083435]
[127.91559601 91.68456268]
[142.90925598 91.24829102]
[157.90290833 90.81202698]
[172.89656067 90.37575531]
[181.53753662 86.95459747]
[188.33123779 90.15124512]
[203.33123779 90.15124512]
[214.46437073 79.25669861]
[229.67649841 79.47037506]
[239.99418640 90.15124512]
[254.99418640 90.15124512]
[269.99417114 90.15124512]
[284.99417114 90.15124512]
[297.30941772 79.86947632]
[312.99688721 83.22836304]
[320.02255249 97.65124512]
[312.99688721 112.07413483]
[297.30941772 115.43301392]
[284.99417114 105.15124512]
[269.99417114 105.15124512]
[254.99418640 105.15124512]
[239.99418640 105.15124512]
[229.67649841 115.83212280]
[214.46437073 116.04579926]
[203.33123779 105.15124512]
[188.33123779 105.15124512]
[173.33282471 105.36940765]
[158.33917236 105.80567932]
[143.34552002 106.24195099]
[128.35186768 106.67822266]
[113.35821533 107.11448669]
[102.90699768 117.87422943]
[102.90699768 132.87423706]
[102.90699768 147.87423706]
[102.90699768 162.87423706]
[110.64429474 176.67440796]
[102.90699768 189.40167236]
[102.90699768 204.40167236]
[102.90699768 219.40167236]
[110.64429474 233.20184326]
[102.90699768 245.92912292]
[102.90699768 260.92910767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[4 104]
[5 103]
[6 102]
[8 100]
[9 99]
[10 98]
[11 97]
[17 64]
[18 63]
[19 62]
[20 61]
[24 56]
[25 55]
[26 54]
[27 53]
[29 51]
[30 50]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[71 91]
[72 90]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
