%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGCACUCAUGAUGAGCCCCUGUUCUCAUUCUGCAAAUGGUGAAGCUCUCUAUUGUCCUGACCCCACAGUUCCUGUCGCAUGACCAGAGCCAGUUCACCAAGGAGCUGCAGCAGCAUGUAAAGUCAGUGAC\
) } def
/len { sequence length } bind def

/coor [
[122.67398834 104.55013275]
[117.32534790 114.19950104]
[108.35509491 120.00045013]
[98.05839539 120.86000824]
[88.89378357 116.90259552]
[76.59530640 125.49022675]
[64.29682922 134.07786560]
[63.46869278 147.57739258]
[55.11486053 157.96467590]
[42.48246765 161.56187439]
[30.27797127 157.26318359]
[17.78155899 165.56015015]
[5.28514624 173.85711670]
[-7.21126652 182.15408325]
[-12.69441605 189.57919312]
[-20.09930611 190.49507141]
[-32.78678894 198.49681091]
[-45.47426987 206.49855042]
[-58.16175079 214.50027466]
[-65.31729889 229.25596619]
[-81.69113159 230.16687012]
[-90.43924713 216.29594421]
[-82.56233215 201.91239929]
[-66.16349030 201.81280518]
[-53.47600937 193.81106567]
[-40.78852844 185.80932617]
[-28.10104561 177.80758667]
[-15.50823402 169.65766907]
[-3.01182103 161.36070251]
[9.48459148 153.06373596]
[21.98100471 144.76676941]
[24.56884384 128.19203186]
[38.59349060 118.38733673]
[55.70919418 121.77938843]
[68.00766754 113.19175720]
[80.30614471 104.60411835]
[79.94993591 90.01058960]
[90.05305481 77.52627563]
[77.95927429 68.65269470]
[65.86549377 59.77910995]
[53.77170944 50.90552902]
[41.67792892 42.03194427]
[25.97434044 40.10636139]
[20.29012489 26.33904648]
[8.19634438 17.46546364]
[-8.15083504 12.97034645]
[-8.35673809 -3.98235106]
[7.87644148 -8.87318134]
[17.06992722 5.37168264]
[29.16370773 14.24526596]
[44.00226974 15.53615284]
[50.55151367 29.93816566]
[62.64529419 38.81174850]
[74.73907471 47.68532944]
[86.83285522 56.55891418]
[98.92663574 65.43249512]
[113.66357422 68.22940063]
[128.16752625 64.40375519]
[142.67146301 60.57811356]
[157.12957764 56.58272171]
[171.53985596 52.41812134]
[185.95013428 48.25352097]
[200.36039734 44.08892059]
[214.77067566 39.92432022]
[220.13267517 25.48287773]
[232.82177734 17.06622505]
[247.85595703 17.72743988]
[259.47885132 27.00356865]
[273.88912964 22.83896828]
[288.29940796 18.67436790]
[300.79580688 10.37740135]
[310.22650146 -1.28716171]
[319.65719604 -12.95172501]
[329.08789062 -24.61628723]
[327.61541748 -40.12336731]
[337.34564209 -51.81855011]
[352.13836670 -53.12676620]
[361.56906128 -64.79132843]
[370.99975586 -76.45589447]
[373.01660156 -92.73054504]
[388.22268677 -98.87117004]
[400.97525024 -88.56081390]
[398.15560913 -72.40589142]
[382.66430664 -67.02519989]
[373.23361206 -55.36063385]
[363.80291748 -43.69607162]
[365.62191772 -28.95745468]
[356.22399902 -16.99358559]
[340.75244141 -15.18559456]
[331.32177734 -3.52103162]
[321.89108276 8.14353085]
[312.46038818 19.80809402]
[318.60421753 33.49213791]
[333.58773804 34.19522095]
[348.57125854 34.89830399]
[363.55477905 35.60139084]
[378.53829956 36.30447388]
[393.52178955 37.00755692]
[405.03845215 26.18433380]
[420.83233643 26.75816727]
[431.53317261 38.38861084]
[430.79238892 54.17552948]
[419.04946899 64.75282288]
[403.27127075 63.84517288]
[392.81872559 51.99106979]
[377.83520508 51.28798676]
[362.85168457 50.58490372]
[347.86816406 49.88182068]
[332.88467407 49.17873383]
[317.90115356 48.47565079]
[320.21371460 63.29631424]
[314.19821167 77.03726196]
[301.74008179 85.39163208]
[286.74417114 85.74087524]
[273.91064453 77.97554016]
[267.26196289 64.52952576]
[268.88204956 49.61727524]
[278.26315308 37.91277695]
[292.46398926 33.08464813]
[278.05371094 37.24924469]
[263.64343262 41.41384506]
[258.76077271 55.46011353]
[246.39710999 64.03936768]
[231.17440796 63.68928528]
[218.93528748 54.33459854]
[204.52500916 58.49919891]
[190.11473083 62.66379929]
[175.70445251 66.82839966]
[161.29417419 70.99299622]
[155.68939209 75.91820526]
[146.49710083 75.08206177]
[131.99316406 78.90770721]
[117.48921204 82.73334503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[11 31]
[12 30]
[13 29]
[14 28]
[16 27]
[17 26]
[18 25]
[19 24]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[44 50]
[45 49]
[57 133]
[58 132]
[59 131]
[60 129]
[61 128]
[62 127]
[63 126]
[64 125]
[68 121]
[69 120]
[70 119]
[71 92]
[72 91]
[73 90]
[74 89]
[77 86]
[78 85]
[79 84]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
