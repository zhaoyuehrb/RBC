%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUUUUACCCUGGCCGGGCGGGCGGGGCUCAGCCGGGCUGGGCUGGGCUCCGCGGCUGGAGCCGGGCUCUACCCAGAGCAAGACCCUG\
) } def
/len { sequence length } bind def

/coor [
[69.38767242 169.45832825]
[66.70024109 170.46115112]
[64.16224670 170.48597717]
[54.30419159 181.79167175]
[44.44613647 193.09736633]
[34.58808136 204.40306091]
[38.18684387 219.49703979]
[32.19520569 233.81066895]
[18.91707993 241.84005737]
[3.45817375 240.49772644]
[-8.23724842 230.29985046]
[-11.67205715 215.16770935]
[-5.52549839 200.91992188]
[7.83895016 193.03506470]
[23.28238487 194.54499817]
[33.14044189 183.23930359]
[42.99849701 171.93360901]
[52.85655212 160.62791443]
[61.71471786 148.52284241]
[69.50847626 135.70654297]
[77.30223846 122.89025879]
[67.50317383 108.16548920]
[66.74729919 89.81301117]
[75.95780945 73.13889313]
[93.07527161 63.32773972]
[87.57245636 49.37356567]
[82.06964111 35.41938782]
[76.56682587 21.46520996]
[71.06401825 7.51103401]
[65.56120300 -6.44314289]
[60.05838776 -20.39731979]
[54.55557632 -34.35149765]
[49.05276108 -48.30567169]
[43.54994965 -62.25984955]
[38.04713440 -76.21402740]
[32.54432297 -90.16820526]
[27.04150963 -104.12237549]
[12.44760799 -110.18814850]
[6.49461937 -124.82842255]
[12.71434689 -139.35737610]
[27.41673660 -145.15524292]
[41.87911987 -138.78225708]
[47.52122498 -124.01938629]
[40.99568558 -109.62519073]
[46.49850082 -95.67101288]
[52.00131226 -81.71684265]
[57.50412750 -67.76266479]
[63.00693893 -53.80848694]
[68.50975037 -39.85430908]
[74.01256561 -25.90013313]
[79.51538086 -11.94595623]
[85.01819611 2.00822067]
[90.52100372 15.96239758]
[96.02381897 29.91657448]
[101.52663422 43.87075043]
[107.02944946 57.82492828]
[121.16336060 62.84812164]
[134.23826599 55.49646759]
[147.31317139 48.14481354]
[155.20382690 33.76881027]
[171.60276794 33.68488312]
[179.64015198 47.97937012]
[171.04782104 61.94733047]
[154.66482544 61.21972275]
[141.58992004 68.57137299]
[128.51501465 75.92302704]
[132.84410095 86.19993591]
[133.77984619 96.80402374]
[131.53366089 106.69179535]
[145.07978821 113.13404083]
[158.62591553 119.57629395]
[172.17202759 126.01854706]
[185.71815491 132.46080017]
[202.01330566 130.61686707]
[211.53881836 143.96591187]
[204.49565125 158.77555847]
[188.12921143 159.81092834]
[179.27589417 146.00691223]
[165.72978210 139.56466675]
[152.18365479 133.12242126]
[138.63754272 126.68016815]
[125.09141541 120.23791504]
[119.54310608 125.63629150]
[112.86777496 129.55625916]
[105.45038605 131.77177429]
[97.71867371 132.15505981]
[90.11853027 130.68402100]
[82.32476807 143.50030518]
[74.53100586 156.31660461]
[74.75140381 160.60159302]
[73.77104187 164.40257263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[19 89]
[20 88]
[21 87]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[57 66]
[58 65]
[59 64]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
