%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAAAGAUGCGCCCUCUGUCACUGAGGGUUGACUGACUGGAGAGCUCAAGUGCAGCAAAGAGAAGUGUCAGAGC\
) } def
/len { sequence length } bind def

/coor [
[-24.85026550 330.47570801]
[-28.41960907 345.15347290]
[-35.98076630 358.23037720]
[-46.92078400 368.64636230]
[-60.35280991 375.55703735]
[-75.18796539 378.40219116]
[-90.22362518 376.95117188]
[-104.24092865 371.32159424]
[-116.10354614 361.96987915]
[-124.84983826 349.65405273]
[-129.77076721 335.37255859]
[-130.46742249 320.28311157]
[-126.88333893 305.60894775]
[-119.30905151 292.53964233]
[-108.35857391 282.13467407]
[-94.91961670 275.23748779]
[-80.08161163 272.40725708]
[-65.04740906 273.87338257]
[-51.03577042 279.51699829]
[-41.74935913 267.73724365]
[-32.46295166 255.95750427]
[-23.17654228 244.17774963]
[-13.89013195 232.39799500]
[-12.08698845 217.61293030]
[2.53284812 211.56553650]
[11.81925774 199.78578186]
[21.10566711 188.00602722]
[30.39207649 176.22627258]
[23.75186729 162.87063599]
[23.56814003 147.89480591]
[29.93089294 134.26849365]
[41.62664032 124.71706390]
[56.36948013 121.17648315]
[71.24776459 124.40108490]
[80.53417206 112.62133026]
[89.82057953 100.84157562]
[92.02543640 92.84576416]
[99.71014404 88.79110718]
[109.45186615 77.38501740]
[119.19358826 65.97892761]
[128.70948792 54.38377380]
[137.99589539 42.60401917]
[147.28230286 30.82426453]
[149.74967957 15.19664001]
[163.70529175 9.99181366]
[172.99169922 -1.78794003]
[174.80809021 -18.08618355]
[189.93742371 -24.41349983]
[202.81596375 -14.26088715]
[200.19534302 1.92751682]
[184.77145386 7.49846935]
[175.48503113 19.27822304]
[173.68190002 34.06328201]
[159.06205750 40.11067581]
[149.77565002 51.89042664]
[140.48924255 63.67018127]
[138.77684021 71.06787872]
[130.59967041 75.72064972]
[120.85795593 87.12673950]
[111.11623383 98.53282928]
[101.60033417 110.12798309]
[92.31392670 121.90773773]
[83.02751923 133.68750000]
[89.63628387 147.40191650]
[89.63517761 162.56394958]
[83.07798004 176.16627502]
[71.31352234 185.53422546]
[56.70857620 188.85160828]
[42.17182922 185.51268005]
[32.88542175 197.29243469]
[23.59901047 209.07218933]
[14.31260204 220.85194397]
[11.84523201 236.47956848]
[-2.11037827 241.68440247]
[-11.39678764 253.46415710]
[-20.68319702 265.24389648]
[-29.96960640 277.02365112]
[-39.25601578 288.80340576]
[-30.49736023 301.11044312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 78]
[20 77]
[21 76]
[22 75]
[23 74]
[25 72]
[26 71]
[27 70]
[28 69]
[34 63]
[35 62]
[36 61]
[38 60]
[39 59]
[40 58]
[41 56]
[42 55]
[43 54]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
