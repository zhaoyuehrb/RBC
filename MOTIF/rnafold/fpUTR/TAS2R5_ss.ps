%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUGUUCAGUCUCGCUUGAAGACAGAUUACGGAAGGACGAGGCCAAAUCCAGAUUUUGUGGUGUGAAAAUUUACCCUGGUGUGUUAUCACUACCAGGGGAUCUGACCUCAGCCAGGAGCAGUGAGAGCCUCCUCUCCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[204.06726074 419.85751343]
[219.06015015 419.39550781]
[232.34310913 426.36700439]
[226.37995911 412.60324097]
[220.41682434 398.83950806]
[214.45367432 385.07574463]
[208.49053955 371.31198120]
[202.52738953 357.54821777]
[196.56425476 343.78448486]
[193.36207581 342.15145874]
[190.81797791 338.84790039]
[189.72599792 334.21292114]
[190.69238281 328.93515015]
[185.62953186 314.81539917]
[174.05053711 305.44650269]
[176.67591858 289.84466553]
[171.61306763 275.72488403]
[166.55023193 261.60513306]
[161.29380798 256.33224487]
[161.53392029 247.12675476]
[156.77606201 232.90132141]
[142.53961182 228.60461426]
[133.45564270 216.60688782]
[133.17492676 201.38273621]
[142.01467896 188.76667786]
[137.25680542 174.54124451]
[132.49893188 160.31582642]
[127.74106598 146.09040833]
[122.98320007 131.86497498]
[118.22532654 117.63955688]
[100.99971008 126.74697876]
[81.27869415 121.04583740]
[70.52361298 102.34580231]
[56.02089310 98.51550293]
[41.51817322 94.68520355]
[22.39168358 100.89945221]
[9.17247486 86.84583282]
[-5.48160267 83.64301300]
[-18.64839745 92.38436127]
[-34.12303162 89.17324066]
[-42.72467804 75.91475677]
[-39.35012817 60.47494125]
[-26.00145149 52.01395416]
[-10.59817314 55.55155182]
[-2.27878881 68.98893738]
[12.37528896 72.19174957]
[20.52322960 65.87996674]
[31.02277756 65.11800385]
[40.38076782 70.40383148]
[45.34847260 80.18248749]
[59.85119247 84.01278687]
[74.35391235 87.84308624]
[84.13239288 76.46849823]
[78.16925049 62.70474243]
[72.20610809 48.94098663]
[66.24296570 35.17723083]
[60.27982330 21.41347885]
[54.31668091 7.64972353]
[48.35354233 -6.11403084]
[33.17996216 -9.36089611]
[22.83781242 -20.92893791]
[21.30386162 -36.37000656]
[29.16794205 -49.74669647]
[43.40615463 -55.91540146]
[58.54362106 -52.50411987]
[68.75966644 -40.82456589]
[70.12602234 -25.36776733]
[62.11729431 -12.07717323]
[68.08043671 1.68658137]
[74.04357910 15.45033550]
[80.00672150 29.21409035]
[85.96986389 42.97784424]
[91.93300629 56.74160004]
[97.89614868 70.50535583]
[113.80567169 76.25511932]
[122.87931061 89.05223846]
[131.90367126 77.07054901]
[140.92803955 65.08885956]
[149.95239258 53.10716629]
[158.97676086 41.12547302]
[168.00111389 29.14378357]
[177.02548218 17.16209412]
[185.92041016 5.08400631]
[194.68489075 -7.08907986]
[203.44935608 -19.26216507]
[204.55407715 -35.62406158]
[219.39344788 -42.60440063]
[232.70199585 -33.02240753]
[230.78903198 -16.73521805]
[215.62243652 -10.49769306]
[206.85797119 1.67539287]
[198.09349060 13.84847832]
[196.72787476 21.16752434]
[189.00717163 26.18645477]
[179.98280334 38.16814423]
[170.95845032 50.14983368]
[161.93408203 62.13152695]
[152.90972900 74.11322021]
[143.88536072 86.09490967]
[134.86100769 98.07659912]
[132.45074463 112.88169098]
[137.20861816 127.10710907]
[141.96649170 141.33253479]
[146.72436523 155.55795288]
[151.48222351 169.78338623]
[156.24009705 184.00880432]
[170.89123535 188.76806641]
[179.82621765 201.09767151]
[179.78825378 216.14634705]
[171.00148010 228.14346313]
[175.75935364 242.36888123]
[180.66998291 256.54229736]
[185.73283386 270.66204834]
[190.79566956 284.78179932]
[202.73680115 295.16064453]
[199.74929810 309.75256348]
[204.81213379 323.87231445]
[210.32800293 337.82135010]
[216.29115295 351.58508301]
[222.25428772 365.34884644]
[228.21743774 379.11260986]
[234.18057251 392.87634277]
[240.14372253 406.64010620]
[246.10685730 420.40386963]
[253.51348877 433.44769287]
[262.27795410 445.62078857]
[271.04244995 457.79388428]
[279.80691528 469.96694946]
[288.57138062 482.14004517]
[303.73797607 488.37756348]
[305.65093994 504.66476440]
[292.34237671 514.24676514]
[277.50302124 507.26641846]
[276.39828491 490.90451050]
[267.63381958 478.73144531]
[258.86935425 466.55834961]
[250.10487366 454.38525391]
[241.34040833 442.21218872]
[240.52189636 457.18981934]
[232.44377136 469.82882690]
[219.19456482 476.86148071]
[204.19969177 476.46960449]
[191.33589172 468.75451660]
[183.92895508 455.71084595]
[183.89387512 440.71087646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[13 117]
[14 116]
[16 114]
[17 113]
[18 112]
[20 111]
[21 110]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[33 52]
[34 51]
[35 50]
[37 46]
[38 45]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[76 100]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[83 92]
[84 91]
[85 90]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
