%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAUCAAUACAGAAAAGGGGGAACCCGCUGGCCCAAUGGCAGCGUCCUACAGUGUAGCCUCCGCCUCCCGAUUGACUGGCCUGCUUGGCAAGGCAAGUAGCGGCGGCGCUUCAAG\
) } def
/len { sequence length } bind def

/coor [
[98.70078278 158.40571594]
[97.10638428 143.49069214]
[95.51198578 128.57566833]
[93.91757965 113.66064453]
[94.53650665 128.64787292]
[89.54476929 142.79292297]
[79.65649414 154.07220459]
[66.28630829 160.87207031]
[51.34697342 162.21974182]
[36.97571945 157.92239380]
[25.22852135 148.59483337]
[17.78594589 135.57147217]
[15.71273613 120.71543884]
[19.30548859 106.15205383]
[28.05021858 93.96477509]
[40.69589615 85.89713287]
[55.43341446 83.10329437]
[70.15441132 85.98294830]
[82.75415039 94.12535095]
[70.71347809 85.17984009]
[58.67280579 76.23432922]
[46.63212967 67.28881836]
[34.59145355 58.34330750]
[31.01298523 65.16055298]
[24.39588928 70.92922211]
[15.13921738 74.50371552]
[4.03429604 74.90295410]
[-7.80169392 71.43596649]
[-21.62137413 65.60360718]
[-35.44105148 59.77124405]
[-49.26073456 53.93888092]
[-63.08041382 48.10651779]
[-72.33419800 47.63277817]
[-77.18704987 41.93055344]
[-90.84657288 35.73237228]
[-107.10601807 37.86835480]
[-116.86949158 24.69236755]
[-110.09316254 9.75873280]
[-93.74794006 8.42989635]
[-84.64839172 22.07285118]
[-70.98886871 28.27103233]
[-57.24805069 34.28683853]
[-43.42837143 40.11920166]
[-29.60869026 45.95156479]
[-15.78901100 51.78392792]
[-1.96933138 57.61629105]
[3.67494941 52.67745590]
[14.96351051 42.79978180]
[20.60779190 37.86094666]
[16.66125298 23.38943100]
[12.71471500 8.91791248]
[8.76817608 -5.55360603]
[-1.23245418 -19.24388504]
[9.15435314 -32.64353180]
[24.90569305 -26.37203789]
[23.23969460 -9.50014400]
[27.18623352 4.97137356]
[31.13277054 19.44289207]
[35.07931137 33.91440964]
[43.53696442 46.30263138]
[55.57764053 55.24814224]
[67.61831665 64.19365692]
[79.65898895 73.13916016]
[91.69966125 82.08467102]
[117.20947266 85.56655884]
[132.16165161 84.36976624]
[147.11383057 83.17297363]
[156.12680054 73.82980347]
[168.69064331 73.20673370]
[177.96961975 81.09177399]
[192.94836426 80.29344177]
[207.92709351 79.49510956]
[214.09248352 69.15227509]
[224.41090393 63.18363953]
[236.20912170 62.99972153]
[246.49592590 68.52958679]
[252.72055054 78.26854706]
[267.72055054 78.26854706]
[282.72055054 78.26854706]
[296.52072144 70.53125000]
[309.24798584 78.26854706]
[324.24798584 78.26854706]
[339.24798584 78.26854706]
[354.24798584 78.26854706]
[369.24667358 78.06887817]
[384.24136353 77.66957092]
[399.91390991 71.20372772]
[410.46566772 84.47387695]
[400.63513184 98.28680420]
[384.64065552 92.66425323]
[369.64596558 93.06356049]
[362.95782471 96.43018341]
[354.24798584 93.26854706]
[339.24798584 93.26854706]
[324.24798584 93.26854706]
[309.24798584 93.26854706]
[296.52072144 101.00585175]
[282.72055054 93.26854706]
[267.72055054 93.26854706]
[252.72055054 93.26854706]
[240.70596313 106.95547485]
[222.19120789 107.65580750]
[208.72543335 94.47385406]
[193.74668884 95.27218628]
[178.76794434 96.07051849]
[164.67565918 106.43634033]
[148.31062317 98.12515259]
[133.35844421 99.32194519]
[118.40626526 100.51873779]
[108.83260345 112.06624603]
[110.42700195 126.98126984]
[112.02140808 141.89628601]
[113.61580658 156.81130981]
[125.14836121 167.96388245]
[123.47598267 183.91952515]
[109.88158417 192.43844604]
[94.79362488 186.98565674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[34 41]
[35 40]
[49 59]
[50 58]
[51 57]
[52 56]
[65 109]
[66 108]
[67 107]
[70 105]
[71 104]
[72 103]
[77 100]
[78 99]
[79 98]
[81 96]
[82 95]
[83 94]
[84 93]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
