%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUCCACCCCGCCCGCUCCCGGUGACGUGCCAGCCCCAGGCCCACGCCGCUCCCGCCCCGCGUG\
) } def
/len { sequence length } bind def

/coor [
[73.26351929 259.78430176]
[62.21478653 270.22430420]
[48.01008987 275.63681030]
[32.81553268 275.19638062]
[18.94818306 268.97021484]
[8.52270699 257.90777588]
[3.12891340 243.69596863]
[3.58931708 228.50199890]
[9.83371067 214.64285278]
[20.90986824 204.23194885]
[35.12875748 198.85684204]
[50.32210159 199.33723450]
[56.46595383 185.65319824]
[62.60980988 171.96914673]
[55.93447495 156.70747375]
[62.33215332 140.96722412]
[78.37882996 134.43896484]
[83.87452698 120.48199463]
[75.81951904 109.73895264]
[74.18006897 96.41198730]
[79.39114380 84.03698730]
[90.07015228 75.89728546]
[103.38374329 74.15250397]
[109.52759552 60.46846008]
[115.67145538 46.78441620]
[121.81530762 33.10037231]
[120.40922546 17.34177208]
[132.68069458 8.90019226]
[138.82455444 -4.78385115]
[144.96839905 -18.46789360]
[151.11225891 -32.15193939]
[146.52090454 -42.49470901]
[148.54220581 -53.40106964]
[156.21881104 -61.09427643]
[166.68055725 -63.05625916]
[174.07881165 -76.10485077]
[181.47706604 -89.15345001]
[184.02944946 -105.91416931]
[200.84172058 -108.10136414]
[207.59753418 -92.55159760]
[194.52566528 -81.75519562]
[187.12741089 -68.70660400]
[179.72915649 -55.65800476]
[181.64273071 -36.63314438]
[164.79631042 -26.00808144]
[158.65245056 -12.32403851]
[152.50859070 1.36000443]
[146.36473083 15.04404736]
[148.21028137 29.82387352]
[135.49935913 39.24422836]
[129.35549927 52.92827225]
[123.21163940 66.61231232]
[117.06778717 80.29635620]
[125.38632965 94.07740784]
[124.02484894 110.11679840]
[113.50248718 122.29856110]
[97.83150482 125.97769165]
[92.33580780 139.93467712]
[99.16281128 151.78605652]
[97.82263947 165.19964600]
[89.04568481 175.17059326]
[76.29385376 178.11300659]
[70.15000153 191.79705811]
[64.00614166 205.48109436]
[74.46068573 216.51608276]
[79.89185333 230.71365356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 64]
[13 63]
[14 62]
[17 58]
[18 57]
[23 53]
[24 52]
[25 51]
[26 50]
[28 48]
[29 47]
[30 46]
[31 45]
[35 43]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
