%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGACUUUUCUGUCUUGCUCAGCUCCAGGGGUCAUUUUCCGGUUAGCCUUCGGGGUGUCCGCGUGAGAAUUGGCUAUAUCCUGGAGCGAGUGCUGGGAGGUGCUAGUCCGCCGCGCCUUAUUCGAGAGGUGUCAGGGCUGGGAGACUAGG\
) } def
/len { sequence length } bind def

/coor [
[196.69619751 271.22833252]
[199.80451965 256.55392456]
[207.86820984 243.90573120]
[219.86009216 234.89489746]
[234.25259399 230.66928101]
[249.21006775 231.76654053]
[237.42791748 222.48315430]
[225.64578247 213.19976807]
[213.86364746 203.91638184]
[202.08151245 194.63299561]
[190.29937744 185.34960938]
[178.51724243 176.06622314]
[163.73171997 174.26687622]
[157.68057251 159.64859009]
[145.89843750 150.36520386]
[142.31497192 150.44299316]
[138.51991272 148.74975586]
[135.36425781 145.20750427]
[133.70005798 140.12954712]
[122.51175690 130.13844299]
[111.32346344 120.14735413]
[100.13516998 110.15625763]
[92.45397186 107.54068756]
[88.82242584 99.84333038]
[77.84162140 89.62461853]
[66.86081696 79.40591431]
[55.88001633 69.18720245]
[44.89921188 58.96849823]
[33.91841125 48.74979019]
[22.93760872 38.53108597]
[11.95680523 28.31237793]
[0.56573176 18.55310249]
[-11.21640491 9.26971722]
[-22.99854279 -0.01366804]
[-34.78067780 -9.29705334]
[-46.56281662 -18.58043861]
[-58.43964005 -27.74237442]
[-70.40989685 -36.78189468]
[-82.38015747 -45.82141495]
[-94.35041809 -54.86093140]
[-106.32067108 -63.90045166]
[-118.56362915 -72.56706238]
[-131.06765747 -80.85253143]
[-143.57170105 -89.13800812]
[-159.34936523 -90.31090546]
[-165.68504333 -103.79084015]
[-178.18907166 -112.07631683]
[-193.96675110 -113.24921417]
[-200.30241394 -126.72914886]
[-212.80645752 -135.01461792]
[-229.19889832 -135.48355103]
[-236.74984741 -150.04086304]
[-227.69152832 -163.71124268]
[-211.34236145 -162.43176270]
[-204.52098083 -147.51866150]
[-192.01693726 -139.23318481]
[-177.13363647 -138.65290833]
[-169.90359497 -124.58035278]
[-157.39956665 -116.29487610]
[-142.51626587 -115.71460724]
[-135.28622437 -101.64204407]
[-122.78218842 -93.35656738]
[-110.27815247 -85.07109833]
[-106.71315765 -85.44261169]
[-102.79196930 -84.06642914]
[-99.35634613 -80.79502106]
[-97.28115082 -75.87071228]
[-85.31089783 -66.83119202]
[-73.34063721 -57.79167175]
[-61.37038040 -48.75215149]
[-49.40011978 -39.71263123]
[-42.12210464 -38.18206024]
[-37.27943039 -30.36257553]
[-25.49729347 -21.07919121]
[-13.71515656 -11.79580498]
[-1.93301988 -2.51241970]
[9.84911728 6.77096605]
[12.70138741 6.53520060]
[15.82088947 7.45058823]
[18.75621414 9.62558460]
[21.02498245 12.99845314]
[22.17551231 17.33157539]
[33.15631485 27.55028152]
[44.13711929 37.76898956]
[55.11791992 47.98769760]
[66.09872437 58.20640182]
[77.07952881 68.42510986]
[88.06032562 78.64382172]
[99.04113007 88.86252594]
[110.12626648 98.96795654]
[121.31455994 108.95906067]
[132.50285339 118.95015717]
[143.69114685 128.94125366]
[155.18182373 138.58306885]
[166.96395874 147.86645508]
[182.59220886 150.32980347]
[187.80062866 164.28408813]
[199.58276367 173.56747437]
[211.36489868 182.85086060]
[223.14703369 192.13424683]
[234.92916870 201.41761780]
[246.71130371 210.70100403]
[258.49343872 219.98439026]
[268.78973389 221.61930847]
[274.25756836 229.08581543]
[288.18829346 234.64775085]
[302.11898804 240.20968628]
[316.04971313 245.77162170]
[329.98043823 251.33357239]
[343.91116333 256.89550781]
[357.84185791 262.45742798]
[369.56005859 255.74224854]
[382.81109619 257.00372314]
[392.75598145 265.55520630]
[395.89361572 278.08944702]
[409.70721436 283.93624878]
[423.52078247 289.78302002]
[437.33438110 295.62982178]
[451.14794922 301.47662354]
[464.96154785 307.32339478]
[478.77511597 313.17019653]
[493.32653809 307.00320435]
[507.94512939 313.00927734]
[513.95788574 327.62509155]
[507.79760742 342.17935181]
[493.11904907 348.03726196]
[478.63073730 341.72344971]
[472.92834473 326.98376465]
[459.11474609 321.13699341]
[445.30117798 315.29019165]
[431.48757935 309.44338989]
[417.67401123 303.59661865]
[403.86041260 297.74981689]
[390.04684448 291.90304565]
[374.77719116 298.88449097]
[358.85855103 292.56558228]
[352.27993774 276.38815308]
[338.34921265 270.82623291]
[324.41848755 265.26428223]
[310.48779297 259.70233154]
[296.55706787 254.14041138]
[282.62634277 248.57847595]
[268.69561768 243.01654053]
[277.12557983 255.42362976]
[280.66149902 270.00091553]
[278.85299683 284.89147949]
[271.93041992 298.19854736]
[260.77560425 308.22702026]
[246.80947876 313.69940186]
[231.81108093 313.91867065]
[217.69096375 308.85684204]
[206.24777222 299.15872192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[11 98]
[12 97]
[14 95]
[15 94]
[19 93]
[20 92]
[21 91]
[22 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[42 63]
[43 62]
[44 61]
[46 59]
[47 58]
[49 56]
[50 55]
[105 143]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[111 137]
[115 134]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
