%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCCAGUACACUUGCCUGUGGUGUCAGCAAGCACUGUCGACUUCUUCCUCUGGUGAAGUGGGUUUACUUGAACUUGAAGGAAAGAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[93.15496826 108.21046448]
[78.22719574 109.68072510]
[63.29942322 111.15097809]
[55.92798233 122.56250763]
[43.48751831 127.51371002]
[30.67106247 124.38105774]
[22.17331505 114.54563904]
[7.20543098 115.52668762]
[-7.76245308 116.50772858]
[-22.73033714 117.48877716]
[-29.58446312 126.24781799]
[-39.95211411 129.61260986]
[-50.21662521 126.67003632]
[-56.94107437 118.66326904]
[-71.94107819 118.66326904]
[-86.94107819 118.66326904]
[-101.94107819 118.66326904]
[-116.94107819 118.66326904]
[-125.71778870 121.84161377]
[-132.42985535 118.40981293]
[-147.42182922 117.91902924]
[-158.78402710 128.90428162]
[-174.58444214 128.55421448]
[-185.44895935 117.07650757]
[-184.93185425 101.28067780]
[-173.33992004 90.53811646]
[-157.55044556 91.22219849]
[-146.93103027 102.92705536]
[-131.93907166 103.41784668]
[-116.94107819 103.66326904]
[-101.94107819 103.66326904]
[-86.94107819 103.66326904]
[-71.94107819 103.66326904]
[-56.94107437 103.66326904]
[-41.16077805 92.69174957]
[-23.71138382 102.52089691]
[-8.74349976 101.53984833]
[6.22438383 100.55879974]
[21.19226837 99.57775116]
[31.63006020 86.50410461]
[48.61882401 84.89931488]
[61.82916641 96.22321320]
[76.75693512 94.75295258]
[91.68470764 93.28269196]
[106.34664154 90.11602020]
[120.55059052 85.29443359]
[134.75454712 80.47283936]
[148.95849609 75.65124512]
[163.16244507 70.82965088]
[177.28561401 65.77630615]
[191.32418823 60.49255753]
[205.27445984 54.97981644]
[219.13264465 49.23956680]
[228.92140198 36.81013489]
[243.64080811 39.08795166]
[257.49899292 33.34770203]
[271.35720825 27.60744858]
[282.10424805 12.76688290]
[299.35375977 15.50311947]
[313.01669312 9.31251335]
[326.67965698 3.12190819]
[340.34262085 -3.06869721]
[354.00558472 -9.25930309]
[363.11270142 -22.89720726]
[379.45718384 -21.55930519]
[386.22521973 -6.62191486]
[376.45443726 6.54865646]
[360.19616699 4.40365458]
[346.53323364 10.59426022]
[332.87026978 16.78486633]
[319.20730591 22.97547150]
[305.54434204 29.16607666]
[300.91342163 40.47280121]
[289.41940308 45.68776703]
[277.09744263 41.46564102]
[263.23925781 47.20589447]
[249.38105774 52.94614410]
[240.58352661 64.96499634]
[224.87289429 63.09775925]
[211.01470947 68.83801270]
[205.94169617 74.41417694]
[196.60794067 74.53114319]
[182.56935120 79.81489563]
[177.31661987 85.22209167]
[167.98403931 85.03360748]
[153.78009033 89.85520172]
[139.57614136 94.67678833]
[125.37218475 99.49838257]
[111.16822815 104.31997681]
[123.96160126 112.15129852]
[128.98672485 126.28452301]
[124.00887299 140.43447876]
[111.24175262 148.30851746]
[96.36302185 146.40499878]
[85.98940277 135.57041931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[7 39]
[8 38]
[9 37]
[10 36]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[20 29]
[21 28]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 83]
[51 82]
[52 80]
[53 79]
[55 77]
[56 76]
[57 75]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
