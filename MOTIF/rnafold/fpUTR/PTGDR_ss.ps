%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCGAGCCGCGCGCGGAGCUGCCGGGGGCUCCUUAGCACCCGGGCGCCGGGGCCCUCGCCCUUCCGCAGCCUUCACUCCAGCCCUCUGCUCCCGCACGCC\
) } def
/len { sequence length } bind def

/coor [
[38.14909363 422.83242798]
[30.86883354 436.24734497]
[18.48400116 445.16802979]
[3.45361400 447.82327271]
[-11.23803139 443.68585205]
[-22.67390060 433.57723999]
[-28.58339119 419.50454712]
[-27.79317093 404.26190186]
[-20.46013832 390.87576294]
[-8.04027367 382.00390625]
[7.00045252 379.40786743]
[11.06655502 364.96951294]
[15.13265705 350.53112793]
[11.13507748 336.18301392]
[22.32354355 324.99688721]
[26.38964653 310.55853271]
[30.45574760 296.12014771]
[34.52185059 281.68176270]
[38.36729813 267.18304443]
[41.99119186 252.62739563]
[45.61508942 238.07171631]
[39.68442154 231.07015991]
[37.70977020 221.96679688]
[40.28211594 212.86911011]
[46.92400742 205.94642639]
[56.17214203 202.91285706]
[61.11090088 188.74922180]
[66.04965973 174.58558655]
[70.98841858 160.42195129]
[75.92717743 146.25831604]
[80.86594391 132.09466553]
[85.80470276 117.93103027]
[78.88501740 108.78555298]
[77.27494812 97.43083191]
[81.37937927 86.72216034]
[90.16619110 79.35237122]
[101.42583466 77.17467499]
[107.21887970 63.33846664]
[99.27091217 53.43965530]
[96.37040710 41.15552139]
[99.02046967 28.88943863]
[106.64448547 19.01364517]
[117.71018219 13.41048145]
[130.03720093 13.11375332]
[136.66297913 -0.34355086]
[143.28877258 -13.80085468]
[149.91455078 -27.25815964]
[156.33433533 -40.81494141]
[162.54663086 -54.46804810]
[159.54684448 -74.28642273]
[175.43724060 -85.12451172]
[180.80564880 -99.13094330]
[186.17404175 -113.13738251]
[191.54244995 -127.14382172]
[196.91084290 -141.15025330]
[193.80424500 -157.25247192]
[206.37139893 -167.78804016]
[221.68431091 -161.91889954]
[223.99035645 -145.68270874]
[210.91728210 -135.78186035]
[205.54888916 -121.77542114]
[200.18048096 -107.76898193]
[194.81208801 -93.76255035]
[189.44367981 -79.75611115]
[194.50282288 -70.63944244]
[193.59722900 -60.02995682]
[186.78868103 -51.55670166]
[176.19973755 -48.25574493]
[169.98744202 -34.60263824]
[170.08390808 -27.08329964]
[163.37185669 -20.63237953]
[156.74606323 -7.17507458]
[150.12028503 6.28222942]
[143.49450684 19.73953438]
[152.44627380 34.80378342]
[150.67599487 52.39323425]
[138.69361877 65.60119629]
[121.05508423 69.13151550]
[115.26203918 82.96772003]
[122.85495758 99.17581940]
[116.44921875 115.88872528]
[99.96833801 122.86979675]
[95.02957916 137.03343201]
[90.09082031 151.19706726]
[85.15206146 165.36070251]
[80.21330261 179.52435303]
[75.27453613 193.68798828]
[70.33577728 207.85162354]
[75.86047363 228.43615723]
[60.17075348 241.69561768]
[56.54685593 256.25128174]
[52.92296219 270.80694580]
[53.88674927 280.06637573]
[48.96023178 285.74786377]
[44.89412689 300.18624878]
[40.82802582 314.62463379]
[36.76192474 329.06298828]
[40.46866989 344.44384766]
[29.57103729 354.59722900]
[25.50493431 369.03561401]
[21.43883324 383.47399902]
[32.91442108 393.53747559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 101]
[12 100]
[13 99]
[15 97]
[16 96]
[17 95]
[18 94]
[19 92]
[20 91]
[21 90]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[37 79]
[38 78]
[44 74]
[45 73]
[46 72]
[47 71]
[48 69]
[49 68]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
