%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCAGCCCAGCCCAGCCCCGCCUCCUACGGCCUUCCCUAGAUCAGGGGCCAGGGCCAAAGACCUCCCAGCAGAAGAGGAGAAGAGGUUGUGUGGGACAAGCUGCUCCCGACAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[137.28025818 442.76614380]
[138.98345947 427.74649048]
[145.03964233 413.89678955]
[154.91029358 402.44857788]
[167.71772766 394.41979980]
[163.83544922 379.93090820]
[159.95315552 365.44201660]
[156.07087708 350.95315552]
[141.64851379 347.23007202]
[130.95501709 336.71792603]
[126.93244934 322.16851807]
[130.75765991 307.46258545]
[141.50024414 296.57479858]
[137.61795044 282.08590698]
[133.73567200 267.59701538]
[129.85337830 253.10813904]
[116.39524078 250.42604065]
[105.36862946 242.14617920]
[98.97825623 229.85221863]
[98.53281403 215.93731689]
[104.17740631 203.13829041]
[114.85365295 193.99736023]
[111.35197449 179.41180420]
[107.85029602 164.82626343]
[104.34860992 150.24070740]
[100.84693146 135.65516663]
[85.95937347 132.78518677]
[73.60923004 123.99031067]
[66.02839661 110.85992432]
[64.58688354 95.76694489]
[69.54518890 81.43895721]
[58.66457748 71.11363983]
[47.78396225 60.78831863]
[36.90334320 50.46299744]
[26.02272987 40.13768005]
[15.14211369 29.81236076]
[3.99494147 19.77540207]
[-7.41114807 10.03368187]
[-18.81723785 0.29196092]
[-30.22332764 -9.44975948]
[-45.95725250 -7.96006536]
[-58.08277130 -18.09649849]
[-59.40603638 -33.84529114]
[-49.14197159 -45.86296844]
[-33.38006592 -47.01964951]
[-21.47158051 -36.62910080]
[-20.48160553 -20.85585022]
[-9.07551670 -11.11412811]
[2.33057284 -1.37240779]
[13.73666191 8.36931324]
[18.59925270 8.87507629]
[23.15940094 12.52252197]
[25.46743202 18.93174553]
[36.34804916 29.25706482]
[47.22866440 39.58238220]
[58.10927963 49.90770340]
[68.98989105 60.23302078]
[79.87051392 70.55834198]
[84.70164490 67.78248596]
[89.90616608 65.79295349]
[95.35703278 64.63829041]
[100.92122650 64.34667969]
[106.46292877 64.92524719]
[111.84690094 66.35986328]
[116.94172668 68.61551666]
[126.68344879 57.20943069]
[136.42517090 45.80334091]
[146.16688538 34.39725113]
[140.96441650 19.94630241]
[143.70021057 4.83303070]
[153.63836670 -6.87717152]
[168.10554504 -12.03431797]
[183.21017456 -9.25116253]
[194.88916016 0.72364008]
[200.00093079 15.20691776]
[197.17044067 30.30274200]
[187.15908813 41.95041275]
[172.65985107 47.01676178]
[157.57298279 44.13896942]
[147.83125305 55.54505920]
[138.08953857 66.95114899]
[128.34780884 78.35723877]
[135.60044861 97.85153961]
[130.74484253 118.07656097]
[115.43247986 132.15347290]
[118.93415833 146.73902893]
[122.43584442 161.32458496]
[125.93752289 175.91012573]
[129.43920898 190.49568176]
[145.28939819 194.99307251]
[156.66978455 206.77743530]
[160.56701660 222.59332275]
[156.01724243 238.13661194]
[144.34226990 249.22584534]
[148.22456360 263.71472168]
[152.10684204 278.20361328]
[155.98913574 292.69250488]
[170.73637390 296.75033569]
[181.40206909 307.57342529]
[185.19313049 322.18487549]
[181.18835449 336.63540649]
[170.55976868 347.07086182]
[174.44204712 361.55975342]
[178.32434082 376.04864502]
[182.20661926 390.53750610]
[197.31256104 391.08691406]
[211.58491516 396.06604004]
[223.75456238 405.03213501]
[232.73941040 417.18795776]
[237.74052429 431.45260620]
[238.31321716 446.55767822]
[234.40655518 461.16006470]
[226.36791992 473.96130371]
[214.91209412 483.82312012]
[201.05773926 489.86862183]
[186.03675842 491.56024170]
[171.18481445 488.74755859]
[157.82252502 481.68069458]
[147.13807678 470.98797607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 105]
[6 104]
[7 103]
[8 102]
[13 97]
[14 96]
[15 95]
[16 94]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 50]
[38 49]
[39 48]
[40 47]
[65 82]
[66 81]
[67 80]
[68 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
