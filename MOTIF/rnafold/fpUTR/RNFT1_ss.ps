%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGCGCGCGCCGCCGCCGUUGCCGCCGGGCUGAGAGAAGAGCUUGCGGGGUUUGCGGUUGAUGGCCCCGACUGAAGGGCUGGAGGCGGUGU\
) } def
/len { sequence length } bind def

/coor [
[67.41596222 244.32429504]
[61.31650543 258.49468994]
[48.51145935 267.09899902]
[33.08687210 267.39166260]
[19.96467018 259.27923584]
[13.33209991 245.35040283]
[15.30558968 230.04978943]
[25.25540733 218.25976562]
[40.00660324 213.74247742]
[43.96953201 199.27543640]
[47.93246460 184.80841064]
[51.89539719 170.34136963]
[55.85832596 155.87432861]
[59.82125854 141.40728760]
[63.78418732 126.94025421]
[67.74711609 112.47322083]
[65.49968719 97.64253998]
[57.42844772 84.99915314]
[49.35721207 72.35577393]
[41.28597641 59.71238708]
[33.21474075 47.06900406]
[16.72782898 39.08205032]
[16.40240288 21.62321281]
[7.91319609 9.25658989]
[-0.57601011 -3.11003399]
[-8.16941833 -8.55236721]
[-9.13414764 -16.03475571]
[-17.20538330 -28.67813873]
[-25.27661896 -41.32152176]
[-33.76582336 -53.68814468]
[-42.66352081 -65.76419830]
[-51.56121826 -77.84024811]
[-60.45891190 -89.91629791]
[-75.97415924 -89.67792511]
[-88.64697266 -98.63221741]
[-93.60440063 -113.33608246]
[-88.94020844 -128.13557434]
[-76.44787598 -137.33998108]
[-60.93095779 -137.41003418]
[-48.35602570 -128.31878662]
[-43.55839920 -113.56201935]
[-48.38286209 -98.81399536]
[-39.48516464 -86.73794556]
[-30.58747101 -74.66189575]
[-21.68977356 -62.58584213]
[-16.99258041 -60.98561859]
[-13.34116554 -56.29907990]
[-12.63323402 -49.39275742]
[-4.56199932 -36.74937439]
[3.50923610 -24.10598946]
[11.79061317 -11.59924030]
[20.27981949 0.76738310]
[28.76902580 13.13400650]
[40.71667480 15.71409988]
[47.86420441 26.12294388]
[45.85812759 38.99776840]
[53.92936325 51.64115143]
[62.00059891 64.28453827]
[70.07183075 76.92791748]
[78.14306641 89.57130432]
[86.35808563 81.00829315]
[97.29586029 77.61320496]
[108.10494232 79.85363007]
[116.16311646 86.77894592]
[119.71327209 96.35353851]
[134.41270447 99.34133148]
[149.11212158 102.32911682]
[163.81155396 105.31690979]
[178.51097107 108.30469513]
[189.85798645 97.72051239]
[205.26321411 95.86075592]
[218.80302429 103.44054413]
[225.27108765 117.54528809]
[222.18029785 132.75141907]
[210.71914673 143.21188354]
[195.29464722 144.90441895]
[181.83786011 137.17820740]
[175.52317810 123.00411987]
[160.82376099 120.01633453]
[146.12432861 117.02854156]
[131.42491150 114.04075623]
[116.72547913 111.05296326]
[110.73303223 118.15475464]
[101.79096985 122.05996704]
[91.57843781 121.59067535]
[82.21415710 116.43614960]
[78.25122833 130.90318298]
[74.28829193 145.37022400]
[70.32536316 159.83726501]
[66.36243439 174.30430603]
[62.39950180 188.77133179]
[58.43657303 203.23837280]
[54.47364044 217.70541382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[23 53]
[24 52]
[25 51]
[27 50]
[28 49]
[29 48]
[30 45]
[31 44]
[32 43]
[33 42]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
