%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGAGGUGACACCAGGAGGUAACCAGGUGGAAAUCACCCUCAAGUAGCAGAGACAGGUGUGCAAAGGCUCAGAGGGAGCUUCUCCAGGAUCAGCAGAGCUCGAUUGUAGGGUGUGAGGCUGUCACAGAGGCUGGAGAAAUAAGCAGUUCCUUGCUAAGAAGUCUGAAUUUUAACCUGAAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[-101.33597565 331.87554932]
[-115.50434113 324.10757446]
[-125.97645569 334.84698486]
[-136.44857788 345.58639526]
[-146.92070007 356.32577515]
[-150.68214417 364.67324829]
[-157.66009521 367.15576172]
[-168.31115723 377.71774292]
[-178.96220398 388.27969360]
[-189.61326599 398.84164429]
[-200.26432800 409.40362549]
[-210.55455017 420.31741333]
[-220.47233582 431.57073975]
[-230.39012146 442.82409668]
[-240.30790710 454.07742310]
[-243.62770081 469.54641724]
[-257.84747314 473.97888184]
[-267.76525879 485.23223877]
[-266.52026367 500.98739624]
[-276.84387207 512.95391846]
[-292.61132812 514.03234863]
[-304.46807861 503.58276367]
[-305.37966919 487.80477905]
[-294.80532837 476.05917358]
[-279.01861572 475.31445312]
[-269.10083008 464.06109619]
[-266.49041748 449.39703369]
[-251.56124878 444.15963745]
[-241.64346313 432.90631104]
[-231.72567749 421.65295410]
[-221.80787659 410.39962769]
[-221.86170959 407.57708740]
[-220.78890991 404.56320190]
[-218.51091003 401.79135132]
[-215.10891724 399.71527100]
[-210.82627869 398.75256348]
[-200.17523193 388.19061279]
[-189.52416992 377.62863159]
[-178.87310791 367.06668091]
[-168.22206116 356.50473022]
[-157.66009521 345.85366821]
[-147.18797302 335.11425781]
[-136.71585083 324.37484741]
[-126.24373627 313.63546753]
[-133.42529297 301.85742188]
[-137.56896973 288.68927002]
[-138.42736816 274.90133667]
[-135.94540405 261.30139160]
[-130.26388550 248.68737793]
[-121.71141815 237.80056763]
[-110.78552246 229.28195190]
[-98.12361145 223.63455200]
[-84.46585083 221.19371033]
[-70.61186218 222.10717773]
[-57.37392044 226.32617188]
[-45.52933884 233.60797119]
[-34.70235443 223.22642517]
[-23.87536812 212.84487915]
[-13.04838371 202.46333313]
[-2.22139931 192.08180237]
[-8.63116837 176.73329163]
[-8.66301537 160.06344604]
[-2.28390455 144.62269592]
[9.55619812 132.78421021]
[25.06568336 126.37917328]
[41.88236618 126.41358948]
[57.43325806 132.91035461]
[67.90538025 122.17095947]
[78.37749481 111.43156433]
[88.84961700 100.69216156]
[99.23116302 89.86517334]
[109.52139282 78.95137024]
[119.62682343 67.86623383]
[129.54461670 56.61290359]
[139.36752319 45.27666092]
[149.09486389 33.85830688]
[158.82220459 22.43995094]
[168.54954529 11.02159500]
[178.27688599 -0.39675957]
[188.00422668 -11.81511497]
[197.73156738 -23.23346901]
[207.45890808 -34.65182495]
[216.49842834 -46.62208176]
[224.81887817 -59.10287094]
[233.13934326 -71.58365631]
[241.45979309 -84.06444550]
[249.78024292 -96.54523468]
[258.10070801 -109.02602386]
[266.42114258 -121.50680542]
[273.99377441 -134.45498657]
[280.79241943 -147.82580566]
[281.89721680 -156.91470337]
[287.81921387 -161.36268616]
[294.84149170 -174.61740112]
[301.86376953 -187.87211609]
[308.88607788 -201.12683105]
[300.43060303 -217.14674377]
[303.24346924 -234.88249207]
[316.01553345 -247.28131104]
[333.51547241 -249.52706909]
[340.08850098 -263.01019287]
[346.66156006 -276.49334717]
[353.23461914 -289.97647095]
[346.70672607 -304.18637085]
[350.88983154 -319.25405884]
[363.80880737 -328.06506348]
[379.36370850 -326.45910645]
[390.20999146 -315.19445801]
[391.22634888 -299.58993530]
[381.93292236 -287.01354980]
[366.71774292 -283.40344238]
[360.14468384 -269.92028809]
[353.57165527 -256.43716431]
[346.99859619 -242.95402527]
[354.23736572 -233.17929077]
[356.63946533 -221.18188477]
[353.68737793 -209.23339844]
[345.88323975 -199.62294006]
[334.66482544 -194.21862793]
[322.14077759 -194.10455322]
[315.11849976 -180.84983826]
[308.09622192 -167.59512329]
[301.07391357 -154.34040833]
[294.16320801 -141.02717590]
[287.36459351 -127.65635681]
[301.64764404 -132.23829651]
[315.58728027 -126.69871521]
[322.82925415 -113.56275177]
[320.07244873 -98.81826019]
[308.57351685 -89.18631744]
[293.57406616 -89.05752563]
[281.91140747 -98.49058533]
[278.90194702 -113.18635559]
[270.58148193 -100.70556641]
[262.26104736 -88.22477722]
[253.94058228 -75.74399567]
[245.62013245 -63.26320648]
[237.29966736 -50.78241730]
[228.97921753 -38.30162811]
[243.70121765 -41.17610931]
[256.89462280 -34.03926468]
[262.54534912 -20.14433479]
[258.07763672 -5.82513428]
[245.52799988 2.39111757]
[230.61705017 0.75915283]
[220.14172363 -9.97711945]
[218.87727356 -24.92448235]
[209.14993286 -13.50612831]
[199.42257690 -2.08777308]
[189.69523621 9.33058167]
[179.96789551 20.74893761]
[170.24055481 32.16729355]
[160.51321411 43.58564758]
[150.78587341 55.00400162]
[148.83747864 62.14952087]
[140.79794312 66.53069305]
[130.88015747 77.78402710]
[130.28428650 82.54171753]
[126.67987061 86.96943665]
[120.43519592 89.24160004]
[110.14496613 100.15540314]
[107.33812714 107.73085785]
[99.58901978 111.16428375]
[89.11689758 121.90367889]
[78.64477539 132.64308167]
[68.17265320 143.38247681]
[74.16213226 155.43966675]
[76.13578033 168.73405457]
[73.91490936 181.96626282]
[67.73014069 193.84736633]
[58.19746780 203.22447205]
[46.25700760 209.19253540]
[33.08024597 211.18177795]
[19.95512199 209.01199341]
[8.16014194 202.90878296]
[-2.66684270 213.29032898]
[-13.49382782 223.67185974]
[-24.32081223 234.05340576]
[-35.14779663 244.43495178]
[-27.50959396 258.81588745]
[-24.21774292 274.74899292]
[-25.52924156 290.95169067]
[-31.33084869 306.12188721]
[-41.14881134 319.04275513]
[-54.18754959 328.68017578]
[-69.39411163 334.26565552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 31]
[13 30]
[14 29]
[15 28]
[17 26]
[18 25]
[56 179]
[57 178]
[58 177]
[59 176]
[60 175]
[67 166]
[68 165]
[69 164]
[70 163]
[71 161]
[72 160]
[73 157]
[74 156]
[75 154]
[76 153]
[77 152]
[78 151]
[79 150]
[80 149]
[81 148]
[82 147]
[83 139]
[84 138]
[85 137]
[86 136]
[87 135]
[88 134]
[89 133]
[90 125]
[91 124]
[93 123]
[94 122]
[95 121]
[96 120]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
