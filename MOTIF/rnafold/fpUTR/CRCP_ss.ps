%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUCCCGGCAUGCAGCGCGGCGAUCCCGGCGAGCACCUUGGCGCGCGGAGCUGGCACCUUGGCGCUGUUGGUGGCGGCGGAGACAGCUGUGAAGUGUGAGGUUCUUUGUCUGCUGGCAGCUAGGGGCGACGAGGCGGGACGUC\
) } def
/len { sequence length } bind def

/coor [
[93.70610046 250.46580505]
[86.05226135 235.96234131]
[95.01354218 222.22816467]
[95.33628082 207.23164368]
[95.49766541 192.23249817]
[95.49766541 177.23249817]
[95.49766541 162.23249817]
[95.49766541 147.23249817]
[95.49766541 132.23249817]
[74.01505280 112.78382111]
[77.95047760 87.44531250]
[67.69168854 76.50194550]
[57.43289566 65.55858612]
[47.17410660 54.61522293]
[36.91531372 43.67185974]
[21.35294914 43.00059891]
[11.10496902 31.75633240]
[11.84081745 16.92413521]
[1.58202577 5.98077106]
[-8.67676544 -4.96259212]
[-18.93555641 -15.90595531]
[-29.19434738 -26.84931946]
[-39.45314026 -37.79268265]
[-55.01550293 -38.46393967]
[-65.26348114 -49.70820618]
[-64.52763367 -64.54040527]
[-74.78643036 -75.48377228]
[-85.16236115 -86.31613159]
[-95.65423584 -97.03623199]
[-106.14611053 -107.75633240]
[-121.32839966 -112.20702362]
[-124.70095062 -126.71479034]
[-135.19282532 -137.43489075]
[-148.10470581 -138.36691284]
[-156.62518311 -147.57263184]
[-156.56082153 -159.71435547]
[-166.81962585 -170.65771484]
[-177.07841492 -181.60107422]
[-187.33720398 -192.54444885]
[-193.65397644 -194.86312866]
[-197.25991821 -199.37338257]
[-197.78938293 -204.18630981]
[-207.56787109 -215.56089783]
[-217.34635925 -226.93548584]
[-227.24664307 -238.20420837]
[-237.26760864 -249.36576843]
[-247.28855896 -260.52731323]
[-257.30950928 -271.68887329]
[-272.28628540 -276.78863525]
[-275.03155518 -291.42807007]
[-285.05252075 -302.58963013]
[-295.07345581 -313.75119019]
[-310.69519043 -313.04705811]
[-323.08325195 -322.59011841]
[-326.38836670 -337.87445068]
[-319.04998779 -351.68319702]
[-304.53305054 -357.49636841]
[-289.69201660 -352.56909180]
[-281.53436279 -339.22793579]
[-283.91189575 -323.77212524]
[-273.89096069 -312.61056519]
[-263.86999512 -301.44903564]
[-249.61000061 -297.14761353]
[-246.14796448 -281.70983887]
[-236.12699890 -270.54827881]
[-226.10604858 -259.38671875]
[-216.08508301 -248.22517395]
[-209.22642517 -245.32826233]
[-205.97177124 -236.71397400]
[-196.19328308 -225.33938599]
[-186.41479492 -213.96479797]
[-176.39384460 -202.80323792]
[-166.13504028 -191.85987854]
[-155.87625122 -180.91650391]
[-145.61746216 -169.97314453]
[-128.59410095 -165.83935547]
[-124.47272491 -147.92675781]
[-113.98085022 -137.20666504]
[-99.54901123 -133.52273560]
[-95.42601013 -118.24820709]
[-84.93413544 -107.52810669]
[-74.44226074 -96.80800629]
[-67.46530914 -94.20885468]
[-63.84306335 -85.74256134]
[-53.58427429 -74.79919434]
[-38.73550034 -74.57671356]
[-28.17573357 -63.62472534]
[-28.50977707 -48.05147171]
[-18.25098419 -37.10810852]
[-7.99219370 -26.16474724]
[2.26659775 -15.22138309]
[12.52538872 -4.27801991]
[22.78417969 6.66534328]
[37.63295364 6.88782978]
[48.19271851 17.83981514]
[47.85867691 33.41306686]
[58.11746979 44.35643005]
[68.37625885 55.29979324]
[78.63504791 66.24315643]
[88.89384460 77.18652344]
[98.50259399 73.47361755]
[109.26605225 73.82790375]
[119.46127319 78.55466461]
[127.31837463 87.23234558]
[131.32431030 98.72946167]
[130.50338745 111.34674835]
[143.70356750 118.47101593]
[156.90374756 125.59528351]
[170.10394287 132.71954346]
[183.30412292 139.84381104]
[196.50430298 146.96807861]
[209.70448303 154.09234619]
[218.81506348 155.43261719]
[223.10961914 161.51455688]
[236.15347290 168.92118835]
[249.19731140 176.32781982]
[262.40228271 168.48408508]
[277.76019287 168.30973816]
[291.13980103 175.85168457]
[298.94213867 189.08117676]
[299.06832886 204.43954468]
[291.48449707 217.79547119]
[278.23062134 225.55627441]
[262.87191772 225.63435364]
[249.53982544 218.00868225]
[241.82060242 204.73052979]
[241.79067993 189.37167358]
[228.74682617 181.96502686]
[215.70298767 174.55839539]
[202.58021545 167.29252625]
[189.38003540 160.16825867]
[176.17985535 153.04400635]
[162.97967529 145.91973877]
[149.77949524 138.79547119]
[136.57929993 131.67120361]
[123.37911987 124.54693604]
[110.49766541 132.23249817]
[110.49766541 147.23249817]
[110.49766541 162.23249817]
[110.49766541 177.23249817]
[110.49766541 192.23249817]
[113.64528656 200.88647461]
[110.33280945 207.55438232]
[110.01007080 222.55090332]
[118.37217712 236.65789795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 144]
[4 143]
[5 141]
[6 140]
[7 139]
[8 138]
[9 137]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[26 85]
[27 84]
[28 82]
[29 81]
[30 80]
[32 78]
[33 77]
[36 75]
[37 74]
[38 73]
[39 72]
[42 71]
[43 70]
[44 69]
[45 67]
[46 66]
[47 65]
[48 64]
[50 62]
[51 61]
[52 60]
[106 136]
[107 135]
[108 134]
[109 133]
[110 132]
[111 131]
[112 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
