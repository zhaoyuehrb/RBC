%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAGGGGCGGGGCCUAUGAGAUCCCGGCCUCAGGGUGGACGCAGUGGUUCUGCACUGAGGCCCUCGUC\
) } def
/len { sequence length } bind def

/coor [
[98.29240417 163.03024292]
[84.70848083 156.66809082]
[75.89117432 144.53321838]
[74.03676605 129.64828491]
[79.60717010 115.72095490]
[91.21651459 106.21958923]
[76.39603424 103.90586090]
[61.57555771 101.59212494]
[46.75507736 99.27838898]
[31.93459511 96.96466064]
[17.10611343 102.48069763]
[5.72463131 92.87282562]
[-9.09584904 90.55908966]
[-23.91633034 88.24536133]
[-33.49296188 100.25300598]
[-47.79624939 105.84867859]
[-62.97867966 103.52716827]
[-74.95625305 93.91294098]
[-80.50706482 79.59218597]
[-78.13796997 64.41710663]
[-68.48625183 52.46973038]
[-54.14816284 46.96383286]
[-38.98058701 49.38048172]
[-27.06352043 59.06960678]
[-21.60259628 73.42488098]
[-6.78211498 75.73860931]
[8.03836536 78.05234528]
[21.80678749 72.37081146]
[34.24832916 82.14418030]
[49.06880951 84.45790863]
[63.88928986 86.77164459]
[78.70977020 89.08538055]
[93.53025055 91.39911652]
[108.49722290 90.40426636]
[122.88108826 86.14934540]
[137.26495361 81.89441681]
[151.64881897 77.63948822]
[166.03268433 73.38455963]
[168.79252625 62.50242615]
[175.90896606 53.92644119]
[185.94567871 49.27642059]
[196.92410278 49.39085007]
[206.71337891 54.17657852]
[213.44395447 62.64066315]
[228.26443481 60.32692719]
[243.08491516 58.01319504]
[257.90539551 55.69945908]
[272.72589111 53.38572693]
[281.84005737 40.47420883]
[297.42855835 37.87145996]
[310.24298096 47.12163925]
[312.68078613 62.73678207]
[303.29565430 75.45270538]
[287.65560913 77.72526550]
[275.03961182 68.20620728]
[260.21911621 70.51994324]
[245.39865112 72.83367157]
[230.57817078 75.14740753]
[215.75769043 77.46114349]
[205.91178894 93.93093872]
[186.95298767 98.40789795]
[170.28761292 87.76842499]
[155.90374756 92.02335358]
[141.51988220 96.27828217]
[127.13601685 100.53321075]
[112.75215149 104.78813171]
[125.51564789 112.66806030]
[132.88117981 125.73515320]
[133.01406860 140.73455811]
[125.88121796 153.93011475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[12 27]
[13 26]
[14 25]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
