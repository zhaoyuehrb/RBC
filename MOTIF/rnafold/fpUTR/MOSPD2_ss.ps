%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCUCCCCCUCCCACCCUUCUCUGUCUACCUCUGGGCGGGACUGCCGGGUGAUGAGAUACUCGGUCGGCGACGGUAGAACGGGCGACGGCGACAACCGCAAUCACAUCCACGACGGUGAUC\
) } def
/len { sequence length } bind def

/coor [
[179.92027283 234.36883545]
[181.01185608 223.60392761]
[185.69372559 213.80642700]
[175.98788452 202.36978149]
[166.28204346 190.93315125]
[156.57620239 179.49650574]
[146.72741699 168.18273926]
[136.73724365 156.99362183]
[122.48915863 152.65296936]
[119.06964874 137.20571899]
[109.07946777 126.01659393]
[99.08929443 114.82747650]
[85.00828552 109.65783691]
[70.15135956 111.72468567]
[55.29444122 113.79154205]
[40.43751907 115.85839844]
[27.83510590 125.42342377]
[14.16310978 119.51361847]
[-0.69381201 121.58047485]
[-15.55073357 123.64733124]
[-18.69874763 138.47520447]
[-26.73097610 151.33052063]
[-38.67749023 160.66093445]
[-53.09568787 165.33975220]
[-68.24450684 164.80198669]
[-82.29464722 159.11257935]
[-93.54948425 148.95854187]
[-100.64994812 135.56604004]
[-102.73862457 120.55227661]
[-99.56329346 105.73022461]
[-91.50738525 92.88973999]
[-79.54369354 83.58135986]
[-65.11689758 78.92911530]
[-49.96910095 79.49479675]
[-35.92947006 85.21008301]
[-24.69336128 95.38484192]
[-17.61758804 108.79041290]
[-2.76066637 106.72355652]
[12.09625530 104.65670013]
[23.63600159 95.23950958]
[38.37066650 101.00148010]
[53.22758484 98.93462372]
[68.08451080 96.86776733]
[82.94142914 94.80091095]
[92.79021454 83.48714447]
[92.79021454 68.48714447]
[92.79021454 53.48714447]
[92.79021454 38.48714447]
[92.79021454 23.48714256]
[92.79021454 8.48714256]
[78.90783691 -4.27458954]
[78.64885712 -22.81336021]
[91.71588135 -35.51678085]
[90.96221924 -50.49783707]
[90.20855713 -65.47888947]
[89.45488739 -80.45994568]
[88.51303101 -95.43034363]
[87.38313293 -110.38773346]
[86.25322723 -125.34511566]
[79.03095245 -140.68379211]
[91.77087402 -151.86997986]
[106.04666138 -142.72459412]
[101.21060944 -126.47501373]
[102.34051514 -111.51763153]
[103.47041321 -96.56024933]
[107.15270233 -90.05478668]
[104.43594360 -81.21360779]
[105.18961334 -66.23255920]
[105.94327545 -51.25150299]
[106.69693756 -36.27044678]
[116.72122192 -30.55467606]
[122.75984955 -20.58026505]
[123.18621063 -8.80747032]
[117.77530670 1.79245198]
[107.79021454 8.48714256]
[107.79021454 23.48714256]
[107.79021454 38.48714447]
[107.79021454 53.48714447]
[107.79021454 68.48714447]
[107.79021454 83.48714447]
[112.23712158 88.88186646]
[113.93610382 94.99084473]
[113.06970215 100.62007904]
[110.27841187 104.83730316]
[120.26858521 116.02642059]
[130.25875854 127.21553802]
[145.22142029 132.35652161]
[147.92636108 147.00344849]
[157.91653442 158.19256592]
[166.06185913 162.57444763]
[168.01284790 169.79067993]
[177.71868896 181.22731018]
[187.42451477 192.66395569]
[197.13035583 204.10058594]
[216.80665588 201.43492126]
[234.06495667 210.96498108]
[242.17245483 228.78039551]
[238.08139038 247.77702332]
[248.88603210 258.18182373]
[259.69067383 268.58660889]
[270.49530029 278.99142456]
[275.78482056 280.28787231]
[279.60437012 283.24063110]
[281.56246948 286.98025513]
[281.68441772 290.61050415]
[291.67459106 301.79962158]
[307.09924316 300.10839844]
[320.55538940 307.83572388]
[326.86886597 322.01031494]
[323.61206055 337.18176270]
[312.03723145 347.51632690]
[296.59515381 349.04016113]
[283.22363281 341.16729736]
[277.06427002 326.92501831]
[280.48547363 311.78979492]
[270.49530029 300.60070801]
[260.09051514 289.79605103]
[249.28587341 279.39126587]
[238.48123169 268.98645020]
[227.67658997 258.58166504]
[217.90937805 262.67095947]
[207.29634094 263.22097778]
[197.08489990 260.14089966]
[188.48411560 253.76824951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 89]
[8 88]
[10 86]
[11 85]
[12 84]
[13 44]
[14 43]
[15 42]
[16 41]
[18 39]
[19 38]
[20 37]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[53 70]
[54 69]
[55 68]
[56 67]
[57 65]
[58 64]
[59 63]
[98 120]
[99 119]
[100 118]
[101 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
