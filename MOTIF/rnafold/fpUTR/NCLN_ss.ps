%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGCCCACAGGACCUCAGGGCGAGUGCGGGCUGCCCCGCGCGGCGCCCGCAGGACCCCGGCGGCUACCCAUGCCGAGGUGAGUCCGCGGGAGCCGCCGCCGCCGCCGUCCCGUCCCAGCUGCCGCCCCGCGCGGCCCCGCCGCCGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[285.42483521 413.50967407]
[277.88098145 400.54470825]
[270.33712769 387.57974243]
[262.79330444 374.61474609]
[255.24946594 361.64978027]
[247.57463074 348.76193237]
[239.76957703 335.95251465]
[221.78742981 332.75927734]
[211.62602234 317.20263672]
[216.07824707 298.83551025]
[207.76049805 286.35290527]
[194.26425171 280.05209351]
[193.05059814 264.27749634]
[184.73284912 251.79490662]
[176.41510010 239.31231689]
[168.09735107 226.82971191]
[155.96214294 228.14002991]
[144.36045837 224.12088013]
[135.53295898 215.48309326]
[131.21238708 203.83566284]
[132.28359985 191.38632202]
[138.60313416 180.52299500]
[130.79809570 167.71357727]
[122.99304199 154.90415955]
[115.18798828 142.09474182]
[108.98538971 137.99505615]
[107.35759735 128.94566345]
[99.81375885 115.98069763]
[86.34668732 109.37478638]
[71.47667694 111.34523773]
[56.60666275 113.31568909]
[41.73664856 115.28614044]
[26.86663437 117.25659180]
[14.20158386 127.67429352]
[-1.05581880 121.66233063]
[-3.21006703 105.40529633]
[9.95494556 95.62702942]
[24.89618301 102.38657379]
[39.76619720 100.41612244]
[54.63621140 98.44567108]
[69.50622559 96.47521973]
[84.37623596 94.50476837]
[92.69398499 82.02217865]
[88.78723145 67.53987122]
[84.88048553 53.05755997]
[80.97373199 38.57525253]
[77.06697845 24.09294128]
[66.00245667 12.78423214]
[70.15789795 -1.51896822]
[66.25115204 -16.00127792]
[62.34439468 -30.48358727]
[58.43764496 -44.96589661]
[54.53089142 -59.44820786]
[49.24483871 -66.97142792]
[50.69490051 -74.26367950]
[47.08246231 -88.82218933]
[43.47002411 -103.38070679]
[39.85758591 -117.93921661]
[35.80427170 -132.38119507]
[31.31382561 -146.69328308]
[26.67856979 -160.95912170]
[21.89898300 -175.17726135]
[17.11939621 -189.39541626]
[12.33980942 -203.61355591]
[7.56022263 -217.83169556]
[-7.28498459 -222.34826660]
[-16.61334991 -234.74832153]
[-16.83792877 -250.26376343]
[-7.87236452 -262.92861938]
[6.83590031 -267.87295532]
[21.63123703 -263.19561768]
[30.82453728 -250.69509888]
[30.88079071 -235.17811584]
[21.77836418 -222.61128235]
[26.55795097 -208.39314270]
[31.33753777 -194.17500305]
[36.11712646 -179.95684814]
[40.89671326 -165.73870850]
[46.03931808 -160.36906433]
[45.62591553 -151.18373108]
[50.11635971 -136.87164307]
[53.11593246 -134.91458130]
[55.29232407 -131.37879944]
[55.90092087 -126.67883301]
[54.41609955 -121.55165100]
[58.02853775 -106.99314117]
[61.64097595 -92.43463135]
[65.25341034 -77.87611389]
[69.01319885 -63.35495758]
[72.91995239 -48.87265015]
[76.82670593 -34.39033890]
[80.73345947 -19.90802956]
[84.64021301 -5.42572069]
[95.42529297 4.84711790]
[91.54928589 20.18618965]
[95.45603943 34.66849899]
[99.36279297 49.15081024]
[103.26954651 63.63311768]
[107.17629242 78.11542511]
[118.10487366 93.69326782]
[112.77873230 108.43685913]
[120.32257080 121.40183258]
[127.99740601 134.28968811]
[135.80245972 147.09910583]
[143.60751343 159.90852356]
[151.41255188 172.71794128]
[169.47309875 173.61656189]
[183.28713989 185.04141235]
[187.48480225 202.30841064]
[180.57994080 218.51197815]
[188.89768982 230.99456787]
[197.21543884 243.47715759]
[205.53318787 255.95974731]
[219.62437439 263.15341187]
[220.24308777 278.03515625]
[228.56083679 290.51776123]
[240.51931763 290.54537964]
[250.86045837 296.30780029]
[257.04858398 306.25863647]
[257.63131714 317.84176636]
[252.57899475 328.14746094]
[260.38403320 340.95687866]
[267.56494141 346.69934082]
[268.21444702 354.10595703]
[275.75827026 367.07092285]
[283.30212402 380.03588867]
[290.84594727 393.00085449]
[298.38980103 405.96582031]
[319.47418213 415.59957886]
[319.21328735 438.04650879]
[328.03005981 450.18176270]
[336.84683228 462.31701660]
[344.46920776 467.45907593]
[345.71636963 474.78875732]
[354.28540039 487.10021973]
[362.85443115 499.41165161]
[371.42343140 511.72311401]
[379.99246216 524.03454590]
[394.00347900 533.58068848]
[388.70907593 549.68676758]
[371.76678467 549.05786133]
[367.68103027 532.60357666]
[359.11199951 520.29211426]
[350.54296875 507.98068237]
[341.97393799 495.66921997]
[333.40493774 483.35778809]
[324.71157837 471.13378906]
[315.89480591 458.99853516]
[307.07803345 446.86328125]
[299.85647583 447.55673218]
[292.78491211 445.65350342]
[286.77566528 441.34945679]
[282.62124634 435.15319824]
[280.89022827 427.82638550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 125]
[5 124]
[6 122]
[7 121]
[10 116]
[11 115]
[13 113]
[14 112]
[15 111]
[16 110]
[22 106]
[23 105]
[24 104]
[25 103]
[27 102]
[28 101]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 81]
[60 80]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[130 149]
[131 148]
[132 147]
[134 146]
[135 145]
[136 144]
[137 143]
[138 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
