%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGGGGUGGCCCGUAGAAGAUUCCAGCACCCUCCCCUAACUCCAGGCCAGACUCUAAAGGGGAGAUCUGG\
) } def
/len { sequence length } bind def

/coor [
[100.42406464 141.51869202]
[82.89750671 137.83499146]
[68.55289459 127.11201477]
[60.05908203 111.34479523]
[58.99634552 93.46686554]
[44.85318375 88.46976471]
[30.71002388 83.47267151]
[16.56686211 78.47557068]
[2.42369986 73.47847748]
[-13.16577435 76.17641449]
[-22.58842850 64.64112854]
[-36.73159027 59.64403152]
[-46.92657089 70.88404846]
[-60.61131287 77.34709167]
[-75.68717957 78.07644653]
[-89.85533905 72.99207306]
[-100.96730804 62.89806366]
[-107.35073090 49.35564041]
[-108.06105042 34.44173050]
[-122.20420837 29.44463348]
[-138.21887207 32.97486877]
[-149.08226013 20.68996811]
[-143.61904907 5.22758198]
[-127.44932556 2.49408817]
[-117.20711517 15.30147076]
[-103.06394958 20.29856873]
[-93.14208221 9.14124680]
[-79.66793060 2.61495113]
[-64.68115997 1.74221313]
[-50.46372223 6.68711185]
[-39.19235229 16.72553444]
[-32.60534668 30.35103989]
[-31.73449326 45.50086975]
[-17.59133148 50.49796677]
[-3.01347184 47.44260025]
[7.42079687 59.33531189]
[21.56395912 64.33241272]
[35.70711899 69.32950592]
[49.85028076 74.32660675]
[63.99344254 79.32369995]
[71.55467987 69.75359344]
[81.57041168 62.79339218]
[93.17639923 59.04368210]
[105.37117767 58.82801819]
[117.10249329 62.16501236]
[127.35806274 68.76671600]
[135.25296021 78.06348419]
[140.10594177 89.25312042]
[141.49824524 101.37007904]
[139.30975342 113.36881256]
[152.40495300 120.68424225]
[165.50016785 127.99966431]
[178.59538269 135.31509399]
[191.69059753 142.63050842]
[204.93812561 149.66633606]
[218.33201599 156.41938782]
[231.72590637 163.17245483]
[245.11979675 169.92550659]
[260.74526978 166.28901672]
[273.24084473 176.35081482]
[273.02099609 192.39236450]
[260.25436401 202.10794067]
[244.73442078 198.04461670]
[238.36672974 183.31939697]
[224.97285461 176.56634521]
[211.57896423 169.81327820]
[198.18507385 163.06022644]
[190.56773376 162.85620117]
[184.37516785 155.72572327]
[171.27995300 148.41029358]
[158.18475342 141.09487915]
[145.08953857 133.77944946]
[131.99432373 126.46402740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[11 34]
[12 33]
[19 26]
[20 25]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
