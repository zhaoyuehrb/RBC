%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:30 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MIB2)
} def

/sequence { (\
ACUUCCGGUGCUUGCCCUGCCCAUCCCCGUGGCGGGGGCGUGGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.241817522 ubox
2 8 0.255985433 ubox
2 43 0.007118047 ubox
3 7 0.230773772 ubox
3 42 0.006868416 ubox
4 43 0.011348057 ubox
5 42 0.014801781 ubox
5 43 0.122522163 ubox
6 19 0.005898772 ubox
6 40 0.005408986 ubox
6 42 0.123935142 ubox
7 13 0.004163384 ubox
7 16 0.064800716 ubox
7 17 0.014283038 ubox
7 18 0.006254739 ubox
7 22 0.011291809 ubox
7 39 0.003811432 ubox
7 41 0.112273958 ubox
7 45 0.668616511 ubox
8 15 0.065037699 ubox
8 16 0.013758104 ubox
8 17 0.006315373 ubox
8 21 0.011340689 ubox
8 39 0.034248241 ubox
8 41 0.024883958 ubox
8 44 0.671908511 ubox
9 14 0.062468157 ubox
9 38 0.034296891 ubox
9 40 0.057029854 ubox
9 42 0.073147127 ubox
9 43 0.660274743 ubox
10 20 0.014841027 ubox
10 39 0.120087368 ubox
10 41 0.105336274 ubox
10 44 0.709666699 ubox
11 19 0.014860801 ubox
11 36 0.027101574 ubox
11 38 0.120045947 ubox
11 40 0.117388557 ubox
11 43 0.713185623 ubox
12 35 0.027070222 ubox
12 37 0.031686135 ubox
12 38 0.007091721 ubox
12 42 0.673077284 ubox
12 43 0.004679018 ubox
13 34 0.027015622 ubox
13 36 0.003560126 ubox
13 40 0.780534340 ubox
13 42 0.009779103 ubox
14 33 0.027108846 ubox
14 39 0.929203324 ubox
14 41 0.003911275 ubox
14 44 0.117968891 ubox
15 32 0.027048008 ubox
15 36 0.013791075 ubox
15 37 0.422556891 ubox
15 38 0.894667336 ubox
15 43 0.118311239 ubox
16 31 0.026940492 ubox
16 35 0.013746833 ubox
16 36 0.492950726 ubox
16 37 0.858454020 ubox
16 42 0.118193075 ubox
16 43 0.006424643 ubox
17 34 0.013599249 ubox
17 35 0.553621019 ubox
17 36 0.820601240 ubox
17 42 0.007864592 ubox
17 43 0.006514082 ubox
18 29 0.021740967 ubox
18 34 0.607815679 ubox
18 35 0.778222704 ubox
18 40 0.115677917 ubox
18 42 0.006573133 ubox
19 28 0.022119616 ubox
19 30 0.013731296 ubox
19 33 0.660107560 ubox
19 39 0.118369487 ubox
19 41 0.009701304 ubox
19 44 0.062370018 ubox
20 29 0.014292186 ubox
20 32 0.575557498 ubox
20 35 0.006119104 ubox
20 36 0.005465747 ubox
20 37 0.004518983 ubox
20 38 0.118052801 ubox
20 40 0.009926708 ubox
20 43 0.058739540 ubox
21 31 0.474945922 ubox
21 32 0.805178113 ubox
21 34 0.005837252 ubox
21 35 0.007686456 ubox
21 36 0.006248066 ubox
21 37 0.109932098 ubox
21 38 0.004735996 ubox
21 42 0.054547149 ubox
21 43 0.036723531 ubox
22 31 0.868214386 ubox
22 34 0.007815265 ubox
22 35 0.007586276 ubox
22 36 0.099183444 ubox
22 37 0.004663221 ubox
22 42 0.042873735 ubox
23 30 0.911182431 ubox
23 41 0.047733675 ubox
24 29 0.853229641 ubox
24 32 0.005843764 ubox
24 35 0.061924768 ubox
24 37 0.003353269 ubox
24 38 0.041651443 ubox
24 40 0.044538863 ubox
25 31 0.006466759 ubox
25 32 0.033318281 ubox
25 34 0.068584032 ubox
25 35 0.016786161 ubox
25 36 0.020139191 ubox
25 37 0.065995722 ubox
25 38 0.050304944 ubox
26 31 0.033327333 ubox
26 32 0.078047007 ubox
26 34 0.016762814 ubox
26 35 0.027950707 ubox
26 36 0.078727849 ubox
26 37 0.050337617 ubox
26 38 0.004307547 ubox
27 31 0.077534572 ubox
27 34 0.027679884 ubox
27 35 0.089582088 ubox
27 36 0.050318688 ubox
27 37 0.004300622 ubox
28 34 0.089709233 ubox
28 35 0.050289022 ubox
28 36 0.004289379 ubox
29 33 0.084042435 ubox
37 45 0.004351565 ubox
38 44 0.009289099 ubox
39 43 0.009242638 ubox
7 45 0.9500000 lbox
8 44 0.9500000 lbox
9 43 0.9500000 lbox
13 40 0.9500000 lbox
14 39 0.9500000 lbox
15 38 0.9500000 lbox
16 37 0.9500000 lbox
17 36 0.9500000 lbox
18 35 0.9500000 lbox
21 32 0.9500000 lbox
22 31 0.9500000 lbox
23 30 0.9500000 lbox
24 29 0.9500000 lbox
showpage
end
%%EOF
