%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGACAGGUGACUAGAAAUAUUAAAACAAAAACAAAAAAAAAGAGAGAGAGAGAAAAAGGAAAGAGAAAAUACAUAUUUCUUCCCCUUACUAAGCUAGCGAAAAUAAAAUUUAAGGCAACUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[77.13719177 477.12771606]
[64.03684235 469.11047363]
[56.71433258 455.60949707]
[57.13938141 440.25646973]
[65.19766235 427.18130493]
[78.72152710 419.90115356]
[79.08964539 404.90567017]
[79.45776367 389.91018677]
[72.03513336 376.99688721]
[80.10877991 363.39074707]
[80.47689819 348.39526367]
[77.46417236 341.55926514]
[81.04255676 333.03753662]
[81.77857208 318.05560303]
[71.61682892 307.22625732]
[72.14982605 292.02197266]
[83.57753754 281.43682861]
[84.31355286 266.45489502]
[85.04956818 251.47296143]
[85.78558350 236.49102783]
[78.68209839 223.39942932]
[87.08721924 209.99552917]
[87.82323456 195.01361084]
[88.55924988 180.03167725]
[80.68884277 178.50502014]
[73.00833893 176.20635986]
[65.59326172 173.15829468]
[58.51654434 169.39079285]
[51.84777069 164.94091797]
[45.65251923 159.85240173]
[39.99171829 154.17532349]
[34.92103195 147.96548462]
[30.49032593 141.28395081]
[26.74317169 134.19644165]
[23.71641731 126.77263641]
[21.43982887 119.08556366]
[19.93579292 111.21080017]
[19.21910095 103.22579193]
[19.29680252 95.20906067]
[20.16812897 87.23944855]
[21.82451630 79.39531708]
[24.24967384 71.75380707]
[27.41975212 64.39007568]
[31.30357742 57.37652206]
[35.86295700 50.78212738]
[41.05305481 44.67173386]
[46.82283020 39.10543442]
[53.11554718 34.13796616]
[59.86931992 29.81818008]
[67.01773071 26.18855476]
[74.49049377 23.28478432]
[82.21411133 21.13542366]
[90.11263275 19.76161003]
[98.10838318 19.17685318]
[106.12274170 19.38690376]
[114.07688141 20.38969421]
[121.89259338 22.17536736]
[129.49302673 24.72635841]
[136.23718262 11.32799435]
[142.98135376 -2.07037020]
[149.72552490 -15.46873474]
[144.04100037 -27.74893188]
[146.46553040 -40.86353683]
[155.88500977 -50.02732086]
[168.67561340 -52.02956009]
[175.74655151 -65.25837708]
[182.81750488 -78.48719788]
[189.88845825 -91.71601868]
[196.95941162 -104.94483948]
[204.03036499 -118.17365265]
[198.03654480 -132.61692810]
[202.77827454 -147.51828003]
[216.01663208 -155.84173584]
[231.50088501 -153.65721130]
[241.91983032 -141.99618530]
[242.35395813 -126.36463165]
[232.59831238 -114.14328766]
[217.25918579 -111.10270691]
[210.18823242 -97.87388611]
[203.11727905 -84.64506531]
[196.04632568 -71.41624451]
[188.97537231 -58.18742752]
[181.90441895 -44.95861053]
[187.48336792 -29.14370728]
[179.79246521 -13.86364460]
[163.12390137 -8.72456455]
[156.37973022 4.67379951]
[149.63555908 18.07216454]
[142.89138794 31.47052956]
[167.76651001 55.91304779]
[180.03167725 88.55924988]
[195.01361084 87.82323456]
[209.99552917 87.08721924]
[225.51890564 80.27097321]
[236.36607361 93.30076599]
[226.84828186 107.33101654]
[210.73155212 102.06915283]
[195.74961853 102.80516815]
[180.76768494 103.54118347]
[178.21678162 120.44734192]
[172.16758728 136.43898010]
[162.89064026 150.80085754]
[150.80085754 162.89064026]
[136.43898010 172.16758728]
[120.44734192 178.21678162]
[103.54118347 180.76768494]
[102.80516815 195.74961853]
[102.06915283 210.73155212]
[109.11998749 224.89474487]
[100.76750946 237.22703552]
[100.03149414 252.20896912]
[99.29547882 267.19091797]
[98.55947113 282.17285156]
[108.89462280 293.82711792]
[107.93477631 309.01043701]
[96.76050568 318.79162598]
[96.02449036 333.77355957]
[95.47238159 348.76339722]
[95.10426331 363.75885010]
[102.50055695 377.74475098]
[94.45324707 390.27832031]
[94.08512878 405.27380371]
[93.71701050 420.26928711]
[106.86736298 428.20425415]
[114.27436829 441.65905762]
[113.94557190 457.01443481]
[105.96942139 470.13986206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 123]
[7 122]
[8 121]
[10 119]
[11 118]
[13 117]
[14 116]
[17 113]
[18 112]
[19 111]
[20 110]
[22 108]
[23 107]
[24 106]
[58 89]
[59 88]
[60 87]
[61 86]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
