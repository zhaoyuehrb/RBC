%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCUCUGGGCGGAGAUCUGCUGCCGCGUUCUACCCUUCCGGCCCGUGUUCUAUCCGCCGCCUCCACCUUCCAUCCGGCGCCGGCUUUCGGCGCGACGGUCGCCGCGUUCCAUCGUCGCGCGGCCCUUCGGGCGCCCGAGCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[72.32048798 128.38914490]
[80.90539551 116.08886719]
[73.72978210 113.90700531]
[60.84610367 121.58885193]
[47.96242523 129.27070618]
[35.07874298 136.95256042]
[33.79295349 153.78553772]
[22.85485649 166.42640686]
[6.70477152 170.04490662]
[-8.27816200 163.41384888]
[-20.99702072 171.36561584]
[-33.71588135 179.31738281]
[-41.31569290 193.19374084]
[-56.20913315 193.38006592]
[-68.92799377 201.33183289]
[-81.64685059 209.28359985]
[-94.36571503 217.23536682]
[-96.87106323 221.96917725]
[-100.59090424 224.92947388]
[-104.62705231 225.95130920]
[-108.14953613 225.25817871]
[-121.34560394 232.39006042]
[-134.54167175 239.52195740]
[-142.67172241 253.76394653]
[-159.06976318 253.57351685]
[-166.86689758 239.14657593]
[-158.04208374 225.32431030]
[-141.67355347 226.32589722]
[-128.47749329 219.19400024]
[-115.28142548 212.06211853]
[-102.31748199 204.51651001]
[-89.59862518 196.56474304]
[-76.87976074 188.61297607]
[-64.16090393 180.66120911]
[-57.47082520 167.35360718]
[-41.66764832 166.59852600]
[-28.94878960 158.64675903]
[-16.22993088 150.69499207]
[-16.53470612 137.31036377]
[-10.11951351 125.43592072]
[1.42634869 118.23940277]
[15.12926579 117.70082855]
[27.39689445 124.06887817]
[40.28057480 116.38702393]
[53.16425323 108.70517731]
[66.04792786 101.02332306]
[72.75897217 87.60833740]
[71.18056488 72.69161224]
[69.60214996 57.77489471]
[68.02374268 42.85816956]
[66.44532776 27.94144821]
[64.86692047 13.02472496]
[49.71390533 6.48891068]
[39.96435165 -6.70936537]
[38.19157028 -22.92789268]
[44.78356171 -37.74955368]
[57.86302567 -47.18532562]
[55.97047806 -62.06545639]
[54.07792664 -76.94558716]
[44.66129303 -89.65926361]
[50.73096085 -103.26103973]
[48.83841324 -118.14116669]
[46.94586563 -133.02130127]
[45.05331802 -147.90142822]
[30.37859726 -151.86640930]
[18.34130859 -161.14930725]
[10.77704811 -174.33453369]
[8.83931255 -189.41145325]
[12.82359219 -204.08094788]
[22.12231255 -216.10601807]
[35.31748581 -223.65292358]
[50.39694595 -225.57083130]
[65.06118011 -221.56724548]
[77.07400513 -212.25271606]
[84.60355377 -199.04763794]
[86.50161743 -183.96566772]
[82.47875214 -169.30670166]
[73.14842987 -157.30613708]
[59.93344498 -149.79397583]
[61.82599640 -134.91384888]
[63.71854401 -120.03371429]
[65.61109161 -105.15358734]
[74.89235687 -93.50424194]
[68.95806122 -78.83813477]
[70.85060883 -63.95800400]
[72.74315643 -49.07787323]
[85.69035339 -44.61986160]
[95.49054718 -34.96168900]
[100.18206024 -21.95620728]
[98.79121399 -8.13390160]
[91.53372955 3.78943849]
[79.78364563 11.44631386]
[81.36205292 26.36303711]
[82.94046783 41.27975845]
[84.51887512 56.19648361]
[86.09729004 71.11320496]
[87.67569733 86.02993011]
[95.83325195 74.12286377]
[113.27069855 68.92330933]
[134.05343628 76.50389099]
[149.01261902 77.60982513]
[163.97178650 78.71575928]
[178.93096924 79.82169342]
[193.89013672 80.92761993]
[208.84931946 82.03355408]
[223.81932068 82.98172760]
[238.79847717 83.77202606]
[253.78514099 84.40438080]
[268.77764893 84.87870026]
[280.12777710 73.88096619]
[295.92855835 74.21368408]
[306.80566406 85.67945862]
[306.30590820 101.47584534]
[294.72579956 112.23113251]
[278.93557739 111.56439209]
[268.30331421 99.87120056]
[253.31082153 99.39687347]
[246.47962952 102.34896088]
[238.00817871 98.75119781]
[223.02900696 97.96089172]
[216.13710022 100.76830292]
[207.74337769 96.99272919]
[192.78421021 95.88679504]
[177.82502747 94.78086853]
[162.86585999 93.67493439]
[147.90667725 92.56900024]
[132.94750977 91.46306610]
[128.70706177 97.64923096]
[135.18165588 111.17992401]
[120.22618103 110.02156830]
[115.98574066 116.20773315]
[122.41246796 129.76123047]
[128.83918762 143.31472778]
[135.26591492 156.86820984]
[141.69264221 170.42170715]
[156.66065979 175.49456787]
[163.58258057 189.70240784]
[158.35174561 204.61595154]
[144.07153320 211.38728333]
[129.21411133 205.99906921]
[122.59415436 191.64805603]
[128.13914490 176.84843445]
[121.71242523 163.29493713]
[115.28569794 149.74143982]
[108.85897064 136.18795776]
[102.43224335 122.63446045]
[95.25662994 120.45259857]
[95.54122925 135.44989014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[6 43]
[10 38]
[11 37]
[12 36]
[14 34]
[15 33]
[16 32]
[17 31]
[21 30]
[22 29]
[23 28]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[57 86]
[58 85]
[59 84]
[61 82]
[62 81]
[63 80]
[64 79]
[100 127]
[101 126]
[102 125]
[103 124]
[104 123]
[105 122]
[106 120]
[107 119]
[108 117]
[109 116]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
