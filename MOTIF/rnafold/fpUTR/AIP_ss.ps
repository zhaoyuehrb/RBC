%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:38:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGGCUUCUGCCCUCAACCAAAAUGGCGCUAGCUCGGAAGCUGCCGAGGUGCUAGGAGUUGCCGAAGCAAGUCCGGAAGCUACCGAGCGAGUCCGGAAGUUGCCGAAAGGGAGCAGCGGGGAAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[93.65238953 322.32156372]
[80.11434937 329.90451050]
[64.70868683 328.04833984]
[53.35921097 317.46679688]
[50.43001938 302.22872925]
[57.04744339 288.19342041]
[70.66695404 280.75778198]
[72.46126556 265.86550903]
[74.25558472 250.97320557]
[76.04989624 236.08091736]
[77.84420776 221.18861389]
[71.68491364 207.62719727]
[81.01744843 194.85165405]
[82.81176758 179.95935059]
[84.60607910 165.06706238]
[86.40039825 150.17477417]
[75.27706909 145.72999573]
[65.46637726 138.85723877]
[57.48921967 129.92140198]
[51.76913071 119.39690399]
[48.60981750 107.84255219]
[48.17901230 95.87180328]
[50.49959564 84.12023926]
[55.44835663 73.21179962]
[62.76254654 63.72564697]
[72.05381775 56.16545105]
[82.82887268 50.93260956]
[79.96869659 36.20781708]
[75.21692657 28.28765297]
[77.22093964 21.09588051]
[74.71467590 6.30674076]
[72.20841980 -8.48239899]
[62.27409363 -20.79579926]
[67.77610779 -34.63694000]
[65.26984406 -49.42607880]
[62.76358414 -64.21521759]
[60.25732422 -79.00435638]
[57.75106430 -93.79349518]
[55.24480438 -108.58264160]
[45.31048203 -120.89603424]
[50.81249237 -134.73718262]
[48.30623245 -149.52632141]
[45.79997253 -164.31546021]
[43.29371262 -179.10459900]
[33.35939026 -191.41799927]
[38.86140060 -205.25914001]
[36.35514069 -220.04827881]
[33.84888077 -234.83741760]
[18.62932777 -242.10758972]
[10.78714657 -256.85317993]
[13.21874142 -273.20913696]
[24.77756310 -284.80117798]
[21.91738892 -299.52597046]
[19.05721664 -314.25076294]
[16.19704437 -328.97555542]
[3.79851246 -342.52774048]
[10.03671169 -358.88510132]
[6.82427025 -373.53707886]
[-5.85640383 -383.36459351]
[-5.93513107 -399.40744019]
[6.64848137 -409.35894775]
[22.24136353 -405.58514404]
[28.88198853 -390.98095703]
[21.47624016 -376.74951172]
[24.68868065 -362.09753418]
[34.74472809 -355.26303101]
[37.49702835 -343.00741577]
[30.92183304 -331.83572388]
[33.78200531 -317.11093140]
[36.64217758 -302.38613892]
[39.50235367 -287.66134644]
[52.12071991 -283.13531494]
[60.90618896 -272.86660767]
[63.46583176 -259.48657227]
[59.02059937 -246.49478149]
[48.63801956 -237.34367371]
[51.14427948 -222.55453491]
[53.65053940 -207.76539612]
[63.40559769 -196.50981140]
[58.08285141 -181.61085510]
[60.58911133 -166.82171631]
[63.09537125 -152.03257751]
[65.60163116 -137.24343872]
[75.35668945 -125.98785400]
[70.03394318 -111.08889771]
[72.54020691 -96.29975891]
[75.04646301 -81.51062012]
[77.55272675 -66.72148132]
[80.05898285 -51.93233871]
[82.56524658 -37.14319992]
[92.32030487 -25.88761711]
[86.99755859 -10.98865986]
[89.50381470 3.80048037]
[92.01007843 18.58962059]
[94.69348907 33.34764481]
[97.55365753 48.07243347]
[117.62365723 51.09331894]
[135.00730896 61.56896210]
[147.05487061 77.90257263]
[151.92993164 97.60446167]
[148.88941956 117.67149353]
[162.11293030 124.75235748]
[175.33644104 131.83322144]
[191.15467834 131.52673340]
[198.72218323 144.35569763]
[211.94570923 151.43655396]
[228.31024170 150.37174988]
[237.18836975 164.15982056]
[229.44703674 178.61679077]
[213.04985046 178.87055969]
[204.86483765 164.66007996]
[191.64132690 157.57920837]
[176.76892090 158.39216614]
[168.25558472 145.05673218]
[155.03207397 137.97587585]
[141.80854797 130.89500427]
[133.76782227 139.52456665]
[123.98871613 146.11938477]
[112.97467041 150.33999634]
[101.29268646 151.96908569]
[99.49837494 166.86137390]
[97.70406342 181.75367737]
[95.90974426 196.64596558]
[101.94069672 211.27259827]
[92.73650360 222.98294067]
[90.94219208 237.87522888]
[89.14787292 252.76751709]
[87.35356140 267.65982056]
[85.55924988 282.55212402]
[97.02285004 293.00991821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[13 123]
[14 122]
[15 121]
[16 120]
[27 96]
[28 95]
[30 94]
[31 93]
[32 92]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[41 83]
[42 82]
[43 81]
[44 80]
[46 78]
[47 77]
[48 76]
[52 71]
[53 70]
[54 69]
[55 68]
[57 65]
[58 64]
[101 116]
[102 115]
[103 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
