%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUCAGCGCAGGGCUCGCCGGGAAAUGUGGUUUCUCCAGCCGGCCCGGGGCGGUGGCCGCAAGUUGGGCUUACAGCGCGGCCGAUCCGGCGUGGACCCGGG\
) } def
/len { sequence length } bind def

/coor [
[93.08371735 103.79266357]
[78.25448608 101.53569794]
[63.42525482 99.27872467]
[48.59602356 97.02175903]
[33.76679230 94.76479340]
[18.93756104 92.50782776]
[12.89125633 100.57163239]
[4.32157278 105.76435089]
[-5.50929785 107.37237549]
[-15.17236710 105.20634460]
[-23.27955627 99.62228394]
[-28.68308449 91.46392822]
[-30.63789177 81.93549347]
[-45.08695221 77.90750885]
[-59.53601456 73.87953186]
[-73.98507690 69.85155487]
[-88.43414307 65.82357788]
[-103.80515289 69.57090759]
[-113.98725128 58.70011520]
[-128.43630981 54.67213440]
[-143.80732727 58.41946411]
[-153.98942566 47.54867172]
[-168.43849182 43.52069473]
[-182.94673157 39.71140289]
[-197.51086426 36.12166977]
[-212.07499695 32.53193283]
[-226.63911438 28.94219780]
[-241.20324707 25.35246277]
[-258.02911377 27.43255424]
[-264.68576050 11.84008217]
[-251.54541016 1.12713933]
[-237.61351013 10.78833580]
[-223.04937744 14.37807083]
[-208.48526001 17.96780586]
[-193.92112732 21.55754089]
[-179.35700989 25.14727592]
[-171.98661804 23.66725349]
[-164.41050720 29.07163239]
[-149.96145630 33.09960938]
[-135.62393188 29.06417274]
[-124.40833282 40.22307587]
[-109.95927429 44.25105286]
[-95.62174988 40.21561432]
[-84.40615845 51.37451553]
[-69.95709991 55.40249252]
[-55.50803757 59.43047333]
[-41.05897522 63.45845032]
[-26.60991287 67.48642731]
[-9.98741341 55.85180283]
[10.16988468 59.97182846]
[21.19452858 77.67859650]
[36.02376175 79.93556213]
[50.85299301 82.19252777]
[65.68222046 84.44949341]
[80.51145172 86.70646667]
[95.34068298 88.96343231]
[110.16991425 86.70646667]
[123.65623474 80.13994598]
[137.14256287 73.57343292]
[150.62887573 67.00691986]
[164.11520386 60.44039917]
[177.60153198 53.87388611]
[181.77729797 48.40039062]
[187.28796387 46.30437469]
[192.10629272 47.34582138]
[205.96447754 41.60557175]
[219.82267761 35.86531830]
[233.68086243 30.12506676]
[239.49659729 15.42973137]
[254.03309631 9.22765636]
[268.66610718 15.19842434]
[274.71414185 29.79968262]
[268.58901978 44.36876678]
[253.92462158 50.26209259]
[239.42111206 43.98326111]
[225.56292725 49.72351074]
[211.70472717 55.46376419]
[197.84654236 61.20401382]
[184.16804504 67.36020660]
[170.68171692 73.92671967]
[157.19540405 80.49324036]
[143.70907593 87.05975342]
[130.22274780 93.62626648]
[116.73643494 100.19278717]
[114.61355591 107.38607788]
[124.95005035 118.25607300]
[110.36781311 121.77265167]
[108.24494171 128.96594238]
[116.00500488 141.80265808]
[123.76507568 154.63937378]
[131.52514648 167.47610474]
[147.00350952 169.70193481]
[157.39129639 181.39073181]
[157.78370667 197.02339172]
[147.99546814 209.21864319]
[132.64828491 212.21827698]
[118.98861694 204.60595703]
[113.46614838 189.97596741]
[118.68842316 175.23616028]
[110.92835236 162.39944458]
[103.16828918 149.56272888]
[95.40821838 136.72601318]
[88.38687134 124.71113586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[19 42]
[20 41]
[22 39]
[23 38]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[65 78]
[66 77]
[67 76]
[68 75]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
