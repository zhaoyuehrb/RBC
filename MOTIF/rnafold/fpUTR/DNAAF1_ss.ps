%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCGUGCGCAGCGGUUGCCUGGGCGACCGGGGAAGCGUUGGGCUGUAAAGACUAGGGCGCCAGCGGCUGGCGAAGAAGGAAAGAGGGUACUCUCUGGCUGGGCUGGGGCCGUAGCGACGUCCGCCGCGAACCUGGGCCCCCCAAAGCUGCGGGGCGUUCGGUGUCGCCGAAGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[169.02418518 179.33132935]
[184.01258850 179.83956909]
[172.28511047 170.48721313]
[160.55764771 161.13487244]
[145.78292847 159.24880981]
[139.81765747 144.59527588]
[128.09017944 135.24293518]
[116.36270905 125.89058685]
[104.63523865 116.53823853]
[89.64920044 115.89113617]
[77.15920258 124.19775391]
[69.95298767 138.28253174]
[55.07069397 138.88798523]
[42.58069611 147.19461060]
[30.09070015 155.50123596]
[17.60070229 163.80786133]
[5.11070681 172.11448669]
[-2.09551048 186.19926453]
[-16.97780609 186.80471802]
[-29.46780205 195.11134338]
[-36.67401886 209.19612122]
[-51.55631256 209.80157471]
[-64.04631042 218.10820007]
[-76.53630829 226.41481018]
[-89.02630615 234.72143555]
[-101.51629639 243.02806091]
[-108.31243896 257.95269775]
[-124.65940857 259.25982666]
[-133.74084473 245.60481262]
[-126.21454620 231.03474426]
[-109.82292175 230.53807068]
[-97.33292389 222.23144531]
[-84.84292603 213.92481995]
[-72.35293579 205.61819458]
[-59.86293793 197.31156921]
[-53.55008698 183.82093811]
[-37.77442551 182.62133789]
[-25.28442764 174.31471252]
[-18.97157860 160.82408142]
[-3.19591641 159.62448120]
[9.29407978 151.31785583]
[21.78407669 143.01124573]
[34.27407074 134.70462036]
[46.76406860 126.39799500]
[53.07691956 112.90735626]
[68.85257721 111.70775604]
[81.34257507 103.40113831]
[67.48591614 109.14508820]
[52.79604340 106.11068726]
[42.34937286 95.34652710]
[39.75598145 80.57241821]
[45.91207886 66.89388275]
[58.69028854 59.03783798]
[73.67480469 59.71912003]
[85.68740082 68.70230103]
[90.57686615 82.88339233]
[88.51206207 68.02618408]
[86.44725800 53.16897583]
[76.88397217 40.56524277]
[82.79566193 26.89406204]
[80.73085785 12.03685570]
[78.66606140 -2.82035136]
[69.10277557 -15.42408562]
[75.01446533 -29.09526634]
[72.94966125 -43.95247269]
[70.88485718 -58.80968094]
[68.82005310 -73.66688538]
[66.75524902 -88.52409363]
[64.43431091 -103.34344482]
[61.85792542 -118.12052917]
[59.28153992 -132.89761353]
[56.70515442 -147.67469788]
[54.12876892 -162.45178223]
[51.55238342 -177.22886658]
[45.09799576 -163.68852234]
[33.15472031 -154.61338806]
[18.38011932 -152.02281189]
[4.06176376 -156.49324036]
[-6.61428881 -167.02992249]
[-11.27245331 -181.28831482]
[-8.87621689 -196.09567261]
[0.04122114 -208.15715027]
[13.49559402 -214.78887939]
[28.49309731 -214.51519775]
[41.69655609 -207.39701843]
[50.16772079 -195.01893616]
[50.42663193 -210.01670837]
[50.68554306 -225.01446533]
[50.94445038 -240.01223755]
[42.52237320 -254.08349609]
[50.73275375 -268.27932739]
[67.12945557 -267.99627686]
[74.84496307 -253.52551270]
[65.94221497 -239.75332642]
[65.68330383 -224.75555420]
[65.42440033 -209.75779724]
[65.16548920 -194.76002502]
[66.32946777 -179.80525208]
[68.90585327 -165.02816772]
[71.48223877 -150.25108337]
[74.05862427 -135.47399902]
[76.63500977 -120.69691467]
[79.21139526 -105.91983032]
[82.55482483 -102.47653198]
[83.75423431 -96.88810730]
[81.61245728 -90.58889771]
[83.67726135 -75.73168945]
[85.74206543 -60.87448120]
[87.80686951 -46.01727676]
[89.87166595 -31.16006851]
[99.28726959 -19.61902237]
[93.52326202 -4.88515425]
[95.58806610 9.97205257]
[97.65287018 24.82925987]
[107.06846619 36.37030792]
[101.30446625 51.10417557]
[103.36927032 65.96138000]
[105.43407440 80.81858826]
[113.29840851 87.54314423]
[116.14141846 96.54711914]
[113.98757935 104.81076813]
[125.71505737 114.16311646]
[137.44252014 123.51545715]
[149.16999817 132.86781311]
[164.78353882 135.42280579]
[169.90998840 149.40739441]
[181.63746643 158.75975037]
[193.36492920 168.11209106]
[204.60635376 170.15502930]
[209.82527161 178.85549927]
[223.10711670 185.82635498]
[236.38894653 192.79719543]
[249.67079163 199.76803589]
[264.59164429 195.29521179]
[277.96200562 202.55384827]
[282.13421631 216.80616760]
[295.41604614 223.77700806]
[308.69790649 230.74784851]
[321.97973633 237.71870422]
[335.26156616 244.68954468]
[348.54342651 251.66040039]
[361.88491821 258.51635742]
[375.28509521 265.25689697]
[388.68530273 271.99746704]
[402.08547974 278.73803711]
[415.54333496 285.36267090]
[429.05786133 291.87094116]
[445.36181641 290.10650635]
[454.82208252 303.50186157]
[447.70675659 318.27697754]
[431.33547974 319.23251343]
[422.54962158 305.38546753]
[409.03506470 298.87719727]
[401.62521362 298.80764771]
[395.34490967 292.13821411]
[381.94473267 285.39764404]
[368.54455566 278.65710449]
[355.14437866 271.91653442]
[347.73678589 271.71908569]
[341.57257080 264.94223022]
[328.29071045 257.97140503]
[315.00888062 251.00054932]
[301.72705078 244.02969360]
[288.44519043 237.05885315]
[275.16336060 230.08799744]
[261.06387329 234.75057983]
[247.49488831 227.87034607]
[242.69993591 213.04988098]
[229.41810608 206.07904053]
[216.13626099 199.10818481]
[202.85441589 192.13734436]
[209.35360718 205.65623474]
[209.58244324 220.65449524]
[203.49871826 234.36537170]
[192.22468567 244.25964355]
[177.84008789 248.51210022]
[162.99844360 246.33828735]
[150.43757629 238.13922119]
[142.47460938 225.42736816]
[140.57844543 210.54769897]
[145.09889221 196.24505615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[6 124]
[7 123]
[8 122]
[9 121]
[10 47]
[11 46]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[19 38]
[20 37]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[56 118]
[57 117]
[58 116]
[60 114]
[61 113]
[62 112]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 103]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[86 97]
[87 96]
[88 95]
[89 94]
[130 171]
[131 170]
[132 169]
[133 168]
[136 165]
[137 164]
[138 163]
[139 162]
[140 161]
[141 160]
[142 158]
[143 157]
[144 156]
[145 155]
[146 153]
[147 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
