%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGACGUCACGGCGCUCGUCGGCGCCGCCUGUGGCGUCACAGGCCGGGCCCGCAGGGCUUUCUAGGGGUCCGUCGCUCUUGAAGCCGCCGGCGGCGGGCGCGUGCGCGGCCCGAUGAAGAAGGAGGUUUCCAAGCCGUCUCCGCCCAAGUUGAUCGGUGG\
) } def
/len { sequence length } bind def

/coor [
[91.49109650 149.80747986]
[78.94938660 144.68623352]
[68.49342346 136.56077576]
[57.05454254 146.26397705]
[45.61566162 155.96716309]
[34.17677689 165.67036438]
[22.73789597 175.37355042]
[11.29901409 185.07675171]
[-0.13986839 194.77993774]
[-11.57875061 204.48313904]
[-23.01763344 214.18632507]
[-34.45651627 223.88952637]
[-45.51296234 234.02633667]
[-56.17054749 244.58171082]
[-66.82813263 255.13708496]
[-77.48571777 265.69244385]
[-88.14330292 276.24783325]
[-98.80088806 286.80319214]
[-102.59725189 302.75686646]
[-118.38695526 307.18603516]
[-129.92689514 295.53433228]
[-125.34577179 279.78805542]
[-109.35626221 276.14559937]
[-98.69867706 265.59024048]
[-88.04109192 255.03486633]
[-77.38350677 244.47949219]
[-66.72592163 233.92411804]
[-56.06833267 223.36874390]
[-55.94517136 220.52258301]
[-54.65977478 217.55560303]
[-52.16097260 214.92102051]
[-48.56619644 213.08181763]
[-44.15970993 212.45063782]
[-32.72082520 202.74745178]
[-21.28194427 193.04425049]
[-9.84306240 183.34106445]
[1.59581971 173.63786316]
[13.03470230 163.93467712]
[24.47358322 154.23147583]
[35.91246796 144.52828979]
[47.35134888 134.82508850]
[58.79022980 125.12189484]
[52.34437561 107.63520050]
[53.00452423 89.01001740]
[60.67222977 72.02355957]
[74.20416260 59.20870972]
[91.58254242 52.47631073]
[91.29345703 37.47909546]
[91.00437164 22.48188210]
[90.71528625 7.48466825]
[90.42620087 -7.51254606]
[90.13711548 -22.50975990]
[89.70352173 -37.50349045]
[89.12545776 -52.49234772]
[88.54739380 -67.48120880]
[87.96932983 -82.47006226]
[79.03478241 -91.81592560]
[78.88769531 -104.34306335]
[87.06004333 -113.30219269]
[86.77095795 -128.29940796]
[77.34042358 -116.63471985]
[63.14435959 -111.78993988]
[48.55020523 -115.25557709]
[38.04785538 -125.96541595]
[34.86836624 -140.62457275]
[39.98990631 -154.72314453]
[51.83683395 -163.92370605]
[66.76443481 -165.39569092]
[80.18022156 -158.68624878]
[87.95722198 -145.85804749]
[90.26090240 -160.68009949]
[92.56457520 -175.50213623]
[94.86824799 -190.32418823]
[97.17192841 -205.14624023]
[99.47560120 -219.96827698]
[101.77927399 -234.79032898]
[104.08295441 -249.61238098]
[106.38662720 -264.43441772]
[108.69030762 -279.25646973]
[99.63480377 -291.93069458]
[102.18220520 -306.92953491]
[114.32093811 -315.48446655]
[116.62461090 -330.30651855]
[110.20208740 -345.39569092]
[120.27334595 -358.33792114]
[136.47793579 -355.81936646]
[142.14598083 -340.43087769]
[131.44665527 -328.00283813]
[129.14299011 -313.18078613]
[138.11257935 -301.34515381]
[135.98745728 -286.28067017]
[123.51235199 -276.95278931]
[121.20867920 -262.13073730]
[118.90499878 -247.30870056]
[116.60132599 -232.48664856]
[114.29764557 -217.66461182]
[111.99397278 -202.84255981]
[109.69029999 -188.02050781]
[107.38661957 -173.19847107]
[105.08294678 -158.37641907]
[102.77927399 -143.55436707]
[101.76817322 -128.58848572]
[102.05725861 -113.59127808]
[111.92671204 -99.10525513]
[102.95818329 -83.04812622]
[103.53624725 -68.05927277]
[104.11431122 -53.07041168]
[104.69237518 -38.08155441]
[108.10889435 -31.48725128]
[105.13433075 -22.79884529]
[105.42341614 -7.80163193]
[105.71250153 7.19558239]
[106.00158691 22.19279671]
[106.29067230 37.19001007]
[106.57975769 52.18722534]
[117.26617432 54.32474136]
[127.32086182 58.84714127]
[136.21264648 65.57747650]
[143.45825195 74.22080231]
[148.64839172 84.37685394]
[151.47062683 95.55841064]
[151.72763062 107.21463013]
[149.34992981 118.75819397]
[163.19425964 124.53182220]
[177.03857422 130.30543518]
[192.75366211 128.47605896]
[201.52221680 140.51606750]
[215.36653137 146.28968811]
[229.21086121 152.06330872]
[243.05517578 157.83692932]
[259.24096680 155.20011902]
[269.40646362 168.06846619]
[263.09429932 183.20414734]
[246.79786682 185.03684998]
[237.28155518 171.68125916]
[223.43724060 165.90763855]
[209.59291077 160.13401794]
[195.74859619 154.36039734]
[181.02374268 156.60273743]
[171.26495361 144.14976501]
[157.42062378 138.37614441]
[143.57630920 132.60252380]
[133.02093506 143.26010132]
[138.92770386 157.04814148]
[144.83447266 170.83619690]
[150.74124146 184.62423706]
[156.64799500 198.41227722]
[171.90785217 200.15374756]
[184.24296570 209.30471802]
[190.33528137 223.40362549]
[188.54598999 238.65794373]
[179.35639954 250.96432495]
[165.23846436 257.01242065]
[149.98983765 255.17530823]
[137.71232605 245.94718933]
[131.70851135 231.81036377]
[133.59339905 216.56756592]
[142.85995483 204.31904602]
[136.95318604 190.53100586]
[131.04643250 176.74295044]
[125.13966370 162.95491028]
[119.23289490 149.16687012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 108]
[54 107]
[55 106]
[56 105]
[59 103]
[60 102]
[70 101]
[71 100]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[82 89]
[83 88]
[123 142]
[124 141]
[125 140]
[127 138]
[128 137]
[129 136]
[130 135]
[143 162]
[144 161]
[145 160]
[146 159]
[147 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
