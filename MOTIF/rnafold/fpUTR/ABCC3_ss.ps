%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGGCGGCUCCGGCGCCCGCUCUGCCCGCCGCUGGGUCCGACCGCGCUCGCCUUCCUUGCAGCCGCGCCUCGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[35.00260544 121.20057678]
[20.23048782 123.80529785]
[5.45837164 126.41001892]
[-9.31374454 129.01473999]
[-22.97602844 141.17761230]
[-39.22476196 134.85295105]
[-53.88476944 138.02850342]
[-68.54477692 141.20407104]
[-83.20478821 144.37962341]
[-97.86479187 147.55519104]
[-103.90079498 159.76983643]
[-115.73808289 166.11036682]
[-128.86152649 164.41680908]
[-138.41375732 155.54582214]
[-153.18586731 158.15054321]
[-167.95799255 160.75526428]
[-182.50654602 169.46018982]
[-194.89872742 157.88995361]
[-187.21115112 142.77909851]
[-170.56271362 145.98315430]
[-155.79058838 143.37843323]
[-141.01847839 140.77371216]
[-132.09883118 126.65673065]
[-115.42717743 123.16682434]
[-101.04035187 132.89517212]
[-86.38034058 129.71961975]
[-71.72033691 126.54405975]
[-57.06032562 123.36849976]
[-42.40031815 120.19293976]
[-35.45985794 110.08719635]
[-23.07596397 107.43902588]
[-11.91846752 114.24263000]
[2.85364914 111.63790131]
[17.62576485 109.03318024]
[32.39788055 106.42845917]
[45.04773712 94.42829895]
[62.29523468 100.52068329]
[76.95524597 97.34513092]
[91.61524963 94.16957092]
[98.40073395 89.40785217]
[106.90491486 91.16677856]
[121.67703247 88.56205750]
[136.44914246 85.95732880]
[151.22126770 83.35260773]
[164.88354492 71.18973541]
[181.13227844 77.51440430]
[195.79229736 74.33884430]
[210.45230103 71.16328430]
[225.11230469 67.98772430]
[239.70797729 64.52848816]
[254.23382568 60.78687286]
[262.00064087 55.48706818]
[269.39556885 57.19347382]
[284.05557251 54.01791763]
[291.18280029 40.09898376]
[305.60949707 34.06541443]
[320.52386475 38.76607895]
[328.88372803 51.98146057]
[326.74188232 67.47166443]
[315.10958862 77.92269135]
[299.47927856 78.39987946]
[287.23114014 68.67792511]
[272.57110596 71.85348511]
[257.97543335 75.31272125]
[243.44960022 79.05433655]
[237.60710144 83.89806366]
[228.28785706 82.64773560]
[213.62785339 85.82329559]
[198.96784973 88.99884796]
[184.30784607 92.17440796]
[177.36738586 102.28015137]
[164.98348999 104.92832947]
[153.82598877 98.12472534]
[139.05387878 100.72944641]
[124.28175354 103.33416748]
[109.50963593 105.93889618]
[94.79080963 108.82957458]
[80.13080597 112.00513458]
[65.47079468 115.18069458]
[57.71515274 125.69871521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[14 22]
[15 21]
[16 20]
[37 79]
[38 78]
[39 77]
[41 76]
[42 75]
[43 74]
[44 73]
[46 70]
[47 69]
[48 68]
[49 67]
[50 65]
[51 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
