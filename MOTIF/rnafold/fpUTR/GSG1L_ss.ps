%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCUGACGCGGGGCGCCAGCUGCCAACUUCGCGCGCGGAGCUCCCCGGCGGUGCAGUCCCGUCCCGGCGGCGCGGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[149.58308411 350.73440552]
[145.78909302 336.22216797]
[141.99508667 321.70989990]
[137.14283752 315.89910889]
[138.33789062 306.59823608]
[135.07643127 291.95709229]
[131.81498718 277.31594849]
[128.55352783 262.67480469]
[125.29207611 248.03367615]
[122.03062439 233.39254761]
[109.36190796 225.64404297]
[105.84576416 210.84231567]
[114.05899811 197.60673523]
[110.79754639 182.96559143]
[107.53609467 168.32444763]
[104.27464294 153.68331909]
[101.01318359 139.04217529]
[97.75173187 124.40103912]
[94.49028015 109.75990295]
[90.96196747 95.18077087]
[87.16796875 80.66851807]
[82.54373169 75.41487122]
[81.60172272 69.50440216]
[83.66828156 64.95793152]
[80.94373322 50.20744705]
[78.21917725 35.45696259]
[75.49462891 20.70647621]
[72.77007294 5.95599031]
[70.04551697 -8.79449463]
[52.01220322 -19.12296104]
[47.02406693 -39.00808334]
[57.74985504 -56.14974594]
[52.90664673 -70.34634399]
[48.06344223 -84.54293823]
[43.22023392 -98.73953247]
[38.37702942 -112.93613434]
[25.68163300 -123.31683350]
[28.59057045 -139.45591736]
[44.11137772 -144.75088501]
[56.27757645 -133.75471497]
[52.57362747 -117.77933502]
[57.41683197 -103.58274078]
[62.26003647 -89.38614655]
[67.10324097 -75.18955231]
[71.94644928 -60.99295044]
[81.72185516 -59.55388641]
[90.28351593 -54.50452042]
[96.34447479 -46.55224228]
[98.97428131 -36.84447479]
[97.74165344 -26.80321693]
[92.78448486 -17.91674614]
[84.79600525 -11.51904774]
[87.52056122 3.23143768]
[90.24510956 17.98192215]
[92.96966553 32.73240662]
[95.69421387 47.48289490]
[98.41876984 62.23337936]
[101.68022156 76.87451935]
[105.47422028 91.38677216]
[110.50774384 97.94572449]
[109.13141632 106.49845123]
[112.39287567 121.13958740]
[115.65432739 135.78073120]
[118.91577911 150.42185974]
[122.17723083 165.06300354]
[125.43868256 179.70413208]
[128.70013428 194.34527588]
[141.75473022 202.84324646]
[144.85372925 217.73789978]
[136.67176819 230.13108826]
[139.93321228 244.77223206]
[143.19467163 259.41336060]
[146.45611572 274.05450439]
[149.71757507 288.69564819]
[152.97903442 303.33679199]
[156.50733948 317.91589355]
[160.30134583 332.42816162]
[164.09535217 346.94042969]
[178.59614563 352.46368408]
[187.05281067 365.47384644]
[186.21360779 380.96823120]
[176.40121460 392.98889160]
[161.38870239 396.91369629]
[146.94868469 391.23342896]
[138.63363647 378.13229370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 59]
[21 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
