%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCCUCUCCUGGGCCGUCCUCUGAGCAGCAGACGGGGCUAAGCGUUCCCCAGCUCGCCUUCACACACAGCCCGUGCCACCACACCGACGGUACC\
) } def
/len { sequence length } bind def

/coor [
[122.55807495 255.51327515]
[109.44312286 262.79324341]
[94.56017303 264.66354370]
[80.05175781 260.85488892]
[68.00646973 251.91558838]
[60.15832138 239.13253784]
[57.63712311 224.34593201]
[60.80581665 209.68444824]
[69.20825195 197.25869751]
[81.63481903 188.85748291]
[96.29661560 185.69021606]
[111.08296967 188.21286011]
[123.86669922 196.06356812]
[119.09305573 181.84342957]
[114.31940460 167.62329102]
[109.54576111 153.40315247]
[98.16036987 143.79992676]
[101.10359192 128.25489807]
[96.32994843 114.03475952]
[85.46885681 103.68890381]
[71.03367615 99.61145020]
[56.53436661 95.76828766]
[41.97472000 92.16040802]
[27.41507721 88.55253601]
[12.85543251 84.94466400]
[-1.57127666 91.96247101]
[-15.99033737 84.92896271]
[-19.34067917 69.23963928]
[-9.05220890 56.93001556]
[6.98264170 57.44297028]
[16.46330643 70.38501740]
[31.02295113 73.99288940]
[45.58259583 77.60076904]
[60.14223862 81.20864105]
[67.53218842 79.73373413]
[75.11112976 85.17626953]
[89.54631042 89.25372314]
[101.65294647 80.39768982]
[102.13867188 65.40555573]
[102.62439728 50.41342163]
[94.33023071 40.37345505]
[95.15573883 27.78106499]
[104.09967804 19.46017456]
[105.07062531 4.49163294]
[106.04157257 -10.47690964]
[94.01911163 -20.28711319]
[90.09159088 -35.29891586]
[95.76922607 -49.73997116]
[108.86884308 -58.05740356]
[124.35337067 -57.05298615]
[136.26870728 -47.11293793]
[140.03314209 -32.05941391]
[134.19918823 -17.68079758]
[121.01011658 -9.50596237]
[120.03916931 5.46258020]
[119.06822205 20.43112183]
[127.71475220 35.60762024]
[117.61653137 50.89915085]
[117.13080597 65.89128113]
[116.64508057 80.88341522]
[130.41279602 74.92943573]
[145.05876160 78.16914368]
[155.03083801 89.37439728]
[156.54870605 104.29740143]
[149.03697205 117.28099823]
[135.34324646 123.40324402]
[120.65868378 120.34325409]
[110.55008698 109.26111603]
[115.32373047 123.48125458]
[127.05056763 134.10160828]
[123.76589966 148.62951660]
[128.53955078 162.84965515]
[133.31318665 177.06979370]
[138.08683777 191.28993225]
[145.93466187 204.07318115]
[156.45504761 214.76531982]
[166.97541809 225.45744324]
[177.49578857 236.14958191]
[188.01615906 246.84172058]
[202.64643860 242.34573364]
[217.68814087 245.17517090]
[229.68481445 254.67982483]
[235.87969971 268.67559814]
[234.84925842 283.94638062]
[226.83027649 296.98306274]
[213.66546631 304.78988647]
[198.38000488 305.57290649]
[184.48637390 299.15219116]
[175.17721558 287.00317383]
[172.59173584 271.91763306]
[177.32403564 257.36209106]
[166.80364990 246.66995239]
[156.28327942 235.97781372]
[145.76290894 225.28569031]
[135.24253845 214.59355164]
[136.45829773 229.54420471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 74]
[14 73]
[15 72]
[16 71]
[18 69]
[19 68]
[20 37]
[21 36]
[22 34]
[23 33]
[24 32]
[25 31]
[38 60]
[39 59]
[40 58]
[43 56]
[44 55]
[45 54]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
