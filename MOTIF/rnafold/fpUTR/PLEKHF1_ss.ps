%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGCCGGGACCCGGGCGGAGCGGGCGGGGACCCGGGCUACUGCGGUGUGGACUCGAGGGCUGGGCGCGGGGCCGGCGCAGAAGCCGCCAGCUGGAGACG\
) } def
/len { sequence length } bind def

/coor [
[114.21578979 200.96382141]
[111.03747559 186.30441284]
[107.85915375 171.64500427]
[104.68083954 156.98558044]
[101.50251770 142.32617188]
[98.32420349 127.66677094]
[95.14588165 113.00735474]
[82.59497833 104.79306030]
[67.88880157 107.74745178]
[53.18262863 110.70185089]
[38.47645569 113.65624237]
[26.47054100 123.96006012]
[12.46864033 118.88108063]
[-2.23753381 121.83547211]
[-16.94370842 124.78987122]
[-24.81137085 135.15061951]
[-37.24419785 137.23469543]
[-47.38946915 130.45303345]
[-62.17890167 132.95756531]
[-69.93270111 146.53742981]
[-84.61925507 151.90763855]
[-99.30402374 146.53254700]
[-107.05330658 132.95010376]
[-104.20812988 117.57353210]
[-92.11190033 107.66317749]
[-76.47608185 107.89839935]
[-64.68344116 118.16813660]
[-49.89400864 115.66359711]
[-37.10533905 103.75345612]
[-19.89810181 110.08369446]
[-5.19192839 107.12930298]
[9.51424503 104.17490387]
[20.46827507 94.08240509]
[35.52206039 98.95006561]
[50.22823334 95.99567413]
[64.93441010 93.04128265]
[79.64057922 90.08688354]
[101.97126770 85.59267426]
[111.65196228 74.13475037]
[121.33266449 62.67682648]
[131.01336670 51.21889877]
[134.00949097 35.68397903]
[148.13365173 30.95560265]
[157.81434631 19.49767876]
[167.49505615 8.03975391]
[177.17575073 -3.41817093]
[186.85644531 -14.87609577]
[185.30789185 -25.85898781]
[190.05192566 -35.63888931]
[199.25305176 -40.99805450]
[209.65780640 -40.32748795]
[220.01901245 -51.17392731]
[230.38023376 -62.02036667]
[234.31785583 -77.34373474]
[248.70399475 -81.20225525]
[259.06521606 -92.04869080]
[269.42642212 -102.89512634]
[279.78765869 -113.74156952]
[278.91152954 -124.79843903]
[284.24295044 -134.27093506]
[293.75369263 -139.05918884]
[304.09820557 -137.75555420]
[315.10137939 -147.95016479]
[322.61077881 -163.15034485]
[339.29574585 -160.14224243]
[341.02404785 -143.27662659]
[325.29598999 -136.94697571]
[314.29281616 -126.75237274]
[310.14562988 -107.97020721]
[290.63409424 -103.38035583]
[280.27285767 -92.53391266]
[269.91165161 -81.68747711]
[259.55044556 -70.84103394]
[256.35391235 -56.29347610]
[241.22666931 -51.65915298]
[230.86544800 -40.81271362]
[220.50424194 -29.96627426]
[217.50981140 -10.96620941]
[198.31437683 -5.19539499]
[188.63368225 6.26252937]
[178.95297241 17.72045517]
[169.27227783 29.17837906]
[159.59156799 40.63630295]
[157.28787231 55.35167694]
[142.47129822 60.89960098]
[132.79058838 72.35752869]
[123.10988617 83.81545258]
[113.42919159 95.27337646]
[109.80529022 109.82904053]
[112.98361206 124.48844910]
[116.16192627 139.14785767]
[119.34024811 153.80726624]
[122.51856995 168.46667480]
[125.69688416 183.12608337]
[128.87519836 197.78549194]
[143.13005066 203.91567993]
[151.03025818 217.27105713]
[149.53807068 232.71621704]
[139.22723389 244.31217957]
[124.06249237 247.60006714]
[109.87498474 241.31559753]
[102.12010956 227.87530518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 37]
[9 36]
[10 35]
[11 34]
[13 32]
[14 31]
[15 30]
[18 28]
[19 27]
[38 88]
[39 87]
[40 86]
[41 85]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[51 77]
[52 76]
[53 75]
[55 73]
[56 72]
[57 71]
[58 70]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
