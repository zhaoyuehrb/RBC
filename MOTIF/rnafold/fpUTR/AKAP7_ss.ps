%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCCUCCAGCCCCGGGACGCGGCCCGCCACCGCCGCUGCCGCCAGCCCAGACGCGCCGCCCGCAUGCGCCGCGACC\
) } def
/len { sequence length } bind def

/coor [
[105.95539856 146.26161194]
[97.91504669 146.59674072]
[89.93675995 145.54486084]
[82.25801086 143.13728333]
[75.10738373 139.44567871]
[68.69770813 134.57991028]
[63.21978760 128.68482971]
[58.83667374 121.93592072]
[55.67884064 114.53404999]
[53.84027863 106.69956207]
[53.37572098 98.66564941]
[54.29899216 90.67145538]
[56.58261108 82.95494080]
[60.15859985 75.74578857]
[64.92051697 69.25859833]
[70.72662354 63.68645859]
[63.31288528 50.64665222]
[55.89914703 37.60684967]
[39.05883408 33.38272095]
[30.53279495 18.64310265]
[35.08544159 2.58206797]
[27.15914726 -10.15268230]
[19.23285294 -22.88743210]
[11.30655956 -35.62218475]
[3.38026571 -48.35693359]
[-9.14122772 -52.12162399]
[-15.43851089 -63.11664581]
[-12.54008007 -75.03548431]
[-19.95381737 -88.07528687]
[-35.36706543 -90.71457672]
[-45.43830490 -102.67719269]
[-45.41220474 -118.31475067]
[-35.30109024 -130.24368286]
[-19.87911797 -132.83151245]
[-6.42807436 -124.85633087]
[-1.29912889 -110.08379364]
[-6.91401339 -95.48902893]
[0.49972439 -82.44922638]
[16.04883003 -74.56990051]
[16.11501694 -56.28322601]
[24.04130936 -43.54847717]
[31.96760368 -30.81372643]
[39.89389801 -18.07897568]
[47.82019043 -5.34422588]
[60.80823517 -4.15638542]
[70.83433533 4.48857164]
[74.01331329 17.54180527]
[68.93894958 30.19311142]
[76.35269165 43.23291397]
[83.76642609 56.27272034]
[108.81391907 54.19695663]
[131.30229187 65.42008972]
[144.70205688 86.68347931]
[145.12260437 111.81331635]
[158.83386230 117.89619446]
[172.54512024 123.97907257]
[186.25637817 130.06195068]
[202.00856018 128.58573914]
[210.50468445 140.81950378]
[224.21594238 146.90238953]
[237.92720032 152.98526001]
[252.58227539 147.06880188]
[267.09567261 153.32475281]
[272.85684204 168.04154968]
[266.44781494 182.48800659]
[251.67091370 188.09326172]
[237.29304504 181.53184509]
[231.84431458 166.69651794]
[218.13305664 160.61364746]
[204.42179871 154.53076172]
[189.65034485 156.44207764]
[180.17349243 143.77320862]
[166.46223450 137.69033813]
[152.75097656 131.60745239]
[139.03971863 125.52457428]
[134.07138062 131.85505676]
[128.08885193 137.23735046]
[121.27023315 141.51121521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 50]
[17 49]
[18 48]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[28 38]
[29 37]
[54 75]
[55 74]
[56 73]
[57 72]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
