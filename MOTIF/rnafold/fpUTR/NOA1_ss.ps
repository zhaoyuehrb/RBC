%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGGUCAAAUGCGCGCCUCGGACCCUAGUGCGCGUGCGCGCUGGUGGCUCCGCCCCUUUGGAGCUACUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[174.70494080 264.02682495]
[160.06674194 267.30139160]
[145.12257385 266.00839233]
[131.26432800 260.26824951]
[119.78276825 250.61558533]
[111.74725342 237.94946289]
[107.90622711 223.44958496]
[108.61741638 208.46646118]
[113.81459808 194.39559937]
[123.01370239 182.54753113]
[135.35794067 174.02580261]
[149.69757080 169.62411499]
[164.69778442 169.75254822]
[153.66192627 159.59332275]
[142.62606812 149.43409729]
[131.59020996 139.27487183]
[120.55434418 129.11564636]
[109.51848602 118.95642090]
[93.18369293 120.08695221]
[80.91043091 109.24856567]
[80.01177979 92.89938354]
[68.56552124 83.20489502]
[53.03421783 80.19006348]
[48.32285309 66.06022644]
[36.87659073 56.36573792]
[20.65221405 53.97792816]
[14.86028290 38.63564682]
[25.45903969 26.12171936]
[41.54539108 29.30939865]
[46.57107925 44.91947556]
[58.01734161 54.61396408]
[72.72992706 56.93537903]
[78.26000977 71.75862885]
[89.70627594 81.45311737]
[102.29393005 78.91243744]
[114.04087830 84.10027313]
[120.64188385 95.11530304]
[119.67771149 107.92056274]
[130.71356201 118.07978821]
[141.74942017 128.23901367]
[152.78527832 138.39823914]
[163.82113647 148.55746460]
[174.85699463 158.71669006]
[181.33380127 159.71191406]
[186.10494995 163.37573242]
[201.09213257 163.99560547]
[216.07931519 164.61547852]
[231.06649780 165.23535156]
[246.05369568 165.85522461]
[261.04086304 166.47511292]
[276.02804565 167.09498596]
[291.01525879 167.71485901]
[306.00244141 168.33473206]
[320.98962402 168.95460510]
[332.44601440 158.06759644]
[348.24279785 158.55372620]
[359.00808716 170.12457275]
[358.35498047 185.91535950]
[346.67095947 196.55769348]
[330.88796997 195.73767090]
[320.36975098 183.94178772]
[305.38256836 183.32191467]
[290.39538574 182.70204163]
[275.40817261 182.08216858]
[260.42098999 181.46229553]
[245.43380737 180.84242249]
[230.44662476 180.22254944]
[215.45944214 179.60266113]
[200.47225952 178.98278809]
[185.48506165 178.36291504]
[196.18217468 188.87823486]
[203.20956421 202.13024902]
[205.91271973 216.88467407]
[204.03985596 231.76728821]
[197.76542664 245.39195251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[21 34]
[22 33]
[24 31]
[25 30]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
