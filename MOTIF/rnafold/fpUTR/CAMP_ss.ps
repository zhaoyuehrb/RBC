%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUGUGAAGCAAUAGCCAGGGGCUAAAGCAAACCCCAGCCCACACCCUGGCAGGCAGCCAGGGAUGGGUGGAUCAGGAAGGCUCCUGGUUGGGCUUUUGCAUCAGGCUCAGGCUGGGCAUAAAGGAGGCUCCUGUGGGCUAGAGGGAGGCAGAC\
) } def
/len { sequence length } bind def

/coor [
[100.10392761 653.69824219]
[89.21485138 642.24383545]
[89.69811249 626.44689941]
[101.26701355 615.67956543]
[101.56714630 600.68255615]
[101.86727905 585.68554688]
[102.16741180 570.68853760]
[88.20731354 565.35931396]
[76.89164734 555.55700684]
[69.59876251 542.45019531]
[67.22574615 527.61138916]
[70.07804871 512.82849121]
[77.83037567 499.88934326]
[89.56362915 490.36553955]
[103.87384033 485.42153931]
[104.17397308 470.42453003]
[104.47410583 455.42752075]
[104.77423859 440.43054199]
[105.07437134 425.43353271]
[104.92429352 410.43429565]
[104.32415009 395.44628906]
[103.72400665 380.45831299]
[103.12386322 365.47033691]
[102.52371979 350.48233032]
[101.92357635 335.49435425]
[101.32343292 320.50634766]
[86.80217743 316.91323853]
[73.86872101 309.36624146]
[63.57552338 298.46963501]
[56.76298904 285.10064697]
[53.99083328 270.33883667]
[55.49212646 255.37895203]
[61.15369797 241.43423462]
[70.52464294 229.63803101]
[82.85221100 220.95164490]
[97.14226532 216.08602905]
[96.54212189 201.09803772]
[95.94197845 186.11004639]
[95.34183502 171.12205505]
[94.74169159 156.13406372]
[94.14154816 141.14607239]
[93.54140472 126.15808868]
[74.06283569 120.76885223]
[60.49743652 100.85533142]
[63.04674530 72.94961548]
[51.48139954 63.39750671]
[39.82106018 53.96158981]
[28.06690407 44.64280701]
[16.31274414 35.32402039]
[4.55858564 26.00523567]
[-7.19557333 16.68645096]
[-18.94973183 7.36766672]
[-30.70389175 -1.95111787]
[-46.74180603 -1.54507709]
[-56.94797897 -13.92302513]
[-53.49310684 -29.58965874]
[-39.02747345 -36.52687836]
[-24.64787483 -29.41304207]
[-21.38510704 -13.70527649]
[-9.63094711 -4.38649178]
[2.12321162 4.93229294]
[13.87737083 14.25107765]
[25.63152885 23.56986237]
[37.38568878 32.88864899]
[49.13984680 42.20743179]
[56.37557983 43.90803528]
[61.03350449 51.83216095]
[72.59885406 61.38426590]
[79.61759949 58.74092865]
[74.33115387 44.70335388]
[88.36881256 39.41714096]
[93.65508270 53.45425034]
[100.67382812 50.81091309]
[103.06480408 36.00269699]
[105.45578003 21.19448280]
[107.84674835 6.38626719]
[110.23772430 -8.42194843]
[112.62870026 -23.23016357]
[115.01967621 -38.03837967]
[117.41065216 -52.84659195]
[111.07714844 -67.97335052]
[121.22449493 -80.85603333]
[137.41397095 -78.24203491]
[142.99122620 -62.82041931]
[132.21887207 -50.45561981]
[129.82789612 -35.64740372]
[127.43692017 -20.83918762]
[125.04594421 -6.03097296]
[122.65496826 8.77724171]
[120.26399231 23.58545685]
[117.87301636 38.39367294]
[115.48204041 53.20188904]
[128.26771545 61.04576492]
[140.38531494 52.20471954]
[152.50289917 43.36367416]
[164.62048340 34.52263260]
[176.73808289 25.68158722]
[188.85566711 16.84054375]
[189.73468018 1.22768557]
[200.48141479 -10.13196945]
[216.02157593 -11.87474060]
[229.01759338 -3.17774320]
[233.33312988 11.85256577]
[226.93052673 26.11933327]
[212.83288574 32.88623047]
[197.69670105 28.95813179]
[185.57911682 37.79917526]
[173.46153259 46.64022064]
[161.34394836 55.48126221]
[149.22634888 64.32231140]
[137.10876465 73.16335297]
[134.62187195 111.13942719]
[108.52939606 125.55794525]
[109.12953949 140.54592896]
[109.72968292 155.53392029]
[110.32982635 170.52191162]
[110.92996979 185.50990295]
[111.53011322 200.49789429]
[112.13025665 215.48588562]
[126.76359558 219.19335938]
[139.74621582 226.86628723]
[150.03033447 237.87547302]
[156.78872681 251.32286072]
[159.48133850 266.11480713]
[157.89833069 281.05102539]
[152.17652893 294.92190552]
[142.78752136 306.60662842]
[130.49890137 315.16354370]
[116.31142426 319.90621948]
[116.91156769 334.89419556]
[117.51171112 349.88220215]
[118.11185455 364.87017822]
[118.71199799 379.85815430]
[119.31214142 394.84616089]
[119.91228485 409.83413696]
[122.76751709 414.33743286]
[123.49742889 419.01535034]
[122.39969635 423.01574707]
[120.07136536 425.73367310]
[119.77123260 440.73068237]
[119.47109985 455.72766113]
[119.17097473 470.72467041]
[118.87084198 485.72164917]
[132.97178650 491.23425293]
[144.31460571 501.21987915]
[151.54302979 514.45880127]
[153.80158997 529.34399414]
[150.83677673 544.07598877]
[143.02532959 556.88055420]
[131.32653809 566.22222900]
[117.16440582 570.98870850]
[116.86427307 585.98571777]
[116.56414032 600.98266602]
[116.26400757 615.97967529]
[127.39284515 627.20129395]
[127.24369812 643.00488281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 154]
[5 153]
[6 152]
[7 151]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[42 113]
[45 68]
[46 67]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
