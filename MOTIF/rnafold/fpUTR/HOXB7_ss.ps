%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCUUUUUGGUGUAAAUCUGGACUCUAAUUCUGUAAUAUAUCAAGGAAUCUCGUAAAACCGACACUAAAACGUCCCUGCCUACAAAUCAUCCGGCCAAAUU\
) } def
/len { sequence length } bind def

/coor [
[143.57148743 436.12869263]
[141.31451416 421.29946899]
[139.05754089 406.47024536]
[136.80058289 391.64099121]
[122.03843689 389.26608276]
[108.71509552 382.43539429]
[98.14107513 371.80664062]
[91.36086273 358.41186523]
[89.04968262 343.55722046]
[91.44631195 328.69546509]
[98.32846069 315.28411865]
[109.03334045 304.64230347]
[122.52146149 297.82116699]
[120.26449585 282.99194336]
[118.00752258 268.16271973]
[115.75055695 253.33348083]
[101.46141052 249.05729675]
[90.40040588 238.95959473]
[84.79754639 225.00363159]
[85.81384277 209.93753052]
[93.30115509 196.75318909]
[105.82099915 188.09207153]
[103.56403351 173.26283264]
[101.30706024 158.43360901]
[99.05009460 143.60437012]
[80.16104126 138.84146118]
[65.22969055 126.33000183]
[57.23472977 108.56592560]
[57.77108383 89.09302521]
[66.73175812 71.79596710]
[57.12856293 60.27300262]
[47.52537155 48.75003815]
[37.92218018 37.22707748]
[28.31898689 25.70411301]
[13.52791691 29.47068024]
[-1.43092465 26.43822098]
[-13.58745003 17.20883179]
[-20.52797318 3.61501265]
[-20.87444687 -11.64417171]
[-14.55807877 -25.53899956]
[-2.83298874 -35.31064224]
[11.97279835 -39.01893616]
[26.91958237 -35.92759323]
[39.03966904 -26.65040207]
[45.92660522 -13.02935791]
[46.21298599 2.23107266]
[39.84194946 16.10091972]
[49.44514084 27.62388420]
[59.04833603 39.14684677]
[68.65152740 50.66981125]
[78.25472260 62.19277573]
[93.43753052 56.88182068]
[109.51290894 57.43536377]
[115.25315857 43.57717133]
[120.99340820 29.71897888]
[114.71457672 15.21546936]
[120.60790253 0.55108333]
[135.17698669 -5.57405949]
[149.77824402 0.47398010]
[155.74900818 15.10700703]
[149.54693604 29.64350700]
[134.85160828 35.45923233]
[129.11135864 49.31742477]
[123.37110138 63.17561722]
[131.00456238 69.32492065]
[137.07196045 77.02365112]
[141.26683044 85.88292694]
[143.37728882 95.45526886]
[143.29672241 105.25717163]
[141.02919006 114.79353333]
[136.68925476 123.58265686]
[130.49612427 131.18060303]
[122.76260376 137.20359802]
[113.87932587 141.34739685]
[116.13629150 156.17663574]
[118.39326477 171.00585938]
[120.65023041 185.83509827]
[135.17988586 190.37936401]
[146.25056458 200.73922729]
[151.70306396 214.82080078]
[150.50584412 229.81172180]
[142.94976807 242.74288940]
[130.57978821 251.07650757]
[132.83676147 265.90573120]
[135.09371948 280.73495483]
[137.35069275 295.56420898]
[152.25740051 298.06375122]
[165.64353943 305.03897095]
[176.20399475 315.79559326]
[182.91351318 329.27139282]
[185.12628174 344.14105225]
[182.63806152 358.94644165]
[175.70491028 372.23971558]
[165.01698303 382.72488403]
[151.62980652 389.38403320]
[153.88677979 404.21325684]
[156.14373779 419.04251099]
[158.40071106 433.87173462]
[171.27723694 443.03527832]
[173.82028198 458.63363647]
[164.52110291 471.41256714]
[148.89672852 473.79052734]
[136.21684265 464.35678101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[13 86]
[14 85]
[15 84]
[16 83]
[22 77]
[23 76]
[24 75]
[25 74]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
