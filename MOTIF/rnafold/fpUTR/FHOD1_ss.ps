%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCGCGUCCGGUCCGGCCGGGCCCGAACCGCGGAGCUACAGUGUGCUUUGAGUAGAAGCUGCACUGGGGCCGGGACUCGGAGGCGCGCUGCGUGAGCCGGCCGCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[262.84039307 352.51272583]
[254.92306519 339.77239990]
[247.00573730 327.03207397]
[239.08840942 314.29174805]
[230.99475098 301.66271973]
[222.72631836 289.14739990]
[214.45788574 276.63208008]
[200.98660278 270.27804565]
[199.83520508 254.49879456]
[191.56678772 241.98347473]
[183.29835510 229.46815491]
[175.02993774 216.95285034]
[166.58833313 204.55366516]
[157.97520447 192.27304077]
[149.36207581 179.99240112]
[140.74894714 167.71177673]
[131.96592712 155.55204773]
[123.01474762 143.51559448]
[114.06356812 131.47914124]
[105.11238098 119.44268036]
[89.86763763 117.36345673]
[80.55772400 105.11392975]
[65.67496490 103.24221039]
[50.79219818 101.37048340]
[35.88485718 99.70581818]
[20.95581436 98.24853516]
[6.02677107 96.79124451]
[-7.22909689 105.82791901]
[-22.51605797 100.96084595]
[-28.10726357 85.92362976]
[-19.71361923 72.25153351]
[-3.77401066 70.43261719]
[7.48405838 81.86220551]
[22.41310120 83.31948853]
[37.34214401 84.77677917]
[44.40428925 82.25916290]
[52.66392136 86.48772430]
[67.54668427 88.35944366]
[82.42945099 90.23117065]
[85.88375854 85.68615723]
[90.47634888 82.29535675]
[88.81168365 67.38801575]
[87.14701843 52.48067093]
[85.48235321 37.57332611]
[83.81768799 22.66598320]
[82.15302277 7.75864029]
[80.28129578 -7.12412310]
[78.20287323 -21.97943115]
[76.12445831 -36.83473969]
[74.04603577 -51.69004822]
[71.96762085 -66.54535675]
[60.07861710 -77.31713104]
[61.23141861 -93.31871033]
[74.54169464 -102.27505493]
[89.79894257 -97.31562042]
[95.29910278 -82.24485779]
[86.82292938 -68.62377167]
[88.90134430 -53.76846695]
[90.97976685 -38.91315842]
[93.05818176 -24.05784988]
[95.13660431 -9.20254230]
[99.23764801 -2.92609978]
[97.06036377 6.09397411]
[98.72502899 21.00131798]
[100.38969421 35.90866089]
[102.05435944 50.81600571]
[103.71902466 65.72335052]
[105.38368988 80.63069153]
[118.70416260 92.63056183]
[117.14884186 110.49150085]
[126.10002136 122.52795410]
[135.05120850 134.56440735]
[144.00239563 146.60087585]
[151.74722290 151.71163940]
[153.02957153 159.09864807]
[161.64270020 171.37927246]
[170.25584412 183.65991211]
[178.86897278 195.94053650]
[186.46873474 201.26461792]
[187.54525757 208.68441772]
[195.81367493 221.19973755]
[204.08210754 233.71505737]
[212.35052490 246.23036194]
[226.41322327 253.47958374]
[226.97320557 268.36364746]
[235.24163818 280.87896729]
[243.51005554 293.39428711]
[250.95889282 298.92758179]
[251.82873535 306.37442017]
[259.74606323 319.11474609]
[267.66339111 331.85507202]
[275.58071899 344.59539795]
[282.34167480 344.20562744]
[288.88391113 345.78973389]
[294.64730835 349.18765259]
[299.14541626 354.08499146]
[302.00677490 360.04217529]
[303.00527954 366.53369141]
[302.07812500 372.99453735]
[299.32897949 378.86923218]
[295.01712036 383.65985107]
[300.32119751 397.69076538]
[305.62527466 411.72167969]
[320.13156128 417.99411011]
[325.87600708 432.71746826]
[319.45056152 447.15661621]
[304.66732788 452.74508667]
[290.29690552 446.16732788]
[284.86505127 431.32583618]
[291.59436035 417.02575684]
[286.29028320 402.99484253]
[280.98620605 388.96392822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 87]
[6 86]
[7 85]
[9 83]
[10 82]
[11 81]
[12 80]
[13 78]
[14 77]
[15 76]
[16 75]
[17 73]
[18 72]
[19 71]
[20 70]
[22 39]
[23 38]
[24 37]
[25 35]
[26 34]
[27 33]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
