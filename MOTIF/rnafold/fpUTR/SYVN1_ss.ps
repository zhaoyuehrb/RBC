%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUGGGGAGUGUUGUUAACCGGAGGGGCAGCCGCAGUCGCGCGGAUUGAGCGGGCUCGCGGCGCUGGGUUCCUGGUCUCCGGGCCAGGGCA\
) } def
/len { sequence length } bind def

/coor [
[93.69351959 147.05314636]
[84.45636749 144.85717773]
[75.84094238 140.86698914]
[68.19183350 135.24217224]
[56.50867462 144.64982605]
[44.82551575 154.05746460]
[49.13619995 168.63438416]
[47.53543854 183.75079346]
[40.26733780 197.10156250]
[28.44022560 206.65080261]
[13.85765266 210.94230652]
[-1.25664341 209.32167053]
[-14.59784317 202.03601074]
[-24.13150978 190.19633484]
[-28.40382957 175.60813904]
[-26.76330566 160.49598694]
[-19.46010208 147.16438293]
[-7.60790825 137.64630127]
[6.98590374 133.39317322]
[22.09588432 135.05357361]
[35.41786957 142.37431335]
[47.10102844 132.96665955]
[58.78418732 123.55901337]
[53.34801102 108.79559326]
[53.03519058 93.06623077]
[57.88008118 78.09834290]
[67.35060883 65.53570557]
[80.40671539 56.75796509]
[95.61457062 52.72909546]
[96.60593414 37.76189041]
[97.59729004 22.79468536]
[95.00526428 13.82327175]
[98.87694550 7.35159445]
[100.36262512 -7.57464886]
[101.84830475 -22.50089264]
[103.33399200 -37.42713547]
[104.81967163 -52.35337830]
[106.05836487 -67.30214691]
[107.04972076 -82.26934814]
[108.04108429 -97.23655701]
[109.03244019 -112.20375824]
[106.44041443 -121.17517853]
[110.31208801 -127.64685059]
[111.79777527 -142.57308960]
[113.28345490 -157.49934387]
[102.23011780 -168.56088257]
[100.92450714 -184.14385986]
[109.98308563 -196.89048767]
[125.12866974 -200.78216553]
[139.20999146 -193.98138428]
[145.57826233 -179.69926453]
[141.22659302 -164.67936707]
[128.20970154 -156.01365662]
[126.72401428 -141.08741760]
[125.23833466 -126.16117096]
[123.99964142 -111.21240234]
[123.00828552 -96.24519348]
[122.01692963 -81.27799225]
[121.02556610 -66.31079102]
[123.77923584 -59.29011917]
[119.74591827 -50.86769485]
[118.26023102 -35.94145203]
[116.77455139 -21.01520920]
[115.28887177 -6.08896589]
[113.80318451 8.83727741]
[112.56449890 23.78604507]
[111.57313538 38.75325012]
[110.58177948 53.72045517]
[127.23787689 61.11724854]
[139.87992859 74.24420166]
[146.64488220 91.16678619]
[146.53576660 109.39112091]
[139.56866455 126.23148346]
[150.60452271 136.39070129]
[161.64038086 146.54992676]
[172.67623901 156.70915222]
[183.71209717 166.86837769]
[194.74795532 177.02760315]
[205.78382874 187.18682861]
[216.81968689 197.34605408]
[232.93151855 200.40229797]
[238.08448792 215.97082520]
[226.97764587 228.03605652]
[211.03675842 224.18634033]
[206.66046143 208.38191223]
[195.62460327 198.22268677]
[184.58874512 188.06346130]
[173.55288696 177.90423584]
[162.51702881 167.74501038]
[151.48117065 157.58578491]
[140.44529724 147.42657471]
[129.40943909 137.26734924]
[121.40531921 142.37431335]
[112.54500580 145.78639221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[29 68]
[30 67]
[31 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 59]
[39 58]
[40 57]
[41 56]
[43 55]
[44 54]
[45 53]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
