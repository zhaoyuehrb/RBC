%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGGAUUUGUCCCGCCCACCGCCGCCAGCCCGGUUCCGUUUCCGGCUGGCUGAGUACUGGGGUCCAGAAAGUGAUCGCUGCCGUGGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[112.66841125 137.99929810]
[100.24832153 129.58851624]
[104.40937805 115.17729950]
[96.91347504 115.42527008]
[87.31394958 126.95128632]
[77.71441650 138.47731018]
[68.11489105 150.00332642]
[58.51536179 161.52934265]
[56.26176453 177.77290344]
[40.96789169 183.69146729]
[28.36676979 173.19653320]
[31.42135239 157.08438110]
[46.98934555 151.92980957]
[56.58887482 140.40379333]
[66.18840027 128.87777710]
[75.78793335 117.35176086]
[85.38745880 105.82574463]
[87.36584473 90.95677948]
[81.11411285 77.32168579]
[74.86238861 63.68658447]
[68.61065674 50.05148697]
[54.06735229 44.47205734]
[47.92145157 30.55507088]
[53.33021164 16.72463608]
[47.07848358 3.08953881]
[30.13658714 -7.58570671]
[32.27884674 -26.68316650]
[25.13963699 -39.87527466]
[18.00042534 -53.06737900]
[10.86121464 -66.25948334]
[3.72200370 -79.45159149]
[-3.41720724 -92.64369965]
[-10.55641842 -105.83580780]
[-17.53156853 -112.04484558]
[-17.70536995 -119.58422852]
[-24.40450096 -133.00517273]
[-39.73153305 -135.42626953]
[-50.68445206 -146.41777039]
[-53.05163574 -161.75321960]
[-45.92285919 -175.53582764]
[-32.03927612 -182.46588135]
[-16.73941040 -179.87866211]
[-5.90637350 -168.76898193]
[-3.70568728 -153.40875244]
[-10.98356152 -139.70429993]
[-4.28442907 -126.28335571]
[2.63568807 -112.97501373]
[9.77489948 -99.78290558]
[16.91411018 -86.59080505]
[24.05331993 -73.39869690]
[31.19253159 -60.20658875]
[38.33174133 -47.01448441]
[45.47095490 -33.82237625]
[55.71753693 -31.71763420]
[63.19208527 -24.08553123]
[65.16325378 -13.36048985]
[60.71358109 -3.16218925]
[66.96530914 10.47290897]
[80.97451019 15.40015507]
[87.50888824 29.13902473]
[82.24575806 43.79975891]
[88.49748230 57.43486023]
[94.74921417 71.06995392]
[101.00093842 84.70505524]
[99.22198486 69.81092072]
[104.56845856 55.79609680]
[115.81555176 45.87123108]
[130.38667297 42.30999756]
[144.94375610 45.92823029]
[156.15191650 55.89703751]
[161.44349670 69.93267822]
[159.60626221 84.81973267]
[151.06111145 97.14775848]
[137.76345825 104.09307098]
[148.10375977 114.95944977]
[158.44406128 125.82582855]
[168.78434753 136.69219971]
[179.12464905 147.55857849]
[189.46495056 158.42495728]
[199.80525208 169.29133606]
[210.14555359 180.15771484]
[226.02018738 184.27210999]
[230.13294983 200.14717102]
[218.25299072 211.45198059]
[202.60139465 206.55712891]
[199.27917480 190.49801636]
[188.93887329 179.63163757]
[178.59857178 168.76525879]
[168.25828552 157.89888000]
[157.91798401 147.03250122]
[147.57768250 136.16612244]
[137.23738098 125.29975128]
[126.89707184 114.43337250]
[119.40117645 114.68134308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[18 64]
[19 63]
[20 62]
[21 61]
[24 58]
[25 57]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[35 46]
[36 45]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
