%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCUCGGUGUUCGCCCGCCGACGCCGCACGGCUUGCUGGGGCUGGGCUCUUCCUCGCGGAAGUGGGGAGGAGGCGGUUGCGGUUAGUGGACCGGGACCGGUAGGGGUGCUGUUGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[104.54589081 200.53950500]
[89.38808441 202.66069031]
[74.98466492 197.48379517]
[64.64543915 186.19845581]
[60.74628830 171.39793396]
[64.18320465 156.48330688]
[74.16640472 144.88183594]
[88.40183258 139.25944519]
[89.94414520 124.33894348]
[91.48646545 109.41844940]
[88.79724884 94.66147614]
[82.09084320 81.24417114]
[75.38443756 67.82686615]
[68.67803192 54.40956116]
[61.97162247 40.99225235]
[55.26521683 27.57494736]
[40.54262924 22.48739815]
[33.93251419 8.78480721]
[38.87344360 -5.21957779]
[32.16703796 -18.63688469]
[25.46063042 -32.05419159]
[18.75422287 -45.47149658]
[4.03163576 -50.55904388]
[-2.57848001 -64.26163483]
[2.36245108 -78.26602173]
[-4.34395599 -91.68332672]
[-11.05036259 -105.10063171]
[-17.75676918 -118.51794434]
[-24.46317673 -131.93524170]
[-38.57812119 -121.86300659]
[-60.61804199 -123.82434845]
[-74.36279297 -129.83116150]
[-88.10755157 -135.83796692]
[-101.85230255 -141.84477234]
[-115.59705353 -147.85157776]
[-129.34181213 -153.85838318]
[-145.56983948 -151.49552917]
[-155.51637268 -164.53387451]
[-148.94926453 -179.56069946]
[-132.62420654 -181.11767578]
[-123.33499908 -167.60314941]
[-109.59024811 -161.59632874]
[-95.84549713 -155.58952332]
[-82.10073853 -149.58271790]
[-68.35598755 -143.57591248]
[-54.61123276 -137.56910706]
[-48.28291702 -141.59432983]
[-35.62628174 -149.64476013]
[-29.29796600 -153.66998291]
[-28.91174698 -168.66500854]
[-28.52552795 -183.66003418]
[-28.13930893 -198.65507507]
[-27.75309181 -213.65010071]
[-27.36687279 -228.64512634]
[-26.98065376 -243.64015198]
[-26.59443474 -258.63516235]
[-26.20821571 -273.63018799]
[-25.82199669 -288.62524414]
[-25.43577957 -303.62026978]
[-33.73810196 -317.76251221]
[-25.40750504 -331.88815308]
[-9.01379395 -331.46588135]
[-1.42141259 -316.93014526]
[-10.44075203 -303.23403931]
[-10.82697010 -288.23901367]
[-11.21318913 -273.24398804]
[-11.59940815 -258.24896240]
[-11.98562622 -243.25393677]
[-12.37184525 -228.25889587]
[-12.75806427 -213.26387024]
[-13.14428234 -198.26884460]
[-13.53050137 -183.27381897]
[-13.91672039 -168.27879333]
[-14.30293846 -153.28376770]
[-11.04586983 -138.64164734]
[-4.33946323 -125.22434998]
[2.36694360 -111.80704498]
[9.07334995 -98.38973236]
[15.77975750 -84.97242737]
[29.94663048 -80.51874542]
[36.93901443 -67.00722504]
[32.17153168 -52.17790222]
[38.87793732 -38.76059723]
[45.58434296 -25.34329033]
[52.29075241 -11.92598438]
[66.45762634 -7.47230339]
[73.45001221 6.03921795]
[68.68252563 20.86854172]
[75.38893127 34.28584671]
[82.09533691 47.70315170]
[88.80174255 61.12046051]
[95.50814819 74.53776550]
[102.21456146 87.95507050]
[142.43083191 86.36878967]
[154.65625000 95.06010437]
[166.88168335 103.75141907]
[182.61236572 105.44141388]
[188.50230408 119.12198639]
[200.72772217 127.81330109]
[212.95315552 136.50460815]
[228.49285889 133.62483215]
[241.46989441 142.64547729]
[244.18522644 158.21475220]
[235.02787781 171.09570312]
[219.43077087 173.64627075]
[206.64735413 164.35325623]
[204.26182556 148.73004150]
[192.03640747 140.03872681]
[179.81098938 131.34741211]
[164.95474243 130.27908325]
[158.19036865 115.97684479]
[145.96493530 107.28553009]
[133.73951721 98.59421539]
[126.90637207 101.68585205]
[113.24009705 107.86912537]
[106.40695953 110.96076202]
[104.86464691 125.88126373]
[103.32233429 140.80175781]
[116.10668945 149.21714783]
[123.50569916 162.61540222]
[123.81912231 177.91770935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 118]
[9 117]
[10 116]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[19 85]
[20 84]
[21 83]
[22 82]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[94 113]
[95 112]
[96 111]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
