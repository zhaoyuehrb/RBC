%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUGCUGAGACAGACUCCCAGAAGAUCUGAGCGAGUCGCGUAGCUGAGCCCGGCAGGGGCUGGGGUGGUGCUGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[136.84443665 144.04598999]
[135.38883972 158.97518921]
[129.07342529 172.58091736]
[118.61029816 183.32907104]
[105.17918396 190.00778198]
[90.29447937 191.86401367]
[75.63447571 188.68844604]
[62.85211182 180.83915710]
[53.38864517 169.20117188]
[48.31110001 155.08670044]
[48.19197845 140.08717346]
[53.04471970 125.89382935]
[62.32215500 114.10700226]
[74.97824097 106.05569458]
[89.58596802 102.64770508]
[76.59558105 95.14770508]
[63.60520172 87.64770508]
[50.61482239 80.14770508]
[37.62444305 72.64770508]
[17.67733383 73.80844879]
[8.25503254 57.10467148]
[-5.27747917 50.63388062]
[-18.80998993 44.16308975]
[-32.34250259 37.69229889]
[-49.24035645 36.31432724]
[-52.59403229 19.69538689]
[-37.55295181 11.87219620]
[-25.87171173 24.15978813]
[-12.33920002 30.63057899]
[1.19331169 37.10136795]
[14.72582340 43.57216263]
[24.32461357 39.22688293]
[34.92633820 41.06202316]
[42.82695389 48.69026566]
[45.12444305 59.65732574]
[58.11482239 67.15732574]
[71.10520172 74.65732574]
[84.09558105 82.15732574]
[97.08596802 89.65732574]
[111.74597168 92.83288574]
[126.67551422 91.38072205]
[141.57409668 89.63932800]
[156.43609619 87.60935974]
[171.29809570 85.57939148]
[186.16011047 83.54942322]
[201.02210999 81.51944733]
[207.03286743 66.25017548]
[219.80323792 56.09365845]
[235.84970093 53.70154953]
[250.85412598 59.62351608]
[260.82577515 72.18447876]
[275.59790039 69.57975769]
[290.37002563 66.97502899]
[305.14212036 64.37030792]
[319.91424561 61.76558685]
[334.68637085 59.16086578]
[346.89419556 48.21093750]
[362.39480591 53.56475449]
[365.24249268 69.71475983]
[352.50778198 80.04721832]
[337.29107666 73.93298340]
[322.51898193 76.53770447]
[307.74685669 79.14242554]
[292.97473145 81.74714661]
[278.20260620 84.35186768]
[263.43051147 86.95659637]
[259.55212402 100.19589996]
[250.26152039 110.48426819]
[237.36155701 115.73878479]
[223.39331055 114.86182404]
[211.13557434 107.96978760]
[203.05207825 96.38145447]
[188.19007874 98.41142273]
[173.32807922 100.44139862]
[158.46606445 102.47136688]
[143.60406494 104.50133514]
[137.23873901 108.63404083]
[128.12768555 106.31026459]
[113.19813538 107.76242828]
[125.08620453 116.90976715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[21 31]
[22 30]
[23 29]
[24 28]
[40 79]
[41 78]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
