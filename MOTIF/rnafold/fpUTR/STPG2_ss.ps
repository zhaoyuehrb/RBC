%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCUUCCUUUUUCUCCACACUUCUAGCUACCUUGUUUUUAUCGUUUUCGGCACCUGCCCUUCCCCAGCGCCCCCACCACCCCGAGCACU\
) } def
/len { sequence length } bind def

/coor [
[-39.83012009 199.82533264]
[-52.48336792 191.96652222]
[-65.64290619 199.16558838]
[-78.80245209 206.36465454]
[-91.96199036 213.56372070]
[-88.72602844 228.31855774]
[-89.77943420 243.38729858]
[-95.03681946 257.54840088]
[-104.07199097 269.65386963]
[-116.15250397 278.72235107]
[-130.29905701 284.01876831]
[-145.36483765 285.11370850]
[-160.12854004 281.91842651]
[-173.39332581 274.69195557]
[-184.08389282 264.02008057]
[-191.33360291 250.76797485]
[-194.55474854 236.00990295]
[-193.48619080 220.94221497]
[-188.21458435 206.78642273]
[-179.16725159 194.69003296]
[-167.07763672 185.63366699]
[-152.92578125 180.35148621]
[-137.85890198 179.27168274]
[-123.09841919 182.48178101]
[-109.84089661 189.72158813]
[-99.16105652 200.40417480]
[-86.00151062 193.20510864]
[-72.84197235 186.00605774]
[-59.68243027 178.80699158]
[-59.47618866 163.91326904]
[-51.79157257 151.03681946]
[-38.60640335 143.68714905]
[-23.41298485 143.92555237]
[-10.29326630 151.78813171]
[2.86627412 144.58908081]
[16.02581406 137.39001465]
[29.18535423 130.19094849]
[42.34489441 122.99188995]
[38.51834869 108.52904510]
[38.26344299 93.57073212]
[41.59498215 78.98590851]
[48.31943130 65.62185669]
[58.04614639 54.25492096]
[70.21007538 45.54544830]
[84.10458374 39.99938583]
[98.92250061 37.93892670]
[113.80301666 39.48376465]
[127.88166809 44.54415894]
[140.34060669 52.82613373]
[150.45603943 63.84857178]
[163.61558533 56.64950943]
[176.77511597 49.45044708]
[181.21652222 37.19224930]
[192.50085449 31.50996399]
[204.21968079 35.01078033]
[217.61987305 28.27022362]
[231.02005005 21.52966690]
[233.39379883 6.19523048]
[244.35142517 -4.79158783]
[259.67947388 -7.20613194]
[273.48403931 -0.11996005]
[280.45697021 13.74215031]
[277.91699219 29.04993439]
[266.84085083 39.91723633]
[251.48748779 42.16535950]
[237.76060486 34.92985153]
[224.36042786 41.67040634]
[210.96023560 48.41096115]
[202.26414490 63.54739380]
[183.97418213 62.60998917]
[170.81465149 69.80905151]
[157.65510559 77.00811005]
[161.48164368 91.47095490]
[161.73655701 106.42926788]
[158.40501404 121.01409149]
[151.68057251 134.37814331]
[141.95385742 145.74507141]
[129.78991699 154.45455933]
[115.89541626 160.00061035]
[101.07749939 162.06108093]
[86.19698334 160.51623535]
[72.11833191 155.45584106]
[59.65939331 147.17385864]
[49.54395676 136.15142822]
[36.38441849 143.35049438]
[23.22487640 150.54956055]
[10.06533623 157.74861145]
[-3.09420395 164.94767761]
[-3.54884362 180.23625183]
[-11.54219913 193.15922546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[50 72]
[51 71]
[52 70]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
