%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUCCCUGGAGGAGAACUGAAACUUAGGGUGGGGACUGUAGAAAGGGGCGGAGAGAUCAGCCGCCCAGCCAGGAGUUAAGCUGAGGUCGUCUGAGCCCUGCGACAGCCUGGACAGCAACUCAGG\
) } def
/len { sequence length } bind def

/coor [
[83.19255066 127.42406464]
[79.07349396 113.00041962]
[71.79826355 111.17807007]
[59.53448868 119.81519318]
[47.27071762 128.45231628]
[40.44310760 142.72447205]
[25.58228111 143.72703552]
[13.31850910 152.36415100]
[1.05473650 161.00128174]
[-11.20903587 169.63839722]
[-23.47280884 178.27552795]
[-28.75800514 185.85784912]
[-36.14521790 186.96977234]
[-48.61725998 195.30332947]
[-46.93866348 210.51651001]
[-52.53305054 224.76296997]
[-64.11487579 234.76895142]
[-79.02272034 238.23518372]
[-93.83087158 234.36514282]
[-105.13652039 224.04812622]
[-110.34172058 209.65490723]
[-108.25034332 194.49295044]
[-99.34297943 182.04637146]
[-85.66647339 175.17529297]
[-70.36358643 175.45863342]
[-56.95081329 182.83128357]
[-44.47877121 174.49772644]
[-32.10993195 166.01174927]
[-19.84615898 157.37463379]
[-7.58238649 148.73750305]
[4.68138599 140.10038757]
[16.94515800 131.46325684]
[22.89558220 117.80889893]
[38.63359451 116.18854523]
[50.89736557 107.55142212]
[63.16113663 98.91429901]
[76.59479523 84.55141449]
[91.92214203 82.54557800]
[101.25281525 89.65348053]
[108.32376862 76.42466736]
[115.39472198 63.19584656]
[122.46566772 49.96702576]
[115.52350616 37.99026489]
[115.43413544 24.25587273]
[122.11341095 12.37909985]
[133.70964050 5.43287182]
[147.11563110 5.15292597]
[154.50909424 -7.89837885]
[161.90257263 -20.94968414]
[169.29605103 -34.00098801]
[168.67462158 -52.35567093]
[184.03924561 -60.74102020]
[191.11019897 -73.96984100]
[198.18115234 -87.19865417]
[205.25209045 -100.42747498]
[212.16017151 -113.74207306]
[218.90434265 -127.14043427]
[214.17864990 -141.98312378]
[221.20906067 -155.47489929]
[235.38842773 -159.88865662]
[242.13258362 -173.28703308]
[248.87675476 -186.68539429]
[255.62092590 -200.08375549]
[262.36511230 -213.48211670]
[260.20629883 -233.45428467]
[276.62860107 -243.54385376]
[282.70724487 -257.25698853]
[288.61712646 -271.04370117]
[294.35736084 -284.90188599]
[289.57107544 -300.21435547]
[298.67764282 -313.42230225]
[314.69125366 -314.39376831]
[325.32763672 -302.38351440]
[322.42752075 -286.60476685]
[308.21557617 -279.16165161]
[302.47531128 -265.30343628]
[302.82592773 -257.84124756]
[296.42037964 -251.17837524]
[290.34176636 -237.46522522]
[294.90258789 -228.17762756]
[293.51272583 -217.70152283]
[286.39678955 -209.59214783]
[275.76345825 -206.73794556]
[269.01928711 -193.33958435]
[262.27511597 -179.94122314]
[255.53096008 -166.54286194]
[248.78678894 -153.14450073]
[253.68824768 -139.12625122]
[247.03956604 -125.44232941]
[232.30271912 -120.39626312]
[225.55854797 -106.99790192]
[225.35925293 -99.53012848]
[218.48091125 -93.35652161]
[211.40997314 -80.12770844]
[204.33901978 -66.89888763]
[197.26806641 -53.67006683]
[200.47781372 -41.93869019]
[194.60786438 -30.82934380]
[182.34735107 -26.60751534]
[174.95387268 -13.55621147]
[167.56040955 -0.50490618]
[160.16693115 12.54639912]
[167.44020081 27.20888901]
[164.54928589 43.48701477]
[152.43186951 54.97629547]
[135.69448853 57.03797913]
[128.62353516 70.26679993]
[121.55258942 83.49561310]
[114.48163605 96.72443390]
[114.29756165 111.72330475]
[121.04173279 125.12166595]
[127.78590393 138.52003479]
[134.53007507 151.91839600]
[141.27424622 165.31675720]
[156.60931396 167.68637085]
[167.59909058 178.64103699]
[170.01777649 193.96844482]
[162.93531799 207.77491760]
[149.07508850 214.75157166]
[133.76663208 212.21574402]
[122.89633179 201.14250183]
[120.64407349 185.78976440]
[127.87587738 172.06092834]
[121.13170624 158.66256714]
[114.38753510 145.26420593]
[107.64337158 131.86584473]
[100.89920044 118.46747589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[13 27]
[14 26]
[39 109]
[40 108]
[41 107]
[42 106]
[47 102]
[48 101]
[49 100]
[50 99]
[52 96]
[53 95]
[54 94]
[55 93]
[56 91]
[57 90]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[66 79]
[67 78]
[68 76]
[69 75]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
