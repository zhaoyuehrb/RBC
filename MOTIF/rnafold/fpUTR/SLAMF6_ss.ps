%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUAUGACAGAAGGGCAAAAACAUUGACUGCCUCAAGGUCUCAAGCACCAGUCUUCACCGCGGAAAGC\
) } def
/len { sequence length } bind def

/coor [
[144.52656555 168.34663391]
[145.63447571 143.45159912]
[133.61732483 134.47451782]
[121.60017395 125.49743652]
[109.58302307 116.52034760]
[95.22839355 118.49291992]
[83.62020874 109.82134247]
[81.43989563 95.49680328]
[69.42274475 86.51971436]
[57.40559006 77.54263306]
[43.31106186 83.48329926]
[28.23493767 81.58401489]
[16.21358109 72.45420837]
[10.41492367 58.62555695]
[12.30393124 43.85066986]
[0.28677854 34.87358475]
[-11.73037338 25.89650154]
[-23.74752617 16.91941643]
[-35.76467896 7.94233179]
[-49.54615402 14.60037231]
[-64.84280396 14.07961273]
[-78.13955688 6.49972057]
[-86.38093567 -6.39750099]
[-87.67311859 -21.64836502]
[-81.71916962 -35.74833298]
[-69.88727570 -45.45734024]
[-54.89630508 -48.54432297]
[-40.19108200 -44.29991531]
[-29.15075684 -33.69945526]
[-24.31231499 -19.17884636]
[-26.78759384 -4.07482052]
[-14.77044106 4.90226460]
[-2.75328898 13.87934875]
[9.26386356 22.85643387]
[21.28101540 31.83351898]
[34.91317368 25.83103371]
[49.81866074 27.46884727]
[61.98345566 36.40664291]
[68.08124542 50.32475281]
[66.38267517 65.52548218]
[78.39982605 74.50256348]
[90.41697693 83.47965240]
[104.77160645 81.50708008]
[116.37979126 90.17865753]
[118.56010437 104.50319672]
[130.57725525 113.48028564]
[142.59440613 122.45736694]
[154.61155701 131.43444824]
[161.15312195 127.05416870]
[168.50205994 124.26804352]
[176.27702332 123.21424103]
[184.07594299 123.94118500]
[191.49691772 126.40537262]
[198.15890503 130.47393799]
[203.72122192 135.93179321]
[207.90101624 142.49301147]
[210.48768616 149.81573486]
[211.35340881 157.52009583]
[210.45945740 165.20782471]
[207.85795593 172.48289490]
[203.68879700 178.97189331]
[198.17219543 184.34320068]
[204.59489441 197.89860535]
[219.15960693 204.62535095]
[222.84127808 220.24023438]
[212.81564331 232.76487732]
[196.77352905 232.59141541]
[187.02105713 219.85293579]
[191.03950500 204.32130432]
[184.61679077 190.76589966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[8 42]
[9 41]
[10 40]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
