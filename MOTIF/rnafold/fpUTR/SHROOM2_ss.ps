%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCGGCGCUCGGAGCCUCCCUUGCGAUCCCACGGCCGGGACUGCCCGGAGUGCAUGGGCGCGGGCCAGGGACGCUGAGCGGUCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[96.46005249 384.91296387]
[93.10116577 369.22546387]
[103.38293457 356.91024780]
[103.38293457 341.91024780]
[103.38293457 326.91024780]
[103.38293457 311.91024780]
[103.38293457 296.91024780]
[103.38293457 281.91024780]
[103.12403107 266.91247559]
[102.60628510 251.92141724]
[102.08854675 236.93034363]
[101.57080078 221.93928528]
[101.05306244 206.94822693]
[100.53531647 191.95716858]
[86.45571899 180.50817871]
[84.97426605 162.10725403]
[97.45758057 148.08485413]
[95.90682220 133.16523743]
[94.35605621 118.24560547]
[83.17253113 109.03285217]
[81.67454529 94.62097168]
[90.72431946 83.30515289]
[89.17356110 68.38552856]
[87.62280273 53.46590424]
[86.07203674 38.54628372]
[84.52127838 23.62665939]
[82.97052002 8.70703697]
[78.89490509 0.28681800]
[81.63288116 -6.75302219]
[80.59801483 -21.71728134]
[79.56314850 -36.68154144]
[77.75509644 -51.57217407]
[75.17871094 -66.34925842]
[72.60232544 -81.12634277]
[62.42816925 -89.27962494]
[60.68367386 -101.79287720]
[67.77276611 -111.75938416]
[65.70796204 -126.61659241]
[63.64315796 -141.47380066]
[61.57835770 -156.33100891]
[59.51355362 -171.18821716]
[49.01566315 -183.78688049]
[54.93065643 -199.08213806]
[71.17369080 -201.33953857]
[81.03532410 -188.23686218]
[74.37075806 -173.25302124]
[76.43556213 -158.39581299]
[78.50036621 -143.53860474]
[80.56517029 -128.68139648]
[82.62997437 -113.82418823]
[94.15841675 -100.71585083]
[87.37940979 -83.70272827]
[89.95579529 -68.92564392]
[92.53218079 -54.14855957]
[95.41047668 -51.77351761]
[97.17494965 -47.78928757]
[97.03624725 -42.78909683]
[94.52740479 -37.71640778]
[95.56227112 -22.75214767]
[96.59713745 -7.78788948]
[97.89014435 7.15627813]
[99.44090271 22.07590103]
[100.99166107 36.99552536]
[102.54241943 51.91514587]
[104.09317780 66.83477020]
[105.64394379 81.75439453]
[116.82746887 90.96714783]
[118.32545471 105.37902832]
[109.27568054 116.69484711]
[110.82643890 131.61447144]
[112.37719727 146.53408813]
[123.10237122 152.22886658]
[129.59417725 162.34745789]
[130.28607178 174.22813416]
[125.11904144 184.81394958]
[115.52638245 191.43942261]
[116.04412079 206.43048096]
[116.56186676 221.42153931]
[117.07960510 236.41261292]
[117.59735107 251.40367126]
[118.11508942 266.39474487]
[121.60007477 275.07608032]
[118.38293457 281.91024780]
[118.38293457 296.91024780]
[118.38293457 311.91024780]
[118.38293457 326.91024780]
[118.38293457 341.91024780]
[118.38293457 356.91024780]
[128.66470337 369.22546387]
[125.30582428 384.91296387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[17 71]
[18 70]
[19 69]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[29 60]
[30 59]
[31 58]
[32 54]
[33 53]
[34 52]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
