%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUGCUGUGACCGCAGCAUCUCUAGGAAGACGCUUUAUUCCUGAAGGACACUGACUGUCACUUGGGAACCAAGAAGCCCUCUGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[119.15317535 134.99076843]
[108.20373535 139.03712463]
[96.55177307 139.74050903]
[85.19509888 137.04069519]
[75.10624695 131.16888428]
[63.70857239 140.92045593]
[52.31089401 150.67201233]
[40.91321945 160.42356873]
[29.51554108 170.17514038]
[18.11786270 179.92669678]
[13.17023659 195.56169128]
[-2.89998651 198.82971191]
[-13.56113911 186.36889648]
[-7.84594154 170.99786377]
[8.36630154 168.52902222]
[19.76397896 158.77745056]
[31.16165543 149.02589417]
[42.55933380 139.27433777]
[53.95701218 129.52276611]
[65.35469055 119.77120972]
[60.20521927 97.24795532]
[68.40607452 75.64795685]
[58.45923233 64.42029572]
[43.51657486 59.22149277]
[40.86828232 44.56421661]
[30.92144394 33.33655548]
[20.97460365 22.10889244]
[11.02776432 10.88123131]
[1.08092439 -0.34642982]
[-8.86591530 -11.57409096]
[-24.09512329 -9.10938358]
[-38.23012924 -15.29041481]
[-46.76050568 -28.14483833]
[-46.96423721 -43.57085800]
[-38.77632141 -56.64608383]
[-24.80948257 -63.19825745]
[-9.52049446 -61.13660812]
[2.21198344 -51.11899948]
[6.64416075 -36.34201431]
[2.36174583 -21.52093124]
[12.30858517 -10.29327011]
[22.25542641 0.93439150]
[32.20226669 12.16205311]
[42.14910507 23.38971329]
[52.09594345 34.61737442]
[66.32714081 39.01309586]
[69.68689728 54.47345352]
[79.63373566 65.70111084]
[91.29520416 61.07154083]
[103.81787109 60.29329681]
[115.96282196 63.44337845]
[126.52851868 70.21012878]
[134.46965027 79.92410278]
[139.00057983 91.62425232]
[139.67304993 104.15304565]
[154.03184509 108.49182129]
[168.39064026 112.83060455]
[182.74943542 117.16938782]
[197.10823059 121.50817108]
[211.46701050 125.84695435]
[220.53485107 116.89173126]
[232.50985718 112.74863434]
[245.02801514 114.16892242]
[255.64666748 120.81208038]
[262.32119751 131.32467651]
[263.79858398 143.61567688]
[277.82382202 148.93473816]
[291.84906006 154.25381470]
[303.69522095 144.47813416]
[318.84478760 141.95106506]
[333.22262573 147.35235596]
[342.96112061 159.22911072]
[345.44070435 174.38652039]
[339.99435425 188.74732971]
[328.08712769 198.44856262]
[312.92202759 200.88061523]
[298.57833862 195.38929749]
[288.91448975 183.45172119]
[286.52999878 168.27906799]
[272.50476074 162.95999146]
[258.47949219 157.64091492]
[244.37408447 167.97731018]
[226.73243713 167.93885803]
[212.42382812 157.35743713]
[207.12823486 140.20574951]
[192.76943970 135.86695862]
[178.41064453 131.52818298]
[164.05184937 127.18939972]
[149.69305420 122.85061646]
[135.33425903 118.51184082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[22 48]
[23 47]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[66 81]
[67 80]
[68 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
