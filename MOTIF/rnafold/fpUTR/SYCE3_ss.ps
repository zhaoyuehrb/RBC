%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGCGGGGCAUCCCUCUCGAGGAGCGGCCUUGUUCCUCAAGCGGCCGCUGGGGGCGCCAGAGCAGGACCGGAGCGCGGGCCAAGCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[92.69264221 290.07015991]
[78.10501862 285.43768311]
[67.34938049 274.54846191]
[62.89730072 259.90478516]
[65.77183533 244.87164307]
[75.31243134 232.90353394]
[89.32672882 226.75064087]
[90.30777740 211.78276062]
[91.28882599 196.81488037]
[81.30562592 185.82072449]
[82.08732605 170.62718201]
[93.68669128 160.23043823]
[94.66773987 145.26255798]
[95.64878845 130.29467773]
[80.28416443 121.00898743]
[73.55493164 105.52992249]
[76.81628418 90.06493378]
[87.65581512 80.08721924]
[84.24967194 65.47906494]
[80.84352875 50.87091064]
[77.19882202 36.32044220]
[73.31653595 21.83155632]
[69.43424988 7.34266853]
[60.89775085 -4.99135494]
[48.70504761 -13.72852039]
[36.51234818 -22.46568489]
[24.31964874 -31.20285034]
[12.12694836 -39.94001770]
[-0.06575227 -48.67718124]
[-12.25845242 -57.41434860]
[-24.45115280 -66.15151215]
[-40.81548309 -67.21955872]
[-47.82906723 -82.04324341]
[-38.27692795 -95.37323761]
[-21.98549080 -93.49678040]
[-15.71398735 -78.34421539]
[-3.52128696 -69.60704803]
[8.67141342 -60.86988068]
[20.86411285 -52.13271713]
[33.05681229 -43.39554977]
[45.24951553 -34.65838623]
[57.44221497 -25.92122078]
[69.63491821 -17.18405533]
[73.63282013 -26.64568329]
[81.19622803 -32.57182312]
[90.03273010 -33.96973038]
[95.77297974 -47.82792282]
[101.51323700 -61.68611526]
[99.64599609 -77.39675140]
[111.66484833 -86.19427490]
[117.40509796 -100.05247498]
[112.61882019 -115.36492157]
[121.72536469 -128.57289124]
[137.73898315 -129.54434204]
[148.37538147 -117.53408813]
[145.47523499 -101.75534058]
[131.26329041 -94.31221771]
[125.52304077 -80.45402527]
[127.80085754 -65.73462677]
[115.37142944 -55.94586563]
[109.63117981 -42.08766937]
[103.89092255 -28.22947884]
[109.44192505 -13.92068005]
[101.31745148 0.44146025]
[83.92314148 3.46038270]
[87.80542755 17.94927025]
[91.68771362 32.43815613]
[96.55401611 38.19560623]
[95.45168304 47.46476746]
[98.85782623 62.07292175]
[102.26396942 76.68107605]
[122.60973358 85.21076202]
[129.09495544 109.49650574]
[142.95315552 115.23675537]
[156.81134033 120.97701263]
[172.12379456 116.19072723]
[185.33175659 125.29727173]
[186.30322266 141.31088257]
[174.29295349 151.94729614]
[158.51420593 149.04714966]
[151.07109070 134.83520508]
[137.21289062 129.09495544]
[123.35470581 123.35469818]
[110.61666870 131.27571106]
[109.63562775 146.24360657]
[108.65457916 161.21148682]
[118.79766083 173.03330994]
[117.58952332 188.19889832]
[106.25670624 197.79592896]
[105.27565765 212.76380920]
[104.29461670 227.73168945]
[117.38591003 235.66117859]
[125.28273010 248.77218628]
[126.17044830 264.05194092]
[119.84506989 277.98922729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 91]
[8 90]
[9 89]
[12 86]
[13 85]
[14 84]
[18 71]
[19 70]
[20 69]
[21 67]
[22 66]
[23 65]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[46 62]
[47 61]
[48 60]
[50 58]
[51 57]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
