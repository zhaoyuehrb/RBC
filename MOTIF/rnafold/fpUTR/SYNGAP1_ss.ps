%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCGGCUGCCGCUGCUGCCGUUGGCUCUUAUUCUCCUCCUCCUCCUCCUCUCUCCUCCUCUCUGCUUCUCUCUGCUCCUCUCUCCUCCUCUCUCCUCCUCCUCCUCCUCCACCUCCUCCUCCUUCUCCCCCUCUUUCUCCCCCUCUUUCUCUCUUCUUUCUCCCCCGUCCCCCCGCCCCCUCCCCCCAGGCCUG\
) } def
/len { sequence length } bind def

/coor [
[-6.89952183 481.44387817]
[-13.38615990 488.38220215]
[-21.90503120 492.45013428]
[-31.26308632 493.12481689]
[-37.11421585 506.93655396]
[-42.96534348 520.74829102]
[-48.81647491 534.56005859]
[-47.07520676 550.28515625]
[-59.16417313 558.98608398]
[-65.01530457 572.79779053]
[-62.46924591 588.99810791]
[-75.39437866 599.09130859]
[-90.49443054 592.69445801]
[-92.23577118 576.38800049]
[-78.82704926 566.94671631]
[-72.97592163 553.13494873]
[-75.13569641 538.39776611]
[-62.62821960 528.70892334]
[-56.77708817 514.89715576]
[-50.92596054 501.08544922]
[-45.07482910 487.27368164]
[-54.32324219 469.05737305]
[-47.04183960 449.65591431]
[-27.54801178 441.80319214]
[-22.59382439 427.64495850]
[-17.63963890 413.48669434]
[-12.68545341 399.32846069]
[-27.32355309 393.40118408]
[-41.65122604 386.75854492]
[-55.63353729 379.41677856]
[-69.23640442 371.39376831]
[-82.42665100 362.70907593]
[-95.17211914 353.38385010]
[-107.44174957 343.44085693]
[-119.20560455 332.90435791]
[-130.43502808 321.79998779]
[-141.10261536 310.15484619]
[-151.18237305 297.99734497]
[-160.64973450 285.35708618]
[-169.48159790 272.26492310]
[-177.65643311 258.75277710]
[-185.15431213 244.85354614]
[-191.95697021 230.60115051]
[-198.04780579 216.03034973]
[-203.41197205 201.17665100]
[-208.03637695 186.07626343]
[-211.90977478 170.76602173]
[-215.02268982 155.28324890]
[-217.36755371 139.66569519]
[-218.93865967 123.95142365]
[-219.73214722 108.17875671]
[-219.74609375 92.38614655]
[-218.98046875 76.61209869]
[-217.43714905 60.89508057]
[-215.11987305 45.27339935]
[-212.03430176 29.78514862]
[-208.18797302 14.46808815]
[-203.59024048 -0.64043772]
[-198.25233459 -15.50359154]
[-192.18725586 -30.08513641]
[-185.40979004 -44.34952164]
[-177.93647766 -58.26196671]
[-169.78552246 -71.78855133]
[-160.97680664 -84.89630127]
[-151.53179932 -97.55326080]
[-163.10786438 -107.09236908]
[-178.09568787 -103.07431030]
[-192.57075500 -108.66466522]
[-200.96710205 -121.71383667]
[-200.05616760 -137.20414734]
[-190.18823242 -149.17926025]
[-175.15769958 -153.03450012]
[-160.74414062 -147.28744507]
[-152.48983765 -134.14796448]
[-153.56875610 -118.66844177]
[-141.99269104 -109.12932587]
[-134.51243591 -117.48436737]
[-126.74388885 -125.57203674]
[-118.69658661 -133.38238525]
[-110.38041687 -140.90582275]
[-101.80561066 -148.13308716]
[-92.98270416 -155.05531311]
[-83.92254639 -161.66397095]
[-74.63628387 -167.95092773]
[-65.13532257 -173.90849304]
[-55.43134308 -179.52929688]
[-45.53628159 -184.80647278]
[-35.46229935 -189.73350525]
[-25.22178268 -194.30433655]
[-14.82731819 -198.51335144]
[-4.29168653 -202.35539246]
[6.37215900 -205.82569885]
[17.15110970 -208.92004395]
[28.03191376 -211.63461304]
[39.00119400 -213.96604919]
[50.04546738 -215.91149902]
[61.15114975 -217.46858215]
[72.30459595 -218.63537598]
[83.49208832 -219.41043091]
[94.69987488 -219.79281616]
[105.91418457 -219.78204346]
[117.12121582 -219.37814331]
[128.30720520 -218.58160400]
[139.45838928 -217.39340210]
[150.56106567 -215.81500244]
[161.60157776 -213.84834290]
[172.56636047 -211.49583435]
[183.44192505 -208.76039124]
[194.21492004 -205.64535522]
[204.87208557 -202.15457153]
[215.40031433 -198.29231262]
[225.78668213 -194.06333923]
[236.01840210 -189.47285461]
[246.08290100 -184.52648926]
[255.96781921 -179.23033142]
[265.66098022 -173.59088135]
[275.15048218 -167.61509705]
[284.42465210 -161.31031799]
[293.47210693 -154.68426514]
[302.28170776 -147.74511719]
[310.84262085 -140.50140381]
[319.14431763 -132.96200562]
[327.17660522 -125.13622284]
[334.92962646 -117.03365326]
[342.39379883 -108.66426086]
[349.55999756 -100.03834534]
[356.41937256 -91.16650391]
[362.96353149 -82.05964661]
[369.18438721 -72.72896576]
[375.07434082 -63.18593597]
[380.62609863 -53.44228363]
[385.83285522 -43.50999451]
[390.68820190 -33.40127563]
[395.18618774 -23.12855530]
[399.32128906 -12.70446205]
[403.08840942 -2.14181137]
[406.48291016 8.54641056]
[409.50064087 19.34706497]
[412.13784790 30.24687195]
[414.39132690 41.23243332]
[416.25830078 52.29024506]
[417.73648071 63.40670776]
[418.82403564 74.56815338]
[419.51962280 85.76087189]
[419.82238770 96.97109222]
[419.73199463 108.18503571]
[419.24850464 119.38892365]
[418.37252808 130.56896973]
[417.10516357 141.71142578]
[415.44796753 152.80261230]
[413.40295410 163.82888794]
[410.97262573 174.77668762]
[408.16003418 185.63255310]
[404.96856689 196.38314819]
[401.40216064 207.01525879]
[397.46524048 217.51579285]
[393.16262817 227.87187195]
[388.49957275 238.07072449]
[383.48187256 248.09985352]
[378.11563110 257.94689941]
[372.40750122 267.59976196]
[366.36447144 277.04660034]
[359.99398804 286.27575684]
[353.30386353 295.27593994]
[346.30233765 304.03601074]
[338.99798584 312.54528809]
[331.39984131 320.79324341]
[342.00643921 331.39984131]
[357.80874634 331.14920044]
[369.10159302 342.20574951]
[369.18511963 358.00982666]
[358.00982666 369.18511963]
[342.20574951 369.10159302]
[331.14920044 357.80874634]
[331.39984131 342.00643921]
[320.79324341 331.39984131]
[302.39022827 347.65646362]
[282.79431152 362.45336914]
[262.12097168 375.70333862]
[240.49206543 387.32824707]
[218.03506470 397.25958252]
[194.88233948 405.43881226]
[171.17036438 411.81774902]
[147.03890991 416.35876465]
[122.63018799 419.03512573]
[98.08808136 419.83102417]
[73.55724335 418.74176025]
[49.18226242 415.77380371]
[25.10681152 410.94461060]
[1.47279656 404.28265381]
[-3.48138928 418.44088745]
[-8.43557549 432.59915161]
[-13.38976097 446.75738525]
[-6.81213140 453.92739868]
[-3.32526040 462.94909668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[6 19]
[7 18]
[9 16]
[10 15]
[24 193]
[25 192]
[26 191]
[27 190]
[65 76]
[66 75]
[167 176]
[168 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
