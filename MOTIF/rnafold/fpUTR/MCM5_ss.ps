%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCUCUUGUUUUUCCCGCGAAACUCGGCGGCUGAGCGUGGAGGUUCUUGUCUCCCCUGGUUUGUGAAGUGCGGAAAACCAGAGGCGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[98.19404602 384.77450562]
[101.60243988 369.63638306]
[113.28004456 359.41809082]
[111.79436493 344.49185181]
[110.30867767 329.56561279]
[108.82299805 314.63937378]
[107.33731079 299.71313477]
[105.85163116 284.78689575]
[104.36594391 269.86062622]
[95.40611267 257.96228027]
[101.73852539 243.46363831]
[100.25283813 228.53738403]
[98.76715851 213.61114502]
[97.28147125 198.68490601]
[95.79579163 183.75866699]
[92.57690430 179.98672485]
[91.82888794 174.09791565]
[94.73887634 167.80172729]
[94.24292755 152.80992126]
[93.74697876 137.81813049]
[93.25102234 122.82632446]
[92.75507355 107.83452606]
[90.77669525 92.96556854]
[87.33533478 78.36566925]
[83.89397430 63.76576996]
[80.45261383 49.16587067]
[77.01125336 34.56597137]
[62.50603485 20.76063728]
[68.37069702 2.46014667]
[63.97194672 -11.88039017]
[52.52791214 -22.80488396]
[56.19277573 -37.24157715]
[51.79402542 -51.58211136]
[47.39527130 -65.92264557]
[33.64223862 -78.02761841]
[37.99910736 -94.93894196]
[33.12861633 -109.12620544]
[28.25812340 -123.31346130]
[23.38763046 -137.50071716]
[9.08090878 -144.21586609]
[3.79151201 -159.10874939]
[10.65754700 -173.34367371]
[25.60551643 -178.47532654]
[39.76705551 -171.45916748]
[44.74037170 -156.45777893]
[37.57489014 -142.37121582]
[42.44538116 -128.18395996]
[47.31587219 -113.99669647]
[52.18636703 -99.80943298]
[63.00613022 -94.12811279]
[67.10914612 -82.18932343]
[61.73580933 -70.32140350]
[66.13455963 -55.98086166]
[70.53330994 -41.64032745]
[81.66271973 -31.74156189]
[78.31248474 -16.27914047]
[82.71123505 -1.93860376]
[92.34190369 2.14462113]
[98.16538239 11.10034180]
[97.98378754 22.00350952]
[91.61115265 31.12461281]
[95.05251312 45.72451019]
[98.49387360 60.32440948]
[101.93523407 74.92430878]
[105.37659454 89.52420807]
[115.19905090 78.18757629]
[130.13600159 76.81367493]
[141.86164856 86.16831970]
[143.84014893 101.03726196]
[134.96871948 113.13262177]
[120.19224548 115.71249390]
[107.74687195 107.33857727]
[108.24282074 122.33037567]
[108.73877716 137.32217407]
[109.23472595 152.31398010]
[109.73067474 167.30577087]
[110.72203827 182.27297974]
[112.20771790 197.19921875]
[113.69339752 212.12545776]
[115.17908478 227.05171204]
[116.66476440 241.97795105]
[125.73086548 254.94392395]
[119.29219055 268.37496948]
[120.77787781 283.30120850]
[122.26355743 298.22744751]
[123.74923706 313.15368652]
[125.23492432 328.07992554]
[126.72060394 343.00616455]
[128.20628357 357.93240356]
[141.66897583 365.64834595]
[147.99447632 379.81759644]
[144.75050354 394.99182129]
[133.18443298 405.33615112]
[117.74365997 406.87304688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[29 57]
[30 56]
[32 54]
[33 53]
[34 52]
[36 49]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
