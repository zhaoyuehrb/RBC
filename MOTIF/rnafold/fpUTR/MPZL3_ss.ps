%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACUUCCGGUGUUACCUGUGUCGUUACCGGGAGCUGUAAACAAGGUGUGCAAGCAUCUGAAGAGCUGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[25.62165451 187.20146179]
[3.95216203 191.44808960]
[-17.22241211 185.38322449]
[-26.53962898 197.13862610]
[-35.85684586 208.89402771]
[-45.17406464 220.64942932]
[-50.27402878 236.81813049]
[-67.22265625 236.39341736]
[-71.50638580 219.98956299]
[-56.92946625 211.33221436]
[-47.61224747 199.57681274]
[-38.29503250 187.82141113]
[-28.97781372 176.06600952]
[-34.74211884 168.34872437]
[-38.81583405 159.61170959]
[-41.02515030 150.22041321]
[-41.27430344 140.56835938]
[-39.54973221 131.06060791]
[-35.92077637 122.09682465]
[-30.53688812 114.05444336]
[-23.62149048 107.27279663]
[-15.46269226 102.03876495]
[-6.40130234 98.57466888]
[3.18342066 97.02881622]
[12.88963413 97.46916199]
[22.30976105 99.88033295]
[31.04760361 104.16411591]
[38.73501205 110.14347076]
[45.04738235 117.56986237]
[58.61978912 111.18317413]
[72.19219208 104.79648590]
[85.76460266 98.40979767]
[93.90116119 87.03930664]
[107.84870911 88.01779938]
[121.42111969 81.63111115]
[134.99353027 75.24442291]
[148.56593323 68.85773468]
[148.04367065 56.36494064]
[151.88055420 44.50160980]
[159.57586670 34.73621750]
[170.15287781 28.26858711]
[182.28280640 25.88249779]
[194.45172119 27.85075188]
[205.14949036 33.90424728]
[213.05714417 43.26845932]
[227.32299805 38.63320160]
[241.58883667 33.99794769]
[255.85469055 29.36269379]
[270.12054443 24.72743797]
[284.38638306 20.09218407]
[294.95147705 7.54982042]
[311.04632568 10.69426441]
[316.11395264 26.29078102]
[304.94119263 38.29500961]
[289.02163696 34.35803223]
[274.75579834 38.99328613]
[260.48995972 43.62854004]
[246.22409058 48.26379395]
[231.95825195 52.89905167]
[217.69239807 57.53430557]
[214.97319031 75.10784149]
[203.87121582 89.10393524]
[187.22578430 95.81276703]
[169.35879517 93.40508270]
[154.95262146 82.43013763]
[141.38021851 88.81682587]
[127.80780792 95.20351410]
[114.23539734 101.59020233]
[106.09883881 112.96069336]
[92.15129089 111.98220062]
[78.57888031 118.36888885]
[65.00647736 124.75557709]
[51.43407059 131.14227295]
[52.32695007 153.37304688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[29 73]
[30 72]
[31 71]
[32 70]
[34 68]
[35 67]
[36 66]
[37 65]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
