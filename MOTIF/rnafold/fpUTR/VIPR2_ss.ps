%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAUUGAGCGCGCUCCAGCUGCCGGGACGGAGGGGGCGGCCCCCGCGCUCGGGCGCUCGGCUACAGCUGCGGGGCCCGAGGUCUCCGCGCACUCGCUCCCGGCCCAUGCUGGAGGCGGCGGAACCGCGGGGACCUAGGACGGAGGCGGCGGGCGCUGGGCGGCCCCCGGCACGCUGAGCUCGGG\
) } def
/len { sequence length } bind def

/coor [
[95.98712158 341.76013184]
[92.49156952 356.34713745]
[88.99601746 370.93417358]
[85.50045776 385.52117920]
[92.62924957 399.89337158]
[85.70707703 414.36621094]
[70.04404449 417.83737183]
[57.65549088 407.64407349]
[58.04484940 391.60577393]
[70.91344452 382.02563477]
[74.40899658 367.43859863]
[77.90454865 352.85159302]
[81.40010834 338.26458740]
[84.15634918 323.51998901]
[86.16628265 308.65524292]
[88.17620850 293.79052734]
[90.18614197 278.92578125]
[87.96208954 271.86120605]
[92.35672760 263.82904053]
[94.61608887 249.00016785]
[96.87545776 234.17131042]
[99.01017761 219.32398987]
[101.02011108 204.45925903]
[103.03003693 189.59452820]
[105.03997040 174.72979736]
[107.04990387 159.86506653]
[109.05983734 145.00033569]
[111.06976318 130.13560486]
[105.78878784 124.81008148]
[98.92283630 138.14645386]
[84.11750031 135.73768616]
[81.83330536 120.91262054]
[95.22682190 114.15902710]
[89.94584656 108.83349609]
[75.06475830 110.71849823]
[60.18367004 112.60349274]
[47.46521759 122.01367950]
[33.86651993 115.93711090]
[18.98543167 117.82210541]
[4.10434389 119.70710754]
[-10.77674389 121.59210205]
[-25.73048973 129.58096313]
[-37.54674911 117.42314911]
[-29.13513374 102.70305634]
[-12.66174316 106.71101379]
[2.21934509 104.82601929]
[17.10043335 102.94101715]
[31.98152161 101.05602264]
[43.63557816 91.78066254]
[58.29867172 97.72240448]
[73.17975616 95.83740997]
[88.06084442 93.95240784]
[100.61108398 85.73709106]
[108.29220581 72.85297394]
[108.71305084 57.03736877]
[121.87624359 50.06747437]
[129.55737305 37.18336105]
[137.23849487 24.29924965]
[144.91961670 11.41513729]
[152.60073853 -1.46897423]
[160.28186035 -14.35308552]
[167.96299744 -27.23719788]
[175.64411926 -40.12131119]
[168.27243042 -53.52301025]
[168.59645081 -68.71484375]
[176.42904663 -81.61899567]
[189.58103943 -88.82183075]
[204.47219849 -88.47676086]
[212.15332031 -101.36087036]
[219.83444214 -114.24498749]
[227.51556396 -127.12909698]
[235.19668579 -140.01321411]
[226.11466980 -153.50140381]
[223.82710266 -169.54177856]
[228.74119568 -184.92025757]
[239.82618713 -196.57765198]
[254.82913208 -202.21823120]
[270.73266602 -200.76168823]
[278.19625854 -213.77302551]
[278.35134888 -229.59347534]
[291.39562988 -236.78350830]
[298.85922241 -249.79484558]
[306.32281494 -262.80618286]
[313.78640747 -275.81750488]
[321.25000000 -288.82882690]
[328.71359253 -301.84014893]
[336.17721558 -314.85150146]
[343.64080811 -327.86282349]
[351.10440063 -340.87414551]
[358.56799316 -353.88549805]
[366.03158569 -366.89682007]
[357.45816040 -383.98437500]
[360.86401367 -402.64407349]
[374.70108032 -415.39797974]
[393.27795410 -417.24520874]
[400.07659912 -430.61602783]
[406.87521362 -443.98681641]
[413.67382812 -457.35763550]
[420.47247314 -470.72845459]
[419.83035278 -486.53662109]
[432.49581909 -494.37469482]
[439.29443359 -507.74551392]
[446.09307861 -521.11633301]
[452.89169312 -534.48712158]
[459.69033813 -547.85797119]
[458.27847290 -564.19622803]
[471.87500000 -573.36492920]
[486.49301147 -565.93218994]
[487.09472656 -549.54406738]
[473.06115723 -541.05932617]
[466.26251221 -527.68847656]
[459.46389771 -514.31768799]
[452.66525269 -500.94686890]
[445.86663818 -487.57604980]
[446.99502563 -472.72427368]
[433.84329224 -463.92984009]
[427.04464722 -450.55902100]
[420.24603271 -437.18820190]
[413.44738770 -423.81738281]
[406.64877319 -410.44656372]
[413.52633667 -401.61862183]
[416.61746216 -390.80978394]
[415.43658447 -379.57812500]
[410.11688232 -369.55773926]
[401.39645386 -362.22085571]
[390.51608276 -358.66165161]
[379.04293823 -359.43322754]
[371.57931519 -346.42187500]
[364.11572266 -333.41055298]
[356.65213013 -320.39923096]
[349.18853760 -307.38790894]
[341.72494507 -294.37655640]
[334.26135254 -281.36523438]
[326.79772949 -268.35391235]
[319.33413696 -255.34257507]
[311.87054443 -242.33125305]
[304.40695190 -229.31991577]
[304.78570557 -214.43013000]
[291.20761108 -206.30943298]
[283.74401855 -193.29809570]
[292.14956665 -182.24746704]
[295.71591187 -168.78434753]
[293.87194824 -154.93574524]
[286.86361694 -142.79981995]
[275.72195435 -134.22795105]
[262.11129761 -130.54232788]
[248.08081055 -132.33207703]
[240.39967346 -119.44797516]
[232.71855164 -106.56385803]
[225.03742981 -93.67974854]
[217.35630798 -80.79563904]
[224.74147034 -67.86022186]
[224.65980530 -52.86524963]
[217.03308105 -39.83837128]
[203.82315063 -32.32873154]
[188.52822876 -32.44018555]
[180.84710693 -19.55607414]
[173.16598511 -6.67196178]
[165.48484802 6.21214962]
[157.80372620 19.09626198]
[150.12260437 31.98037338]
[142.44148254 44.86448669]
[134.76036072 57.74859619]
[134.88893127 72.64264679]
[121.17632294 80.53410339]
[113.49519348 93.41821289]
[125.93449402 132.14553833]
[123.92456055 147.01026917]
[121.91463470 161.87500000]
[119.90470123 176.73973083]
[117.89476776 191.60446167]
[115.88483429 206.46919250]
[113.87490845 221.33392334]
[115.82860565 230.27883911]
[111.70432281 236.43066406]
[109.44495392 251.25953674]
[107.18559265 266.08840942]
[105.05087280 280.93572998]
[103.04093933 295.80044556]
[101.03100586 310.66519165]
[99.02108002 325.52990723]
[111.65376282 317.44195557]
[126.33802795 320.50338745]
[134.68630981 332.96557617]
[131.93011475 347.71020508]
[119.64379120 356.31518555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[14 181]
[15 180]
[16 179]
[17 178]
[19 177]
[20 176]
[21 175]
[22 173]
[23 172]
[24 171]
[25 170]
[26 169]
[27 168]
[28 167]
[34 52]
[35 51]
[36 50]
[38 48]
[39 47]
[40 46]
[41 45]
[53 166]
[54 165]
[56 163]
[57 162]
[58 161]
[59 160]
[60 159]
[61 158]
[62 157]
[63 156]
[68 151]
[69 150]
[70 149]
[71 148]
[72 147]
[78 140]
[79 139]
[81 137]
[82 136]
[83 135]
[84 134]
[85 133]
[86 132]
[87 131]
[88 130]
[89 129]
[90 128]
[91 127]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
