%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAAACGUGUGGGUGGGGAGGGGUAGUGGGUGAGGGACCCAGGUUCCUGACACAGACAGACUACACCCAGGGAAUGAAGAGCAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[80.44698334 363.45907593]
[71.41941833 375.81875610]
[57.67696381 382.55697632]
[42.37754440 382.12533569]
[29.03684998 374.62304688]
[20.72047424 361.77404785]
[19.33946037 346.53097534]
[25.21115494 332.39654541]
[36.98628616 322.61877441]
[51.95901489 319.44451904]
[55.96352005 304.98892212]
[59.96802902 290.53335571]
[63.97253418 276.07775879]
[56.43379974 263.28311157]
[60.28901291 248.56604004]
[73.76033020 240.74548340]
[77.76483917 226.28988647]
[61.99286652 214.45922852]
[52.57030487 197.09158325]
[51.24532700 177.33383179]
[58.29515457 158.78303528]
[72.46903992 144.83152771]
[91.20999146 138.04658508]
[91.71660614 123.05513763]
[92.22322083 108.06369019]
[92.47656250 93.06583405]
[92.47656250 78.06583405]
[92.47656250 63.06583405]
[92.47656250 48.06583405]
[92.47656250 33.06583405]
[75.10166168 19.08230209]
[73.06916046 -2.86850071]
[87.24496460 -19.41212654]
[84.22548676 -34.10507584]
[73.86861420 -46.06525040]
[78.88555145 -60.08950043]
[75.86607361 -74.78244781]
[72.84659576 -89.47540283]
[69.82711792 -104.16835022]
[66.80764008 -118.86129761]
[63.78815842 -133.55424500]
[52.49896240 -145.44903564]
[57.41436386 -161.09419250]
[73.47782135 -164.39532471]
[84.16462708 -151.95649719]
[78.48110962 -136.57373047]
[81.50058746 -121.88077545]
[84.52006531 -107.18782806]
[87.53954315 -92.49488068]
[90.55902100 -77.80192566]
[93.57849884 -63.10897827]
[103.71939850 -52.19974136]
[98.91843414 -37.12455368]
[101.93791199 -22.43160439]
[110.38958740 -20.59489441]
[117.89924622 -16.23550224]
[123.73133850 -9.75605774]
[127.30718994 -1.76797581]
[128.26237488 6.96619844]
[126.48371887 15.60558033]
[122.12231445 23.31189919]
[115.58084869 29.33083344]
[107.47656250 33.06583405]
[107.47656250 48.06583405]
[107.47656250 63.06583405]
[107.47656250 78.06583405]
[107.47656250 93.06583405]
[110.67961884 100.65919495]
[107.21466064 108.57030487]
[106.70804596 123.56174469]
[106.20143890 138.55319214]
[116.60758972 141.96228027]
[125.92521667 147.69403076]
[133.64518738 155.42930603]
[139.34709167 164.73962402]
[142.72207642 175.11097717]
[143.58961487 185.97215271]
[141.90710449 196.72616577]
[137.77198792 206.78315735]
[131.41609192 215.59268188]
[123.19261932 222.67381287]
[113.55657959 227.64149475]
[103.03955841 230.22740173]
[92.22042084 230.29440308]
[88.21591949 244.74998474]
[95.74288177 258.38751221]
[91.47581482 272.99050903]
[78.42811584 280.08227539]
[74.42361450 294.53784180]
[70.41910553 308.99343872]
[66.41459656 323.44903564]
[77.61973572 333.87512207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 91]
[11 90]
[12 89]
[13 88]
[16 85]
[17 84]
[23 71]
[24 70]
[25 69]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[33 54]
[34 53]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
