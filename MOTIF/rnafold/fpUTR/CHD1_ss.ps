%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAAUCAAAGGAGAGUCCCAGAAAACCUGUGACUGUUGAAGAAAAUUCAUCUGUGAAUUUUUAUAUUCAAGGAGUCAGUAUUUAUAUUCAUCUUUUAAACUGGGAAGAUUUAUAUUUUACUUUAAAACUUCUUGAUAAUAAUUUACA\
) } def
/len { sequence length } bind def

/coor [
[95.23355103 229.70713806]
[94.91730499 214.71046448]
[94.60105896 199.71380615]
[94.28482056 184.71713257]
[93.96857452 169.72047424]
[93.65232849 154.72380066]
[86.41432953 153.38929749]
[79.41880798 151.10188293]
[72.79062653 147.90237427]
[66.64809418 143.84790039]
[61.10083389 139.01080322]
[56.24786377 133.47743225]
[43.20508957 140.88594055]
[35.02705383 154.42959595]
[20.13899994 153.98788452]
[7.09622812 161.39639282]
[-5.94654322 168.80491638]
[-18.98931503 176.21342468]
[-27.16735268 189.75708008]
[-42.05540466 189.31536865]
[-55.09817886 196.72387695]
[-68.14094543 204.13240051]
[-73.77108002 219.15509033]
[-89.07059479 223.98254395]
[-102.30301666 214.91157532]
[-103.31755829 198.90063477]
[-91.33595276 188.23194885]
[-75.54946899 191.08963013]
[-62.50669479 183.68110657]
[-49.46392441 176.27259827]
[-42.21879196 163.25886536]
[-26.39783096 163.17065430]
[-13.35505962 155.76214600]
[-0.31228894 148.35362244]
[12.73048210 140.94511414]
[19.97561455 127.93137360]
[35.79657364 127.84317780]
[48.83934402 120.43466187]
[45.59876251 108.68867493]
[45.01944733 96.51763916]
[47.12974930 84.51696014]
[51.82642746 73.27370453]
[39.82261658 64.27878571]
[27.81880760 55.28387070]
[15.81499863 46.28895187]
[3.81118894 37.29403305]
[-8.19262123 28.29911613]
[-20.19643021 19.30419731]
[-32.20024109 10.30927944]
[-44.20404816 1.31436098]
[-60.54191589 -0.10204117]
[-67.23812103 -15.07177162]
[-57.40419388 -28.19525337]
[-41.15642548 -25.97217560]
[-35.20913315 -10.68944836]
[-23.20532227 -1.69453061]
[-11.20151234 7.30038786]
[0.80229735 16.29530525]
[12.80610657 25.29022408]
[24.80991745 34.28514099]
[36.81372452 43.28005981]
[48.81753540 52.27497864]
[60.82134628 61.26989746]
[77.11907959 49.88561630]
[96.39637756 45.02726364]
[116.14294434 47.32749176]
[133.78736877 56.48676300]
[147.03198242 71.31235504]
[160.78192139 65.31742859]
[174.53186035 59.32249451]
[188.28179932 53.32756805]
[202.03173828 47.33263779]
[215.78167725 41.33770752]
[229.53161621 35.34278107]
[243.28155518 29.34785080]
[257.03149414 23.35292053]
[268.83245850 4.34405947]
[290.25756836 7.23691368]
[303.45361328 0.10502364]
[316.64968872 -7.02686644]
[329.84576416 -14.15875626]
[332.19952393 -27.46164131]
[341.66268921 -36.82775879]
[354.60443115 -38.98012924]
[366.23861694 -33.35090256]
[379.58212280 -40.20299530]
[392.92559814 -47.05508804]
[406.26910400 -53.90718079]
[411.19604492 -68.68428802]
[424.82586670 -75.44320679]
[438.88320923 -70.65503693]
[452.22671509 -77.50713348]
[465.57019043 -84.35922241]
[478.91369629 -91.21131897]
[492.25717163 -98.06341553]
[505.60067749 -104.91550446]
[518.94415283 -111.76760101]
[523.54119873 -126.88854218]
[537.52301025 -134.25627136]
[552.59454346 -129.49964905]
[559.81402588 -115.44068909]
[554.89831543 -100.42032623]
[540.76379395 -93.34986877]
[525.79626465 -98.42410278]
[512.45275879 -91.57201385]
[499.10928345 -84.71991730]
[485.76577759 -77.86782837]
[472.42230225 -71.01573181]
[459.07879639 -64.16364288]
[445.73529053 -57.31154633]
[441.43612671 -43.09702301]
[428.00152588 -35.95794296]
[413.12118530 -40.56369019]
[399.77770996 -33.71159744]
[386.43420410 -26.85950279]
[373.09069824 -20.00741005]
[368.66070557 -3.81523561]
[353.60998535 4.35248566]
[336.97766113 -0.96269107]
[323.78158569 6.16919899]
[310.58551025 13.30108929]
[297.38943481 20.43297958]
[296.78350830 28.43620110]
[292.98437500 35.61328888]
[286.55892944 40.73196793]
[278.53170776 42.87955475]
[270.22186279 41.62499237]
[263.02642822 37.10285950]
[249.27647400 43.09778976]
[235.52653503 49.09272003]
[221.77659607 55.08764648]
[208.02665710 61.08257675]
[194.27671814 67.07750702]
[180.52677917 73.07243347]
[166.77684021 79.06736755]
[153.02690125 85.06229401]
[155.08949280 100.36933136]
[152.82185364 115.64733124]
[146.40226746 129.69540405]
[136.33531189 141.40933228]
[123.41229248 149.86834717]
[108.64899445 154.40756226]
[108.96524048 169.40422058]
[109.28148651 184.40089417]
[109.59772491 199.39755249]
[109.91397095 214.39422607]
[110.23021698 229.39088440]
[112.82657623 248.59788513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[12 38]
[13 37]
[15 35]
[16 34]
[17 33]
[18 32]
[20 30]
[21 29]
[22 28]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[68 136]
[69 135]
[70 134]
[71 133]
[72 132]
[73 131]
[74 130]
[75 129]
[76 128]
[78 122]
[79 121]
[80 120]
[81 119]
[85 116]
[86 115]
[87 114]
[88 113]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
