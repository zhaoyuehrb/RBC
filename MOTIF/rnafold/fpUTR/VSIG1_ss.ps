%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUCUAUACGCAAUAAGUAAGCCCAAAGAGGCAUGUUUGCUUGGCGAUGCCCAGCAGAUAAGCCAGGCAAACCUCGGUGUGAUCGAAGAAGCCAAUUUGAGACUCAGCCUAGUCCAGGCAAGCUACUGGCACCUGCUGCUCUCAACUAACCUCCACACA\
) } def
/len { sequence length } bind def

/coor [
[143.08935547 129.24806213]
[137.28569031 136.35820007]
[130.32397461 142.33908081]
[122.42043304 147.00495911]
[113.82053375 150.21090698]
[104.79137421 151.85734558]
[95.61341095 151.89315796]
[86.57167816 150.31721497]
[77.94702148 147.17846680]
[69.70439148 159.71078491]
[61.46175385 172.24310303]
[66.11969757 187.17085266]
[60.04484558 201.58023071]
[46.10556412 208.66757202]
[30.88355255 205.08645630]
[21.56618118 192.52777100]
[22.55282593 176.92134094]
[33.37762451 165.63604736]
[48.92943954 164.00047302]
[57.17207336 151.46815491]
[65.41471100 138.93583679]
[61.09626007 134.62138367]
[57.31232834 129.83126831]
[43.90784073 136.56324768]
[30.50334930 143.29524231]
[25.77073097 158.37429810]
[11.72328186 165.61616516]
[-3.30489254 160.72439575]
[-10.39784431 146.60116577]
[-5.34745073 131.62554932]
[8.84997940 124.68230438]
[23.77136230 129.89074707]
[37.17584991 123.15876007]
[50.58034134 116.42677307]
[48.04278183 103.54810333]
[48.80600739 90.44402313]
[52.82153320 77.94702148]
[40.28921509 69.70439148]
[27.75689697 61.46175385]
[15.22457981 53.21912003]
[2.69226289 44.97648621]
[-9.84005451 36.73385239]
[-22.37237167 28.49121666]
[-34.90468979 20.24858284]
[-47.43700409 12.00594711]
[-59.96932220 3.76331282]
[-72.50164032 -4.47932196]
[-91.87710571 0.66121507]
[-108.57295990 -9.87528419]
[-112.15879822 -28.98105621]
[-125.14917755 -36.48105621]
[-138.13955688 -43.98105621]
[-154.87982178 -46.66434097]
[-156.93556213 -63.49319077]
[-141.33348083 -70.12728882]
[-130.63955688 -56.97143936]
[-117.64917755 -49.47143936]
[-104.65879822 -41.97143936]
[-95.74970245 -47.23821640]
[-85.37488556 -48.31431198]
[-75.42104340 -44.93605042]
[-67.72669983 -37.65600967]
[-63.74272919 -27.75383949]
[-64.25900269 -17.01163864]
[-51.72668839 -8.76900482]
[-39.19437027 -0.52636969]
[-26.66205406 7.71626520]
[-14.12973690 15.95889950]
[-1.59741962 24.20153427]
[10.93489742 32.44416809]
[23.46721458 40.68680191]
[35.99953079 48.92943954]
[48.53184891 57.17207336]
[61.06416702 65.41471100]
[79.43901062 52.15245819]
[101.70691681 47.94975281]
[123.65162659 53.60234833]
[141.11808777 68.03996277]
[150.79917908 88.52895355]
[165.75407410 87.36656952]
[180.70896912 86.20418549]
[195.66386414 85.04179382]
[210.61875916 83.87940979]
[200.18838501 73.09945679]
[200.25607300 58.09961319]
[210.78330994 47.41423798]
[225.78048706 47.12293243]
[236.71473694 57.39143753]
[237.36486816 72.37734222]
[227.35995483 83.55471039]
[242.34867859 84.13634491]
[247.93760681 71.00859070]
[257.65744019 60.60443878]
[270.32186890 54.16373062]
[284.39544678 52.44441605]
[298.17965698 55.63339233]
[310.01800537 63.32641983]
[318.49493408 74.57926941]
[322.60525513 88.02353668]
[337.57989502 88.89570618]
[352.55450439 89.76788330]
[367.52911377 90.64005280]
[382.50375366 91.51222992]
[397.47836304 92.38439941]
[407.64416504 84.39379883]
[420.12771606 85.45797729]
[428.25537109 94.45876312]
[443.21026611 95.62114716]
[458.16516113 96.78353882]
[473.12005615 97.94592285]
[482.30157471 88.05105591]
[495.31896973 85.30654144]
[507.35577393 90.49814606]
[514.09008789 101.51697540]
[529.01965332 102.96913910]
[543.96258545 104.27647400]
[558.91748047 105.43886566]
[573.87231445 106.60124969]
[588.82720947 107.76363373]
[598.79046631 95.86767578]
[613.85131836 92.13255310]
[628.21850586 97.99448395]
[636.36767578 111.19945526]
[635.16522217 126.66986847]
[625.07354736 138.45704651]
[609.97308350 142.02856445]
[595.67028809 136.01112366]
[587.66485596 122.71852875]
[572.70996094 121.55614471]
[557.75506592 120.39375305]
[542.80017090 119.23136902]
[535.85351562 121.86126709]
[527.56744385 117.89868164]
[512.63793945 116.44651794]
[500.14526367 127.67263031]
[483.06069946 126.38854980]
[471.95767212 112.90081787]
[457.00277710 111.73843384]
[442.04788208 110.57604218]
[427.09298706 109.41365814]
[411.72134399 117.83644104]
[396.60620117 107.35902405]
[381.63159180 106.48684692]
[366.65695190 105.61467743]
[351.68234253 104.74250793]
[336.70770264 103.87033081]
[321.73309326 102.99816132]
[315.06246948 117.34781647]
[303.37432861 128.07238770]
[288.43283081 133.51318359]
[272.50848389 132.81202698]
[258.03329468 126.04648590]
[247.22918701 114.22253418]
[241.76704407 99.12506104]
[226.77832031 98.54343414]
[211.78114319 98.83430481]
[196.82624817 99.99668884]
[181.87135315 101.15907288]
[166.91645813 102.32146454]
[151.96156311 103.48384857]
[150.54304504 112.55160522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 21]
[10 20]
[11 19]
[23 34]
[24 33]
[25 32]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[50 58]
[51 57]
[52 56]
[79 160]
[80 159]
[81 158]
[82 157]
[83 156]
[90 155]
[91 154]
[99 147]
[100 146]
[101 145]
[102 144]
[103 143]
[104 142]
[107 140]
[108 139]
[109 138]
[110 137]
[114 134]
[115 133]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
