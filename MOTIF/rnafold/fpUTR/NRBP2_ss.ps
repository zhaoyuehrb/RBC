%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCCCAGAGCCGGGGCUGGGGCUCUAGGCUGCCGCGGCGGCUCUAGGCUGGGCUGCUGGGCGCGAGGCCAGGGCGGGCCGGGAGAGGCUGCGCCGGCGGCGGAUCGCGCAGAGGGCGGUGGCCUGGGCUGGCCGAACC\
) } def
/len { sequence length } bind def

/coor [
[111.15658569 166.61712646]
[98.25834656 158.95974731]
[90.63366699 146.04216003]
[90.16265106 131.04954529]
[96.96061707 117.67972565]
[88.47141266 130.04635620]
[79.98220825 142.41297913]
[71.49300385 154.77960205]
[63.00379562 167.14622498]
[68.31836700 181.72480774]
[64.01651764 196.63365173]
[51.75239182 206.14001465]
[36.24180222 206.58848572]
[23.44887924 197.80664062]
[18.29276848 183.17127991]
[22.75609779 168.30996704]
[35.12262726 158.93721008]
[50.63717270 158.65701294]
[59.12637711 146.29039001]
[67.61558533 133.92376709]
[76.10478973 121.55714417]
[84.59399414 109.19052124]
[82.09905243 94.39946747]
[70.02300262 85.50177002]
[57.94695282 76.60408020]
[45.87090302 67.70638275]
[33.79485321 58.80868530]
[24.95273399 56.20611954]
[21.55183983 49.57578278]
[9.67701817 40.41125107]
[-2.19780397 31.24672318]
[-14.07262611 22.08219337]
[-26.34391022 13.45574760]
[-38.98729324 5.38451242]
[-51.63068008 -2.68672299]
[-60.62688446 -4.69288635]
[-64.46304321 -11.08126354]
[-76.92346954 -19.43217659]
[-89.38389587 -27.78309059]
[-101.84432220 -36.13400269]
[-114.30474854 -44.48491669]
[-126.76517487 -52.83583069]
[-139.22560120 -61.18674469]
[-151.68603516 -69.53765869]
[-164.14645386 -77.88857269]
[-179.60084534 -74.58139801]
[-192.82168579 -83.24078369]
[-195.96528625 -98.72927094]
[-187.16659546 -111.85781860]
[-171.64573669 -114.83748627]
[-158.61094666 -105.90049744]
[-155.79554749 -90.34899902]
[-143.33511353 -81.99808502]
[-130.87469482 -73.64717102]
[-118.41426086 -65.29625702]
[-105.95383453 -56.94534302]
[-93.49340820 -48.59442902]
[-81.03298187 -40.24351883]
[-68.57255554 -31.89260483]
[-56.11212921 -23.54169083]
[-43.55944443 -15.33010674]
[-30.91605949 -7.25887156]
[-18.27267647 0.81236362]
[-15.44182396 0.28082338]
[-12.22250271 0.88503408]
[-9.06392288 2.78170371]
[-6.46443415 5.95558977]
[-4.90809679 10.20737171]
[6.96672535 19.37190056]
[18.84154701 28.53643036]
[30.71636963 37.70095825]
[42.69255066 46.73263168]
[54.76860046 55.63032913]
[66.84465027 64.52802277]
[78.92070007 73.42572021]
[90.99674988 82.32341766]
[106.64819336 81.72098541]
[117.54351807 92.54037476]
[132.53514099 93.04160309]
[147.52676392 93.54282379]
[162.51838684 94.04405212]
[177.51000977 94.54527283]
[192.50163269 95.04650116]
[202.07107544 82.97454834]
[216.74244690 78.89976501]
[230.83332825 84.18286896]
[239.01342773 96.60156250]
[254.00506592 97.10278320]
[268.99667358 97.60401154]
[283.98831177 98.10523224]
[298.97991943 98.60646057]
[313.97155762 99.10768127]
[328.96316528 99.60890961]
[343.95944214 99.94309235]
[358.95852661 100.11019135]
[373.95758057 100.27729797]
[381.84051514 87.16979218]
[395.13806152 79.81642914]
[410.23056030 80.10441589]
[423.06661987 87.85628510]
[430.25070190 100.90444946]
[445.24978638 101.07155609]
[460.24884033 101.23865509]
[472.67785645 91.09471893]
[488.32693481 94.62815094]
[495.19149780 109.12841034]
[488.00561523 123.47213745]
[472.28164673 126.65605164]
[460.08172607 116.23772430]
[445.08267212 116.07062531]
[430.08358765 115.90351868]
[422.61059570 128.78839111]
[409.60504150 136.25236511]
[394.50985718 136.20404053]
[381.37942505 128.55624390]
[373.79049683 115.27636719]
[358.79141235 115.10926056]
[343.79235840 114.94216156]
[337.01419067 118.03794098]
[328.46194458 114.60053253]
[313.47033691 114.09930420]
[298.47869873 113.59808350]
[283.48709106 113.09685516]
[268.49545288 112.59563446]
[253.50382996 112.09440613]
[238.51220703 111.59318542]
[229.52088928 123.43777466]
[215.10861206 127.76791382]
[200.74215698 122.72229004]
[192.00041199 110.03812408]
[177.00878906 109.53690338]
[162.01716614 109.03567505]
[147.02554321 108.53445435]
[132.03392029 108.03322601]
[117.04229736 107.53199768]
[131.83947754 109.99035645]
[143.62979126 119.26334381]
[149.50601196 133.06443787]
[148.01914978 147.99057007]
[139.53585815 160.36125183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 63]
[34 62]
[35 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[78 135]
[79 134]
[80 133]
[81 132]
[82 131]
[83 130]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 118]
[95 117]
[96 116]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
