%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:28 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MPND)
} def

/sequence { (\
CGGGGCGGGGCCGCGUGACGUGCCGGGAAGCCGGAGUCUAGAGCUCCGGGCGCGGGGAGGCGCGGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.259556335 ubox
1 15 0.016727044 ubox
1 25 0.017656138 ubox
1 48 0.006902773 ubox
2 6 0.246206364 ubox
2 14 0.017532097 ubox
2 24 0.017953567 ubox
2 47 0.009168729 ubox
3 23 0.017952548 ubox
3 46 0.009172661 ubox
3 67 0.006972627 ubox
4 12 0.017626247 ubox
4 32 0.003923902 ubox
4 45 0.009161487 ubox
4 66 0.006800800 ubox
4 67 0.008485980 ubox
5 11 0.017634149 ubox
5 21 0.017924348 ubox
5 31 0.003938540 ubox
5 44 0.009169272 ubox
5 66 0.008194338 ubox
6 10 0.017509412 ubox
6 20 0.017954544 ubox
6 30 0.003942939 ubox
6 43 0.009155011 ubox
6 48 0.004301577 ubox
6 64 0.006593418 ubox
6 65 0.007799468 ubox
7 19 0.017939637 ubox
7 47 0.005633923 ubox
7 63 0.006356750 ubox
7 67 0.011889134 ubox
8 39 0.008442923 ubox
8 46 0.005636527 ubox
8 66 0.007947620 ubox
8 67 0.063929632 ubox
9 24 0.006128650 ubox
9 38 0.008940773 ubox
9 45 0.005633572 ubox
9 66 0.045813345 ubox
9 67 0.985933735 ubox
10 16 0.016601399 ubox
10 23 0.006139226 ubox
10 37 0.008933853 ubox
10 44 0.005638267 ubox
10 61 0.008223216 ubox
10 66 0.998414750 ubox
11 15 0.016531699 ubox
11 22 0.005118775 ubox
11 36 0.008947654 ubox
11 43 0.005629915 ubox
11 60 0.008227205 ubox
11 65 0.999554922 ubox
12 20 0.003923910 ubox
12 22 0.009418513 ubox
12 59 0.008224217 ubox
12 64 0.999543473 ubox
13 19 0.003906845 ubox
13 21 0.010230469 ubox
13 63 0.999547051 ubox
14 20 0.010260021 ubox
14 62 0.999546753 ubox
15 19 0.009601337 ubox
15 61 0.999487656 ubox
16 60 0.996215065 ubox
17 38 0.030326774 ubox
18 37 0.030382198 ubox
19 36 0.030270596 ubox
19 54 0.981204422 ubox
19 64 0.016669018 ubox
20 53 0.982391691 ubox
20 63 0.016816360 ubox
21 52 0.982030468 ubox
21 54 0.013307213 ubox
21 62 0.016811217 ubox
22 51 0.982372063 ubox
22 53 0.013603312 ubox
22 61 0.016864006 ubox
22 66 0.005226212 ubox
23 34 0.032109257 ubox
23 49 0.022719570 ubox
23 50 0.982081633 ubox
23 52 0.013303022 ubox
23 55 0.177072140 ubox
23 56 0.030462279 ubox
23 57 0.025130091 ubox
23 60 0.016869195 ubox
23 65 0.005243444 ubox
24 33 0.032520874 ubox
24 48 0.032012578 ubox
24 49 0.932407024 ubox
24 54 0.177209898 ubox
24 55 0.029988212 ubox
24 56 0.025117637 ubox
24 59 0.016859590 ubox
24 64 0.005238052 ubox
25 32 0.335017441 ubox
25 47 0.029283151 ubox
25 51 0.003925322 ubox
25 53 0.176773028 ubox
26 31 0.351574527 ubox
26 32 0.072510536 ubox
26 46 0.028404307 ubox
26 47 0.804421761 ubox
26 67 0.003356749 ubox
27 31 0.074504994 ubox
27 45 0.014616572 ubox
27 46 0.804690722 ubox
27 66 0.003383312 ubox
28 45 0.569955139 ubox
29 39 0.023137702 ubox
29 45 0.565978263 ubox
30 37 0.009899053 ubox
30 38 0.023023297 ubox
30 44 0.801724618 ubox
30 51 0.048235004 ubox
30 53 0.004226513 ubox
31 36 0.021764686 ubox
31 43 0.800709679 ubox
31 49 0.354877000 ubox
31 50 0.039603072 ubox
32 48 0.481992940 ubox
32 49 0.028065612 ubox
33 39 0.401236130 ubox
33 45 0.003810736 ubox
33 47 0.591671896 ubox
34 38 0.397057706 ubox
34 44 0.006134196 ubox
34 46 0.591991304 ubox
35 45 0.592047962 ubox
36 44 0.592280527 ubox
37 43 0.579166479 ubox
44 57 0.027898552 ubox
44 59 0.011422497 ubox
45 56 0.028009712 ubox
45 58 0.011461560 ubox
46 55 0.028116427 ubox
46 57 0.011446164 ubox
47 54 0.028121352 ubox
47 56 0.011430588 ubox
48 53 0.028012383 ubox
48 67 0.008397719 ubox
49 66 0.010000407 ubox
49 67 0.005659959 ubox
50 63 0.018126904 ubox
50 66 0.006856654 ubox
51 62 0.018201635 ubox
51 64 0.012407614 ubox
51 65 0.004878422 ubox
52 61 0.018216355 ubox
52 63 0.013390511 ubox
53 60 0.018213350 ubox
53 62 0.013396890 ubox
54 61 0.013363406 ubox
9 67 0.9500000 lbox
10 66 0.9500000 lbox
11 65 0.9500000 lbox
12 64 0.9500000 lbox
13 63 0.9500000 lbox
14 62 0.9500000 lbox
15 61 0.9500000 lbox
16 60 0.9500000 lbox
19 54 0.9500000 lbox
20 53 0.9500000 lbox
21 52 0.9500000 lbox
22 51 0.9500000 lbox
23 50 0.9500000 lbox
24 49 0.9500000 lbox
26 47 0.9500000 lbox
27 46 0.9500000 lbox
28 45 0.9500000 lbox
30 44 0.9500000 lbox
31 43 0.9500000 lbox
showpage
end
%%EOF
