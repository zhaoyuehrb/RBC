%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:13 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MICAL2)
} def

/sequence { (\
GUGUGACGUUUCUCCAGAUACUUCAUGCUGUUCACCUGUGUCCUCGCCGCACCACUGCCGCACACGACUCCUGAACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 21 0.007064290 ubox
1 26 0.005832975 ubox
1 28 0.994861454 ubox
1 65 0.010567097 ubox
2 20 0.007072624 ubox
2 25 0.005968918 ubox
2 27 0.994216526 ubox
2 34 0.003164022 ubox
2 64 0.010575938 ubox
3 15 0.003209144 ubox
3 19 0.007052402 ubox
3 24 0.005971437 ubox
3 26 0.995560088 ubox
3 28 0.006655490 ubox
3 63 0.010579159 ubox
4 16 0.003339984 ubox
4 18 0.006962638 ubox
4 25 0.999450354 ubox
4 27 0.005350995 ubox
4 62 0.010490829 ubox
5 14 0.004361144 ubox
5 15 0.003331752 ubox
5 23 0.006335940 ubox
5 24 0.999781465 ubox
5 61 0.009994286 ubox
6 13 0.004171541 ubox
6 22 0.031044365 ubox
6 23 0.987449054 ubox
7 60 0.009430027 ubox
8 19 0.087128346 ubox
8 21 0.986763010 ubox
8 59 0.009181893 ubox
9 17 0.005105877 ubox
9 18 0.089270661 ubox
9 20 0.950824901 ubox
10 16 0.008061870 ubox
10 17 0.090019133 ubox
10 18 0.065762485 ubox
11 16 0.071741017 ubox
11 17 0.064688545 ubox
11 18 0.953311214 ubox
12 17 0.969532896 ubox
15 30 0.003906167 ubox
16 22 0.005186872 ubox
16 29 0.003982620 ubox
17 21 0.005118866 ubox
17 24 0.005390595 ubox
17 28 0.003975681 ubox
17 42 0.008756462 ubox
18 23 0.005294591 ubox
18 41 0.008854472 ubox
19 40 0.008855443 ubox
20 31 0.003262749 ubox
20 39 0.008855100 ubox
21 30 0.003382320 ubox
21 38 0.008852184 ubox
26 34 0.003628395 ubox
27 33 0.003750279 ubox
30 68 0.026031682 ubox
30 76 0.987586490 ubox
31 67 0.025546024 ubox
31 74 0.004921911 ubox
31 75 0.991562714 ubox
32 66 0.020290027 ubox
32 67 0.009728995 ubox
32 73 0.004528157 ubox
32 74 0.993629369 ubox
33 66 0.011303508 ubox
33 73 0.994019477 ubox
34 41 0.003267607 ubox
34 72 0.961703856 ubox
35 40 0.004082271 ubox
37 64 0.016413007 ubox
37 66 0.683486058 ubox
38 45 0.007388175 ubox
38 47 0.011010958 ubox
38 50 0.003299759 ubox
38 52 0.004150091 ubox
38 63 0.017135842 ubox
38 65 0.750190790 ubox
38 68 0.310978428 ubox
38 72 0.006116782 ubox
39 46 0.011079533 ubox
39 49 0.003296212 ubox
39 51 0.004230431 ubox
39 62 0.017128529 ubox
39 64 0.750876312 ubox
39 66 0.153333238 ubox
39 67 0.284901374 ubox
40 45 0.015820639 ubox
40 48 0.003243133 ubox
40 50 0.004244167 ubox
40 61 0.015891192 ubox
40 63 0.751487171 ubox
40 65 0.224466668 ubox
40 68 0.569644301 ubox
41 49 0.004150312 ubox
41 60 0.013273616 ubox
41 62 0.745015869 ubox
41 64 0.219022930 ubox
41 67 0.570623862 ubox
42 66 0.569929804 ubox
44 67 0.006507768 ubox
45 57 0.003212735 ubox
45 60 0.142422774 ubox
45 66 0.008119824 ubox
46 58 0.020416404 ubox
46 59 0.139807117 ubox
46 61 0.987113655 ubox
46 65 0.004989728 ubox
47 57 0.021291712 ubox
47 60 0.986874057 ubox
48 57 0.041674665 ubox
48 60 0.043919301 ubox
49 56 0.032209348 ubox
49 58 0.997331456 ubox
49 59 0.038382641 ubox
49 61 0.009791650 ubox
50 57 0.998417705 ubox
50 60 0.009791780 ubox
51 56 0.850614142 ubox
59 66 0.009412500 ubox
60 65 0.009343237 ubox
66 72 0.003384639 ubox
1 28 0.9500000 lbox
2 27 0.9500000 lbox
3 26 0.9500000 lbox
4 25 0.9500000 lbox
5 24 0.9500000 lbox
6 23 0.9500000 lbox
8 21 0.9500000 lbox
9 20 0.9500000 lbox
11 18 0.9500000 lbox
12 17 0.9500000 lbox
30 76 0.9500000 lbox
31 75 0.9500000 lbox
32 74 0.9500000 lbox
33 73 0.9500000 lbox
34 72 0.9500000 lbox
37 66 0.9500000 lbox
38 65 0.9500000 lbox
39 64 0.9500000 lbox
40 63 0.9500000 lbox
41 62 0.9500000 lbox
46 61 0.9500000 lbox
47 60 0.9500000 lbox
49 58 0.9500000 lbox
50 57 0.9500000 lbox
51 56 0.9500000 lbox
showpage
end
%%EOF
