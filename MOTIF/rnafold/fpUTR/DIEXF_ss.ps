%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGCAGUCAGCGAGCCCACGUGCUUGUGUUGACUGGACAACUUCCUGGUGGAAAACCGCGACUCUUGCAAGUGGGCAAACUUGACGUUUUCGCU\
) } def
/len { sequence length } bind def

/coor [
[104.72537994 416.15319824]
[91.86005402 405.11148071]
[98.90879059 389.69229126]
[99.86984253 374.72311401]
[100.83089447 359.75393677]
[101.79194641 344.78475952]
[87.86241913 331.40301514]
[87.97151184 311.79013062]
[102.48234558 298.15686035]
[102.00157166 283.16458130]
[101.52079773 268.17230225]
[101.04003143 253.17999268]
[100.55925751 238.18769836]
[86.73953247 229.48934937]
[80.70422363 214.13888550]
[84.98410797 198.03874207]
[98.10255432 187.50485229]
[97.14150238 172.53567505]
[96.18045044 157.56649780]
[95.21939850 142.59732056]
[94.25834656 127.62813568]
[93.29728699 112.65895081]
[85.70548248 100.91773987]
[91.73352814 88.30210114]
[90.77247620 73.33291626]
[89.81142426 58.36373901]
[76.14834595 51.48859406]
[67.81604004 38.78152847]
[66.96850586 23.71009636]
[73.73337555 10.32755375]
[86.20448303 2.18279886]
[85.24343109 -12.78638172]
[84.28237915 -27.75556374]
[83.32132721 -42.72474289]
[79.82347107 -48.69313049]
[79.98857117 -54.61267853]
[82.80973053 -58.67808914]
[82.80973053 -73.67809296]
[82.80973053 -88.67809296]
[73.34982300 -94.28257751]
[67.20197296 -103.29988861]
[65.46729279 -113.99193573]
[68.40422058 -124.33303070]
[75.39270782 -132.39358521]
[85.06359100 -136.70022583]
[86.50393677 -151.63090515]
[87.94428253 -166.56159973]
[89.38462830 -181.49227905]
[82.09796143 -196.18365479]
[91.40182495 -209.68811035]
[107.72518921 -208.11341858]
[114.27598572 -193.07948303]
[104.31531525 -180.05194092]
[102.87496948 -165.12124634]
[101.43462372 -150.19056702]
[99.99427795 -135.25987244]
[113.48773956 -121.43856812]
[112.75008392 -101.83924866]
[97.80973053 -88.67809296]
[97.80973053 -73.67809296]
[97.80973053 -58.67808914]
[98.29050446 -43.68579865]
[99.25156403 -28.71661568]
[100.21261597 -13.74743557]
[101.17366791 1.22174561]
[114.58391571 7.70486212]
[123.00457001 20.11246300]
[124.09128571 35.16853714]
[117.45233154 48.83678818]
[104.78060150 57.40268707]
[105.74165344 72.37186432]
[106.70271301 87.34104919]
[114.29451752 99.08226013]
[108.26647186 111.69789886]
[109.22752380 126.66708374]
[110.18857574 141.63626099]
[111.14962769 156.60543823]
[112.11068726 171.57461548]
[113.07173920 186.54380798]
[125.31968689 193.09399414]
[132.63206482 204.77449036]
[133.16491699 218.43582153]
[126.88531494 230.45738220]
[115.55154419 237.70692444]
[116.03231812 252.69921875]
[116.51309204 267.69152832]
[116.99386597 282.68380737]
[117.47463989 297.67608643]
[127.10932159 302.97451782]
[133.54302979 311.79013062]
[135.61952209 322.42108154]
[133.01554871 332.85101318]
[126.28900146 341.13140869]
[116.76113129 345.74578857]
[115.80007172 360.71496582]
[114.83901978 375.68417358]
[113.87796783 390.65335083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[9 88]
[10 87]
[11 86]
[12 85]
[13 84]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[24 72]
[25 71]
[26 70]
[31 65]
[32 64]
[33 63]
[34 62]
[37 61]
[38 60]
[39 59]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
