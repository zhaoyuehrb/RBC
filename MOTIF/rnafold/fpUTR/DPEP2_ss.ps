%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCUGUGCCCUCCCCCUUGCAGGGGAAACAGCACACACUAGUGAAAUCUUGUCUUAGUGUGUCCGGAAUUGGUGGGUUCUUGGUCUCACUGAGUUCUAGAAUGAAGCUGCAGACCCUCGCAGUGAGUGUUACAGCUCUUAAGGCUCUCUGACUGCCACCCCUGCCUGCCUGCCCGGCCCUGCACAAC\
) } def
/len { sequence length } bind def

/coor [
[132.07403564 238.20278931]
[116.57604218 237.43339539]
[104.51129150 227.67524719]
[100.51891327 212.68057251]
[106.13407135 198.21510315]
[119.19760895 189.84112549]
[119.94136810 174.85957336]
[120.68511963 159.87802124]
[121.42887878 144.89646912]
[122.17263794 129.91491699]
[115.16339874 127.24646759]
[101.14493561 121.90956116]
[94.13570404 119.24111176]
[84.72805786 130.92427063]
[75.32041168 142.60742188]
[65.91276550 154.29058838]
[56.50511932 165.97373962]
[58.44940186 181.65798950]
[48.66802216 194.07170105]
[32.96410370 195.85003662]
[20.65450287 185.93795776]
[19.04228592 170.21612549]
[29.08395386 158.01200867]
[44.82196045 156.56610107]
[54.22960663 144.88293457]
[63.63725281 133.19978333]
[73.04489899 121.51662445]
[82.45254517 109.83346558]
[79.43982697 102.96516418]
[65.70322418 108.99059296]
[51.96652603 115.01580048]
[45.94155121 101.27899933]
[59.67779541 95.25399780]
[73.41439819 89.22856140]
[70.40167999 82.36026001]
[55.43447495 81.36890411]
[40.46726990 80.37754822]
[25.50006676 79.38618469]
[10.53286266 78.39482880]
[-4.43434191 77.40347290]
[-19.40154648 76.41210938]
[-34.36875153 75.42075348]
[-49.33595657 74.42938995]
[-58.12385941 76.98812103]
[-64.54178619 73.29589081]
[-79.49055481 72.05720520]
[-90.36782837 83.29192352]
[-105.92709351 84.85500336]
[-118.82173920 76.00841522]
[-122.96331024 60.92924500]
[-116.39627838 46.73741150]
[-102.22139740 40.13386917]
[-87.13161469 44.23660660]
[-78.25186157 57.10843658]
[-63.30309296 58.34712601]
[-48.34459686 59.46218872]
[-33.37739182 60.45354843]
[-18.41018677 61.44490814]
[-3.44298339 62.43626404]
[11.52422142 63.42762375]
[26.49142647 64.41898346]
[41.45862961 65.41033936]
[56.42583466 66.40170288]
[71.39303589 67.39305878]
[85.65888977 62.75780487]
[97.18490601 53.15827560]
[108.71092224 43.55874634]
[120.23693848 33.95922089]
[118.30549622 20.30122566]
[123.33934784 7.57505322]
[133.92239380 -0.93032902]
[147.21969604 -3.07389998]
[159.73645020 1.59926343]
[171.41960144 -7.80838203]
[183.10276794 -17.21602821]
[194.78591919 -26.62367249]
[206.46908569 -36.03131866]
[218.15223694 -45.43896484]
[229.83540344 -54.84660721]
[228.38948059 -72.90563202]
[237.97756958 -88.09189606]
[254.61027527 -94.43943787]
[271.57614136 -89.58850098]
[282.94186401 -99.37728882]
[294.30758667 -109.16607666]
[305.67330933 -118.95486450]
[311.33334351 -136.46884155]
[328.67892456 -139.08209229]
[339.88125610 -149.05746460]
[351.08358765 -159.03283691]
[352.15289307 -174.57292175]
[363.65573120 -184.52978516]
[378.46426392 -183.41458130]
[389.66656494 -193.38995361]
[400.86889648 -203.36532593]
[412.07122803 -213.34069824]
[423.27352905 -223.31607056]
[428.43429565 -238.27189636]
[443.08480835 -240.95745850]
[454.28713989 -250.93283081]
[465.48944092 -260.90820312]
[467.13763428 -265.89886475]
[470.23312378 -269.39819336]
[473.96057129 -271.10397339]
[477.50341797 -271.08352661]
[489.18658447 -280.49118042]
[493.91906738 -288.32559204]
[501.14157104 -289.95587158]
[512.97869873 -299.16903687]
[524.81579590 -308.38223267]
[536.65289307 -317.59542847]
[539.02435303 -330.28567505]
[549.08825684 -337.71459961]
[561.11700439 -336.33297729]
[573.10485840 -345.34921265]
[585.09265137 -354.36541748]
[591.47082520 -368.84399414]
[606.29309082 -370.31054688]
[618.28088379 -379.32678223]
[630.26873779 -388.34298706]
[633.93072510 -403.96252441]
[648.48693848 -410.70758057]
[662.77105713 -403.40399170]
[665.82556152 -387.65438843]
[655.30731201 -375.54055786]
[639.28491211 -376.35516357]
[627.29711914 -367.33895874]
[615.30926514 -358.32275391]
[609.78857422 -344.48907471]
[594.10888672 -342.37759399]
[582.12103271 -333.36138916]
[570.13323975 -324.34515381]
[564.15216064 -307.85501099]
[545.86608887 -305.75833130]
[534.02899170 -296.54513550]
[522.19189453 -287.33193970]
[510.35476685 -278.11874390]
[498.59423828 -268.80801392]
[486.91107178 -259.40036011]
[475.46481323 -249.70588684]
[464.26248169 -239.73051453]
[453.06018066 -229.75514221]
[448.70065308 -215.51281738]
[433.24890137 -212.11373901]
[422.04656982 -202.13836670]
[410.84426880 -192.16300964]
[399.64193726 -182.18763733]
[388.43960571 -172.21226501]
[387.83718872 -157.37405396]
[376.61856079 -147.09802246]
[361.05895996 -147.83050537]
[349.85662842 -137.85514832]
[338.65429688 -127.87977600]
[337.63775635 -115.81470490]
[328.37081909 -107.41260529]
[315.46209717 -107.58914185]
[304.09637451 -97.80035400]
[292.73065186 -88.01156616]
[281.36492920 -78.22277832]
[284.15206909 -66.38649750]
[281.62042236 -54.41908646]
[274.19152832 -44.61029816]
[263.22982788 -38.86355972]
[250.79241943 -38.32675171]
[239.24304199 -43.16344833]
[227.55989075 -33.75580597]
[215.87672424 -24.34815979]
[204.19357300 -14.94051361]
[192.51040649 -5.53286791]
[180.82725525 3.87477732]
[169.14408875 13.28242302]
[170.48596191 29.63500214]
[161.73431396 43.70957565]
[146.16601562 49.86150742]
[129.83647156 45.48523712]
[118.31044769 55.08476639]
[106.78443146 64.68429565]
[95.25841522 74.28382111]
[109.21219635 70.86804962]
[124.95227051 75.51647949]
[137.74864197 88.84583282]
[142.88253784 108.75064087]
[137.15419006 130.65867615]
[136.41043091 145.64022827]
[135.66667175 160.62178040]
[134.92291260 175.60333252]
[134.17915344 190.58488464]
[146.34906006 200.21156311]
[150.50386047 215.16206360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 187]
[7 186]
[8 185]
[9 184]
[10 183]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[45 55]
[46 54]
[65 178]
[66 177]
[67 176]
[68 175]
[73 171]
[74 170]
[75 169]
[76 168]
[77 167]
[78 166]
[79 165]
[83 159]
[84 158]
[85 157]
[86 156]
[88 153]
[89 152]
[90 151]
[93 148]
[94 147]
[95 146]
[96 145]
[97 144]
[99 142]
[100 141]
[101 140]
[105 139]
[106 138]
[108 137]
[109 136]
[110 135]
[111 134]
[114 132]
[115 131]
[116 130]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
