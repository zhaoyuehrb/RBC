%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAGGGGCGUGGCCAAGCGCACCGCCUCGGGGCGGGGCCGGCGUUCUAGCGCAUCGCGGCCGGGUGCGUCACUCGCGAAGUGGAAUUUGCCCAGACAAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[122.59378815 385.24804688]
[118.67984772 370.62069702]
[119.72995758 355.51519775]
[125.63021851 341.57009888]
[135.74060059 330.29806519]
[148.96441650 322.92178345]
[146.28607178 308.16284180]
[143.60771179 293.40390015]
[140.92936707 278.64495850]
[138.25100708 263.88601685]
[123.29531860 257.30364990]
[115.07637024 242.99026489]
[116.96765137 226.42745972]
[128.42657471 214.09336853]
[125.30789948 199.42115784]
[122.18922424 184.74894714]
[107.74559021 176.28021240]
[103.73995209 159.67774963]
[113.09306335 144.98826599]
[109.53685760 130.41590881]
[105.98065186 115.84355927]
[90.76179504 119.15318298]
[75.63332367 107.83282471]
[60.91609955 104.93398285]
[46.19887543 102.03514862]
[31.48164749 99.13630676]
[16.76442146 96.23746490]
[1.42879355 102.04698944]
[-11.09727955 91.46259308]
[-7.92804766 75.37258911]
[7.67625570 70.32901001]
[19.66326141 81.52024078]
[34.38048553 84.41908264]
[49.09771347 87.31791687]
[63.81493759 90.21675873]
[78.53216553 93.11560059]
[89.21780396 82.58863068]
[86.53945160 67.82968903]
[83.86109924 53.07074356]
[81.18274689 38.31179810]
[78.50439453 23.55285454]
[74.94818878 8.98050308]
[70.52685547 -5.35308838]
[66.10552979 -19.68667984]
[61.68420410 -34.02027130]
[49.30129242 -44.77180862]
[52.68615341 -60.81782913]
[68.35673523 -65.65156555]
[80.19248199 -54.30047989]
[76.01779175 -38.44160080]
[80.43912506 -24.10800743]
[84.86045074 -9.77441597]
[89.28177643 4.55917597]
[91.88043976 5.97903919]
[94.02246094 8.59908772]
[95.21371460 12.23077965]
[95.04584503 16.49773598]
[93.26333618 20.87450027]
[95.94168854 35.63344574]
[98.62004089 50.39238739]
[101.29839325 65.15132904]
[103.97674561 79.91027832]
[117.76966858 85.80564880]
[130.28826904 77.54219818]
[142.80686951 69.27873993]
[155.32545471 61.01528549]
[167.84405518 52.75183105]
[177.73207092 38.97998810]
[193.70297241 44.66914368]
[192.65734863 61.59081268]
[176.10751343 65.27043152]
[163.58891296 73.53388977]
[151.07031250 81.79734039]
[138.55171204 90.06079865]
[126.03311920 98.32424927]
[120.55300140 112.28735352]
[124.10920715 126.85971069]
[127.66541290 141.43205261]
[139.98562622 147.11344910]
[146.64080811 158.71109009]
[145.36735535 171.82530212]
[136.86143494 181.63026428]
[139.98011780 196.30247498]
[143.09878540 210.97468567]
[156.15464783 215.67547607]
[165.07942200 226.15849304]
[167.59678650 239.58328247]
[163.14765930 252.38200378]
[153.00994873 261.20767212]
[155.68830872 275.96661377]
[158.36665344 290.72555542]
[161.04501343 305.48449707]
[163.72337341 320.24343872]
[178.69580078 322.50283813]
[192.12220764 329.50357056]
[202.54618835 340.48626709]
[208.83703613 354.25958252]
[210.31236267 369.32946777]
[206.81211853 384.06130981]
[198.71600342 396.85708618]
[186.90222168 406.32879639]
[172.65225220 411.44903564]
[157.51179504 411.66238403]
[143.12319946 406.94570923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[14 84]
[15 83]
[16 82]
[19 78]
[20 77]
[21 76]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 53]
[43 52]
[44 51]
[45 50]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
