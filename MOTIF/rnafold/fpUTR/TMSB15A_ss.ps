%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGCUUAGCACUGCAGGGCUCUGCGCGGGAACGCUAACCUGGUCCGGAGCGAGUCUGGGUCUCAGCCCCGCGAACAGCCUUUCACGAGUCUUCAAGCUUUCAGGCUAUCUUCUAGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[167.90600586 323.17630005]
[164.14622498 308.65515137]
[160.38642883 294.13400269]
[156.62664795 279.61285400]
[152.86685181 265.09167480]
[149.10707092 250.57052612]
[145.34727478 236.04937744]
[141.58749390 221.52821350]
[137.82769775 207.00704956]
[133.51890564 192.63923645]
[128.66734314 178.44549561]
[123.81577301 164.25175476]
[117.90043640 150.46739197]
[110.95548248 137.17198181]
[104.01053619 123.87658691]
[85.43515778 119.34014130]
[75.94452667 102.74039459]
[81.45835876 84.43134308]
[73.52389526 71.70167542]
[65.58943176 58.97201538]
[57.65497589 46.24235153]
[49.72051620 33.51268768]
[41.78605652 20.78302193]
[26.42993164 19.56004906]
[14.87350178 9.64529705]
[11.41211033 -4.99993372]
[17.16923904 -18.71100426]
[9.23477936 -31.44066811]
[1.30031955 -44.17033386]
[-6.63414049 -56.89999771]
[-14.56860065 -69.62966156]
[-22.50306129 -82.35932159]
[-27.31953812 -84.91096497]
[-30.30305672 -88.71125793]
[-31.28634071 -92.81938171]
[-30.51387787 -96.37076569]
[-37.45882797 -109.66616821]
[-44.40377808 -122.96157074]
[-55.25628281 -123.53600311]
[-64.79000854 -128.58103943]
[-71.27054596 -137.10147095]
[-73.55160522 -147.47721863]
[-71.27737427 -157.77110291]
[-64.93601990 -166.09060669]
[-70.85135651 -179.87498474]
[-76.76669312 -193.65934753]
[-82.68203735 -207.44371033]
[-88.59737396 -221.22807312]
[-94.51271057 -235.01245117]
[-100.42804718 -248.79681396]
[-106.34338379 -262.58117676]
[-120.64847565 -269.84368896]
[-123.74826050 -285.58441162]
[-113.26484680 -297.72845459]
[-97.24021149 -296.95993042]
[-87.96708679 -283.86837769]
[-92.55902100 -268.49652100]
[-86.64367676 -254.71215820]
[-80.72834015 -240.92778015]
[-74.81300354 -227.14341736]
[-68.89766693 -213.35905457]
[-62.98233032 -199.57467651]
[-57.06698990 -185.79031372]
[-51.15165329 -172.00595093]
[-32.63508606 -166.27717590]
[-24.00754356 -148.58580017]
[-31.10837746 -129.90652466]
[-24.16342735 -116.61112213]
[-17.21847725 -103.31571960]
[-9.77339745 -90.29378510]
[-1.83893681 -77.56411743]
[6.09552336 -64.83445740]
[14.02998352 -52.10479355]
[21.96444321 -39.37512970]
[29.89890289 -26.64546394]
[44.74417114 -25.77596664]
[56.36835098 -16.21863937]
[60.18047333 -1.47682548]
[54.51572037 12.84856224]
[62.45018005 25.57822609]
[70.38463593 38.30788803]
[78.31909943 51.03755188]
[86.25356293 63.76721573]
[94.18801880 76.49687958]
[104.54533386 76.21942902]
[114.07022858 80.29709625]
[121.01832581 87.98310852]
[124.11717987 97.86987305]
[122.79926300 108.14674377]
[117.30593872 116.93163300]
[124.25088501 130.22703552]
[131.19583130 143.52243042]
[137.40515137 129.86798096]
[151.36720276 124.38516998]
[165.20857239 130.16586304]
[171.12391663 143.95022583]
[165.77746582 157.96505737]
[152.18418884 164.30718994]
[138.00950623 159.40017700]
[142.86108398 173.59391785]
[147.71264648 187.78765869]
[151.82766724 191.36201477]
[153.87490845 195.73835754]
[153.90411377 199.96241760]
[152.34886169 203.24726868]
[156.10864258 217.76843262]
[159.86843872 232.28958130]
[163.62821960 246.81074524]
[167.38801575 261.33190918]
[171.14779663 275.85305786]
[174.90759277 290.37420654]
[178.66737366 304.89535522]
[182.42716980 319.41653442]
[197.34414673 322.84323120]
[208.95245361 332.81848145]
[214.58459473 347.05004883]
[212.94631958 362.26763916]
[204.41412354 374.97433472]
[190.94862366 382.25024414]
[175.64408875 382.42340088]
[162.01741028 375.45404053]
[153.19987488 362.94366455]
[151.21769714 347.76702881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 101]
[11 100]
[12 99]
[13 92]
[14 91]
[15 90]
[18 84]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[36 69]
[37 68]
[38 67]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
