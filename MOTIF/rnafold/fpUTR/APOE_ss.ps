%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACAGGGGGAGCCCUAUAAUUGGACAAGUCUGGGAUCCUUGAGUCCUACUCAGCCCCAGCGGAGGUGAAGGACGUCCUUCCCCAGGAGCCGGUGAGAAGCGCAGUCGGGGGCACGGGG\
) } def
/len { sequence length } bind def

/coor [
[-64.76480865 160.88150024]
[-79.21085358 164.92030334]
[-93.65689087 168.95909119]
[-108.10293579 172.99789429]
[-122.54897308 177.03669739]
[-130.33755493 190.52653503]
[-145.04542542 194.41665649]
[-157.85792542 186.90830994]
[-172.30397034 190.94711304]
[-186.75001526 194.98590088]
[-201.19606018 199.02470398]
[-215.64208984 203.06350708]
[-226.84933472 214.23080444]
[-241.18986511 210.20610046]
[-255.63591003 214.24490356]
[-270.08193970 218.28369141]
[-270.93966675 233.40133667]
[-276.66192627 247.42041016]
[-286.62799072 258.82025146]
[-299.75683594 266.36425781]
[-314.62435913 269.23413086]
[-329.61776733 267.11859131]
[-343.11077881 260.24707031]
[-353.63973999 249.36497498]
[-360.06250000 235.65270996]
[-361.68243408 220.59765625]
[-358.32379150 205.83288574]
[-350.35092163 192.95997620]
[-338.62860107 183.37528992]
[-324.42843628 178.11848450]
[-309.29074097 177.75979614]
[-294.85751343 182.33810425]
[-282.69439697 191.35682678]
[-274.12075806 203.83766174]
[-259.67471313 199.79885864]
[-245.22866821 195.76005554]
[-235.05471802 184.88163757]
[-219.68089294 188.61746216]
[-205.23484802 184.57865906]
[-190.78881836 180.53985596]
[-176.34277344 176.50106812]
[-161.89672852 172.46226501]
[-154.83595276 159.39778137]
[-140.24313354 155.09606934]
[-126.58777618 162.59065247]
[-112.14173126 158.55184937]
[-97.69569397 154.51304626]
[-83.24964905 150.47425842]
[-68.80361176 146.43545532]
[-57.30020905 133.25125122]
[-39.51770020 137.81156921]
[-25.18137932 133.39910889]
[-10.84505558 128.98663330]
[0.31219614 115.50823212]
[18.20710182 119.60537720]
[32.42404175 114.82221985]
[46.64097977 110.03905487]
[60.85792160 105.25589752]
[75.07485962 100.47274017]
[87.07102203 78.68504333]
[111.93636322 78.11372375]
[122.74748230 67.71566010]
[120.18386078 51.05532074]
[127.93895721 36.27533722]
[142.80720520 29.06218529]
[158.89056396 32.05888748]
[169.42810059 21.38366127]
[173.61625671 6.12686300]
[188.06369019 2.50456786]
[198.60121155 -8.17065620]
[209.13874817 -18.84588051]
[219.67628479 -29.52110481]
[230.21382141 -40.19632721]
[233.82951355 -56.19191360]
[249.56811523 -60.79936218]
[261.23907471 -49.27892303]
[256.83633423 -33.48184204]
[240.88903809 -29.65879631]
[230.35150146 -18.98357201]
[219.81398010 -8.30834770]
[209.27644348 2.36687636]
[198.73890686 13.04209995]
[195.30447388 27.53533554]
[180.10331726 31.92119408]
[169.56579590 42.59642029]
[172.95623779 55.57842636]
[169.43133545 68.63713837]
[159.81573486 78.30388641]
[146.56643677 81.95578766]
[133.14555359 78.52677155]
[122.33443451 88.92483521]
[124.05313110 93.44767761]
[124.86579895 98.21732330]
[124.74183655 103.05412292]
[138.38630676 109.28534698]
[152.03079224 115.51657104]
[167.50431824 111.27987671]
[180.37882996 120.85204315]
[180.77812195 136.89012146]
[168.39585876 147.09107971]
[152.73068237 143.62960815]
[145.79956055 129.16105652]
[132.15509033 122.92983246]
[118.51060486 116.69860077]
[112.82937622 121.37506104]
[106.03041077 124.18925476]
[98.70605469 124.89601898]
[91.49443817 123.43376923]
[85.02384949 119.92990112]
[79.85802460 114.68968201]
[65.64108276 119.47283936]
[51.42414093 124.25599670]
[37.20719910 129.03915405]
[22.99026108 133.82231140]
[16.51221466 145.06692505]
[4.47905111 148.71737671]
[-6.43259001 143.32296753]
[-20.76891327 147.73542786]
[-35.10523605 152.14788818]
[-41.87301636 163.22053528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[14 36]
[15 35]
[16 34]
[51 119]
[52 118]
[53 117]
[55 114]
[56 113]
[57 112]
[58 111]
[59 110]
[61 91]
[62 90]
[66 85]
[67 84]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
