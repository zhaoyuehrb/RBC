%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGACCAGGCCACAGGGAUGCUGGGGCUGUAAACCAAAAGCCACUGGACUCUGUAAACCCACUGGGCACCACAGAGGCAGAAGGGGUG\
) } def
/len { sequence length } bind def

/coor [
[78.90604401 128.77528381]
[68.53699493 116.82411957]
[54.11807251 120.95867920]
[48.72599792 135.38891602]
[36.01938248 143.77909851]
[20.98660660 143.08656311]
[9.38307858 133.78622437]
[-5.03584671 137.92079163]
[-19.45477104 142.05534363]
[-30.58765984 153.29676819]
[-44.95458984 149.36730957]
[-59.37351227 153.50186157]
[-66.95554352 158.98861694]
[-74.36813354 157.51966858]
[-88.92256927 161.14848328]
[-103.47700500 164.77731323]
[-112.93903351 177.73300171]
[-128.97312927 178.26904297]
[-139.27931213 165.97422791]
[-135.95155334 150.28010559]
[-121.54262543 143.22584534]
[-107.10583496 150.22288513]
[-92.55139923 146.59405518]
[-77.99696350 142.96522522]
[-63.50807190 139.08294678]
[-49.08914948 134.94837952]
[-38.98759842 124.00270081]
[-23.58933258 127.63642120]
[-9.17040730 123.50186157]
[5.24851847 119.36730194]
[10.16044235 105.33124542]
[22.54196930 96.77777863]
[37.76391220 97.15957642]
[49.98351288 106.53974915]
[64.40243530 102.40518951]
[66.19828033 88.58005524]
[73.15502167 76.49854279]
[84.21049500 68.00526428]
[97.67674255 64.39699554]
[111.49770355 66.22464752]
[123.56317902 73.20918274]
[132.03099060 84.28417206]
[146.58541870 80.65534973]
[160.17895508 65.97051239]
[178.55578613 71.54843903]
[192.82164001 66.91318512]
[207.08747864 62.27792740]
[213.72581482 51.05327225]
[225.87103271 47.56244278]
[236.73844910 53.17934418]
[251.15737915 49.04478073]
[265.57629395 44.91022110]
[279.99523926 40.77566147]
[294.41415405 36.64110184]
[308.83306885 32.50654221]
[314.32470703 16.61972237]
[328.02185059 7.16327095]
[344.49429321 7.64905548]
[357.35061646 17.69337082]
[371.61645508 13.05811596]
[385.88232422 8.42286110]
[399.07778931 -2.22211051]
[412.95962524 7.51087141]
[407.44989014 23.54455948]
[390.51757812 22.68870926]
[376.25170898 27.32396317]
[361.98587036 31.95921898]
[359.00521851 45.09638977]
[349.80773926 55.08755493]
[336.75375366 59.20855331]
[323.27392578 56.26265335]
[312.96765137 46.92546463]
[298.54870605 51.06002808]
[284.12979126 55.19458771]
[269.71087646 59.32914734]
[255.29193115 63.46370697]
[240.87301636 67.59826660]
[229.51969910 80.85617828]
[211.72273254 76.54377747]
[197.45689392 81.17903137]
[183.19104004 85.81428528]
[179.25517273 95.53247833]
[170.36822510 101.50476074]
[159.43864441 101.47691345]
[150.21424866 95.20978546]
[135.65982056 98.83860779]
[132.65553284 114.37314606]
[123.22909546 127.08100128]
[109.23433685 134.46299744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[7 30]
[8 29]
[9 28]
[11 26]
[12 25]
[14 24]
[15 23]
[16 22]
[42 86]
[43 85]
[45 81]
[46 80]
[47 79]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
