%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:33 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (BPTF)
} def

/sequence { (\
CGCCCCCCCUGCGCCCGCCCCUCCCCCUUCGCUUUCCUUCUCCCCCCGCCUCGGCUCCGAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 11 0.018971178 ubox
1 13 0.620651544 ubox
1 17 0.018555767 ubox
1 31 0.022350401 ubox
1 48 0.007539105 ubox
1 53 0.004558136 ubox
1 59 0.142105501 ubox
2 10 0.017209527 ubox
2 12 0.694056609 ubox
2 14 0.144181725 ubox
2 16 0.017543159 ubox
2 18 0.087085041 ubox
2 30 0.023378829 ubox
2 32 0.071862540 ubox
2 47 0.010284842 ubox
2 49 0.019431249 ubox
2 52 0.004366048 ubox
2 55 0.308431788 ubox
2 58 0.141168649 ubox
3 11 0.693044478 ubox
3 13 0.144308344 ubox
3 17 0.087111260 ubox
3 31 0.071826266 ubox
3 48 0.019438392 ubox
3 54 0.307882721 ubox
4 53 0.306121971 ubox
4 54 0.038827106 ubox
5 53 0.044563452 ubox
5 54 0.050110163 ubox
6 53 0.050597042 ubox
6 54 0.121656965 ubox
7 53 0.122101642 ubox
7 54 0.052122371 ubox
8 53 0.052408594 ubox
8 54 0.051717130 ubox
9 53 0.052235765 ubox
9 54 0.012616555 ubox
10 17 0.018363057 ubox
10 31 0.004377316 ubox
10 48 0.012529050 ubox
10 53 0.012758922 ubox
10 59 0.087610415 ubox
11 16 0.027507229 ubox
11 18 0.280717916 ubox
11 30 0.005753090 ubox
11 32 0.359335151 ubox
11 47 0.012254018 ubox
11 49 0.303986501 ubox
11 52 0.013965959 ubox
11 55 0.037118769 ubox
11 58 0.107432391 ubox
12 17 0.281223044 ubox
12 31 0.359890837 ubox
12 48 0.304406905 ubox
12 53 0.008250811 ubox
12 54 0.036821953 ubox
12 59 0.083878467 ubox
13 30 0.345110617 ubox
13 32 0.117985389 ubox
13 47 0.294933849 ubox
13 49 0.030464150 ubox
13 52 0.010434469 ubox
13 55 0.358843929 ubox
13 58 0.082818719 ubox
14 31 0.118626898 ubox
14 48 0.030484500 ubox
14 54 0.359498272 ubox
15 53 0.358129520 ubox
15 54 0.061063495 ubox
16 31 0.058458377 ubox
16 48 0.040523124 ubox
16 53 0.067606472 ubox
16 59 0.045593147 ubox
17 30 0.059031161 ubox
17 32 0.322459966 ubox
17 47 0.040039007 ubox
17 49 0.340264674 ubox
17 52 0.068192302 ubox
17 55 0.256841043 ubox
17 58 0.038511272 ubox
18 31 0.322433162 ubox
18 48 0.339977326 ubox
18 54 0.256973578 ubox
19 53 0.256139340 ubox
19 54 0.024832753 ubox
20 53 0.027596742 ubox
20 54 0.023399411 ubox
21 53 0.023634117 ubox
21 54 0.005793225 ubox
22 53 0.005223951 ubox
22 54 0.003335634 ubox
22 60 0.031971309 ubox
23 53 0.004469849 ubox
23 54 0.020897753 ubox
23 59 0.034472958 ubox
24 53 0.021014686 ubox
24 54 0.032720128 ubox
25 53 0.032896870 ubox
25 54 0.047785241 ubox
26 53 0.048072642 ubox
26 54 0.082371469 ubox
27 53 0.083058042 ubox
27 54 0.012193526 ubox
28 53 0.011803101 ubox
28 60 0.009718086 ubox
29 53 0.003729165 ubox
29 54 0.012098301 ubox
29 59 0.008324431 ubox
29 60 0.127506327 ubox
30 48 0.042353174 ubox
30 53 0.015901666 ubox
30 59 0.137903698 ubox
31 47 0.044342724 ubox
31 49 0.201081126 ubox
31 52 0.015400560 ubox
31 55 0.075620477 ubox
31 58 0.136162847 ubox
32 48 0.201281851 ubox
32 54 0.075761899 ubox
33 53 0.071134030 ubox
33 60 0.005004203 ubox
34 53 0.004372121 ubox
34 59 0.005173691 ubox
34 60 0.006164789 ubox
35 54 0.016526677 ubox
35 59 0.006271726 ubox
35 60 0.030921993 ubox
36 53 0.018052311 ubox
36 54 0.098745013 ubox
36 59 0.033346351 ubox
37 53 0.098909326 ubox
37 54 0.008277353 ubox
38 53 0.007839520 ubox
38 60 0.021839381 ubox
39 54 0.006401329 ubox
39 59 0.022087452 ubox
39 60 0.126420532 ubox
40 53 0.008344461 ubox
40 54 0.006066258 ubox
40 59 0.136413759 ubox
41 53 0.005596461 ubox
41 54 0.006440131 ubox
41 60 0.167042005 ubox
42 53 0.008245953 ubox
42 54 0.036620916 ubox
42 59 0.180142935 ubox
43 53 0.036766609 ubox
43 54 0.085698451 ubox
44 53 0.086350381 ubox
44 54 0.060098236 ubox
45 53 0.060322870 ubox
45 54 0.109557570 ubox
46 53 0.109100449 ubox
46 54 0.305364749 ubox
47 53 0.307836545 ubox
47 59 0.062709472 ubox
48 52 0.289270519 ubox
48 55 0.673204924 ubox
48 58 0.033557985 ubox
49 54 0.674390608 ubox
51 60 0.233573377 ubox
52 59 0.252401028 ubox
53 58 0.249294754 ubox
1 13 0.9500000 lbox
2 12 0.9500000 lbox
3 11 0.9500000 lbox
48 55 0.9500000 lbox
49 54 0.9500000 lbox
showpage
end
%%EOF
