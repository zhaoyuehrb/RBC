%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGUCCCAGCGCGCCCGCCUCCCCACGGACACAGAGCCUGCUGCCCACGUCUCUUCCCUGAGCUGCCUGCUGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[136.80464172 139.32139587]
[125.12916565 129.90422058]
[113.45368958 120.48703766]
[101.77821350 111.06985474]
[89.92232513 101.88084412]
[77.89048004 92.92346954]
[65.85862732 83.96608734]
[48.73569870 86.86899567]
[35.00260162 76.79299927]
[32.72424698 60.25038910]
[20.35412216 51.76628494]
[7.98399639 43.28218079]
[-4.38612890 34.79808044]
[-16.75625420 26.31397629]
[-32.51317978 24.88926125]
[-38.63277435 11.30987167]
[-51.00289917 2.82576823]
[-64.92659760 11.00186920]
[-80.95951080 12.34563351]
[-95.94218445 6.64229536]
[-106.94376373 -4.93912172]
[-111.83526611 -20.08504105]
[-109.70149231 -35.79940414]
[-122.39128876 -43.79747009]
[-135.08108521 -51.79553604]
[-151.47996521 -51.89039612]
[-159.36103821 -66.27165985]
[-150.61694336 -80.14511108]
[-134.24284363 -79.23894501]
[-127.08302307 -64.48533630]
[-114.39322662 -56.48726654]
[-101.70343018 -48.48920059]
[-90.19918060 -56.48196793]
[-76.46388245 -59.44815063]
[-62.60066986 -56.89923477]
[-50.74551392 -49.19382477]
[-42.73807526 -37.48761749]
[-39.83627701 -23.56015587]
[-42.51879501 -9.54435635]
[-30.14867020 -1.06025374]
[-15.27653790 -0.24237934]
[-8.27215099 13.94385147]
[4.09797430 22.42795372]
[16.46809959 30.91205788]
[28.83822441 39.39616013]
[41.20835114 47.88026428]
[53.57524872 43.75725555]
[66.22315979 47.64613342]
[74.37561035 58.31670380]
[74.81600952 71.93424225]
[86.84785461 80.89161682]
[98.87970734 89.84899902]
[106.92894745 91.83049011]
[111.19539642 99.39437866]
[122.87087250 108.81156158]
[134.54634094 118.22874451]
[146.22181702 127.64592743]
[163.44442749 125.40914917]
[176.77650452 136.01007080]
[178.41169739 152.62858582]
[190.44354248 161.58596802]
[202.47538757 170.54335022]
[218.16522217 172.57797241]
[223.75367737 186.38442993]
[235.78552246 195.34181213]
[247.81736755 204.29919434]
[263.83554077 203.40609741]
[274.41305542 215.46824646]
[271.43576050 231.23262024]
[257.18756104 238.60610962]
[242.59846497 231.93243408]
[238.85998535 216.33103943]
[226.82814026 207.37365723]
[214.79629517 198.41629028]
[199.96705627 197.02235413]
[193.51802063 182.57519531]
[181.48616028 173.61781311]
[169.45431519 164.66043091]
[156.93684387 168.30081177]
[144.44924927 163.92443848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 52]
[6 51]
[7 50]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[16 40]
[17 39]
[23 32]
[24 31]
[25 30]
[60 78]
[61 77]
[62 76]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
