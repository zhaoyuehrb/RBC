%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCGAGUUCCCCUCUGCCUUGCGCGCUUCCCCGCCUACCCCGAGCGGCUCAGGUGUCCUGUCGUGCUCACCUGCGCCGGUCGCUGGACCGCGGGGCGCUAACCCUGGAGAGCCCAGGAGCGGGCGGGAC\
) } def
/len { sequence length } bind def

/coor [
[56.61614227 272.02624512]
[41.96244431 268.82171631]
[35.11356354 255.47590637]
[27.61356544 268.46627808]
[27.41417694 284.28622437]
[14.34984303 291.43972778]
[6.84984303 304.43011475]
[-0.65015697 317.42050171]
[2.09650350 333.22668457]
[-8.65612125 345.13299561]
[-24.65953636 344.00595093]
[-33.63729477 330.71011353]
[-28.70242310 315.44491577]
[-13.64053822 309.92050171]
[-6.14053822 296.93011475]
[1.35946190 283.93972778]
[1.02239931 269.04895020]
[14.62318420 260.96627808]
[22.12318420 247.97590637]
[28.83744240 234.56253052]
[34.74219513 220.77362061]
[40.64694977 206.98472595]
[46.55170059 193.19581604]
[52.45645523 179.40690613]
[50.35395432 164.66143799]
[62.89899063 155.02128601]
[68.80374146 141.23237610]
[74.70849609 127.44347382]
[80.61325073 113.65457153]
[80.05293274 95.66377258]
[91.36259460 85.22653198]
[89.93675232 70.29444885]
[88.51091003 55.36236954]
[87.08506775 40.43029022]
[85.65923309 25.49821281]
[84.23339081 10.56613445]
[71.03371429 2.62417579]
[65.11074066 -11.40336132]
[68.54281616 -26.05548859]
[79.80969238 -35.76092529]
[78.38385010 -50.69300461]
[67.35113525 -65.37969971]
[75.14114380 -81.05847168]
[73.36035156 -95.95239258]
[71.57956696 -110.84630585]
[62.25864410 -123.63031769]
[68.43025208 -137.18614197]
[66.64946747 -152.08006287]
[64.86868286 -166.97398376]
[63.08789825 -181.86790466]
[53.76697159 -194.65191650]
[59.93858337 -208.20773315]
[58.15779877 -223.10165405]
[56.37701035 -237.99557495]
[54.59622574 -252.88949585]
[52.81544113 -267.78341675]
[51.03465271 -282.67733765]
[36.57750320 -287.57156372]
[25.68160248 -298.25997925]
[20.51033974 -312.62036133]
[22.09047127 -327.80148315]
[30.10826492 -340.78906250]
[42.97177887 -349.00445557]
[58.12695312 -350.81649780]
[72.56472015 -345.86535645]
[83.41844177 -335.13412476]
[88.53311920 -320.75347900]
[86.89321136 -305.57873535]
[78.82434082 -292.62280273]
[65.92857361 -284.45812988]
[67.70935822 -269.56420898]
[69.49014282 -254.67028809]
[71.27092743 -239.77636719]
[73.05171967 -224.88244629]
[74.83250427 -209.98852539]
[84.02605438 -198.26982117]
[77.98181915 -183.64868164]
[79.76260376 -168.75477600]
[81.54338837 -153.86085510]
[83.32417297 -138.96693420]
[92.51772308 -127.24823761]
[86.47348785 -112.62709045]
[88.25427246 -97.73317719]
[90.03505707 -82.83925629]
[99.38248444 -75.06558228]
[100.93799591 -62.60268402]
[93.31592560 -52.11884689]
[94.74176788 -37.18676758]
[107.64179993 -29.78898811]
[113.78479004 -16.05117035]
[110.62358093 -1.15619874]
[99.16546631 9.14029312]
[100.59130859 24.07237244]
[102.01715088 39.00445175]
[103.44299316 53.93653107]
[104.86882782 68.86860657]
[106.29467010 83.80068970]
[110.90399933 69.52644348]
[123.28653717 61.06046677]
[138.26039124 61.94563293]
[149.55926514 71.81151581]
[152.45474243 86.52940369]
[145.73510742 99.94010162]
[132.21244812 106.43144226]
[117.54467010 103.28626251]
[129.76330566 111.98711395]
[141.98194885 120.68796539]
[154.20059204 129.38882446]
[166.41923523 138.08967590]
[182.41493225 136.85792542]
[193.24523926 148.69363403]
[190.60208130 164.51744080]
[176.51304626 172.19070435]
[161.78605652 165.82713318]
[157.71836853 150.30831909]
[145.49974060 141.60745239]
[133.28109741 132.90660095]
[121.06245422 124.20574951]
[108.84381866 115.50489807]
[94.40215302 119.55932617]
[88.49739838 133.34822083]
[82.59264374 147.13713074]
[76.68789673 160.92604065]
[78.36804962 176.65777588]
[66.24536133 185.31166077]
[60.34060669 199.10057068]
[54.43585205 212.88946533]
[48.53110123 226.67837524]
[42.62634659 240.46728516]
[57.41397095 237.95208740]
[68.76133728 247.76214600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[6 16]
[7 15]
[8 14]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[26 123]
[27 122]
[28 121]
[29 120]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[40 88]
[41 87]
[43 84]
[44 83]
[45 82]
[47 80]
[48 79]
[49 78]
[50 77]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
