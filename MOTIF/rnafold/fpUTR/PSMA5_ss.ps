%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGGUCCUUAGUACUGCGGCCGUGUGGGUGAGUUGGCUGCCGGUGAGUUGGGUGCCGGUGGAGUCGUGUUGGUCCUCAGAAUCCCCGCGUAGCCGCUGCCUCCUCCUACCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[-3.85623765 352.68664551]
[-13.05323792 364.53631592]
[-27.90309334 366.65335083]
[-40.04502487 357.84576416]
[-42.64305496 343.07330322]
[-52.74848938 354.15844727]
[-62.85392380 365.24359131]
[-72.95935822 376.32870483]
[-67.67601776 390.69342041]
[-69.68496704 405.86651611]
[-78.52455902 418.36132812]
[-92.16352081 425.30664062]
[-107.46772003 425.10644531]
[-120.92036438 417.80679321]
[-129.43013000 405.08508301]
[-131.04153442 389.86462402]
[-125.38430786 375.64300537]
[-113.75841522 365.68826294]
[-98.83541107 362.28787231]
[-84.04449463 366.22326660]
[-73.93905640 355.13815308]
[-63.83362198 344.05300903]
[-53.72818756 332.96786499]
[-44.53145218 321.11798096]
[-36.30107498 308.57760620]
[-28.07069969 296.03723145]
[-27.55592346 281.15151978]
[-13.51530743 273.85964966]
[-5.28493071 261.31927490]
[2.94544625 248.77890015]
[11.17582321 236.23852539]
[19.07230568 223.48527527]
[26.62939072 210.52801514]
[34.18647385 197.57075500]
[30.15826225 183.27708435]
[37.63763809 170.02893066]
[52.65747070 165.90068054]
[60.21455765 152.94343567]
[67.77163696 139.98617554]
[67.50009918 125.09404755]
[81.13631439 117.07131958]
[88.69340515 104.11405945]
[74.34822083 108.49764252]
[59.86064529 104.61047363]
[49.63654327 93.63469696]
[46.78520966 78.90819550]
[52.17377472 64.90950012]
[64.16349792 55.89582062]
[79.10814667 54.60833359]
[92.46282959 61.43858337]
[100.16621399 74.30940247]
[99.87565613 89.30636597]
[110.27018738 78.49184418]
[114.25492096 63.18065643]
[128.65286255 59.36640549]
[139.04739380 48.55188751]
[149.44190979 37.73736954]
[159.69279480 26.78658676]
[169.79821777 15.70145321]
[179.90365601 4.61631966]
[183.43376160 -3.94807267]
[190.42514038 -6.62355232]
[200.81967163 -17.43807220]
[211.21420288 -28.25259018]
[215.19894409 -43.56377792]
[229.59687805 -47.37802887]
[239.99140930 -58.19254684]
[243.74635315 -66.66077423]
[250.80592346 -69.15076447]
[261.48229980 -79.68713379]
[259.02304077 -95.00809479]
[266.06890869 -108.83326721]
[279.91061401 -115.84659576]
[295.22573853 -113.35131836]
[306.12530518 -102.30690765]
[308.41821289 -86.96017456]
[301.22280884 -73.21224976]
[287.30581665 -66.34948730]
[272.01867676 -69.01076508]
[261.34228516 -58.47439575]
[250.80592346 -47.79801941]
[240.41140747 -36.98350143]
[237.17015076 -22.44584084]
[222.02871704 -17.85806465]
[211.63418579 -7.04354525]
[201.23966980 3.77097392]
[190.98880005 14.72175407]
[180.88336182 25.80688858]
[170.77792358 36.89202118]
[168.56936646 44.04464340]
[160.25643921 48.13189316]
[149.86190796 58.94641495]
[139.46737671 69.76093292]
[136.22613525 84.29859161]
[121.08470154 88.88636780]
[110.69017792 99.70088959]
[101.65065765 111.67115021]
[94.09357452 124.62840271]
[93.82457733 140.44732666]
[80.72889709 147.54325867]
[73.17181396 160.50051880]
[65.61472321 173.45777893]
[69.41669464 188.56349182]
[61.56815720 201.59634399]
[47.14373016 205.12783813]
[39.58664703 218.08509827]
[32.02956009 231.04235840]
[31.60674477 237.84530640]
[28.24616623 242.62455750]
[23.71619415 244.46890259]
[15.48581696 257.00927734]
[7.25543976 269.54965210]
[-0.97493714 282.09002686]
[-2.07840419 297.87268066]
[-15.53032780 304.26760864]
[-23.76070595 316.80798340]
[-31.99108124 329.34835815]
[-17.03516769 328.19915771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[8 20]
[24 117]
[25 116]
[26 115]
[28 113]
[29 112]
[30 111]
[31 110]
[32 107]
[33 106]
[34 105]
[37 102]
[38 101]
[39 100]
[41 98]
[42 97]
[52 96]
[53 95]
[55 93]
[56 92]
[57 91]
[58 89]
[59 88]
[60 87]
[62 86]
[63 85]
[64 84]
[66 82]
[67 81]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
