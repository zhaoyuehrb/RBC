%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGCAGGAGGCGGGUGGGUCAAGGUAACUCUGGGCUACAGAGUCCUUGCUGGGGGUUCGGGGAGCGCUUGGACCCCGGCUUCUGGGACGCGUCAGAAUAUUAUCCAGCAAUGCAAAUGAACAAACUAUAACUACACACAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[89.70407104 135.16741943]
[77.29779053 127.73349762]
[68.98160553 116.29328156]
[65.88230896 102.82125092]
[51.73914719 107.81835175]
[37.59598541 112.81544495]
[23.45282173 117.81254578]
[9.30966091 122.80963898]
[-4.83350134 127.80673981]
[-18.97666359 132.80383301]
[-26.08497238 138.65283203]
[-33.47338486 137.75341797]
[-47.71942520 142.44920349]
[-61.96546555 147.14497375]
[-69.52182770 162.88542175]
[-85.79335022 168.21908569]
[-100.60674286 160.32281494]
[-114.74990845 165.31990051]
[-128.89306641 170.31700134]
[-143.03622437 175.31410217]
[-153.47050476 187.20681763]
[-168.04835510 184.15144348]
[-182.19152832 189.14854431]
[-196.33468628 194.14564514]
[-210.42401123 199.29255676]
[-224.45791626 204.58872986]
[-234.42599487 217.61062622]
[-250.65008545 215.22094727]
[-256.44027710 199.87800598]
[-245.84007263 187.36529541]
[-229.75408936 190.55482483]
[-215.72018433 185.25865173]
[-210.53675842 179.91732788]
[-201.33178711 180.00248718]
[-187.18861389 175.00538635]
[-173.04545593 170.00828552]
[-163.62280273 158.47300720]
[-148.03332520 161.17094421]
[-133.89016724 156.17384338]
[-119.74700165 151.17674255]
[-105.60384369 146.17964172]
[-101.70845795 133.85520935]
[-91.25697327 125.92353821]
[-77.94910431 125.47491455]
[-66.66123962 132.89894104]
[-52.41520309 128.20315552]
[-38.16915894 123.50738525]
[-23.97376060 118.66067505]
[-9.83059788 113.66357422]
[4.31256342 108.66648102]
[18.45572472 103.66938019]
[32.59888840 98.67228699]
[46.74205017 93.67518616]
[60.88521194 88.67809296]
[67.63826752 75.28420258]
[63.24592590 60.94170380]
[58.85358429 46.59920120]
[54.46124268 32.25670242]
[50.06890106 17.91419983]
[45.67655945 3.57169867]
[41.28421783 -10.77080250]
[36.89187622 -25.11330414]
[32.49953461 -39.45580292]
[28.10719299 -53.79830551]
[14.66992855 -62.56297684]
[13.28792477 -78.54639435]
[25.02133560 -89.48744965]
[40.86929321 -86.99309540]
[48.67460251 -72.97679138]
[42.44969177 -58.19064713]
[46.84203339 -43.84814453]
[51.23437500 -29.50564575]
[55.62671661 -15.16314411]
[60.01905823 -0.82064295]
[64.41139984 13.52185822]
[68.80374146 27.86435890]
[73.19608307 42.20685959]
[77.58842468 56.54936218]
[81.98076630 70.89186096]
[92.15528107 65.44028473]
[103.94578552 63.56946564]
[116.08638000 65.74034882]
[127.18855286 71.96567535]
[137.33544922 60.91847610]
[147.48233032 49.87127304]
[157.62921143 38.82407379]
[167.77610779 27.77687073]
[177.92298889 16.72966957]
[177.00192261 0.95224315]
[187.56921387 -10.79968166]
[203.35549927 -11.55389786]
[214.99504089 -0.86294138]
[215.58232117 14.93043232]
[204.76889038 26.45629501]
[188.97019958 26.87655640]
[178.82330322 37.92375946]
[168.67642212 48.97095871]
[158.52952576 60.01816177]
[148.38264465 71.06536102]
[138.23576355 82.11256409]
[138.79244995 89.59187317]
[149.79327393 79.39472961]
[164.62466431 81.63755798]
[172.11848450 94.63150024]
[166.63188171 108.59205627]
[152.29627991 113.00687408]
[139.90583801 104.55049896]
[140.46253967 112.02980804]
[152.13307190 121.45310974]
[163.80360413 130.87640381]
[175.47415161 140.29971313]
[190.98028564 138.81741333]
[202.68164062 148.54022217]
[203.99922180 163.33210754]
[215.66976929 172.75540161]
[227.75903320 163.73873901]
[241.71116638 158.01258850]
[256.64910889 155.93690491]
[271.63388062 157.64216614]
[285.72348022 163.02117920]
[298.03225708 171.73582458]
[307.78643799 183.23826599]
[314.37292480 196.80548096]
[317.37762451 211.58460999]
[316.61169434 226.64662170]
[312.12326050 241.04470825]
[304.19448853 253.87379456]
[293.32379150 264.32742310]
[280.19448853 271.74847412]
[265.63189697 275.67047119]
[250.55145264 275.84686279]
[235.90112305 272.26657104]
[222.60183716 265.15463257]
[211.48959351 254.95811462]
[203.26290894 242.31799316]
[198.43894958 228.02882385]
[197.32092285 212.98886108]
[199.97912598 198.14349365]
[206.24645996 184.42593384]
[194.57592773 175.00263977]
[179.83845520 176.83096313]
[167.86863708 167.44064331]
[166.05084229 151.97024536]
[154.38031006 142.54695129]
[142.70977783 133.12364197]
[131.03924561 123.70034790]
[118.92296600 133.24118042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[12 47]
[13 46]
[14 45]
[17 41]
[18 40]
[19 39]
[20 38]
[22 36]
[23 35]
[24 34]
[25 32]
[26 31]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[108 146]
[109 145]
[110 144]
[111 143]
[114 140]
[115 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
