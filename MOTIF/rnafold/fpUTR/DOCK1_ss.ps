%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGCCGCAAACUUUUUCCUCCCCAUCCUGUCGCGGCUCGAAAGGAAUGGAAAAUGGCGGCCUAGACGCGGAGUUUCCUGCCCGACCCGCGGCGGCUCCGGCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-10.98312664 483.16583252]
[-21.77387428 471.61874390]
[-21.15556717 455.82653809]
[-9.49503613 445.15847778]
[-9.06669521 430.16458130]
[-8.63835430 415.17071533]
[-8.21001339 400.17681885]
[-7.78167295 385.18295288]
[-7.35333204 370.18905640]
[-16.10275078 368.01248169]
[-24.38498497 364.43908691]
[-31.97857857 359.56295776]
[-38.68025208 353.51303101]
[-44.31034088 346.44967651]
[-48.71760941 338.56048584]
[-51.78332520 330.05517578]
[-53.42444229 321.16021729]
[-53.59585953 312.11264038]
[-52.29165268 303.15368652]
[-49.54528046 294.52258301]
[-45.42871475 286.44995117]
[-40.05055618 279.15173340]
[-33.55318069 272.82339478]
[-26.10895920 267.63473511]
[-17.91568565 263.72518921]
[-9.19132805 261.20034790]
[-0.16822746 260.12881470]
[8.91309261 260.54046631]
[17.81033516 262.42575073]
[24.04156113 248.78128052]
[30.27278519 235.13679504]
[36.50400925 221.49230957]
[42.73523712 207.84783936]
[48.96646118 194.20335388]
[55.19768524 180.55888367]
[61.42891312 166.91439819]
[67.66013336 153.26991272]
[65.90914154 138.47859192]
[78.68003845 129.13970947]
[84.91126251 115.49522400]
[91.14248657 101.85074615]
[90.24539948 97.92678833]
[91.16249084 93.62623596]
[94.01887512 89.80514526]
[98.53562927 87.34088135]
[105.91162872 74.27968597]
[100.81463623 61.71599197]
[103.88693237 48.71124268]
[113.77395630 40.01512146]
[126.67560577 38.66868210]
[134.42156982 25.82344627]
[142.16752625 12.97821045]
[149.91349792 0.13297516]
[157.65945435 -12.71226025]
[150.86471558 -28.12361526]
[154.50444031 -44.39911270]
[166.96713257 -55.23128891]
[183.26156616 -56.54166794]
[190.63755798 -69.60285950]
[198.01354980 -82.66405487]
[192.35647583 -97.24251556]
[197.44267273 -112.02982330]
[210.87059021 -120.04386902]
[226.29998779 -117.50066376]
[236.44555664 -105.60102081]
[236.51689148 -89.96360016]
[226.48028564 -77.97190857]
[211.07473755 -75.28805542]
[203.69874573 -62.22686768]
[196.32275391 -49.16567612]
[202.99787903 -37.50853348]
[203.00335693 -23.96676445]
[196.22976685 -12.11539650]
[184.37162781 -5.13677406]
[170.50468445 -4.96629858]
[162.75872803 7.87893724]
[155.01277161 20.72417259]
[147.26679993 33.56940842]
[139.52084351 46.41464233]
[144.28083801 62.47415161]
[135.85018921 77.33518219]
[118.97281647 81.65567780]
[111.59682465 94.71687317]
[104.78696442 108.08197021]
[98.55574036 121.72644806]
[92.32451630 135.37092590]
[93.62981415 151.13819885]
[81.30461884 159.50114441]
[75.07339478 173.14561462]
[68.84216309 186.79010010]
[62.61093903 200.43458557]
[56.37971497 214.07905579]
[50.14849091 227.72354126]
[43.91726685 241.36802673]
[37.68603897 255.01249695]
[31.45481491 268.65698242]
[47.74330139 284.54531860]
[56.29898071 305.59249878]
[55.71744156 328.27014160]
[46.12354279 348.78851318]
[29.14591408 363.72979736]
[7.64055109 370.61740112]
[7.21221018 385.61129761]
[6.78386927 400.60516357]
[6.35552883 415.59906006]
[5.92718792 430.59292603]
[5.49884701 445.58682251]
[16.53133392 456.90316772]
[16.24707603 472.70489502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[39 86]
[40 85]
[41 84]
[45 83]
[46 82]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
