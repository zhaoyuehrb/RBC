%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACUGUAGUAGUAGCUGGAAAGAGAAAUCUGUGACUCCAAUUAGCCAGUUCCUGCAGACCUUGUGAGGACUAGAGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[137.51197815 208.46598816]
[147.63543701 197.18363953]
[140.54884338 183.96319580]
[133.46224976 170.74275208]
[126.37565613 157.52229309]
[109.25509644 148.86604309]
[109.52414703 128.87977600]
[101.45800018 116.23313904]
[86.42692566 109.02286530]
[85.59642029 92.37259674]
[77.05748749 80.04026031]
[68.51854706 67.70791626]
[59.97961807 55.37557602]
[45.76243210 48.43423462]
[44.87854385 33.56587982]
[36.33961105 21.23353958]
[27.80067825 8.90119934]
[19.26174355 -3.43114090]
[10.72281075 -15.76348114]
[2.18387699 -28.09582138]
[-23.23187637 -27.99312210]
[-41.76010132 -45.09834671]
[-43.65422440 -70.04405212]
[-56.73819733 -77.37956238]
[-69.82216644 -84.71507263]
[-86.20425415 -83.96723938]
[-94.81381989 -97.92458344]
[-86.79407501 -112.22898102]
[-70.39505768 -112.16529846]
[-62.48665619 -97.79904175]
[-49.40268707 -90.46353149]
[-36.31871414 -83.12802124]
[-31.03421021 -87.95312500]
[-24.84842110 -91.57353210]
[-18.03192139 -93.82535553]
[-10.88403225 -94.60468292]
[-3.71967936 -93.87237549]
[3.14448094 -91.65599060]
[9.40405846 -88.04879761]
[14.78042507 -83.20584869]
[19.03312111 -77.33731842]
[21.97060013 -70.69938660]
[23.45886230 -63.58305740]
[23.42755318 -56.30140305]
[21.87327385 -49.17579269]
[18.85995293 -42.52170181]
[14.51621723 -36.63475418]
[23.05515099 -24.30241394]
[31.59408379 -11.97007465]
[40.13301849 0.36226577]
[48.67195129 12.69460583]
[57.21088409 25.02694702]
[70.81730652 31.08619690]
[72.31195831 46.83664322]
[80.85089111 59.16898346]
[89.38982391 71.50132751]
[97.92875671 83.83366394]
[109.38490295 86.67468262]
[115.91915131 96.50413513]
[114.10463715 108.16699219]
[122.17077637 120.81362152]
[133.21611023 122.62152863]
[141.18127441 130.16392517]
[143.49220276 140.65936279]
[139.59609985 150.43569946]
[146.68269348 163.65615845]
[153.76928711 176.87660217]
[160.85588074 190.09704590]
[175.85597229 187.91233826]
[190.69804382 190.99276733]
[203.58981323 198.96633911]
[212.97456360 210.87022400]
[217.71902466 225.26695251]
[217.25027466 240.41806030]
[211.62493896 254.49398804]
[201.52229309 265.79495239]
[188.16227722 272.95639038]
[173.15817261 275.11343384]
[158.32182312 272.00564575]
[145.44476318 264.00833130]
[136.08197021 252.08718872]
[131.36404419 237.68173218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[7 61]
[8 60]
[10 57]
[11 56]
[12 55]
[13 54]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[23 32]
[24 31]
[25 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
