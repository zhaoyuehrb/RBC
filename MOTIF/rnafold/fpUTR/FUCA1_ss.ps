%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCAAUCGUUAGUCAGAGUGGGCGGAGCCGCCCGCGGGCACCUGCGCGUUAAGAGUGGGCCGCGUCGCUGAGGGGUAGCG\
) } def
/len { sequence length } bind def

/coor [
[53.60176849 329.25610352]
[48.57451248 343.76892090]
[36.95386887 353.81164551]
[21.86572647 356.68280029]
[7.36872435 351.61007690]
[-2.63751864 339.95800781]
[-5.46137285 324.86096191]
[-0.34323639 310.37991333]
[11.34013844 300.41024780]
[26.44598198 297.63372803]
[31.40016747 283.47549438]
[36.35435486 269.31723022]
[41.30854034 255.15898132]
[46.26272583 241.00073242]
[43.16316986 226.43220520]
[55.02418518 215.96192932]
[59.97837067 201.80366516]
[52.02944946 187.11024475]
[57.15439606 170.85897827]
[72.69242859 163.08413696]
[77.11375427 148.75054932]
[81.53507996 134.41694641]
[85.95640564 120.08335876]
[90.37773895 105.74977112]
[94.53026581 91.33600616]
[98.41255188 76.84712219]
[102.29483795 62.35823441]
[106.17712402 47.86934662]
[100.37433624 36.17106628]
[104.08092499 24.07183266]
[114.73789215 18.03077126]
[119.15922546 3.69717884]
[123.58055115 -10.63641357]
[128.00187683 -24.97000504]
[117.58248901 -41.86653519]
[122.48979187 -60.79675674]
[139.29115295 -70.21492767]
[142.07981873 -84.95342255]
[144.86849976 -99.69191742]
[139.83169556 -114.68995667]
[149.80026245 -125.75689697]
[152.58892822 -140.49539185]
[146.66487122 -155.78713989]
[157.15527344 -168.39202881]
[173.26852417 -165.34324646]
[178.42869568 -149.77709961]
[167.32742310 -137.70672607]
[164.53875732 -122.96822357]
[169.77502441 -109.02437592]
[159.60699463 -96.90324402]
[156.81832886 -82.16474915]
[154.02964783 -67.42624664]
[162.18286133 -60.51820755]
[166.64613342 -50.71836090]
[166.50357056 -39.86880112]
[161.71237183 -30.04196548]
[153.12438965 -23.14477158]
[142.33546448 -20.54867744]
[137.91413879 -6.21508551]
[133.49281311 8.11850643]
[129.07148743 22.45209885]
[133.97416687 39.19180298]
[120.66601562 51.75163269]
[116.78372955 66.24051666]
[112.90144348 80.72940826]
[109.01915741 95.21829224]
[110.14901733 103.41697693]
[104.71132660 110.17109680]
[100.29000092 124.50468445]
[95.86867523 138.83828735]
[91.44734192 153.17187500]
[87.02601624 167.50546265]
[94.70777130 178.74722290]
[94.43576813 192.16404724]
[86.53879547 202.77055359]
[74.13661957 206.75785828]
[69.18243408 220.91610718]
[71.92763519 236.49732971]
[60.42097473 245.95492554]
[55.46678925 260.11315918]
[50.51260376 274.27142334]
[45.55841827 288.42965698]
[40.60423279 302.58792114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[16 77]
[17 76]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[25 66]
[26 65]
[27 64]
[28 63]
[31 61]
[32 60]
[33 59]
[34 58]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
