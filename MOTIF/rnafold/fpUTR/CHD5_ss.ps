%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGGCCGCCUCGCCCGCCGCGCGCGCCGGUCCGGCAGCGCACGGGUUAAGGCUGGCACCGCGCCCGGCGGGAGGGGGGGCGCCCACCUCCCCUCCUCCCCGCGCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[193.62704468 137.88317871]
[186.04605103 127.33232880]
[171.42213440 123.99451447]
[158.98641968 132.11169434]
[144.10813904 128.93499756]
[135.67840576 115.83624268]
[121.05448914 112.49842834]
[106.43057251 109.16061401]
[91.76127625 106.02822113]
[77.04949951 103.10186768]
[62.33771896 100.17550659]
[47.62593842 97.24915314]
[30.41505241 103.60585785]
[17.61582565 91.69002533]
[2.82775974 89.17743683]
[-11.96030521 86.66484070]
[-26.74837112 84.15224457]
[-41.53643799 81.63965607]
[-52.57799530 88.48625183]
[-64.91802216 85.99378967]
[-71.96961975 76.05472565]
[-86.68139648 73.12837219]
[-101.39318085 70.20201111]
[-116.10495758 67.27565765]
[-127.33419800 73.80989075]
[-139.59945679 70.97232056]
[-146.36953735 60.83938980]
[-160.99345398 57.50157547]
[-175.61737061 54.16376114]
[-190.24128723 50.82594681]
[-207.02874756 53.19615555]
[-213.95355225 37.72090530]
[-201.00004578 26.78274536]
[-186.90347290 36.20203018]
[-172.27955627 39.53984451]
[-157.65563965 42.87765884]
[-143.03172302 46.21546936]
[-126.64678192 40.10473251]
[-113.17860413 52.56388092]
[-98.46682739 55.49023438]
[-83.75504303 58.41658783]
[-69.04326630 61.34294510]
[-52.83615875 54.77507401]
[-39.02384186 66.85158539]
[-24.23577690 69.36418152]
[-9.44771194 71.87677765]
[5.34035301 74.38936615]
[20.12841797 76.90196228]
[30.26085472 70.13114929]
[42.67837524 72.20328522]
[50.55229568 82.53737640]
[65.26407623 85.46372986]
[79.97585297 88.39008331]
[94.68762970 91.31643677]
[102.70491028 89.66199493]
[109.76838684 94.53668976]
[124.39230347 97.87450409]
[139.01622009 101.21231842]
[152.29447937 93.06826782]
[167.07766724 96.66161346]
[174.75994873 109.37059021]
[189.38386536 112.70840454]
[206.76626587 106.83690643]
[219.22625732 119.10701752]
[233.93803406 122.03337097]
[248.64981079 124.95973206]
[263.36160278 127.88608551]
[278.07336426 130.81243896]
[292.78515625 133.73880005]
[307.49694824 136.66514587]
[322.31878662 138.97009277]
[337.22445679 140.64956665]
[352.13015747 142.32904053]
[367.03582764 144.00849915]
[381.94152832 145.68797302]
[396.84719849 147.36743164]
[411.75286865 149.04690552]
[426.65856934 150.72636414]
[441.56423950 152.40583801]
[456.46994019 154.08529663]
[471.37561035 155.76477051]
[481.03698730 143.73724365]
[495.67446899 138.86405945]
[510.61727905 142.70022583]
[521.09722900 154.02163696]
[523.77020264 169.21568298]
[517.78320312 183.43397522]
[505.04678345 192.13952637]
[489.62500000 192.55442810]
[476.43890381 184.54627991]
[469.69613647 170.67045593]
[454.79046631 168.99098206]
[439.88479614 167.31152344]
[424.97909546 165.63204956]
[410.07342529 163.95259094]
[395.16772461 162.27311707]
[380.26205444 160.59365845]
[365.35635376 158.91418457]
[350.45068359 157.23471069]
[335.54501343 155.55525208]
[320.63931274 153.87577820]
[317.58966064 155.90480042]
[313.36441040 156.47259521]
[308.70263672 155.02450562]
[304.57058716 151.37692261]
[289.85879517 148.45057678]
[275.14703369 145.52421570]
[260.43524170 142.59786987]
[245.72346497 139.67150879]
[231.01168823 136.74514771]
[216.29991150 133.81880188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[6 58]
[7 57]
[8 56]
[9 54]
[10 53]
[11 52]
[12 51]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[21 42]
[22 41]
[23 40]
[24 39]
[27 37]
[28 36]
[29 35]
[30 34]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
