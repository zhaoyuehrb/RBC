%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCAAAGCAUGCUGGUCUCAGGCGGUCUCCGCUCAACGAUCCUUCCUCAAAGCAUGGUUGCUGAGUACCCAGAGUUGCGAGGAGUUUUUUAACUGAUUUAGCCAGGUGGCAAUC\
) } def
/len { sequence length } bind def

/coor [
[60.04544449 104.38301849]
[61.68168259 92.71429443]
[66.54657745 82.36848450]
[54.92750549 72.88179779]
[43.30842972 63.39511871]
[31.68935394 53.90843964]
[20.07028008 44.42175674]
[10.83953190 48.25805283]
[0.90272075 48.39114761]
[-8.31827450 44.84543991]
[-15.52012539 38.16862106]
[-19.70224380 29.34756279]
[-20.30568314 19.66260338]
[-17.28747940 10.50174713]
[-27.82264137 -0.17581485]
[-38.35780334 -10.85337734]
[-48.89296722 -21.53093910]
[-68.49430084 -25.84949684]
[-72.85439301 -44.60837173]
[-83.94750214 -54.70504761]
[-95.04061890 -64.80172729]
[-106.13372803 -74.89839935]
[-117.22683716 -84.99507904]
[-131.25207520 -90.31415558]
[-146.25073242 -90.11277008]
[-161.24937439 -89.91139221]
[-176.24803162 -89.71001434]
[-192.00456238 -83.45157623]
[-202.38024902 -96.85983276]
[-192.36828613 -110.54181671]
[-176.44940186 -104.70866394]
[-161.45075989 -104.91004181]
[-146.45210266 -105.11141968]
[-131.45346069 -105.31279755]
[-123.95313263 -118.30376434]
[-116.45346069 -131.29356384]
[-123.77838135 -144.38346863]
[-131.10331726 -157.47335815]
[-138.42823792 -170.56326294]
[-151.91928101 -178.82777405]
[-151.38233948 -193.71269226]
[-158.70726013 -206.80259705]
[-172.19831848 -215.06710815]
[-171.66136169 -229.95204163]
[-178.98629761 -243.04193115]
[-186.31121826 -256.13183594]
[-201.29757690 -261.85797119]
[-206.02706909 -277.18804932]
[-196.87162781 -290.36215210]
[-180.85452271 -291.27426147]
[-170.26271057 -279.22463989]
[-173.22131348 -263.45675659]
[-165.89639282 -250.36686707]
[-158.57147217 -237.27696228]
[-145.60435486 -229.94873047]
[-145.61737061 -214.12751770]
[-138.29243469 -201.03762817]
[-125.32531738 -193.70938110]
[-125.33833313 -177.88818359]
[-118.01341248 -164.79827881]
[-110.68848419 -151.70838928]
[-103.36356354 -138.61848450]
[-107.13015747 -96.08818817]
[-96.03704834 -85.99151611]
[-84.94393921 -75.89483643]
[-73.85083008 -65.79815674]
[-62.75771713 -55.70148087]
[-52.47424316 -57.09709167]
[-42.95267868 -52.44113922]
[-37.51697159 -43.08541107]
[-38.21540451 -32.06610107]
[-27.68024254 -21.38854027]
[-17.14508057 -10.71097851]
[-6.60991669 -0.03341582]
[13.63680077 -1.81151259]
[29.01454735 11.91222954]
[29.55696106 32.80268478]
[41.17603683 42.28936386]
[52.79510880 51.77604675]
[64.41418457 61.26272583]
[76.03325653 70.74940491]
[94.69390869 60.15752411]
[117.42332458 61.15545273]
[137.22389221 74.79950714]
[147.29095459 98.05599213]
[162.12767029 100.26317596]
[176.96440125 102.47035980]
[191.80111694 104.67754364]
[206.84817505 98.15696716]
[219.85568237 108.14379883]
[217.44262695 124.36444092]
[202.09135437 130.13249207]
[189.59393311 119.51426697]
[174.75721741 117.30708313]
[159.92048645 115.09989929]
[145.08377075 112.89271545]
[140.82327271 119.06509399]
[153.16804504 127.58606720]
[165.51264954 136.10723877]
[156.99127197 148.45172119]
[144.64706421 139.93083191]
[132.30230713 131.40985107]
[128.04182434 137.58222961]
[135.36674500 150.67213440]
[142.69168091 163.76203918]
[157.05152893 171.68205261]
[157.10195923 188.08111572]
[142.79107666 196.08927917]
[128.84069824 187.46842957]
[129.60177612 171.08695984]
[122.27684784 157.99705505]
[114.95192719 144.90716553]
[101.11884308 146.12788391]
[87.88403320 143.28840637]
[76.38199615 136.84225464]
[67.53658295 127.54264832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[14 74]
[15 73]
[16 72]
[17 71]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[24 34]
[25 33]
[26 32]
[27 31]
[36 62]
[37 61]
[38 60]
[39 59]
[41 57]
[42 56]
[44 54]
[45 53]
[46 52]
[85 96]
[86 95]
[87 94]
[88 93]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
