%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCGCCCAAAGCGGGGUUGCGCCGGGGCCUCCGGGGCCGAGGUGGGCCUGCUCAUUGGAAGAUCGCAUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[37.73408127 195.42646790]
[34.82366562 198.19300842]
[31.53139496 199.48338318]
[28.45940399 199.38670349]
[17.64136696 209.77757263]
[6.82333088 220.16844177]
[-3.99470592 230.55931091]
[-5.75404453 246.50559998]
[-19.39468384 254.95027161]
[-34.45269012 249.41529846]
[-39.37685394 234.14663696]
[-30.38977432 220.85708618]
[-14.38557148 219.74127197]
[-3.56753445 209.35040283]
[7.25050211 198.95953369]
[18.06853867 188.56866455]
[28.01537895 177.34100342]
[37.02651215 165.34936523]
[46.03764725 153.35772705]
[55.04878235 141.36608887]
[64.05991364 129.37445068]
[73.07104492 117.38280487]
[82.08218384 105.39115906]
[81.47819519 90.40332794]
[71.53135681 79.17566681]
[61.58451462 67.94800568]
[51.63767242 56.72034454]
[35.77515411 54.32033920]
[27.88658142 40.35073090]
[34.02339172 25.52780533]
[49.47795105 21.22244453]
[62.39484406 30.73735046]
[62.86533356 46.77350235]
[72.81217194 58.00116348]
[82.75901794 69.22882843]
[92.70585632 80.45648956]
[107.46015167 77.75266266]
[112.77922821 63.72741699]
[118.09829712 49.70217514]
[123.41737366 35.67692947]
[116.70335388 21.36967659]
[122.15108490 6.53398466]
[136.52851868 -0.02839394]
[151.30578613 5.57588434]
[157.71578979 20.02190018]
[151.95559692 34.73908997]
[137.44261169 40.99600601]
[132.12355042 55.02124786]
[126.80447388 69.04649353]
[121.48539734 83.07173157]
[129.24546814 95.90845490]
[144.13609314 97.71650696]
[159.02673340 99.52455139]
[169.81294250 92.12774658]
[182.32994080 94.11792755]
[189.79679871 103.85396576]
[204.60255432 106.26013947]
[219.40830994 108.66630554]
[234.54156494 102.34833527]
[247.41381836 112.50889587]
[244.78321838 128.69567871]
[229.35588074 134.25711060]
[217.00215149 123.47206116]
[202.19639587 121.06589508]
[187.39064026 118.65972137]
[171.50376892 125.82773590]
[157.21867371 114.41518402]
[142.32804871 112.60713959]
[127.43741608 110.79908752]
[108.83031464 120.72743988]
[94.07382202 114.40229797]
[85.06269073 126.39393616]
[76.05155945 138.38557434]
[67.04042053 150.37722778]
[58.02928925 162.36886597]
[49.01815414 174.36050415]
[40.00701904 186.35214233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[24 36]
[25 35]
[26 34]
[27 33]
[37 50]
[38 49]
[39 48]
[40 47]
[51 69]
[52 68]
[53 67]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
