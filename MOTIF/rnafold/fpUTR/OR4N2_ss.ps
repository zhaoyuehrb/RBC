%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAGGUACUAGCUCUUCUUUAUGCAUCUGGUAGAACUCAGCUGUGAAUUCCUGUGAUCCUGGGCUUUUUCUGGCCAGGGAA\
) } def
/len { sequence length } bind def

/coor [
[166.51240540 144.78736877]
[153.34118652 137.60969543]
[140.16996765 130.43202209]
[126.99874115 123.25435638]
[113.82752228 116.07668304]
[102.04195404 121.10664368]
[89.51072693 118.42919922]
[80.80982208 109.02204132]
[79.11650848 96.32035065]
[66.21951294 88.66088104]
[53.32251358 81.00141144]
[44.10742569 79.23869324]
[40.09792328 72.81309509]
[27.49276161 64.68229675]
[14.88760090 56.55149460]
[2.28243995 48.42069244]
[-11.37094116 55.31507111]
[-26.54189301 54.45539856]
[-39.16173553 46.17252350]
[-45.89618301 32.77464676]
[-45.02608109 17.90493011]
[-57.63124084 9.77412891]
[-70.23640442 1.64332855]
[-82.84156036 -6.48747206]
[-95.44672394 -14.61827183]
[-110.33243561 -9.82769489]
[-124.79529572 -15.77409554]
[-132.00639343 -29.64976501]
[-128.56085205 -44.90303802]
[-116.08556366 -54.33178329]
[-100.47097778 -53.48403549]
[-89.08982086 -42.76007843]
[-87.31592560 -27.22343254]
[-74.71076202 -19.09263229]
[-62.10560226 -10.96183300]
[-49.50044250 -2.83103228]
[-36.89527893 5.29976797]
[-23.70742416 -1.62453830]
[-8.72465897 -1.01400101]
[4.02509642 7.06746578]
[11.06411648 20.53405380]
[10.41324043 35.81553268]
[23.01840210 43.94633484]
[35.62356186 52.07713318]
[48.22872162 60.20793533]
[60.98197937 68.10441589]
[73.87897491 75.76388550]
[86.77597809 83.42335510]
[102.54911804 78.94858551]
[116.79834747 87.05876160]
[121.00519562 102.90546417]
[134.17642212 110.08313751]
[147.34764099 117.26081085]
[160.51885986 124.43848419]
[173.69007874 131.61614990]
[184.48974609 125.99546814]
[196.53637695 126.39837646]
[206.72888184 132.60189819]
[212.50210571 142.90521240]
[212.47193909 154.59426880]
[225.07708740 162.72506714]
[237.68225098 170.85586548]
[250.28741455 178.98666382]
[266.07833862 179.96510315]
[272.57958984 193.36595154]
[285.18475342 201.49674988]
[297.78991699 209.62756348]
[310.39508057 217.75836182]
[325.78900146 214.18028259]
[339.15988159 222.60615540]
[342.57498169 238.03706360]
[334.00820923 251.31809998]
[318.54208374 254.56987000]
[305.35235596 245.86317444]
[302.26428223 230.36351013]
[289.65911865 222.23271179]
[277.05395508 214.10191345]
[264.44879150 205.97111511]
[249.55947876 205.57424927]
[242.15661621 191.59182739]
[229.55145264 183.46102905]
[216.94628906 175.33023071]
[204.34112549 167.19943237]
[186.92878723 172.23774719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[9 48]
[10 47]
[11 46]
[13 45]
[14 44]
[15 43]
[16 42]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[60 83]
[61 82]
[62 81]
[63 80]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
