%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGGUUCCUCCCCACUCUGUCUUUCUCACCUCUCCUUCACUUUUCCUAGCCUCCUCACCACCAUCUGAUCUAUCUUGUUCUCUUCACAAAAGGCUCUGAAGACAUC\
) } def
/len { sequence length } bind def

/coor [
[-102.38869476 295.28076172]
[-123.68452454 299.87008667]
[-145.42546082 298.66162109]
[-166.06210327 291.74688721]
[-173.87191772 304.55340576]
[-181.68173218 317.35992432]
[-177.71597290 332.65856934]
[-185.80142212 346.23800659]
[-201.14114380 350.04180908]
[-214.63432312 341.81323242]
[-218.27572632 326.43414307]
[-209.90495300 313.02871704]
[-194.48825073 309.55010986]
[-186.67843628 296.74359131]
[-178.86862183 283.93710327]
[-186.66004944 277.35894775]
[-193.57019043 269.85830688]
[-199.49058533 261.55230713]
[-204.32827759 252.57070923]
[-208.00720215 243.05390930]
[-210.46942139 233.15075684]
[-211.67601013 223.01612854]
[-211.60772705 212.80860901]
[-210.26524353 202.68798828]
[-207.66917419 192.81269836]
[-203.85980225 183.33741760]
[-198.89639282 174.41059875]
[-192.85630798 166.17213440]
[-185.83374023 158.75120544]
[-177.93835449 152.26422119]
[-169.29347229 146.81303406]
[-160.03421021 142.48326111]
[-150.30531311 139.34304810]
[-140.25895691 137.44189453]
[-130.05229187 136.80992126]
[-119.84506989 137.45742798]
[-109.79705811 139.37464905]
[-100.06561279 142.53196716]
[-90.80316162 146.88031006]
[-82.15483856 152.35198975]
[-74.25621796 158.86166382]
[-67.23116302 166.30776978]
[-61.18992233 174.57398987]
[-47.85438919 167.70642090]
[-34.51885605 160.83883667]
[-21.18332481 153.97126770]
[-7.84779358 147.10369873]
[-3.56512141 132.88418579]
[9.86117268 125.72952271]
[24.74686050 130.31799316]
[38.08239365 123.45041656]
[51.41792297 116.58284760]
[64.75345612 109.71527100]
[78.08898926 102.84769440]
[76.88623810 87.08349609]
[87.34948730 71.85141754]
[107.56942749 65.57917786]
[115.00694275 52.55291748]
[122.44445801 39.52666092]
[115.94255066 25.43748474]
[118.99682617 10.22396946]
[130.43284607 -0.26397687]
[145.85324097 -1.99352539]
[159.32853699 5.70037079]
[165.67721558 19.85925102]
[162.45808411 35.03873825]
[150.90895081 45.40200806]
[135.47071838 46.96417236]
[128.03320312 59.99043274]
[120.59568787 73.01669312]
[123.93303680 79.73324585]
[132.22920227 67.23629761]
[147.19995117 68.17262268]
[153.87434387 81.60588074]
[145.57791138 94.10264587]
[130.60772705 93.16635895]
[133.94506836 99.88291168]
[148.81907654 101.82294464]
[163.69309998 103.76297760]
[178.56710815 105.70301056]
[189.96047974 94.99203491]
[205.57603455 94.16208649]
[218.04055786 103.60504150]
[221.46870422 118.86223602]
[214.24180603 132.72967529]
[199.77217102 138.65959167]
[184.89193726 133.85203552]
[176.62707520 120.57702637]
[161.75306702 118.63699341]
[146.87904358 116.69696045]
[132.00503540 114.75692749]
[105.55306244 128.12635803]
[84.95656586 116.18322754]
[71.62103271 123.05080414]
[58.28549957 129.91838074]
[44.94996643 136.78594971]
[31.61443520 143.65351868]
[26.70463562 158.43634033]
[13.08267879 165.21107483]
[-0.98021877 160.43922424]
[-14.31575108 167.30679321]
[-27.65128326 174.17437744]
[-40.98681641 181.04194641]
[-54.32234573 187.90953064]
[-48.95634079 209.08625793]
[-49.38465500 230.91786194]
[-55.57135391 251.84823608]
[-67.07025909 270.38699341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[57 70]
[58 69]
[59 68]
[77 91]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
