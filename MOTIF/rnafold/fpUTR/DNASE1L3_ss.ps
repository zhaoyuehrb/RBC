%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUAUAAGUCAGUGGAGCCUGCGGAAGUGGCCAGAAUCCAGCACUCCAAGCACUGCUGUCUUCUCACAGAGUCUUGAAGCCAGAGCAGCGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[83.59474182 132.60060120]
[74.24239349 144.32807922]
[64.89005280 156.05555725]
[55.53770065 167.78302002]
[46.18535614 179.51049805]
[36.83300781 191.23796082]
[27.48066139 202.96543884]
[29.49901390 218.64031982]
[19.77639008 231.10009766]
[4.08104944 232.95262146]
[-8.27524090 223.09880066]
[-9.96171284 207.38475037]
[0.02218713 195.13333130]
[15.75318909 193.61309814]
[25.10553551 181.88562012]
[34.45788193 170.15814209]
[43.81023026 158.43067932]
[53.16257858 146.70320129]
[62.51492310 134.97573853]
[71.86727142 123.24826050]
[66.88178253 115.33348846]
[64.07193756 106.41140747]
[63.62231064 97.06813812]
[65.56245422 87.91748047]
[69.76490021 79.56055450]
[59.32966232 68.78531647]
[48.89442444 58.01007843]
[40.51187134 53.92044449]
[38.30430222 46.71824265]
[28.21978760 35.61407089]
[18.13527489 24.50990105]
[3.51775599 28.90204430]
[-11.55650806 26.50844383]
[-24.09451103 17.80435181]
[-31.60682487 4.51797247]
[-32.60187531 -10.71267509]
[-26.88208961 -24.86353493]
[-15.58313942 -35.12494278]
[-0.94843864 -39.45948792]
[14.11628246 -37.00654602]
[26.61991310 -28.25314522]
[34.07984543 -14.93728542]
[35.01491165 0.29716265]
[29.23944473 14.42538834]
[39.32395935 25.52955818]
[49.40847015 36.63372803]
[59.66966629 47.57483673]
[70.10490417 58.35007858]
[80.54013824 69.12532043]
[102.12675476 63.56637573]
[122.91996765 71.59917450]
[135.16278076 90.22703552]
[150.13195801 89.26598358]
[163.40805054 80.66040039]
[176.60490417 87.56636047]
[191.57408142 86.60530853]
[206.54325867 85.64425659]
[221.51245117 84.68320465]
[236.48162842 83.72214508]
[248.25122070 69.06735229]
[266.66635132 67.49987793]
[280.27270508 79.53838348]
[295.14953613 77.62022400]
[310.02639771 75.70207214]
[324.90325928 73.78391266]
[329.66384888 59.28221130]
[340.25125122 48.28813553]
[354.56332397 42.98456955]
[369.75836182 44.42453766]
[382.81939697 52.32213211]
[391.15316772 65.10928345]
[393.10494995 80.24709320]
[388.28726196 94.72993469]
[377.65664673 105.68222809]
[363.32382202 110.92939758]
[348.13458252 109.42960358]
[335.10473633 101.48062897]
[326.82141113 88.66075897]
[311.94454956 90.57891846]
[297.06771851 92.49707794]
[282.19085693 94.41523743]
[277.22460938 104.92836761]
[267.65133667 111.73809052]
[255.85008240 113.00681305]
[244.82545471 108.29241180]
[237.44267273 98.69132996]
[222.47349548 99.65238190]
[207.50431824 100.61343384]
[192.53514099 101.57448578]
[177.56594849 102.53554535]
[165.36056519 111.07238770]
[151.09301758 104.23516083]
[136.12384033 105.19621277]
[132.72537231 116.15494537]
[126.09244537 125.51698303]
[116.88063049 132.35700989]
[106.00040436 135.99899292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[25 49]
[26 48]
[27 47]
[29 46]
[30 45]
[31 44]
[52 93]
[53 92]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[62 81]
[63 80]
[64 79]
[65 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
