%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGCGCCAAAAUCAAACGCGUCCUGGCCUGUCCCGCCCCUCUCCCCAAGCGCGGGCCCGGCCAGCGGAAGCCCCUGCGCCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[117.99584961 152.58522034]
[101.07463837 155.56887817]
[84.05072784 153.24168396]
[68.55113220 145.82601929]
[56.05718994 134.03065491]
[43.06680679 141.53065491]
[30.07642746 149.03065491]
[17.08604622 156.53065491]
[4.09566450 164.03065491]
[4.77567959 179.32104492]
[-1.73849344 193.17109680]
[-13.94994545 202.39817810]
[-29.05257416 204.88197327]
[-43.57590485 200.05171204]
[-54.18258286 189.01734924]
[-58.43527603 174.31452942]
[-55.35673904 159.32182312]
[-45.65439987 147.48445129]
[-31.55778694 141.52256775]
[-16.30619812 142.80615234]
[-3.40433550 151.04026794]
[9.58604527 143.54026794]
[22.57642746 136.04026794]
[35.56680679 128.54026794]
[48.55718994 121.04026794]
[44.45740128 102.01876831]
[47.16547394 82.74982452]
[56.34947968 65.59523773]
[45.92960358 54.80514145]
[35.50972748 44.01504135]
[19.92390251 45.28628159]
[7.19729996 36.19961166]
[3.33903241 21.04547691]
[10.17085648 6.97919893]
[24.46699333 0.64244264]
[39.47724533 5.02723122]
[48.11422729 18.06320190]
[46.29982376 33.59516907]
[56.71969986 44.38526535]
[67.13957977 55.17536163]
[76.03988647 49.85053635]
[85.77455902 46.27205276]
[96.00459290 44.56452179]
[106.37376404 44.78740311]
[116.52098083 46.93293762]
[126.09288788 50.92641449]
[134.75617981 56.62876511]
[142.20915222 63.84141922]
[148.19229126 72.31321716]
[152.49725342 81.74913788]
[154.97412109 91.82061005]
[155.53662109 102.17690277]
[170.30874634 104.78163147]
[185.08085632 107.38635254]
[199.85298157 109.99107361]
[214.62509155 112.59579468]
[229.39720154 115.20051575]
[244.16932678 117.80524445]
[258.94143677 120.40996552]
[273.87551880 115.18658447]
[285.06585693 125.01640320]
[299.83798218 127.62113190]
[314.61010742 130.22584534]
[324.79519653 121.21417999]
[338.12451172 119.80556488]
[349.62692261 126.29680634]
[355.14474487 138.08061218]
[369.81695557 141.19929504]
[385.23776245 135.61982727]
[397.60409546 146.39042664]
[394.19451904 162.43121338]
[378.51654053 167.24079895]
[366.69827271 155.87150574]
[352.02606201 152.75282288]
[338.44445801 162.50173950]
[321.66561890 159.45550537]
[312.00537109 144.99797058]
[297.23327637 142.39324951]
[282.46115112 139.78852844]
[268.58367920 145.19821167]
[256.33673096 135.18208313]
[241.56460571 132.57736206]
[226.79248047 129.97264099]
[212.02037048 127.36791229]
[197.24824524 124.76319122]
[182.47613525 122.15847015]
[167.70402527 119.55374146]
[152.93190002 116.94902039]
[145.22569275 132.30622864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[28 40]
[29 39]
[30 38]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[61 79]
[62 78]
[63 77]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
