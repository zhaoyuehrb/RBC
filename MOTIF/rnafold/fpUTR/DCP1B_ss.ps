%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGGUCGCCGUGGGUUCUCGGUUGCGAGGCAGCUCGCUCGUUCUGCGAUCUAUUGAGAGUGGCUUCCAAGAGCCCCGUGCCUAUGUCUGGGAGGGAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[290.88183594 308.22042847]
[285.24932861 296.14453125]
[284.10440063 282.83657837]
[287.60839844 269.91387939]
[275.60638428 260.91656494]
[263.60440063 251.91923523]
[248.94224548 254.27658081]
[236.64233398 245.32298279]
[234.26913452 229.92799377]
[222.26713562 220.93066406]
[210.26513672 211.93333435]
[198.26313782 202.93601990]
[195.32620239 203.31477356]
[192.05323792 202.45416260]
[188.95483398 200.21626282]
[186.58259583 196.66554260]
[185.45207214 192.07693481]
[174.61015320 181.71099854]
[163.76823425 171.34506226]
[152.92631531 160.97912598]
[142.08438110 150.61317444]
[131.24246216 140.24723816]
[120.40053558 129.88130188]
[109.55861664 119.51535797]
[86.51580811 122.38996124]
[69.47176361 100.95304871]
[55.50865936 95.47293091]
[41.54555511 89.99282074]
[27.58244705 84.51270294]
[13.61934090 79.03258514]
[-2.50716805 82.01045990]
[-12.94202518 69.35954285]
[-6.95074368 54.09400558]
[9.30335903 51.91772842]
[19.09945679 65.06948090]
[33.06256104 70.54959869]
[47.02566910 76.02970886]
[60.98877335 81.50982666]
[74.95188141 86.98994446]
[85.15447235 75.99416351]
[78.64621735 62.47962952]
[72.13796234 48.96509933]
[65.62970734 35.45056534]
[53.30979919 23.80340767]
[61.09128952 8.74071503]
[77.71945953 12.04833508]
[79.14423370 28.94230843]
[85.65249634 42.45684052]
[92.16075134 55.97137451]
[98.66900635 69.48590851]
[112.64870453 74.63932037]
[121.54347229 85.20093536]
[123.82424927 97.71384430]
[119.92455292 108.67343903]
[130.76647949 119.03937531]
[141.60839844 129.40531921]
[152.45031738 139.77125549]
[163.29225159 150.13719177]
[174.13417053 160.50314331]
[184.97608948 170.86907959]
[195.81802368 181.23501587]
[207.26046753 190.93400574]
[219.26246643 199.93133545]
[231.26446533 208.92866516]
[243.26646423 217.92599487]
[258.70925903 215.88679504]
[270.75280762 225.18232727]
[272.60171509 239.91723633]
[284.60372925 248.91455078]
[296.60571289 257.91189575]
[311.54733276 249.74333191]
[328.49774170 248.84791565]
[344.11590576 255.35476685]
[355.34381104 267.93862915]
[360.00531006 284.08947754]
[357.22769165 300.61306763]
[369.74630737 308.87652588]
[382.26489258 317.13998413]
[398.88592529 310.24667358]
[416.19790649 314.54943848]
[427.46014404 328.18286133]
[428.40072632 345.68609619]
[441.39108276 353.18609619]
[454.38146973 360.68609619]
[467.37185669 368.18609619]
[483.76208496 367.64498901]
[492.19485474 381.70986938]
[483.99530029 395.91192627]
[467.59838867 395.64135742]
[459.87185669 381.17645264]
[446.88146973 373.67645264]
[433.89108276 366.17645264]
[420.90072632 358.67645264]
[410.49697876 365.28192139]
[398.19168091 366.78125000]
[386.36813354 362.82104492]
[377.34359741 354.11138916]
[372.91500854 342.29953003]
[374.00143433 329.65859985]
[361.48284912 321.39514160]
[348.96426392 313.13168335]
[338.24029541 320.76596069]
[325.51553345 324.26104736]
[312.33233643 323.17028809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[9 65]
[10 64]
[11 63]
[12 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 50]
[41 49]
[42 48]
[43 47]
[76 101]
[77 100]
[78 99]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
