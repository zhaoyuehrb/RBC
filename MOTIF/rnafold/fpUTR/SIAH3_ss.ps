%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCUGCGCUCCUUCCAGGGCCCAAGGACUCACAGCUUCCUCCGCUGCCUUCCCGGACCAACAACCCCCCAAAAGUUGUG\
) } def
/len { sequence length } bind def

/coor [
[79.15817261 117.48213959]
[73.46779633 106.00409698]
[58.49196625 105.15291595]
[43.51613617 104.30174255]
[28.54030418 103.45056152]
[13.56447411 102.59938049]
[-1.41135645 101.74819946]
[-16.38718605 100.89702606]
[-26.79541779 114.07627869]
[-42.82494736 118.50088501]
[-58.21235657 112.64395142]
[-67.06407166 98.95707703]
[-82.06138611 98.67321014]
[-97.05870056 98.38935089]
[-112.05601501 98.10549164]
[-127.05332947 97.82162476]
[-135.55247498 110.69672394]
[-149.67242432 116.91204834]
[-164.90757751 114.48432159]
[-176.39642334 104.18821716]
[-180.47294617 89.30918121]
[-175.83630371 74.59506989]
[-163.96606445 64.74109650]
[-148.64996338 62.89162445]
[-134.77531433 69.63681793]
[-126.76946259 82.82431793]
[-111.77214813 83.10817719]
[-96.77484131 83.39203644]
[-81.77752686 83.67590332]
[-66.78021240 83.95976257]
[-59.65559006 72.50621033]
[-47.67560959 66.07357788]
[-33.97447205 66.46813202]
[-22.19856262 73.69355774]
[-15.53600788 85.92119598]
[-0.56017739 86.77236938]
[14.41565323 87.62355042]
[29.39148331 88.47473145]
[44.36731339 89.32591248]
[59.34314346 90.17708588]
[74.31897736 91.02826691]
[89.47104645 74.91717529]
[111.58286285 75.38609314]
[121.46415710 64.10070038]
[131.34544373 52.81531143]
[141.22673035 41.52991867]
[136.85809326 26.73402405]
[141.20414734 11.93147755]
[152.87808228 1.84571838]
[168.15481567 -0.30492556]
[182.15956116 6.16580868]
[190.42349243 19.19313240]
[190.30958557 34.62007523]
[181.85420227 47.52395630]
[167.75543213 53.78719330]
[152.51213074 51.41120911]
[142.63084412 62.69660187]
[132.74954224 73.98199463]
[122.86825562 85.26738739]
[125.86841583 91.58380890]
[127.15924072 98.45635223]
[126.65544128 105.43090057]
[124.39030457 112.04658508]
[135.48667908 122.13967133]
[146.58305359 132.23275757]
[157.67942810 142.32585144]
[168.77580261 152.41894531]
[183.65173340 148.33106995]
[198.36936951 152.95646667]
[208.23240662 164.81919861]
[210.09356689 180.13388062]
[203.35896301 194.01367188]
[190.17758179 202.02958679]
[174.75556946 201.62376404]
[162.01400757 192.92570496]
[156.01869202 178.71092224]
[158.68272400 163.51531982]
[147.58634949 153.42222595]
[136.48997498 143.32913208]
[125.39359283 133.23605347]
[114.29721069 123.14295959]
[102.11912537 127.12040710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[43 59]
[44 58]
[45 57]
[46 56]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
