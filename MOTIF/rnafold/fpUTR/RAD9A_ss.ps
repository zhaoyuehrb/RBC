%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGGCAGGGGCGGUGCGCGGGAAGGGACCCCGGACCCGGAGGUCGCGGAGAGCUGGGCAGUGUUGGCCGCUGGCGGAGCGCUGGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[148.31069946 296.39889526]
[143.06628418 283.76406860]
[144.81556702 270.08657837]
[153.20243835 259.00460815]
[147.81132507 245.00689697]
[142.42021179 231.00918579]
[130.62564087 221.91319275]
[132.88604736 206.25428772]
[127.49492645 192.25657654]
[122.10381317 178.25886536]
[110.30922699 169.16287231]
[112.56964111 153.50398254]
[107.17852020 139.50627136]
[101.78740692 125.50856018]
[82.86698914 118.98265839]
[74.44230652 100.82792664]
[81.67433167 82.16600800]
[74.46560669 69.01175690]
[67.25688171 55.85750961]
[53.83954620 47.47385406]
[54.50827789 32.59426880]
[47.29954910 19.44002151]
[40.09082413 6.28577185]
[22.44206619 7.80126429]
[5.90150690 1.60794389]
[-6.33985758 -11.05198097]
[-11.94081497 -27.69339752]
[-9.85762501 -45.07602692]
[-0.53820586 -59.83533859]
[-9.02741241 -72.20195770]
[-17.51661873 -84.56858826]
[-26.00582504 -96.93521118]
[-34.70048904 -109.15824890]
[-43.59818649 -121.23429871]
[-52.49588394 -133.31034851]
[-67.73008728 -139.38085938]
[-69.82189941 -155.64604187]
[-56.61943436 -165.37368774]
[-41.70426178 -158.55682373]
[-40.41983032 -142.20805359]
[-31.52213478 -130.13200378]
[-22.62443924 -118.05594635]
[-15.98875237 -114.46645355]
[-13.63920212 -105.42441559]
[-5.14999533 -93.05779266]
[3.33921123 -80.69116974]
[11.82841778 -68.32454681]
[23.96971512 -71.52857208]
[36.52864456 -70.77132416]
[48.24308395 -66.11336517]
[57.93091583 -58.00803375]
[64.60931396 -47.25738907]
[67.59443665 -34.93283463]
[66.57144928 -22.26837730]
[61.62760162 -10.53704834]
[53.24507141 -0.92295432]
[60.45380020 12.23129463]
[67.66252136 25.38554382]
[80.56424713 32.82831955]
[80.41113281 48.64878464]
[87.61985779 61.80303192]
[94.82858276 74.95728302]
[104.55798340 74.83840179]
[113.62742615 78.36266327]
[120.72376251 85.01978302]
[124.81951141 93.84589386]
[125.32164764 103.56304932]
[122.15747070 112.76432037]
[115.78511810 120.11743927]
[121.17623138 134.11514282]
[126.56735229 148.11285400]
[138.74754333 158.21006775]
[136.10151672 172.86775208]
[141.49263000 186.86546326]
[146.88375854 200.86317444]
[159.06393433 210.96038818]
[156.41792297 225.61807251]
[161.80903625 239.61578369]
[167.20014954 253.61349487]
[183.51652527 257.68652344]
[194.14289856 270.50741577]
[195.09837341 286.96697998]
[186.20648193 300.65469360]
[192.06231689 314.46444702]
[197.91815186 328.27420044]
[203.77400208 342.08395386]
[215.52398682 354.30581665]
[207.03247070 368.97994995]
[190.58111572 364.88250732]
[189.96424866 347.93978882]
[184.10841370 334.13003540]
[178.25256348 320.32028198]
[172.39672852 306.51052856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[12 71]
[13 70]
[14 69]
[17 62]
[18 61]
[19 60]
[21 58]
[22 57]
[23 56]
[29 47]
[30 46]
[31 45]
[32 44]
[33 42]
[34 41]
[35 40]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
