%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGGGCGGAGCCCUUUCUGAGUCAGUCUGUCGGCCGACUUCCUGCUUGGGGCCUGGGCAGCCACACUGCACGCAGGCUGGGCCGACUGAGGGGCUCAGAGGCCAGGCUCUGAGGCCCACGCAGGGCCUAGGGUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[119.12037659 151.48675537]
[107.98229218 141.43971252]
[110.08239746 126.58727264]
[109.22003937 111.61207581]
[101.94104767 113.41933441]
[95.51834106 126.97473907]
[89.09564209 140.53013611]
[82.67294312 154.08554077]
[81.35498047 170.98818970]
[64.74805450 174.40084839]
[56.87150574 159.38764954]
[69.11754608 147.66284180]
[75.54024506 134.10743713]
[81.96294403 120.55204010]
[88.38564301 106.99663544]
[87.88794708 92.00489807]
[80.58035278 78.90531158]
[73.27275848 65.80572510]
[65.96516418 52.70614624]
[58.65757370 39.60655975]
[51.34998322 26.50697708]
[44.04238892 13.40739441]
[36.73479843 0.30781072]
[29.42720413 -12.79177284]
[22.11961174 -25.89135551]
[7.18158150 -30.30644608]
[-0.04274793 -43.69538498]
[4.25842333 -57.90930557]
[-3.04916954 -71.00888824]
[-16.52926636 -79.29125214]
[-15.97262001 -94.17545319]
[-23.28021240 -107.27503967]
[-30.58780479 -120.37461853]
[-37.89539719 -133.47419739]
[-45.20299149 -146.57379150]
[-52.51058197 -159.67337036]
[-59.81817627 -172.77294922]
[-72.40811157 -172.62211609]
[-83.78833771 -177.83744812]
[-91.80027008 -187.36155701]
[-94.95344543 -199.32644653]
[-92.70252991 -211.41966248]
[-85.54049683 -221.33126831]
[-92.26149750 -234.74127197]
[-98.98249817 -248.15127563]
[-105.70350647 -261.56127930]
[-112.42450714 -274.97128296]
[-125.52505493 -283.84179688]
[-124.31056976 -298.68682861]
[-131.03157043 -312.09680176]
[-144.13212585 -320.96734619]
[-142.91763306 -335.81234741]
[-149.63864136 -349.22235107]
[-164.36676025 -354.29388428]
[-170.99177551 -367.98928833]
[-166.06608582 -381.99902344]
[-172.78709412 -395.40902710]
[-179.50808716 -408.81903076]
[-193.49223328 -417.38497925]
[-192.79553223 -433.76934814]
[-178.13468933 -441.11724854]
[-164.59153748 -431.86984253]
[-166.09808350 -415.54003906]
[-159.37709045 -402.13003540]
[-152.65608215 -388.72003174]
[-138.48437500 -384.28176880]
[-131.47729492 -370.77786255]
[-136.22863770 -355.94335938]
[-129.50764465 -342.53335571]
[-116.88782501 -334.62200928]
[-117.62157440 -318.81781006]
[-110.90057373 -305.40780640]
[-98.28075409 -297.49645996]
[-99.01450348 -281.69229126]
[-92.29350281 -268.28228760]
[-85.57250214 -254.87228394]
[-78.85150146 -241.46228027]
[-72.13049316 -228.05227661]
[-54.64953995 -226.03260803]
[-41.72575378 -213.86047363]
[-38.60910034 -196.22406006]
[-46.71859360 -180.08055115]
[-39.41099930 -166.98095703]
[-32.10340881 -153.88137817]
[-24.79581451 -140.78179932]
[-17.48822212 -127.68221283]
[-10.18062878 -114.58263397]
[-2.87303638 -101.48304749]
[10.08437252 -94.13764954]
[10.05041409 -78.31648254]
[17.35800743 -65.21689606]
[31.71216583 -61.40983963]
[39.30971146 -48.22909927]
[35.21919632 -33.19894791]
[42.52678680 -20.09936523]
[49.83438110 -6.99978209]
[57.14197159 6.09980154]
[64.44956207 19.19938469]
[71.75715637 32.29896927]
[79.06475067 45.39855194]
[86.37234497 58.49813461]
[93.67993927 71.59771729]
[100.98752594 84.69730377]
[140.03411865 94.17315674]
[152.05126953 103.15023804]
[164.95709229 102.08391571]
[174.79428101 109.87364197]
[176.59439087 121.88553619]
[188.41000366 131.12626648]
[200.22563171 140.36700439]
[212.04124451 149.60774231]
[223.85685730 158.84846497]
[232.61900330 161.70309448]
[235.82867432 168.42665100]
[247.43696594 177.92651367]
[259.04528809 187.42636108]
[270.65356445 196.92622375]
[282.26187134 206.42608643]
[293.87017822 215.92593384]
[309.91247559 215.76853943]
[319.92556763 228.30319214]
[316.22827148 243.91439819]
[301.65682983 250.62655640]
[287.38922119 243.29069519]
[284.37033081 227.53424072]
[272.76202393 218.03437805]
[261.15371704 208.53453064]
[249.54541016 199.03466797]
[237.93711853 189.53480530]
[226.32881165 180.03495789]
[214.61613464 170.66409302]
[202.80050659 161.42335510]
[190.98489380 152.18261719]
[179.16926575 142.94189453]
[167.35365295 133.70115662]
[149.90029907 132.23014832]
[143.07418823 115.16738892]
[131.05703735 106.19030762]
[123.77803802 107.99756622]
[130.02023315 121.63702393]
[138.82342529 133.78215027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[8 12]
[16 103]
[17 102]
[18 101]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[28 91]
[29 90]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[49 72]
[50 71]
[52 69]
[53 68]
[56 65]
[57 64]
[58 63]
[104 138]
[105 137]
[108 135]
[109 134]
[110 133]
[111 132]
[112 131]
[114 130]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
