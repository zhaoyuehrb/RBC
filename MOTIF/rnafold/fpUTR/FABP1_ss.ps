%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACCUCUGGCCGCUAUUCGAAGGGAAGGGAGCCCCCUAUAAAACAGCCUACAGUGGACAGUCUGGUCGGCAGAGCCGCAGGUCAGUCGUGAAGAGGGAGCUCUAUUGCCACC\
) } def
/len { sequence length } bind def

/coor [
[234.40423584 259.06344604]
[224.31663513 247.96206665]
[214.22901917 236.86071777]
[204.14141846 225.75935364]
[194.05380249 214.65800476]
[183.96620178 203.55664062]
[173.87858582 192.45527649]
[159.59309387 188.23933411]
[156.03868103 172.82257080]
[145.95108032 161.72120667]
[135.86347961 150.61985779]
[125.77586365 139.51849365]
[114.12827301 145.85522461]
[100.96583557 148.77357483]
[87.28758240 147.92657471]
[74.16658783 143.25791931]
[62.66582489 135.01577759]
[53.75216675 123.74234009]
[39.61825562 128.76553345]
[25.48434067 133.78872681]
[15.26578140 146.61499023]
[-0.90896249 143.91134644]
[-6.40070248 128.45907593]
[4.43999290 116.15414429]
[20.46114540 119.65481567]
[34.59505844 114.63162231]
[48.72897339 109.60842896]
[48.11448669 94.62101746]
[33.61679840 90.77172852]
[19.11911011 86.92243195]
[4.62142229 83.07314301]
[-11.05938244 87.87360382]
[-22.87100983 76.49742126]
[-18.66267014 60.64743805]
[-2.76354194 56.62876129]
[8.47071362 68.57545471]
[22.96840096 72.42474365]
[37.46609116 76.27404022]
[51.96377563 80.12332916]
[55.36692429 74.40253448]
[59.43667221 69.22161865]
[64.09141541 64.65617371]
[69.24127960 60.76985168]
[74.78981781 57.61354828]
[80.63581085 55.22475052]
[86.67504883 53.62715149]
[92.80221558 52.83053970]
[98.91273499 52.83089447]
[100.95523071 37.97060776]
[102.99773407 23.11031723]
[92.18467712 9.44214535]
[94.48938751 -7.49397945]
[108.01927185 -17.37907410]
[109.65510559 -32.28960800]
[111.29093933 -47.20014572]
[99.71676636 -57.53543091]
[96.46089935 -72.70708466]
[102.77529144 -86.88128662]
[116.23192596 -94.60777283]
[131.65644836 -92.91555023]
[143.11782837 -82.45531464]
[146.20890808 -67.24923706]
[139.74113464 -53.14436722]
[126.20146942 -45.56431198]
[124.56563568 -30.65377808]
[122.92980957 -15.74324322]
[132.36434937 -6.85214901]
[134.95234680 6.05016136]
[129.51751709 18.24899101]
[117.85801697 25.15281677]
[115.81552124 40.01310730]
[113.77301788 54.87339401]
[133.29112244 66.56636047]
[145.06735229 86.03433228]
[146.36317444 108.75001526]
[136.87722778 129.43089294]
[146.96482849 140.53224182]
[157.05244446 151.63360596]
[167.14004517 162.73495483]
[182.14706421 167.74494934]
[184.97994995 182.36767578]
[195.06755066 193.46902466]
[205.15516663 204.57038879]
[215.24276733 215.67175293]
[225.33038330 226.77310181]
[235.41798401 237.87446594]
[245.50559998 248.97583008]
[265.46618652 248.72395325]
[279.12826538 262.86495972]
[278.21710205 282.20660400]
[289.17965698 292.44491577]
[300.14218140 302.68322754]
[311.10473633 312.92150879]
[322.20608521 323.00912476]
[333.44418335 332.94415283]
[344.68228149 342.87918091]
[355.92041016 352.81423950]
[372.09048462 355.54556274]
[377.55578613 371.00720215]
[366.69403076 383.29357910]
[350.67889404 379.76547241]
[345.98535156 364.05233765]
[334.74725342 354.11730957]
[323.50915527 344.18225098]
[312.27105713 334.24722290]
[305.07815552 332.14617920]
[300.86642456 323.88406372]
[289.90390015 313.64575195]
[278.94134521 303.40744019]
[267.97882080 293.16915894]
[257.96582031 296.32269287]
[247.47550964 294.95303345]
[238.47015381 289.24710083]
[232.66337585 280.20941162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[9 79]
[10 78]
[11 77]
[12 76]
[18 27]
[19 26]
[20 25]
[28 39]
[29 38]
[30 37]
[31 36]
[48 72]
[49 71]
[50 70]
[53 66]
[54 65]
[55 64]
[90 110]
[91 109]
[92 108]
[93 107]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
