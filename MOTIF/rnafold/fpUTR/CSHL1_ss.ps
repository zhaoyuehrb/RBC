%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACAGGUGGGGGCAACAGCGAGAGAGAAGGGGCCAGGGUAUAAAAAGGGCCCACAAGAGACCAGCUCCAGCAUCCCAAGGCCCGACUCCCCGCACCACUCAGGGUCCUGUGGACAGCUCACCUAGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[81.53463745 285.61190796]
[73.31951141 272.78881836]
[71.03665924 257.73196411]
[75.08159637 243.05007935]
[84.75351715 231.28683472]
[98.37670135 224.48030090]
[97.66833496 209.49703979]
[96.95996857 194.51377869]
[96.25160217 179.53051758]
[95.54323578 164.54725647]
[94.83486938 149.56398010]
[94.12650299 134.58071899]
[84.43345642 131.43257141]
[76.05456543 125.63085175]
[69.69718933 117.66532135]
[65.89801788 108.20846558]
[64.97779083 98.05863190]
[67.01419067 88.07269287]
[71.83530426 79.09368134]
[79.03412628 71.87960815]
[72.84688568 58.21512604]
[66.65964508 44.55064774]
[53.53970718 41.26102448]
[44.86000443 31.14296341]
[43.64115143 18.06392670]
[50.10687637 6.85447931]
[44.24409866 -6.95232439]
[38.38131714 -20.75912857]
[25.34274101 -24.35771179]
[16.90443420 -34.67795181]
[15.99483109 -47.78212738]
[22.72350693 -58.83573532]
[17.18846321 -72.77716064]
[11.65342045 -86.71858215]
[6.11837721 -100.66001129]
[0.58333403 -114.60143280]
[-14.10892105 -125.62825775]
[-11.00001240 -142.85824585]
[-16.86279106 -156.66503906]
[-22.72557068 -170.47184753]
[-36.23880005 -169.60548401]
[-49.33262634 -172.96554565]
[-60.72027206 -180.20719910]
[-69.28717041 -190.60482788]
[-74.20007324 -203.12480164]
[-74.98805237 -216.52815247]
[-71.58763885 -229.49324036]
[-64.34764099 -240.74604797]
[-53.99346161 -249.18536377]
[-59.19768143 -263.25363159]
[-64.40190125 -277.32189941]
[-69.60611725 -291.39016724]
[-84.80596924 -292.33059692]
[-98.30620575 -299.37783813]
[-107.76783752 -311.31088257]
[-111.55157471 -326.06225586]
[-109.00186157 -341.07620239]
[-100.56045532 -353.75146484]
[-87.68987274 -361.89199829]
[-72.62002563 -364.08737183]
[-57.96186066 -359.95724487]
[-46.25498581 -350.21716309]
[-39.52769089 -336.55468750]
[-38.94551849 -321.33691406]
[-44.60933685 -307.20037842]
[-55.53785324 -296.59439087]
[-50.33363342 -282.52612305]
[-45.12941360 -268.45785522]
[-39.92519379 -254.38958740]
[-23.35775566 -254.16838074]
[-8.09656525 -247.62344360]
[3.53466797 -235.72100830]
[9.75338173 -220.24528503]
[9.59131145 -203.53114319]
[3.04514146 -188.11172485]
[-8.91876698 -176.33462524]
[-3.05598783 -162.52781677]
[2.80679107 -148.72102356]
[13.94996166 -143.86259460]
[18.91918564 -132.32920837]
[14.52475739 -120.13647461]
[20.05980110 -106.19505310]
[25.59484482 -92.25362396]
[31.12988663 -78.31220245]
[36.66493225 -64.37078094]
[52.34631729 -58.41397095]
[59.04173279 -42.66711807]
[52.18812180 -26.62190628]
[58.05089951 -12.81510258]
[63.91368103 0.99170053]
[79.73138428 6.57647371]
[86.79685211 22.16079330]
[80.32411957 38.36340332]
[86.51136780 52.02788544]
[92.69860840 65.69236755]
[119.90904999 67.32522583]
[139.98419189 89.07895660]
[154.95803833 89.96423340]
[167.85861206 80.42720795]
[183.32052612 84.70608521]
[189.48272705 99.51847076]
[181.61810303 113.50157166]
[165.75971985 115.92875671]
[154.07276917 104.93808746]
[139.09890747 104.05281067]
[134.73405457 118.40370178]
[147.66497803 126.00574493]
[160.59590149 133.60780334]
[173.52682495 141.20983887]
[190.24543762 144.02485657]
[192.16862488 160.86936951]
[176.51478577 167.38041687]
[165.92477417 154.14077759]
[152.99385071 146.53872681]
[140.06292725 138.93667603]
[127.13199615 131.33462524]
[120.99969482 133.24803162]
[114.93173981 134.07202148]
[109.10976410 133.87236023]
[109.81813049 148.85562134]
[110.52649689 163.83888245]
[111.23486328 178.82214355]
[111.94322968 193.80540466]
[112.65159607 208.78868103]
[113.35996246 223.77194214]
[127.56453705 229.26284790]
[138.30310059 240.06114197]
[143.71513367 254.29594421]
[142.86299133 269.50100708]
[135.89427185 283.04193115]
[124.01638031 292.57269287]
[109.28722382 296.44204712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[20 95]
[21 94]
[22 93]
[26 90]
[27 89]
[28 88]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[38 78]
[39 77]
[40 76]
[49 69]
[50 68]
[51 67]
[52 66]
[97 105]
[98 104]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
