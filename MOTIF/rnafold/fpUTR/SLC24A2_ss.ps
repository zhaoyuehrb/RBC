%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAAUGAUGAAAGUUUCCUGUGAAGCAUAACAAUCCCUGAUUGUGAAAGUACCCCACAAGCAUCGUUAACUAUAAAGUAAGGAAAAGUAUGAAAGAACCAUCUGGUUGAGUCUAAAGUUGGAAGAUCACCAUAUCCACCAGAAGACCCAGG\
) } def
/len { sequence length } bind def

/coor [
[309.00247192 162.74191284]
[284.01614380 157.08609009]
[262.31674194 143.43489075]
[246.37962341 123.33158875]
[238.02746582 99.05624390]
[223.05554199 99.97367096]
[208.08363342 100.89109039]
[193.11170959 101.80851746]
[178.13978577 102.72594452]
[163.16787720 103.64337158]
[148.19595337 104.56079102]
[138.71820068 129.06117249]
[117.83973694 145.00437927]
[91.70830536 147.69589233]
[68.01838684 136.34318542]
[56.48412704 145.93281555]
[44.94986725 155.52243042]
[33.41561127 165.11206055]
[21.88135338 174.70169067]
[16.71341324 190.26524353]
[0.59864050 193.30598450]
[-9.88547039 180.69584656]
[-3.95376396 165.40707397]
[12.29172897 163.16741943]
[23.82598686 153.57780457]
[35.36024475 143.98817444]
[46.89450073 134.39855957]
[58.42876053 124.80892944]
[56.14480591 120.50299835]
[54.30541229 115.98922729]
[52.92921829 111.31337738]
[52.03018188 106.52284241]
[37.03330231 106.21686554]
[22.03642464 105.91088867]
[7.03954554 105.60491180]
[-7.95733356 105.29892731]
[-22.95421219 104.99295044]
[-38.91338730 110.71494293]
[-48.82969284 96.96346283]
[-38.36073303 83.62789917]
[-22.64823341 89.99607086]
[-7.65135527 90.30205536]
[7.34552336 90.60803223]
[22.34240341 90.91400909]
[37.33928299 91.21998596]
[52.33615875 91.52596283]
[54.32221603 83.96282196]
[57.50000000 76.81808472]
[61.78660583 70.27816772]
[67.07019043 64.51368713]
[73.21291351 59.67503357]
[80.05450439 55.88845825]
[87.41647339 53.25274658]
[95.10674286 51.83666611]
[102.92467499 51.67715836]
[110.66630554 52.77838516]
[118.12965393 55.11162186]
[125.11999512 58.61598587]
[131.45497131 63.20005417]
[136.96928406 68.74423218]
[141.51907349 75.10386658]
[144.98564148 82.11303711]
[147.27853394 89.58887482]
[162.25044250 88.67144775]
[177.22236633 87.75402832]
[192.19429016 86.83660126]
[207.16619873 85.91917419]
[222.13812256 85.00175476]
[237.11003113 84.08432770]
[237.78981018 76.47255707]
[239.22911072 68.96833801]
[241.41320801 61.64725113]
[244.31991577 54.58301163]
[247.91972351 47.84672165]
[252.17616272 41.50617218]
[257.04620361 35.62513351]
[262.48056030 30.26273727]
[268.42431641 25.47286987]
[274.81747437 21.30363274]
[281.59548950 17.79686356]
[288.68997192 14.98771095]
[296.02929688 12.90428543]
[303.53948975 11.56737804]
[311.14480591 10.99025059]
[318.76861572 11.17850685]
[326.33407593 12.13003731]
[333.76498413 13.83504105]
[340.98651123 16.27612877]
[347.92593384 19.42849922]
[354.51342773 23.26019287]
[360.68267822 27.73241043]
[366.37170410 32.79991150]
[371.52328491 38.41147614]
[376.08566284 44.51040268]
[380.01300049 51.03511047]
[383.26596069 57.91973114]
[385.81195068 65.09480286]
[387.62545776 72.48794556]
[388.68847656 80.02461243]
[388.99044800 87.62881470]
[388.52859497 95.22392273]
[387.30776978 102.73339844]
[385.34045410 110.08161926]
[382.64672852 117.19458008]
[395.73788452 124.51722717]
[408.82907104 131.83987427]
[421.92025757 139.16250610]
[426.39413452 138.93083191]
[430.29727173 140.05596924]
[433.26571655 142.18147278]
[435.09323120 144.86798096]
[435.74453735 147.65345764]
[448.19528198 156.01878357]
[460.64605713 164.38410950]
[473.09680176 172.74945068]
[482.12734985 169.68534851]
[491.41284180 171.13529968]
[498.85708618 176.64239502]
[502.83969116 184.84872437]
[502.56814575 193.82810974]
[514.48394775 202.93928528]
[526.39978027 212.05046082]
[538.31555176 221.16165161]
[553.77703857 219.26954651]
[565.73156738 228.67932129]
[567.44012451 243.43115234]
[579.35595703 252.54232788]
[591.27172852 261.65350342]
[606.90222168 259.31582642]
[619.55773926 268.78225708]
[621.72998047 284.43655396]
[612.13031006 296.99127197]
[596.45391846 298.99795532]
[584.00140381 289.26602173]
[582.16058350 273.56930542]
[570.24475098 264.45812988]
[558.32897949 255.34695435]
[543.64501953 257.56463623]
[531.43090820 248.49433899]
[529.20440674 233.07745361]
[517.28857422 223.96627808]
[505.37277222 214.85510254]
[493.45697021 205.74391174]
[472.86459351 204.98347473]
[464.73147583 185.20019531]
[452.28070068 176.83486938]
[439.82995605 168.46954346]
[427.37921143 160.10420227]
[414.59759521 152.25369263]
[401.50643921 144.93104553]
[388.41525269 137.60839844]
[375.32406616 130.28576660]
[357.40698242 148.52149963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[104 152]
[105 151]
[106 150]
[107 149]
[112 148]
[113 147]
[114 146]
[115 145]
[120 143]
[121 142]
[122 141]
[123 140]
[126 137]
[127 136]
[128 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
