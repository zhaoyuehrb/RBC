%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUACCUGGAAAUUGGUACAGAGAUUCAGAGUCUUUGUCCAGGAAGACACUUUGGAGUAGAAGA\
) } def
/len { sequence length } bind def

/coor [
[94.32955170 289.87521362]
[93.75572205 274.08135986]
[104.57894897 262.56469727]
[103.87586212 247.58117676]
[103.17277527 232.59767151]
[102.46969604 217.61415100]
[101.76660919 202.63064575]
[100.71246338 187.66772461]
[99.30784607 172.73364258]
[97.90322113 157.79954529]
[96.49860382 142.86546326]
[95.09397888 127.93136597]
[76.95126343 116.52228546]
[71.97251892 95.67671967]
[83.00129700 77.30033875]
[77.50559998 63.34336090]
[72.00989532 49.38638306]
[66.51419830 35.42940140]
[60.24814987 28.29657364]
[61.10493851 20.68718910]
[56.26947403 6.48795462]
[51.43400955 -7.71128035]
[46.59854507 -21.91051483]
[41.76307678 -36.10974884]
[36.92761230 -50.30898666]
[32.09214783 -64.50822449]
[27.25668335 -78.70745850]
[22.42121887 -92.90669250]
[11.59168720 -105.95114136]
[21.12843895 -119.96850586]
[37.23804092 -114.68485260]
[36.62045288 -97.74215698]
[41.45591736 -83.54292297]
[46.29138184 -69.34368896]
[51.12685013 -55.14445114]
[55.96231461 -40.94521713]
[60.79777908 -26.74598122]
[65.63323975 -12.54674530]
[70.46871185 1.65248978]
[75.30417633 15.85172462]
[80.47117615 29.93370247]
[85.96687317 43.89068222]
[91.46257782 57.84766006]
[96.95827484 71.80464172]
[106.00550079 72.28422546]
[114.43978119 75.59255981]
[121.40029144 81.39199829]
[126.17662811 89.09062195]
[128.28129578 97.90268707]
[127.49948883 106.92881775]
[123.91100311 115.24776459]
[117.88208771 122.01048279]
[110.02806854 126.52674866]
[111.43269348 141.46083069]
[112.83731079 156.39492798]
[114.24193573 171.32901001]
[115.64656067 186.26310730]
[119.68589783 194.85520935]
[116.75012207 201.92755127]
[117.45320892 216.91107178]
[118.15628815 231.89457703]
[118.85937500 246.87809753]
[119.56246185 261.86160278]
[131.41656494 272.31414795]
[132.32421875 288.09237671]
[121.74691772 299.83529663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[6 60]
[7 59]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[15 44]
[16 43]
[17 42]
[18 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
