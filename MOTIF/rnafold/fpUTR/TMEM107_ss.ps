%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCGGUGCCUGAGCGGGCGGGAAGGAGGCGUUCGUCUAGAUUUGUCGGCUUGCGGGGAGACUUCAGGAGUCGCUGUCUCUGAACUUCCAGCCUCAGAGACCGCCGCCCUUGUCCCCGAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[207.20526123 388.60501099]
[206.38076782 384.52734375]
[207.02209473 379.97659302]
[200.85279846 366.30398560]
[194.68348694 352.63140869]
[188.51417542 338.95883179]
[182.34487915 325.28622437]
[176.17556763 311.61364746]
[162.19636536 306.60192871]
[155.74504089 292.82385254]
[161.09657288 278.19515991]
[154.92726135 264.52258301]
[148.75796509 250.84999084]
[142.58865356 237.17739868]
[139.32290649 235.59207153]
[136.70199585 232.28666687]
[135.55352783 227.60121155]
[136.51210022 222.24468994]
[131.38179016 208.14930725]
[126.25149536 194.05390930]
[114.62782288 184.74050903]
[117.17857361 169.12626648]
[112.04827118 155.03088379]
[106.91796875 140.93548584]
[101.78766632 126.84010315]
[96.65736389 112.74471283]
[90.83084106 98.92256927]
[84.32258606 85.40803528]
[77.81433105 71.89350128]
[71.30607605 58.37897110]
[64.79781342 44.86443710]
[58.28956223 31.34990501]
[46.33495331 26.31965828]
[41.21859360 14.84076309]
[45.20681381 3.34787107]
[39.03750610 -10.32471657]
[26.30908012 -19.72140312]
[28.12711143 -34.50463867]
[21.95780563 -48.17722702]
[6.78842258 -47.77036667]
[-7.34296560 -53.18764496]
[-18.29410744 -63.57447052]
[-24.41765022 -77.32546234]
[-24.80891037 -92.33251953]
[-19.43939400 -106.30799103]
[-9.15640354 -117.13339233]
[-15.32571030 -130.80598450]
[-21.49501610 -144.47857666]
[-36.00437546 -150.14569092]
[-42.06615829 -164.09951782]
[-36.57400894 -177.89704895]
[-42.74331665 -191.56964111]
[-56.36701202 -200.69799805]
[-55.00364304 -217.04037476]
[-40.05572510 -223.78514099]
[-26.90039444 -213.99385071]
[-29.07073021 -197.73895264]
[-22.90142250 -184.06636047]
[-8.92221546 -179.05464172]
[-2.47089052 -165.27658081]
[-7.82242870 -150.64787292]
[-1.65312231 -136.97529602]
[4.51618433 -123.30270386]
[19.43697739 -123.84967804]
[33.46845245 -118.62827301]
[44.46157074 -108.40495300]
[50.71994781 -94.71479797]
[51.26157761 -79.63101959]
[45.97281265 -65.45103455]
[35.63039398 -54.34653091]
[41.79969788 -40.67394257]
[54.08685684 -32.25521469]
[52.71009445 -16.49402237]
[58.87940216 -2.82143545]
[73.64759827 6.57120943]
[71.80409241 24.84164810]
[78.31234741 38.35618210]
[84.82060242 51.87071609]
[91.32886505 65.38524628]
[97.83712006 78.89978027]
[104.34537506 92.41431427]
[107.25654602 93.67089844]
[109.75022125 96.06163025]
[111.38775635 99.42401886]
[111.80084229 103.42937469]
[110.75275421 107.61441040]
[115.88305664 121.70980072]
[121.01335907 135.80519104]
[126.14366150 149.90057373]
[131.27395630 163.99597168]
[143.26458740 174.31758118]
[140.34687805 188.92361450]
[145.47718811 203.01899719]
[150.60748291 217.11439514]
[156.26124573 231.00808716]
[162.43055725 244.68067932]
[168.59985352 258.35327148]
[174.76916504 272.02584839]
[189.27851868 277.69296265]
[195.34030151 291.64682007]
[189.84815979 305.44433594]
[196.01747131 319.11694336]
[202.18676758 332.78952026]
[208.35607910 346.46209717]
[214.52539062 360.13470459]
[220.69468689 373.80728149]
[227.53785706 387.15536499]
[235.03785706 400.14575195]
[242.53785706 413.13610840]
[250.03785706 426.12649536]
[257.53784180 439.11688232]
[265.03784180 452.10726929]
[272.53784180 465.09765625]
[287.00274658 472.82415771]
[287.27331543 489.22106934]
[273.07122803 497.42065430]
[259.00637817 488.98785400]
[259.54745483 472.59765625]
[252.04747009 459.60726929]
[244.54747009 446.61688232]
[237.04747009 433.62649536]
[229.54747009 420.63610840]
[222.04747009 407.64575195]
[214.54747009 394.65536499]
[211.75843811 393.83114624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[8 101]
[11 98]
[12 97]
[13 96]
[14 95]
[18 94]
[19 93]
[20 92]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[32 76]
[35 74]
[36 73]
[38 71]
[39 70]
[46 63]
[47 62]
[48 61]
[51 58]
[52 57]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
