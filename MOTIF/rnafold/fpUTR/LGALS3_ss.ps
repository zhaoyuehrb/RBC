%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUAUUUGAGGCUCGGAGCCACCGCCCCGCCGGCGCCCGCAGCACCUCCUCGCCAGCAGCCGUCCGGAGCCAGCCAACGAGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[52.11730957 415.41186523]
[38.45906830 421.98669434]
[23.37549210 423.49050903]
[8.68799400 419.74176025]
[-3.82983828 411.19308472]
[-12.66641426 398.87680054]
[-16.75467682 384.28015137]
[-15.60094547 369.16577148]
[-9.34454060 355.35876465]
[1.25904655 344.52642822]
[14.92938137 337.97677612]
[30.01570511 336.50076294]
[33.72530365 321.96670532]
[37.43489838 307.43264771]
[41.14449692 292.89859009]
[44.85409546 278.36453247]
[35.66258240 264.40441895]
[39.37738419 247.76504517]
[54.20428848 238.69000244]
[57.39276886 224.03280640]
[49.12954330 215.78767395]
[45.94129944 204.43225098]
[48.76271057 192.85525513]
[56.98367691 184.06268311]
[68.57656097 180.39741516]
[72.80255127 166.00502014]
[68.96434784 151.61344910]
[80.27619171 140.55212402]
[84.50218201 126.15972900]
[88.72817230 111.76733398]
[84.28569031 95.68898773]
[96.31058502 84.12825012]
[100.02017975 69.59418488]
[103.72978210 55.06012726]
[107.43937683 40.52606964]
[110.88896179 25.92811203]
[114.07744598 11.27090931]
[105.79837799 -1.92359209]
[109.24075317 -16.74265862]
[121.87071228 -24.55416679]
[125.05918884 -39.21136856]
[127.98554993 -53.92314911]
[130.64884949 -68.68481445]
[121.43055725 -81.52221680]
[124.07206726 -97.10418701]
[137.00621033 -106.18623352]
[152.55938721 -103.38013458]
[161.50418091 -90.35069275]
[158.53379822 -74.82805634]
[145.41050720 -66.02152252]
[142.74720764 -51.25984955]
[144.70262146 -43.95361710]
[139.71640015 -36.02289200]
[136.52790833 -21.36568642]
[144.77151489 -9.01341438]
[141.74673462 5.89649487]
[128.73464966 14.45938873]
[125.54616547 29.11659241]
[127.23955536 36.48796463]
[121.97343445 44.23566818]
[118.26383972 58.76972580]
[114.55424500 73.30378723]
[110.84464264 87.83784485]
[116.20960999 98.33483887]
[113.09081268 109.70333862]
[103.12056732 115.99332428]
[98.89457703 130.38571167]
[94.66858673 144.77810669]
[98.20451355 160.19912720]
[87.19494629 170.23100281]
[82.96895599 184.62339783]
[92.70920563 200.66062927]
[87.94449615 218.48506165]
[72.04997253 227.22128296]
[68.86149597 241.87847900]
[77.46463776 252.41755676]
[78.34009552 265.79760742]
[71.38963318 277.03442383]
[59.38815308 282.07412720]
[55.67855835 296.60818481]
[51.96895981 311.14224243]
[48.25936127 325.67630005]
[44.54976273 340.21035767]
[57.08332825 348.73593140]
[65.94258881 361.03591919]
[70.05773926 375.62500000]
[68.93186951 390.74148560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[19 75]
[20 74]
[25 71]
[26 70]
[28 68]
[29 67]
[30 66]
[32 63]
[33 62]
[34 61]
[35 60]
[36 58]
[37 57]
[40 54]
[41 53]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
