%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUCUUCCAGGCUAAGUCCAUCUUCCGGCUUGGGCAGACGCUGCCGCGGAAUCCUUGACUCUAGUUUUCUGAGUCGAUUGUGAUC\
) } def
/len { sequence length } bind def

/coor [
[53.68799210 157.23150635]
[53.42617416 142.23379517]
[58.67956161 128.18382263]
[68.71698761 117.03706360]
[82.14064026 110.34516907]
[67.15019989 109.80978394]
[52.15975571 109.27439880]
[37.16214752 109.00666809]
[22.16214561 109.00666809]
[7.16214657 109.00666809]
[-7.83785343 109.00666809]
[-22.83785439 109.00666809]
[-37.83785248 109.00666809]
[-52.83785248 109.00666809]
[-67.83785248 109.00666809]
[-82.82829285 109.54205322]
[-97.79007721 110.61213684]
[-112.75186157 111.68222809]
[-124.30221558 122.81635284]
[-140.18936157 120.58516693]
[-148.22602844 106.70023346]
[-142.24719238 91.81288910]
[-126.83928680 87.34342957]
[-113.82194519 96.72044373]
[-98.86016846 95.65035248]
[-83.89838409 94.58026886]
[-80.02230835 91.44464111]
[-74.07685852 90.86846161]
[-67.83785248 94.00666809]
[-52.83785248 94.00666809]
[-37.83785248 94.00666809]
[-22.83785439 94.00666809]
[-7.83785343 94.00666809]
[7.16214657 94.00666809]
[22.16214561 94.00666809]
[37.16214752 94.00666809]
[44.00510406 90.78507996]
[52.69514084 94.28395844]
[67.68558502 94.81934357]
[82.67602539 95.35472870]
[94.01226807 85.53181458]
[95.61569977 70.61775970]
[97.21912384 55.70370865]
[90.09344482 40.93357468]
[99.54433441 27.53160667]
[115.84951782 29.28459549]
[122.23562622 44.38921738]
[112.13317871 57.30713654]
[110.52975464 72.22119141]
[108.92632294 87.13524628]
[113.01651001 72.70366669]
[125.72814178 64.74035645]
[140.49818420 67.35679626]
[149.70083618 79.20209503]
[148.58474731 94.16051483]
[137.72613525 104.50898743]
[122.72942352 104.90387726]
[137.57675171 107.03860474]
[152.42407227 109.17332458]
[167.27139282 111.30805206]
[182.11871338 113.44277191]
[196.96603394 115.57749176]
[211.81335449 117.71221924]
[220.98655701 115.81187439]
[227.14878845 120.19726562]
[241.91044617 122.86055756]
[257.15127563 116.80673218]
[269.84490967 127.18962097]
[266.93316650 143.32820129]
[251.41145325 148.62048340]
[239.24714661 137.62222290]
[224.48548889 134.95892334]
[209.67863464 132.55953979]
[194.83131409 130.42481995]
[179.98399353 128.29010010]
[165.13667297 126.15537262]
[150.28933716 124.02064514]
[135.44201660 121.88592529]
[120.59470367 119.75120544]
[129.41415405 131.88450623]
[133.17274475 146.40597534]
[131.34733582 161.29449463]
[124.19200134 174.47785950]
[112.70262146 184.12120056]
[98.47829437 188.88235474]
[83.49878693 188.09866333]
[69.84894562 181.87918091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[7 38]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 26]
[17 25]
[18 24]
[41 50]
[42 49]
[43 48]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
