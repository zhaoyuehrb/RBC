%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGCUGGUAGCUCCUGGCCAGCUCAAGGUGUUUCCUUUUGCCUGGUAACCAGGAGGAGUGGCUGAGGCAGGGC\
) } def
/len { sequence length } bind def

/coor [
[121.46844482 343.31588745]
[119.74713898 328.25558472]
[123.28358459 313.51550293]
[131.65074158 300.87564087]
[143.83824158 291.86227417]
[139.55819702 277.48587036]
[135.27815247 263.10943604]
[130.99810791 248.73303223]
[117.90366364 245.41015625]
[108.13419342 235.92193604]
[104.37041473 222.72009277]
[107.72059631 209.29469299]
[117.39719391 199.25166321]
[113.71491241 184.71066284]
[110.03263092 170.16966248]
[106.35034943 155.62864685]
[102.66806030 141.08764648]
[98.98577881 126.54664612]
[95.30349731 112.00563812]
[90.72725677 97.72075653]
[85.27463531 83.74688721]
[79.82201385 69.77301788]
[74.08176422 55.91482925]
[68.05632782 42.17822647]
[53.60726547 36.35910034]
[47.69230270 22.34240150]
[53.32899475 8.60328579]
[47.30356598 -5.13331366]
[41.27813339 -18.86991310]
[35.25270081 -32.60651398]
[20.88996315 -39.75432968]
[17.66434288 -55.46976471]
[28.05026245 -67.69728088]
[44.08053207 -67.05698395]
[53.45810318 -54.04003906]
[48.98930359 -38.63194656]
[55.01473236 -24.89534569]
[61.04016495 -11.15874481]
[67.06559753 2.57785463]
[80.99141693 7.73605490]
[87.29774475 21.58108521]
[81.79293060 36.15279770]
[87.81835938 49.88939667]
[93.55390167 54.89198685]
[93.79588318 64.32040405]
[99.24849701 78.29426575]
[104.70111847 92.26813507]
[108.30110931 94.40689850]
[110.82778931 98.23796844]
[111.49777985 103.18549347]
[109.84450531 108.32335663]
[113.52678680 122.86436462]
[117.20906830 137.40536499]
[120.89134979 151.94636536]
[124.57363129 166.48738098]
[128.25592041 181.02838135]
[131.93820190 195.56938171]
[147.61888123 201.52900696]
[156.65820312 215.46475220]
[155.72525024 231.88458252]
[145.37452698 244.45298767]
[149.65457153 258.82940674]
[153.93460083 273.20581055]
[158.21464539 287.58221436]
[173.34745789 288.46197510]
[187.26551819 294.46725464]
[198.28816223 304.87289429]
[205.08435059 318.42233276]
[206.83340454 333.47946167]
[203.32412720 348.22601318]
[194.98028564 360.88128662]
[182.80941772 369.91708374]
[168.28123474 374.24230957]
[153.15007019 373.33468628]
[139.24310303 367.30377197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 64]
[6 63]
[7 62]
[8 61]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 47]
[21 46]
[22 45]
[23 43]
[24 42]
[27 39]
[28 38]
[29 37]
[30 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
