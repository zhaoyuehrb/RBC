%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGCAUGGGGUCAAGCACUCUGGUCGGUCCCAUGGAGCUCUGCACUGUAGCUUCCCUUCCACAGGCCCCGCAGGGCGCCCCCUGCCUCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[61.16462326 124.04727936]
[57.27111816 116.14623260]
[42.55934143 119.07259369]
[27.84756088 121.99894714]
[15.82202816 132.27986145]
[1.82983458 127.17419434]
[-12.88194466 130.10055542]
[-27.59372330 133.02690125]
[-42.30550385 135.95326233]
[-57.01728058 138.87960815]
[-71.72906494 141.80596924]
[-86.44084167 144.73231506]
[-101.15261841 147.65867615]
[-115.86440277 150.58503723]
[-123.76403046 160.94129944]
[-136.21826172 162.99096680]
[-146.35040283 156.16256714]
[-161.15005493 158.60600281]
[-170.15081787 171.59683228]
[-185.71592712 174.33599854]
[-198.61087036 165.19839478]
[-201.18531799 149.60519409]
[-191.91189575 136.80758667]
[-176.29234314 134.39813232]
[-163.59349060 143.80635071]
[-148.79383850 141.36291504]
[-135.97157288 129.50451660]
[-118.79075623 135.87326050]
[-104.07897186 132.94689941]
[-89.36719513 130.02053833]
[-74.65541840 127.09418488]
[-59.94363785 124.16783142]
[-45.23185730 121.24147797]
[-30.52007866 118.31512451]
[-15.80829906 115.38877106]
[-1.09652019 112.46241760]
[9.87672806 102.39081573]
[24.92120743 107.28717041]
[39.63298416 104.36080933]
[54.34476471 101.43445587]
[59.04616165 79.77029419]
[73.39372253 62.87097931]
[94.00805664 54.71694946]
[116.03372192 57.22877502]
[123.53372192 44.23839188]
[125.16955566 35.04836655]
[131.49761963 30.95144653]
[139.41862488 18.21341324]
[147.33964539 5.47538042]
[155.26066589 -7.26265240]
[147.03642273 -20.12051201]
[145.21397400 -35.27443695]
[150.15518188 -49.71560287]
[160.87893677 -60.57670975]
[175.25605774 -65.70127106]
[190.43194580 -64.07180786]
[203.39341736 -56.01184464]
[211.56697083 -43.12170029]
[213.32972717 -27.96071434]
[208.33169556 -13.53911781]
[197.56524658 -2.72032666]
[183.16806030 2.34757996]
[167.99870300 0.65836525]
[160.07768250 13.39639759]
[152.15666199 26.13442993]
[144.23564148 38.87246323]
[136.52410889 51.73839188]
[129.02410889 64.72877502]
[138.20249939 74.95948792]
[143.92199707 87.45740509]
[145.66473389 101.09094238]
[143.27293396 114.62570190]
[156.50175476 121.69665527]
[169.73057556 128.76760864]
[182.95939636 135.83856201]
[196.18821716 142.90951538]
[209.41702271 149.98045349]
[225.78076172 148.90339661]
[234.66923523 162.68479919]
[226.93872070 177.14756775]
[210.54173279 177.41362000]
[202.34608459 163.20927429]
[189.11726379 156.13832092]
[175.88844299 149.06738281]
[162.65962219 141.99642944]
[149.43080139 134.92547607]
[136.20198059 127.85452271]
[130.18258667 134.28512573]
[123.04082489 139.44082642]
[115.04228973 143.12989807]
[106.48439789 145.21516418]
[97.68537903 145.61907959]
[88.97243500 144.32664490]
[80.66954803 141.38589478]
[73.08547974 136.90618896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[17 26]
[18 25]
[44 68]
[45 67]
[47 66]
[48 65]
[49 64]
[50 63]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
