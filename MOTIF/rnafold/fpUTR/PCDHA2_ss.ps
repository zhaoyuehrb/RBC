%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGCGGAGGAAUAAGAGAAGCAGCAGGACUUUAACAGAGACUAGAAUAUUUAAAUUUUUGCAAAACAUGCUCUUCUAAUUUGAUCAAAACAUUGAGGAUUGGUA\
) } def
/len { sequence length } bind def

/coor [
[121.88239288 224.96649170]
[110.62659454 234.88146973]
[96.99650574 241.14411926]
[82.14171600 243.22622681]
[67.31509399 240.95217896]
[53.76713943 234.51377869]
[42.64051056 224.45405579]
[34.87364197 211.62144470]
[31.12160110 197.09828186]
[31.70084381 182.10948181]
[36.56251144 167.91918945]
[45.29656982 155.72425842]
[57.16637039 146.55322266]
[71.17079926 141.17959595]
[86.12870026 140.05656433]
[100.77850342 143.27886963]
[113.88580322 150.57563782]
[107.89222717 136.82511902]
[101.89865112 123.07458496]
[95.90508270 109.32405853]
[89.96257782 103.67545319]
[89.94398499 95.08077240]
[84.35665894 81.16021729]
[78.76933289 67.23966217]
[71.97910309 53.86458588]
[64.03862000 41.13867950]
[56.09812927 28.41277504]
[48.15764236 15.68687057]
[40.21715546 2.96096539]
[32.27666855 -9.76493931]
[18.40705109 -17.37705612]
[18.23394394 -32.27065659]
[10.29345703 -44.99655914]
[2.35296941 -57.72246552]
[-5.58751822 -70.44837189]
[-13.52800560 -83.17427826]
[-28.43209648 -80.30503845]
[-43.36553574 -83.01738739]
[-56.30870056 -90.94448853]
[-65.51113129 -103.01427460]
[-69.72827148 -117.59439850]
[-68.38980103 -132.71302795]
[-61.67671967 -146.32548523]
[-50.49692917 -156.59080505]
[-36.36240005 -162.12068176]
[-21.18470955 -162.16723633]
[-7.01651812 -156.72418213]
[4.22604322 -146.52764893]
[11.02251053 -132.95663452]
[12.45371819 -117.84650421]
[8.32610512 -103.24077606]
[-0.80210072 -91.11476135]
[7.13838673 -78.38885498]
[15.07887459 -65.66295624]
[23.01936150 -52.93704605]
[30.95984840 -40.21114349]
[44.26150894 -33.50926971]
[45.00257111 -17.70542717]
[52.94305801 -4.97952223]
[60.88354874 7.74638271]
[68.82403564 20.47228813]
[76.76451874 33.19819260]
[84.70500946 45.92409897]
[90.12535095 31.93767929]
[103.73650360 25.63398552]
[117.90934753 30.54626656]
[124.69993591 43.92116547]
[120.30211639 58.26198578]
[107.18087769 65.53063202]
[92.68988800 61.65233994]
[98.27721405 75.57289124]
[103.86454010 89.49344635]
[109.65560913 103.33048248]
[115.64918518 117.08100891]
[121.64276123 130.83154297]
[127.63632965 144.58207703]
[137.18411255 156.15098572]
[149.54808044 164.64405823]
[161.91204834 173.13713074]
[174.27603149 181.63018799]
[186.63999939 190.12326050]
[199.00396729 198.61633301]
[211.36793518 207.10940552]
[218.17381287 208.04028320]
[222.70997620 211.78781128]
[224.18823242 216.48152161]
[236.03245544 225.68556213]
[247.87667847 234.88960266]
[259.72088623 244.09364319]
[276.03140259 245.79634094]
[282.46408081 260.88119507]
[272.40151978 273.83020020]
[256.19522095 271.32254028]
[250.51686096 255.93786621]
[238.67263794 246.73382568]
[226.82841492 237.52978516]
[214.98419189 228.32574463]
[202.87487793 219.47337341]
[190.51089478 210.98030090]
[178.14692688 202.48722839]
[165.78295898 193.99417114]
[153.41899109 185.50109863]
[141.05500793 177.00802612]
[128.69104004 168.51495361]
[133.36878967 182.76693726]
[133.75413513 197.76197815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 76]
[18 75]
[19 74]
[20 73]
[22 72]
[23 71]
[24 70]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[77 104]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
