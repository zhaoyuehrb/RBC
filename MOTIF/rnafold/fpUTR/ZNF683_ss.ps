%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGUCCCACAUGCCCUGGGGAGGUAGCACAAAGGGAGGACCAUGGUCUUCUAACUGAGGAACCUGAGCAGAUGCCUUGACCCAGACCAGAGACCCAAGCCAAGGAAAGCCCAUGAUCACCAGAGUAAUGGGGAU\
) } def
/len { sequence length } bind def

/coor [
[358.74801636 394.96136475]
[365.69168091 377.12847900]
[354.96502686 366.64328003]
[344.23840332 356.15811157]
[327.05532837 352.77865601]
[322.14129639 335.07369995]
[311.17874146 324.83538818]
[300.21621704 314.59710693]
[290.28659058 317.73153687]
[279.87677002 316.40603638]
[270.91174316 310.79702759]
[265.07797241 301.87939453]
[263.50628662 291.25750732]
[266.55337524 280.87667847]
[256.31506348 269.91412354]
[241.46673584 269.66384888]
[230.92749023 258.69213867]
[231.29066467 243.11953735]
[221.05236816 232.15699768]
[210.81407166 221.19445801]
[200.57577515 210.23191833]
[190.33747864 199.26937866]
[179.85229492 188.54272461]
[169.12565613 178.05754089]
[158.39901733 167.57235718]
[147.67236328 157.08717346]
[136.94572449 146.60198975]
[126.21908569 136.11679077]
[115.16695404 141.97412109]
[102.92348480 144.53443909]
[90.45038605 143.59664917]
[78.72738647 139.23442078]
[68.67532349 131.79037476]
[61.08375931 121.84925079]
[56.54901123 110.19189453]
[55.42726517 97.73399353]
[57.80664444 85.45407104]
[44.64890289 78.25171661]
[31.49116516 71.04936981]
[18.33342552 63.84701157]
[5.17568684 56.64465714]
[-7.98205233 49.44230270]
[-21.13979149 42.23995209]
[-37.51344681 43.15398788]
[-46.26420975 29.28473473]
[-38.39004517 14.89968872]
[-21.99121857 14.79695129]
[-13.93743706 29.08221054]
[-0.77969813 36.28456497]
[12.37804127 43.48691940]
[25.53577995 50.68927383]
[38.69351959 57.89162827]
[51.85125732 65.09397888]
[65.00899506 72.29633331]
[69.88992310 67.05691528]
[75.54595184 62.66552734]
[81.83147430 59.23521042]
[78.11435699 44.70307159]
[67.19860077 33.25070190]
[71.54064941 19.00303841]
[67.82353973 4.47090101]
[55.97963333 -6.87167501]
[60.14292526 -22.73354912]
[76.03057098 -26.79738617]
[87.29872131 -14.88265800]
[82.35567474 0.75378412]
[86.07279205 15.28592205]
[96.72267914 25.69885826]
[92.64649963 40.98595428]
[96.36361694 55.51809311]
[116.13642120 58.38895416]
[132.67520142 69.59942627]
[142.66526794 86.90273285]
[144.10443115 106.83097076]
[136.70426941 125.39015198]
[147.43090820 135.87533569]
[158.15754700 146.36053467]
[168.88420105 156.84571838]
[179.61083984 167.33090210]
[190.33747864 177.81608582]
[196.77062988 179.86352539]
[200.57452393 184.23112488]
[201.30001831 189.03108215]
[211.53831482 199.99362183]
[221.77661133 210.95616150]
[232.01490784 221.91870117]
[242.25320435 232.88124084]
[257.81430054 233.58160400]
[268.04119873 244.84503174]
[267.27761841 259.67584229]
[277.51589966 270.63836670]
[297.52099609 270.16668701]
[311.31271362 284.24618530]
[310.45452881 303.63455200]
[321.41705322 313.87286377]
[332.37960815 324.11114502]
[345.32913208 324.46469116]
[354.25521851 333.29006958]
[354.72357178 345.43145752]
[365.45022583 355.91665649]
[376.17687988 366.40182495]
[386.25408936 361.08474731]
[397.35449219 358.58557129]
[408.70678711 359.06958008]
[419.52432251 362.49505615]
[429.05966187 368.61676025]
[436.65618896 377.00338745]
[441.79336548 387.06808472]
[444.12234497 398.10943604]
[443.48965454 409.36026001]
[439.94732666 420.04113770]
[433.74871826 429.41418457]
[443.21502686 441.04986572]
[452.68133545 452.68551636]
[462.14767456 464.32119751]
[471.61398315 475.95684814]
[489.00643921 477.39938354]
[499.79595947 490.68576050]
[497.72158813 507.33593750]
[507.45031738 518.75311279]
[523.07537842 523.73199463]
[526.31121826 539.80877686]
[513.82910156 550.44494629]
[498.46954346 544.69897461]
[496.03314209 528.48187256]
[486.30441284 517.06469727]
[473.39239502 517.83740234]
[462.24075317 510.90606689]
[457.06637573 498.62637329]
[459.97830200 485.42318726]
[450.51199341 473.78750610]
[441.04568481 462.15185547]
[431.57934570 450.51617432]
[422.11303711 438.88049316]
[403.99951172 444.26095581]
[385.28976440 441.29089355]
[369.65347290 430.51071167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 101]
[3 100]
[4 99]
[6 96]
[7 95]
[8 94]
[14 91]
[15 90]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[57 70]
[58 69]
[60 67]
[61 66]
[112 134]
[113 133]
[114 132]
[115 131]
[116 130]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
