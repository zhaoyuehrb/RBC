%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUAAGCCGGUUUCAAGUUUCAGCUCCUCCUUGAAUUCCAGGCUGCUGAGACUUCCCUCUAGAAUCCUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[87.07502747 268.19461060]
[71.93307495 268.19586182]
[57.61195755 263.27810669]
[45.66513062 253.97477722]
[37.38848877 241.29502869]
[33.67982101 226.61427307]
[34.94142151 211.52497864]
[41.03643417 197.66389465]
[51.30372238 186.53459167]
[64.62956238 179.34426880]
[79.56847382 176.87290955]
[82.03739929 162.07748413]
[76.50046539 148.25027466]
[86.40367126 135.91183472]
[88.87258911 121.11641693]
[91.34150696 106.32099915]
[91.65151215 91.32420349]
[89.79611969 76.43939209]
[87.94073486 61.55458450]
[86.08534241 46.66977692]
[84.22994995 31.78496742]
[82.37456512 16.90015984]
[80.51917267 2.01535082]
[78.66378784 -12.86945820]
[76.80839539 -27.75426674]
[74.95300293 -42.63907623]
[63.49473190 -56.88042831]
[70.59818268 -72.79069519]
[68.12926483 -87.58611298]
[65.66034698 -102.38153076]
[51.10227966 -107.10607910]
[40.41565704 -118.06301880]
[36.05618668 -132.73454285]
[39.02563858 -147.74923706]
[48.64165878 -159.65682983]
[62.69455338 -165.72103882]
[77.95507050 -164.54837036]
[90.91645813 -156.40827942]
[98.60028076 -143.17131042]
[99.24085236 -127.87921143]
[92.69097900 -114.04599762]
[80.45576477 -104.85044861]
[82.92468262 -90.05503082]
[85.39360046 -75.25961304]
[95.16568756 -67.82807922]
[97.20318604 -55.31125641]
[89.83781433 -44.49446487]
[91.69320679 -29.60965538]
[93.54859161 -14.72484779]
[95.40398407 0.15996127]
[97.25936890 15.04477024]
[99.11476135 29.92957878]
[100.97015381 44.81438828]
[102.82553864 59.69919586]
[104.68093109 74.58400726]
[106.53631592 89.46881104]
[117.28752899 79.00881958]
[132.21775818 77.56379700]
[144.77537537 85.76784515]
[149.44985962 100.02088165]
[144.18997192 114.06843567]
[131.30384827 121.74617767]
[116.44613647 119.68498993]
[106.13692474 108.78991699]
[103.66800690 123.58533478]
[101.19908905 138.38075256]
[106.55942535 153.26623535]
[96.83281708 164.54640198]
[94.36389923 179.34182739]
[107.69092560 186.52993774]
[117.96004486 197.65756226]
[124.05734253 211.51763916]
[125.32142639 226.60673523]
[121.61518097 241.28808594]
[113.34062958 253.96920776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 69]
[12 68]
[14 66]
[15 65]
[16 64]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[28 44]
[29 43]
[30 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
