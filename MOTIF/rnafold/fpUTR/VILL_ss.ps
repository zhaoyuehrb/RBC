%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUACAGGUAGCCAGGUGUCGGUCUCCAGCCUGAGAACUCUGGCUGUUGUUCCUUGUGUCGUCCCAUAUUCCUGCCUGGCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[81.05264282 304.22058105]
[70.31366730 315.20101929]
[55.51890945 319.32540894]
[40.64807892 315.48431396]
[29.70135117 304.71099854]
[25.62334633 289.90338135]
[29.51102638 275.04464722]
[40.31862259 264.13174438]
[55.13894653 260.10018921]
[58.89027786 245.57684326]
[62.64160538 231.05349731]
[66.39293671 216.53015137]
[69.88144684 201.94143677]
[73.10600281 187.29212952]
[76.33055878 172.64282227]
[79.55511475 157.99351501]
[82.77967072 143.34420776]
[86.00423431 128.69490051]
[73.71598053 118.12261200]
[68.20385742 102.87824249]
[70.88891602 86.89184570]
[81.07893372 74.28478241]
[75.27619171 60.45264435]
[58.95864487 58.58704376]
[45.84281158 48.85725403]
[39.39830399 33.95321274]
[41.27166367 17.91767883]
[50.86680603 5.04972839]
[44.56847000 -8.56390285]
[38.27013397 -22.17753410]
[31.97179604 -35.79116440]
[25.67346001 -49.40479660]
[12.85673428 -58.68068695]
[14.53487492 -73.48045349]
[8.23653793 -87.09408569]
[-5.47287846 -96.09319305]
[-4.26412344 -112.44773102]
[10.61933994 -119.33355713]
[23.86668015 -109.66711426]
[21.85017014 -93.39241791]
[28.14850616 -79.77878571]
[40.51473236 -71.47663879]
[39.28709030 -55.70313263]
[45.58542633 -42.08950043]
[51.88376236 -28.47587013]
[58.18210220 -14.86223888]
[64.48043823 -1.24860787]
[78.25605774 -0.89075929]
[90.56983948 5.44225454]
[98.95373535 16.54614449]
[101.69919586 30.25406075]
[98.20513153 43.85933304]
[89.10832977 54.64989853]
[94.91107941 68.48204041]
[114.95447540 71.79286194]
[128.94290161 86.52457428]
[143.64804077 83.56502533]
[158.35317993 80.60547638]
[173.05831909 77.64591980]
[181.59922791 64.34823608]
[197.05900574 61.06636429]
[210.26565552 69.74738312]
[213.38389587 85.24099731]
[204.56372070 98.35512543]
[189.03800964 101.30937958]
[176.01786804 92.35105896]
[161.31272888 95.31060791]
[146.60758972 98.27016449]
[131.90245056 101.22971344]
[130.58853149 109.14443970]
[127.34288025 116.48168182]
[122.37048340 122.77807617]
[115.98534393 127.63598633]
[108.59069824 130.74864197]
[100.65354156 131.91946411]
[97.42898560 146.56877136]
[94.20442963 161.21807861]
[90.97986603 175.86738586]
[87.75531006 190.51669312]
[84.53075409 205.16600037]
[85.74910736 214.45907593]
[80.91628265 220.28147888]
[77.16494751 234.80482483]
[73.41362000 249.32817078]
[69.66229248 263.85150146]
[80.67633820 274.55599976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 85]
[10 84]
[11 83]
[12 82]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[22 54]
[23 53]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[34 41]
[35 40]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
