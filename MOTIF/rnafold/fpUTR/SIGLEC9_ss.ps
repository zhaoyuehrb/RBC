%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGGCCUCCUCUAAGUCUUGAGCCCGCAGUUCCUGAGAGAAGAACCCUGAGGAACAGACGUUCCCUCGCGGCCCUGGCACCUCUAACCCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[166.58055115 213.14447021]
[158.24699402 200.67242432]
[149.91343689 188.20039368]
[141.57989502 175.72834778]
[133.24633789 163.25630188]
[124.91278076 150.78425598]
[116.57922363 138.31221008]
[98.85261536 141.72984314]
[81.34059143 137.34330750]
[67.31817627 125.97296143]
[54.08935547 133.04391479]
[40.86053848 140.11486816]
[38.86798477 155.50347900]
[28.18632698 166.75877380]
[12.92288780 169.55288696]
[-1.05323398 162.81138611]
[-8.36793232 149.12655640]
[-6.20855761 133.76046753]
[4.59456730 122.62169647]
[19.88742065 119.99333954]
[33.78958893 126.88603973]
[47.01840591 119.81509399]
[60.24722672 112.74414062]
[58.52569199 104.75162506]
[58.39497375 96.57685089]
[59.86008453 88.53338623]
[62.86482620 80.92973328]
[67.29395294 74.05755615]
[72.97756958 68.18044281]
[79.69767761 63.52381897]
[74.87608337 49.31986618]
[70.05448914 35.11591339]
[65.23289490 20.91196251]
[60.41130447 6.70801115]
[55.58971405 -7.49594069]
[43.82711029 -18.07666588]
[47.06274796 -32.61557770]
[42.24115372 -46.81953049]
[27.24606705 -50.44594193]
[16.60852051 -61.61940002]
[13.72291851 -76.77449036]
[19.51004601 -91.07528687]
[32.12325287 -99.95845032]
[47.53770828 -100.58939362]
[60.83471680 -92.76679230]
[67.77125549 -78.98680878]
[66.13388824 -63.64657974]
[56.44510651 -51.64112091]
[61.26669693 -37.43716812]
[72.68442535 -27.87240601]
[69.79366302 -12.31753254]
[74.61525726 1.88641918]
[79.43685150 16.09037209]
[84.25844574 30.29432297]
[89.08003235 44.49827576]
[93.90162659 58.70222855]
[104.78452301 58.52947235]
[115.34217834 61.17586136]
[124.85688019 66.46148682]
[132.68182373 74.02703857]
[145.91064453 66.95609283]
[150.25796509 51.76147461]
[164.11656189 44.16444016]
[179.26435852 48.67216873]
[186.71444702 62.61030579]
[182.04682922 77.70960236]
[168.03070068 85.01191711]
[152.98159790 80.18490601]
[139.75277710 87.25585938]
[140.49455261 110.14335632]
[129.05126953 129.97865295]
[137.38482666 142.45069885]
[145.71838379 154.92274475]
[154.05192566 167.39479065]
[162.38548279 179.86683655]
[170.71903992 192.33888245]
[179.05259705 204.81092834]
[193.53346252 200.47552490]
[208.64886475 200.60270691]
[223.05473328 205.18116760]
[235.47012329 213.80378723]
[244.79104614 225.70385742]
[250.18870544 239.82322693]
[251.18315125 254.90641785]
[247.68594360 269.61221313]
[240.00807190 282.63302612]
[228.83221436 292.81103516]
[215.15216064 299.24124146]
[200.18429565 301.35180664]
[185.25956726 298.95513916]
[171.70507812 292.26431274]
[160.72608948 281.87426758]
[153.29881287 268.70889282]
[150.08370972 253.93884277]
[151.36665344 238.87744141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[10 23]
[11 22]
[12 21]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[37 49]
[38 48]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
