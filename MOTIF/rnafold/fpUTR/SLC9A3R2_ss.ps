%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCCCGAGCCGGAUCCCGAGGCGACGGGAGCCGAACAGGAGCCGCCGCUGAAGCCACCGCCGGGUGCCCAGCGCCGCCGCCGCCCCCGAGCUCCCCCGCGCCCCUGCCCGCGGGCGGCCGGUGGGCAGCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[185.77058411 167.04087830]
[173.57582092 158.30657959]
[161.38105774 149.57228088]
[149.18630981 140.83799744]
[136.99154663 132.10369873]
[122.13916016 130.98307800]
[115.42516327 116.65712738]
[103.23040771 107.92283630]
[101.91629028 112.35195160]
[98.69694519 116.39161682]
[93.73090363 119.39912415]
[87.36969757 120.79547119]
[74.26779175 128.09889221]
[61.16588211 135.40231323]
[52.87922668 148.87977600]
[37.99520493 148.31838989]
[24.89329529 155.62181091]
[11.79138565 162.92523193]
[-1.31052363 170.22865295]
[-14.41243267 177.53208923]
[-18.49079704 192.80108643]
[-32.21309280 200.64163208]
[-47.43812561 196.40205383]
[-55.13315201 182.59764099]
[-50.73284912 167.41827393]
[-36.84784317 159.86962891]
[-21.71585464 164.43017578]
[-8.61394596 157.12675476]
[4.48796320 149.82333374]
[17.58987236 142.51991272]
[30.69178200 135.21649170]
[38.04130173 122.26141357]
[53.86245728 122.30040741]
[66.96437073 114.99698639]
[80.06627655 107.69356537]
[65.10450745 106.62326050]
[57.31182861 93.80632019]
[63.24722672 80.03057861]
[77.91495514 76.89089203]
[88.96942139 87.02997589]
[85.27849579 72.49116516]
[74.38338470 61.01914597]
[78.75109863 46.77932739]
[75.06016541 32.24051666]
[64.16506195 20.76849937]
[68.53276825 6.52868366]
[64.84184265 -8.01012707]
[60.33574295 -22.31729698]
[55.02886581 -36.34716034]
[49.72198486 -50.37702179]
[44.41510773 -64.40688324]
[39.10822678 -78.43674469]
[27.65006065 -84.47792053]
[23.54464340 -96.33874512]
[28.49009132 -107.43594360]
[23.50163651 -121.58216095]
[17.64842796 -128.70695496]
[18.56423187 -136.10481262]
[13.89674664 -150.36013794]
[9.22926044 -164.61547852]
[-3.33694839 -175.15219116]
[-0.22888915 -191.25411987]
[15.35613346 -196.35697937]
[27.38558388 -185.21138000]
[23.48459625 -169.28295898]
[28.15208244 -155.02763367]
[32.81956863 -140.77229309]
[37.64784622 -126.57061768]
[42.63630295 -112.42440033]
[56.55686951 -101.79788208]
[53.13808823 -83.74362183]
[58.44496918 -69.71376038]
[63.75184631 -55.68389893]
[69.05872345 -41.65403748]
[74.36560822 -27.62417603]
[83.21597290 -39.73495865]
[98.19114685 -40.59754944]
[108.37356567 -29.58308601]
[106.33978271 -14.72160149]
[93.57251740 -6.84778452]
[79.38065338 -11.70105743]
[83.07157898 2.83775353]
[93.70269012 13.26985836]
[89.59897614 28.54958725]
[93.28990936 43.08839798]
[103.92102051 53.52050400]
[99.81730652 68.80023193]
[103.50823212 83.33904266]
[111.96470642 95.72807312]
[124.15946198 104.46237183]
[139.88409424 106.20772552]
[145.72584534 119.90893555]
[157.92059326 128.64323425]
[170.11535645 137.37753296]
[182.31011963 146.11181641]
[194.50486755 154.84611511]
[207.50334167 151.12936401]
[220.07673645 155.53919983]
[227.67997742 166.24276733]
[227.70307922 179.17683411]
[239.69734192 188.18449402]
[251.69158936 197.19215393]
[263.68585205 206.19981384]
[275.68008423 215.20747375]
[287.67434692 224.21513367]
[299.76962280 233.08666992]
[311.96438599 241.82096863]
[324.15914917 250.55526733]
[336.35388184 259.28955078]
[348.54864502 268.02386475]
[360.74340820 276.75814819]
[372.93817139 285.49243164]
[385.13293457 294.22674561]
[400.85757446 295.97207642]
[406.69931030 309.67330933]
[418.89407349 318.40759277]
[435.29171753 322.71493530]
[435.69204712 339.66415405]
[419.51602173 344.74084473]
[410.15975952 330.60235596]
[397.96499634 321.86807251]
[383.11260986 320.74743652]
[376.39862061 306.42150879]
[364.20385742 297.68719482]
[352.00912476 288.95291138]
[339.81436157 280.21859741]
[327.61959839 271.48431396]
[315.42483521 262.75003052]
[303.23007202 254.01573181]
[291.03533936 245.28143311]
[283.70404053 243.93257141]
[278.66668701 236.20938110]
[266.67242432 227.20172119]
[254.67817688 218.19406128]
[242.68392944 209.18640137]
[230.68968201 200.17874146]
[218.69541931 191.17108154]
[202.20355225 194.26582336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[7 90]
[8 89]
[12 35]
[13 34]
[14 33]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[40 88]
[41 87]
[43 85]
[44 84]
[46 82]
[47 81]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[55 69]
[56 68]
[58 67]
[59 66]
[60 65]
[100 137]
[101 136]
[102 135]
[103 134]
[104 133]
[105 132]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
