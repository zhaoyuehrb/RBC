%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUGCACCCUAAGCAGUUCAGAGUUGGCUUCUGUUUUCCGUUAGCGCUUUGCUGCACGGACAAAUGCAUACAA\
) } def
/len { sequence length } bind def

/coor [
[16.69670486 212.71649170]
[2.20304823 216.62785339]
[-12.64346504 214.69744873]
[-25.58447266 207.25033569]
[-37.42158127 216.46351624]
[-49.25868988 225.67671204]
[-61.09579468 234.88990784]
[-61.48940277 250.52253723]
[-71.87808228 262.21054077]
[-87.35660553 264.43518066]
[-100.61650848 256.14608765]
[-105.39685059 241.25709534]
[-99.44050598 226.79832458]
[-85.55988312 219.59677124]
[-70.30898285 223.05279541]
[-58.47187805 213.83959961]
[-46.63476944 204.62641907]
[-34.79766464 195.41322327]
[-38.84007263 181.04003906]
[-37.06679916 166.17395020]
[-29.71714211 153.08396912]
[-17.88391876 143.78009033]
[-3.35107827 139.70451355]
[11.67521000 141.50831604]
[24.90146637 148.94752502]
[36.73857498 139.73432922]
[38.32034683 124.96837616]
[50.19361115 115.45626068]
[65.67078400 117.21549225]
[77.50789642 108.00229645]
[77.08169556 93.31545258]
[85.33675385 81.16065979]
[99.14611053 76.14203644]
[113.27891541 80.16059113]
[125.11602020 70.94740295]
[127.27079010 65.54389191]
[131.02662659 62.04753113]
[135.29298401 60.75332642]
[139.03619385 61.43670654]
[151.92201233 53.75843048]
[164.80781555 46.08015442]
[177.69361877 38.40187836]
[190.57943726 30.72360420]
[203.30380249 22.78065872]
[215.86129761 14.57643604]
[228.41880798 6.37221336]
[240.97630310 -1.83200884]
[245.66259766 -17.17535210]
[260.63278198 -22.94365311]
[274.40298462 -14.71196747]
[276.40991211 1.20506132]
[265.11401367 12.59725094]
[249.18052673 10.72548866]
[236.62301636 18.92971039]
[224.06552124 27.13393211]
[211.50802612 35.33815384]
[207.51770020 41.81886292]
[198.25770569 43.60941315]
[185.37190247 51.28768921]
[172.48609924 58.96596527]
[159.60028076 66.64424133]
[146.71447754 74.32251740]
[134.32920837 82.78450775]
[122.49210358 91.99770355]
[122.91830444 106.68454742]
[114.66324615 118.83934021]
[100.85388947 123.85796356]
[86.72108459 119.83940887]
[74.88397980 129.05259705]
[72.78994751 144.48803711]
[60.65419388 153.66290283]
[45.95176697 151.57144165]
[34.11465836 160.78463745]
[38.07937241 175.43238831]
[36.13924026 190.44168091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[25 73]
[26 72]
[29 69]
[30 68]
[34 64]
[35 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
