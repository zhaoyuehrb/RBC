%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGUGGGAGGUCAGGAGCAGCCAGUUCCUCCUGGGAAUGCAACCCAUCUCCGAAAAGGAUUAAGCAUCACUAGGGCUCCAAGUGAGUUCUGAUCAGAGGCUGUUCGGAAGACAGCAGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[180.85606384 150.95066833]
[173.63442993 137.14900208]
[159.36859131 132.51374817]
[145.10273743 127.87849426]
[130.83688354 123.24324036]
[116.51392365 118.78761292]
[102.13609314 114.51232147]
[87.25437164 116.39232635]
[74.39147186 124.10891724]
[61.52857590 131.82551575]
[48.66567612 139.54209900]
[35.80277634 147.25869751]
[34.57297897 164.07456970]
[23.70186615 176.74549866]
[7.59092283 180.44314575]
[-7.41393280 173.91275024]
[-20.07885170 181.95014954]
[-24.96769333 197.23016357]
[-40.01286316 202.79994202]
[-53.67299271 194.38682556]
[-55.46920013 178.44465637]
[-44.02359009 167.20286560]
[-28.11625290 169.28523254]
[-15.45133495 161.24783325]
[-15.84204865 147.84107971]
[-9.48111057 135.90969849]
[2.05169296 128.64591980]
[15.77720070 128.05342102]
[28.08618164 134.39579773]
[40.94908142 126.67919922]
[53.81198120 118.96260834]
[66.67488098 111.24601746]
[79.53778076 103.52942657]
[79.16082764 88.53415680]
[65.92646027 81.47360229]
[52.69209290 74.41304016]
[39.45772552 67.35248566]
[25.01915932 73.35763550]
[10.11409473 68.62761688]
[1.78024626 55.39580154]
[3.95260262 39.90984344]
[15.60544300 29.48174095]
[31.23665237 29.03532410]
[43.46565247 38.78137970]
[46.51828384 54.11811447]
[59.75265121 61.17867279]
[72.98702240 68.23923492]
[86.22138977 75.29978943]
[91.93970490 70.44686890]
[103.37634277 60.74103165]
[109.09466553 55.88811493]
[104.28050995 41.68163681]
[99.46635437 27.47516441]
[85.77601624 19.11130333]
[83.92240906 3.17569208]
[95.32746124 -8.10723114]
[111.24218750 -6.08217430]
[119.45818329 7.69741249]
[113.67282867 22.66100883]
[118.48698425 36.86748505]
[123.30113983 51.07395935]
[127.44709778 62.80178452]
[128.15695190 74.08846283]
[125.79077911 84.09243011]
[120.89546967 92.10005951]
[114.16806030 97.56442261]
[106.41138458 100.13449860]
[120.78920746 104.40979004]
[130.02207947 103.86103058]
[135.47213745 108.97738647]
[149.73799133 113.61264801]
[164.00384521 118.24790192]
[178.26968384 122.88315582]
[192.22451782 115.96214294]
[206.62608337 120.86617279]
[213.13821411 134.21263123]
[227.40406799 138.84788513]
[241.66990662 143.48313904]
[255.93576050 148.11839294]
[270.20159912 152.75364685]
[284.46746826 157.38890076]
[297.00695801 148.44090271]
[312.23297119 148.59056091]
[324.30844116 157.57093811]
[328.72750854 171.76986694]
[342.99337769 176.40512085]
[356.94821167 169.48411560]
[371.34976196 174.38813782]
[377.86190796 187.73458862]
[392.12774658 192.36984253]
[406.39358521 197.00509644]
[420.65942383 201.64036560]
[434.92529297 206.27561951]
[449.19113159 210.91087341]
[464.70684814 207.81674194]
[474.42022705 219.10830688]
[488.68606567 223.74356079]
[502.95193481 228.37881470]
[519.88427734 227.52296448]
[525.39398193 243.55664062]
[511.51217651 253.28962708]
[498.31668091 242.64465332]
[484.05081177 238.00939941]
[469.78497314 233.37414551]
[455.28967285 236.79981995]
[444.55587769 225.17671204]
[430.29003906 220.54145813]
[416.02416992 215.90620422]
[401.75833130 211.27095032]
[387.49249268 206.63569641]
[373.22665405 202.00044250]
[360.11337280 208.97021484]
[345.57974243 204.47262573]
[338.35812378 190.67097473]
[324.09225464 186.03572083]
[312.17123413 194.92543030]
[297.12344360 195.09291077]
[284.71737671 186.26437378]
[279.83218384 171.65475464]
[265.56634521 167.01948547]
[251.30050659 162.38423157]
[237.03465271 157.74897766]
[222.76881409 153.11372375]
[208.50296021 148.47846985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 68]
[7 67]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[16 24]
[17 23]
[34 48]
[35 47]
[36 46]
[37 45]
[51 61]
[52 60]
[53 59]
[76 124]
[77 123]
[78 122]
[79 121]
[80 120]
[81 119]
[85 115]
[86 114]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
[94 106]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
