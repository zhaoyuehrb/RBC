%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUGCGCGGGCGGCGGACGGGGCGCUCUCCUCCCGUCUGACUCUGGGCGGAGCGGGGCUCGAGGCUGCUGGAGUCGCUCGCUGACUCGCCCUGCGCCCUCGCCGCGGACACCGGAGCUGCGGCCGCUCCCCGCUGUCCCCCAGAG\
) } def
/len { sequence length } bind def

/coor [
[127.37432098 104.73085022]
[126.92070770 112.57044220]
[124.14835358 120.44652557]
[119.02560425 127.66131592]
[111.73180389 133.50912476]
[102.65736389 137.33988953]
[96.77035522 151.13638306]
[99.27429199 167.34323120]
[86.32296753 177.40281677]
[71.23959351 170.96669006]
[69.54064941 154.65579224]
[82.97386169 145.24935913]
[88.86087036 131.45288086]
[83.67133331 126.03820801]
[73.29224396 115.20886230]
[68.10270691 109.79419708]
[54.06879425 115.09036255]
[40.03488541 120.38652802]
[26.00097466 125.68269348]
[11.96706486 130.97885132]
[-2.06684566 136.27502441]
[-16.10075569 141.57118225]
[-30.13466644 146.86735535]
[-44.16857529 152.16351318]
[-48.13943481 167.16390991]
[-60.19017792 176.93934631]
[-75.68704987 177.73097229]
[-88.67118073 169.23439026]
[-94.14991760 154.71672058]
[-90.01656342 139.76026917]
[-77.86048126 130.11613464]
[-62.35593796 129.49267578]
[-49.46474075 138.12960815]
[-35.43083191 132.83343506]
[-21.39692116 127.53727722]
[-7.36301088 122.24111176]
[6.67089939 116.94494629]
[20.70480919 111.64878082]
[34.73871994 106.35261536]
[48.77262878 101.05644989]
[62.80654144 95.76028442]
[86.86842346 72.27633667]
[112.95919800 79.89651489]
[124.62973785 70.47322083]
[136.30027771 61.04991913]
[147.97080994 51.62661743]
[159.64134216 42.20331955]
[171.31187439 32.78001785]
[182.98242188 23.35671806]
[187.73614502 15.47376919]
[195.00213623 13.86042690]
[206.87005615 4.68696213]
[218.73797607 -4.48650360]
[230.40852356 -13.90980339]
[241.87641907 -23.57869148]
[253.34431458 -33.24758148]
[264.81219482 -42.91646957]
[276.28009033 -52.58535767]
[287.74798584 -62.25424576]
[284.09573364 -80.10079956]
[291.70913696 -97.46226501]
[308.57846069 -107.63369751]
[328.96496582 -106.15962982]
[334.26113892 -120.19354248]
[339.55728149 -134.22744751]
[344.85345459 -148.26135254]
[342.48703003 -163.90458679]
[354.21969604 -173.08027649]
[359.51586914 -187.11418152]
[364.81204224 -201.14810181]
[355.54019165 -218.89924622]
[362.10537720 -237.49896240]
[379.91152954 -245.25500488]
[384.30389404 -259.59750366]
[388.69622803 -273.94000244]
[393.08856201 -288.28250122]
[397.48089600 -302.62500000]
[401.87326050 -316.96749878]
[395.64834595 -331.75366211]
[403.45364380 -345.76995850]
[419.30160522 -348.26431274]
[431.03500366 -337.32327271]
[429.65301514 -321.33984375]
[416.21575928 -312.57516479]
[411.82339478 -298.23266602]
[407.43106079 -283.89016724]
[403.03872681 -269.54766846]
[398.64639282 -255.20516968]
[394.25402832 -240.86267090]
[401.40811157 -233.33653259]
[404.78430176 -223.43115234]
[403.69924927 -212.94102478]
[398.28439331 -203.79675293]
[389.47433472 -197.70971680]
[378.84594727 -195.85192871]
[373.54977417 -181.81802368]
[368.25363159 -167.78411865]
[370.99887085 -153.14468384]
[358.88735962 -142.96519470]
[353.59121704 -128.93128967]
[348.29504395 -114.89737701]
[342.99887085 -100.86346436]
[350.72747803 -88.00777435]
[365.60598755 -86.10250854]
[380.48449707 -84.19724274]
[395.36300659 -82.29197693]
[410.24151611 -80.38671112]
[425.12002563 -78.48143768]
[439.99850464 -76.57617188]
[449.84115601 -88.45583344]
[464.55081177 -93.10653687]
[479.43374634 -89.04425049]
[489.74081421 -77.56524658]
[492.18310547 -62.33243179]
[485.98129272 -48.20653534]
[473.11431885 -39.69508362]
[457.68801880 -39.51405334]
[444.62487793 -47.72120285]
[438.09326172 -61.69766617]
[423.21475220 -63.60293579]
[408.33624268 -65.50820160]
[393.45773315 -67.41346741]
[378.57922363 -69.31873322]
[363.70071411 -71.22400665]
[348.82220459 -73.12927246]
[344.12274170 -59.51412582]
[334.47879028 -49.38273621]
[321.88287354 -44.32948685]
[308.74142456 -44.94923782]
[297.41687012 -50.78635406]
[285.94897461 -41.11746597]
[274.48107910 -31.44857597]
[263.01318359 -21.77968597]
[251.54530334 -12.11079788]
[240.07740784 -2.44190955]
[238.78689575 2.22187805]
[234.51139832 6.09730148]
[227.91145325 7.38141680]
[216.04353333 16.55488205]
[204.17561340 25.72834778]
[192.40571594 35.02725220]
[180.73518372 44.45055389]
[169.06465149 53.87385559]
[157.39410400 63.29715347]
[145.72357178 72.72045135]
[134.05303955 82.14375305]
[122.38249969 91.56705475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 13]
[7 12]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[43 147]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[51 140]
[52 139]
[53 138]
[54 135]
[55 134]
[56 133]
[57 132]
[58 131]
[59 130]
[63 102]
[64 101]
[65 100]
[66 99]
[68 97]
[69 96]
[70 95]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
