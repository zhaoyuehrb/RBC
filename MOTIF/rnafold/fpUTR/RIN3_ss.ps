%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGGAGCGAGAGCCCCAGAGCGCGGCGGCAGCGGCGGCCUGGCCCUUCCAGAGGGCCAGAGCCAGGGACAUGCGGGCGCCCGGGACUCCGCGUUCCGCGCGGCCCGGCGCCUGAGCGCCUCCGUUCCCCGUCCCGGAGCUGCCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[30.78782272 294.25924683]
[27.59431076 306.26809692]
[19.62580681 315.70843506]
[8.45528221 320.81256104]
[-3.75274324 320.65942383]
[-10.84914684 333.87460327]
[-17.94555092 347.08981323]
[-19.26388741 356.19241333]
[-25.32574081 360.50128174]
[-32.69197845 373.56796265]
[-31.98265457 389.95175171]
[-45.96019363 398.52850342]
[-60.24570465 390.47515869]
[-60.14347839 374.07632446]
[-45.75867462 366.20172119]
[-38.39243698 353.13504028]
[-31.16073227 339.99340820]
[-24.06432915 326.77822876]
[-16.96792603 313.56301880]
[-25.37854195 298.09005737]
[-22.84135056 280.50457764]
[-10.17896271 267.81860352]
[7.71135950 265.20339966]
[14.25922966 251.70802307]
[14.35006714 244.27136230]
[21.08259010 238.00486755]
[27.90616608 224.64677429]
[26.80549049 209.79289246]
[39.97363281 201.02301025]
[46.79720688 187.66491699]
[53.62078476 174.30682373]
[60.44435883 160.94871521]
[67.26793671 147.59062195]
[74.09150696 134.23251343]
[80.91508484 120.87442017]
[75.79042053 114.62435150]
[72.64269257 107.18005371]
[71.72895813 99.14944458]
[73.12381744 91.18829346]
[60.61978149 82.90281677]
[48.11574554 74.61734009]
[35.52730560 66.46067810]
[22.85579109 58.43367767]
[10.18427467 50.40668106]
[-2.48724174 42.37968445]
[-15.15875816 34.35268784]
[-27.83027458 26.32568932]
[-40.50178909 18.29869270]
[-53.17330551 10.27169609]
[-65.84481812 2.24469852]
[-82.46080780 -1.12359345]
[-83.82391357 -18.02265549]
[-67.96261597 -24.01061440]
[-57.81782532 -10.42681694]
[-45.14630890 -2.39982033]
[-32.47479248 5.62717676]
[-19.80327606 13.65417385]
[-7.13176060 21.68117142]
[5.53975534 29.70816803]
[18.21127129 37.73516464]
[30.88278770 45.76216125]
[43.55430222 53.78915787]
[50.93335724 54.71747971]
[56.40121841 62.11330414]
[68.90525818 70.39878082]
[81.40929413 78.68425751]
[101.16119385 71.74001312]
[120.27680206 80.28131104]
[133.41842651 73.04960632]
[146.56005859 65.81790161]
[159.70169067 58.58620071]
[172.84332275 51.35449600]
[171.77529907 34.95517731]
[179.23585510 19.71319199]
[193.72837830 9.89378929]
[211.71878052 8.53289604]
[228.49212646 16.51973724]
[239.26080322 6.07772827]
[250.02949524 -4.36428070]
[260.79815674 -14.80628967]
[271.56683350 -25.24829865]
[282.33551025 -35.69030762]
[293.10421753 -46.13231659]
[297.11999512 -54.40693283]
[304.20281982 -56.67534256]
[315.18362427 -66.89405060]
[326.16442871 -77.11275482]
[327.72402954 -82.22381592]
[330.80627441 -85.83010101]
[334.56576538 -87.60090637]
[338.15008545 -87.59671021]
[349.73913574 -97.12004852]
[361.32815552 -106.64338684]
[372.91720581 -116.16672516]
[384.50625610 -125.69006348]
[396.09530640 -135.21339417]
[404.49392700 -149.94091797]
[420.97085571 -145.94750977]
[421.69476318 -129.00901794]
[405.61865234 -123.62435150]
[394.02960205 -114.10101318]
[382.44055176 -104.57767487]
[370.85150146 -95.05433655]
[359.26245117 -85.53099823]
[347.67340088 -76.00765991]
[336.38311768 -66.13195801]
[325.40234375 -55.91324997]
[314.42153931 -45.69454193]
[303.54620361 -35.36363983]
[292.77752686 -24.92162895]
[282.00885010 -14.47961998]
[271.24017334 -4.03761101]
[260.47149658 6.40439796]
[249.70281982 16.84640694]
[238.93414307 27.28841591]
[242.29339600 41.90742493]
[256.54010010 46.60122299]
[270.78677368 51.29502487]
[285.03347778 55.98882675]
[299.28015137 60.68262482]
[315.21575928 56.81105804]
[326.33911133 68.86106873]
[321.20748901 84.43663788]
[305.09985352 87.51496124]
[294.58636475 74.92932129]
[280.33966064 70.23551941]
[266.09298706 65.54171753]
[251.84628296 60.84791565]
[237.59959412 56.15411758]
[226.07357788 70.25505066]
[209.73071289 76.66311646]
[192.99578857 74.33235931]
[180.07502747 64.49613190]
[166.93339539 71.72782898]
[153.79176331 78.95953369]
[140.65013123 86.19123840]
[127.50849915 93.42294312]
[127.27674866 107.48027039]
[120.30530548 119.68933868]
[108.31671143 127.03345490]
[94.27318573 127.69799805]
[87.44960785 141.05609131]
[80.62603760 154.41419983]
[73.80245972 167.77229309]
[66.97888184 181.13040161]
[60.15530777 194.48849487]
[53.33173370 207.84658813]
[53.94433975 223.65592957]
[41.26426315 231.47033691]
[34.44068909 244.82844543]
[27.75461388 258.25588989]
[21.20674324 271.75128174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[9 16]
[10 15]
[23 152]
[24 151]
[26 150]
[27 149]
[29 147]
[30 146]
[31 145]
[32 144]
[33 143]
[34 142]
[35 141]
[39 66]
[40 65]
[41 64]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[68 137]
[69 136]
[70 135]
[71 134]
[72 133]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[85 108]
[86 107]
[87 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
