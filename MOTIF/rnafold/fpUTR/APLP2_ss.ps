%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGAGGGCGUGGUAAUAUGAAGUCAGUUCCGGUUGGUGUAAAACCCCCGGGGCGGCGGCGAACUGGCUUUAGAUGCUUCUGGGUCGCGGUGUGCUAAGCGAGGAGUCCGAGUGUGUGAGCUUGAGAGCCGCGCGCUAGAGCGACCCGGCGAGGG\
) } def
/len { sequence length } bind def

/coor [
[381.40756226 286.39849854]
[367.89404297 292.90887451]
[353.10971069 295.44326782]
[338.19937134 293.80548096]
[324.31768799 288.12231445]
[312.53955078 278.83383179]
[303.77706909 266.65933228]
[298.70874023 252.54153442]
[297.72702026 237.57368469]
[300.90798950 222.91485596]
[308.00527954 209.70014954]
[318.46929932 198.95286560]
[331.48980713 191.50524902]
[346.05361938 187.93450928]
[331.71585083 183.52674866]
[317.37808228 179.11898804]
[303.04031372 174.71124268]
[292.57983398 182.28913879]
[279.46893311 182.44387817]
[268.51141357 174.89389038]
[263.85180664 162.22174072]
[249.60449219 157.52980042]
[235.35719299 152.83784485]
[221.10989380 148.14590454]
[206.86259460 143.45394897]
[192.61529541 138.76200867]
[178.36798096 134.07005310]
[164.12068176 129.37809753]
[149.87338257 124.68615723]
[135.62608337 119.99420929]
[121.37877655 115.30225372]
[107.13147736 110.61030579]
[74.15416718 141.67825317]
[59.26078415 139.89297485]
[44.36740494 138.10769653]
[33.72919083 145.46380615]
[21.33098793 143.63563538]
[13.77014828 134.14942932]
[-1.08479393 132.06838989]
[-15.93973637 129.98736572]
[-29.56231308 138.46113586]
[-44.63210297 132.95832825]
[-49.58885574 117.70021057]
[-40.63016891 104.39151001]
[-24.62838745 103.24152374]
[-13.85870266 115.13242340]
[0.99623901 117.21345520]
[15.85118103 119.29448700]
[31.70916557 111.83289337]
[46.15267563 123.21432495]
[61.04605865 124.99959564]
[75.93943787 126.78486633]
[79.11658478 119.99106598]
[85.47087097 106.40345764]
[88.64801025 99.60965729]
[77.72982788 89.32406616]
[61.65423965 86.08256531]
[56.68082809 70.45574951]
[67.92581940 58.51915741]
[83.82132721 62.55212784]
[88.01541901 78.40588379]
[98.93360138 88.69147491]
[111.82342529 96.36300659]
[126.07072449 101.05495453]
[140.31802368 105.74690247]
[154.56533813 110.43885040]
[168.81263733 115.13080597]
[183.05993652 119.82275391]
[197.30723572 124.51470184]
[211.55453491 129.20664978]
[225.80183411 133.89860535]
[240.04914856 138.59054565]
[254.29644775 143.28250122]
[268.54376221 147.97444153]
[283.98480225 139.80863953]
[300.24301147 145.20448303]
[307.44805908 160.37347412]
[321.78582764 164.78121948]
[336.12359619 169.18898010]
[350.46136475 173.59672546]
[359.74099731 171.44534302]
[367.22744751 175.43760681]
[382.18005371 174.24584961]
[397.13262939 173.05409241]
[412.08520508 171.86235046]
[427.03778076 170.67059326]
[441.99035645 169.47883606]
[456.94296265 168.28709412]
[471.89553833 167.09533691]
[486.84811401 165.90357971]
[501.75851440 164.26646423]
[516.61346436 162.18542480]
[531.46838379 160.10440063]
[546.32336426 158.02336121]
[561.17828369 155.94233704]
[576.03320312 153.86129761]
[590.88818359 151.78025818]
[579.10833740 142.49391174]
[575.88989258 127.84326935]
[582.69274902 114.47460938]
[596.43084717 108.45262146]
[610.87188721 112.50917816]
[619.46472168 124.80402374]
[618.31121826 139.75959778]
[607.93286133 150.59216309]
[622.93286133 150.59216309]
[632.61999512 142.02221680]
[645.14764404 142.36177063]
[653.78375244 150.88067627]
[668.78082275 151.17890930]
[683.78009033 151.32803345]
[698.78009033 151.32803345]
[713.78009033 151.32803345]
[728.78009033 151.32803345]
[743.78009033 151.32803345]
[754.77673340 139.97689819]
[770.58013916 139.80979919]
[781.81439209 150.92588806]
[781.81439209 166.73017883]
[770.58013916 177.84626770]
[754.77673340 177.67916870]
[743.78009033 166.32803345]
[728.78009033 166.32803345]
[713.78009033 166.32803345]
[698.78009033 166.32803345]
[683.78009033 166.32803345]
[677.05450439 169.49015808]
[668.48254395 166.17593384]
[653.48553467 165.87770081]
[638.62835693 175.17366028]
[622.93286133 165.59216309]
[607.93286133 165.59216309]
[592.96917725 166.63520813]
[578.11425781 168.71623230]
[563.25933838 170.79727173]
[548.40435791 172.87831116]
[533.54943848 174.95933533]
[518.69445801 177.04037476]
[503.83953857 179.12139893]
[501.41815186 181.75497437]
[497.57836914 183.31999207]
[492.84909058 183.15257263]
[488.03985596 180.85617065]
[473.08728027 182.04791260]
[458.13470459 183.23966980]
[443.18212891 184.43142700]
[428.22955322 185.62316895]
[413.27694702 186.81492615]
[398.32437134 188.00668335]
[383.37179565 189.19842529]
[368.41921997 190.39018250]
[381.86532593 197.03865051]
[392.95870972 207.13500977]
[400.84039307 219.89743042]
[404.89996338 234.33764648]
[404.82312012 249.33744812]
[400.61581421 263.73532104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 80]
[15 79]
[16 78]
[17 77]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 52]
[34 51]
[35 50]
[38 48]
[39 47]
[40 46]
[55 62]
[56 61]
[82 151]
[83 150]
[84 149]
[85 148]
[86 147]
[87 146]
[88 145]
[89 144]
[90 143]
[91 139]
[92 138]
[93 137]
[94 136]
[95 135]
[96 134]
[97 133]
[105 132]
[106 131]
[109 129]
[110 128]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
