%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGAAGAACCAGGAGUUUGGCGUGACCAUGGUGAGAGAAGACGGUCCAAGAAGGGACGUUAUCAGGCCACUUUUUGGGUGGAGAAGGAGGGGAAGCAAAAGAAAACAAGGAAGUAUGCGACC\
) } def
/len { sequence length } bind def

/coor [
[365.52175903 363.11941528]
[349.13949585 364.39022827]
[332.96328735 361.44729614]
[318.05981445 354.47930908]
[305.41308594 343.94064331]
[295.85958862 330.52157593]
[290.03298950 315.10311890]
[288.32199097 298.69924927]
[290.84451294 282.39004517]
[297.43951416 267.25082397]
[285.57788086 258.06924438]
[273.71624756 248.88763428]
[261.85461426 239.70605469]
[249.99296570 230.52445984]
[238.13133240 221.34286499]
[226.26969910 212.16128540]
[214.16143799 213.36509705]
[204.18762207 205.71421814]
[202.08142090 192.91366577]
[190.45619202 183.43453979]
[178.83096313 173.95539856]
[167.20571899 164.47627258]
[152.45236206 162.42990112]
[146.64654541 147.71246338]
[135.02130127 138.23333740]
[123.39607239 128.75421143]
[110.47368622 135.55955505]
[95.92556763 136.84533691]
[82.00988770 132.41197205]
[70.88664246 122.94760895]
[64.28237915 109.92129517]
[63.22222900 95.35500336]
[49.02848816 90.50343323]
[36.41568756 99.54206085]
[20.89919853 99.40718842]
[8.44542885 90.15066528]
[3.84310555 75.33181763]
[8.86191750 60.64879227]
[21.57202721 51.74751663]
[37.08613968 52.05070877]
[49.43876266 61.44178772]
[53.88005829 76.30969238]
[68.07379913 81.16126251]
[71.27021790 76.57394409]
[75.12019348 72.51953888]
[67.51075745 59.59296036]
[59.90131760 46.66638184]
[52.29188156 33.73979950]
[36.93121338 30.02154541]
[28.77021790 16.48737907]
[32.65066528 1.16688108]
[46.27035904 -6.85056829]
[61.54897690 -2.80835819]
[69.42198181 10.89533997]
[65.21846008 26.13036346]
[72.82789612 39.05694580]
[80.43733978 51.98352432]
[88.04677582 64.91010284]
[105.45063019 63.33296967]
[121.64320374 69.90428162]
[133.02604675 83.16371155]
[137.06958008 100.16463470]
[132.87519836 117.12897491]
[144.50042725 126.60810089]
[156.12567139 136.08723450]
[171.71054077 138.81161499]
[176.68486023 152.85104370]
[188.31008911 162.33016968]
[199.93531799 171.80929565]
[211.56056213 181.28843689]
[229.75564575 183.75228882]
[235.45129395 200.29965210]
[247.31292725 209.48123169]
[259.17456055 218.66282654]
[271.03619385 227.84442139]
[282.89782715 237.02600098]
[294.75946045 246.20759583]
[306.62109375 255.38919067]
[317.20581055 246.71615601]
[329.37936401 240.48075867]
[342.58978271 236.96252441]
[356.23876953 236.31785583]
[369.70883179 238.57313538]
[382.39114380 243.62355042]
[393.71301270 251.23803711]
[403.16390991 261.06982422]
[410.31835938 272.67221069]
[414.85516357 285.51892090]
[416.57171631 299.02786255]
[415.39318848 312.58767700]
[411.37570190 325.58520508]
[404.70367432 337.43338013]
[415.83386230 347.48913574]
[431.39834595 346.86871338]
[442.54269409 357.22525024]
[443.03826904 372.06741333]
[454.16848755 382.12319946]
[465.29867554 392.17898560]
[478.40353394 384.62130737]
[493.20285034 381.48516846]
[508.24673462 383.07775879]
[522.06134033 389.24310303]
[533.29333496 399.37713623]
[540.84216309 412.48703003]
[543.96844482 427.28845215]
[542.36572266 442.33126831]
[536.19116211 456.14175415]
[526.04962158 467.36691284]
[512.93463135 474.90701294]
[498.13113403 478.02331543]
[483.08938599 476.41055298]
[469.28302002 470.22671509]
[458.06466675 460.07766724]
[450.53338623 446.95764160]
[447.42700195 432.15203857]
[449.04983521 417.11138916]
[455.24291992 403.30917358]
[444.11270142 393.25341797]
[432.98251343 383.19763184]
[418.16635132 384.20617676]
[406.73547363 374.16674805]
[405.77810669 358.61935425]
[394.64788818 348.56356812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[19 70]
[20 69]
[21 68]
[22 67]
[24 65]
[25 64]
[26 63]
[32 43]
[33 42]
[45 58]
[46 57]
[47 56]
[48 55]
[92 123]
[93 122]
[96 119]
[97 118]
[98 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
