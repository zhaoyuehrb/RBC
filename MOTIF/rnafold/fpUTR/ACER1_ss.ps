%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCAGGGCCCAGCCUUCCCAAGCUCGCCUUCUCUCUGCCGGGCGCAGCCGGCUGGUGGUGGCCACUGAGACAAG\
) } def
/len { sequence length } bind def

/coor [
[89.59926605 282.08541870]
[91.21119690 266.53112793]
[102.48000336 255.68919373]
[101.28825378 240.73660278]
[97.51541138 234.14210510]
[100.35846710 225.16787720]
[99.76211548 210.17973328]
[99.16577148 195.19158936]
[98.56941986 180.20346069]
[97.67519379 165.23013306]
[96.48344421 150.27755737]
[95.29169464 135.32496643]
[94.09993744 120.37238312]
[81.34545135 110.09220123]
[79.71950531 93.79142761]
[90.19207764 81.19442749]
[88.40680695 66.30104828]
[86.62153625 51.40766525]
[74.47937775 41.65032578]
[72.88101959 26.52088547]
[82.25798035 15.00532341]
[80.47270203 0.11194234]
[71.28327179 -6.32317686]
[67.38003540 -16.60263634]
[69.87915802 -27.08130646]
[77.67234039 -34.19183731]
[77.07599640 -49.17997742]
[76.47964478 -64.16811371]
[75.58541870 -79.14144135]
[74.39366913 -94.09402466]
[73.20191956 -109.04660797]
[72.01016235 -123.99918365]
[70.81841278 -138.95176697]
[56.91485214 -145.47761536]
[48.15011215 -158.09010315]
[46.88186264 -173.39654541]
[53.45125198 -187.27957153]
[66.09115601 -196.00474548]
[81.40149689 -197.22500610]
[95.26387024 -190.61213684]
[103.94937134 -177.94494629]
[105.12164307 -162.63085938]
[98.46534729 -148.78927612]
[85.77099609 -140.14352417]
[86.96274567 -125.19094086]
[88.15449524 -110.23835754]
[89.34625244 -95.28577423]
[90.53800201 -80.33319092]
[94.31084442 -73.73870087]
[91.46778870 -64.76446533]
[92.06414032 -49.77632523]
[92.66048431 -34.78818512]
[104.28599548 -19.54411888]
[95.36608887 -1.67333055]
[97.15135956 13.22005081]
[108.98430634 22.19317627]
[111.00698853 37.27175140]
[101.51491547 49.62239075]
[103.30018616 64.51576996]
[105.08546448 79.40915680]
[116.02851105 86.11001587]
[121.10481262 97.89487457]
[118.45635986 110.45024872]
[109.05252075 119.18063354]
[110.24427032 134.13320923]
[111.43602753 149.08580017]
[112.62777710 164.03837585]
[116.51872253 172.61045837]
[113.55756378 179.60710144]
[114.15390778 194.59524536]
[114.75025940 209.58338928]
[115.34660339 224.57153320]
[116.24083710 239.54484558]
[117.43258667 254.49743652]
[130.27647400 263.41754150]
[134.33181763 278.52014160]
[127.68380737 292.67422485]
[113.47142792 299.19665527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 67]
[11 66]
[12 65]
[13 64]
[16 60]
[17 59]
[18 58]
[21 55]
[22 54]
[26 52]
[27 51]
[28 50]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
