%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCCUUCGAGGAGAGGUCGGCAUCUUUGUUCCCUGCCCGGCCAUUGUUCGUGCCGCGCUUCUAGCAACGCCGGGCCGGUAACCCCCUCUCCCUCCUUGCGCGUUCCGGGUCUCGCAAGCGCCUCCAAGGUUUGUCUUGAAGCAUAGCUCCAGCUGGAGGGUACCUUUUAAGCUGUUCAAGGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[109.99429321 176.31278992]
[103.41893768 189.79479980]
[92.30657959 199.87030029]
[78.24696350 205.09785461]
[63.25148773 204.72961426]
[49.46541214 198.81826782]
[38.86098862 188.20947266]
[32.95530701 174.42097473]
[32.59323120 159.42533875]
[37.82656860 145.36788940]
[47.90662766 134.25967407]
[61.39134216 127.68985748]
[76.35334015 126.59853363]
[61.64764023 123.64178467]
[46.94194031 120.68502808]
[32.23624039 117.72827148]
[17.53054047 114.77151489]
[2.82484174 111.81475830]
[-11.88085747 108.85800171]
[-18.28535271 110.61268616]
[-23.78305817 109.08625031]
[-27.02026367 105.55271149]
[-41.62016296 102.11135101]
[-33.76994324 114.89313507]
[-35.83436966 129.75039673]
[-46.87199402 139.90769958]
[-61.84927368 140.73297119]
[-73.93605042 131.84985352]
[-77.62033081 117.30934906]
[-71.22196198 103.74244690]
[-57.65961456 97.33619690]
[-71.76440430 92.23180389]
[-85.86919403 87.12740326]
[-101.47871399 89.70683289]
[-110.81346893 78.10029602]
[-124.91825867 72.99589539]
[-140.52777100 75.57532501]
[-149.86253357 63.96878815]
[-163.96731567 58.86439133]
[-178.07211304 53.75999451]
[-192.17689514 48.65559769]
[-206.28169250 43.55120087]
[-220.38647461 38.44680023]
[-234.49127197 33.34240341]
[-246.49249268 38.10022736]
[-258.14245605 33.54504776]
[-263.38516235 22.63114548]
[-277.40362549 17.29423714]
[-291.42211914 11.95732975]
[-305.44058228 6.62042236]
[-319.45904541 1.28351450]
[-333.48284912 10.72486305]
[-350.20513916 9.96127701]
[-363.05261230 -0.50903887]
[-367.09310913 -16.41129684]
[-381.19790649 -21.51569366]
[-398.14926147 -21.22015190]
[-403.12585449 -37.42724228]
[-388.92980957 -46.69592285]
[-376.09350586 -35.62048340]
[-361.98870850 -30.51608658]
[-351.66754150 -39.00022888]
[-338.39468384 -41.29042816]
[-325.62338257 -36.68220139]
[-316.73007202 -26.28005791]
[-314.12213135 -12.73495293]
[-300.10366821 -7.39804459]
[-286.08520508 -2.06113720]
[-272.06674194 3.27577066]
[-258.04824829 8.61267853]
[-240.90791321 4.88347197]
[-229.38687134 19.23761368]
[-215.28208923 24.34201050]
[-201.17729187 29.44640923]
[-187.07249451 34.55080795]
[-172.96771240 39.65520477]
[-158.86291504 44.75960159]
[-144.75813293 49.86399841]
[-130.15747070 46.91946793]
[-119.81385803 58.89110565]
[-105.70906830 63.99550629]
[-91.10841370 61.05097580]
[-80.76480103 73.02261353]
[-66.66000366 78.12701416]
[-52.55521774 83.23140717]
[-38.17880249 87.51145172]
[-23.57890511 90.95281219]
[-8.92410183 94.15230560]
[5.78159714 97.10906219]
[20.48729706 100.06581879]
[35.19299698 103.02256775]
[49.89869690 105.97932434]
[64.60439301 108.93608093]
[79.31009674 111.89283752]
[78.45542145 94.35794830]
[89.42475891 82.23112488]
[104.55439758 81.46702576]
[113.57061768 69.47920990]
[122.58683014 57.49138641]
[131.60304260 45.50356674]
[140.61926270 33.51574707]
[142.13304138 13.42601204]
[160.21173096 6.59620905]
[168.82666016 -5.68316317]
[177.44158936 -17.96253586]
[186.05651855 -30.24190712]
[194.67144775 -42.52127838]
[195.85885620 -60.88879776]
[212.03216553 -67.68017578]
[220.44288635 -80.10030365]
[218.83482361 -96.06256104]
[230.41223145 -107.16857147]
[246.29389954 -104.89875031]
[254.29678345 -90.99430847]
[248.28175354 -76.12155151]
[232.86302185 -71.68958282]
[224.45230103 -59.26944733]
[226.42864990 -47.32402039]
[219.50787354 -36.90412140]
[206.95082092 -33.90634918]
[198.33589172 -21.62697792]
[189.72096252 -9.34760571]
[181.10603333 2.93176699]
[172.49110413 15.21113873]
[175.15715027 25.09821701]
[171.86271667 35.02588654]
[163.46928406 41.62958145]
[152.60708618 42.53196716]
[143.59086609 54.51978683]
[134.57464600 66.50760651]
[125.55843353 78.49542236]
[116.54222107 90.48324585]
[119.73788452 108.45967865]
[105.64718628 123.18666077]
[117.92655945 131.80158997]
[130.20593262 140.41651917]
[142.55610657 148.92964172]
[154.97624207 157.34036255]
[167.39636230 165.75108337]
[179.81649780 174.16181946]
[192.23663330 182.57254028]
[204.65676880 190.98326111]
[217.07690430 199.39399719]
[212.72282410 185.03982544]
[216.70663452 170.57853699]
[227.79724121 160.47909546]
[242.56727600 157.86256409]
[256.45233154 163.53755188]
[265.16146851 175.75027466]
[266.00332642 190.72662354]
[258.71771240 203.83845520]
[245.55612183 211.03376770]
[230.58593750 210.08900452]
[241.62179565 220.24822998]
[252.65765381 230.40745544]
[263.69351196 240.56666565]
[274.72937012 250.72589111]
[285.93170166 260.70126343]
[297.29742432 270.49005127]
[308.66314697 280.27883911]
[320.02886963 290.06762695]
[331.39459229 299.85641479]
[347.34188843 305.61138916]
[346.22644043 322.52862549]
[329.66159058 326.13992310]
[321.60580444 311.22213745]
[310.24008179 301.43334961]
[298.87435913 291.64456177]
[287.50863647 281.85577393]
[276.14291382 272.06698608]
[271.38143921 271.52499390]
[266.91503906 267.97448730]
[264.57012939 261.76174927]
[253.53428650 251.60252380]
[242.49842834 241.44331360]
[231.46257019 231.28408813]
[220.42671204 221.12486267]
[208.66616821 211.81411743]
[196.24604797 203.40339661]
[183.82591248 194.99267578]
[171.40577698 186.58193970]
[158.98564148 178.17121887]
[146.56550598 169.76049805]
[134.14538574 161.34976196]
[126.83092499 160.20039368]
[121.59100342 152.69589233]
[109.31163025 144.08096313]
[97.03225708 135.46603394]
[106.55493164 147.05561829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[22 87]
[23 86]
[31 85]
[32 84]
[33 83]
[35 81]
[36 80]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[55 61]
[56 60]
[97 132]
[98 131]
[99 130]
[100 129]
[101 128]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[109 117]
[110 116]
[134 188]
[135 187]
[136 186]
[137 184]
[138 183]
[139 182]
[140 181]
[141 180]
[142 179]
[143 178]
[153 177]
[154 176]
[155 175]
[156 174]
[157 173]
[158 170]
[159 169]
[160 168]
[161 167]
[162 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
