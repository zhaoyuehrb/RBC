%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGUGCCCAUCGAGGAGUCAGAGUGGAGGCUGCAGACUGUGGAGCCGGGAGCCGGCAGUAAGCCCAGAGGUCUCCACCCCACGGGAGGAAGGCUGAGGCCAAGACCCCGGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[95.00946808 119.12574768]
[85.99832916 131.11738586]
[76.98719788 143.10903931]
[67.97606659 155.10067749]
[65.27024841 163.96537781]
[58.55849838 167.28895569]
[49.22866058 179.03434753]
[40.05735016 190.90393066]
[31.04621506 202.89556885]
[31.86762428 218.91758728]
[19.75824928 229.44102478]
[4.00736618 226.39318848]
[-3.30229545 212.11213684]
[3.43661094 197.55307007]
[19.05457306 193.88444519]
[28.06570816 181.89280701]
[29.58817863 174.55958557]
[37.48327255 169.70451355]
[46.81311035 157.95912170]
[55.98442078 146.08953857]
[64.99555969 134.09790039]
[74.00669098 122.10625458]
[83.01782227 110.11461639]
[84.82587433 95.22398376]
[78.94637299 81.42429352]
[73.06687927 67.62460327]
[67.18737793 53.82490921]
[61.30787659 40.02521515]
[55.42837906 26.22552490]
[49.54887772 12.42583370]
[43.66938019 -1.37385821]
[37.78988266 -15.17354965]
[30.99797249 -28.54777908]
[23.32425117 -41.43629837]
[8.26777077 -45.42881393]
[0.66912705 -58.60892487]
[4.56816864 -72.93836975]
[-3.10555387 -85.82688904]
[-10.77927685 -98.71541595]
[-17.61923027 -85.36569214]
[-32.26412964 -82.12117004]
[-44.10246277 -91.33278656]
[-44.55632401 -106.32591248]
[-33.29684830 -116.23673248]
[-18.48235512 -113.88386536]
[-24.36185455 -127.68355560]
[-30.24135399 -141.48324585]
[-36.12085342 -155.28294373]
[-42.00035095 -169.08262634]
[-53.77127075 -181.28434753]
[-45.30492020 -195.97302246]
[-28.84656334 -191.90377808]
[-28.20066071 -174.96212769]
[-22.32116127 -161.16244507]
[-16.44166183 -147.36274719]
[-10.56216240 -133.56304932]
[-4.68266296 -119.76336670]
[2.10924482 -106.38913727]
[9.78296757 -93.50061798]
[17.45668983 -80.61209106]
[31.91240120 -77.21092224]
[39.87825012 -64.24944305]
[36.21277237 -49.11002350]
[43.88649368 -36.22150040]
[50.72644806 -49.57122040]
[65.37134552 -52.81574631]
[77.20967865 -43.60412979]
[77.66354370 -28.61099815]
[66.40406799 -18.70018578]
[51.58957291 -21.05304909]
[57.46907043 -7.25335741]
[63.34857178 6.54633427]
[69.22807312 20.34602547]
[75.10756683 34.14571762]
[80.98706818 47.94540787]
[86.86656952 61.74510193]
[92.74606323 75.54479218]
[98.62556458 89.34448242]
[102.87358093 86.97271729]
[108.49917603 86.51832581]
[114.60827637 88.59391785]
[120.07406616 93.40251923]
[123.71788788 100.66069794]
[137.09211731 107.45259857]
[150.46633911 114.24450684]
[163.84057617 121.03641510]
[175.98986816 111.86276245]
[190.85679626 108.88591766]
[205.48205566 112.64380646]
[216.97816467 122.33919525]
[223.09945679 136.00811768]
[222.68067932 150.91751099]
[236.05490112 157.70942688]
[249.42913818 164.50132751]
[265.76669312 163.08125305]
[274.94226074 176.67318726]
[267.51681519 191.29492188]
[251.12902832 191.90486145]
[242.63722229 177.87554932]
[229.26300049 171.08364868]
[215.88876343 164.29173279]
[204.09744263 173.42575073]
[189.44938660 176.54725647]
[174.83879089 172.98474121]
[163.17628479 163.39276123]
[156.80906677 149.63247681]
[157.04866028 134.41064453]
[143.67443848 127.61873627]
[130.30020142 120.82682800]
[116.92597961 114.03491974]
[129.24038696 122.59970093]
[133.73535156 136.91036987]
[128.52980042 150.97814941]
[115.80219269 158.91589355]
[100.87879944 157.40179443]
[90.00483704 147.06947327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[6 19]
[7 18]
[8 16]
[9 15]
[24 78]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[33 64]
[34 63]
[37 60]
[38 59]
[39 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[83 110]
[84 109]
[85 108]
[86 107]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
