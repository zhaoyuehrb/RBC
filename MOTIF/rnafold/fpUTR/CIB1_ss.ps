%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGGGAACGCCUGGCAGCUUUUAGGAGGGGGCGGGCCCGGGGGUGGUGGCCCCAGGAGCGGUUGCCGCGGGGACCGGGCAGUGACGCGGCCCAAGGGCGGAAGUGAGAAAGUUGUCUGCGUCUCGAGGCGAGUUGGCGGAGCUGUGCGCGCGGCGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[117.65380096 133.38330078]
[101.78456116 138.66410828]
[84.77316284 136.60615540]
[69.92546844 127.25676727]
[58.48658752 136.95996094]
[47.04770660 146.66316223]
[35.60882568 156.36634827]
[34.16625595 171.87625122]
[22.42737579 181.55371094]
[7.64995480 180.08285522]
[-3.78892756 189.78605652]
[-15.22780991 199.48924255]
[-26.66669083 209.19244385]
[-38.10557556 218.89562988]
[-34.89020157 232.53575134]
[-37.86152649 246.16329956]
[-46.38190460 257.12222290]
[-58.73792648 263.30187988]
[-72.48473358 263.54345703]
[-84.92972565 257.85684204]
[-96.55348969 267.33776855]
[-105.00584412 282.03451538]
[-121.46807098 277.98092651]
[-122.13010406 261.03991699]
[-106.03442383 255.71400452]
[-94.41065979 246.23307800]
[-97.38783264 230.37315369]
[-91.94218445 215.08331299]
[-79.46641541 204.55519104]
[-63.29400635 201.72538757]
[-47.80876923 207.45675659]
[-36.36988449 197.75355530]
[-24.93100357 188.05036926]
[-13.49212170 178.34716797]
[-2.05323935 168.64398193]
[-1.09429491 153.82452393]
[10.36813259 143.82116699]
[25.90563011 144.92747498]
[37.34451294 135.22427368]
[48.78339386 125.52108002]
[60.22227859 115.81788635]
[57.20736694 101.12400055]
[42.87174606 96.70925140]
[28.53612709 92.29450226]
[14.20050812 87.87975311]
[-0.13511145 83.46500397]
[-15.99207306 87.64696503]
[-27.34858704 75.81642914]
[-22.52204514 60.14363098]
[-6.47757959 56.75140762]
[4.27963829 69.12938690]
[18.61525726 73.54413605]
[32.95087814 77.95888519]
[47.28649521 82.37363434]
[61.62211609 86.78838348]
[71.39090729 72.82480621]
[85.67848206 64.44749451]
[101.68134308 62.83916473]
[116.44344330 67.89721680]
[127.40193176 78.32319641]
[140.88946533 71.75917816]
[145.84707642 59.81793594]
[157.25477600 54.63957214]
[168.74603271 58.51309586]
[182.35757446 52.21023941]
[195.96911621 45.90737915]
[209.58064270 39.60451889]
[223.19218445 33.30165863]
[236.80372620 26.99879837]
[250.41525269 20.69593811]
[264.02679443 14.39307690]
[251.20042419 6.61591625]
[249.08772278 -8.23455524]
[259.23626709 -19.28023720]
[274.21215820 -18.43007278]
[283.04541016 -6.30681276]
[279.26504517 8.20983791]
[293.41989136 3.24590707]
[303.88198853 -8.62231445]
[318.45266724 -5.53278542]
[332.60748291 -10.49671650]
[346.76232910 -15.46064663]
[360.91717529 -20.42457771]
[375.07199097 -25.38850784]
[381.97253418 -39.35348511]
[396.39825439 -44.18597794]
[409.66918945 -37.52132797]
[423.82403564 -42.48525620]
[437.97888184 -47.44918823]
[440.77325439 -67.30645752]
[462.29202271 -80.32874298]
[469.99966431 -93.19699860]
[477.70733643 -106.06524658]
[477.42956543 -122.46204376]
[491.62805176 -130.66784668]
[505.69659424 -122.24124146]
[505.16271973 -105.85078430]
[490.57559204 -98.35758209]
[482.86791992 -85.48933411]
[475.16024780 -72.62107849]
[478.69970703 -66.00880432]
[491.63320923 -73.60649872]
[504.56668091 -81.20420074]
[513.23663330 -93.44479370]
[528.20745850 -92.50930786]
[535.28613281 -79.28462982]
[527.76177979 -66.30831909]
[512.76831055 -65.88224792]
[499.27346802 -59.33324432]
[485.77862549 -52.78424454]
[489.31808472 -46.17196274]
[504.30068970 -45.44948578]
[518.45751953 -52.51311493]
[530.79736328 -44.17178345]
[545.77990723 -43.44930267]
[560.76251221 -42.72682571]
[575.74511719 -42.00434494]
[590.72772217 -41.28186417]
[605.71032715 -40.55938721]
[615.31970215 -52.74294662]
[630.26428223 -56.91897583]
[644.79754639 -51.48171234]
[653.33117676 -38.52188492]
[652.58374023 -23.02281952]
[642.84277344 -10.94422054]
[627.85375977 -6.93055487]
[613.38037109 -12.52515984]
[604.98779297 -25.57679558]
[590.00524902 -26.29927444]
[575.02264404 -27.02175331]
[560.04003906 -27.74423409]
[545.05743408 -28.46671295]
[530.07489014 -29.18919182]
[516.98968506 -22.07388496]
[503.57821655 -30.46689415]
[488.59561157 -31.18937302]
[461.71405029 -19.69757462]
[442.94281006 -33.29434967]
[428.78796387 -28.33041954]
[414.63311768 -23.36648941]
[408.43139648 -9.87300587]
[394.14709473 -4.63723373]
[380.03591919 -11.23367119]
[365.88110352 -6.26974058]
[351.72625732 -1.30581009]
[337.57141113 3.65812039]
[323.41659546 8.62205124]
[313.96691895 20.13521767]
[298.38381958 17.40074348]
[284.22897339 22.36467361]
[270.32965088 28.00461578]
[256.71810913 34.30747604]
[243.10658264 40.61033630]
[229.49504089 46.91319656]
[215.88351440 53.21605682]
[202.27197266 59.51891327]
[188.66043091 65.82177734]
[175.04888916 72.12463379]
[165.76257324 86.99121094]
[147.45349121 85.24671936]
[133.96594238 91.81073761]
[135.13868713 107.25945282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[6 39]
[7 38]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[20 26]
[21 25]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[60 161]
[61 160]
[64 158]
[65 157]
[66 156]
[67 155]
[68 154]
[69 153]
[70 152]
[71 151]
[77 150]
[78 149]
[80 147]
[81 146]
[82 145]
[83 144]
[84 143]
[87 140]
[88 139]
[89 138]
[91 100]
[92 99]
[93 98]
[111 136]
[112 135]
[114 133]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
