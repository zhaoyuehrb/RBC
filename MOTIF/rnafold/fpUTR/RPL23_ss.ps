%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACGUGAGGAGGGUGGGCGGGGCGUUAAAGUUCAUAUCCCAGUGUCCUUUGAAUCGACUUCCUUUUUUCUUUUUUCCGGCGUUCAAG\
) } def
/len { sequence length } bind def

/coor [
[142.89595032 369.62243652]
[153.95344543 358.86441040]
[150.86854553 344.18505859]
[147.78364563 329.50570679]
[132.39367676 324.91659546]
[121.30944824 313.16705322]
[117.58139038 297.35470581]
[122.30349731 281.71289062]
[134.29447937 270.47750854]
[130.70474243 255.91337585]
[127.11500549 241.34925842]
[123.52526855 226.78512573]
[119.93553162 212.22099304]
[116.34579468 197.65687561]
[112.75606537 183.09274292]
[109.16632843 168.52861023]
[98.60802460 158.02282715]
[102.81789398 142.77200317]
[99.22815704 128.20788574]
[95.63842773 113.64375305]
[86.09228516 103.42794800]
[89.79744720 89.94597626]
[86.20771027 75.38185120]
[70.36889648 71.00590515]
[58.91856384 59.35024261]
[54.87121582 43.61656952]
[59.22554398 28.06178093]
[70.72000885 16.84623528]
[66.62971497 2.41469097]
[62.53942490 -12.01685429]
[58.44913101 -26.44840050]
[54.35883713 -40.87994385]
[50.26854324 -55.31148911]
[36.75101089 -63.05191040]
[32.80845642 -77.74581909]
[40.27106476 -90.58501434]
[36.18077087 -105.01656342]
[32.09047699 -119.44810486]
[18.17086792 -126.93275452]
[13.70073605 -142.09169006]
[21.33213425 -155.93139648]
[36.53748703 -160.24101257]
[50.29573059 -152.46371460]
[54.44434357 -137.21365356]
[46.52202225 -123.53839874]
[50.61231613 -109.10685730]
[54.70261002 -94.67530823]
[67.79219818 -87.66116333]
[72.14591980 -73.08379364]
[64.70008850 -59.40178299]
[68.79038239 -44.97023773]
[72.88067627 -30.53869247]
[76.97097015 -16.10714722]
[81.06126404 -1.67560256]
[85.15155792 12.75594234]
[98.69274139 15.26181316]
[109.85955048 23.43397141]
[116.40628052 35.70056534]
[116.98541260 49.65943527]
[111.42450714 62.54845810]
[100.77184296 71.79211426]
[104.36157227 86.35624695]
[113.90771484 96.57205200]
[110.20255280 110.05402374]
[113.79228973 124.61814880]
[117.38201904 139.18228149]
[128.19708252 150.72978210]
[123.73045349 164.93887329]
[127.32019043 179.50300598]
[130.90992737 194.06713867]
[134.49966431 208.63125610]
[138.08940125 223.19538879]
[141.67912292 237.75952148]
[145.26885986 252.32363892]
[148.85859680 266.88775635]
[162.58680725 270.12207031]
[173.50057983 278.95046997]
[179.47479248 291.57955933]
[179.37850952 305.48352051]
[173.28858948 317.90908813]
[162.46299744 326.42080688]
[165.54789734 341.10015869]
[168.63279724 355.77951050]
[183.08532715 361.17654419]
[192.30740356 373.54412842]
[193.35629272 388.93579102]
[185.89729309 402.44012451]
[172.31056213 409.74795532]
[156.93156433 408.52734375]
[144.66767883 399.16781616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[18 66]
[19 65]
[20 64]
[22 62]
[23 61]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
