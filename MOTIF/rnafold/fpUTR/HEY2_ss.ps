%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGGCCGGCGCCGGCUCUUGCGGCCGAGCAGAGUUGCGGCGUGGGAAAGAGCCGCUAGGAGCAGACCGCGCCGCCGCCGGAGCCGCGCCUGCCCAGGCCCGGGGAGGGAGGAGGCGGGCGUCAGGGUGCUGCGCCCCGCUCGGCGUCCGAGCUUCCGGCCGGGCUGUGCCCCGCGCGGUCUUCGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[206.82476807 246.54376221]
[199.03833008 237.64569092]
[194.80488586 226.56053162]
[194.67695618 214.65303040]
[198.69961548 203.40010071]
[187.75164795 193.14620972]
[176.80368042 182.89233398]
[165.77220154 172.72834778]
[154.65794373 162.65496826]
[143.54367065 152.58158875]
[132.42939758 142.50820923]
[121.31513214 132.43481445]
[110.20086670 122.36143494]
[99.08660126 112.28804779]
[85.32418060 106.32182312]
[70.37435913 105.09600830]
[55.42452621 103.87018585]
[40.47469711 102.64437103]
[25.52486992 101.41855621]
[10.57504177 100.19274139]
[-3.81127310 106.77639771]
[-15.86367512 98.02488708]
[-30.81350327 96.79907227]
[-45.76333237 95.57325745]
[-60.71316147 94.34744263]
[-75.66298676 93.12162781]
[-74.86868286 99.13700867]
[-76.22292328 105.79732513]
[-79.93560791 112.41209412]
[-86.00988007 118.23919678]
[-99.56971741 124.65252686]
[-113.12955475 131.06585693]
[-122.01231384 144.85093689]
[-138.37649536 143.78063965]
[-145.38803101 128.95599365]
[-135.83406067 115.62731171]
[-119.54288483 117.50601196]
[-105.98303986 111.09268951]
[-92.42320251 104.67935944]
[-93.52667236 89.72000122]
[-107.88077545 85.36573029]
[-122.23487854 81.01146698]
[-136.58898926 76.65719604]
[-150.94308472 72.30292511]
[-165.29719543 67.94865417]
[-179.65130615 63.59438324]
[-188.36698914 74.86933136]
[-200.38397217 82.47386169]
[-214.24633789 85.51078796]
[-228.28277588 83.63485718]
[-240.80813599 77.09188080]
[-250.32571411 66.68672943]
[-255.70610046 53.68437958]
[-256.32116699 39.65614700]
[-270.60211182 35.06760406]
[-286.50869751 39.05665588]
[-297.72070312 27.08905411]
[-292.70413208 11.47603798]
[-276.61965942 8.27894115]
[-266.01358032 20.78666306]
[-251.73263550 25.37520790]
[-241.67346191 13.13980961]
[-227.65667725 5.68038130]
[-211.81245422 4.16404247]
[-196.56164551 8.85215187]
[-184.24574280 19.05583191]
[-176.76753235 33.23702621]
[-175.29702759 49.24027634]
[-160.94293213 53.59454727]
[-146.58882141 57.94881821]
[-132.23471069 62.30308914]
[-117.88060760 66.65735626]
[-103.52650452 71.01162720]
[-89.17240143 75.36589813]
[-74.43717194 78.17179871]
[-59.48734283 79.39761353]
[-44.53751755 80.62342834]
[-29.58768654 81.84924316]
[-14.63785839 83.07505798]
[-1.32085609 76.40372467]
[11.80085754 85.24291229]
[26.75068665 86.46872711]
[41.70051575 87.69454193]
[56.65034485 88.92036438]
[71.60017395 90.14617920]
[86.55000305 91.37199402]
[98.95344543 82.93668365]
[103.30771637 68.58258057]
[107.66198730 54.22847366]
[112.01625824 39.87436676]
[116.37052917 25.52026176]
[120.72480011 11.16615772]
[125.07907104 -3.18794727]
[129.43333435 -17.54205322]
[133.78761292 -31.89615822]
[123.40701294 -43.12961197]
[120.06501770 -57.95283127]
[124.56147766 -72.36283875]
[135.59320068 -82.51945496]
[150.12965393 -85.76865387]
[154.48391724 -100.12275696]
[158.83819580 -114.47686005]
[152.57408142 -129.24644470]
[160.34216309 -143.28340149]
[176.18344116 -145.81979370]
[187.94584656 -134.90991211]
[186.60626221 -118.92288971]
[173.19229126 -110.12258911]
[168.83802795 -95.76848602]
[164.48376465 -81.41438293]
[174.76521301 -70.63675690]
[178.29504395 -56.06293488]
[174.02793884 -41.58335876]
[163.01383972 -31.11501312]
[148.14170837 -27.54188728]
[143.78744507 -13.18778229]
[139.43318176 1.16632283]
[135.07890320 15.52042770]
[130.72463989 29.87453270]
[126.37036133 44.22863770]
[122.01609802 58.58274460]
[117.66182709 72.93685150]
[113.30755615 87.29095459]
[113.81800842 91.71827698]
[113.12759399 95.68641663]
[111.47451782 98.90647125]
[109.15998840 101.17378235]
[120.27425385 111.24716949]
[131.38851929 121.32054901]
[142.50279236 131.39393616]
[153.61705017 141.46731567]
[164.73132324 151.54071045]
[175.84558105 161.61408997]
[184.32037354 165.06620789]
[187.05757141 171.94436646]
[198.00553894 182.19825745]
[208.95349121 192.45213318]
[230.82374573 186.99435425]
[251.10304260 196.40168762]
[260.89627075 216.29042053]
[275.82406616 217.76068115]
[290.75183105 219.23092651]
[305.67959595 220.70118713]
[320.60736084 222.17144775]
[335.53512573 223.64170837]
[351.89065552 219.17698669]
[360.70852661 233.65736389]
[349.23510742 246.13920593]
[334.06488037 238.56947327]
[319.13711548 237.09921265]
[304.20935059 235.62896729]
[289.28155518 234.15870667]
[274.35379028 232.68844604]
[259.42602539 231.21818542]
[257.68109131 235.40539551]
[255.38092041 239.31520081]
[252.56854248 242.87442017]
[261.10504150 255.20843506]
[269.64154053 267.54244995]
[278.17803955 279.87649536]
[286.71453857 292.21051025]
[303.53500366 299.68582153]
[304.30361938 317.21112061]
[313.04080200 329.40380859]
[321.77795410 341.59652710]
[330.51513672 353.78921509]
[339.25228882 365.98193359]
[347.98947144 378.17462158]
[356.72662354 390.36730957]
[365.46377563 402.56002808]
[374.20095825 414.75271606]
[388.34164429 424.10565186]
[383.26876831 440.28286743]
[366.31945801 439.88653564]
[362.00827026 423.48989868]
[353.27108765 411.29718018]
[344.53393555 399.10449219]
[335.79675293 386.91180420]
[327.05960083 374.71908569]
[318.32241821 362.52639771]
[309.58526611 350.33367920]
[300.84808350 338.14099121]
[292.11093140 325.94830322]
[280.22167969 323.66442871]
[272.84448242 313.56399536]
[274.38052368 300.74700928]
[265.84402466 288.41299438]
[257.30752563 276.07897949]
[248.77102661 263.74493408]
[240.23452759 251.41091919]
[228.79470825 253.85241699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 137]
[6 136]
[7 135]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[30 39]
[31 38]
[32 37]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[54 61]
[55 60]
[87 123]
[88 122]
[89 121]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[100 110]
[101 109]
[102 108]
[140 154]
[141 153]
[142 152]
[143 151]
[144 150]
[145 149]
[157 190]
[158 189]
[159 188]
[160 187]
[161 186]
[163 183]
[164 182]
[165 181]
[166 180]
[167 179]
[168 178]
[169 177]
[170 176]
[171 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
