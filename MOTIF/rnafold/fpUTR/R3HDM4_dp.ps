%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:01 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (R3HDM4)
} def

/sequence { (\
CCCGUCACUUCCUGCCCGGCCCGGUGAAGGCCCUGCCGGGCGGCGGCGGCGGCGACAGCGUGCGAGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 49 0.004051164 ubox
1 52 0.047943273 ubox
2 46 0.043206033 ubox
2 48 0.003617657 ubox
2 49 0.078807242 ubox
2 51 0.035997252 ubox
2 52 0.941940409 ubox
3 45 0.044525926 ubox
3 48 0.091819618 ubox
3 51 0.978634947 ubox
3 54 0.096704234 ubox
3 64 0.010634753 ubox
4 44 0.045685625 ubox
4 47 0.093299224 ubox
4 50 0.981392262 ubox
4 53 0.097678854 ubox
4 56 0.012963587 ubox
4 63 0.010544884 ubox
5 43 0.038364744 ubox
5 46 0.092539794 ubox
5 49 0.981073262 ubox
5 52 0.097645363 ubox
5 55 0.012981516 ubox
6 42 0.035297466 ubox
6 45 0.090614506 ubox
6 48 0.980398198 ubox
6 51 0.097560655 ubox
6 54 0.012979178 ubox
6 62 0.010117954 ubox
7 61 0.010298652 ubox
8 43 0.046692416 ubox
8 46 0.973625160 ubox
8 49 0.096995354 ubox
8 52 0.012512316 ubox
8 60 0.010278736 ubox
9 42 0.040003535 ubox
9 45 0.962145194 ubox
9 46 0.029656788 ubox
9 48 0.094539044 ubox
9 51 0.012326205 ubox
10 43 0.008467490 ubox
10 45 0.077786367 ubox
10 46 0.130596316 ubox
10 49 0.004097498 ubox
11 42 0.008467089 ubox
11 43 0.433098691 ubox
11 45 0.147675245 ubox
11 46 0.046427781 ubox
11 48 0.004608954 ubox
11 49 0.005695735 ubox
12 42 0.427338439 ubox
12 43 0.896604509 ubox
12 45 0.042277593 ubox
12 46 0.018247815 ubox
12 48 0.005362046 ubox
12 49 0.008674501 ubox
13 42 0.900550977 ubox
13 45 0.018347250 ubox
13 48 0.008707491 ubox
14 41 0.999629518 ubox
14 44 0.020380871 ubox
14 47 0.009666041 ubox
15 40 0.999739375 ubox
15 43 0.020000128 ubox
15 46 0.009561042 ubox
16 39 0.999739196 ubox
16 42 0.019509288 ubox
16 43 0.004509285 ubox
16 45 0.009221597 ubox
17 38 0.999723068 ubox
17 42 0.006259595 ubox
18 37 0.999721637 ubox
18 41 0.005220529 ubox
19 36 0.999735797 ubox
19 41 0.021890051 ubox
20 35 0.998839271 ubox
20 40 0.022579770 ubox
21 30 0.073258188 ubox
21 39 0.022580777 ubox
22 29 0.073288957 ubox
22 35 0.004174835 ubox
22 38 0.022580903 ubox
23 32 0.994295119 ubox
23 33 0.056234714 ubox
23 34 0.011961753 ubox
23 37 0.022578865 ubox
24 31 0.995530033 ubox
24 32 0.050903373 ubox
24 33 0.012762064 ubox
24 36 0.022577139 ubox
25 30 0.984111084 ubox
25 35 0.022321791 ubox
26 34 0.016901359 ubox
28 34 0.006313002 ubox
29 33 0.006628408 ubox
42 68 0.021233325 ubox
43 50 0.003980865 ubox
43 67 0.021700510 ubox
44 49 0.004082866 ubox
44 51 0.006218579 ubox
44 66 0.021754842 ubox
45 50 0.006282643 ubox
45 68 0.119576470 ubox
46 53 0.005069949 ubox
46 63 0.016926295 ubox
46 67 0.122160920 ubox
47 52 0.005121148 ubox
47 62 0.016980659 ubox
47 64 0.014657134 ubox
47 66 0.122204329 ubox
48 61 0.013285322 ubox
48 63 0.013574813 ubox
48 68 0.047588995 ubox
49 59 0.010825011 ubox
49 61 0.012965906 ubox
49 63 0.130663462 ubox
49 67 0.049667208 ubox
50 58 0.010882848 ubox
50 60 0.018037752 ubox
50 62 0.131672624 ubox
50 64 0.037751126 ubox
50 66 0.050055931 ubox
51 59 0.014697570 ubox
51 61 0.114416925 ubox
51 63 0.037614848 ubox
51 68 0.076452804 ubox
52 59 0.205622785 ubox
52 61 0.093217824 ubox
52 63 0.154562613 ubox
52 67 0.088703965 ubox
53 58 0.212480579 ubox
53 60 0.180605781 ubox
53 62 0.161527140 ubox
53 64 0.331774871 ubox
53 66 0.091358492 ubox
54 59 0.180203971 ubox
54 61 0.123589896 ubox
54 63 0.336152906 ubox
55 61 0.153019653 ubox
56 60 0.155704428 ubox
56 62 0.244806123 ubox
57 61 0.198495224 ubox
58 67 0.819390023 ubox
59 66 0.821177617 ubox
60 67 0.136257101 ubox
61 66 0.134336008 ubox
2 52 0.9500000 lbox
3 51 0.9500000 lbox
4 50 0.9500000 lbox
5 49 0.9500000 lbox
6 48 0.9500000 lbox
8 46 0.9500000 lbox
9 45 0.9500000 lbox
12 43 0.9500000 lbox
13 42 0.9500000 lbox
14 41 0.9500000 lbox
15 40 0.9500000 lbox
16 39 0.9500000 lbox
17 38 0.9500000 lbox
18 37 0.9500000 lbox
19 36 0.9500000 lbox
20 35 0.9500000 lbox
23 32 0.9500000 lbox
24 31 0.9500000 lbox
25 30 0.9500000 lbox
58 67 0.9500000 lbox
59 66 0.9500000 lbox
showpage
end
%%EOF
