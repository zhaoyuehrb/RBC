%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:44 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (KSR2)
} def

/sequence { (\
GCAGCAGCCUCUGAGUUUGCAAAAAGCCUUACAGCAGUGCGAACUGGUCCAAAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.351000867 ubox
1 20 0.032084374 ubox
1 27 0.005604979 ubox
1 40 0.027968013 ubox
1 48 0.027134883 ubox
2 7 0.352006833 ubox
2 13 0.427945664 ubox
2 19 0.032106913 ubox
2 26 0.005616733 ubox
2 39 0.027964454 ubox
2 46 0.094945071 ubox
2 47 0.028362551 ubox
3 10 0.036124626 ubox
3 12 0.429031652 ubox
3 17 0.007638552 ubox
3 18 0.030615793 ubox
3 38 0.024733560 ubox
3 45 0.094244660 ubox
4 9 0.038421864 ubox
4 11 0.423326978 ubox
4 16 0.010805696 ubox
4 17 0.025537384 ubox
4 20 0.027028825 ubox
4 38 0.012602031 ubox
4 40 0.017093000 ubox
4 44 0.093424087 ubox
4 48 0.013661640 ubox
5 13 0.290703369 ubox
5 15 0.013006807 ubox
5 19 0.027057434 ubox
5 37 0.021380255 ubox
5 39 0.017192922 ubox
5 46 0.011946685 ubox
5 47 0.012868589 ubox
6 12 0.290986565 ubox
6 17 0.014895297 ubox
6 18 0.025178442 ubox
6 38 0.016084399 ubox
6 45 0.009846422 ubox
7 11 0.284724601 ubox
7 16 0.022055670 ubox
7 17 0.021650208 ubox
7 35 0.027473298 ubox
7 38 0.005581190 ubox
7 40 0.093958191 ubox
7 44 0.006783680 ubox
7 48 0.674301291 ubox
8 15 0.024117375 ubox
8 34 0.023949439 ubox
8 37 0.008195797 ubox
8 39 0.093979668 ubox
8 47 0.699061499 ubox
9 15 0.020163900 ubox
9 34 0.023003308 ubox
9 37 0.091530657 ubox
9 46 0.699015220 ubox
9 47 0.092197998 ubox
10 14 0.018350267 ubox
10 33 0.026231226 ubox
10 36 0.091197594 ubox
10 46 0.089392847 ubox
10 47 0.069153472 ubox
11 34 0.092380837 ubox
11 37 0.021120182 ubox
11 46 0.090186879 ubox
11 47 0.240252494 ubox
12 31 0.033119633 ubox
12 33 0.092006717 ubox
12 36 0.021123980 ubox
12 46 0.229222265 ubox
12 51 0.063888264 ubox
13 30 0.036784186 ubox
13 32 0.090754480 ubox
13 35 0.021055783 ubox
13 45 0.088255316 ubox
13 49 0.033661712 ubox
13 50 0.068667640 ubox
14 29 0.050648249 ubox
14 30 0.038889948 ubox
14 45 0.971956116 ubox
14 48 0.027207400 ubox
15 27 0.060329285 ubox
15 28 0.045263194 ubox
15 29 0.029843490 ubox
15 32 0.016795884 ubox
15 40 0.006881948 ubox
15 44 0.993582998 ubox
16 25 0.010606733 ubox
16 26 0.066418208 ubox
16 31 0.016903892 ubox
16 39 0.006663674 ubox
16 43 0.993331280 ubox
17 24 0.012100269 ubox
17 25 0.066283010 ubox
17 26 0.018954850 ubox
17 37 0.005947302 ubox
17 42 0.993146628 ubox
18 23 0.012436629 ubox
18 24 0.065798729 ubox
18 25 0.020185288 ubox
18 33 0.003207818 ubox
18 36 0.007363365 ubox
18 41 0.992917010 ubox
19 27 0.071813227 ubox
19 32 0.003271973 ubox
19 35 0.007463396 ubox
19 40 0.993844398 ubox
20 26 0.071859229 ubox
20 34 0.007461552 ubox
20 39 0.993838071 ubox
21 30 0.004744930 ubox
21 38 0.983920643 ubox
22 29 0.006753570 ubox
22 30 0.009783007 ubox
23 29 0.009328855 ubox
23 30 0.005452933 ubox
24 29 0.005755702 ubox
24 30 0.005141979 ubox
25 29 0.004230421 ubox
26 35 0.981875926 ubox
26 38 0.014035116 ubox
26 40 0.004826437 ubox
26 48 0.020664272 ubox
27 34 0.977821698 ubox
27 37 0.016768044 ubox
27 39 0.004847047 ubox
27 47 0.021419080 ubox
28 34 0.094922693 ubox
28 37 0.040637226 ubox
28 46 0.021286070 ubox
29 33 0.112332220 ubox
29 36 0.038597014 ubox
29 37 0.006462819 ubox
29 52 0.007254917 ubox
29 53 0.004272719 ubox
30 36 0.006372593 ubox
30 51 0.007455875 ubox
30 52 0.004392108 ubox
31 38 0.013626292 ubox
31 48 0.006999735 ubox
32 37 0.018337706 ubox
32 47 0.007493811 ubox
33 38 0.003202526 ubox
34 40 0.020408818 ubox
34 48 0.006813157 ubox
35 39 0.020266717 ubox
35 46 0.040544044 ubox
35 47 0.005128049 ubox
36 45 0.041374657 ubox
37 44 0.041447212 ubox
38 43 0.041034469 ubox
41 49 0.007747682 ubox
42 48 0.007445619 ubox
45 51 0.015712455 ubox
46 50 0.031278487 ubox
47 55 0.047351138 ubox
48 54 0.046586070 ubox
7 48 0.9500000 lbox
8 47 0.9500000 lbox
9 46 0.9500000 lbox
14 45 0.9500000 lbox
15 44 0.9500000 lbox
16 43 0.9500000 lbox
17 42 0.9500000 lbox
18 41 0.9500000 lbox
19 40 0.9500000 lbox
20 39 0.9500000 lbox
21 38 0.9500000 lbox
26 35 0.9500000 lbox
27 34 0.9500000 lbox
showpage
end
%%EOF
