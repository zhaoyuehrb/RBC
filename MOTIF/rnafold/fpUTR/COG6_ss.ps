%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGCGCAUGCGCGGCCGAUUUGCACAUGCGCAAUACUCGCGCUGCCUCCGUGGUCCCUGCCUGGCUGAGGUGGCAGCAGGGGGCGGGACGCGCAGCGCU\
) } def
/len { sequence length } bind def

/coor [
[-23.18922806 185.36366272]
[-40.24002075 183.45492554]
[-53.96853638 173.31117249]
[-67.46857452 179.84944153]
[-80.96861267 186.38771057]
[-94.46865082 192.92596436]
[-107.96869659 199.46423340]
[-121.46873474 206.00250244]
[-134.96878052 212.54077148]
[-148.46881104 219.07904053]
[-157.51643372 232.05790710]
[-172.34358215 230.64193726]
[-185.84362793 237.18020630]
[-199.34365845 243.71846008]
[-212.84370422 250.25672913]
[-219.44577026 264.87835693]
[-235.02864075 268.69329834]
[-247.63847351 258.77502441]
[-247.60206604 242.73202515]
[-234.94737244 232.87109375]
[-219.38197327 236.75669861]
[-205.88192749 230.21842957]
[-192.38189697 223.68016052]
[-178.88185120 217.14189148]
[-170.79983521 204.63069153]
[-155.00708008 205.57899475]
[-141.50703430 199.04072571]
[-128.00700378 192.50245667]
[-114.50695801 185.96420288]
[-101.00691986 179.42593384]
[-87.50688171 172.88766479]
[-74.00684357 166.34939575]
[-60.50680161 159.81112671]
[-60.93444824 146.99221802]
[-56.40761948 134.94119263]
[-47.58163071 125.50521088]
[-35.77365875 120.14531708]
[-22.76625443 119.71028900]
[-10.53825378 124.30240631]
[-0.96374482 133.25642395]
[12.91666222 127.57010651]
[26.79706955 121.88377380]
[40.67747498 116.19744873]
[54.55788422 110.51112366]
[68.43829346 104.82479858]
[82.31869507 99.13847351]
[92.78307343 83.83563995]
[111.16239166 86.26058197]
[124.66243744 79.72231293]
[138.16247559 73.18405151]
[144.66207886 66.50963593]
[152.18557739 66.65971375]
[165.88243103 60.54446030]
[175.32931519 47.85324478]
[190.10525513 49.72965622]
[203.80209351 43.61439896]
[217.49894714 37.49914551]
[231.19580078 31.38389206]
[244.89263916 25.26863861]
[258.58950806 19.15338326]
[272.28634644 13.03812981]
[275.66558838 2.46520686]
[284.19613647 -4.28464556]
[294.82049561 -5.10754633]
[303.90240479 0.03008391]
[317.95294189 -5.22181273]
[332.00347900 -10.47370911]
[339.93923950 -24.41655350]
[355.80978394 -26.76288795]
[367.44058228 -15.71280289]
[365.90945435 0.25701937]
[352.39099121 8.89589882]
[337.25537109 3.57682705]
[323.20483398 8.82872391]
[309.15429688 14.08062077]
[298.19265747 29.88111305]
[278.40161133 26.73497772]
[264.70474243 32.85023117]
[251.00790405 38.96548843]
[237.31105042 45.08074188]
[223.61419678 51.19599533]
[209.91735840 57.31124878]
[196.22050476 63.42650223]
[187.75331116 75.68031311]
[171.99768066 74.24131012]
[158.30082703 80.35655975]
[144.70074463 86.68408966]
[131.20069885 93.22235107]
[117.70066071 99.76062012]
[114.91617584 109.53302002]
[107.21692657 116.16436005]
[97.13976288 117.46968079]
[88.00502014 113.01888275]
[74.12461853 118.70520782]
[60.24420929 124.39153290]
[46.36380386 130.07786560]
[32.48339462 135.76419067]
[18.60298729 141.45051575]
[4.72258139 147.13684082]
[2.85039926 164.45663452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[12 24]
[13 23]
[14 22]
[15 21]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[45 94]
[46 93]
[48 89]
[49 88]
[50 87]
[52 86]
[53 85]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
