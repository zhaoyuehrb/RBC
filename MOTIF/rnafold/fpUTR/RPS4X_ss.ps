%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGCAGCUGAAAAUCCGGCGCGCGCAGUCUCCAGCCCCAAUUUCUACGCGCACCGGAAGACGGAGGUCCUCUUUCCUUGCCUAACGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[151.35646057 213.32437134]
[144.35255432 200.05993652]
[137.34863281 186.79551697]
[124.56385803 179.15359497]
[124.96223450 163.33741760]
[117.95832062 150.07298279]
[110.95440674 136.80854797]
[103.95048523 123.54411316]
[89.41499329 121.39834595]
[78.88899994 111.14707947]
[76.35966492 96.67339325]
[82.78507996 83.45980072]
[75.78116608 70.19536591]
[59.61855316 70.94888306]
[44.78021622 64.64374542]
[34.18022919 52.57264328]
[29.87667084 37.15521240]
[32.67213440 21.45309258]
[41.96461105 8.56196594]
[34.53483963 -4.46871042]
[27.10507011 -17.49938583]
[19.67530060 -30.53006172]
[12.24553108 -43.56073761]
[-1.31142616 -51.71668625]
[-0.89398944 -66.60543823]
[-8.32375908 -79.63611603]
[-15.75352955 -92.66679382]
[-23.18330002 -105.69747162]
[-30.61306953 -118.72814178]
[-44.17002487 -126.88409424]
[-43.75259018 -141.77284241]
[-51.18236160 -154.80352783]
[-66.12021637 -152.22744751]
[-81.03773499 -154.91883850]
[-94.13354492 -162.55267334]
[-103.82626343 -174.20716858]
[-108.94544983 -188.47494507]
[-108.87294006 -203.63313293]
[-103.61748505 -217.85128784]
[-93.81370544 -229.41250610]
[-80.64546204 -236.92071533]
[-65.70288086 -239.46925354]
[-50.79035187 -236.75038147]
[-37.70863342 -229.09242249]
[-28.03740883 -217.42008972]
[-22.94452477 -203.14289856]
[-23.04497147 -187.98487854]
[-28.32661819 -173.77642822]
[-38.15168381 -162.23329163]
[-30.72191429 -149.20262146]
[-17.69638252 -141.97871399]
[-17.58239365 -126.15791321]
[-10.15262318 -113.12723541]
[-2.72285342 -100.09656525]
[4.70691681 -87.06588745]
[12.13668633 -74.03520966]
[25.16221619 -66.81130219]
[25.27620697 -50.99050903]
[32.70597839 -37.95983124]
[40.13574600 -24.92915726]
[47.56551743 -11.89848042]
[54.99528885 1.13219559]
[68.87136841 -0.50476927]
[82.35615540 3.31686926]
[93.37840271 12.04483891]
[100.23181915 24.37062263]
[101.83914948 38.42556000]
[97.92140961 52.06412888]
[89.04559326 63.19145203]
[96.04951477 76.45588684]
[110.58500671 78.60165405]
[121.11100006 88.85292053]
[123.64033508 103.32660675]
[117.21492004 116.54019928]
[124.21883392 129.80462646]
[131.22274780 143.06906128]
[138.22666931 156.33349609]
[151.51240540 164.92416382]
[150.61306763 179.79159546]
[157.61698914 193.05603027]
[164.62089539 206.32046509]
[172.26069641 219.22911072]
[180.51835632 231.75154114]
[188.77601624 244.27395630]
[197.03369141 256.79638672]
[212.39686584 261.41723633]
[218.22889709 276.36270142]
[210.05596924 290.16787720]
[194.14764404 292.24261475]
[182.70741272 280.99536133]
[184.51126099 265.05404663]
[176.25360107 252.53161621]
[167.99594116 240.00920105]
[159.73828125 227.48677063]
[156.17642212 226.45280457]
[152.99057007 223.52595520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[5 77]
[6 76]
[7 75]
[8 74]
[12 70]
[13 69]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
