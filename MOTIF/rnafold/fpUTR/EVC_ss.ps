%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCGGCUCGGCGAAGCAGGGAAGGGGAGAGAAGCAGGAGUCGGGAGACUGCACAGGCCAGAAAGUCUGCGGAGCGGGCCGCGCCCCUGGCCCGCCCGGGCUCCAAGUCCCGCGUCGCCGCCCUGGCGGGGACGGUGCAGCAGGCGGCGGGAUGCGGCGGGGCGGCAGCCUGAGCGCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[431.74554443 386.11923218]
[420.15545654 376.59716797]
[408.56533813 367.07513428]
[393.81964111 364.97421265]
[388.06826782 350.23541260]
[376.47817993 340.71334839]
[364.88806152 331.19131470]
[353.29797363 321.66925049]
[338.54550171 323.37237549]
[326.65585327 313.88076782]
[324.96948242 298.39550781]
[313.37936401 288.87344360]
[301.78927612 279.35137939]
[290.19915771 269.82934570]
[278.60903931 260.30728149]
[267.01895142 250.78523254]
[252.27325439 248.68432617]
[246.52188110 233.94552612]
[234.93177795 224.42347717]
[227.75117493 222.60255432]
[223.22750854 214.63999939]
[211.80076599 204.92251587]
[200.37402344 195.20501709]
[188.94728088 185.48753357]
[174.53952026 189.16915894]
[160.56121826 183.59501648]
[152.45066833 170.70811462]
[153.49559021 155.33885193]
[142.06884766 145.62135315]
[130.64210510 135.90386963]
[119.21536255 126.18638611]
[107.95297241 131.49137878]
[95.52220154 132.16995239]
[83.74926758 128.12242126]
[74.36374664 119.94340515]
[68.74446106 108.83448029]
[53.75797272 109.47109985]
[38.77148819 110.10771942]
[23.78500557 110.74433899]
[17.31150627 124.61345673]
[5.12718725 133.87632751]
[-9.96808624 136.40443420]
[-24.50553131 131.61682129]
[-35.14455032 120.61363983]
[-39.44036865 105.92335510]
[-36.40584946 90.92167664]
[-26.73829269 79.05589294]
[-12.65923691 73.05265808]
[2.59605408 74.29148102]
[15.52202606 82.48769379]
[23.14838600 95.75785065]
[38.13487244 95.12123108]
[53.12135696 94.48461914]
[68.10784149 93.84799957]
[65.77449036 89.86984253]
[63.94131088 85.38928986]
[51.44279480 77.09548950]
[38.94427872 68.80168915]
[26.44576454 60.50788879]
[13.94724846 52.21408844]
[-1.49184310 55.59195709]
[-14.75217247 46.99316406]
[-17.96662140 31.51922417]
[-9.22811413 18.35054779]
[6.27894783 15.29987812]
[19.35449982 24.17712402]
[22.24104881 39.71557236]
[34.73956299 48.00937271]
[47.23807907 56.30317307]
[59.73659515 64.59696960]
[72.23510742 72.89076996]
[84.59098816 64.38593292]
[81.30641174 49.74996567]
[78.02183533 35.11399841]
[73.07862091 27.40487480]
[74.80798340 20.20166588]
[71.77240753 5.51203346]
[68.73683167 -9.17759895]
[65.70126343 -23.86723137]
[62.66568756 -38.55686188]
[59.63011551 -53.24649429]
[56.59453964 -67.93612671]
[53.55896759 -82.62576294]
[40.21727753 -91.09777069]
[36.85548401 -106.54036713]
[45.46807480 -119.79174042]
[60.94535446 -122.99007416]
[74.10492706 -114.23786926]
[77.13945007 -98.72763824]
[68.24859619 -85.66133118]
[71.28417206 -70.97170258]
[74.31974792 -56.28207016]
[77.35531616 -41.59243774]
[80.39089203 -26.90280533]
[83.42646790 -12.21317196]
[86.46203613 2.47645998]
[89.49761200 17.16609192]
[92.65779877 31.82942009]
[95.94237518 46.46538925]
[99.22695923 61.10135651]
[122.76063538 71.12850189]
[133.81956482 92.58838654]
[128.93284607 114.75964355]
[140.35958862 124.47712708]
[151.78633118 134.19461060]
[163.21307373 143.91210938]
[178.21493530 140.41204834]
[192.23727417 146.34730530]
[199.98432922 159.24874878]
[198.66476440 174.06079102]
[210.09150696 183.77827454]
[221.51824951 193.49577332]
[232.94499207 203.21325684]
[244.45382690 212.83337402]
[256.04394531 222.35542297]
[271.61862183 225.13740540]
[276.54098511 239.19512939]
[288.13110352 248.71717834]
[299.72122192 258.23922729]
[311.31130981 267.76129150]
[322.90142822 277.28332520]
[334.49151611 286.80538940]
[350.00970459 285.45480347]
[361.62805176 295.27661133]
[362.82000732 310.07916260]
[374.41012573 319.60119629]
[386.00021362 329.12326050]
[397.59033203 338.64529419]
[413.16500854 341.42727661]
[418.08740234 355.48501587]
[429.67749023 365.00708008]
[441.26760864 374.52911377]
[456.78576660 373.17852783]
[468.40414429 383.00033569]
[469.59609985 397.80288696]
[481.18618774 407.32492065]
[492.77630615 416.84698486]
[491.39715576 401.91052246]
[499.82366943 389.50106812]
[514.21569824 385.27386475]
[528.01458740 391.15527344]
[534.93194580 404.46505737]
[531.81536865 419.13772583]
[520.08520508 428.48669434]
[505.08761597 428.25170898]
[515.46667480 439.08102417]
[525.84576416 449.91036987]
[536.22485352 460.73971558]
[554.01330566 465.45822144]
[557.54986572 482.63723755]
[568.11132812 493.28875732]
[578.67279053 503.94030762]
[589.23425293 514.59185791]
[604.44525146 518.94354248]
[607.91223145 533.42901611]
[618.47369385 544.08056641]
[629.03515625 554.73211670]
[644.24609375 559.08380127]
[647.71307373 573.56933594]
[658.27459717 584.22082520]
[673.72039795 591.21099854]
[671.27923584 607.98828125]
[654.48181152 610.28692627]
[647.62304688 594.78234863]
[637.06158447 584.13079834]
[622.60601807 580.54095459]
[618.38360596 565.29357910]
[607.82214355 554.64202881]
[597.26068115 543.99053955]
[582.80511475 540.40069580]
[578.58276367 525.15332031]
[568.02124023 514.50177002]
[557.45977783 503.85025024]
[546.89831543 493.19869995]
[534.79309082 492.82934570]
[525.90618896 484.02182007]
[525.39550781 471.11880493]
[515.01641846 460.28945923]
[504.63735962 449.46011353]
[494.25827026 438.63076782]
[483.25424194 428.43707275]
[471.66415405 418.91503906]
[460.07403564 409.39297485]
[445.32159424 411.09609985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[5 128]
[6 127]
[7 126]
[8 125]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[18 115]
[19 114]
[21 113]
[22 112]
[23 111]
[24 110]
[28 106]
[29 105]
[30 104]
[31 103]
[36 54]
[37 53]
[38 52]
[39 51]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[72 100]
[73 99]
[74 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[135 183]
[136 182]
[137 181]
[145 180]
[146 179]
[147 178]
[148 177]
[150 174]
[151 173]
[152 172]
[153 171]
[155 169]
[156 168]
[157 167]
[159 165]
[160 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
