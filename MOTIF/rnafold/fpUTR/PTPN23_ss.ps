%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCUCCCGUGACCAGUGACUUCCGGCACGAAGGGGCGGGGCUGGGCUCGUGGCUGAGCCAGCAGCUGCAGCAGCUACGGGAGUGGCCGGGUGGCCGGCGGGUGCCAGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[196.16493225 247.56192017]
[187.66529846 236.89198303]
[185.56521606 223.30308533]
[190.52505493 210.36210632]
[181.44744873 198.42070007]
[172.20896912 186.60331726]
[162.81132507 174.91212463]
[153.41366577 163.22091675]
[144.01602173 151.52972412]
[134.61836243 139.83851624]
[125.22071838 128.14732361]
[115.82306671 116.45611572]
[102.40682220 122.46243286]
[88.27256012 119.02931976]
[79.29868317 107.77886200]
[64.30418396 108.18505859]
[50.71859360 116.29322052]
[37.78646851 108.90340424]
[22.79196930 109.30959320]
[11.95794582 120.50163269]
[-3.25439501 120.69995880]
[-13.85752487 110.30240631]
[-28.85202408 110.70859528]
[-43.84652328 111.11478424]
[-58.84102249 111.52097321]
[-69.52629852 123.16573334]
[-85.31938171 123.76071167]
[-96.85052490 112.95291901]
[-97.27848816 97.15442657]
[-86.34938812 85.73819733]
[-70.54725647 85.47728729]
[-59.24721146 96.52647400]
[-44.25271225 96.12028503]
[-29.25821495 95.71409607]
[-14.26371574 95.30790710]
[-4.23904896 84.35155487]
[10.96171951 83.72601318]
[22.38577843 94.31509399]
[37.38027954 93.90890503]
[49.89336014 85.82979584]
[63.89799500 93.19055939]
[78.89249420 92.78436279]
[88.13097382 80.96697998]
[84.90641785 66.31767273]
[81.68186188 51.66836548]
[78.45730591 37.01905823]
[75.23274994 22.36975098]
[70.27036285 14.53857613]
[72.12490082 7.28024483]
[69.29822540 -7.45101023]
[66.47154236 -22.18226624]
[63.64486313 -36.91352081]
[52.51250839 -48.95522690]
[57.63250351 -64.53462219]
[73.73783875 -67.62496948]
[84.26072693 -55.04717636]
[78.37612152 -39.74020004]
[81.20279694 -25.00894547]
[84.02947998 -10.27768993]
[86.85615540 4.45356512]
[89.88205719 19.14519310]
[93.10661316 33.79450226]
[96.33116913 48.44380951]
[99.55572510 63.09312057]
[102.78028107 77.74242401]
[117.23352814 81.75535583]
[127.54902649 70.86541748]
[137.86451721 59.97548676]
[148.18000793 49.08555603]
[158.49549866 38.19562149]
[164.99844360 22.53841972]
[181.84394836 24.45288467]
[184.66760254 41.17004013]
[169.38543701 48.51111603]
[159.06994629 59.40104675]
[148.75444031 70.29097748]
[138.43894958 81.18090820]
[128.12345886 92.07084656]
[127.51426697 107.05847168]
[136.91192627 118.74967194]
[146.30957031 130.44087219]
[155.70721436 142.13206482]
[165.10487366 153.82327271]
[174.50251770 165.51446533]
[183.90017700 177.20567322]
[191.82531738 182.01655579]
[193.38883972 189.34309387]
[202.46646118 201.28448486]
[219.30552673 200.66308594]
[233.08830261 210.06684875]
[238.54190063 225.66053772]
[233.72143555 241.28849792]
[243.11907959 252.97969055]
[252.51673889 264.67089844]
[261.91439819 276.36209106]
[271.31204224 288.05328369]
[280.70968628 299.74450684]
[295.38619995 305.65304565]
[297.32940674 320.42034912]
[306.72705078 332.11154175]
[316.12469482 343.80273438]
[331.60070801 349.22723389]
[334.37463379 365.39007568]
[321.59292603 375.66430664]
[306.40429688 369.48068237]
[304.43350220 353.20037842]
[295.03585815 341.50918579]
[285.63818359 329.81799316]
[271.63388062 324.74566650]
[269.01849365 309.14215088]
[259.62081909 297.45095825]
[250.22319031 285.75973511]
[240.82553101 274.06854248]
[231.42788696 262.37734985]
[222.03022766 250.68614197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 88]
[5 87]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[15 42]
[16 41]
[18 39]
[19 38]
[22 35]
[23 34]
[24 33]
[25 32]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[49 60]
[50 59]
[51 58]
[52 57]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
