%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCAAAGGCUGCAUUGUGCAUUGAGCAGGCCUCGGUCCCUCGUGUGCCAGGGAGGAGGCGGGAGGAGGGACACCGUUGGGAGGCUGUCCCUUGCAGCACUCUUCUGGCCUGUGUUCCCAAGGGCCUCGGCCAGGGUAGGAUGGUACACAC\
) } def
/len { sequence length } bind def

/coor [
[14.49079895 244.90470886]
[6.43430138 256.88409424]
[-4.44691324 266.35305786]
[-17.40245628 272.66696167]
[-31.54105949 275.39846802]
[-45.89188766 274.36645508]
[-59.47119904 269.64797974]
[-71.34978485 261.57263184]
[-82.74085236 271.33190918]
[-94.13192749 281.09115601]
[-105.52300262 290.85043335]
[-116.81328583 300.72616577]
[-128.00158691 310.71725464]
[-139.18988037 320.70834351]
[-134.92039490 335.36215210]
[-137.44024658 350.41583252]
[-146.24911499 362.88046265]
[-159.59797668 370.28115845]
[-174.83644104 371.14852905]
[-188.93885803 365.31033325]
[-199.10520935 353.92578125]
[-203.31695557 339.25527954]
[-200.73783875 324.21163940]
[-191.87995911 311.78179932]
[-178.50204468 304.43374634]
[-163.26029968 303.62637329]
[-149.18096924 309.52005005]
[-137.99267578 299.52896118]
[-126.80438232 289.53784180]
[-123.89212799 282.69454956]
[-115.28227997 279.45938110]
[-103.89120483 269.70010376]
[-92.50012970 259.94082642]
[-81.10905457 250.18154907]
[-87.62755585 236.04382324]
[-89.91352844 220.62979126]
[-87.77476501 205.18002319]
[-81.37550354 190.94024658]
[-71.22382355 179.06094360]
[-58.13135147 170.50436401]
[-43.14834213 165.96667480]
[-27.47945213 165.82118225]
[-12.38687611 170.08778381]
[0.91132885 178.43057251]
[12.09962559 168.43948364]
[23.28792191 158.44837952]
[34.47621918 148.45727539]
[45.66451645 138.46618652]
[56.85281372 128.47508240]
[68.04110718 118.48399353]
[79.22940826 108.49289703]
[80.23021698 89.38385010]
[95.60675049 77.99440765]
[97.75532532 63.14908218]
[99.90390778 48.30376053]
[102.05248260 33.45843506]
[104.20106506 18.61311340]
[106.34964752 3.76779127]
[108.49822235 -11.07753181]
[110.49427795 -25.94412994]
[112.33760071 -40.83043671]
[102.10556030 -48.13364029]
[96.00665283 -59.04323578]
[95.15465546 -71.44021606]
[99.65101624 -82.94671631]
[108.57723999 -91.38208008]
[120.18174744 -95.17612457]
[122.63467407 -109.97420502]
[125.08760071 -124.77228546]
[127.54052734 -139.57035828]
[129.99345398 -154.36843872]
[132.44638062 -169.16651917]
[134.89930725 -183.96459961]
[137.35223389 -198.76268005]
[139.65312195 -213.58515930]
[141.80169678 -228.43048096]
[131.25166321 -239.97305298]
[130.64094543 -255.59870911]
[140.25788879 -267.92947388]
[155.56169128 -271.14318848]
[169.32633972 -263.72238159]
[175.05261230 -249.17095947]
[170.03671265 -234.35964966]
[156.64701843 -226.28190613]
[154.49844360 -211.43658447]
[156.66632080 -204.32234192]
[152.15031433 -196.30975342]
[149.69738770 -181.51167297]
[147.24446106 -166.71359253]
[144.79153442 -151.91551208]
[142.33860779 -137.11743164]
[139.88568115 -122.31935120]
[137.43275452 -107.52127838]
[134.97982788 -92.72319794]
[147.93302917 -80.79149628]
[151.20556641 -63.32791138]
[143.31359863 -47.23484421]
[127.22391510 -38.98711395]
[125.38058472 -24.10080528]
[127.69408417 -17.03257179]
[123.34354401 -8.92895222]
[121.19496918 5.91637039]
[119.04638672 20.76169395]
[116.89781189 35.60701752]
[114.74922943 50.45233917]
[112.60064697 65.29766083]
[110.45207214 80.14298248]
[117.29770660 85.70538330]
[121.47068024 93.47643280]
[122.32621765 102.25544739]
[135.88810730 108.66442108]
[149.45001221 115.07340240]
[163.01190186 121.48237610]
[167.46275330 120.94418335]
[171.43643188 121.80057526]
[174.54478455 123.72017670]
[176.55162048 126.27788544]
[177.39027405 129.01425171]
[190.38064575 136.51425171]
[203.37103271 144.01425171]
[213.77281189 140.57820129]
[224.12678528 143.41006470]
[231.04182434 151.32994080]
[232.39341736 161.53436279]
[245.06492615 169.56137085]
[257.73645020 177.58836365]
[274.13507080 177.72062683]
[281.98330688 192.11984253]
[273.20758057 205.97331238]
[256.83560181 205.02978516]
[249.70944214 190.25987244]
[237.03793335 182.23287964]
[224.36642456 174.20588684]
[205.07841492 174.89183044]
[195.87103271 157.00462341]
[182.88064575 149.50462341]
[169.89027405 142.00462341]
[156.60292053 135.04426575]
[143.04103088 128.63529968]
[129.47914124 122.22631836]
[115.91723633 115.81734467]
[103.21425629 122.20845795]
[89.22050476 119.68119049]
[78.03220367 129.67228699]
[66.84391022 139.66339111]
[55.65561295 149.65447998]
[44.46731567 159.64558411]
[33.27901840 169.63667297]
[22.09072304 179.62777710]
[10.90242577 189.61886597]
[17.31339264 202.60804749]
[20.12984657 216.80433655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 34]
[9 33]
[10 32]
[11 31]
[12 29]
[13 28]
[14 27]
[44 150]
[45 149]
[46 148]
[47 147]
[48 146]
[49 145]
[50 144]
[51 143]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[58 102]
[59 101]
[60 99]
[61 98]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 85]
[76 84]
[110 141]
[111 140]
[112 139]
[113 138]
[118 137]
[119 136]
[120 135]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
