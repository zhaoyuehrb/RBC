%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGAGGGGAAGAGAGAGAAGGAGAGGGAAUCCCAGUUCUUGCAGCCACUGGGAAUCAAGAGGCCCAACUCCGUCUUGGUCUUCAAGCAAACAAACAAACAACAAUGGGCCGUGGGAAGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[232.76293945 357.90762329]
[216.65209961 348.37231445]
[202.82827759 335.74035645]
[191.87718201 320.54428101]
[184.26336670 303.42529297]
[180.31050110 285.10626221]
[180.18763733 266.36108398]
[183.90196228 247.98222351]
[191.29843140 230.74696350]
[202.06620789 215.38465881]
[191.59266663 204.64665222]
[181.11911011 193.90866089]
[170.64555359 183.17065430]
[160.17199707 172.43264771]
[145.32173157 172.50433350]
[134.54708862 161.76367188]
[134.57258606 146.18685913]
[124.09903717 135.44886780]
[113.62548065 124.71086121]
[103.15193176 113.97285461]
[89.74596405 110.00150299]
[86.11006927 96.50069427]
[75.63651276 85.76269531]
[65.16296387 75.02468872]
[54.68940735 64.28668976]
[36.89029694 59.77016068]
[33.11511993 42.68011856]
[22.37711525 32.20656586]
[11.63911247 21.73301315]
[-11.20502949 24.46452141]
[-28.68873405 9.90973949]
[-30.11195755 -12.53652096]
[-42.50553894 -20.98632240]
[-54.89912033 -29.43612289]
[-67.29270172 -37.88592529]
[-79.68628693 -46.33572388]
[-92.07986450 -54.78552628]
[-104.47344971 -63.23532486]
[-118.27632904 -56.49915314]
[-133.59693909 -57.58290100]
[-146.31410217 -66.19505310]
[-153.00698853 -80.01898193]
[-151.87521362 -95.33612061]
[-143.22323608 -108.02622986]
[-129.37840271 -114.67574310]
[-114.06488800 -113.49597168]
[-101.40196228 -104.80426025]
[-94.79587555 -90.93865204]
[-96.02364349 -75.62890625]
[-83.63006592 -67.17910767]
[-71.23648071 -58.72930527]
[-58.84290314 -50.27950668]
[-46.44932175 -41.82970428]
[-34.05574036 -33.37990189]
[-21.66215706 -24.93010330]
[-15.06363010 -29.22310448]
[-7.51229811 -31.54180908]
[0.41274551 -31.69275475]
[8.09942341 -29.64932060]
[14.94995213 -25.55494118]
[20.42732430 -19.71314430]
[24.09739876 -12.56508636]
[25.66328621 -4.65625334]
[24.98931885 3.40515780]
[22.11266518 10.99501038]
[32.85066605 21.46856308]
[43.58866882 31.94211578]
[55.75250626 32.12521744]
[64.78924561 40.85903168]
[65.42741394 53.81313324]
[75.90096283 64.55113983]
[86.37451935 75.28913879]
[96.84806824 86.02714539]
[110.25403595 89.99849701]
[113.88993073 103.49930573]
[124.36348724 114.23730469]
[134.83703613 124.97531128]
[145.31059265 135.71331787]
[160.88319397 136.07617188]
[171.35189819 147.11523438]
[170.91000366 161.95909119]
[181.38356018 172.69709778]
[191.85711670 183.43510437]
[202.33065796 194.17311096]
[212.80421448 204.91110229]
[222.50051880 197.92858887]
[233.02462769 192.27365112]
[244.19590759 188.04289246]
[255.82263184 185.30845642]
[267.70538330 184.11682129]
[279.64031982 184.48797607]
[291.42285156 186.41516113]
[302.85101318 189.86491394]
[313.72897339 194.77764893]
[323.87036133 201.06878662]
[333.10153198 208.63006592]
[341.26449585 217.33152771]
[348.21954346 227.02368164]
[353.84780884 237.54008484]
[358.05313110 248.70021057]
[360.76379395 260.31259155]
[361.93377686 272.17797852]
[361.54339600 284.09289551]
[359.59976196 295.85305786]
[356.13665771 307.25689697]
[351.21380615 318.10897827]
[344.91607666 328.22341919]
[337.35177612 337.42703247]
[328.65090942 345.56222534]
[318.96298218 352.48986816]
[325.80615234 365.83795166]
[332.64929199 379.18603516]
[348.00149536 381.44204712]
[359.07205200 392.31506348]
[361.60412598 407.62417603]
[354.62405396 421.48266602]
[340.81585693 428.56173706]
[325.48904419 426.13928223]
[314.53707886 415.14682007]
[312.17123413 399.81115723]
[319.30120850 386.02917480]
[312.45806885 372.68109131]
[305.61489868 359.33303833]
[287.69128418 364.67102051]
[269.04992676 366.23095703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[17 78]
[18 77]
[19 76]
[20 75]
[22 73]
[23 72]
[24 71]
[25 70]
[27 67]
[28 66]
[29 65]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
