%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGUUACAUGAAAUCUGCAGUUUCAUAAUUUCCGUGGGUCGGGCCGGGCGGGCCAGGCGCUGGGCACGGUG\
) } def
/len { sequence length } bind def

/coor [
[13.34379101 166.30767822]
[3.94738674 172.50119019]
[-6.64091825 176.28164673]
[-17.81320953 177.43753052]
[-28.92936325 175.90791321]
[-39.35372162 171.78553772]
[-48.49144363 165.31126404]
[-55.82244492 156.86000061]
[-60.93100739 146.91900635]
[-63.52933121 136.05976868]
[-78.51581573 135.42314148]
[-93.50229645 134.78652954]
[-108.48878479 134.14991760]
[-123.47526550 133.51329041]
[-138.46174622 132.87667847]
[-153.44824219 132.24005127]
[-166.18873596 141.98988342]
[-181.71954346 137.96823120]
[-188.12673950 123.26016998]
[-180.49528503 109.14845276]
[-164.67938232 106.45839691]
[-152.81161499 117.25357056]
[-137.82513428 117.89019012]
[-122.83865356 118.52680969]
[-107.85216522 119.16342926]
[-92.86568451 119.80004883]
[-77.87919617 120.43666077]
[-62.89271164 121.07328033]
[-55.13576508 103.18833160]
[-40.72163773 90.00115967]
[-22.13982964 83.83547974]
[-2.61854506 85.79831696]
[14.43612576 95.58141327]
[26.03450775 111.50904083]
[40.55050278 107.72937012]
[55.06649780 103.94969940]
[69.58248901 100.17002869]
[84.09848785 96.39035797]
[90.72763824 86.58690643]
[102.24090576 83.84865570]
[112.57379913 89.61793518]
[127.23712921 86.45774841]
[141.90045166 83.29756165]
[156.56378174 80.13736725]
[171.15673828 76.66665649]
[185.67272949 72.88698578]
[200.18872070 69.10731506]
[214.62121582 65.02039337]
[228.96372986 60.62804794]
[237.72839355 47.19078445]
[253.71180725 45.80878067]
[264.65286255 57.54219055]
[262.15850830 73.39015198]
[248.14221191 81.19545746]
[233.35606384 74.97055054]
[219.01356506 79.36289215]
[213.37301636 84.48632812]
[203.96839905 83.62331390]
[189.45240784 87.40298462]
[174.93640137 91.18265533]
[169.08349609 96.06208038]
[159.72396851 94.80069733]
[145.06065369 97.96089172]
[130.39732361 101.12107849]
[115.73399353 104.28126526]
[103.77291107 115.86357117]
[87.87815857 110.90635681]
[73.36215973 114.68602753]
[58.84616852 118.46569824]
[44.33017349 122.24536896]
[29.81417847 126.02503967]
[29.49030876 137.31848145]
[26.49592209 148.20109558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[41 65]
[42 64]
[43 63]
[44 62]
[45 60]
[46 59]
[47 58]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
