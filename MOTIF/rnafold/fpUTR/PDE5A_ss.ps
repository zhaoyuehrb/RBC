%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGGCGCUCCGGCCGCUUUGUCGAAAGCCGGCCCGACUGGAGCAGGACGAAGGGGGAGGGUCUCGAGGCCGAGUCCUGUUCUUCUGAGGGACGGACCCCAGCUGGGGUGGAAAAGCAGUACCAGAGAGCCUCCGAGGCGCGCGGUGCCAACC\
) } def
/len { sequence length } bind def

/coor [
[130.35752869 432.28353882]
[129.15052795 417.33218384]
[127.94352722 402.38082886]
[126.58604431 387.44238281]
[125.07821655 372.51837158]
[123.57038879 357.59432983]
[121.91236115 342.68624878]
[120.10430908 327.79562378]
[118.29626465 312.90499878]
[116.48821259 298.01434326]
[114.68016052 283.12371826]
[105.46517181 271.42187500]
[111.48262787 256.78970337]
[109.67458344 241.89906311]
[107.86653137 227.00842285]
[96.01987457 218.05340576]
[93.97412872 202.97795105]
[103.44730377 190.61280823]
[101.63925171 175.72216797]
[99.83119965 160.83154297]
[98.02314758 145.94090271]
[96.21510315 131.05027771]
[85.39250946 128.88534546]
[75.64961243 122.94490814]
[68.30014038 113.73199463]
[64.43313599 102.20372009]
[64.75781250 89.67398834]
[69.48943329 77.66405487]
[78.29341125 67.71788788]
[90.29787445 61.20474625]
[104.17646027 59.13408279]
[96.15947723 46.45623398]
[88.14248657 33.77838135]
[74.22727966 26.24993515]
[73.96447754 11.35764885]
[65.94748688 -1.32020283]
[57.93050003 -13.99805450]
[41.44472122 -13.15422726]
[26.85868263 -20.68124199]
[18.09513092 -34.44865417]
[17.45734215 -50.66238785]
[25.02448082 -64.91014099]
[16.75382614 -77.42398071]
[8.48316860 -89.93782806]
[0.21251266 -102.45166779]
[-8.05814362 -114.96550751]
[-16.32880020 -127.47935486]
[-24.59945679 -139.99319458]
[-32.87011337 -152.50703430]
[-41.14076996 -165.02087402]
[-49.41142654 -177.53471375]
[-62.86426544 -178.70138550]
[-73.02860260 -187.29205322]
[-76.32268524 -199.98503113]
[-71.75632477 -212.06956482]
[-79.77330780 -224.74742126]
[-98.36345673 -228.15664673]
[-108.43667603 -243.77182007]
[-104.03130341 -261.49707031]
[-112.55227661 -273.84182739]
[-121.07324982 -286.18658447]
[-135.04693604 -295.78723145]
[-129.68980408 -311.87255859]
[-112.75009918 -311.17764282]
[-108.72849274 -294.70758057]
[-100.20751953 -282.36282349]
[-91.68654633 -270.01806641]
[-80.21828461 -270.43606567]
[-69.87741089 -265.18859863]
[-63.30849075 -255.48693848]
[-62.25442886 -243.69738770]
[-67.09545898 -232.76440430]
[-59.07847214 -220.08654785]
[-42.55116272 -217.11724854]
[-33.07546616 -202.84799194]
[-36.89758301 -185.80537415]
[-28.62692642 -173.29153442]
[-20.35626984 -160.77769470]
[-12.08561420 -148.26385498]
[-3.81495786 -135.75000000]
[4.45569849 -123.23616791]
[12.72635460 -110.72232056]
[20.99701118 -98.20848083]
[29.26766777 -85.69464111]
[37.53832245 -73.18079376]
[51.11756516 -74.90052032]
[64.17178345 -70.56931305]
[74.12531281 -60.98145676]
[78.98830414 -47.97425461]
[77.75440216 -34.07610321]
[70.60835266 -22.01504135]
[78.62534332 -9.33719063]
[86.64232635 3.34066105]
[99.98410797 9.96230221]
[100.82034302 25.76139450]
[108.83732605 38.43924713]
[116.85431671 51.11709595]
[131.38156128 54.85329437]
[144.52033997 47.61640549]
[157.65910339 40.37951279]
[170.79788208 33.14262390]
[183.93666077 25.90573120]
[191.95288086 11.59936523]
[208.35192871 11.65902615]
[216.26385498 26.02334023]
[207.54954529 39.91553116]
[191.17355347 39.04450607]
[178.03477478 46.28139877]
[164.89599609 53.51828766]
[151.75721741 60.75518036]
[138.61845398 67.99207306]
[141.91418457 82.62553406]
[156.88681030 83.53121185]
[165.28829956 70.67388916]
[179.00009155 63.75419617]
[194.33380127 64.63348389]
[207.16471863 73.07523346]
[214.04139709 86.80864716]
[213.11405945 102.13951874]
[204.63212585 114.94391632]
[190.87722778 121.77751923]
[175.54933167 120.80212402]
[162.77159119 112.28010559]
[155.98114014 98.50384521]
[141.00849915 97.59816742]
[135.34031677 113.44808960]
[124.41996765 124.43591309]
[111.10573578 129.24221802]
[112.91378021 144.13285828]
[114.72183228 159.02348328]
[116.52988434 173.91412354]
[118.33793640 188.80474854]
[130.49501038 198.54351807]
[132.11650085 213.67048645]
[122.75716400 225.20037842]
[124.56521606 240.09101868]
[126.37326050 254.98164368]
[135.71757507 267.74856567]
[129.57080078 281.31567383]
[131.37884521 296.20629883]
[133.18688965 311.09695435]
[134.99494934 325.98757935]
[136.80299377 340.87820435]
[140.96520996 349.07516479]
[138.49441528 356.08651733]
[140.00224304 371.01052856]
[141.51007080 385.93457031]
[145.50637817 394.21368408]
[142.89488220 401.17382812]
[144.10188293 416.12518311]
[145.30888367 431.07656860]
[156.54827881 442.52450562]
[154.46260071 458.43139648]
[140.65182495 466.59484863]
[125.71037292 460.75253296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 147]
[5 146]
[6 145]
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[13 137]
[14 136]
[15 135]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[31 97]
[32 96]
[33 95]
[35 93]
[36 92]
[37 91]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[55 73]
[56 72]
[59 67]
[60 66]
[61 65]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
