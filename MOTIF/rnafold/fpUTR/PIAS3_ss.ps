%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUUUGCGGCCGGCGCCAGGGUGGAGAGUUGUGCGCCGGUCCCUGGGCCUGAGCUCCGGCUCCGGCUGGGGCGCCUGCGAUGUCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[121.18634033 263.85272217]
[118.63768005 249.07081604]
[116.08902740 234.28892517]
[113.54037476 219.50703430]
[110.99171448 204.72514343]
[108.44306183 189.94325256]
[104.11338043 183.75759888]
[106.06874847 174.61384583]
[104.02625275 159.75355530]
[101.73033905 144.93029785]
[99.18168640 130.14840698]
[96.63302612 115.36651611]
[86.39472961 104.40397644]
[71.82122803 100.85250854]
[57.24771881 97.30104065]
[42.67421341 93.74957275]
[28.10070610 90.19811249]
[13.52719975 86.64664459]
[-1.10481715 83.34450531]
[-15.79107857 80.29267120]
[-30.47734070 77.24082947]
[-41.21044159 88.32252502]
[-56.23611832 91.82003784]
[-70.75972748 86.61731720]
[-80.14684296 74.37454224]
[-81.40206909 58.99832535]
[-74.12486267 45.39517212]
[-60.63735962 37.90579224]
[-45.24337006 38.92002487]
[-32.85506439 48.11422729]
[-27.42549896 62.55456543]
[-12.73923779 65.60640717]
[1.94702303 68.65824890]
[9.28976631 66.89966583]
[17.07866478 72.07313538]
[31.65217209 75.62460327]
[46.22567749 79.17607117]
[60.79918289 82.72753143]
[75.37268829 86.27899933]
[89.94619751 89.83046722]
[104.38995361 85.78351593]
[114.99655914 75.17691803]
[125.60315704 64.57031250]
[136.20976257 53.96371078]
[146.81636047 43.35710907]
[149.00025940 36.75318527]
[153.58735657 32.96146774]
[158.52745056 32.41971970]
[169.83314514 22.56166267]
[181.13883972 12.70360851]
[192.44453430 2.84555316]
[197.76092529 -12.05567455]
[212.43861389 -14.58838081]
[223.74430847 -24.44643593]
[235.05000305 -34.30449295]
[246.35569763 -44.16254807]
[251.15643311 -59.84326553]
[267.19528198 -63.26189804]
[277.97286987 -50.90164948]
[272.40213013 -35.47768021]
[256.21374512 -32.85684967]
[244.90806580 -22.99879646]
[233.60237122 -13.14074039]
[222.29667664 -3.28268552]
[217.78894043 10.91342831]
[202.30259705 14.15124798]
[190.99690247 24.00930405]
[179.69119263 33.86735916]
[168.38549805 43.72541428]
[157.42295837 53.96371078]
[146.81636047 64.57031250]
[136.20976257 75.17691803]
[125.60315704 85.78351593]
[114.99655914 96.39012146]
[111.41492462 112.81785583]
[113.96357727 127.59975433]
[116.51222992 142.38163757]
[121.14210510 150.50543213]
[118.88654327 157.71104431]
[120.92903900 172.57133484]
[123.22495270 187.39459229]
[125.77361298 202.17648315]
[128.32226562 216.95837402]
[130.87092590 231.74026489]
[133.41957092 246.52215576]
[135.96823120 261.30404663]
[149.02276611 270.21215820]
[151.87260437 285.75738525]
[142.82696533 298.71704102]
[127.25247192 301.40234375]
[114.38920593 292.22018433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 83]
[5 82]
[6 81]
[8 80]
[9 79]
[10 77]
[11 76]
[12 75]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 33]
[20 32]
[21 31]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
