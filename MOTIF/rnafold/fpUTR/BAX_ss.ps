%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACGUGACCCGGGCGCGCUGCGGCCGCCCGCGCGGACCCGGCGAGAGGCGGCGGCGGGAGCGGCGGUG\
) } def
/len { sequence length } bind def

/coor [
[56.63923264 324.56192017]
[43.91051102 332.98464966]
[28.78668404 335.04196167]
[14.27059650 330.32540894]
[3.24442959 319.77142334]
[-2.10256433 305.47555542]
[-0.70873505 290.27621460]
[7.14917135 277.19125366]
[19.91096306 268.81869507]
[35.04277420 266.82095337]
[39.67802811 252.55509949]
[44.31328583 238.28926086]
[39.06775665 227.16287231]
[43.06454468 215.10171509]
[54.63098145 208.92706299]
[59.90160370 194.88354492]
[65.17222595 180.84002686]
[61.25031662 163.88069153]
[75.19022369 152.08613586]
[79.82547760 137.82028198]
[84.46073151 123.55443573]
[89.09598541 109.28858948]
[86.37712097 95.57365417]
[96.63816833 86.07615662]
[101.27342224 71.81031036]
[105.90867615 57.54446030]
[110.54393005 43.27861023]
[115.17918396 29.01276398]
[119.81443787 14.74691582]
[123.47954559 0.20157342]
[126.15789795 -14.55737019]
[128.83625793 -29.31631470]
[127.26734161 -38.65699768]
[131.98011780 -44.67090607]
[135.31793213 -59.29482269]
[129.96978760 -74.79738617]
[140.92416382 -87.00121307]
[156.91215515 -83.35205841]
[161.48667908 -67.60385895]
[149.94184875 -55.95701218]
[146.60403442 -41.33309174]
[143.59519958 -26.63796043]
[140.91683960 -11.87901688]
[138.23849487 2.87992692]
[140.22630310 6.16974163]
[140.50868225 10.67240334]
[138.49372864 15.46561337]
[134.08029175 19.38217163]
[129.44503784 33.64801788]
[124.80977631 47.91386795]
[120.17452240 62.17971420]
[115.53926849 76.44556427]
[110.90401459 90.71141052]
[113.62287903 104.42634583]
[103.36183167 113.92384338]
[98.72657776 128.18969727]
[94.09132385 142.45553589]
[89.45606995 156.72138977]
[94.64924622 168.76048279]
[90.25405121 180.68222046]
[79.21575165 186.11064148]
[73.94512939 200.15417480]
[68.67450714 214.19769287]
[72.21937561 232.11044312]
[58.57913208 242.92451477]
[53.94387817 257.19036865]
[49.30862045 271.45620728]
[60.37626648 281.96667480]
[65.77951050 296.24139404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 67]
[11 66]
[12 65]
[15 63]
[16 62]
[17 61]
[19 58]
[20 57]
[21 56]
[22 55]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 44]
[31 43]
[32 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
