%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGUGGGCGGGCCCGGGCAGGAGCGGGCUUGCCCUGCGGAGCAGUAGCUAGGAACAGAUCCACUUGCAGGUUGCUGUUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[78.10817719 106.72291565]
[63.11773682 106.18753052]
[48.12729645 105.65214539]
[33.13685226 105.11676025]
[18.13924217 104.84902191]
[3.13924289 104.84902191]
[-11.85836792 105.11676025]
[-26.84881020 105.65214539]
[-41.83925247 106.18753052]
[-56.82969666 106.72291565]
[-71.82013702 107.25830078]
[-86.81057739 107.79368591]
[-101.80102539 108.32907104]
[-116.79146576 108.86445618]
[-131.78190613 109.39984131]
[-146.77235413 109.93522644]
[-161.76278687 110.47061157]
[-170.31759644 123.41645813]
[-184.85972595 128.82994080]
[-199.79745483 124.62947083]
[-209.38691711 112.43021393]
[-209.94075012 96.92301941]
[-201.24601746 84.07073975]
[-186.64601135 78.81532288]
[-171.75473022 83.17759705]
[-162.29817200 95.48016357]
[-147.30773926 94.94477844]
[-132.31729126 94.40939331]
[-117.32685089 93.87400818]
[-102.33641052 93.33862305]
[-87.34596252 92.80323792]
[-72.35552216 92.26785278]
[-57.36507797 91.73246765]
[-42.37463760 91.19708252]
[-27.38419533 90.66169739]
[-12.39375305 90.12631989]
[-5.67013979 86.66254425]
[3.13924289 89.84902191]
[18.13924217 89.84902191]
[24.98220253 86.62744141]
[33.67223740 90.12631989]
[48.66268158 90.66169739]
[63.65312195 91.19708252]
[78.64356232 91.73246765]
[85.38208008 82.37145233]
[95.82870483 77.48223877]
[107.33345032 78.30507660]
[116.97793579 84.63123322]
[122.31565094 94.85595703]
[137.22970581 96.45938873]
[152.14375305 98.06281281]
[166.69194031 91.84501648]
[178.51921082 100.89846802]
[193.43325806 102.50189209]
[208.34732056 104.10532379]
[223.26136780 105.70874786]
[238.17543030 107.31217194]
[253.08947754 108.91560364]
[268.00354004 110.51902771]
[281.29650879 99.31677246]
[298.25750732 101.04677582]
[308.60052490 114.17652130]
[323.56231689 115.24660492]
[334.31225586 103.88997650]
[349.85290527 102.15158844]
[362.84646606 110.85224915]
[367.15777588 125.88377380]
[360.75112915 140.14874268]
[346.65161133 146.91165161]
[331.51654053 142.97929382]
[322.49221802 130.20838928]
[307.53045654 129.13830566]
[298.95858765 138.93408203]
[286.10186768 141.98027039]
[273.68298340 136.92420959]
[266.40011597 125.43308258]
[251.48605347 123.82965851]
[236.57200623 122.22622681]
[221.65794373 120.62280273]
[206.74389648 119.01937866]
[191.82983398 117.41594696]
[176.91578674 115.81252289]
[163.43435669 122.14500427]
[150.54032898 112.97686768]
[135.62628174 111.37344360]
[120.71221924 109.77001190]
[107.40093994 121.67199707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 39]
[6 38]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[49 86]
[50 85]
[51 84]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
