%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCCGGCAGGCCUCGCGUCAAGACGGCCGGCGGGACGGGAGCUGCGGCGCUGGCUACGAGAGUGACCCAGUCAGCGUUGGUUCCCGUCUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[99.43119812 137.39317322]
[107.40037537 150.10112000]
[109.24903870 164.98677063]
[104.63043976 179.25802612]
[94.41088104 190.23803711]
[80.50723267 195.86729431]
[65.52738953 195.08993530]
[52.28110123 188.05177307]
[43.25296021 176.07292175]
[40.13636398 161.40026855]
[43.51588440 146.78593445]
[52.75863266 134.97029114]
[38.03524399 137.83767700]
[23.31185722 140.70504761]
[8.58847046 143.57243347]
[-6.08706760 146.67543030]
[-20.71098709 150.01324463]
[-27.68353462 164.01029968]
[-42.04250336 170.20335388]
[-57.00802612 165.66825867]
[-65.51383972 152.54632568]
[-63.54375839 137.03334045]
[-52.02799988 126.45404816]
[-36.40394592 125.80368805]
[-24.04879951 135.38932800]
[-9.42488194 132.05151367]
[-3.49379349 127.40744781]
[5.72109079 128.84904480]
[20.44447899 125.98166656]
[35.16786575 123.11428833]
[49.89125443 120.24690247]
[63.79500580 114.61789703]
[76.36632538 106.43487549]
[88.93764496 98.25185394]
[101.37619781 89.86839294]
[113.67877960 81.28663635]
[125.98136902 72.70488739]
[138.28395081 64.12313843]
[150.58653259 55.54138947]
[162.88911438 46.95964050]
[175.19169617 38.37789154]
[187.49427795 29.79614067]
[199.79687500 21.21439171]
[212.09945679 12.63264084]
[224.40203857 4.05089092]
[227.69259644 -2.03423977]
[232.84024048 -4.96170950]
[237.77922058 -4.65669012]
[250.60635376 -12.43257904]
[263.43350220 -20.20846748]
[276.26065063 -27.98435593]
[289.08779907 -35.76024246]
[301.91491699 -43.53613281]
[314.74206543 -51.31202316]
[327.56921387 -59.08790970]
[340.39636230 -66.86380005]
[353.22348022 -74.63968658]
[366.05062866 -82.41557312]
[378.21408081 -91.19340515]
[389.63577271 -100.91683197]
[394.62194824 -116.53958130]
[410.70016479 -119.76795959]
[421.33056641 -107.28089905]
[415.57748413 -91.92400360]
[399.35919189 -89.49514008]
[387.93753052 -79.77172089]
[387.86419678 -77.25729370]
[386.83230591 -74.61312866]
[384.78927612 -72.18387604]
[381.80014038 -70.32660675]
[378.04870605 -69.37234497]
[373.82650757 -69.58843231]
[360.99938965 -61.81254578]
[348.17224121 -54.03665543]
[335.34509277 -46.26076889]
[322.51794434 -38.48487854]
[309.69082642 -30.70899200]
[296.86367798 -22.93310356]
[284.03652954 -15.15721416]
[271.20938110 -7.38132572]
[258.38226318 0.39456278]
[245.55511475 8.17045116]
[232.98377991 16.35347557]
[220.68119812 24.93522453]
[208.37861633 33.51697540]
[196.07603455 42.09872437]
[183.77345276 50.68047333]
[171.47087097 59.26222610]
[159.16828918 67.84397125]
[146.86569214 76.42572784]
[134.56311035 85.00747681]
[122.26052856 93.58922577]
[109.95794678 102.17097473]
[105.57286835 109.12918091]
[97.12067413 110.82317352]
[84.54934692 119.00619507]
[71.97802734 127.18922424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 31]
[13 30]
[14 29]
[15 28]
[16 26]
[17 25]
[32 97]
[33 96]
[34 95]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
