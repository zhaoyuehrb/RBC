%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGUGUGCGAGCGCCAGGGGUUCCAGCUGCACGUCCCAGGCUCUCCAGCGCGCGGCAGGCCGGGGCGGGACGAGGAGAGCUGCGGGGACAACGCCUGUGGCUGGGUCCGGAGGUGCGGGUGCGGCGCGGGACAAGCGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[18.94828224 404.60791016]
[10.41809273 392.26858521]
[4.82524538 406.18692017]
[-0.76760191 420.10525513]
[8.24861240 432.62368774]
[9.04273319 448.03060913]
[1.36135912 461.40969849]
[-12.34441090 468.49172974]
[-27.70111465 467.01687622]
[-39.80848694 457.45574951]
[-44.80310440 442.85928345]
[-41.09120560 427.88513184]
[-29.85724640 417.31149292]
[-14.68593693 414.51239014]
[-9.09309006 400.59405518]
[-3.50024295 386.67572021]
[1.34646702 372.48031616]
[5.43339396 358.04782104]
[9.52032089 343.61532593]
[-2.00815606 332.33804321]
[-6.32039928 316.70098877]
[-2.15395331 300.92758179]
[9.45032120 289.32739258]
[25.40629387 285.11868286]
[29.18596649 270.60269165]
[32.96563721 256.08666992]
[36.74530792 241.57069397]
[40.52497864 227.05468750]
[34.93673706 210.45040894]
[47.88948822 197.40711975]
[51.36019897 182.81416321]
[54.83091354 168.22122192]
[58.30162430 153.62826538]
[61.77233505 139.03532410]
[65.24304962 124.44237518]
[68.71376038 109.84942627]
[67.60036469 94.89080048]
[62.00752258 80.97246552]
[56.41467285 67.05413055]
[50.82182693 53.13579941]
[45.22898102 39.21746063]
[28.81893730 27.58839035]
[32.19921494 8.59106922]
[26.02069664 -5.07735777]
[19.84217834 -18.74578476]
[13.66366005 -32.41421127]
[7.48514080 -46.08264160]
[1.30662227 -59.75106812]
[-4.87189627 -73.41949463]
[-11.05041504 -87.08792114]
[-31.13133812 -93.09629059]
[-40.25785446 -111.64299011]
[-32.97378159 -130.67750549]
[-40.28920364 -143.77272034]
[-47.60462952 -156.86793518]
[-63.62112808 -165.88861084]
[-62.76834488 -183.38728333]
[-70.36006927 -196.32427979]
[-77.95179749 -209.26126099]
[-92.47099304 -216.88523865]
[-92.85758209 -233.27983093]
[-78.71388245 -241.57968140]
[-64.58970642 -233.24662781]
[-65.01480865 -216.85299683]
[-57.42308426 -203.91600037]
[-49.83135605 -190.97901917]
[-38.16979980 -187.60479736]
[-31.75197029 -176.82962036]
[-34.50941849 -164.18334961]
[-27.19399261 -151.08813477]
[-19.87856865 -137.99293518]
[-10.37625217 -138.33718872]
[-1.35926521 -135.14080811]
[5.89242268 -128.81205750]
[10.33277893 -120.20697784]
[11.30048084 -110.51376343]
[8.61707687 -101.08870697]
[2.61801219 -93.26644135]
[8.79653072 -79.59801483]
[14.97504997 -65.92958832]
[21.15356827 -52.26115799]
[27.33208656 -38.59273148]
[33.51060486 -24.92430496]
[39.68912506 -11.25587654]
[45.86764145 2.41255069]
[55.79184341 5.17985439]
[62.67022324 13.14392948]
[64.01962280 23.80254364]
[59.14731598 33.62461472]
[64.74015808 47.54294968]
[70.33300781 61.46128464]
[75.92585754 75.37962341]
[81.51869965 89.29795837]
[92.73279572 81.24237061]
[105.69831848 82.00458527]
[114.67551422 90.21962738]
[129.51023865 87.99898529]
[144.34494019 85.77834320]
[159.17965698 83.55770874]
[174.01437378 81.33706665]
[186.51702881 71.64200592]
[200.24951172 77.40987396]
[215.08422852 75.18923187]
[229.91894531 72.96858978]
[239.11401367 60.11455154]
[254.71853638 57.60972214]
[267.47463989 66.94017792]
[269.81436157 82.57031250]
[260.34954834 95.22705841]
[244.69555664 97.40139008]
[232.13958740 87.80330658]
[217.30487061 90.02394867]
[202.47015381 92.24459076]
[191.02857971 101.78080750]
[176.23501587 96.17178345]
[161.40029907 98.39241791]
[146.56558228 100.61306000]
[131.73086548 102.83370209]
[116.89615631 105.05434418]
[112.46069336 113.76331329]
[103.70891571 119.14008331]
[92.93920898 119.16704559]
[83.30670929 113.32013702]
[79.83599854 127.91308594]
[76.36528778 142.50604248]
[72.89456940 157.09898376]
[69.42385864 171.69194031]
[65.95314789 186.28488159]
[62.48243713 200.87783813]
[68.58118439 212.29435730]
[65.34198761 224.41047668]
[55.04097366 230.83436584]
[51.26130295 245.35035706]
[47.48163223 259.86636353]
[43.70196152 274.38235474]
[39.92228699 288.89834595]
[50.40326309 298.21850586]
[55.80633163 311.08969116]
[55.12482834 324.96588135]
[48.54957199 337.12902832]
[37.42024231 345.22131348]
[23.95281982 347.70223999]
[19.86589241 362.13476562]
[15.77896595 376.56726074]
[30.07345581 372.02108765]
[42.66000366 380.18066406]
[44.34466171 395.08578491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[17 144]
[18 143]
[19 142]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[36 123]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[53 71]
[54 70]
[55 69]
[57 66]
[58 65]
[59 64]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
