%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGGGUAUACACAGGGAGGCCAGGCAGCCUGGAGUUAGUCGACCGUUGCGAGACGUUGAGCUGCGGCAG\
) } def
/len { sequence length } bind def

/coor [
[24.02014160 236.92057800]
[17.39770317 250.46334839]
[7.72616386 262.02728271]
[-4.43218708 270.94009399]
[-18.37047768 276.68356323]
[-33.27835464 278.92379761]
[-48.28909302 277.53054810]
[-62.52999115 272.58480835]
[-75.17309570 264.37411499]
[-85.48336029 253.37585449]
[-92.86135101 240.22941589]
[-96.87812805 225.69914246]
[-97.30016327 210.62979126]
[-94.10291290 195.89747620]
[-87.47226715 182.35871887]
[-77.79371643 170.80064392]
[-65.62996674 161.89521790]
[-51.68819427 156.16020203]
[-36.77896118 153.92900085]
[-21.76906967 155.33135986]
[-7.53117514 160.28573608]
[5.10695076 168.50407410]
[16.05031395 158.24528503]
[26.99367714 147.98649597]
[28.02179337 143.03082275]
[32.37252808 138.78694153]
[39.34698486 137.36662292]
[51.13173294 128.08654785]
[62.91648102 118.80648041]
[74.70122528 109.52641296]
[86.48597717 100.24633789]
[71.68990326 97.78135681]
[59.93275070 88.46634674]
[54.14899826 74.62625122]
[55.78221893 59.71543121]
[64.42477417 47.45548630]
[77.91956329 40.90638351]
[92.89840698 41.70272446]
[105.62273407 49.64574432]
[112.91666412 62.75294113]
[112.95970154 77.75287628]
[105.74314117 90.89954376]
[120.32491302 87.38217163]
[134.90669250 83.86480713]
[149.48846436 80.34743500]
[164.07023621 76.83006287]
[171.96057129 71.62830353]
[179.35490417 73.48942566]
[194.07450867 70.60265350]
[208.79409790 67.71587372]
[220.79026794 56.53447342]
[236.39044189 61.59084702]
[239.54647827 77.68343353]
[227.01173401 88.25756073]
[211.68087769 82.43547821]
[196.96127319 85.32225037]
[182.24168396 88.20902252]
[167.58760071 91.41183472]
[153.00582886 94.92920685]
[138.42405701 98.44657898]
[123.84228516 101.96395111]
[109.26051331 105.48131561]
[95.76604462 112.03108978]
[83.98130035 121.31115723]
[72.19654846 130.59123230]
[60.41180420 139.87130737]
[48.62705612 149.15136719]
[37.25246811 158.92985535]
[26.30910492 169.18864441]
[15.36574268 179.44743347]
[22.75170517 192.58940125]
[26.77729225 207.11723328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 70]
[23 69]
[24 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
