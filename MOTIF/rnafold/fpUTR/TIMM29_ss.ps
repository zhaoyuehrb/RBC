%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUUGCGCAGAAGAGACUCCCGGGCUCUUAACGUCGGGUAUCAGGAGUUUCUUCCCGGAGCAAGGACCCCCAAGACGGAAGAGG\
) } def
/len { sequence length } bind def

/coor [
[168.59474182 220.60792542]
[160.48512268 207.98912048]
[145.92164612 205.08384705]
[137.51757812 192.40211487]
[140.66363525 177.14628601]
[132.55403137 164.52748108]
[124.44441986 151.90867615]
[116.33480835 139.28988647]
[108.22518921 126.67107391]
[90.89298248 126.38299561]
[77.07367706 115.91802979]
[72.09788513 99.31291199]
[77.88495636 82.97282410]
[68.89579010 70.96470642]
[59.90662384 58.95658493]
[50.91745758 46.94846725]
[41.92829132 34.94034958]
[32.93912888 22.93223000]
[23.94996262 10.92411041]
[14.96079826 -1.08400786]
[5.97163296 -13.09212685]
[-3.01753211 -25.10024452]
[-12.00669670 -37.10836411]
[-26.47085953 -43.51918030]
[-27.90400124 -58.34467697]
[-36.89316559 -70.35279846]
[-46.09523392 -82.19855499]
[-55.50726700 -93.87817383]
[-64.91930389 -105.55780029]
[-74.33133698 -117.23741913]
[-89.82172394 -116.32773590]
[-102.87022400 -124.72513580]
[-108.45941925 -139.20065308]
[-104.44015503 -154.18815613]
[-92.35791016 -163.92463684]
[-76.85856628 -164.66622925]
[-63.90193558 -156.12776184]
[-58.47010040 -141.59246826]
[-62.65171432 -126.64945984]
[-53.23968124 -114.96983337]
[-43.82764435 -103.29021454]
[-34.41561127 -91.61058807]
[-27.61340523 -88.30381775]
[-24.88504791 -79.34195709]
[-15.89588356 -67.33383942]
[-2.07468557 -61.78192520]
[0.00142152 -46.09753036]
[8.99058628 -34.08940887]
[17.97975159 -22.08129120]
[26.96891594 -10.07317257]
[35.95808029 1.93494570]
[44.94724655 13.94306469]
[53.93641281 25.95118332]
[62.92557526 37.95930099]
[71.91474152 49.96741867]
[80.90390778 61.97554016]
[89.89307404 73.98365784]
[102.07109833 72.16637421]
[113.84604645 75.76599884]
[122.92632294 84.08197021]
[127.54474640 95.49586487]
[126.80248260 107.78633881]
[120.84399414 118.56146240]
[128.95361328 131.18026733]
[137.06321716 143.79907227]
[145.17283630 156.41787720]
[153.28244019 169.03668213]
[168.46655273 172.51242065]
[176.51109314 185.42520142]
[173.10392761 199.87950134]
[181.21353149 212.49830627]
[203.64340210 220.57794189]
[206.10336304 243.61454773]
[216.70996094 254.22114563]
[232.68844604 255.65902710]
[241.40609741 269.12683105]
[236.17546082 284.29324341]
[221.00904846 289.52389526]
[207.54122925 280.80624390]
[206.10336304 264.82775879]
[195.49674988 254.22114563]
[188.62326050 256.23281860]
[181.41732788 255.88313293]
[174.67329407 253.17616272]
[169.14587402 248.37780762]
[165.46560669 241.98991394]
[164.06716919 234.69798279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[25 45]
[26 44]
[27 42]
[28 41]
[29 40]
[30 39]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
