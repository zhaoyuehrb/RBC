%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUUCCUGGCCGCCAUGUGUACCCAGAGCCUGGGACUGGCUGGGCUGGGCAGUGACCCAGGCAGCUCUGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[147.74888611 141.11680603]
[135.29812622 132.75148010]
[122.84737396 124.38614655]
[110.39662170 116.02081299]
[96.15851593 118.70826721]
[84.13148499 110.62762451]
[81.23804474 96.42993927]
[68.78729248 88.06461334]
[56.33654022 79.69927979]
[43.88578796 71.33394623]
[31.43503380 62.96862030]
[18.98427963 54.60329056]
[6.53352690 46.23796082]
[-5.91722631 37.87263107]
[-5.96824360 52.87254333]
[-16.34387398 63.70519257]
[-31.32766533 64.40232849]
[-42.66429901 54.57987213]
[-44.10786057 39.64949417]
[-34.86301804 27.83709145]
[-20.02165222 25.65107536]
[-30.07376099 14.51756382]
[-38.39033508 10.08202744]
[-40.29742050 2.71883440]
[-49.88704300 -8.81542301]
[-59.47666931 -20.34968185]
[-69.06629181 -31.88393974]
[-78.65591431 -43.41819763]
[-93.43134308 -51.73223114]
[-89.53247070 -68.23178101]
[-72.59841156 -69.05280304]
[-67.12165833 -53.00782013]
[-57.53203583 -41.47356415]
[-47.94240952 -29.93930626]
[-38.35278702 -18.40504837]
[-28.76316071 -6.87079000]
[-18.94025040 4.46545362]
[-8.88813972 15.59896564]
[2.44810367 25.42187691]
[14.89885712 33.78720474]
[27.34960938 42.15253830]
[39.80036163 50.51786804]
[52.25111771 58.88319778]
[64.70186615 67.24852753]
[77.15262604 75.61385345]
[89.60337830 83.97918701]
[103.84148407 81.29173279]
[115.86851501 89.37237549]
[118.76195526 103.57006073]
[131.21270752 111.93538666]
[143.66346741 120.30072021]
[156.11421204 128.66604614]
[167.48527527 122.74166870]
[180.22727966 122.33323669]
[191.82038879 127.45798492]
[199.99943542 137.04518127]
[203.19653320 149.15916443]
[200.84130859 161.38996887]
[212.56877136 170.74232483]
[224.48457336 179.85350037]
[236.58375549 188.71971130]
[248.68293762 197.58592224]
[260.78213501 206.45214844]
[277.13418579 207.69400024]
[283.98986816 222.59136963]
[274.29666138 235.81912231]
[258.02606201 233.76966858]
[251.91590881 218.55133057]
[239.81672668 209.68510437]
[227.71754456 200.81889343]
[215.61836243 191.95268250]
[208.15231323 190.49951172]
[203.21643066 182.46978760]
[191.48895264 173.11744690]
[174.96316528 178.65943909]
[158.20698547 173.32812500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[21 38]
[22 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[58 74]
[59 73]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
