%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGUCAGCGUCGCUGCCGGUCUCCGGCGGAGACGGACUCUGGAGUUUGGGCGGCCCGGGCGGCCACUAGGUACUCUGAUAUUCCGUACUAAACACGUCUGCAAGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[225.29612732 114.55482483]
[210.33233643 113.51309967]
[195.36856079 112.47137451]
[180.40476990 111.42964935]
[165.44099426 110.38792419]
[152.20710754 117.22265625]
[138.97758484 108.54563904]
[124.01380920 107.50391388]
[109.05002594 106.46218872]
[103.60697937 119.40331268]
[84.38930511 123.66621399]
[69.80619049 127.17803192]
[55.22307968 130.68984985]
[40.63996887 134.20166016]
[29.03480339 144.95483398]
[14.84979057 140.41229248]
[0.26667884 143.92411804]
[-14.31643295 147.43592834]
[-28.89954376 150.94775391]
[-43.48265457 154.45956421]
[-58.06576538 157.97138977]
[-72.64888000 161.48320007]
[-86.63222504 171.06977844]
[-99.71512604 160.28672791]
[-92.97519684 144.73007202]
[-76.16069794 146.90008545]
[-61.57758331 143.38827515]
[-46.99447250 139.87644958]
[-32.41136169 136.36463928]
[-17.82824898 132.85282898]
[-3.24513841 129.34100342]
[11.33797264 125.82918549]
[21.90005493 115.32720184]
[37.12815094 119.61855316]
[51.71126175 116.10673523]
[66.29437256 112.59491730]
[80.87748718 109.08309937]
[85.39359283 94.77909088]
[75.47078705 83.53018188]
[65.54798126 72.28127289]
[55.62517929 61.03236389]
[39.91715240 56.32174301]
[36.40648651 40.30277634]
[48.70465469 29.45440674]
[64.16035461 34.93650436]
[66.87408447 51.10955811]
[76.79689026 62.35846710]
[86.71969604 73.60737610]
[96.64250183 84.85628510]
[110.09175110 91.49840546]
[125.05553436 92.54013062]
[140.01931763 93.58185577]
[154.32351685 86.82163239]
[166.48271179 95.42414093]
[181.44650269 96.46586609]
[196.41027832 97.50759125]
[211.37406921 98.54931641]
[226.33784485 99.59104156]
[241.30163574 98.54931641]
[255.97673035 95.44423676]
[270.65182495 92.33915710]
[285.32693481 89.23408508]
[300.00201416 86.12900543]
[314.67712402 83.02393341]
[316.93536377 69.85141754]
[323.55822754 58.28018570]
[333.72323608 49.70282364]
[346.18322754 45.14287186]
[359.41918945 45.13270569]
[371.82568359 49.65149689]
[381.90539551 58.13038635]
[388.44985962 69.52403259]
[403.27484131 67.23931885]
[418.09982300 64.95460510]
[432.92480469 62.66989517]
[447.74978638 60.38518143]
[452.65502930 45.88700104]
[463.74404907 35.33748245]
[478.46862793 31.16082001]
[493.44525146 34.31678391]
[505.23229980 44.08015823]
[511.12127686 58.20738983]
[509.75891113 73.45214081]
[501.45822144 86.31128693]
[488.12670898 93.82987976]
[472.82785034 94.28021240]
[459.07714844 87.55879211]
[450.03448486 75.21015930]
[435.20950317 77.49487305]
[420.38452148 79.77958679]
[405.55953979 82.06430054]
[390.73455811 84.34901428]
[386.35064697 100.54151154]
[375.34680176 113.27616119]
[359.86105347 120.00615692]
[342.93374634 119.35842133]
[327.91076660 111.41350555]
[317.78219604 97.69902802]
[303.10708618 100.80410767]
[288.43200684 103.90917969]
[273.75689697 107.01425934]
[259.08181763 110.11933899]
[244.40670776 113.22441101]
[257.46032715 120.61381531]
[265.22750854 133.44622803]
[265.72079468 148.43811035]
[258.81402588 161.75337219]
[246.27441406 169.98492432]
[231.31062317 171.02648926]
[217.75154114 164.61155701]
[209.06665039 152.38157654]
[207.47822571 137.46591187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[7 52]
[8 51]
[9 50]
[11 37]
[12 36]
[13 35]
[14 34]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[38 49]
[39 48]
[40 47]
[41 46]
[59 103]
[60 102]
[61 101]
[62 100]
[63 99]
[64 98]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
