%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCCUUGUUAAUUACCGGAGCGACAGACUAGGGAGCUCCGCCCGGGAUUUGCCCAUCGGCGGAGGCGCCAGGCUCCCGUUUCUCCCCAUCCCUCUCGCUGCCGUCCAGGUGCACCGCCUGCCUCUCAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[85.50185394 207.64170837]
[91.54819489 191.80256653]
[91.54819489 176.80256653]
[91.54819489 161.80256653]
[91.54819489 146.80256653]
[83.57088470 143.91326904]
[76.34569550 139.69950867]
[70.08577728 134.33525085]
[64.96667480 128.02743530]
[61.12154007 121.00820160]
[58.63783264 113.52648926]
[57.55567169 105.83929443]
[57.86783218 98.20287323]
[59.52130127 90.86421967]
[62.42036438 84.05307007]
[66.43105316 77.97471619]
[71.38674927 72.80384827]
[77.09474945 68.67960358]
[83.34352875 65.70195770]
[79.57292175 51.18360519]
[75.80231476 36.66525269]
[71.86428070 22.19141960]
[67.75933075 7.76403475]
[63.65438843 -6.66334963]
[59.54944229 -21.09073448]
[55.44449615 -35.51811981]
[44.22596741 -46.67406464]
[48.18491745 -61.03289413]
[44.07997131 -75.46028137]
[28.04215813 -79.30388641]
[16.18071938 -90.62700653]
[11.64893627 -106.28936005]
[15.58597279 -122.01523590]
[26.83232117 -133.56069946]
[22.39522934 -147.88941956]
[17.95813751 -162.21813965]
[13.52104568 -176.54685974]
[9.08395386 -190.87557983]
[-18.68893433 -207.17810059]
[-28.27163506 -218.71810913]
[-37.85433578 -230.25811768]
[-47.43703842 -241.79812622]
[-57.01974106 -253.33813477]
[-66.60244751 -264.87814331]
[-76.18514252 -276.41815186]
[-95.35915375 -282.44573975]
[-98.00115204 -301.54745483]
[-108.10659027 -312.63256836]
[-118.21202087 -323.71771240]
[-134.10705566 -325.89199829]
[-142.19340515 -339.74804688]
[-136.26791382 -354.65670776]
[-120.87612152 -359.18133545]
[-107.82527924 -349.85098267]
[-107.12688446 -333.82315063]
[-97.02145386 -322.73800659]
[-86.91601562 -311.65286255]
[-76.59752655 -312.09045410]
[-67.57815552 -306.62042236]
[-63.00956345 -296.86834717]
[-64.64513397 -286.00085449]
[-55.06243515 -274.46084595]
[-45.47973251 -262.92083740]
[-35.89702988 -251.38082886]
[-26.31432724 -239.84082031]
[-16.73162651 -228.30081177]
[-7.14892387 -216.76080322]
[7.36942720 -220.53140259]
[10.12567043 -235.27600098]
[2.28188419 -249.27081299]
[8.46614456 -264.07400513]
[23.93441582 -268.32983398]
[36.82076263 -258.77359009]
[37.23988724 -242.73602295]
[24.87026596 -232.51976013]
[22.11402321 -217.77516174]
[31.74482346 -229.27505493]
[46.17320251 -233.37651062]
[60.41310883 -228.66217041]
[69.54362488 -216.76116943]
[70.40949249 -201.78617859]
[62.71149826 -188.91213989]
[49.10985184 -182.58796692]
[34.30490494 -184.99911499]
[23.41267395 -195.31266785]
[27.84976578 -180.98394775]
[32.28685760 -166.65522766]
[36.72394943 -152.32650757]
[41.16104126 -137.99778748]
[54.69530869 -135.84176636]
[66.02369690 -128.01136780]
[72.88914490 -115.99699402]
[73.89376068 -102.12938690]
[68.78311157 -89.12744904]
[58.50735855 -79.56522369]
[62.61230087 -65.13784027]
[73.53721619 -55.01383591]
[69.87187958 -39.62306213]
[73.97682953 -25.19567871]
[78.08177185 -10.76829433]
[82.18671417 3.65909004]
[86.29166412 18.08647537]
[91.19169617 23.70948792]
[90.32066345 32.89464569]
[94.09127808 47.41299820]
[97.86188507 61.93134689]
[124.72176361 66.95099640]
[143.24420166 89.86518860]
[142.44261169 121.46015930]
[154.41287231 130.49967957]
[166.38313293 139.53919983]
[178.35337830 148.57872009]
[190.32363892 157.61824036]
[202.29389954 166.65776062]
[218.57752991 171.37788391]
[218.54963684 188.33181763]
[202.25054932 192.99830627]
[193.25437927 178.62802124]
[181.28411865 169.58850098]
[169.31387329 160.54898071]
[157.34361267 151.50946045]
[145.37335205 142.46994019]
[133.40309143 133.43041992]
[126.68936920 136.77345276]
[133.37544250 150.20091248]
[143.88345337 160.90519714]
[136.95005798 174.20661926]
[122.15714264 171.72276306]
[119.94799042 156.88697815]
[113.26191711 143.45953369]
[106.54819489 146.80256653]
[106.54819489 161.80256653]
[106.54819489 176.80256653]
[106.54819489 191.80256653]
[112.59452820 207.64170837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[19 106]
[20 105]
[21 104]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[28 96]
[29 95]
[34 89]
[35 88]
[36 87]
[37 86]
[38 85]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[47 57]
[48 56]
[49 55]
[68 76]
[69 75]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
