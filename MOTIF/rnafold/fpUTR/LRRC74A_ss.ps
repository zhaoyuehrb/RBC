%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACAGGCGGGUGGGGAUCCUUUCAACAGGGCUCCCAGCAAUAGAGCAGUCCCACUCUCCCAGAUGAGCUGGAGAAGUAGCUACCUCUCCCAGACAGAGUUGGGGUCAAAUUC\
) } def
/len { sequence length } bind def

/coor [
[103.88775635 113.92311096]
[99.84080505 128.36686707]
[95.79385376 142.81062317]
[97.34263611 159.69369507]
[81.54811859 165.85563660]
[71.25462341 152.38417053]
[81.35009766 138.76367188]
[85.39704895 124.31991577]
[89.44400024 109.87615967]
[82.18180847 96.75135040]
[67.79467773 92.50749207]
[53.40753937 88.26363373]
[39.02040482 84.01978302]
[24.63326836 79.77592468]
[10.24613190 75.53206635]
[-4.14100361 71.28820801]
[-18.52813911 67.04434967]
[-31.05684280 79.09214020]
[-49.92940521 80.57253265]
[-66.74405670 68.87845612]
[-81.50820160 71.52799988]
[-96.27233887 74.17755127]
[-105.09109497 87.29262543]
[-120.61649323 90.24855042]
[-133.63760376 81.29162598]
[-136.42921448 65.73584747]
[-127.33512878 52.81016922]
[-111.75069427 50.18317413]
[-98.92189026 59.41341019]
[-84.15774536 56.76385880]
[-69.39360809 54.11431122]
[-66.14145660 39.47110367]
[-78.39600372 30.82089996]
[-90.65055084 22.17069435]
[-102.90509796 13.52048969]
[-117.16458893 19.40866852]
[-132.33972168 16.63038063]
[-143.58816528 6.07216597]
[-147.32060242 -8.89688587]
[-142.34600830 -23.50020599]
[-130.25175476 -33.07792664]
[-114.89709473 -34.57383347]
[-101.18162537 -27.51058769]
[-93.48190308 -14.14204502]
[-94.25489807 1.26594102]
[-82.00035095 9.91614628]
[-69.74579620 18.56635094]
[-57.49125290 27.21655464]
[-35.96960068 23.84990311]
[-19.08342743 34.81023026]
[-14.28428268 52.65721893]
[0.10285293 56.90107346]
[14.48998928 61.14493179]
[28.87712479 65.38878632]
[43.26425934 69.63264465]
[57.65139771 73.87650299]
[72.03853607 78.12035370]
[86.42566681 82.36421204]
[117.27972412 83.87940216]
[131.96598816 80.82756805]
[146.65225220 77.77572632]
[161.33851624 74.72388458]
[176.02476501 71.67204285]
[190.71102905 68.62020111]
[194.48120117 52.85832596]
[204.68556213 40.34239578]
[219.26028442 33.52416992]
[235.29199219 33.71104813]
[249.60008240 40.81566238]
[259.36776733 53.38319397]
[273.96520996 49.93133926]
[288.56262207 46.47948837]
[303.16003418 43.02763367]
[317.70895386 39.37672043]
[332.20663452 35.52742767]
[346.70431519 31.67813683]
[358.05682373 20.65854645]
[372.34344482 24.87067986]
[386.84112549 21.02138710]
[398.07537842 9.07469273]
[413.97451782 13.09337139]
[418.18286133 28.94335365]
[406.37121582 40.31953430]
[390.69042969 35.51907730]
[376.19271851 39.36836624]
[365.87719727 50.11262894]
[350.55361938 46.17582321]
[336.05593872 50.02511597]
[321.55825806 53.87440872]
[315.82336426 58.69760132]
[306.61190796 57.62505341]
[292.01446533 61.07690811]
[277.41705322 64.52876282]
[262.81964111 67.98061371]
[260.48498535 81.72748566]
[253.04240417 93.57018280]
[241.59761047 101.68665314]
[227.87509155 104.81311035]
[213.95817566 102.44075775]
[201.97283936 94.89820862]
[193.76287842 83.30646515]
[179.07661438 86.35830688]
[164.39035034 89.41014862]
[149.70408630 92.46198273]
[135.01782227 95.51382446]
[120.33156586 98.56566620]
[135.30186462 97.62213135]
[148.59123230 104.57860565]
[156.34660339 117.41816711]
[156.31941223 132.41813660]
[148.51753235 145.22949219]
[135.20301819 152.13772583]
[120.23624420 151.13992310]
[107.95661926 142.52534485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[20 31]
[21 30]
[22 29]
[32 48]
[33 47]
[34 46]
[35 45]
[59 106]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[70 94]
[71 93]
[72 92]
[73 91]
[74 89]
[75 88]
[76 87]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
