%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCGCGGGGCGGGAACGCGGAAGGGGCUGGGGUUGCGGCGCGGCGGCGAGGACCAGACCGGGGGCGGGGCCGGUAGUGGGAGUGCGGGGCGCGCGGUGACAGCGCGGGGUUGGCGGCGUGGGACCCAGGGGGCGACAGAGGCAGCAGCAGCCCGAGGCCUGAGGAGAGGAGACCGGCGGCGGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[125.01553345 583.98791504]
[123.52985382 569.06170654]
[122.04416656 554.13543701]
[118.24633026 547.77941895]
[120.65941620 538.95043945]
[119.42072296 524.00164795]
[118.18202972 509.05288696]
[109.42015076 497.00802612]
[115.99141693 482.61605835]
[114.75272369 467.66729736]
[100.09792328 464.46780396]
[92.74156952 477.54006958]
[85.38521576 490.61233521]
[86.10693359 506.99557495]
[72.13588715 515.58288574]
[57.84429169 507.54037476]
[57.93411255 491.14147949]
[72.31295013 483.25598145]
[79.66930389 470.18371582]
[87.02565765 457.11145020]
[72.72713470 438.62503052]
[68.14524078 416.09765625]
[73.89260864 394.23397827]
[88.45971680 377.44952393]
[108.59249878 368.97903442]
[107.84873962 353.99746704]
[107.10498047 339.01593018]
[98.74613190 326.68795776]
[105.78964996 312.52111816]
[105.04589844 297.53955078]
[96.68704987 285.21157837]
[103.73056793 271.04473877]
[102.98680878 256.06320190]
[102.24305725 241.08164978]
[101.49929810 226.10009766]
[100.75553894 211.11854553]
[100.01178741 196.13699341]
[99.26802826 181.15545654]
[90.90917969 168.82746887]
[97.95269775 154.66062927]
[97.20893860 139.67907715]
[96.34135437 124.70419312]
[95.34999847 109.73699188]
[91.35089874 110.12463379]
[86.94689941 108.97625732]
[82.69018555 106.14214325]
[79.17319489 101.66024017]
[76.96777344 95.76409149]
[65.13066864 86.55090332]
[53.29356003 77.33770752]
[40.36185455 82.13794708]
[26.85483170 79.93442535]
[16.28782463 71.40912628]
[11.35727501 58.87505722]
[13.25307655 45.64957428]
[1.56991708 36.24192810]
[-10.11324215 26.83428383]
[-28.36212730 24.43554497]
[-34.06974792 7.84875441]
[-45.90685654 -1.36443615]
[-57.74396515 -10.57762718]
[-69.58106995 -19.79081726]
[-81.41818237 -29.00400734]
[-96.28834534 -24.57030869]
[-110.91341400 -29.75557899]
[-119.66974640 -42.56597900]
[-119.19034576 -58.07564545]
[-109.65956116 -70.32080078]
[-94.74217224 -74.59292603]
[-80.17421722 -69.24930573]
[-71.55736542 -56.34466934]
[-72.20498657 -40.84111404]
[-60.36788177 -31.62792587]
[-48.53077316 -22.41473389]
[-36.69366455 -13.20154381]
[-24.85655785 -3.98835325]
[-12.80662823 -5.17090797]
[-2.86691022 2.42340374]
[-0.70559675 15.15112400]
[10.97756195 24.55876923]
[22.66072083 33.96641541]
[38.35075378 29.16741943]
[53.96815109 34.71557236]
[63.29922104 48.61338425]
[62.50674820 65.50060272]
[74.34385681 74.71379089]
[86.18096161 83.92698669]
[100.75191498 80.36504364]
[107.00363922 66.72994232]
[113.25537109 53.09484482]
[105.81536102 39.60586929]
[107.72239685 24.49902916]
[118.03720856 13.54144669]
[132.65147400 10.79169178]
[138.90319824 -2.84340644]
[145.15493774 -16.47850418]
[151.40666199 -30.11360168]
[150.12506104 -45.88281631]
[162.46281433 -54.22722244]
[168.71453857 -67.86231995]
[167.43295288 -83.63153076]
[179.77070618 -91.97594452]
[186.02243042 -105.61103821]
[192.27415466 -119.24613953]
[198.52587891 -132.88124084]
[194.31245422 -148.36111450]
[203.90396118 -161.22122192]
[219.94262695 -161.59638977]
[230.12495422 -149.19882202]
[226.63993835 -133.53887939]
[212.16098022 -126.62950897]
[205.90925598 -112.99440765]
[199.65753174 -99.35931396]
[193.40580750 -85.72421265]
[195.13456726 -70.93027496]
[182.34963989 -61.61059189]
[176.09791565 -47.97549438]
[177.82667542 -33.18155670]
[165.04176331 -23.86187553]
[158.79002380 -10.22677708]
[152.53829956 3.40832138]
[146.28657532 17.04341888]
[153.74011230 29.91131973]
[152.16868591 44.87776947]
[141.96650696 56.18126678]
[126.89046478 59.34657288]
[120.63874054 72.98167419]
[114.38700867 86.61676788]
[123.58103943 74.76477051]
[136.51934814 67.17529297]
[151.35096741 64.93409729]
[165.95407104 68.36181641]
[178.23953247 76.96807098]
[186.44975281 89.52164459]
[189.41020203 104.22660065]
[186.69731140 118.97924042]
[178.69923401 131.66902161]
[166.56015015 140.48054504]
[152.01672363 144.15319824]
[137.14952087 142.16159058]
[124.08548737 134.79064941]
[114.69357300 123.09484100]
[110.31719971 108.74563599]
[111.30855560 123.71283722]
[115.00399017 132.08648682]
[112.19049072 138.93533325]
[112.93424988 153.91688538]
[121.34629822 167.31643677]
[114.24958038 180.41169739]
[114.99333191 195.39324951]
[115.73709106 210.37478638]
[116.48085022 225.35633850]
[117.22460175 240.33789062]
[117.96836090 255.31944275]
[118.71211243 270.30099487]
[127.12416077 283.70053101]
[120.02744293 296.79580688]
[120.77120209 311.77734375]
[129.18324280 325.17691040]
[122.08653259 338.27215576]
[122.83029175 353.25372314]
[123.57404327 368.23526001]
[133.75430298 370.14279175]
[143.35076904 374.22213745]
[151.90269470 380.31021118]
[158.99255371 388.14675903]
[164.26631165 397.38534546]
[167.45112610 407.60870361]
[168.36921692 418.34762573]
[166.94764709 429.10226440]
[163.22305298 439.36563110]
[157.34133911 448.64733887]
[149.55216980 456.49716187]
[140.19850159 462.52670288]
[129.70149231 466.42858887]
[130.94018555 481.37738037]
[139.79066467 494.49145508]
[133.13079834 507.81420898]
[134.36949158 522.76300049]
[135.60818481 537.71173096]
[136.97041321 552.64978027]
[138.45610046 567.57598877]
[139.94177246 582.50225830]
[152.95866394 591.16796875]
[157.31033325 606.18786621]
[150.94206238 620.46997070]
[136.86074829 627.27075195]
[121.71516418 623.37908936]
[112.65658569 610.63244629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 183]
[2 182]
[3 181]
[5 180]
[6 179]
[7 178]
[9 176]
[10 175]
[11 20]
[12 19]
[13 18]
[25 162]
[26 161]
[27 160]
[29 158]
[30 157]
[32 155]
[33 154]
[34 153]
[35 152]
[36 151]
[37 150]
[38 149]
[40 147]
[41 146]
[42 144]
[43 143]
[48 87]
[49 86]
[50 85]
[55 81]
[56 80]
[57 79]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[88 128]
[89 127]
[90 126]
[94 122]
[95 121]
[96 120]
[97 119]
[99 117]
[100 116]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
