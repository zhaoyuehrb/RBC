%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUUCACCCCCAACCACAGUCCUUGCUGUUGGCAUUUACUCAACUAGUCUUUAAUUCCUGUUUGACAAACUUUAUAAGGUGCUACAAGACAGAUGAUUUUUCACCAUCUACCAUA\
) } def
/len { sequence length } bind def

/coor [
[115.85199738 220.24121094]
[103.11925507 228.17074585]
[88.75189209 232.48104858]
[73.75693512 232.87002563]
[59.18542099 229.31039429]
[46.05870056 222.05165100]
[35.29685211 211.60260010]
[27.65420341 198.69563293]
[23.66644287 184.23541260]
[23.61308098 169.23551941]
[27.49785805 154.74729919]
[35.04848099 141.78627014]
[45.73571014 131.26091003]
[58.81045532 123.90897369]
[73.35833740 120.24551392]
[84.43927765 110.13548279]
[69.86783600 113.69538879]
[55.29638290 117.25528717]
[40.77361298 121.00884247]
[26.30209541 124.95537567]
[11.83057785 128.90191650]
[-2.64093995 132.84844971]
[-13.79473591 144.87030029]
[-29.72048569 140.95846558]
[-34.03514099 125.13708496]
[-22.30015945 113.68186188]
[-6.58747864 118.37693787]
[7.88403940 114.43039703]
[22.35555840 110.48385620]
[36.82707596 106.53732300]
[42.52516174 101.67961121]
[51.73648453 102.68383789]
[66.30792999 99.12393951]
[80.87937927 95.56404114]
[65.94843292 97.00170135]
[51.52901840 92.86885071]
[39.62653351 83.74027252]
[31.89633942 70.88554382]
[29.41352081 56.09245300]
[32.52338028 41.41836548]
[40.79341507 28.90411186]
[53.07344818 20.29012680]
[67.65562439 16.77441406]
[82.51189423 18.84592628]
[95.57610321 26.21656799]
[105.03133392 37.86125183]
[109.56257629 52.16047668]
[108.53964233 67.12555695]
[102.10678101 80.67248535]
[110.72859192 68.39794922]
[119.35040283 56.12340546]
[127.97221375 43.84886169]
[136.59402466 31.57432175]
[128.55754089 17.49658585]
[127.43773651 1.38325906]
[133.40672302 -13.56320477]
[145.23275757 -24.39415741]
[160.53404236 -28.99643707]
[176.25833130 -26.50453568]
[184.55032349 -39.00424576]
[192.84233093 -51.50395203]
[188.65925598 -64.38751221]
[192.64202881 -77.12982941]
[203.10676575 -85.10102081]
[216.05876160 -85.54225159]
[224.68057251 -97.81678772]
[233.30238342 -110.09133148]
[230.33447266 -125.61444855]
[239.28134155 -138.64245605]
[254.83496094 -141.44607544]
[267.76763916 -132.36196899]
[270.40667725 -116.77957916]
[261.18634033 -103.94364929]
[245.57691956 -101.46952057]
[236.95510864 -89.19497681]
[228.33329773 -76.92044067]
[231.95916748 -60.55761719]
[222.49440002 -46.32090378]
[205.34204102 -43.21195221]
[197.05003357 -30.71224403]
[188.75804138 -18.21253586]
[196.45199585 -6.58839941]
[199.11949158 7.13807774]
[196.32162476 20.88295174]
[188.45187378 32.54648972]
[176.68104553 40.33393097]
[162.78326416 43.03163910]
[148.86856079 40.19613266]
[140.24674988 52.47067261]
[131.62493896 64.74521637]
[123.00313568 77.01976013]
[114.38132477 89.29429626]
[116.17412567 104.18677521]
[127.46268463 114.06444550]
[138.75125122 123.94211578]
[150.03981018 133.81979370]
[161.32836914 143.69746399]
[176.12286377 139.32406616]
[190.92680359 143.66537476]
[201.01631165 155.33607483]
[203.17184448 170.61210632]
[196.70561218 184.61894226]
[183.68093872 192.88703918]
[168.25395203 192.77809143]
[155.34736633 184.32684326]
[149.07960510 170.23008728]
[151.45069885 154.98602295]
[140.16213989 145.10835266]
[128.87358093 135.23068237]
[117.58501434 125.35300446]
[106.29645538 115.47533417]
[111.46749115 129.55583191]
[122.68603516 139.51295471]
[130.89846802 152.06507874]
[135.52917480 166.33241272]
[136.25355530 181.31491089]
[133.02084351 195.96241760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 34]
[17 33]
[18 32]
[19 30]
[20 29]
[21 28]
[22 27]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[59 81]
[60 80]
[61 79]
[65 76]
[66 75]
[67 74]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
