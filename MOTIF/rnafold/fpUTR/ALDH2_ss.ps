%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUGCCGCGCGGGGCGGGGAGCGGGGUCGGCUCAGUGGCCCUGAGACCCUAGCUCUGCUCUCGGUCCGCUCGCUGUCCGCUAGCCCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[104.13433838 312.32638550]
[104.04146576 297.02117920]
[111.08222198 283.43124390]
[123.63869476 274.67947388]
[121.70087433 259.80517578]
[119.76305389 244.93086243]
[117.82523346 230.05656433]
[115.64680481 215.21559143]
[113.22834015 200.41183472]
[101.39175415 187.56723022]
[107.79440308 170.39717102]
[104.89783478 155.67948914]
[101.76332092 141.01065063]
[98.39168549 126.39450073]
[95.02005005 111.77833557]
[90.94259644 97.34316254]
[86.16895294 83.12302399]
[81.39530945 68.90288544]
[76.62166595 54.68274689]
[64.89482880 44.06239700]
[68.17948914 29.53448677]
[63.40584946 15.31434917]
[58.63220215 1.09421110]
[53.85855865 -13.12592697]
[49.08491516 -27.34606361]
[44.31126785 -41.56620026]
[39.53762436 -55.78633881]
[34.76398087 -70.00647736]
[29.99033546 -84.22661591]
[25.21669006 -98.44675446]
[20.44304466 -112.66689301]
[4.72655630 -125.08412933]
[8.89674377 -143.84817505]
[3.21264315 -157.72949219]
[-2.69549322 -171.51695251]
[-8.82611656 -185.20692444]
[-14.95673943 -198.89691162]
[-21.08736229 -212.58688354]
[-27.21798515 -226.27685547]
[-41.63513184 -233.31428528]
[-44.98120117 -249.00451660]
[-34.68938065 -261.31134033]
[-18.65467262 -260.79403687]
[-9.17752934 -247.84939575]
[-13.52800846 -232.40748596]
[-7.39738512 -218.71749878]
[-1.26676238 -205.02752686]
[4.86386061 -191.33755493]
[10.99448299 -177.64756775]
[16.70997047 -172.73637390]
[17.09396172 -163.41358948]
[22.77806282 -149.53227234]
[32.73178101 -146.34539795]
[39.34385681 -137.96670532]
[40.16322327 -127.10213470]
[34.66318130 -117.44053650]
[39.43682861 -103.22039795]
[44.21047211 -89.00025940]
[48.98411560 -74.78012085]
[53.75776291 -60.55998611]
[58.53140640 -46.33984756]
[63.30504990 -32.11970901]
[68.07869720 -17.89957047]
[72.85234070 -3.67943358]
[77.62598419 10.54070377]
[82.39962769 24.76084137]
[93.78502655 34.36407089]
[90.84180450 49.90910339]
[95.61544800 64.12924194]
[100.38909149 78.34938049]
[105.16273499 92.56951904]
[108.54530334 94.83889008]
[110.83529663 98.65936279]
[111.33350372 103.47023773]
[109.63620758 108.40670013]
[113.00784302 123.02285767]
[116.37947845 137.63902283]
[121.44754791 145.47332764]
[119.61550903 152.78292847]
[122.51207733 167.50059509]
[132.85073853 175.41931152]
[134.87683105 187.87503052]
[128.03208923 197.99337769]
[130.45056152 212.79711914]
[135.00088501 220.94305420]
[132.69953918 228.11874390]
[134.63735962 242.99304199]
[136.57518005 257.86734009]
[138.51300049 272.74163818]
[152.89265442 277.98419189]
[163.18028259 289.31655884]
[167.01188660 304.13470459]
[163.50697327 319.03350830]
[153.47094727 330.58932495]
[139.21002197 336.14672852]
[124.00125122 334.42864990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 89]
[5 88]
[6 87]
[7 86]
[8 84]
[9 83]
[11 80]
[12 79]
[13 77]
[14 76]
[15 75]
[16 71]
[17 70]
[18 69]
[19 68]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[33 52]
[34 51]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
