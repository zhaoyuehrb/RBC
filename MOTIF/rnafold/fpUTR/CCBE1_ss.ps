%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCGGAGGAGCAGGACGCUUGGUCCGGACGGAGCUCGGCGCUGGGAAGAAGCCGGGAGCUUCCCUG\
) } def
/len { sequence length } bind def

/coor [
[100.58009338 117.96163940]
[94.76328278 131.78787231]
[97.34956360 147.98179626]
[84.44953156 158.10708618]
[69.33364105 151.74769592]
[67.55181122 135.44563293]
[80.93704987 125.97106171]
[86.75386047 112.14482880]
[81.20543671 103.91066742]
[80.69043732 93.34806824]
[86.01780701 83.47151947]
[71.31417847 80.50449371]
[56.61054611 77.53746033]
[41.55258560 82.39218903]
[30.60723305 72.29028320]
[15.90360260 69.32324982]
[1.19997203 66.35622406]
[-13.50365829 63.38919449]
[-30.22581863 66.18305969]
[-37.53965378 50.88782883]
[-24.86683464 39.62567902]
[-10.53662968 48.68556595]
[4.16700077 51.65259552]
[18.87063026 54.61962128]
[33.57426071 57.58665085]
[47.58052063 52.51970291]
[59.57757568 62.83383179]
[74.28120422 65.80085754]
[88.98484039 68.76789093]
[103.89315796 67.11197662]
[117.58732605 60.99072647]
[131.28149414 54.86947250]
[138.09999084 48.30572891]
[145.71945190 48.79529953]
[159.67098999 43.28577423]
[166.02433777 29.06351471]
[180.25164795 23.67481995]
[193.77125549 29.81941795]
[207.72277832 24.30989456]
[221.67431641 18.80036926]
[235.62583923 13.29084587]
[249.57736206 7.78132200]
[263.52890015 2.27179813]
[274.44216919 -12.37244511]
[291.61349487 -9.49978352]
[305.30764771 -15.62103844]
[314.48379517 -29.21259499]
[330.82128906 -27.79184151]
[337.51351929 -12.82032967]
[327.67608643 0.30053455]
[311.42892456 -1.92686975]
[297.73474121 4.19438457]
[292.99569702 15.54110146]
[281.37136841 20.66062546]
[269.03842163 16.22332573]
[255.08688354 21.73285103]
[241.13536072 27.24237442]
[227.18383789 32.75189972]
[213.23229980 38.26142120]
[199.28077698 43.77094650]
[193.60737610 57.49494553]
[179.53703308 63.28113174]
[165.18051147 57.23730087]
[151.22897339 62.74682617]
[137.40274048 68.56363678]
[123.70858002 74.68489075]
[110.01441193 80.80614471]
[117.67218018 88.81632996]
[120.16300201 99.22262573]
[117.18064117 109.10108185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[11 29]
[12 28]
[13 27]
[15 25]
[16 24]
[17 23]
[18 22]
[30 67]
[31 66]
[32 65]
[34 64]
[35 63]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
