%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCGCCCGCGAGGUGCUGAAAGGACAGUUCCCGCCGCCGAACUUAGCCCGCGGGUGGGGCGGCCCGGGAGCCAGCGGGGCACGUGAGCG\
) } def
/len { sequence length } bind def

/coor [
[96.79662323 349.43621826]
[100.20501709 334.29812622]
[111.88262177 324.07983398]
[110.39693451 309.15359497]
[108.91125488 294.22735596]
[99.95141602 282.32901001]
[106.28382874 267.83035278]
[104.79814148 252.90409851]
[100.92646790 246.43241882]
[103.51849365 237.46101379]
[102.52713776 222.49380493]
[101.53577423 207.52659607]
[100.54441833 192.55940247]
[99.55306244 177.59219360]
[90.59527588 169.27937317]
[89.75676727 156.68309021]
[98.04637909 146.63308716]
[97.55043030 131.64129639]
[97.05448151 116.64949036]
[87.26569366 105.28376770]
[72.51311493 102.57055664]
[57.76054001 99.85735321]
[43.00796509 97.14414215]
[30.13946342 106.31896210]
[14.56651020 103.62476349]
[5.52826166 90.65998077]
[8.38694954 75.11638641]
[21.44656563 66.21571350]
[36.95907211 69.23857880]
[45.72117233 82.39156342]
[60.47374725 85.10477448]
[75.22632599 87.81798553]
[89.97889709 90.53118896]
[103.28724670 83.61107635]
[109.53897095 69.97597504]
[115.79070282 56.34087753]
[122.04242706 42.70578003]
[128.29415894 29.07068062]
[124.53305054 16.59773445]
[130.17485046 5.30439568]
[141.64941406 1.09974742]
[148.34855652 -12.32119274]
[155.04768372 -25.74213219]
[161.74681091 -39.16307068]
[156.97128296 -53.98981094]
[163.95634460 -67.50511932]
[178.12080383 -71.96647644]
[184.81993103 -85.38742065]
[184.79887390 -92.32353210]
[187.93318176 -97.36473083]
[192.43124390 -99.45187378]
[200.00273132 -112.40072632]
[207.57420349 -125.34957123]
[207.12345886 -141.74252319]
[221.23458862 -150.09765625]
[235.39125061 -141.81993103]
[235.03030396 -125.42476654]
[220.52305603 -117.77809143]
[212.95156860 -104.82923889]
[205.38008118 -91.88039398]
[198.24087524 -78.68828583]
[191.54174805 -65.26734924]
[196.49026489 -51.26564407]
[189.88758850 -37.55947113]
[175.16775513 -32.46393967]
[168.46862793 -19.04300117]
[161.76948547 -5.62206030]
[155.07035828 7.79887962]
[157.15869141 25.13710976]
[141.92926025 35.32241058]
[135.67752075 48.95750809]
[129.42579651 62.59260559]
[123.17407227 76.22770691]
[116.92234039 89.86280060]
[112.04627991 116.15354156]
[112.54222870 131.14533997]
[113.03817749 146.13713074]
[123.14752960 161.41709900]
[114.52026367 176.60083008]
[115.51161957 191.56803894]
[116.50298309 206.53524780]
[117.49433899 221.50244141]
[118.48569489 236.46965027]
[119.72438812 251.41841125]
[121.21007538 266.34466553]
[130.27616882 279.31063843]
[123.83749390 292.74166870]
[125.32318115 307.66790771]
[126.80886078 322.59414673]
[140.27154541 330.31008911]
[146.59704590 344.47933960]
[143.35307312 359.65353394]
[131.78700256 369.99789429]
[116.34622955 371.53479004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[7 85]
[8 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[17 77]
[18 76]
[19 75]
[20 33]
[21 32]
[22 31]
[23 30]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[41 68]
[42 67]
[43 66]
[44 65]
[47 62]
[48 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
