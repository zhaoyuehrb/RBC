%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGACACACAAGAGUUAACUGGCGGGUGUGACAGGCGGACCGCCCUCAGGAAGUGUUACUCACUGGGGAUGUGCGUGCCUUGCCUUGGGACUGGAUUCUCUUCCUGAAGCGAAGGAGCUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[103.79154205 114.41927338]
[99.79084778 128.87591553]
[95.79015350 143.33256531]
[100.42636871 159.06271362]
[88.92729187 170.75471497]
[73.12218475 166.38085938]
[69.26998901 150.44058228]
[81.33351898 139.33186340]
[85.33420563 124.87522888]
[89.33489990 110.41858673]
[82.64300537 123.84313965]
[70.64350128 132.84379578]
[55.88249588 135.51075745]
[41.49205017 131.27813721]
[30.52560234 121.04402161]
[25.31006432 106.97994995]
[26.95209694 92.07009888]
[35.10328293 79.47811127]
[48.03406906 71.87581635]
[63.00073242 70.87631226]
[76.82757568 76.69167328]
[86.58065796 88.08779907]
[79.18718719 75.03649139]
[71.79370880 61.98518753]
[64.40023804 48.93387985]
[57.00676727 35.88257599]
[49.61329269 22.83127213]
[42.58552551 16.82832718]
[42.20302200 9.36769867]
[35.13207245 -3.86112046]
[27.80986023 9.23029613]
[13.05218697 11.91564465]
[1.58770704 2.24270797]
[1.75096130 -12.75640392]
[13.42326546 -22.17751312]
[28.11955643 -19.17116547]
[22.72113037 -33.16605759]
[17.32270432 -47.16094971]
[5.13724566 -57.25179672]
[7.77560902 -71.91086578]
[2.37718344 -85.90575409]
[-11.79411221 -92.37198639]
[-17.06952095 -106.64170074]
[-10.81762600 -120.11201477]
[-16.21605110 -134.10690308]
[-21.61447716 -148.10179138]
[-27.68536568 -155.07095337]
[-26.96902657 -162.50695801]
[-32.02237320 -176.63012695]
[-37.07572174 -190.75328064]
[-51.08406067 -197.56535339]
[-56.00768280 -211.96022034]
[-49.42709351 -225.27305603]
[-54.48044205 -239.39622498]
[-59.53379059 -253.51937866]
[-70.56272888 -266.39566040]
[-61.24276352 -280.55810547]
[-45.05377579 -275.52291870]
[-45.41062927 -258.57272339]
[-40.35728073 -244.44956970]
[-35.30393219 -230.32640076]
[-21.77149963 -224.21012878]
[-16.44549561 -209.95922852]
[-22.95256233 -195.80662537]
[-17.89921379 -181.68347168]
[-12.84586620 -167.56030273]
[-7.61958551 -153.50022888]
[-2.22115993 -139.50532532]
[3.17726541 -125.51043701]
[16.85572433 -119.72811127]
[22.52985954 -105.61220551]
[16.37207603 -91.30418396]
[21.77050018 -77.30928802]
[33.56982803 -68.21945190]
[31.31759644 -52.55937576]
[36.71602249 -38.56448364]
[42.11444855 -24.56959152]
[48.36088943 -10.93207169]
[55.43184280 2.29674745]
[62.66460037 15.43779850]
[70.05807495 28.48910332]
[77.45154572 41.54040909]
[84.84501648 54.59171295]
[92.23848724 67.64302063]
[99.63196564 80.69432068]
[137.96200562 88.86367035]
[151.36036682 95.60784149]
[164.75872803 102.35201263]
[178.15708923 109.09618378]
[191.55546570 115.84035492]
[204.95382690 122.58452606]
[218.43394470 129.16377258]
[231.99377441 135.57708740]
[244.13076782 129.59291077]
[257.30093384 131.69485474]
[266.69311523 140.88661194]
[269.00866699 153.62422180]
[282.40701294 160.36837769]
[295.80538940 167.11254883]
[311.61080933 166.40612793]
[319.50033569 179.03959656]
[332.89871216 185.78376770]
[346.29705811 192.52793884]
[362.62945557 191.04960632]
[371.85345459 204.60873413]
[364.48019409 219.25685120]
[348.09466553 219.92523193]
[339.55288696 205.92630005]
[326.15454102 199.18212891]
[312.75616455 192.43795776]
[297.90908813 193.62677002]
[289.06121826 180.51092529]
[275.66284180 173.76675415]
[262.26449585 167.02258301]
[246.59126282 172.98796082]
[231.12705994 165.67436218]
[225.58045959 149.13693237]
[212.02061462 142.72360229]
[204.55020142 142.70764160]
[198.20965576 135.98287964]
[184.81129456 129.23872375]
[171.41291809 122.49454498]
[158.01455688 115.75037384]
[144.61619568 109.00621033]
[131.21783447 102.26203918]
[124.36125946 105.30134583]
[122.76895142 120.21659088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[29 79]
[30 78]
[36 77]
[37 76]
[38 75]
[40 73]
[41 72]
[44 69]
[45 68]
[46 67]
[48 66]
[49 65]
[50 64]
[53 61]
[54 60]
[55 59]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
[92 118]
[93 117]
[97 114]
[98 113]
[99 112]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
