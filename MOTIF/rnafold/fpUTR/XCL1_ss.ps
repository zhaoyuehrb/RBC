%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGAAAAAUAAAAGCAUCAGUAUUGCAAAGACUUUCCAUGAUCCUACACCCACCUCGAAAGCCCCCUCUCACCACAGGAAGUGCACUGACCACUGGAGGCAUAAAAGAGGUCCUCAAAGAGCCCGAUCCUCACUCUCCUUGCACAGCUCAGCAGGACCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[143.97521973 170.16244507]
[137.46989441 173.84169006]
[130.65933228 176.91940308]
[123.59900665 179.37049866]
[116.34643555 181.17501831]
[108.96070862 182.31825256]
[101.50197601 182.79090881]
[94.03101349 182.58911133]
[86.60867310 181.71450806]
[79.29541779 180.17424011]
[72.15083313 177.98085022]
[65.23312378 175.15220642]
[58.59862900 171.71133423]
[52.30140686 167.68629456]
[46.39274979 163.10984802]
[35.68626022 173.61560059]
[24.97976685 184.12136841]
[26.37550735 199.69653320]
[17.39081764 212.49534607]
[2.26799774 216.47457886]
[-11.85242176 209.75537109]
[-18.30321121 195.51031494]
[-14.03850269 180.46551514]
[-1.07196259 171.72463989]
[14.47400570 173.41487122]
[25.18049622 162.90911865]
[35.88698959 152.40335083]
[29.33348083 143.16053772]
[24.10308266 133.10961914]
[20.29372597 122.43878937]
[17.97673225 111.34782410]
[17.19548607 100.04438782]
[17.96461487 88.74011993]
[3.34977293 85.36278534]
[-11.26506805 81.98544312]
[-25.87990952 78.60810852]
[-40.49475098 75.23076630]
[-47.89249420 88.40081024]
[-58.70197296 98.95220184]
[-72.04690552 106.02958679]
[-86.84548950 109.05923462]
[-101.89805603 107.79553986]
[-115.98436737 102.34095764]
[-127.96250916 93.13764954]
[-136.86146545 80.93170166]
[-141.95983887 66.71258545]
[-142.84432983 51.63298416]
[-139.44323730 36.91533279]
[-132.03225708 23.75272942]
[-121.21218872 13.21220207]
[-107.86014557 6.14822674]
[-93.05853271 3.13344765]
[-78.00724030 4.41225958]
[-63.92641830 9.88099480]
[-51.95753098 19.09632874]
[-43.07083893 31.31121254]
[-37.98675156 45.53544235]
[-37.11741257 60.61592484]
[-22.50257111 63.99326324]
[-7.88772917 67.37060547]
[6.72711182 70.74794006]
[21.34195328 74.12528229]
[32.05248642 52.67427063]
[48.45978546 35.19108200]
[69.18825531 23.14152145]
[92.50000000 17.53582954]
[92.50000000 2.53582954]
[92.50000000 -12.46417046]
[92.50000000 -27.46417046]
[92.50000000 -42.46416855]
[77.80070496 -49.39163208]
[67.62205505 -61.98405457]
[63.95660782 -77.69585419]
[67.48680878 -93.37904358]
[77.45858002 -105.91396332]
[91.84168243 -112.82980347]
[91.55782318 -127.82711792]
[91.27396393 -142.82443237]
[78.47343445 -151.59518433]
[73.30463409 -166.22607422]
[77.75507355 -181.09124756]
[90.11347198 -190.47471619]
[105.62776947 -190.76837158]
[118.33240509 -181.85926819]
[123.34217834 -167.17315674]
[118.73073578 -152.35714722]
[106.27127838 -143.10829163]
[106.55513763 -128.11097717]
[106.83899689 -113.11366272]
[119.73906708 -107.94715881]
[129.72143555 -98.21761322]
[135.25138855 -85.37461853]
[135.46115112 -71.34986877]
[130.28584290 -58.26658249]
[120.47835541 -48.11809921]
[107.50000000 -42.46416855]
[107.50000000 -27.46417046]
[107.50000000 -12.46417046]
[107.50000000 2.53582954]
[107.50000000 17.53582954]
[125.39323425 21.18519592]
[142.05140686 28.66789818]
[156.66432190 39.61999512]
[168.52122498 53.50881195]
[177.04545593 69.65882874]
[181.82241821 87.28455353]
[182.61975098 105.52873230]
[179.39868164 123.50399780]
[193.33695984 129.04698181]
[207.27522278 134.58995056]
[221.21350098 140.13293457]
[235.15176392 145.67590332]
[249.09004211 151.21888733]
[263.02832031 156.76187134]
[276.96658325 162.30484009]
[288.05786133 154.07913208]
[301.65881348 152.43246460]
[314.19271851 157.68980408]
[322.41687012 168.37472534]
[324.26129150 181.62202454]
[338.09216309 187.42778015]
[351.92306519 193.23353577]
[365.75393677 199.03929138]
[374.85858154 187.01611328]
[386.66772461 177.63555908]
[400.43902588 171.48727417]
[415.30685425 168.95774841]
[430.33660889 170.20599365]
[444.58343506 175.15354919]
[457.15182495 183.48939514]
[467.25170898 194.68952942]
[474.24819946 208.04992676]
[477.70147705 222.73071289]
[477.39447021 237.80906677]
[473.34649658 252.33712769]
[465.81201172 265.40167236]
[455.26461792 276.18142700]
[442.36734009 283.99877930]
[427.93090820 288.36233521]
[412.86282349 288.99777222]
[398.11029053 285.86517334]
[384.60061646 279.16146851]
[373.18310547 269.30798340]
[364.57537842 256.92419434]
[359.31860352 242.78854370]
[357.74319458 227.78958130]
[359.94818115 212.87016296]
[346.11730957 207.06440735]
[332.28640747 201.25865173]
[318.45553589 195.45289612]
[304.72027588 204.40597534]
[288.18853760 203.41392517]
[275.36816406 192.66946411]
[271.42361450 176.24311829]
[257.48532104 170.70013428]
[243.54705811 165.15716553]
[229.60879517 159.61418152]
[215.67051697 154.07119751]
[201.73225403 148.52822876]
[187.79397583 142.98524475]
[173.85571289 137.44227600]
[170.17889404 143.94897461]
[165.93038940 150.09764099]
[161.14477539 155.83821106]
[155.86106873 161.12388611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 27]
[16 26]
[17 25]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[76 89]
[77 88]
[78 87]
[108 161]
[109 160]
[110 159]
[111 158]
[112 157]
[113 156]
[114 155]
[115 154]
[120 150]
[121 149]
[122 148]
[123 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
