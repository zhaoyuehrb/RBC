%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUUGAAUACUUCACUGAGGCGAGCCGGGCGUUGUGAGCGGACUGCUAGAGGCGGCUGUCUGUUUCCGCUCUAAGGAAACUCAGAGCGUGUGGACCCCAAACAAGUCUGCGCAAAAUUUGUCGAGGAGGUUUGCCGCGGCAGAAAAGUUUUCUUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[117.02654266 589.78546143]
[127.71907806 578.14733887]
[126.84690857 563.17272949]
[114.22953033 555.30255127]
[108.59924316 541.34674072]
[112.30960083 526.57897949]
[124.14097595 516.71368408]
[123.26880646 501.73904419]
[122.39662933 486.76443481]
[121.52445984 471.78979492]
[110.26173401 462.11062622]
[109.16390991 446.93664551]
[119.39270020 435.18890381]
[118.52052307 420.21426392]
[117.64835358 405.23965454]
[107.22278595 391.14926147]
[115.55827332 374.75524902]
[114.39588165 359.80038452]
[113.23349762 344.84548950]
[104.53319550 332.75604248]
[111.17781830 318.39779663]
[110.01543427 303.44290161]
[108.85305023 288.48800659]
[107.69066620 273.53311157]
[106.52827454 258.57821655]
[105.36589050 243.62333679]
[104.20350647 228.66844177]
[103.04111481 213.71354675]
[88.79904938 205.59558105]
[82.11888123 190.44371033]
[85.80529022 174.13003540]
[98.60279846 163.10617065]
[97.15063477 148.17663574]
[80.17600250 144.00132751]
[65.80221558 134.05317688]
[55.91506958 119.63735962]
[51.81172180 102.64518738]
[54.03052521 85.30596924]
[40.62603760 78.57398224]
[27.22154617 71.84199524]
[13.81705666 65.11000824]
[0.41256702 58.37802124]
[-12.99192238 51.64603424]
[-26.39641190 44.91404724]
[-39.80090332 38.18206024]
[-55.60567856 38.90285492]
[-63.50669098 26.27656364]
[-76.91117859 19.54457664]
[-90.31567383 12.81258774]
[-105.23705292 18.02103043]
[-119.43448639 11.07779408]
[-124.48487854 -3.89782166]
[-117.39192200 -18.02104950]
[-102.36375427 -22.91283035]
[-88.31629944 -15.67095566]
[-83.58368683 -0.59190154]
[-70.17919159 6.14008617]
[-56.77470398 12.87207413]
[-41.92870331 11.66975880]
[-33.06891251 24.77756882]
[-19.66442490 31.50955772]
[-6.25993490 38.24154282]
[7.14455462 44.97353363]
[20.54904366 51.70552063]
[33.95353317 58.43750763]
[47.35802460 65.16949463]
[60.76251221 71.90148163]
[70.13406372 60.23643494]
[82.97098541 51.71485138]
[98.21396637 47.36066055]
[97.34178925 32.38603973]
[96.46961975 17.41141701]
[95.59744263 2.43679428]
[94.72527313 -12.53782845]
[86.19865417 -25.86476898]
[93.18283844 -39.02039337]
[92.31066895 -53.99501419]
[82.85202789 -67.39151001]
[89.96914673 -82.16576385]
[106.34055328 -83.11929321]
[115.12474060 -69.27117920]
[107.28528595 -54.86718750]
[108.15746307 -39.89256287]
[116.62169647 -27.63670921]
[109.69989777 -13.41000080]
[110.57206726 1.56462193]
[111.44423676 16.53924370]
[112.31641388 31.51386642]
[113.18858337 46.48848724]
[127.12879944 52.02658081]
[138.03939819 41.73295593]
[148.95001221 31.43933296]
[159.86061096 21.14570808]
[170.77120972 10.85208321]
[181.68182373 0.55845839]
[192.59242249 -9.73516655]
[203.50303650 -20.02879143]
[200.56253052 -35.17332840]
[206.29780579 -49.49499893]
[218.87873840 -58.42380524]
[234.29080200 -59.11060333]
[247.61607361 -51.33623505]
[254.60249329 -37.58147049]
[253.02073669 -22.23541069]
[243.37551880 -10.19492531]
[228.74459839 -5.30208778]
[213.79666138 -9.11818600]
[202.88604736 1.17543840]
[191.97544861 11.46906281]
[181.06483459 21.76268768]
[170.15423584 32.05631256]
[159.24363708 42.34993744]
[148.33302307 52.64356232]
[137.42242432 62.93718719]
[143.95074463 71.78343964]
[148.45172119 81.71299744]
[150.76225281 92.27296448]
[150.81820679 102.99034119]
[148.65554810 113.39317322]
[144.40710449 123.03136444]
[138.29508972 131.49612427]
[130.61973572 138.43728638]
[121.74475861 143.57775879]
[112.08017731 146.72447205]
[113.53234100 161.65400696]
[125.92508698 167.75141907]
[133.61509705 179.09333801]
[134.67544556 192.64663696]
[128.93518066 204.85031128]
[117.99600983 212.55116272]
[119.15840149 227.50604248]
[120.32078552 242.46093750]
[121.48316956 257.41583252]
[122.64555359 272.37072754]
[123.80794525 287.32562256]
[124.97032928 302.28051758]
[126.13271332 317.23541260]
[134.91615295 330.39450073]
[128.18838501 343.68307495]
[129.35078430 358.63796997]
[130.51316833 373.59286499]
[139.80601501 382.58377075]
[140.44104004 395.09649658]
[132.62297058 404.36749268]
[133.49514771 419.34210205]
[134.36732483 434.31671143]
[145.89077759 444.79754639]
[146.56196594 459.99636841]
[136.49908447 470.91763306]
[137.37124634 485.89224243]
[138.24342346 500.86688232]
[139.11560059 515.84149170]
[152.01226807 524.26660156]
[157.41197205 538.50372314]
[153.43991089 553.01879883]
[141.82153320 562.30053711]
[142.69369507 577.27520752]
[154.66503906 587.59326172]
[155.75073242 603.36022949]
[145.30667114 615.22180176]
[129.52911377 616.14074707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 157]
[3 156]
[7 152]
[8 151]
[9 150]
[10 149]
[13 146]
[14 145]
[15 144]
[17 141]
[18 140]
[19 139]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[26 132]
[27 131]
[28 130]
[32 125]
[33 124]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[49 56]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[76 83]
[77 82]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
