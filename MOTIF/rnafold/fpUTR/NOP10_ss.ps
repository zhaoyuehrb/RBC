%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAUUGACGAACACGUGACGCGGUCGGGCGGACCACUGCAGACUGAGCGGUGGACCGAAUUGGGACCGCUGGCUUAUAAGCGAUC\
) } def
/len { sequence length } bind def

/coor [
[99.87672424 220.46736145]
[85.42019653 224.46846008]
[70.65316010 221.83511353]
[58.47076416 213.08358765]
[51.26144028 199.92967224]
[50.43861389 184.95225525]
[56.16360474 171.08775330]
[67.31534576 161.05361938]
[74.81620789 148.06373596]
[82.31707001 135.07385254]
[69.50675964 142.87744141]
[56.69645309 150.68103027]
[49.31244278 165.32371521]
[32.92643356 165.98005676]
[24.39494896 151.97483826]
[32.49444962 137.71545410]
[48.89286041 137.87072754]
[61.70316696 130.06713867]
[74.51347351 122.26354218]
[68.45468903 105.24918365]
[72.12429047 88.59944153]
[83.36616516 77.16043091]
[97.98692322 73.68430328]
[101.14011383 59.01946640]
[104.29330444 44.35462952]
[107.44650269 29.68979645]
[110.59969330 15.02496243]
[113.75289154 0.36012813]
[100.43399811 -13.04066753]
[97.63937378 -31.57924843]
[106.28055573 -48.05274963]
[122.85951233 -56.16349411]
[124.44499207 -71.07946777]
[126.03047180 -85.99543762]
[119.79516602 -100.53613281]
[128.83438110 -112.37428284]
[130.41986084 -127.29026031]
[132.00534058 -142.20623779]
[133.59082031 -157.12220764]
[135.17630005 -172.03817749]
[136.76177979 -186.95414734]
[138.34725952 -201.87011719]
[127.36814880 -213.00534058]
[126.16677856 -228.59671021]
[135.31040955 -241.28245544]
[150.48168945 -245.07275391]
[164.51719666 -238.17794800]
[170.78981018 -223.85356140]
[166.33778381 -208.86311340]
[153.26322937 -200.28463745]
[151.67774963 -185.36866760]
[150.09226990 -170.45269775]
[148.50679016 -155.53672791]
[146.92131042 -140.62075806]
[145.33583069 -125.70478058]
[143.75035095 -110.78880310]
[150.09906006 -97.31501007]
[140.94644165 -84.40996552]
[139.36096191 -69.49398804]
[137.77548218 -54.57801437]
[147.62162781 -48.58161545]
[154.46264648 -39.23775101]
[157.22962952 -27.93905830]
[155.46459961 -16.38846588]
[149.39570618 -6.34255219]
[139.90867615 0.65558577]
[128.41772461 3.51332235]
[125.26453400 18.17815590]
[122.11133575 32.84299088]
[118.95814514 47.50782394]
[115.80494690 62.17266083]
[112.65175629 76.83749390]
[127.05574799 89.91144562]
[129.38073730 110.95982361]
[116.21855164 129.70162964]
[125.54129791 141.45265198]
[134.86404419 153.20365906]
[150.30508423 158.72694397]
[152.97567749 174.90718079]
[140.12857056 185.09951782]
[124.97975159 178.81896973]
[123.11303711 162.52641296]
[113.79028320 150.77539062]
[104.46753693 139.02438354]
[107.01528168 153.80642700]
[109.56302643 168.58847046]
[116.55796814 181.85765076]
[117.13765717 196.84643555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 19]
[11 18]
[12 17]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[32 60]
[33 59]
[34 58]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
