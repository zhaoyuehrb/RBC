%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGGAAAGUUGGAGCUGAGGUGUGUGGCAGGCAGAUGAGGGAGCAGAGAACUGCUGAACAGAGUGAGACUCAGAGGACGUGGUUGAGC\
) } def
/len { sequence length } bind def

/coor [
[189.78053284 177.27326965]
[185.79899597 156.84663391]
[172.72409058 149.49497986]
[159.64918518 142.14332581]
[146.57427979 134.79167175]
[133.49937439 127.44002533]
[120.42446899 120.08837128]
[107.67800140 127.59981537]
[92.88369751 127.74995422]
[79.98741913 120.49873352]
[72.42881012 107.78018188]
[72.22387695 92.98653412]
[59.14897156 85.63488007]
[46.07406616 78.28322601]
[32.01903534 84.58896637]
[17.12014389 81.44628906]
[7.04775810 70.26545715]
[5.50891495 55.47458267]
[-7.56599188 48.12292862]
[-20.15652466 53.25037384]
[-33.19585037 50.16806030]
[-41.89957809 40.24036407]
[-43.20996094 27.29961586]
[-56.02625275 19.50585556]
[-71.83756256 18.94640732]
[-78.69181824 5.72262192]
[-91.50811005 -2.07113719]
[-104.32439423 -9.86489677]
[-120.18901062 -7.47874689]
[-131.84748840 -18.49961090]
[-130.35644531 -34.47322464]
[-116.85968781 -43.14599991]
[-101.71076202 -37.86492538]
[-96.53063965 -22.68118668]
[-83.71434784 -14.88742828]
[-70.89805603 -7.09366894]
[-56.00345230 -7.09168243]
[-48.23249435 6.68956518]
[-35.41620255 14.48332405]
[-19.37099838 9.77371216]
[-4.54242420 18.20318794]
[-0.21433868 35.04802322]
[12.86056805 42.39967728]
[26.29773712 36.02939224]
[41.08430862 38.82605362]
[51.51069641 49.92306900]
[53.42572021 65.20832062]
[66.50062561 72.55997467]
[79.57553101 79.91162872]
[92.32199860 72.40018463]
[107.11630249 72.25004578]
[120.01258087 79.50126648]
[127.57118988 92.21981812]
[127.77612305 107.01346588]
[140.85102844 114.36511993]
[153.92593384 121.71677399]
[167.00083923 129.06842041]
[180.07574463 136.42007446]
[193.15065002 143.77172852]
[201.73924255 138.31419373]
[211.69116211 136.49394226]
[221.54023743 138.53419495]
[229.85224915 144.09269714]
[235.43380737 152.31820679]
[237.50364685 161.98062134]
[235.80168152 171.65481567]
[247.75375366 180.71836853]
[263.20758057 178.76457214]
[275.19955444 188.12655640]
[276.96697998 202.87144470]
[288.91903687 211.93498230]
[300.87112427 220.99853516]
[309.79971313 223.77555847]
[313.06948853 230.58122253]
[324.70516968 240.04754639]
[340.02703857 236.92121887]
[353.74914551 244.42044067]
[359.39227295 259.00430298]
[354.29196167 273.78674316]
[340.85638428 281.78796387]
[325.42944336 279.23001099]
[315.29522705 267.32070923]
[315.23883057 251.68321228]
[303.60317993 242.21688843]
[291.80758667 232.95060730]
[279.85549927 223.88706970]
[267.90341187 214.82351685]
[253.22846985 217.09977722]
[240.97825623 208.07830811]
[238.69021606 192.67044067]
[226.73812866 183.60688782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[12 49]
[13 48]
[14 47]
[18 43]
[19 42]
[23 39]
[24 38]
[26 36]
[27 35]
[28 34]
[66 91]
[67 90]
[70 87]
[71 86]
[72 85]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
