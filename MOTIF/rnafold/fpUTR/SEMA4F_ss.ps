%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGAGCCGGGCGGUGUUUCAUCCCUCAGCCUCAGGCUGAGCCGGACCGAGCCGAGAGGACCCGAGUGGGGCCGAGGCCAGUAGCCCCGGGGCCCUGAGCAGAGGCCGUAGCUUGCGCCGCACCCGCGGCCAGGCGGAGCCAAAG\
) } def
/len { sequence length } bind def

/coor [
[82.13109589 215.90388489]
[77.09168243 201.22792053]
[81.67320251 186.40263367]
[94.11396790 177.12864685]
[93.79983521 162.13192749]
[93.48569489 147.13522339]
[81.98941803 144.04298401]
[71.62052917 138.19386292]
[63.02805328 129.95397949]
[56.74985504 119.83911133]
[53.17891312 108.48240662]
[38.18220139 108.79654694]
[29.28287697 121.37065125]
[14.85458565 126.23663330]
[0.49745265 121.72700500]
[-8.34537792 109.77115631]
[-23.34208870 110.08529663]
[-38.33879852 110.39942932]
[-53.33551025 110.71356964]
[-58.48974228 122.63423920]
[-67.75238800 131.67063904]
[-79.70990753 136.49348450]
[-92.55625916 136.41276550]
[-104.36570740 131.47619629]
[-113.38148499 122.45673370]
[-118.27710724 110.73178864]
[-133.27381897 110.41765594]
[-148.27052307 110.10351562]
[-163.27052307 110.10351562]
[-178.26724243 110.41765594]
[-193.26394653 110.73178864]
[-208.26066589 111.04592896]
[-223.25737000 111.36006165]
[-238.25407410 111.67420197]
[-253.25079346 111.98833466]
[-268.95983887 118.36505890]
[-279.43603516 105.03519440]
[-269.52722168 91.27832031]
[-253.56492615 96.99162292]
[-238.56822205 96.67749023]
[-223.57150269 96.36334991]
[-208.57479858 96.04921722]
[-193.57807922 95.73507690]
[-178.58137512 95.42094421]
[-163.58467102 95.10680389]
[-159.65176392 92.29235077]
[-153.89454651 91.96372986]
[-147.95639038 95.10680389]
[-132.95968628 95.42094421]
[-117.96297455 95.73507690]
[-109.63269043 80.72949982]
[-94.79400635 71.93045044]
[-77.45440674 71.81821442]
[-62.34949875 80.51281738]
[-53.64964676 95.71685791]
[-38.65293503 95.40271759]
[-23.65622520 95.08858490]
[-8.65951443 94.77444458]
[-0.32509932 82.45878601]
[13.83059597 77.35189819]
[28.44999886 81.60942078]
[37.86806488 93.79983521]
[52.86477661 93.48569489]
[62.35175323 62.99318314]
[91.07375336 42.69215393]
[87.95507812 28.01993942]
[84.83640289 13.34772491]
[72.21883392 3.43931699]
[72.24270630 -12.60371876]
[84.88970184 -22.47453690]
[100.45812988 -18.60109138]
[107.00522614 -3.95475841]
[99.50862122 10.22904968]
[102.62729645 24.90126419]
[105.74597168 39.57347870]
[120.66379547 41.14140320]
[126.76484680 27.43822289]
[132.86589050 13.73504066]
[131.41055298 -2.01908731]
[143.65557861 -10.49898529]
[149.75663757 -24.20216751]
[155.85768127 -37.90534973]
[151.47387695 -53.33784103]
[160.92303467 -66.30289459]
[176.95658875 -66.85484314]
[187.27496338 -54.57026291]
[183.96278381 -38.87284470]
[169.56086731 -31.80429840]
[163.45980835 -18.10111809]
[157.35876465 -4.39793539]
[159.25048828 10.37604904]
[146.56907654 19.83609009]
[140.46803284 33.53927231]
[134.36697388 47.24245453]
[144.86192322 57.95954514]
[158.68988037 52.14681244]
[172.51782227 46.33407593]
[186.34576416 40.52134323]
[200.11209106 34.56412506]
[213.81527710 28.46307564]
[223.01145935 14.88506794]
[239.34683228 16.32991600]
[246.01696777 31.31128120]
[236.16020203 44.41762161]
[219.91632080 42.16625595]
[206.21313477 48.26730728]
[201.34965515 53.89839554]
[192.15850830 54.34928894]
[178.33055115 60.16202545]
[164.50260925 65.97475433]
[150.67466736 71.78749084]
[153.40679932 85.29238892]
[152.76815796 98.44538116]
[149.08644104 110.45325470]
[142.86488342 120.65833282]
[155.18212891 129.21903992]
[167.49935913 137.77973938]
[179.81660461 146.34043884]
[192.13383484 154.90115356]
[201.03039551 157.25312805]
[204.61683655 163.77235413]
[216.75209045 172.58912659]
[228.88734436 181.40589905]
[241.02259827 190.22268677]
[253.15785217 199.03945923]
[269.51483154 200.21458435]
[276.43124390 215.08386230]
[266.79208374 228.35104370]
[250.51327515 226.36801147]
[244.34107971 211.17471313]
[232.20582581 202.35794067]
[220.07057190 193.54115295]
[207.93530273 184.72438049]
[195.80004883 175.90760803]
[183.57313538 167.21838379]
[171.25590515 158.65768433]
[158.93865967 150.09698486]
[146.62142944 141.53627014]
[134.30418396 132.97557068]
[128.74606323 137.91871643]
[122.48549652 141.93528748]
[115.67547607 144.92710876]
[108.48240662 146.82109070]
[108.79654694 161.81779480]
[109.11067963 176.81451416]
[121.92888641 185.55940247]
[127.12721252 200.17982483]
[122.70678711 215.05395508]
[110.36735535 224.46235657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 145]
[5 144]
[6 143]
[11 63]
[12 62]
[16 58]
[17 57]
[18 56]
[19 55]
[26 50]
[27 49]
[28 48]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[65 75]
[66 74]
[67 73]
[76 94]
[77 93]
[78 92]
[80 90]
[81 89]
[82 88]
[95 111]
[96 110]
[97 109]
[98 108]
[99 106]
[100 105]
[115 139]
[116 138]
[117 137]
[118 136]
[119 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
