%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAAAAGCUGGGCCGGCGCGGGCCGGGCCAUUCGCGACCCGGAGGUGCGCGGGCGCGGGCGAGCAGGGUCUCCGGGUGGGCGGCGGCGACGCCCCGCGCAGGCUGGAGGCCGCCGAGGCUCGCCAUGCCGGGAGAACUCUAACUCCCCCAUGGAGUCGGCCGACUUCUACGAGGCGGAGCCGCGGCCCCCG\
) } def
/len { sequence length } bind def

/coor [
[143.55323792 207.24784851]
[138.04508972 221.48242188]
[126.90040588 231.91116333]
[112.33196259 236.46343994]
[97.23233795 234.23539734]
[84.59957886 225.66941833]
[76.94192505 212.46626282]
[75.77980804 197.24745178]
[81.34397125 183.03468323]
[92.52964020 172.64990234]
[107.11589813 168.15502930]
[109.30553436 153.31571960]
[111.49516296 138.47639465]
[97.72013092 132.53935242]
[88.43611908 144.32098389]
[79.15210724 156.10263062]
[69.86809540 167.88427734]
[60.58408737 179.66592407]
[58.77101135 195.96453857]
[43.64295197 202.29492188]
[30.76235962 192.14492798]
[33.37968063 175.95599365]
[48.80244446 170.38191223]
[58.08645630 158.60026550]
[67.37046814 146.81861877]
[76.65447998 135.03697205]
[85.93849182 123.25533295]
[78.57990265 110.18433380]
[63.69153976 112.01102448]
[48.80318451 113.83771515]
[44.61194992 116.99963379]
[40.07994461 118.11557007]
[36.04727936 117.40020752]
[33.14573288 115.37180328]
[18.18595886 116.46956635]
[3.22618127 117.56732178]
[-11.73359585 118.66508484]
[-20.07802010 122.41905975]
[-26.94545555 119.65694427]
[-41.92111969 120.51105499]
[-56.89678192 121.36517334]
[-71.87244415 122.21929169]
[-80.14994812 135.34417725]
[-94.57364655 141.06575012]
[-109.59734344 137.18395996]
[-119.44410706 125.19142914]
[-120.32766724 109.69953156]
[-111.90827179 96.66521454]
[-97.42335510 91.10044098]
[-82.44264984 95.14498138]
[-72.72656250 107.24362946]
[-57.75090027 106.38951111]
[-42.77523422 105.53539276]
[-27.79957199 104.68128204]
[-12.83135700 103.70530701]
[2.12841988 102.60754395]
[17.08819580 101.50978851]
[32.04797363 100.41202545]
[46.97649002 98.94936371]
[61.86484909 97.12266541]
[76.75320435 95.29597473]
[81.10212708 89.18558502]
[66.16970825 87.76331329]
[59.93531418 74.12028503]
[68.63342285 61.89968491]
[83.56581116 63.32227707]
[89.79996490 76.96479797]
[94.14888763 70.85440063]
[90.99837494 56.18899155]
[87.84786224 41.52358246]
[84.69734955 26.85817146]
[81.54683685 12.19276047]
[78.39632416 -2.47265005]
[75.24581146 -17.13806152]
[72.09529877 -31.80347252]
[68.94478607 -46.46888351]
[56.28011322 -59.82663345]
[62.29591370 -76.30542755]
[58.90711212 -90.91761780]
[48.25211716 -102.61298370]
[52.91402817 -116.75921631]
[49.52522278 -131.37139893]
[46.13642120 -145.98358154]
[42.74761581 -160.59577942]
[37.75321198 -168.26243591]
[39.42462921 -175.47334290]
[36.27411652 -190.13876343]
[33.12360382 -204.80416870]
[23.88537598 -219.02006531]
[34.98830414 -231.83261108]
[50.37372589 -224.71044922]
[47.78901672 -207.95468140]
[50.93952560 -193.28927612]
[54.09003830 -178.62385559]
[57.35980606 -163.98457336]
[60.74860764 -149.37239075]
[64.13741302 -134.76020813]
[67.52621460 -120.14801788]
[77.93881989 -109.49781036]
[73.51930237 -94.30641937]
[76.90810394 -79.69422913]
[87.01004791 -73.02285004]
[89.94637299 -60.86535645]
[83.61019897 -49.61939621]
[86.76071167 -34.95398331]
[89.91122437 -20.28857231]
[93.06173706 -5.62316179]
[96.21224976 9.04224873]
[99.36276245 23.70765877]
[102.51327515 38.37306976]
[105.66378021 53.03848267]
[108.81429291 67.70389557]
[119.63449860 78.09249878]
[134.41593933 80.64376831]
[149.19738770 83.19504547]
[163.97882080 85.74631500]
[178.89392090 80.46894836]
[190.11975098 90.25822449]
[204.90119934 92.80949402]
[219.68263245 95.36077118]
[234.46408081 97.91204071]
[249.24551392 100.46331024]
[264.04724121 102.89419556]
[278.86825562 105.20452881]
[293.68923950 107.51486969]
[308.51647949 101.99542999]
[319.90014648 111.60068512]
[334.72116089 113.91102600]
[343.97863770 99.06079865]
[363.04534912 92.49574280]
[384.56234741 100.17523956]
[399.34378052 97.62397003]
[414.12521362 95.07270050]
[428.90664673 92.52142334]
[443.68811035 89.97015381]
[450.41964722 75.98925018]
[464.09930420 68.66484070]
[479.46691895 70.81330109]
[490.61334229 81.60851288]
[493.25256348 96.89949799]
[486.36975098 110.80655670]
[472.61145020 117.98213959]
[457.26803589 115.66709137]
[446.23937988 104.75159454]
[431.45791626 107.30287170]
[416.67648315 109.85414124]
[401.89505005 112.40541077]
[387.11361694 114.95668030]
[385.83798218 122.34740448]
[400.61938477 124.89890289]
[398.06765747 139.68026733]
[383.28671265 137.12884521]
[382.01104736 144.51956177]
[395.08206177 151.87815857]
[408.15307617 159.23675537]
[421.22406006 166.59533691]
[434.29507446 173.95393372]
[447.36608887 181.31253052]
[463.74945068 180.59361267]
[472.33438110 194.56613159]
[464.28939819 208.85635376]
[447.89050293 208.76371765]
[440.00747681 194.38352966]
[426.93649292 187.02493286]
[413.86547852 179.66635132]
[400.79446411 172.30775452]
[387.72348022 164.94915771]
[374.65246582 157.59056091]
[352.16125488 157.66325378]
[336.48480225 145.47810364]
[332.41082764 128.73204041]
[317.58981323 126.42169952]
[303.82269287 132.10638428]
[291.37890625 122.33587646]
[276.55789185 120.02554321]
[261.73690796 117.71520233]
[254.63285828 119.79450989]
[246.69424438 115.24475098]
[231.91281128 112.69348145]
[217.13136292 110.14221191]
[202.34991455 107.59094238]
[187.56848145 105.03966522]
[173.71064758 110.49951935]
[161.42755127 100.52775574]
[146.64611816 97.97648621]
[131.86466980 95.42520905]
[117.08322906 92.87393951]
[131.97917175 109.90865326]
[126.33448792 140.66603088]
[124.14485168 155.50535583]
[121.95521545 170.34466553]
[134.62161255 178.86083984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 191]
[12 190]
[13 189]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[28 61]
[29 60]
[30 59]
[34 58]
[35 57]
[36 56]
[37 55]
[39 54]
[40 53]
[41 52]
[42 51]
[68 112]
[69 111]
[70 110]
[71 109]
[72 108]
[73 107]
[74 106]
[75 105]
[76 104]
[78 101]
[79 100]
[81 98]
[82 97]
[83 96]
[84 95]
[86 94]
[87 93]
[88 92]
[113 187]
[114 186]
[115 185]
[116 184]
[118 182]
[119 181]
[120 180]
[121 179]
[122 178]
[123 176]
[124 175]
[125 174]
[127 172]
[128 171]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
[153 168]
[154 167]
[155 166]
[156 165]
[157 164]
[158 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
