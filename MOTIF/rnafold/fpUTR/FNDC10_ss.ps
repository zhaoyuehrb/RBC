%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCGCGGGGAGCGGGCAGCGGGGACGGCGGCGGCGCGGCCCGCGUGACCCAGCGCCGCGCCCCGUGGCCCCGCCGCAGG\
) } def
/len { sequence length } bind def

/coor [
[58.20775986 264.97943115]
[43.25181198 263.83065796]
[32.31230164 253.56777954]
[30.21186638 238.71765137]
[19.81037903 249.52546692]
[9.40889072 260.33328247]
[-0.99259633 271.14111328]
[-2.12413716 287.14422607]
[-15.42250252 296.11822510]
[-30.68632507 291.17907715]
[-36.20650482 276.11563110]
[-27.74843407 262.48330688]
[-11.80041981 260.73962402]
[-1.39893270 249.93180847]
[9.00255489 239.12397766]
[19.40404320 228.31616211]
[28.26724815 216.21476746]
[35.43304443 203.03709412]
[34.71580505 188.15975952]
[48.10573196 179.73240662]
[55.27153015 166.55471802]
[62.43732834 153.37704468]
[69.60312653 140.19935608]
[76.76892090 127.02166748]
[83.93471527 113.84398651]
[78.89245605 102.05444336]
[81.56661224 89.51383972]
[90.97958374 80.80673981]
[103.69020844 79.11623383]
[111.35549164 66.22269440]
[119.02077484 53.32914734]
[126.68605042 40.43560410]
[128.45735168 31.20664215]
[134.89996338 27.20302010]
[143.05348206 14.61253929]
[151.20698547 2.02205753]
[159.36050415 -10.56842422]
[167.51402283 -23.15890503]
[175.66752625 -35.74938583]
[183.82104492 -48.33986664]
[191.97454834 -60.93035126]
[192.73666382 -67.92022705]
[196.49066162 -72.61405945]
[201.26542664 -74.13916016]
[210.35881042 -86.06855011]
[205.77540588 -100.89326477]
[210.81297302 -115.56986237]
[223.53443909 -124.45490265]
[239.04814148 -124.13189697]
[251.38876343 -114.72505188]
[255.81106567 -99.85149384]
[250.61459351 -85.23040009]
[237.79750061 -76.48388672]
[222.28819275 -76.97516632]
[213.19480896 -65.04577637]
[204.56503296 -52.77683640]
[196.41152954 -40.18635559]
[188.25801086 -27.59587288]
[180.10449219 -15.00539207]
[171.95098877 -2.41491055]
[163.79747009 10.17557049]
[155.64395142 22.76605225]
[147.49044800 35.35653305]
[139.57958984 48.10088348]
[131.91432190 60.99443054]
[124.24903870 73.88796997]
[116.58375549 86.78151703]
[121.05353546 102.54910278]
[112.94988251 116.79433441]
[97.11240387 121.00978088]
[89.94660187 134.18746948]
[82.78080750 147.36515808]
[75.61501312 160.54283142]
[68.44921112 173.72052002]
[61.28341675 186.89820862]
[61.48811340 202.71807861]
[48.61072922 210.20288086]
[41.44493103 223.38056946]
[56.23889160 220.90290833]
[69.32346344 228.23733521]
[74.92985535 242.15022278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 78]
[18 77]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[29 67]
[30 66]
[31 65]
[32 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
