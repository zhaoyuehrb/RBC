%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGUGCAGCGACUCCCCGUGGCGGUUGAGGGGCAGUGGUGGCGGCGGAAGCCCAAGUCG\
) } def
/len { sequence length } bind def

/coor [
[75.95146179 175.80873108]
[75.19172668 160.82797241]
[74.43198395 145.84722900]
[73.67224884 130.86648560]
[72.72431946 112.29385376]
[80.73609161 99.65949249]
[92.27541351 96.18434906]
[84.34095764 83.45468140]
[70.47494507 75.83599854]
[70.30889130 60.94232178]
[62.37443161 48.21265793]
[48.50842285 40.59397507]
[48.34236908 25.70029449]
[40.40790939 12.97063065]
[32.47344971 0.24096704]
[24.21905899 -12.28361034]
[15.65003490 -24.59506226]
[7.08101177 -36.90651321]
[-1.48801136 -49.21796417]
[-16.66655159 -47.25061417]
[-31.01672935 -52.57330322]
[-41.24097443 -63.96292114]
[-44.98983383 -78.80221558]
[-41.40184402 -93.68122101]
[-31.30150223 -105.18086243]
[-17.00979042 -110.65859222]
[-1.81084037 -108.85568237]
[10.80274105 -100.18641663]
[17.93244362 -86.64292908]
[17.93991661 -71.33742523]
[10.82344055 -57.78698730]
[19.39246368 -45.47553635]
[27.96148682 -33.16408539]
[36.53050995 -20.85263252]
[43.19483566 -17.01666451]
[45.20311356 -7.69349289]
[53.13757324 5.03617096]
[61.07203293 17.76583481]
[74.37051392 24.47400665]
[75.10409546 40.27819824]
[83.03855896 53.00786209]
[96.33704376 59.71603394]
[97.07061768 75.52022552]
[105.00508118 88.24988556]
[116.86671448 97.43148041]
[131.17880249 101.92192841]
[145.49089050 106.41236877]
[161.36973572 102.31427002]
[172.66357422 114.20465851]
[167.75427246 129.85173035]
[151.69210815 133.15911865]
[141.00044250 120.72446442]
[126.68835449 116.23401642]
[112.37626648 111.74356842]
[106.44544983 116.33436584]
[94.58381653 125.51595306]
[88.65299988 130.10675049]
[89.41273499 145.08749390]
[90.17247009 160.06823730]
[90.93221283 175.04899597]
[94.09561920 194.17077637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[7 44]
[8 43]
[10 41]
[11 40]
[13 38]
[14 37]
[15 36]
[16 34]
[17 33]
[18 32]
[19 31]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
