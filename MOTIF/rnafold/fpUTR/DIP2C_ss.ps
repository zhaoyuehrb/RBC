%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGUGCGGUUCCGCCGGGCGCGAGGAGCCGCCGAGACCUCCGCCUGCGAACAAAGAGGAGGCCGUGCGGGGCGCGGCGCCCGCGGAGC\
) } def
/len { sequence length } bind def

/coor [
[-16.89700317 138.72090149]
[-31.39700127 142.56149292]
[-45.89699554 146.40208435]
[-60.39699173 150.24266052]
[-65.60862732 154.85945129]
[-71.48554230 155.83082581]
[-76.03043365 153.81089783]
[-90.76084900 156.64196777]
[-105.49126434 159.47302246]
[-120.22167206 162.30409241]
[-134.95208740 165.13514709]
[-149.68249512 167.96621704]
[-164.41291809 170.79728699]
[-179.14332581 173.62834167]
[-187.11978149 183.94171143]
[-199.60105896 185.90193176]
[-209.68844604 178.98593140]
[-224.50779724 181.30686951]
[-236.92338562 192.02066040]
[-252.31846619 186.37055969]
[-254.85589600 170.16889954]
[-241.92538452 160.08258057]
[-226.82873535 166.48751831]
[-212.00938416 164.16658020]
[-199.10198975 152.41358948]
[-181.97439575 158.89793396]
[-167.24397278 156.06686401]
[-152.51356506 153.23580933]
[-137.78315735 150.40473938]
[-123.05274200 147.57368469]
[-108.32232666 144.74261475]
[-93.59191132 141.91154480]
[-78.86149597 139.08049011]
[-64.23757935 135.74267578]
[-49.73758316 131.90208435]
[-35.23758698 128.06149292]
[-20.73759079 124.22090912]
[-13.49855518 111.25434113]
[1.15179288 107.15288544]
[14.70324230 114.83376312]
[29.20323944 110.99317932]
[43.70323563 107.15259552]
[58.20323181 103.31200409]
[72.70323181 99.47142029]
[87.20322418 95.63083649]
[98.60089874 85.87927246]
[104.63880920 72.14815521]
[96.70248413 58.81420135]
[98.15287781 43.36505890]
[108.43229675 31.74123955]
[123.58808899 28.41233635]
[137.79254150 34.65838242]
[145.58375549 48.07764435]
[143.96585083 63.51014328]
[133.56094360 75.02176666]
[118.36993408 78.18606567]
[112.33202362 91.91718292]
[110.63675690 93.45171356]
[108.86593628 94.88267517]
[123.59635162 97.71373749]
[136.58560181 89.11622620]
[151.48400879 92.19716644]
[159.60037231 104.63341522]
[174.33078003 107.46447754]
[189.06118774 110.29553986]
[203.79161072 113.12660980]
[218.52201843 115.95767212]
[233.25242615 118.78873444]
[247.98284912 121.61979675]
[264.67849731 118.67156982]
[272.13330078 133.89857483]
[259.56506348 145.27732849]
[245.15177917 136.35020447]
[230.42137146 133.51914978]
[215.69096375 130.68807983]
[200.96054077 127.85701752]
[186.23013306 125.02595520]
[171.49971008 122.19489288]
[156.76930237 119.36383057]
[144.62117004 127.90540314]
[129.64210510 125.24414062]
[120.76528931 112.44415283]
[106.03487396 109.61309052]
[91.04380798 110.13082886]
[76.54381561 113.97142029]
[62.04381943 117.81200409]
[47.54382324 121.65258789]
[33.04382324 125.49317932]
[18.54382896 129.33375549]
[10.57124233 142.71568298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[17 24]
[18 23]
[40 89]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 57]
[47 56]
[59 83]
[60 82]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
