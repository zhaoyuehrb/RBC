%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAGUGACGCGAGGCGUAGCGGAAGUUACUGCAGCCGCGGUGUUGUGCUGUGGGGAAGGGAGAAGGAUUUGUAAACCCCGGAGCGAGGUUCUGCUUACCCGAGGCCGCUGCUGUGCGGAGACCCCCGGGUGAAGCCACCGUCAUC\
) } def
/len { sequence length } bind def

/coor [
[107.59850311 221.03292847]
[94.17171478 228.81117249]
[78.74079132 227.17834473]
[67.23922729 216.76231384]
[64.08961487 201.56825256]
[70.50304413 187.43858337]
[84.01342010 179.80645752]
[85.59182739 164.88972473]
[87.17024231 149.97300720]
[88.74864960 135.05628967]
[90.32706451 120.13955688]
[78.81384277 110.52468872]
[64.41740417 114.73688507]
[50.02096558 118.94908142]
[35.62452698 123.16127014]
[24.55237198 134.46250916]
[10.16447926 130.61051941]
[-4.23195887 134.82270813]
[-8.93653202 144.72404480]
[-18.14490318 150.25497437]
[-28.65534973 149.77667236]
[-36.96737289 143.69236755]
[-51.52858353 147.29391479]
[-66.08979034 150.89544678]
[-80.65100861 154.49699402]
[-88.84264374 167.74595642]
[-103.66108704 171.19100952]
[-116.24146271 163.29988098]
[-130.80267334 166.90142822]
[-142.23898315 178.65483093]
[-158.06727600 174.36566162]
[-162.00476074 158.44622803]
[-150.00088501 147.27308655]
[-134.40422058 152.34020996]
[-119.84300232 148.73866272]
[-112.39164734 135.89292908]
[-97.67581940 132.03302002]
[-84.25254822 139.93579102]
[-69.69133759 136.33424377]
[-55.13012695 132.73269653]
[-40.56891632 129.13114929]
[-27.73254585 114.72325134]
[-8.44415188 120.42626953]
[5.95228624 116.21408081]
[15.99471188 105.21412659]
[31.41233253 108.76483154]
[45.80877304 104.55264282]
[60.20521164 100.34044647]
[74.60164642 96.12825775]
[82.01016235 83.08547974]
[78.25531769 68.56304932]
[74.50046539 54.04061508]
[63.55500031 42.61663437]
[67.86003113 28.35774231]
[64.10517883 13.83530807]
[60.35033035 -0.68712682]
[56.59547806 -15.20956135]
[52.84062958 -29.73199654]
[35.82244492 -35.82314682]
[25.91013718 -50.75091934]
[26.88220215 -68.48698425]
[38.16613007 -82.00197601]
[33.80240250 -96.35321045]
[29.43867683 -110.70444489]
[15.37938499 -117.92329407]
[10.62206936 -132.99456787]
[17.98916245 -146.97676086]
[33.10989761 -151.57446289]
[47.01341248 -144.05995178]
[51.45099640 -128.89146423]
[43.78990936 -115.06816864]
[48.15363693 -100.71693420]
[52.51736450 -86.36569977]
[64.52431488 -84.11689758]
[74.47888947 -76.91235352]
[80.43714905 -66.08259583]
[81.20307159 -53.67317200]
[76.56813049 -42.05834579]
[67.36306763 -33.48684692]
[71.11791229 -18.96441078]
[74.87276459 -4.44197655]
[78.62761688 10.08045864]
[82.38246155 24.60289192]
[93.05935669 34.98813248]
[89.02290344 50.28576279]
[92.77774811 64.80819702]
[96.53260040 79.33063507]
[107.63610077 80.81671143]
[116.22718811 87.74263000]
[119.92150116 97.96330261]
[134.68125916 100.63721466]
[149.44100952 103.31111908]
[158.07833862 96.56086731]
[168.78823853 95.73423004]
[177.97407532 100.86440277]
[182.68565369 110.02462006]
[197.31956482 113.31836700]
[211.95346069 116.61212158]
[226.62127686 119.75141907]
[241.32138062 122.73590851]
[256.02148438 125.72040558]
[270.72155762 128.70489502]
[285.42166138 131.68939209]
[300.12176514 134.67387390]
[315.18548584 129.83703613]
[326.11883545 139.95195007]
[340.81890869 142.93643188]
[355.63177490 145.29856873]
[370.53100586 147.03414917]
[385.43026733 148.76972961]
[400.32952881 150.50529480]
[412.56573486 140.50277710]
[428.28234863 142.16534424]
[438.15493774 154.50662231]
[436.32629395 170.20475769]
[423.88131714 179.94633484]
[408.20339966 177.95182800]
[398.59396362 165.40455627]
[383.69470215 163.66897583]
[368.79544067 161.93339539]
[353.89617920 160.19783020]
[351.58755493 161.89910889]
[348.44357300 162.75628662]
[344.79437256 162.43785095]
[341.08685303 160.74246216]
[337.83444214 157.63653564]
[323.13433838 154.65203857]
[309.12207031 159.70234680]
[297.13726807 149.37397766]
[282.43716431 146.38948059]
[267.73709106 143.40498352]
[253.03698730 140.42050171]
[238.33688354 137.43600464]
[223.63679504 134.45150757]
[216.40695190 136.21490479]
[208.65971375 131.24603271]
[194.02581787 127.95227814]
[179.39190674 124.65852356]
[161.46578979 131.80094910]
[146.76708984 118.07086945]
[132.00733948 115.39695740]
[117.24759674 112.72305298]
[105.24378967 121.71797180]
[103.66537476 136.63468933]
[102.08696747 151.55142212]
[100.50855255 166.46813965]
[98.93014526 181.38485718]
[110.54402161 191.67550659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[12 49]
[13 48]
[14 47]
[15 46]
[17 44]
[18 43]
[22 41]
[23 40]
[24 39]
[25 38]
[28 35]
[29 34]
[50 87]
[51 86]
[52 85]
[54 83]
[55 82]
[56 81]
[57 80]
[58 79]
[62 73]
[63 72]
[64 71]
[90 142]
[91 141]
[92 140]
[96 138]
[97 137]
[98 136]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[106 127]
[107 126]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
