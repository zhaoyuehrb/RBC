%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUAGGAGGGCCCCGCCUUCCCCAGCUGCAUAUAAAGGUCUCUGGGGUUGGAGGCAGCCACAGCACGCUCUCAGCCUUCCUGAGCACCUUUCCUUCUUUCAGCCAACUGCUCACUCGCUCACCUCCCUCCUUGGCACC\
) } def
/len { sequence length } bind def

/coor [
[109.88890076 280.15240479]
[119.60779572 267.38827515]
[118.93482208 252.40338135]
[118.26185608 237.41848755]
[117.58888245 222.43359375]
[116.74782562 207.45719910]
[115.73878479 192.49116516]
[114.72975159 177.52514648]
[113.72071838 162.55912781]
[112.71168518 147.59309387]
[111.70265198 132.62707520]
[100.43124390 134.51979065]
[89.20390320 132.64366150]
[79.24143982 127.23323822]
[71.61718750 118.90565491]
[67.14132690 108.59045410]
[66.27491760 97.42581940]
[51.27869415 97.76239014]
[40.39282227 108.90400696]
[25.17972565 109.03171539]
[14.62498379 98.58503723]
[-0.37123936 98.92160797]
[-15.36746311 99.25817871]
[-30.36368561 99.59474945]
[-45.35990906 99.93132019]
[-60.35613251 100.26789093]
[-71.24200439 111.40950775]
[-86.45510101 111.53720856]
[-97.00984192 101.09053802]
[-112.00606537 101.42710876]
[-120.73177338 114.25838470]
[-135.34440613 119.47857666]
[-150.22512817 115.08040619]
[-159.65197754 102.75506592]
[-160.00015259 87.24188995]
[-151.13577271 74.50602722]
[-136.46736145 69.44466400]
[-121.63523102 74.00400543]
[-112.34263611 86.43088531]
[-97.34641266 86.09431458]
[-87.27098846 75.18462372]
[-72.06748199 74.62966156]
[-60.69270325 85.27166748]
[-45.69647980 84.93509674]
[-30.70025826 84.59852600]
[-15.70403385 84.26195526]
[-0.70781034 83.92538452]
[14.28841305 83.58881378]
[24.36383820 72.67912292]
[39.56734848 72.12416077]
[50.94212341 82.76616669]
[65.93834686 82.42959595]
[75.29069519 70.70212555]
[72.28185272 56.00699234]
[69.27301025 41.31186295]
[66.26416779 26.61673164]
[62.59906387 12.07138920]
[58.28507233 -2.29487300]
[53.97108459 -16.66113472]
[39.28084946 -21.65879822]
[30.36128044 -34.35607910]
[30.64213371 -49.87061310]
[40.01541519 -62.23674393]
[54.87690735 -66.69944763]
[69.51206207 -61.54271317]
[78.29336548 -48.74942017]
[77.84422302 -33.23884583]
[68.33734894 -20.97512436]
[72.65133667 -6.60886288]
[76.96532440 7.75739908]
[79.45925903 9.20176220]
[81.50605011 11.76191998]
[82.66205597 15.26313496]
[82.55882263 19.36782455]
[80.95929718 23.60789108]
[83.96813965 38.30302048]
[86.97698212 52.99815369]
[89.98582458 67.69328308]
[105.35455322 66.39089203]
[119.80030060 72.06230164]
[130.30628967 83.61381531]
[134.63850403 98.71454620]
[148.90434265 94.07929230]
[163.17019653 89.44403839]
[177.43605042 84.80878448]
[191.70188904 80.17353058]
[205.96774292 75.53827667]
[205.33720398 60.45500565]
[208.80059814 45.76121521]
[216.10089111 32.54727554]
[226.69638062 21.79375267]
[239.80079651 14.29862976]
[254.44171143 10.61809349]
[269.53265381 11.02526283]
[283.95379639 15.48992538]
[296.63497925 23.68077278]
[306.63519287 34.98998642]
[313.21234131 48.57835388]
[315.87835693 63.43752289]
[314.43542480 78.46485138]
[308.99057007 92.54519653]
[299.94790649 104.63372040]
[287.97839355 113.83336639]
[273.97027588 119.46146393]
[258.96304321 121.10036469]
[244.07037354 118.62844849]
[230.39733887 112.22916412]
[218.95860291 102.37736511]
[210.60299683 89.80412292]
[196.33714294 94.43937683]
[182.07130432 99.07463074]
[167.80545044 103.70988464]
[153.53959656 108.34513855]
[139.27375793 112.98040009]
[154.01547241 115.75199127]
[168.92268372 114.08617401]
[182.76960754 119.85357666]
[192.08668518 131.60910034]
[194.53938293 146.40721130]
[189.51316833 160.54005432]
[178.26742554 170.46643066]
[163.61990356 173.69915771]
[149.24078369 169.42822266]
[138.73294067 158.72377014]
[134.72927856 144.26820374]
[126.66867065 131.61804199]
[127.67770386 146.58406067]
[128.68673706 161.55009460]
[129.69577026 176.51611328]
[130.70481873 191.48213196]
[131.71385193 206.44815063]
[135.43969727 214.88067627]
[132.57377625 221.76062012]
[133.24674988 236.74551392]
[133.91972351 251.73040771]
[134.59269714 266.71530151]
[145.41662598 278.55685425]
[142.76495361 294.37924194]
[128.67178345 302.04489136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 136]
[3 135]
[4 134]
[5 133]
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[17 52]
[18 51]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[29 40]
[30 39]
[53 78]
[54 77]
[55 76]
[56 75]
[57 70]
[58 69]
[59 68]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[87 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
