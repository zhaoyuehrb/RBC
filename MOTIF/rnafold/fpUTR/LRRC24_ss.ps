%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGCCCGGCGACUGCUCGGGCCCGGCCGCCACCUGCACGGCGGGGGAGCCGCUCGCCGCGGGAGCGUCAGGAGGGCACGCGUCUGCGGCUGAACCGCGGAAGGGCCGGUGAGGAACCGGGCCUCGGGAG\
) } def
/len { sequence length } bind def

/coor [
[94.30352020 176.42669678]
[93.94923401 161.43087769]
[93.59495544 146.43505859]
[93.24066925 131.43923950]
[85.15301514 131.86291504]
[76.60169220 130.12800598]
[66.83978271 141.51681519]
[57.07786942 152.90562439]
[47.31595612 164.29443359]
[37.55404282 175.68325806]
[27.92731667 187.18656921]
[18.43711853 198.80276489]
[16.33709526 215.06689453]
[1.09982514 221.12969971]
[-11.59989452 210.75428772]
[-8.69768047 194.61399841]
[6.82091713 189.31256104]
[16.31111526 177.69636536]
[18.12408066 170.45715332]
[26.16522980 165.92134094]
[35.92714310 154.53253174]
[45.68905640 143.14372253]
[55.45096588 131.75489807]
[65.21288300 120.36608887]
[60.17517090 106.23734283]
[45.40994263 103.59385681]
[34.33853531 110.33163452]
[22.04581261 107.76235962]
[15.06267548 97.81196594]
[0.36400071 94.82048035]
[-14.33467388 91.82899475]
[-29.03334808 88.83751678]
[-43.73202133 85.84603119]
[-55.08169556 96.42736053]
[-70.48738861 98.28324890]
[-84.02529144 90.70005798]
[-90.48981476 76.59369659]
[-87.39521027 61.38833237]
[-75.93141937 50.93074417]
[-60.50650024 49.24209213]
[-47.05165100 56.97169113]
[-40.74053955 71.14735413]
[-26.04186440 74.13883972]
[-11.34319019 77.13032532]
[3.35548425 80.12180328]
[18.05415916 83.11328888]
[34.31799698 76.63062286]
[48.05342865 88.82862854]
[62.81865692 91.47211456]
[73.81650543 75.07457733]
[90.73606873 67.12634277]
[108.28721619 68.92852020]
[115.42642975 55.73641586]
[122.56563568 42.54430771]
[129.70484924 29.35220146]
[136.37225342 15.91547585]
[142.55950928 2.25099564]
[148.58493042 -11.48560429]
[154.44770813 -25.29240799]
[160.31048584 -39.09921265]
[166.17327881 -52.90601349]
[172.03605652 -66.71282196]
[177.89883423 -80.51962280]
[183.76161194 -94.32642365]
[189.62438965 -108.13323212]
[187.89639282 -123.85978699]
[199.99269104 -132.55050659]
[205.85546875 -146.35731506]
[211.71824646 -160.16412354]
[217.58102417 -173.97091675]
[208.81025696 -186.66253662]
[208.31626892 -202.08198547]
[216.25666809 -215.30899048]
[230.09773254 -222.12283325]
[245.42280579 -220.34927368]
[257.34173584 -210.55422974]
[262.05120850 -195.86326599]
[258.04846191 -180.96421814]
[246.61076355 -170.61132812]
[231.38783264 -168.10813904]
[225.52505493 -154.30133057]
[219.66227722 -140.49453735]
[213.79949951 -126.68772888]
[215.94683838 -111.94873047]
[203.43119812 -102.27044678]
[197.56840515 -88.46364594]
[191.70562744 -74.65684509]
[185.84284973 -60.85004044]
[179.98007202 -47.04323578]
[174.11729431 -33.23643112]
[168.25451660 -19.42962837]
[162.39173889 -5.62282515]
[162.67572021 1.83454621]
[156.22398376 8.43823910]
[150.03674316 22.10272026]
[150.99450684 25.59006500]
[150.24964905 29.72310066]
[147.51416016 33.66753387]
[142.89695740 36.49141312]
[135.75775146 49.68352127]
[128.61853027 62.87562561]
[121.47932434 76.06773376]
[131.65434265 94.33278656]
[128.44837952 114.99349213]
[139.72109985 124.88922882]
[150.99383545 134.78495789]
[166.46928406 138.07446289]
[170.92961121 152.28553772]
[182.20233154 162.18127441]
[193.47506714 172.07701111]
[204.74780273 181.97274780]
[216.02052307 191.86848450]
[232.05865479 192.26612854]
[241.63212585 205.13966370]
[237.39701843 220.61361694]
[222.60212708 226.81770325]
[208.59681702 218.99266052]
[206.12478638 203.14120483]
[194.85206604 193.24546814]
[183.57933044 183.34973145]
[172.30659485 173.45399475]
[161.03387451 163.55825806]
[146.36471558 160.97657776]
[141.09809875 146.05769348]
[129.82536316 136.16195679]
[118.55263519 126.26622009]
[113.60953522 129.13580322]
[108.23648834 131.08496094]
[108.59076691 146.08078003]
[108.94505310 161.07659912]
[109.29933167 176.07241821]
[111.94440460 195.27276611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 128]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 18]
[12 17]
[25 49]
[26 48]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[52 102]
[53 101]
[54 100]
[55 99]
[56 95]
[57 94]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[67 83]
[68 82]
[69 81]
[70 80]
[104 126]
[105 125]
[106 124]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
