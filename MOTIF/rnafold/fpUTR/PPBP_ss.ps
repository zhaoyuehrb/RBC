%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAUCUGCAGACUUGUAGGCAGCAACUCACCCUCACUCAGAGGUCUUCUGGUUCUGGAAACAACUCUAGCUCAGCCUUCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[111.62425232 350.39556885]
[102.96148682 338.05780029]
[97.50371552 324.00518799]
[95.56824493 309.05468750]
[97.26760864 294.07553101]
[102.50299835 279.93853760]
[110.97003174 267.46566772]
[122.17646027 257.38204956]
[135.47074890 250.27392578]
[131.76115417 235.73986816]
[127.79273224 221.27433777]
[123.56674194 206.88194275]
[119.34075165 192.48954773]
[108.33118439 182.45767212]
[111.86711121 167.03665161]
[107.64112091 152.64425659]
[103.41513062 138.25186157]
[99.18914032 123.85946655]
[85.37075806 118.86576080]
[77.09379578 106.72586823]
[77.49349976 92.03828430]
[86.41846466 80.36652374]
[82.19247437 65.97412872]
[77.96648407 51.58173370]
[72.42719269 44.02692795]
[73.85639191 36.59981155]
[70.14679718 22.06575012]
[66.43720245 7.53169060]
[62.72760391 -7.00236893]
[44.83733368 -13.06220627]
[34.07286072 -28.40589905]
[34.45713806 -46.99936676]
[45.66941452 -61.65385437]
[40.42745209 -75.70809937]
[35.18548965 -89.76234436]
[29.94352531 -103.81659698]
[16.00629425 -111.76222992]
[13.67118168 -127.63442993]
[24.72948456 -139.25740051]
[40.69821930 -137.71499634]
[49.32754135 -124.19041443]
[43.99777222 -109.05855560]
[49.23973465 -95.00431061]
[54.48169708 -80.95006561]
[59.72365952 -66.89582062]
[71.21846771 -65.92589569]
[81.51718903 -60.61432266]
[89.03927612 -51.73146057]
[92.61325836 -40.59909439]
[91.65907288 -28.89380074]
[86.28178406 -18.39447212]
[77.26166534 -10.71196651]
[80.97126007 3.82209325]
[84.68085480 18.35615349]
[88.39045715 32.89021301]
[92.35887909 47.35574341]
[96.58486938 61.74813843]
[100.81085968 76.14053345]
[114.62924194 81.13423920]
[122.90620422 93.27413177]
[122.50650024 107.96171570]
[113.58153534 119.63347626]
[117.80752563 134.02587891]
[122.03351593 148.41827393]
[126.25950623 162.81066895]
[137.57135010 173.87197876]
[133.73315430 188.26356506]
[137.95913696 202.65596008]
[142.18511963 217.04835510]
[147.72442627 224.60314941]
[146.29521179 232.03027344]
[150.00480652 246.56433105]
[165.07948303 246.43170166]
[179.74769592 249.91120911]
[193.15666199 256.80056763]
[204.52677917 266.69924927]
[213.19702148 279.03173828]
[218.66331482 293.08105469]
[220.60784912 308.03036499]
[218.91757202 323.01055908]
[213.69075012 337.15072632]
[205.23127747 349.62872314]
[194.03096008 359.71914673]
[180.74098206 366.83532715]
[166.13400269 370.56353760]
[151.05924988 370.68701172]
[136.39315796 367.19860840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 72]
[10 71]
[11 69]
[12 68]
[13 67]
[15 65]
[16 64]
[17 63]
[18 62]
[22 58]
[23 57]
[24 56]
[26 55]
[27 54]
[28 53]
[29 52]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
