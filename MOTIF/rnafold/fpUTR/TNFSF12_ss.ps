%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCCCGGCCCGAUCCGCCCGCCGGCUCCCCCUCCCCCGAUCCCUCGGGUCCCGGGAUGGGGGGGCGGUGAGGCAGGCACAGCCCCCCGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.03687286 352.79174805]
[74.31645966 343.24588013]
[65.93182373 330.66854858]
[61.62853241 316.17810059]
[61.78921509 301.06301880]
[66.39959717 286.66732788]
[75.04972076 274.27108765]
[86.97042084 264.97656250]
[101.10171509 259.61019897]
[100.13076782 244.64166260]
[99.15982056 229.67312622]
[86.45645142 224.38847351]
[77.25583649 214.06918335]
[73.42031860 200.71731567]
[75.76373291 186.95704651]
[83.87960815 175.51889038]
[96.21022797 168.69790649]
[95.72450256 153.70576477]
[94.99607086 138.72346497]
[94.02512360 123.75492859]
[93.05417633 108.78638458]
[91.84096527 93.83552551]
[90.38581848 78.90627289]
[88.93067169 63.97702408]
[87.47552490 49.04777527]
[86.02037811 34.11852264]
[82.00687408 25.69513512]
[84.76787567 18.68346405]
[83.79692841 3.71492219]
[82.82598114 -11.25362015]
[81.85503387 -26.22216225]
[80.88408661 -41.19070435]
[79.91313934 -56.15924835]
[78.94219208 -71.12779236]
[77.72898865 -86.07864380]
[76.27384186 -101.00789642]
[74.81869507 -115.93714905]
[73.36354828 -130.86639404]
[61.44035339 -140.89013672]
[60.17729950 -156.05125427]
[69.80687714 -167.35641479]
[68.35173035 -182.28567505]
[66.89658356 -197.21492004]
[65.44143677 -212.14416504]
[63.98628616 -227.07342529]
[56.43191528 -242.25129700]
[68.92536926 -253.71209717]
[83.39681244 -244.87954712]
[78.91554260 -228.52856445]
[80.37068939 -213.59931946]
[81.82583618 -198.67007446]
[83.28098297 -183.74081421]
[84.73612976 -168.81156921]
[96.36754608 -159.57868958]
[98.05593872 -144.45904541]
[88.29279327 -132.32154846]
[89.74794769 -117.39229584]
[91.20309448 -102.46304321]
[92.65824127 -87.53379822]
[96.51361847 -81.05902100]
[93.91073608 -72.09873962]
[94.88168335 -57.13019562]
[95.85263062 -42.16165161]
[96.82357788 -27.19310951]
[97.79452515 -12.22456741]
[98.76547241 2.74397492]
[99.73641968 17.71251678]
[100.94963074 32.66337585]
[102.40477753 47.59262466]
[103.85992432 62.52187729]
[105.31507111 77.45112610]
[106.77021790 92.38037872]
[110.68960571 99.61476135]
[108.02272034 107.81543732]
[108.99366760 122.78398132]
[109.96461487 137.75251770]
[113.70323944 146.30145264]
[110.71663666 153.22004700]
[111.20236206 168.21217346]
[125.79476929 175.79159546]
[134.57093811 189.58679199]
[135.24458313 205.82978821]
[127.72752380 220.13922119]
[114.12836456 228.70217896]
[115.09931183 243.67071533]
[116.07025909 258.63925171]
[130.77641296 262.13504028]
[143.79795837 269.81167603]
[153.97705078 280.98654175]
[160.40853882 294.66598511]
[162.52056885 309.63363647]
[160.12532043 324.55859375]
[153.43580627 338.11373901]
[143.04681396 349.09375000]
[129.88215637 356.52227783]
[115.11240387 359.73880005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 86]
[10 85]
[11 84]
[17 79]
[18 78]
[19 76]
[20 75]
[21 74]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 59]
[36 58]
[37 57]
[38 56]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
