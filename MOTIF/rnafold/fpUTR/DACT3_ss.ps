%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGGCGGGGAGGUGGGACCGGGAGAGGGGUGGCCGCGGGGCCCGGCCGGGCUGGGGCGGGGGGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[130.31483459 151.44615173]
[122.36232758 147.86691284]
[116.54807281 141.23854065]
[113.98008728 132.70317078]
[115.19766235 123.77628326]
[104.05049133 113.73931885]
[90.41541290 110.64476776]
[85.91255188 97.40785217]
[74.76538086 87.37089539]
[63.61820984 77.33393097]
[52.47103500 67.29697418]
[36.12775803 71.06523132]
[20.86635590 64.51486206]
[12.50658989 50.35500336]
[14.11118031 34.15513229]
[2.55348182 24.59377289]
[-9.00421715 15.03241348]
[-20.56191444 5.47105408]
[-38.66519165 2.96613216]
[-44.41107178 -13.48038387]
[-56.35902023 -22.54937172]
[-68.30696869 -31.61835670]
[-83.12228394 -27.00468063]
[-97.80915070 -32.01223755]
[-106.72016144 -44.71552658]
[-106.42885590 -60.22986603]
[-97.04724884 -72.58968353]
[-82.18275452 -77.04236603]
[-67.55107117 -71.87577820]
[-58.77839279 -59.07657242]
[-59.23797989 -43.56630707]
[-47.29003143 -34.49731827]
[-35.34208298 -25.42833328]
[-23.13031197 -26.72667503]
[-13.05884647 -19.01402855]
[-11.00055599 -6.08664465]
[0.55714309 3.47471499]
[12.11484146 13.03607464]
[23.67254066 22.59743500]
[36.40399933 18.06919861]
[49.80427170 20.51693153]
[60.27936554 29.39491844]
[64.96470642 42.41817474]
[62.50799561 56.14980316]
[73.65516663 66.18675995]
[84.80233765 76.22371674]
[95.94950867 86.26068115]
[109.58458710 89.35523224]
[114.08744812 102.59214783]
[125.23461914 112.62910461]
[147.34312439 114.95594025]
[154.71897888 135.16244507]
[167.38389587 143.19984436]
[180.04881287 151.23724365]
[192.71372986 159.27465820]
[205.37866211 167.31205750]
[221.17637634 168.17373657]
[227.77651978 181.52616882]
[240.44143677 189.56356812]
[253.10635376 197.60096741]
[269.01370239 195.51861572]
[280.45928955 206.76039124]
[278.66308594 222.70257568]
[265.00296021 231.11569214]
[249.95779419 225.54589844]
[245.06895447 210.26589966]
[232.40403748 202.22848511]
[219.73912048 194.19108582]
[204.84727478 193.90429688]
[197.34124756 179.97697449]
[184.67633057 171.93957520]
[172.01141357 163.90217590]
[159.34649658 155.86476135]
[146.68157959 147.82736206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 50]
[6 49]
[8 47]
[9 46]
[10 45]
[11 44]
[15 39]
[16 38]
[17 37]
[18 36]
[20 33]
[21 32]
[22 31]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
