%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAAAGGGGUGGUCACCCUGCCCUCACCUUGACCUGUAAGUUGCCUAGGACAGUGGCCUGGUCCCAGGGGCUGUUGUGGGGAGUUGAAGAACACCCUGGCCUCCUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[75.98929596 509.00714111]
[60.77923965 507.73559570]
[47.63151169 499.98315430]
[39.15660858 487.28912354]
[37.03722382 472.17385864]
[41.69416809 457.63854980]
[52.20279694 446.56915283]
[66.47661591 441.16351318]
[67.72624207 426.21566772]
[68.97587585 411.26782227]
[70.22550201 396.31994629]
[63.57538223 382.99234009]
[72.43545532 369.88473511]
[73.68508911 354.93685913]
[74.93471527 339.98901367]
[76.18434143 325.04116821]
[77.43396759 310.09329224]
[66.05340576 300.52142334]
[62.44875336 285.91079712]
[68.20587158 271.81436157]
[81.31095886 263.71728516]
[82.56058502 248.76942444]
[72.77639008 237.59780884]
[73.83074951 222.42074585]
[85.61491394 212.23393250]
[86.86454010 197.28607178]
[87.90626526 182.32229614]
[88.73989105 167.34547424]
[81.72186279 154.20787048]
[90.21414185 140.85902405]
[91.04776764 125.88220978]
[91.88138580 110.90539551]
[85.05295563 97.54977417]
[72.42391968 89.45611572]
[59.79487610 81.36245728]
[44.41154861 84.98582458]
[31.01593208 76.59934998]
[27.55540848 61.17857361]
[36.08304214 47.87237167]
[51.53954315 44.57507706]
[64.75484467 53.24291992]
[67.88853455 68.73341370]
[80.51757812 76.82707214]
[93.14662170 84.92073059]
[95.00849152 87.94789124]
[96.65555573 91.08026123]
[102.73120117 77.36579895]
[108.80683899 63.65132904]
[114.88247681 49.93686295]
[113.39794159 34.18545914]
[125.62722778 25.68288040]
[131.70286560 11.96841526]
[137.77850342 -1.74605143]
[143.85415649 -15.46051788]
[149.92979431 -29.17498398]
[156.00543213 -42.88945007]
[152.08779907 -55.27485275]
[157.53919983 -66.62065887]
[168.90580750 -71.01033020]
[175.36033630 -84.55060577]
[181.81486511 -98.09088135]
[188.26939392 -111.63114929]
[186.44023132 -127.92797089]
[199.79789734 -137.44137573]
[214.60116577 -130.38478088]
[215.62170410 -114.01742554]
[201.80966187 -105.17662048]
[195.35513306 -91.63634491]
[188.90060425 -78.09607697]
[182.44607544 -64.55580139]
[184.82534790 -47.22988129]
[169.71989441 -36.81380844]
[163.64425659 -23.09934235]
[157.56861877 -9.38487625]
[151.49298096 4.32958984]
[145.41734314 18.04405594]
[139.34169006 31.75852203]
[141.26080322 46.52897644]
[128.59693909 56.01250458]
[122.52130890 69.72697449]
[116.44566345 83.44143677]
[110.37002563 97.15590668]
[106.85820770 111.73901367]
[106.02458191 126.71583557]
[105.19096375 141.69265747]
[112.14936829 155.90148926]
[103.71670532 168.17909241]
[102.88308716 183.15591431]
[105.55829620 192.04104614]
[101.81240082 198.53570557]
[100.56277466 213.48356628]
[110.49197388 225.48559570]
[109.01173401 240.62704468]
[97.50843811 250.01905823]
[96.25881195 264.96691895]
[107.83757782 275.12753296]
[111.17424011 289.98419189]
[105.19371033 303.79351807]
[92.38182068 311.34292603]
[91.13219452 326.29077148]
[89.88256836 341.23864746]
[88.63294220 356.18649292]
[87.38331604 371.13433838]
[93.94404602 385.53112793]
[85.17335510 397.56958008]
[83.92372894 412.51742554]
[82.67410278 427.46530151]
[81.42447662 442.41314697]
[94.60263062 450.11373901]
[103.12745667 462.77432251]
[105.30635071 477.88110352]
[100.70668030 492.43466187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 108]
[9 107]
[10 106]
[11 105]
[13 103]
[14 102]
[15 101]
[16 100]
[17 99]
[21 95]
[22 94]
[25 91]
[26 90]
[27 88]
[28 87]
[30 85]
[31 84]
[32 83]
[33 44]
[34 43]
[35 42]
[46 82]
[47 81]
[48 80]
[49 79]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
