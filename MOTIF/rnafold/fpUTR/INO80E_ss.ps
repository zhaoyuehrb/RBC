%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGCCUUGCAGCGUCUCCGGAAGUGGAGGCGGGAGCGGCACGGCAGCCACUGCUUGGGGUAGCGGGAGGGCAGACUCUGGGCGCCACUCCCGGGCCGGUC\
) } def
/len { sequence length } bind def

/coor [
[40.37662125 131.56526184]
[32.64759064 132.17947388]
[25.28022003 129.99545288]
[19.24423218 125.35245514]
[15.31542206 118.90985107]
[0.31716675 119.13860321]
[-14.68108940 119.36734772]
[-28.36166382 127.31420135]
[-41.20544815 119.77188873]
[-56.20370483 120.00064087]
[-71.20195770 120.22938538]
[-84.51605225 136.28125000]
[-105.04145813 137.64637756]
[-119.94641876 123.88454437]
[-134.80534363 125.93689728]
[-149.66427612 127.98925018]
[-164.52320862 130.04159546]
[-179.38214111 132.09394836]
[-194.24107361 134.14630127]
[-209.10000610 136.19865417]
[-223.95893860 138.25100708]
[-236.56639099 148.73834229]
[-251.85668945 142.81053162]
[-254.10047913 126.56561279]
[-240.98954773 116.71495819]
[-226.01129150 123.39208221]
[-211.15235901 121.33972931]
[-196.29342651 119.28737640]
[-181.43449402 117.23502350]
[-166.57556152 115.18267059]
[-151.71662903 113.13031769]
[-136.85769653 111.07796478]
[-121.99877167 109.02561188]
[-118.78018951 99.83910370]
[-112.32428741 92.47579956]
[-103.53280640 88.03066254]
[-93.65879822 87.18637085]
[-84.12808990 90.10882568]
[-76.33336639 96.41680908]
[-71.43070984 105.23113251]
[-56.43245316 105.00238037]
[-41.43419647 104.77363586]
[-28.82639694 96.84314728]
[-14.90983677 104.36909485]
[0.08841886 104.14034271]
[15.08667469 103.91159821]
[32.65338898 89.96266174]
[53.36301422 100.29103088]
[68.15244293 97.78649139]
[82.94187927 95.28195190]
[88.34174347 86.68367004]
[97.57842255 82.46787262]
[107.61204529 84.02200317]
[115.14050293 90.83459473]
[130.05511475 89.23633575]
[144.96972656 87.63808441]
[159.88433838 86.03982544]
[174.79895020 84.44156647]
[189.71354675 82.84330750]
[204.62815857 81.24504852]
[219.51666260 79.41953278]
[234.37559509 77.36717987]
[246.98733521 67.81446075]
[260.65356445 73.73760223]
[275.51248169 71.68524933]
[290.37142944 69.63289642]
[305.12094116 66.90311432]
[319.73016357 63.50160980]
[334.33941650 60.10010910]
[348.94863892 56.69860458]
[357.08480835 43.14949036]
[372.43862915 39.40306091]
[385.90097046 47.68201065]
[389.48486328 63.07458496]
[381.06402588 76.44863892]
[365.63442993 79.86959076]
[352.35015869 71.30783844]
[337.74090576 74.70934296]
[323.13168335 78.11084747]
[308.52243042 81.51235199]
[306.32131958 84.47255707]
[302.49645996 86.43454742]
[297.57263184 86.60924530]
[292.42376709 84.49182892]
[277.56484985 86.54418182]
[262.70590210 88.59653473]
[251.15698242 98.00245667]
[236.42794800 92.22611237]
[221.56901550 94.27846527]
[215.26690674 98.38129425]
[206.22642517 96.15966034]
[191.31181335 97.75791931]
[176.39720154 99.35617828]
[161.48258972 100.95442963]
[146.56797791 102.55268860]
[131.65336609 104.15094757]
[116.73876190 105.74920654]
[102.42157745 117.53212738]
[85.44641876 110.07138062]
[70.65698242 112.57592010]
[55.86755371 115.08045959]
[52.84804535 122.44634247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[9 42]
[10 41]
[11 40]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[48 101]
[49 100]
[50 99]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 89]
[62 88]
[64 86]
[65 85]
[66 84]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
