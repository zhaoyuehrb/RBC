%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCGAGCCUGGCUCUACUGCAGGCGCUGGGGGUUGGGGUGGGGGAGAGGCCCAGGGCACAUGAUGCCGCCCCCAGCCCGCCCAGCACAUGACCCAGGCAGGCCGGCGGGGUCCUGGCACACCCGAGCCGCGUCCGCGAACACAGCCC\
) } def
/len { sequence length } bind def

/coor [
[42.68000031 158.86778259]
[30.98116684 149.47964478]
[25.84675980 135.38574219]
[28.76543427 120.67243958]
[38.89095688 109.60565186]
[53.28757095 105.39405060]
[67.77905273 109.25749207]
[55.96755219 100.01149750]
[44.15604782 90.76550293]
[32.34454727 81.51950073]
[20.53304482 72.27350616]
[8.72154331 63.02751541]
[-6.91444349 60.61370468]
[-12.16705418 46.67600632]
[-23.97855759 37.43001175]
[-38.82609940 41.53570175]
[-53.07764816 36.17410660]
[-61.34163284 23.59751892]
[-60.62397003 8.74413776]
[-72.43547058 -0.50185680]
[-84.24697113 -9.74785137]
[-102.50671387 -11.87145615]
[-108.48781586 -28.33901596]
[-120.49162292 -37.33393478]
[-132.49543762 -46.32885361]
[-144.68621826 -55.06869507]
[-157.05854797 -63.54957962]
[-169.43087769 -72.03046417]
[-181.80322266 -80.51134491]
[-194.17555237 -88.99222565]
[-206.54788208 -97.47310638]
[-218.92021179 -105.95399475]
[-231.29254150 -114.43487549]
[-243.66488647 -122.91575623]
[-248.96789551 -110.78308868]
[-262.62066650 -102.06658936]
[-282.15731812 -101.29918671]
[-296.36340332 -106.11454010]
[-310.56945801 -110.92989349]
[-324.77554321 -115.74524689]
[-336.77673340 -106.05118561]
[-352.11624146 -104.40708923]
[-365.89926147 -111.33757019]
[-373.72772217 -124.63114166]
[-373.10354614 -140.04586792]
[-364.22592163 -152.66297913]
[-349.92767334 -158.45639038]
[-334.77130127 -155.57743835]
[-323.59317017 -144.94480896]
[-319.96017456 -129.95130920]
[-305.75411987 -125.13596344]
[-291.54803467 -120.32061005]
[-277.34197998 -115.50525665]
[-272.59548950 -121.31222534]
[-263.10253906 -132.92617798]
[-258.35604858 -138.73313904]
[-265.90164185 -151.69708252]
[-273.44726562 -164.66104126]
[-280.99285889 -177.62498474]
[-296.07406616 -183.09643555]
[-301.06256104 -198.34420776]
[-292.13156128 -211.67150879]
[-276.13220215 -212.85478210]
[-265.33782959 -200.98631287]
[-268.02893066 -185.17057800]
[-260.48330688 -172.20663452]
[-252.93771362 -159.24269104]
[-245.39210510 -146.27874756]
[-235.18400574 -135.28808594]
[-222.81166077 -126.80720520]
[-210.43933105 -118.32632446]
[-198.06700134 -109.84544373]
[-185.69467163 -101.36456299]
[-173.32232666 -92.88367462]
[-160.94999695 -84.40279388]
[-148.57766724 -75.92191315]
[-136.20533752 -67.44102478]
[-131.36772156 -67.43792725]
[-126.49549103 -64.34967041]
[-123.50051880 -58.33266068]
[-111.49670410 -49.33774185]
[-99.49289703 -40.34282684]
[-87.43472290 -41.74070740]
[-77.34970093 -34.28683853]
[-75.00097656 -21.55935287]
[-63.18947601 -12.31335926]
[-51.37797546 -3.06736422]
[-37.13140488 -7.33037519]
[-22.93850708 -2.32781076]
[-14.31191254 10.21951008]
[-14.73256207 25.61851120]
[-2.92105985 34.86450577]
[11.87008953 36.61698151]
[17.96753693 51.21601486]
[29.77903938 60.46200943]
[41.59054184 69.70800018]
[53.40204239 78.95399475]
[65.21354675 88.19998932]
[77.02504730 97.44598389]
[99.00832367 79.87414551]
[116.80947876 96.43162537]
[131.37069702 100.03316498]
[145.93190002 103.63471222]
[160.53027344 107.08255005]
[175.16418457 110.37629700]
[189.79808044 113.67005157]
[204.43199158 116.96379852]
[221.84072876 111.05926514]
[234.30055237 123.37620544]
[249.00065613 126.36069489]
[263.70074463 129.34518433]
[278.40084839 132.32968140]
[289.74548340 121.74295044]
[305.15029907 119.87973785]
[318.69180298 127.45648956]
[325.16302490 141.55978394]
[322.07565308 156.76661682]
[310.61682129 167.22964478]
[295.19271851 168.92564392]
[281.73419189 161.20243835]
[275.41635132 147.02976990]
[260.71624756 144.04528809]
[246.01615906 141.06079102]
[231.31605530 138.07629395]
[221.01962280 144.50567627]
[208.71353149 142.09152222]
[201.13824463 131.59770203]
[186.50433350 128.30395508]
[171.87042236 125.01020813]
[157.23652649 121.71645355]
[149.97111511 123.32702637]
[142.33035278 118.19592285]
[127.76914978 114.59437561]
[113.20793915 110.99283600]
[106.53503418 119.06112671]
[95.04333496 122.57881165]
[100.00817871 136.73332214]
[114.70193481 142.08380127]
[122.47397614 155.65322876]
[119.65457153 171.03454590]
[107.57497406 180.96516418]
[91.93878937 180.75614929]
[80.12894440 170.50619507]
[77.72169495 155.05500793]
[85.85366821 141.69818115]
[80.88881683 127.54366302]
[79.89485168 142.51069641]
[71.28343201 154.79252625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[12 94]
[14 92]
[15 91]
[19 87]
[20 86]
[21 85]
[23 82]
[24 81]
[25 80]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[37 53]
[38 52]
[39 51]
[40 50]
[56 68]
[57 67]
[58 66]
[59 65]
[101 134]
[102 133]
[103 132]
[104 130]
[105 129]
[106 128]
[107 127]
[109 124]
[110 123]
[111 122]
[112 121]
[136 146]
[137 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
