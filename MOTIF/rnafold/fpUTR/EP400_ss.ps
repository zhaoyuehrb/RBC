%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCAGCCGCGCCGCCGCUUCCUCCCGCCGGGGCCCCGGAUGCACUGAGCGGCUGCGGCGCGGCUUCCAUCCUCCCGCCCUCCUGACGCGGCCGGAGCGCAGCCCUGAGGCCCAGGGAGAACGACACAUUGGAUACAGAAGGGAGGUGAUC\
) } def
/len { sequence length } bind def

/coor [
[-32.35523987 153.48030090]
[-40.16391373 153.62739563]
[-47.69231033 151.65303040]
[-54.37710953 147.72012329]
[-59.72225952 142.13760376]
[-63.33578110 135.33615112]
[-78.27178955 136.72016907]
[-93.20780945 138.10420227]
[-108.14382172 139.48822021]
[-123.07983398 140.87225342]
[-138.01583862 142.25627136]
[-152.95185852 143.64030457]
[-167.88786316 145.02432251]
[-182.82388306 146.40835571]
[-197.71018982 148.25167847]
[-212.53266907 150.55255127]
[-227.35514832 152.85342407]
[-242.17764282 155.15429688]
[-257.00012207 157.45516968]
[-271.82260132 159.75604248]
[-286.64508057 162.05691528]
[-289.63308716 176.89933777]
[-297.50408936 189.79969788]
[-309.29165649 199.21105957]
[-323.56100464 204.01263428]
[-338.58383179 203.64318848]
[-352.54739380 198.16659546]
[-363.77346802 188.26182556]
[-370.91989136 175.13879395]
[-385.74237061 177.43966675]
[-400.56484985 179.74053955]
[-415.38732910 182.04141235]
[-427.81741333 192.73838806]
[-443.20483398 187.06744385]
[-445.72033691 170.86236572]
[-432.77618408 160.79356384]
[-417.68820190 167.21893311]
[-402.86572266 164.91806030]
[-388.04324341 162.61718750]
[-373.22076416 160.31631470]
[-370.38891602 145.64436340]
[-362.69378662 132.80247498]
[-351.04754639 123.35051727]
[-336.84368896 118.44424438]
[-321.79019165 118.69406128]
[-307.70425415 124.08912659]
[-296.29287720 133.99630737]
[-288.94595337 147.23443604]
[-274.12347412 144.93356323]
[-259.30099487 142.63269043]
[-244.47851562 140.33181763]
[-229.65602112 138.03094482]
[-214.83354187 135.73007202]
[-200.01106262 133.42918396]
[-197.62678528 130.75291443]
[-193.80186462 129.12823486]
[-189.05897522 129.23127747]
[-184.20790100 131.47233582]
[-169.27189636 130.08831787]
[-154.33587646 128.70428467]
[-139.39987183 127.32025909]
[-124.46385956 125.93623352]
[-109.52784729 124.55220795]
[-94.59183502 123.16818237]
[-79.65581512 121.78415680]
[-64.71980286 120.40013123]
[-52.45563889 101.52085114]
[-30.01906204 97.60513306]
[-11.66637897 111.53157806]
[2.91737032 108.02240753]
[8.72063065 103.37113190]
[17.83654976 104.59417725]
[32.48927307 101.38517761]
[47.14199829 98.17617798]
[61.79472351 94.96718597]
[76.44744873 91.75818634]
[91.10017395 88.54919434]
[103.25350952 79.75734711]
[110.88647461 66.84465027]
[111.24826813 51.02758408]
[124.38535309 44.00859451]
[132.01832581 31.09589577]
[139.65129089 18.18319893]
[147.28427124 5.27050018]
[139.67198181 -8.06924438]
[139.76547241 -23.42785263]
[147.53959656 -36.67393494]
[160.90313721 -44.24436188]
[176.26136780 -44.10272598]
[189.48301697 -36.28712845]
[197.01152039 -22.89992523]
[196.82174683 -7.54220581]
[188.96475220 5.65488005]
[175.55401611 13.14138317]
[160.19696045 12.90347004]
[152.56399536 25.81616783]
[144.93103027 38.72886658]
[137.29804993 51.64156342]
[137.48222351 66.53503418]
[123.79917145 74.47762299]
[116.16620636 87.39031982]
[120.37290955 93.59947968]
[128.78631592 106.01779175]
[132.99302673 112.22695160]
[147.81550598 109.92607117]
[162.63798523 107.62519836]
[177.46046448 105.32432556]
[192.28295898 103.02345276]
[202.87528992 90.97430420]
[218.89236450 91.88710785]
[228.04722595 105.06163025]
[223.31706238 120.39150238]
[208.33044434 126.11696625]
[194.58383179 117.84593201]
[179.76135254 120.14680481]
[164.93885803 122.44768524]
[150.11637878 124.74855804]
[135.29389954 127.04943085]
[132.87399292 134.14830017]
[147.07174683 138.98812866]
[161.26950073 143.82794189]
[175.46725464 148.66775513]
[189.66499329 153.50756836]
[203.86267090 158.34762573]
[199.02238464 172.54521179]
[184.82518005 167.70532227]
[170.62742615 162.86550903]
[156.42967224 158.02569580]
[142.23193359 153.18588257]
[128.03417969 148.34605408]
[125.61426544 155.44493103]
[135.94517517 166.32025146]
[151.81623840 170.44837952]
[155.91526794 186.32698059]
[144.02554321 197.62150574]
[128.37818909 192.71311951]
[125.06985474 176.65115356]
[114.73895264 165.77583313]
[94.82906342 151.93084717]
[84.96189880 133.77151489]
[85.35715485 116.08132172]
[94.30916595 103.20191956]
[79.65644073 106.41091156]
[65.00372314 109.61991119]
[50.35099411 112.82890320]
[35.69826889 116.03790283]
[21.04554558 119.24690247]
[6.42653751 122.60615540]
[-8.15721226 126.11532593]
[-9.54352856 133.93884277]
[-12.99267578 141.06649780]
[-18.23161507 146.96781921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[29 40]
[30 39]
[31 38]
[32 37]
[69 149]
[70 148]
[72 147]
[73 146]
[74 145]
[75 144]
[76 143]
[77 142]
[78 101]
[79 100]
[81 98]
[82 97]
[83 96]
[84 95]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
