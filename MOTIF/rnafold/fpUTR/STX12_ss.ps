%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGCAGCCUUAGCUCCUUCCCCGCCCUUGCUCUUCCCAGUUUCUCCGUCAGCCUGCGGGUCCCGGCUGGCGGCUGCUUCCGGUAGGAGAGCGGUGUAGAGCGAGCAGGUCUCAGCUCCUCGUC\
) } def
/len { sequence length } bind def

/coor [
[131.82397461 353.60186768]
[128.85179138 338.89929199]
[115.59350586 335.38720703]
[105.10683441 326.44448853]
[99.49102783 313.78594971]
[99.90280151 299.87731934]
[106.31857300 287.45520020]
[117.52779388 278.98849487]
[114.92307281 264.21636963]
[112.31835175 249.44427490]
[109.71362305 234.67214966]
[106.29457092 231.19537354]
[105.09423828 225.49842834]
[107.36652374 219.10012817]
[105.50136566 204.21653748]
[103.63620758 189.33294678]
[101.77105713 174.44935608]
[92.51124573 162.78294373]
[98.47253418 148.12779236]
[96.60737610 133.24420166]
[94.74222565 118.36061096]
[83.36682892 109.38583374]
[81.56514740 95.00875854]
[90.37419128 83.50454712]
[88.50903320 68.62095642]
[86.64387512 53.73736954]
[84.77872467 38.85377884]
[81.48201752 34.52447128]
[80.36644745 29.83107567]
[81.19076538 25.69400406]
[83.37361908 22.79339218]
[82.62593079 7.81203890]
[81.87824249 -7.16931486]
[81.13055420 -22.15066910]
[80.38286591 -37.13202286]
[79.63517761 -52.11337662]
[78.88748932 -67.09472656]
[77.76654053 -82.05278778]
[76.27302551 -96.97824860]
[74.22246552 -111.83742523]
[71.61774445 -126.60954285]
[69.01302338 -141.38166809]
[58.01936340 -146.23945618]
[50.85053253 -155.73591614]
[49.22416306 -167.40104675]
[53.43502426 -178.27133179]
[62.30981827 -185.64262390]
[60.44466400 -200.52619934]
[58.57950974 -215.40979004]
[56.71435165 -230.29338074]
[54.84919739 -245.17697144]
[52.98404312 -260.06054688]
[51.11888504 -274.94415283]
[49.25373077 -289.82772827]
[47.38857651 -304.71133423]
[33.20474625 -310.60324097]
[23.87989426 -322.80743408]
[21.92235184 -338.04107666]
[27.85869217 -352.20635986]
[40.09206772 -361.49291992]
[55.33176422 -363.40270996]
[69.47837830 -357.42199707]
[78.72653961 -345.15957642]
[80.58853912 -329.91394043]
[74.56351471 -315.78616333]
[62.27216339 -306.57647705]
[64.13732147 -291.69290161]
[66.00247192 -276.80929565]
[67.86763000 -261.92572021]
[69.73278809 -247.04212952]
[71.59793854 -232.15853882]
[73.46309662 -217.27494812]
[75.32825470 -202.39135742]
[77.19340515 -187.50776672]
[92.27244568 -177.27030945]
[95.24049377 -158.96713257]
[83.78514099 -143.98638916]
[86.38986206 -129.21426392]
[88.99458313 -114.44215393]
[91.76815796 -112.09999847]
[93.49239349 -108.25007629]
[93.44917297 -103.42611694]
[91.19848633 -98.47176361]
[92.69200134 -83.54630280]
[95.84167480 -79.82374573]
[96.61291504 -74.05303192]
[93.86884308 -67.84241486]
[94.61653137 -52.86106491]
[95.36421967 -37.87971115]
[96.11190796 -22.89835739]
[96.85959625 -7.91700315]
[97.60728455 7.06435061]
[98.35497284 22.04570389]
[99.66230774 36.98862457]
[101.52746582 51.87221146]
[103.39262390 66.75579834]
[105.25777435 81.63938904]
[116.63317108 90.61416626]
[118.43485260 104.99124146]
[109.62580872 116.49545288]
[111.49096680 131.37904358]
[113.35612488 146.26263428]
[122.74933624 158.99362183]
[116.65464020 172.58419800]
[118.51979828 187.46778870]
[120.38495636 202.35137939]
[122.25010681 217.23497009]
[124.48574066 232.06742859]
[127.09046173 246.83953857]
[129.69519043 261.61166382]
[132.29991150 276.38378906]
[147.85140991 281.84460449]
[158.49064636 294.31066895]
[161.40631104 310.34307861]
[155.90083313 325.58087158]
[143.55436707 335.92709351]
[146.52656555 350.62966919]
[160.93725586 356.13742065]
[170.06417847 368.57540894]
[170.99496460 383.97463989]
[163.43258667 397.42135620]
[149.79019165 404.62472534]
[134.42100525 403.28619385]
[122.22928619 393.83285522]
[117.10536194 379.28125000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[8 111]
[9 110]
[10 109]
[11 108]
[14 107]
[15 106]
[16 105]
[17 104]
[19 102]
[20 101]
[21 100]
[24 97]
[25 96]
[26 95]
[27 94]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[38 84]
[39 83]
[40 79]
[41 78]
[42 77]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
