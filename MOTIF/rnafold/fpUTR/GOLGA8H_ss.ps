%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACAGCUGCCUGGUAGGUGACUGGAGGCCUUGAUUGGUUCUCAUUGAGAUUUUGCUGCUGUGACCCCAACCCUGCCUCCCUCCCCACCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[73.82925415 302.24121094]
[66.32226562 315.53060913]
[53.78775787 324.23971558]
[38.71445465 326.63937378]
[24.09517670 322.25308228]
[12.83259010 311.95178223]
[7.16289234 297.78079224]
[8.21180439 282.55374146]
[15.77106380 269.29400635]
[28.33977509 260.63433838]
[43.42241287 258.29406738]
[47.73307800 243.92680359]
[40.46782303 230.97489929]
[44.63478470 216.34304810]
[58.26919174 208.81040955]
[62.57985687 194.44314575]
[66.89052582 180.07588196]
[63.13713837 165.66195679]
[74.51392365 154.66743469]
[78.82458496 140.30017090]
[77.71028900 132.84732056]
[83.51445770 125.54162598]
[88.28810120 111.32148743]
[83.71765900 100.47944641]
[87.64223480 89.38726044]
[98.01426697 83.83208466]
[103.24588013 69.77398682]
[108.47749329 55.71588516]
[113.70911407 41.65778351]
[118.94072723 27.59968376]
[124.17234802 13.54158306]
[114.65353394 3.15109801]
[110.59972382 -10.27520275]
[112.75724792 -24.06584549]
[120.64249420 -35.50290298]
[132.64880371 -42.35765076]
[146.37351990 -43.32479095]
[152.05761719 -57.20611191]
[157.74171448 -71.08743286]
[163.42582703 -84.96875000]
[156.78927612 -96.82023621]
[158.23138428 -110.12969971]
[166.99243164 -119.99186707]
[179.65769958 -122.90444183]
[185.78831482 -136.59442139]
[191.91894531 -150.28439331]
[198.04956055 -163.97436523]
[191.50245667 -180.09707642]
[198.41787720 -195.69931030]
[214.13090515 -201.44604492]
[219.81500244 -215.32736206]
[213.47750854 -229.80534363]
[219.31141663 -244.49346924]
[233.85559082 -250.67753601]
[248.48121643 -244.68865967]
[254.51116943 -230.07992554]
[248.36799622 -215.51843262]
[233.69631958 -209.64326477]
[228.01222229 -195.76194763]
[234.63883972 -184.58250427]
[233.54061890 -171.43670654]
[224.89825439 -161.21266174]
[211.73953247 -157.84375000]
[205.60891724 -144.15376282]
[199.47828674 -130.46379089]
[193.34767151 -116.77381897]
[200.02427673 -101.43277740]
[193.49684143 -85.66428375]
[177.30714417 -79.28464508]
[171.62304688 -65.40332794]
[165.93893433 -51.52201080]
[160.25483704 -37.64069366]
[170.42185974 -25.19510460]
[172.99423218 -9.23737335]
[167.18638611 5.94675493]
[154.47627258 16.23176575]
[138.23043823 18.77319908]
[132.99882507 32.83129883]
[127.76721191 46.88940048]
[122.53559875 60.94750214]
[117.30397797 75.00559998]
[112.07236481 89.06370544]
[115.35652924 105.43337250]
[102.50823975 116.09513092]
[97.73459625 130.31527710]
[93.19184875 144.61083984]
[88.88117981 158.97810364]
[92.32624054 174.41967773]
[81.25778198 184.38655090]
[76.94711304 198.75381470]
[72.63645172 213.12106323]
[79.87203217 226.91542053]
[75.29573059 241.42445374]
[62.10033798 248.23747253]
[57.78966904 262.60473633]
[69.09273529 272.86160278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 95]
[12 94]
[15 91]
[16 90]
[17 89]
[19 87]
[20 86]
[22 85]
[23 84]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[37 72]
[38 71]
[39 70]
[40 69]
[44 66]
[45 65]
[46 64]
[47 63]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
