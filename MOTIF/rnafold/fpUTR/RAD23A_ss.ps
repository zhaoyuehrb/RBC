%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGUCAGCGCGCGCAUUGCCUGCCCCGGAAGUGGUCGGCGCGCGGCGCGGCGCGCCUGGGCGCUAAGAUGGCGGCGGCGUGAGUUGCAUGUUGUGUGAGGAUCCCGGGGCCGCCGCGUCGCUCGGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.25247192 340.58218384]
[109.21380615 325.61816406]
[105.57990265 319.10485840]
[108.32804108 310.29727173]
[107.63529205 295.31326294]
[106.94253540 280.32928467]
[106.24978638 265.34527588]
[105.21112061 250.38128662]
[103.82709503 235.44528198]
[102.44306946 220.50926208]
[101.05904388 205.57325745]
[99.50260162 190.65422058]
[97.77395630 175.75416565]
[96.04531097 160.85409546]
[94.31666565 145.95404053]
[92.10645294 144.09368896]
[90.53491211 141.20664978]
[90.01202393 137.54492188]
[90.84383392 133.50947571]
[93.18206024 129.60786438]
[92.83559418 114.61186981]
[84.88316345 106.02633667]
[84.74800110 94.32444000]
[92.50000000 85.55751038]
[92.50000000 70.55751038]
[92.50000000 55.55751038]
[92.50000000 40.55751038]
[92.50000000 25.55751038]
[92.50000000 10.55751133]
[92.50000000 -4.44248915]
[90.07228088 -8.28904724]
[89.14748383 -12.30420017]
[89.58565521 -15.97702980]
[91.09008789 -18.89960289]
[93.25673676 -20.81050873]
[94.64076233 -35.74652100]
[96.02478790 -50.68253326]
[97.40881348 -65.61854553]
[87.58797455 -77.70940399]
[89.20433807 -92.83692932]
[100.79164124 -102.12509155]
[102.17566681 -117.06110382]
[103.55969238 -131.99711609]
[104.94371796 -146.93312073]
[106.32774353 -161.86914062]
[107.71176910 -176.80514526]
[109.09579468 -191.74116516]
[110.47982025 -206.67716980]
[111.51848602 -221.64117432]
[112.21124268 -236.62516785]
[112.90399170 -251.60916138]
[113.59674072 -266.59317017]
[114.28949738 -281.57714844]
[114.63596344 -296.57315063]
[114.63596344 -311.57315063]
[114.63596344 -326.57315063]
[114.63596344 -341.57315063]
[114.63596344 -356.57315063]
[104.67127991 -363.25088501]
[99.26059723 -373.82144165]
[99.66262817 -385.56900024]
[105.65919495 -395.53845215]
[115.63956451 -401.27896118]
[116.33232117 -416.26296997]
[117.02507019 -431.24694824]
[117.71782684 -446.23095703]
[118.41057587 -461.21493530]
[113.10219574 -477.31640625]
[127.10490417 -486.87469482]
[140.16596985 -476.06518555]
[133.39457703 -460.52218628]
[132.70181274 -445.53820801]
[132.00906372 -430.55419922]
[131.31631470 -415.57022095]
[130.62356567 -400.58621216]
[143.74356079 -387.91381836]
[143.52156067 -369.35751343]
[129.63597107 -356.57315063]
[129.63597107 -341.57315063]
[129.63597107 -326.57315063]
[129.63597107 -311.57315063]
[129.63597107 -296.57315063]
[132.38464355 -292.56774902]
[132.58447266 -286.77468872]
[129.27348328 -280.88439941]
[128.58073425 -265.90039062]
[127.88798523 -250.91641235]
[127.19523621 -235.93241882]
[126.50247955 -220.94842529]
[129.06324768 -216.82035828]
[128.99531555 -211.02424622]
[125.41583252 -205.29315186]
[124.03180695 -190.35713196]
[122.64778137 -175.42112732]
[121.26375580 -160.48510742]
[119.87973022 -145.54910278]
[118.49570465 -130.61308289]
[117.11167908 -115.67707825]
[115.72766113 -100.74106598]
[125.41097260 -89.48188782]
[124.22013855 -74.31493378]
[112.34482574 -64.23451996]
[110.96080017 -49.29850769]
[109.57677460 -34.36249542]
[108.19274902 -19.42648315]
[107.50000000 -4.44248915]
[107.50000000 10.55751133]
[107.50000000 25.55751038]
[107.50000000 40.55751038]
[107.50000000 55.55751038]
[107.50000000 70.55751038]
[107.50000000 85.55751038]
[116.27268219 99.81204224]
[107.83158875 114.26540375]
[108.17805481 129.26139832]
[109.21672058 144.22540283]
[110.94537354 159.12545776]
[112.67401886 174.02551270]
[114.40266418 188.92556763]
[118.53293610 197.17582703]
[115.99505615 204.18922424]
[117.37908173 219.12524414]
[118.76310730 234.06124878]
[120.14713287 248.99726868]
[123.72660828 254.72836304]
[123.79454041 260.52447510]
[121.23377991 264.65252686]
[121.92652893 279.63653564]
[122.61928558 294.62051392]
[123.31203461 309.60452271]
[124.17780304 324.57949829]
[125.21646881 339.54351807]
[134.82351685 352.83398438]
[127.87115479 367.68646240]
[111.51136780 368.82202148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 124]
[9 123]
[10 122]
[11 121]
[12 119]
[13 118]
[14 117]
[15 116]
[20 115]
[21 114]
[24 112]
[25 111]
[26 110]
[27 109]
[28 108]
[29 107]
[30 106]
[35 105]
[36 104]
[37 103]
[38 102]
[41 99]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
