%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCGCCGCUCGCUCACCUGCGCUCCCGCCCGCCCCUCGGUGCGCGCCCGGCCCGCCAGCCGCCGCCGCCCGCACCCCGAGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[77.37849426 233.64935303]
[70.26527405 234.01969910]
[63.75701904 247.53422546]
[57.24876022 261.04876709]
[59.01317596 277.35272217]
[45.61783218 286.81298828]
[30.84271049 279.69766235]
[29.88718987 263.32638550]
[43.73423004 254.54049683]
[50.24248505 241.02597046]
[56.75074005 227.51144409]
[51.51363754 204.94364929]
[70.09269714 189.99934387]
[73.68242645 175.43522644]
[77.27216339 160.87109375]
[80.86190033 146.30696106]
[84.45163727 131.74284363]
[76.82160950 126.68561554]
[70.74613190 119.83862305]
[66.63266754 111.66107941]
[64.75710297 102.70144653]
[65.24523163 93.56063080]
[51.41193771 87.76062775]
[37.57864380 81.96062469]
[24.38366318 90.12592316]
[8.91178894 88.94240570]
[-2.88772941 78.86515808]
[-6.47773504 63.76908112]
[-0.47779804 49.45893097]
[12.80498314 41.43725204]
[28.26310921 42.78853989]
[39.95261383 52.99320221]
[43.37864304 68.12733459]
[57.21193695 73.92733765]
[71.04522705 79.72733307]
[77.92591858 72.39393616]
[86.59327698 67.29496765]
[96.34576416 64.84311676]
[106.39402008 65.23685455]
[115.92475891 68.44430542]
[124.16654205 74.20585632]
[136.51130676 65.68489075]
[148.85606384 57.16391754]
[161.20082092 48.64294434]
[173.54557800 40.12197495]
[185.89033508 31.60100174]
[192.85237122 17.39393806]
[207.72200012 16.53169632]
[220.06675720 8.01072502]
[227.44828796 -8.74977207]
[244.87812805 -9.71652508]
[256.92141724 -18.65851212]
[268.96469116 -27.60050011]
[281.00799561 -36.54248810]
[279.86523438 -51.92746735]
[287.24169922 -65.47705078]
[300.78359985 -72.86762238]
[316.16973877 -71.74086761]
[328.49050903 -62.45633698]
[333.81436157 -47.97668457]
[330.44244385 -32.92232132]
[319.45080566 -22.09703636]
[304.34674072 -18.95513725]
[289.94998169 -24.49919510]
[277.90667725 -15.55720806]
[265.86340332 -6.61522102]
[253.82011414 2.32676601]
[251.68145752 14.36888790]
[241.53436279 21.89625168]
[228.58772278 20.35548401]
[216.24296570 28.87645531]
[210.16390991 42.47404099]
[194.41130066 43.94575882]
[182.06654358 52.46673203]
[169.72178650 60.98770142]
[157.37702942 69.50867462]
[145.03227234 78.02964783]
[132.68751526 86.55061340]
[134.04057312 109.51836395]
[120.97077942 128.45323181]
[99.01576233 135.33258057]
[95.42602539 149.89669800]
[91.83628845 164.46083069]
[88.24655914 179.02496338]
[84.65682220 193.58908081]
[90.06218719 198.77481079]
[93.45736694 205.39282227]
[94.50174713 212.70416260]
[93.11508179 219.90487671]
[89.48256683 226.21440125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[22 35]
[23 34]
[24 33]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[48 71]
[49 70]
[51 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
