%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUUAUAUGUCUGGUAGAAUUUGGCUGUGAAUCCAUCUGGUCCAGGGCCUUUUCUGGUUGGGGCUCCAUGGUUCCUAGAGGCAAGGAAGAAGAGCCACCAGUCAAAUAGGUUUCAGCACCUCCAACUCCAACAUCUUCAAAGCAGCGACUGGGAAGAAAAAUAAUCCUUCUGACAACACAUAUUCAGACACAU\
) } def
/len { sequence length } bind def

/coor [
[105.40200806 445.22225952]
[116.83665466 434.55532837]
[115.87560272 419.58615112]
[114.91455078 404.61697388]
[103.59456635 395.00482178]
[102.40667725 379.83764648]
[112.56554413 368.02935791]
[111.60449219 353.06018066]
[110.64344025 338.09100342]
[109.68238831 323.12182617]
[108.72132874 308.15264893]
[107.76027679 293.18347168]
[97.25571442 279.13229370]
[105.54261780 262.69461060]
[104.34176636 247.74276733]
[92.86917114 238.31327820]
[91.43833923 223.16708374]
[101.40664673 211.19750977]
[100.20578766 196.24565125]
[99.00493622 181.29379272]
[97.80408478 166.34194946]
[80.31727600 163.39294434]
[64.23532867 155.91926575]
[50.70610046 144.45433044]
[40.69523621 129.81645203]
[26.61820984 134.99691772]
[12.54118252 140.17739868]
[-1.53584349 145.35787964]
[-11.81467628 157.38517761]
[-26.43101311 154.51953125]
[-40.50803757 159.69999695]
[-44.71538925 172.50288391]
[-55.37509537 180.42607117]
[-68.45811462 180.75427246]
[-79.17787933 173.59169006]
[-93.33612823 178.54588318]
[-103.61713409 191.32214355]
[-119.77849579 188.53962708]
[-125.19479370 173.06074524]
[-114.29419708 160.80885315]
[-98.29031372 164.38763428]
[-84.13206482 159.43344116]
[-77.49481964 143.98684692]
[-61.42527390 137.99633789]
[-45.68851471 145.62297058]
[-31.61148834 140.44250488]
[-22.33953857 128.78573608]
[-6.71631908 131.28085327]
[7.36070728 126.10037231]
[21.43773270 120.91989899]
[35.51475906 115.73941803]
[33.68810654 102.96791077]
[34.36651611 90.08428192]
[37.52436066 77.57523346]
[43.04234695 65.91333008]
[50.71201706 55.53911591]
[60.24363708 46.84449768]
[52.67433929 33.89437485]
[45.10504150 20.94425011]
[37.53574371 7.99412584]
[29.96644592 -4.95599842]
[22.39714622 -17.90612221]
[14.82784843 -30.85624695]
[7.15500927 -43.74529266]
[-0.62087941 -56.57243729]
[-8.39676762 -69.39957428]
[-16.17265701 -82.22671509]
[-23.94854546 -95.05386353]
[-36.44861221 -94.44406891]
[-47.95316315 -99.18392181]
[-56.29843903 -108.31546021]
[-59.94324493 -120.06120300]
[-58.25334549 -132.16987610]
[-51.61088562 -142.34791565]
[-58.97164917 -155.41770935]
[-66.33241272 -168.48748779]
[-73.69317627 -181.55726624]
[-81.05393982 -194.62704468]
[-96.45634460 -197.32885742]
[-106.47895813 -209.33224487]
[-106.38940430 -224.96955872]
[-96.22997284 -236.85737610]
[-80.79762268 -239.38258362]
[-67.37905121 -231.35289001]
[-62.31009674 -216.55966187]
[-67.98415375 -201.98780823]
[-60.62339401 -188.91802979]
[-53.26263046 -175.84825134]
[-45.90186691 -162.77847290]
[-38.54110336 -149.70867920]
[-20.93246269 -148.49969482]
[-7.44969893 -136.86737061]
[-3.60577488 -119.31914520]
[-11.12140369 -102.82975006]
[-3.34551501 -90.00260925]
[4.43037367 -77.17546844]
[12.20626163 -64.34832764]
[19.98215103 -51.52118301]
[26.14569283 -47.42590332]
[27.77797318 -38.42554474]
[35.34727097 -25.47542191]
[42.91656876 -12.52529716]
[50.48586655 0.42482767]
[58.05516434 13.37495232]
[65.62446594 26.32507706]
[73.19376373 39.27519989]
[90.55825806 32.84813690]
[109.41162872 31.39608192]
[128.32690430 35.24404526]
[145.81379700 44.30774689]
[154.19725037 31.86919785]
[162.58071899 19.43064690]
[170.96418762 6.99209595]
[167.69743347 -8.47088718]
[176.39135742 -21.66903877]
[191.88801575 -24.77212906]
[204.99349976 -15.93914986]
[207.93258667 -0.41055176]
[198.96153259 12.60082436]
[183.40274048 15.37555981]
[175.01927185 27.81410980]
[166.63580322 40.25265884]
[158.25234985 52.69121170]
[161.72137451 59.34070587]
[175.02037048 52.40262985]
[188.31936646 45.46455765]
[201.61834717 38.52648163]
[214.91734314 31.58840942]
[228.21644592 24.65055466]
[235.15408325 37.94977570]
[221.85540771 44.88739777]
[208.55642700 51.82547379]
[195.25743103 58.76354599]
[181.95845032 65.70162201]
[168.65945435 72.63969421]
[172.12849426 79.28919220]
[187.12657166 79.52960968]
[202.12463379 79.77002716]
[217.12271118 80.01044464]
[232.12078857 80.25086212]
[243.42709351 69.53614807]
[258.63385010 69.99362183]
[268.77902222 80.83848572]
[283.77709961 81.07890320]
[294.95431519 69.90547943]
[310.75836182 69.99170685]
[321.81298828 81.28642273]
[321.55966187 97.08868408]
[310.14871216 108.02327728]
[294.35000610 107.60291290]
[283.53668213 96.07698059]
[268.53860474 95.83656311]
[258.05105591 106.35069275]
[242.83744812 106.32052612]
[231.88037109 95.24893188]
[216.88229370 95.00851440]
[201.88421631 94.76809692]
[186.88615417 94.52767944]
[171.88807678 94.28726196]
[171.49218750 103.80188751]
[169.85165405 113.11240387]
[167.01329041 122.05793762]
[163.04444885 130.48638916]
[158.03153992 138.25697327]
[152.07818604 145.24263000]
[145.30316162 151.33203125]
[137.83804321 156.43138123]
[129.82469177 160.46582031]
[121.41256714 163.38044739]
[112.75593567 165.14108276]
[113.95678711 180.09294128]
[115.15764618 195.04479980]
[116.35849762 209.99665833]
[128.10935974 220.22186279]
[129.11421204 235.40226746]
[119.29361725 246.54191589]
[120.49447632 261.49377441]
[129.79653931 270.44052124]
[130.48257446 282.92700195]
[122.72946167 292.22241211]
[123.69051361 307.19158936]
[124.65156555 322.16076660]
[125.61261749 337.12994385]
[126.57366943 352.09912109]
[127.53472900 367.06832886]
[139.12019348 377.48056030]
[139.88160706 392.67510986]
[129.88372803 403.65591431]
[130.84478760 418.62512207]
[131.80583191 433.59429932]
[144.51065063 442.71139526]
[148.33264160 457.87472534]
[141.46717834 471.92459106]
[127.15591431 478.22714233]
[112.15620422 473.80642700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 190]
[3 189]
[4 188]
[7 185]
[8 184]
[9 183]
[10 182]
[11 181]
[12 180]
[14 177]
[15 176]
[18 173]
[19 172]
[20 171]
[21 170]
[25 51]
[26 50]
[27 49]
[28 48]
[30 46]
[31 45]
[35 42]
[36 41]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[110 123]
[111 122]
[112 121]
[113 120]
[136 159]
[137 158]
[138 157]
[139 156]
[140 155]
[143 152]
[144 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
