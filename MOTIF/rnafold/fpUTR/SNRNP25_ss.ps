%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUCCUGCGCGUGCGCGCUUGGCCUCCCUAGUGCGGGCUGGCAGUGCGGGCAGAGCCCGGCUGAGAGGGGCGGCCCUGGAGGAGACGGAGGCCGCGGGUGGGCCCGAGGCGCAAGAGGAAGAUGAGGACGAAGAAGAGGCGCUGCCGCACUCCGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[14.37678528 331.97808838]
[15.80969334 339.69326782]
[15.10092163 347.48120117]
[12.31809330 354.76043701]
[7.68310547 360.99163818]
[1.55450571 365.71728516]
[-5.60021448 368.59545898]
[-13.24026585 369.42434692]
[-20.79243469 368.15652466]
[-28.79050064 380.84634399]
[-36.78856659 393.53613281]
[-44.78663254 406.22592163]
[-44.88149261 422.62478638]
[-59.26275253 430.50585938]
[-73.13620758 421.76177979]
[-72.23004150 405.38766479]
[-57.47642899 398.22784424]
[-49.47836304 385.53805542]
[-41.48029709 372.84826660]
[-33.48223114 360.15847778]
[-40.95228958 338.91589355]
[-30.31101418 318.77218628]
[-8.04373360 312.83334351]
[-1.83657241 299.17788696]
[4.37058830 285.52246094]
[10.57774925 271.86700439]
[16.78491020 258.21154785]
[22.99207115 244.55612183]
[16.81663895 233.21459961]
[18.33898544 220.19462585]
[27.22450066 210.29348755]
[40.38446045 207.28950500]
[46.85525131 193.75698853]
[53.32604218 180.22448730]
[59.79683685 166.69197083]
[66.26762390 153.15945435]
[72.73841858 139.62695312]
[79.20920563 126.09443665]
[68.03735352 109.56899261]
[68.29042053 89.62314606]
[55.44791794 81.87265778]
[40.28689575 85.44773102]
[27.37318039 77.40468597]
[24.05832291 62.92893600]
[11.21581841 55.17844772]
[-1.62668490 47.42795563]
[-14.46918869 39.67746353]
[-23.48192215 37.90785217]
[-27.48351479 31.65010834]
[-40.17330933 23.65204239]
[-52.86310577 15.65397644]
[-65.55290222 7.65591002]
[-78.24269867 -0.34215668]
[-94.86632538 -3.67253113]
[-96.26798248 -20.56843948]
[-80.42038727 -26.59256935]
[-70.24463654 -13.03195286]
[-57.55483627 -5.03388643]
[-44.86503983 2.96417999]
[-32.17524338 10.96224594]
[-19.48544884 18.96031380]
[-6.71869802 26.83496094]
[6.12380552 34.58545303]
[18.96630859 42.33594131]
[31.80881310 50.08643341]
[46.16127014 46.27296448]
[59.29580307 53.95011520]
[63.19840622 69.03015137]
[76.04090881 76.78063965]
[81.02986145 70.00464630]
[87.92508698 64.37364197]
[96.44244385 60.41614914]
[98.47241211 45.55414581]
[100.50238037 30.69213867]
[102.53234863 15.83013248]
[104.56231689 0.96812630]
[106.59228516 -13.89387989]
[108.47805786 -28.77486992]
[110.21945190 -43.67344666]
[111.96084595 -58.57202148]
[101.09880066 -69.82146454]
[100.06056213 -85.42454529]
[109.33637238 -98.01396179]
[124.54645538 -101.64538574]
[138.50909424 -94.60415649]
[144.63154602 -80.21494293]
[140.02297974 -65.27188110]
[126.85942078 -56.83062744]
[125.11802673 -41.93205261]
[123.37663269 -27.03347588]
[125.73519135 -19.99009132]
[121.45429230 -11.86391068]
[119.42432404 2.99809575]
[117.39435577 17.86010170]
[115.36438751 32.72210693]
[113.33441925 47.58411407]
[111.30444336 62.44612122]
[124.57587433 69.43677521]
[135.68403625 59.35665512]
[146.79219055 49.27653885]
[151.28131104 33.50378036]
[167.24928284 29.76804161]
[178.26963806 41.91233063]
[173.00558472 57.44364548]
[156.87231445 60.38469696]
[145.76414490 70.46481323]
[134.65599060 80.54492950]
[135.47578430 87.48961639]
[134.99972534 94.11722565]
[133.36370850 100.19957733]
[147.95938110 103.65881348]
[162.55505371 107.11805725]
[177.15072632 110.57729340]
[191.74639893 114.03652954]
[198.38925171 100.51543427]
[207.87469482 88.81183624]
[219.72694397 79.51279449]
[233.35147095 73.08474731]
[248.06489563 69.85011292]
[263.12918091 69.97114563]
[277.78875732 73.44177246]
[291.30822754 80.08790588]
[303.00952148 89.57618713]
[312.30569458 101.43067932]
[318.73043823 115.05676270]
[321.96151733 129.77098083]
[321.83685303 144.83523560]
[318.36267090 159.49395752]
[311.71325684 173.01184082]
[302.22213745 184.71083069]
[290.36538696 194.00411987]
[276.73773193 200.42556763]
[262.02276611 203.65307617]
[246.95851135 203.52474976]
[232.30064392 200.04701233]
[218.78437805 193.39433289]
[207.08767700 183.90037537]
[197.79725647 172.04138184]
[191.37911987 158.41218567]
[188.15518188 143.69641113]
[188.28715515 128.63220215]
[173.69148254 125.17296600]
[159.09580994 121.71372986]
[144.50013733 118.25449371]
[129.90446472 114.79524994]
[114.39289093 130.10018921]
[92.74172211 132.56523132]
[86.27092743 146.09773254]
[79.80014038 159.63024902]
[73.32934570 173.16276550]
[66.85855865 186.69526672]
[60.38776398 200.22778320]
[53.91697311 213.76029968]
[60.04617310 230.11965942]
[52.61595154 245.55735779]
[36.64751434 250.76327515]
[30.44035339 264.41873169]
[24.23319435 278.07415771]
[18.02603340 291.72961426]
[11.81887150 305.38504028]
[5.61171103 319.04049683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 20]
[10 19]
[11 18]
[12 17]
[23 161]
[24 160]
[25 159]
[26 158]
[27 157]
[28 156]
[32 153]
[33 152]
[34 151]
[35 150]
[36 149]
[37 148]
[38 147]
[40 69]
[41 68]
[44 65]
[45 64]
[46 63]
[47 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[77 92]
[78 90]
[79 89]
[80 88]
[98 107]
[99 106]
[100 105]
[110 145]
[111 144]
[112 143]
[113 142]
[114 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
